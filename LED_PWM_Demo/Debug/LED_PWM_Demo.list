
LED_PWM_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008044  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080081d4  080081d4  000181d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800827c  0800827c  000201d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800827c  0800827c  0001827c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008284  08008284  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008284  08008284  00018284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008288  08008288  00018288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800828c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e08  200001d0  0800845c  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fd8  0800845c  00021fd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   000133f7  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003376  00000000  00000000  0003363a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  000369b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e04  00000000  00000000  00037c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023dd1  00000000  00000000  00038a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001660c  00000000  00000000  0005c7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdd18  00000000  00000000  00072df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051f4  00000000  00000000  00140b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00145d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081bc 	.word	0x080081bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	080081bc 	.word	0x080081bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	int duty = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fc2b 	bl	8000de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f84d 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f981 	bl	8000894 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000592:	f000 f8b3 	bl	80006fc <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000596:	f006 fc31 	bl	8006dfc <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 800059a:	f000 f8e5 	bl	8000768 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800059e:	2100      	movs	r1, #0
 80005a0:	481e      	ldr	r0, [pc, #120]	; (800061c <main+0xa0>)
 80005a2:	f002 fe9f 	bl	80032e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80005a6:	2104      	movs	r1, #4
 80005a8:	481c      	ldr	r0, [pc, #112]	; (800061c <main+0xa0>)
 80005aa:	f002 fe9b 	bl	80032e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80005ae:	2108      	movs	r1, #8
 80005b0:	481a      	ldr	r0, [pc, #104]	; (800061c <main+0xa0>)
 80005b2:	f002 fe97 	bl	80032e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80005b6:	210c      	movs	r1, #12
 80005b8:	4818      	ldr	r0, [pc, #96]	; (800061c <main+0xa0>)
 80005ba:	f002 fe93 	bl	80032e4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  htim4.Instance->CCR1 = duty;
 80005be:	4b17      	ldr	r3, [pc, #92]	; (800061c <main+0xa0>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	635a      	str	r2, [r3, #52]	; 0x34
	  htim4.Instance->CCR2 = 100-duty;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <main+0xa0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	639a      	str	r2, [r3, #56]	; 0x38
	  htim4.Instance->CCR3 = duty;
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <main+0xa0>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	63da      	str	r2, [r3, #60]	; 0x3c
	  htim4.Instance->CCR4 = 100-duty;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <main+0xa0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    snprintf (SendBuffer,BUFSIZE,"USB:0.1 secs. Duty=%d%%\r\n",duty);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <main+0xa4>)
 80005ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ee:	480d      	ldr	r0, [pc, #52]	; (8000624 <main+0xa8>)
 80005f0:	f007 f92c 	bl	800784c <sniprintf>
	    CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <main+0xa8>)
 80005f6:	f7ff fdeb 	bl	80001d0 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4619      	mov	r1, r3
 80005fe:	4809      	ldr	r0, [pc, #36]	; (8000624 <main+0xa8>)
 8000600:	f006 fcba 	bl	8006f78 <CDC_Transmit_FS>

	      duty = (duty + 1) ;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3301      	adds	r3, #1
 8000608:	607b      	str	r3, [r7, #4]
	      if (duty > 100 )
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2b64      	cmp	r3, #100	; 0x64
 800060e:	dd01      	ble.n	8000614 <main+0x98>
	        duty = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]


	    HAL_Delay(100);
 8000614:	2064      	movs	r0, #100	; 0x64
 8000616:	f000 fc55 	bl	8000ec4 <HAL_Delay>
  {
 800061a:	e7d0      	b.n	80005be <main+0x42>
 800061c:	20000244 	.word	0x20000244
 8000620:	080081d4 	.word	0x080081d4
 8000624:	2000028c 	.word	0x2000028c

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	; 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f007 f93c 	bl	80078b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	4a27      	ldr	r2, [pc, #156]	; (80006f4 <SystemClock_Config+0xcc>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	; 0x40
 800065c:	4b25      	ldr	r3, [pc, #148]	; (80006f4 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <SystemClock_Config+0xd0>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000698:	2304      	movs	r3, #4
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800069c:	23a8      	movs	r3, #168	; 0xa8
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a4:	2307      	movs	r3, #7
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 f877 	bl	80027a0 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b8:	f000 fa1a 	bl	8000af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2302      	movs	r3, #2
 80006c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2105      	movs	r1, #5
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fad8 	bl	8002c90 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006e6:	f000 fa03 	bl	8000af0 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	; 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_SPI1_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	; (8000764 <MX_SPI1_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_SPI1_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_SPI1_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_SPI1_Init+0x64>)
 800074e:	f002 fc97 	bl	8003080 <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f9ca 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200001ec 	.word	0x200001ec
 8000764:	40013000 	.word	0x40013000

08000768 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08e      	sub	sp, #56	; 0x38
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]
 8000796:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000798:	4b3c      	ldr	r3, [pc, #240]	; (800088c <MX_TIM4_Init+0x124>)
 800079a:	4a3d      	ldr	r2, [pc, #244]	; (8000890 <MX_TIM4_Init+0x128>)
 800079c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 800079e:	4b3b      	ldr	r3, [pc, #236]	; (800088c <MX_TIM4_Init+0x124>)
 80007a0:	2253      	movs	r2, #83	; 0x53
 80007a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a4:	4b39      	ldr	r3, [pc, #228]	; (800088c <MX_TIM4_Init+0x124>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80007aa:	4b38      	ldr	r3, [pc, #224]	; (800088c <MX_TIM4_Init+0x124>)
 80007ac:	2263      	movs	r2, #99	; 0x63
 80007ae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b0:	4b36      	ldr	r3, [pc, #216]	; (800088c <MX_TIM4_Init+0x124>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b6:	4b35      	ldr	r3, [pc, #212]	; (800088c <MX_TIM4_Init+0x124>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007bc:	4833      	ldr	r0, [pc, #204]	; (800088c <MX_TIM4_Init+0x124>)
 80007be:	f002 fce8 	bl	8003192 <HAL_TIM_Base_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80007c8:	f000 f992 	bl	8000af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d6:	4619      	mov	r1, r3
 80007d8:	482c      	ldr	r0, [pc, #176]	; (800088c <MX_TIM4_Init+0x124>)
 80007da:	f002 ff09 	bl	80035f0 <HAL_TIM_ConfigClockSource>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80007e4:	f000 f984 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007e8:	4828      	ldr	r0, [pc, #160]	; (800088c <MX_TIM4_Init+0x124>)
 80007ea:	f002 fd21 	bl	8003230 <HAL_TIM_PWM_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80007f4:	f000 f97c 	bl	8000af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	4619      	mov	r1, r3
 8000806:	4821      	ldr	r0, [pc, #132]	; (800088c <MX_TIM4_Init+0x124>)
 8000808:	f003 fac6 	bl	8003d98 <HAL_TIMEx_MasterConfigSynchronization>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000812:	f000 f96d 	bl	8000af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000816:	2360      	movs	r3, #96	; 0x60
 8000818:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	4619      	mov	r1, r3
 800082c:	4817      	ldr	r0, [pc, #92]	; (800088c <MX_TIM4_Init+0x124>)
 800082e:	f002 fe21 	bl	8003474 <HAL_TIM_PWM_ConfigChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000838:	f000 f95a 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2204      	movs	r2, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4812      	ldr	r0, [pc, #72]	; (800088c <MX_TIM4_Init+0x124>)
 8000844:	f002 fe16 	bl	8003474 <HAL_TIM_PWM_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800084e:	f000 f94f 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2208      	movs	r2, #8
 8000856:	4619      	mov	r1, r3
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <MX_TIM4_Init+0x124>)
 800085a:	f002 fe0b 	bl	8003474 <HAL_TIM_PWM_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8000864:	f000 f944 	bl	8000af0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	220c      	movs	r2, #12
 800086c:	4619      	mov	r1, r3
 800086e:	4807      	ldr	r0, [pc, #28]	; (800088c <MX_TIM4_Init+0x124>)
 8000870:	f002 fe00 	bl	8003474 <HAL_TIM_PWM_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 800087a:	f000 f939 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800087e:	4803      	ldr	r0, [pc, #12]	; (800088c <MX_TIM4_Init+0x124>)
 8000880:	f000 f9ce 	bl	8000c20 <HAL_TIM_MspPostInit>

}
 8000884:	bf00      	nop
 8000886:	3738      	adds	r7, #56	; 0x38
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000244 	.word	0x20000244
 8000890:	40000800 	.word	0x40000800

08000894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	; 0x30
 8000898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	4b89      	ldr	r3, [pc, #548]	; (8000ad4 <MX_GPIO_Init+0x240>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a88      	ldr	r2, [pc, #544]	; (8000ad4 <MX_GPIO_Init+0x240>)
 80008b4:	f043 0310 	orr.w	r3, r3, #16
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b86      	ldr	r3, [pc, #536]	; (8000ad4 <MX_GPIO_Init+0x240>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0310 	and.w	r3, r3, #16
 80008c2:	61bb      	str	r3, [r7, #24]
 80008c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	4b82      	ldr	r3, [pc, #520]	; (8000ad4 <MX_GPIO_Init+0x240>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a81      	ldr	r2, [pc, #516]	; (8000ad4 <MX_GPIO_Init+0x240>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b7f      	ldr	r3, [pc, #508]	; (8000ad4 <MX_GPIO_Init+0x240>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
 80008e6:	4b7b      	ldr	r3, [pc, #492]	; (8000ad4 <MX_GPIO_Init+0x240>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a7a      	ldr	r2, [pc, #488]	; (8000ad4 <MX_GPIO_Init+0x240>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b78      	ldr	r3, [pc, #480]	; (8000ad4 <MX_GPIO_Init+0x240>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b74      	ldr	r3, [pc, #464]	; (8000ad4 <MX_GPIO_Init+0x240>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a73      	ldr	r2, [pc, #460]	; (8000ad4 <MX_GPIO_Init+0x240>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b71      	ldr	r3, [pc, #452]	; (8000ad4 <MX_GPIO_Init+0x240>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b6d      	ldr	r3, [pc, #436]	; (8000ad4 <MX_GPIO_Init+0x240>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a6c      	ldr	r2, [pc, #432]	; (8000ad4 <MX_GPIO_Init+0x240>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b6a      	ldr	r3, [pc, #424]	; (8000ad4 <MX_GPIO_Init+0x240>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b66      	ldr	r3, [pc, #408]	; (8000ad4 <MX_GPIO_Init+0x240>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a65      	ldr	r2, [pc, #404]	; (8000ad4 <MX_GPIO_Init+0x240>)
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b63      	ldr	r3, [pc, #396]	; (8000ad4 <MX_GPIO_Init+0x240>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0308 	and.w	r3, r3, #8
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2108      	movs	r1, #8
 8000956:	4860      	ldr	r0, [pc, #384]	; (8000ad8 <MX_GPIO_Init+0x244>)
 8000958:	f000 fd86 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	2101      	movs	r1, #1
 8000960:	485e      	ldr	r0, [pc, #376]	; (8000adc <MX_GPIO_Init+0x248>)
 8000962:	f000 fd81 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2110      	movs	r1, #16
 800096a:	485d      	ldr	r0, [pc, #372]	; (8000ae0 <MX_GPIO_Init+0x24c>)
 800096c:	f000 fd7c 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000970:	2308      	movs	r3, #8
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 031c 	add.w	r3, r7, #28
 8000984:	4619      	mov	r1, r3
 8000986:	4854      	ldr	r0, [pc, #336]	; (8000ad8 <MX_GPIO_Init+0x244>)
 8000988:	f000 fbd2 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800098c:	2301      	movs	r3, #1
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	484e      	ldr	r0, [pc, #312]	; (8000adc <MX_GPIO_Init+0x248>)
 80009a4:	f000 fbc4 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009a8:	2308      	movs	r3, #8
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b8:	2305      	movs	r3, #5
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4846      	ldr	r0, [pc, #280]	; (8000adc <MX_GPIO_Init+0x248>)
 80009c4:	f000 fbb4 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009cc:	4b45      	ldr	r3, [pc, #276]	; (8000ae4 <MX_GPIO_Init+0x250>)
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4843      	ldr	r0, [pc, #268]	; (8000ae8 <MX_GPIO_Init+0x254>)
 80009dc:	f000 fba8 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009e0:	2310      	movs	r3, #16
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009f0:	2306      	movs	r3, #6
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	483b      	ldr	r0, [pc, #236]	; (8000ae8 <MX_GPIO_Init+0x254>)
 80009fc:	f000 fb98 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a00:	2304      	movs	r3, #4
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4836      	ldr	r0, [pc, #216]	; (8000aec <MX_GPIO_Init+0x258>)
 8000a14:	f000 fb8c 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a2a:	2305      	movs	r3, #5
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	482d      	ldr	r0, [pc, #180]	; (8000aec <MX_GPIO_Init+0x258>)
 8000a36:	f000 fb7b 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a3a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a4c:	2306      	movs	r3, #6
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4821      	ldr	r0, [pc, #132]	; (8000adc <MX_GPIO_Init+0x248>)
 8000a58:	f000 fb6a 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8000a5c:	2310      	movs	r3, #16
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	481b      	ldr	r0, [pc, #108]	; (8000ae0 <MX_GPIO_Init+0x24c>)
 8000a74:	f000 fb5c 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a78:	2320      	movs	r3, #32
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4815      	ldr	r0, [pc, #84]	; (8000ae0 <MX_GPIO_Init+0x24c>)
 8000a8c:	f000 fb50 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a90:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a96:	2312      	movs	r3, #18
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480f      	ldr	r0, [pc, #60]	; (8000aec <MX_GPIO_Init+0x258>)
 8000aae:	f000 fb3f 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_GPIO_Init+0x250>)
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_GPIO_Init+0x244>)
 8000ac6:	f000 fb33 	bl	8001130 <HAL_GPIO_Init>

}
 8000aca:	bf00      	nop
 8000acc:	3730      	adds	r7, #48	; 0x30
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40020800 	.word	0x40020800
 8000ae0:	40020c00 	.word	0x40020c00
 8000ae4:	10120000 	.word	0x10120000
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40020400 	.word	0x40020400

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <Error_Handler+0x8>
	...

08000afc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b10:	6453      	str	r3, [r2, #68]	; 0x44
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b3a:	2007      	movs	r0, #7
 8000b3c:	f000 fab6 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800

08000b4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <HAL_SPI_MspInit+0x84>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12b      	bne.n	8000bc6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <HAL_SPI_MspInit+0x88>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <HAL_SPI_MspInit+0x88>)
 8000b78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_SPI_MspInit+0x88>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_SPI_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <HAL_SPI_MspInit+0x88>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_SPI_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ba6:	23e0      	movs	r3, #224	; 0xe0
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bb6:	2305      	movs	r3, #5
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <HAL_SPI_MspInit+0x8c>)
 8000bc2:	f000 fab5 	bl	8001130 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3728      	adds	r7, #40	; 0x28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40013000 	.word	0x40013000
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000

08000bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <HAL_TIM_Base_MspInit+0x3c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d10d      	bne.n	8000c0a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_TIM_Base_MspInit+0x40>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a09      	ldr	r2, [pc, #36]	; (8000c1c <HAL_TIM_Base_MspInit+0x40>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <HAL_TIM_Base_MspInit+0x40>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40000800 	.word	0x40000800
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <HAL_TIM_MspPostInit+0x68>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d11e      	bne.n	8000c80 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_TIM_MspPostInit+0x6c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <HAL_TIM_MspPostInit+0x6c>)
 8000c4c:	f043 0308 	orr.w	r3, r3, #8
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_TIM_MspPostInit+0x6c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0308 	and.w	r3, r3, #8
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c5e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_TIM_MspPostInit+0x70>)
 8000c7c:	f000 fa58 	bl	8001130 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40000800 	.word	0x40000800
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020c00 	.word	0x40020c00

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <NMI_Handler+0x4>

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce0:	f000 f8d0 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <OTG_FS_IRQHandler+0x10>)
 8000cee:	f000 fd24 	bl	800173a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20001868 	.word	0x20001868

08000cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d04:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <_sbrk+0x5c>)
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <_sbrk+0x60>)
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <_sbrk+0x64>)
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <_sbrk+0x68>)
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d207      	bcs.n	8000d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d2c:	f006 fdca 	bl	80078c4 <__errno>
 8000d30:	4603      	mov	r3, r0
 8000d32:	220c      	movs	r2, #12
 8000d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	e009      	b.n	8000d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <_sbrk+0x64>)
 8000d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20020000 	.word	0x20020000
 8000d5c:	00000400 	.word	0x00000400
 8000d60:	2000038c 	.word	0x2000038c
 8000d64:	20001fd8 	.word	0x20001fd8

08000d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d92:	490e      	ldr	r1, [pc, #56]	; (8000dcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d94:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da8:	4c0b      	ldr	r4, [pc, #44]	; (8000dd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000db6:	f7ff ffd7 	bl	8000d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f006 fd89 	bl	80078d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fbdd 	bl	800057c <main>
  bx  lr    
 8000dc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8000dd0:	0800828c 	.word	0x0800828c
  ldr r2, =_sbss
 8000dd4:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8000dd8:	20001fd8 	.word	0x20001fd8

08000ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <HAL_Init+0x40>)
 8000dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_Init+0x40>)
 8000df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_Init+0x40>)
 8000e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 f94f 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 f808 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e14:	f7ff fe72 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023c00 	.word	0x40023c00

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x54>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x58>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f967 	bl	8001116 <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f000 f92f 	bl	80010c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_InitTick+0x5c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000390 	.word	0x20000390

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000390 	.word	0x20000390

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_Delay+0x44>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffde 	bl	8000eac <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0b      	blt.n	8000f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f003 021f 	and.w	r2, r3, #31
 8000f88:	4907      	ldr	r1, [pc, #28]	; (8000fa8 <__NVIC_EnableIRQ+0x38>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001078:	d301      	bcc.n	800107e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2301      	movs	r3, #1
 800107c:	e00f      	b.n	800109e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <SysTick_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001086:	210f      	movs	r1, #15
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f7ff ff8e 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <SysTick_Config+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SysTick_Config+0x40>)
 8001098:	2207      	movs	r2, #7
 800109a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff29 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d4:	f7ff ff3e 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 80010d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	6978      	ldr	r0, [r7, #20]
 80010e0:	f7ff ff8e 	bl	8001000 <NVIC_EncodePriority>
 80010e4:	4602      	mov	r2, r0
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff5d 	bl	8000fac <__NVIC_SetPriority>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	4603      	mov	r3, r0
 8001102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff31 	bl	8000f70 <__NVIC_EnableIRQ>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ffa2 	bl	8001068 <SysTick_Config>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	e16b      	b.n	8001424 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800114c:	2201      	movs	r2, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	429a      	cmp	r2, r3
 8001166:	f040 815a 	bne.w	800141e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b01      	cmp	r3, #1
 8001174:	d005      	beq.n	8001182 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117e:	2b02      	cmp	r3, #2
 8001180:	d130      	bne.n	80011e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	2203      	movs	r2, #3
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b8:	2201      	movs	r2, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	091b      	lsrs	r3, r3, #4
 80011ce:	f003 0201 	and.w	r2, r3, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d017      	beq.n	8001220 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d123      	bne.n	8001274 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	08da      	lsrs	r2, r3, #3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3208      	adds	r2, #8
 8001234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	08da      	lsrs	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3208      	adds	r2, #8
 800126e:	69b9      	ldr	r1, [r7, #24]
 8001270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0203 	and.w	r2, r3, #3
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80b4 	beq.w	800141e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b60      	ldr	r3, [pc, #384]	; (800143c <HAL_GPIO_Init+0x30c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	4a5f      	ldr	r2, [pc, #380]	; (800143c <HAL_GPIO_Init+0x30c>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c4:	6453      	str	r3, [r2, #68]	; 0x44
 80012c6:	4b5d      	ldr	r3, [pc, #372]	; (800143c <HAL_GPIO_Init+0x30c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012d2:	4a5b      	ldr	r2, [pc, #364]	; (8001440 <HAL_GPIO_Init+0x310>)
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	3302      	adds	r3, #2
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a52      	ldr	r2, [pc, #328]	; (8001444 <HAL_GPIO_Init+0x314>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d02b      	beq.n	8001356 <HAL_GPIO_Init+0x226>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a51      	ldr	r2, [pc, #324]	; (8001448 <HAL_GPIO_Init+0x318>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d025      	beq.n	8001352 <HAL_GPIO_Init+0x222>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a50      	ldr	r2, [pc, #320]	; (800144c <HAL_GPIO_Init+0x31c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d01f      	beq.n	800134e <HAL_GPIO_Init+0x21e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4f      	ldr	r2, [pc, #316]	; (8001450 <HAL_GPIO_Init+0x320>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d019      	beq.n	800134a <HAL_GPIO_Init+0x21a>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4e      	ldr	r2, [pc, #312]	; (8001454 <HAL_GPIO_Init+0x324>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d013      	beq.n	8001346 <HAL_GPIO_Init+0x216>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4d      	ldr	r2, [pc, #308]	; (8001458 <HAL_GPIO_Init+0x328>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00d      	beq.n	8001342 <HAL_GPIO_Init+0x212>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4c      	ldr	r2, [pc, #304]	; (800145c <HAL_GPIO_Init+0x32c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d007      	beq.n	800133e <HAL_GPIO_Init+0x20e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4b      	ldr	r2, [pc, #300]	; (8001460 <HAL_GPIO_Init+0x330>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d101      	bne.n	800133a <HAL_GPIO_Init+0x20a>
 8001336:	2307      	movs	r3, #7
 8001338:	e00e      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800133a:	2308      	movs	r3, #8
 800133c:	e00c      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800133e:	2306      	movs	r3, #6
 8001340:	e00a      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001342:	2305      	movs	r3, #5
 8001344:	e008      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001346:	2304      	movs	r3, #4
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800134a:	2303      	movs	r3, #3
 800134c:	e004      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800134e:	2302      	movs	r3, #2
 8001350:	e002      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001356:	2300      	movs	r3, #0
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	f002 0203 	and.w	r2, r2, #3
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	4093      	lsls	r3, r2
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001368:	4935      	ldr	r1, [pc, #212]	; (8001440 <HAL_GPIO_Init+0x310>)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	3302      	adds	r3, #2
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001376:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <HAL_GPIO_Init+0x334>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800139a:	4a32      	ldr	r2, [pc, #200]	; (8001464 <HAL_GPIO_Init+0x334>)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013a0:	4b30      	ldr	r3, [pc, #192]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013c4:	4a27      	ldr	r2, [pc, #156]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ca:	4b26      	ldr	r3, [pc, #152]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ee:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001418:	4a12      	ldr	r2, [pc, #72]	; (8001464 <HAL_GPIO_Init+0x334>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3301      	adds	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	2b0f      	cmp	r3, #15
 8001428:	f67f ae90 	bls.w	800114c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40013800 	.word	0x40013800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400
 800144c:	40020800 	.word	0x40020800
 8001450:	40020c00 	.word	0x40020c00
 8001454:	40021000 	.word	0x40021000
 8001458:	40021400 	.word	0x40021400
 800145c:	40021800 	.word	0x40021800
 8001460:	40021c00 	.word	0x40021c00
 8001464:	40013c00 	.word	0x40013c00

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001484:	e003      	b.n	800148e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	041a      	lsls	r2, r3, #16
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	619a      	str	r2, [r3, #24]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800149a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149c:	b08f      	sub	sp, #60	; 0x3c
 800149e:	af0a      	add	r7, sp, #40	; 0x28
 80014a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e10f      	b.n	80016cc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d106      	bne.n	80014cc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f005 fe9e 	bl	8007208 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2203      	movs	r2, #3
 80014d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 fde5 	bl	80040ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	687e      	ldr	r6, [r7, #4]
 80014f8:	466d      	mov	r5, sp
 80014fa:	f106 0410 	add.w	r4, r6, #16
 80014fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001506:	e894 0003 	ldmia.w	r4, {r0, r1}
 800150a:	e885 0003 	stmia.w	r5, {r0, r1}
 800150e:	1d33      	adds	r3, r6, #4
 8001510:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001512:	6838      	ldr	r0, [r7, #0]
 8001514:	f002 fcbc 	bl	8003e90 <USB_CoreInit>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d005      	beq.n	800152a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2202      	movs	r2, #2
 8001522:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e0d0      	b.n	80016cc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f002 fdd3 	bl	80040dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001536:	2300      	movs	r3, #0
 8001538:	73fb      	strb	r3, [r7, #15]
 800153a:	e04a      	b.n	80015d2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	4613      	mov	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	1a9b      	subs	r3, r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	440b      	add	r3, r1
 800154a:	333d      	adds	r3, #61	; 0x3d
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001550:	7bfa      	ldrb	r2, [r7, #15]
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	1a9b      	subs	r3, r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	333c      	adds	r3, #60	; 0x3c
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001564:	7bfa      	ldrb	r2, [r7, #15]
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	b298      	uxth	r0, r3
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	3342      	adds	r3, #66	; 0x42
 8001578:	4602      	mov	r2, r0
 800157a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800157c:	7bfa      	ldrb	r2, [r7, #15]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	333f      	adds	r3, #63	; 0x3f
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001590:	7bfa      	ldrb	r2, [r7, #15]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	3344      	adds	r3, #68	; 0x44
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015a4:	7bfa      	ldrb	r2, [r7, #15]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	3348      	adds	r3, #72	; 0x48
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	3350      	adds	r3, #80	; 0x50
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	3301      	adds	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	7bfa      	ldrb	r2, [r7, #15]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d3af      	bcc.n	800153c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	e044      	b.n	800166c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015e2:	7bfa      	ldrb	r2, [r7, #15]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	1a9b      	subs	r3, r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015f8:	7bfa      	ldrb	r2, [r7, #15]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	4613      	mov	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	1a9b      	subs	r3, r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	440b      	add	r3, r1
 800161c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	1a9b      	subs	r3, r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800163a:	7bfa      	ldrb	r2, [r7, #15]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	1a9b      	subs	r3, r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	440b      	add	r3, r1
 8001648:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001650:	7bfa      	ldrb	r2, [r7, #15]
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	1a9b      	subs	r3, r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	3301      	adds	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	429a      	cmp	r2, r3
 8001674:	d3b5      	bcc.n	80015e2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	687e      	ldr	r6, [r7, #4]
 800167e:	466d      	mov	r5, sp
 8001680:	f106 0410 	add.w	r4, r6, #16
 8001684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001688:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800168c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001690:	e885 0003 	stmia.w	r5, {r0, r1}
 8001694:	1d33      	adds	r3, r6, #4
 8001696:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001698:	6838      	ldr	r0, [r7, #0]
 800169a:	f002 fd49 	bl	8004130 <USB_DevInit>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e00d      	b.n	80016cc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 fd91 	bl	80051ec <USB_DevDisconnect>

  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_PCD_Start+0x1c>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e020      	b.n	8001732 <HAL_PCD_Start+0x5e>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d109      	bne.n	8001714 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001704:	2b01      	cmp	r3, #1
 8001706:	d005      	beq.n	8001714 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f002 fcbd 	bl	8004098 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f003 fd41 	bl	80051aa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800173a:	b590      	push	{r4, r7, lr}
 800173c:	b08d      	sub	sp, #52	; 0x34
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001748:	6a3b      	ldr	r3, [r7, #32]
 800174a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f003 fdff 	bl	8005354 <USB_GetMode>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	f040 839d 	bne.w	8001e98 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f003 fd63 	bl	800522e <USB_ReadInterrupts>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 8393 	beq.w	8001e96 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f003 fd5a 	bl	800522e <USB_ReadInterrupts>
 800177a:	4603      	mov	r3, r0
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b02      	cmp	r3, #2
 8001782:	d107      	bne.n	8001794 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f002 0202 	and.w	r2, r2, #2
 8001792:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f003 fd48 	bl	800522e <USB_ReadInterrupts>
 800179e:	4603      	mov	r3, r0
 80017a0:	f003 0310 	and.w	r3, r3, #16
 80017a4:	2b10      	cmp	r3, #16
 80017a6:	d161      	bne.n	800186c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	699a      	ldr	r2, [r3, #24]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0210 	bic.w	r2, r2, #16
 80017b6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	f003 020f 	and.w	r2, r3, #15
 80017c4:	4613      	mov	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	4413      	add	r3, r2
 80017d4:	3304      	adds	r3, #4
 80017d6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	0c5b      	lsrs	r3, r3, #17
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d124      	bne.n	800182e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d035      	beq.n	800185c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	091b      	lsrs	r3, r3, #4
 80017f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017fe:	b29b      	uxth	r3, r3
 8001800:	461a      	mov	r2, r3
 8001802:	6a38      	ldr	r0, [r7, #32]
 8001804:	f003 fbae 	bl	8004f64 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	091b      	lsrs	r3, r3, #4
 8001810:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001814:	441a      	add	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	699a      	ldr	r2, [r3, #24]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001826:	441a      	add	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	619a      	str	r2, [r3, #24]
 800182c:	e016      	b.n	800185c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	0c5b      	lsrs	r3, r3, #17
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	2b06      	cmp	r3, #6
 8001838:	d110      	bne.n	800185c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001840:	2208      	movs	r2, #8
 8001842:	4619      	mov	r1, r3
 8001844:	6a38      	ldr	r0, [r7, #32]
 8001846:	f003 fb8d 	bl	8004f64 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	699a      	ldr	r2, [r3, #24]
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001856:	441a      	add	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0210 	orr.w	r2, r2, #16
 800186a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f003 fcdc 	bl	800522e <USB_ReadInterrupts>
 8001876:	4603      	mov	r3, r0
 8001878:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800187c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001880:	d16e      	bne.n	8001960 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f003 fce2 	bl	8005254 <USB_ReadDevAllOutEpInterrupt>
 8001890:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001892:	e062      	b.n	800195a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d057      	beq.n	800194e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f003 fd07 	bl	80052bc <USB_ReadDevOutEPInterrupt>
 80018ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00c      	beq.n	80018d4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	015a      	lsls	r2, r3, #5
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	4413      	add	r3, r2
 80018c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018c6:	461a      	mov	r2, r3
 80018c8:	2301      	movs	r3, #1
 80018ca:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 fdb0 	bl	8002434 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d00c      	beq.n	80018f8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	015a      	lsls	r2, r3, #5
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	4413      	add	r3, r2
 80018e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ea:	461a      	mov	r2, r3
 80018ec:	2308      	movs	r3, #8
 80018ee:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80018f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 feaa 	bl	800264c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d008      	beq.n	8001914 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	015a      	lsls	r2, r3, #5
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	4413      	add	r3, r2
 800190a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800190e:	461a      	mov	r2, r3
 8001910:	2310      	movs	r3, #16
 8001912:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f003 0320 	and.w	r3, r3, #32
 800191a:	2b00      	cmp	r3, #0
 800191c:	d008      	beq.n	8001930 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	015a      	lsls	r2, r3, #5
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	4413      	add	r3, r2
 8001926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800192a:	461a      	mov	r2, r3
 800192c:	2320      	movs	r3, #32
 800192e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	015a      	lsls	r2, r3, #5
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	4413      	add	r3, r2
 8001942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001946:	461a      	mov	r2, r3
 8001948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800194c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	3301      	adds	r3, #1
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800195a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195c:	2b00      	cmp	r3, #0
 800195e:	d199      	bne.n	8001894 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f003 fc62 	bl	800522e <USB_ReadInterrupts>
 800196a:	4603      	mov	r3, r0
 800196c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001970:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001974:	f040 80c0 	bne.w	8001af8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f003 fc83 	bl	8005288 <USB_ReadDevAllInEpInterrupt>
 8001982:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001988:	e0b2      	b.n	8001af0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800198a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 80a7 	beq.w	8001ae4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 fca9 	bl	80052f8 <USB_ReadDevInEPInterrupt>
 80019a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d057      	beq.n	8001a62 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	f003 030f 	and.w	r3, r3, #15
 80019b8:	2201      	movs	r2, #1
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69f9      	ldr	r1, [r7, #28]
 80019ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019d2:	4013      	ands	r3, r2
 80019d4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	015a      	lsls	r2, r3, #5
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	4413      	add	r3, r2
 80019de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019e2:	461a      	mov	r2, r3
 80019e4:	2301      	movs	r3, #1
 80019e6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d132      	bne.n	8001a56 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f4:	4613      	mov	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	1a9b      	subs	r3, r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	3348      	adds	r3, #72	; 0x48
 8001a00:	6819      	ldr	r1, [r3, #0]
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4403      	add	r3, r0
 8001a10:	3344      	adds	r3, #68	; 0x44
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4419      	add	r1, r3
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4403      	add	r3, r0
 8001a24:	3348      	adds	r3, #72	; 0x48
 8001a26:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d113      	bne.n	8001a56 <HAL_PCD_IRQHandler+0x31c>
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a32:	4613      	mov	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	1a9b      	subs	r3, r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	3350      	adds	r3, #80	; 0x50
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d108      	bne.n	8001a56 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a4e:	461a      	mov	r2, r3
 8001a50:	2101      	movs	r1, #1
 8001a52:	f003 fcb1 	bl	80053b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f005 fc62 	bl	8007326 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	015a      	lsls	r2, r3, #5
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	4413      	add	r3, r2
 8001a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a78:	461a      	mov	r2, r3
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	015a      	lsls	r2, r3, #5
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	4413      	add	r3, r2
 8001a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a94:	461a      	mov	r2, r3
 8001a96:	2310      	movs	r3, #16
 8001a98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	015a      	lsls	r2, r3, #5
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	4413      	add	r3, r2
 8001aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2340      	movs	r3, #64	; 0x40
 8001ab4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d008      	beq.n	8001ad2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	015a      	lsls	r2, r3, #5
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001acc:	461a      	mov	r2, r3
 8001ace:	2302      	movs	r3, #2
 8001ad0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001adc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 fc1b 	bl	800231a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aec:	085b      	lsrs	r3, r3, #1
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f47f af49 	bne.w	800198a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f003 fb96 	bl	800522e <USB_ReadInterrupts>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b0c:	d122      	bne.n	8001b54 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	69fa      	ldr	r2, [r7, #28]
 8001b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d108      	bne.n	8001b3e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b34:	2100      	movs	r1, #0
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 fe26 	bl	8002788 <HAL_PCDEx_LPM_Callback>
 8001b3c:	e002      	b.n	8001b44 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f005 fc68 	bl	8007414 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 fb68 	bl	800522e <USB_ReadInterrupts>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b68:	d112      	bne.n	8001b90 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d102      	bne.n	8001b80 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f005 fc24 	bl	80073c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b8e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f003 fb4a 	bl	800522e <USB_ReadInterrupts>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba4:	f040 80c7 	bne.w	8001d36 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2110      	movs	r1, #16
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f002 fc18 	bl	80043f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc8:	2300      	movs	r3, #0
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bcc:	e056      	b.n	8001c7c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd0:	015a      	lsls	r2, r3, #5
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001be0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be4:	015a      	lsls	r2, r3, #5
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	4413      	add	r3, r2
 8001bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf2:	0151      	lsls	r1, r2, #5
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	440a      	add	r2, r1
 8001bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001bfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c00:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c04:	015a      	lsls	r2, r3, #5
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c12:	0151      	lsls	r1, r2, #5
 8001c14:	69fa      	ldr	r2, [r7, #28]
 8001c16:	440a      	add	r2, r1
 8001c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c20:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c24:	015a      	lsls	r2, r3, #5
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	4413      	add	r3, r2
 8001c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c34:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c38:	015a      	lsls	r2, r3, #5
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c46:	0151      	lsls	r1, r2, #5
 8001c48:	69fa      	ldr	r2, [r7, #28]
 8001c4a:	440a      	add	r2, r1
 8001c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c66:	0151      	lsls	r1, r2, #5
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	440a      	add	r2, r1
 8001c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c74:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c78:	3301      	adds	r3, #1
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d3a3      	bcc.n	8001bce <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c94:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c98:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d016      	beq.n	8001cd0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cac:	69fa      	ldr	r2, [r7, #28]
 8001cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cb2:	f043 030b 	orr.w	r3, r3, #11
 8001cb6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cc8:	f043 030b 	orr.w	r3, r3, #11
 8001ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cce:	e015      	b.n	8001cfc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ce2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001ce6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	69fa      	ldr	r2, [r7, #28]
 8001cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cf6:	f043 030b 	orr.w	r3, r3, #11
 8001cfa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d0a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d0e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d20:	461a      	mov	r2, r3
 8001d22:	f003 fb49 	bl	80053b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 fa77 	bl	800522e <USB_ReadInterrupts>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d4a:	d124      	bne.n	8001d96 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f003 fb0d 	bl	8005370 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 fbad 	bl	80044ba <USB_GetDevSpeed>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461a      	mov	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681c      	ldr	r4, [r3, #0]
 8001d6c:	f001 f97c 	bl	8003068 <HAL_RCC_GetHCLKFreq>
 8001d70:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f002 f8ea 	bl	8003f54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f005 faf8 	bl	8007376 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	695a      	ldr	r2, [r3, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d94:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f003 fa47 	bl	800522e <USB_ReadInterrupts>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d10a      	bne.n	8001dc0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f005 fad5 	bl	800735a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695a      	ldr	r2, [r3, #20]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f002 0208 	and.w	r2, r2, #8
 8001dbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 fa32 	bl	800522e <USB_ReadInterrupts>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dd4:	d10f      	bne.n	8001df6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	4619      	mov	r1, r3
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f005 fb37 	bl	8007454 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001df4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 fa17 	bl	800522e <USB_ReadInterrupts>
 8001e00:	4603      	mov	r3, r0
 8001e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e0a:	d10f      	bne.n	8001e2c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	4619      	mov	r1, r3
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f005 fb0a 	bl	8007430 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 f9fc 	bl	800522e <USB_ReadInterrupts>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e40:	d10a      	bne.n	8001e58 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f005 fb18 	bl	8007478 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695a      	ldr	r2, [r3, #20]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f003 f9e6 	bl	800522e <USB_ReadInterrupts>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d115      	bne.n	8001e98 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f005 fb08 	bl	8007494 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6859      	ldr	r1, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	e000      	b.n	8001e98 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001e96:	bf00      	nop
    }
  }
}
 8001e98:	3734      	adds	r7, #52	; 0x34
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd90      	pop	{r4, r7, pc}

08001e9e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_PCD_SetAddress+0x1a>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e013      	b.n	8001ee0 <HAL_PCD_SetAddress+0x42>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 f944 	bl	800515e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	4608      	mov	r0, r1
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	70fb      	strb	r3, [r7, #3]
 8001efa:	460b      	mov	r3, r1
 8001efc:	803b      	strh	r3, [r7, #0]
 8001efe:	4613      	mov	r3, r2
 8001f00:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	da0f      	bge.n	8001f2e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f0e:	78fb      	ldrb	r3, [r7, #3]
 8001f10:	f003 020f 	and.w	r2, r3, #15
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	3338      	adds	r3, #56	; 0x38
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	3304      	adds	r3, #4
 8001f24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	705a      	strb	r2, [r3, #1]
 8001f2c:	e00f      	b.n	8001f4e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	f003 020f 	and.w	r2, r3, #15
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	3304      	adds	r3, #4
 8001f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	f003 030f 	and.w	r3, r3, #15
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f5a:	883a      	ldrh	r2, [r7, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	78ba      	ldrb	r2, [r7, #2]
 8001f64:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	785b      	ldrb	r3, [r3, #1]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d004      	beq.n	8001f78 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f78:	78bb      	ldrb	r3, [r7, #2]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d102      	bne.n	8001f84 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_PCD_EP_Open+0xaa>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e00e      	b.n	8001fb0 <HAL_PCD_EP_Open+0xc8>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68f9      	ldr	r1, [r7, #12]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f002 faaf 	bl	8004504 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001fae:	7afb      	ldrb	r3, [r7, #11]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	da0f      	bge.n	8001fec <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	f003 020f 	and.w	r2, r3, #15
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	3338      	adds	r3, #56	; 0x38
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	705a      	strb	r2, [r3, #1]
 8001fea:	e00f      	b.n	800200c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	f003 020f 	and.w	r2, r3, #15
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	3304      	adds	r3, #4
 8002004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	b2da      	uxtb	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_PCD_EP_Close+0x6e>
 8002022:	2302      	movs	r3, #2
 8002024:	e00e      	b.n	8002044 <HAL_PCD_EP_Close+0x8c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68f9      	ldr	r1, [r7, #12]
 8002034:	4618      	mov	r0, r3
 8002036:	f002 faed 	bl	8004614 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	460b      	mov	r3, r1
 800205a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800205c:	7afb      	ldrb	r3, [r7, #11]
 800205e:	f003 020f 	and.w	r2, r3, #15
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	1a9b      	subs	r3, r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4413      	add	r3, r2
 8002072:	3304      	adds	r3, #4
 8002074:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2200      	movs	r2, #0
 800208c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800208e:	7afb      	ldrb	r3, [r7, #11]
 8002090:	f003 030f 	and.w	r3, r3, #15
 8002094:	b2da      	uxtb	r2, r3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d102      	bne.n	80020a8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020a8:	7afb      	ldrb	r3, [r7, #11]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d109      	bne.n	80020c6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	461a      	mov	r2, r3
 80020be:	6979      	ldr	r1, [r7, #20]
 80020c0:	f002 fdc8 	bl	8004c54 <USB_EP0StartXfer>
 80020c4:	e008      	b.n	80020d8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	461a      	mov	r2, r3
 80020d2:	6979      	ldr	r1, [r7, #20]
 80020d4:	f002 fb7a 	bl	80047cc <USB_EPStartXfer>
  }

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	f003 020f 	and.w	r2, r3, #15
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002104:	681b      	ldr	r3, [r3, #0]
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
 800211e:	460b      	mov	r3, r1
 8002120:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002122:	7afb      	ldrb	r3, [r7, #11]
 8002124:	f003 020f 	and.w	r2, r3, #15
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	3338      	adds	r3, #56	; 0x38
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4413      	add	r3, r2
 8002136:	3304      	adds	r3, #4
 8002138:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2201      	movs	r2, #1
 8002150:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002152:	7afb      	ldrb	r3, [r7, #11]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	b2da      	uxtb	r2, r3
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d102      	bne.n	800216c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800216c:	7afb      	ldrb	r3, [r7, #11]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	2b00      	cmp	r3, #0
 8002174:	d109      	bne.n	800218a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	6979      	ldr	r1, [r7, #20]
 8002184:	f002 fd66 	bl	8004c54 <USB_EP0StartXfer>
 8002188:	e008      	b.n	800219c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	6979      	ldr	r1, [r7, #20]
 8002198:	f002 fb18 	bl	80047cc <USB_EPStartXfer>
  }

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b084      	sub	sp, #16
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	460b      	mov	r3, r1
 80021b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	f003 020f 	and.w	r2, r3, #15
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d901      	bls.n	80021c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e050      	b.n	8002266 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	da0f      	bge.n	80021ec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	f003 020f 	and.w	r2, r3, #15
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	3338      	adds	r3, #56	; 0x38
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	3304      	adds	r3, #4
 80021e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	705a      	strb	r2, [r3, #1]
 80021ea:	e00d      	b.n	8002208 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	3304      	adds	r3, #4
 8002200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	b2da      	uxtb	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_PCD_EP_SetStall+0x82>
 8002224:	2302      	movs	r3, #2
 8002226:	e01e      	b.n	8002266 <HAL_PCD_EP_SetStall+0xc0>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68f9      	ldr	r1, [r7, #12]
 8002236:	4618      	mov	r0, r3
 8002238:	f002 febd 	bl	8004fb6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10a      	bne.n	800225c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	b2d9      	uxtb	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002256:	461a      	mov	r2, r3
 8002258:	f003 f8ae 	bl	80053b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	460b      	mov	r3, r1
 8002278:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 020f 	and.w	r2, r3, #15
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	429a      	cmp	r2, r3
 8002286:	d901      	bls.n	800228c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e042      	b.n	8002312 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800228c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002290:	2b00      	cmp	r3, #0
 8002292:	da0f      	bge.n	80022b4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	f003 020f 	and.w	r2, r3, #15
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	3338      	adds	r3, #56	; 0x38
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	4413      	add	r3, r2
 80022a8:	3304      	adds	r3, #4
 80022aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2201      	movs	r2, #1
 80022b0:	705a      	strb	r2, [r3, #1]
 80022b2:	e00f      	b.n	80022d4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	f003 020f 	and.w	r2, r3, #15
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	3304      	adds	r3, #4
 80022cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022da:	78fb      	ldrb	r3, [r7, #3]
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_PCD_EP_ClrStall+0x86>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e00e      	b.n	8002312 <HAL_PCD_EP_ClrStall+0xa4>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68f9      	ldr	r1, [r7, #12]
 8002302:	4618      	mov	r0, r3
 8002304:	f002 fec5 	bl	8005092 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b08a      	sub	sp, #40	; 0x28
 800231e:	af02      	add	r7, sp, #8
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	4613      	mov	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	1a9b      	subs	r3, r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	3338      	adds	r3, #56	; 0x38
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	3304      	adds	r3, #4
 8002340:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	699a      	ldr	r2, [r3, #24]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	429a      	cmp	r2, r3
 800234c:	d901      	bls.n	8002352 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e06c      	b.n	800242c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	429a      	cmp	r2, r3
 8002366:	d902      	bls.n	800236e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3303      	adds	r3, #3
 8002372:	089b      	lsrs	r3, r3, #2
 8002374:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002376:	e02b      	b.n	80023d0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	429a      	cmp	r2, r3
 800238c:	d902      	bls.n	8002394 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	3303      	adds	r3, #3
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	68d9      	ldr	r1, [r3, #12]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	4603      	mov	r3, r0
 80023b2:	6978      	ldr	r0, [r7, #20]
 80023b4:	f002 fda1 	bl	8004efa <USB_WritePacket>

    ep->xfer_buff  += len;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	441a      	add	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	699a      	ldr	r2, [r3, #24]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	441a      	add	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d809      	bhi.n	80023fa <PCD_WriteEmptyTxFifo+0xe0>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d203      	bcs.n	80023fa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1be      	bne.n	8002378 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	429a      	cmp	r2, r3
 8002404:	d811      	bhi.n	800242a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	2201      	movs	r2, #1
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800241a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	43db      	mvns	r3, r3
 8002420:	6939      	ldr	r1, [r7, #16]
 8002422:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002426:	4013      	ands	r3, r2
 8002428:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	333c      	adds	r3, #60	; 0x3c
 800244c:	3304      	adds	r3, #4
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b01      	cmp	r3, #1
 8002468:	f040 80a0 	bne.w	80025ac <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d015      	beq.n	80024a2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a72      	ldr	r2, [pc, #456]	; (8002644 <PCD_EP_OutXfrComplete_int+0x210>)
 800247a:	4293      	cmp	r3, r2
 800247c:	f240 80dd 	bls.w	800263a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 80d7 	beq.w	800263a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4413      	add	r3, r2
 8002494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002498:	461a      	mov	r2, r3
 800249a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800249e:	6093      	str	r3, [r2, #8]
 80024a0:	e0cb      	b.n	800263a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d009      	beq.n	80024c0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b8:	461a      	mov	r2, r3
 80024ba:	2320      	movs	r3, #32
 80024bc:	6093      	str	r3, [r2, #8]
 80024be:	e0bc      	b.n	800263a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f040 80b7 	bne.w	800263a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4a5d      	ldr	r2, [pc, #372]	; (8002644 <PCD_EP_OutXfrComplete_int+0x210>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d90f      	bls.n	80024f4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ea:	461a      	mov	r2, r3
 80024ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024f0:	6093      	str	r3, [r2, #8]
 80024f2:	e0a2      	b.n	800263a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002506:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	0159      	lsls	r1, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	440b      	add	r3, r1
 8002510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800251a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4403      	add	r3, r0
 800252a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800252e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4403      	add	r3, r0
 8002552:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4419      	add	r1, r3
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4403      	add	r3, r0
 8002568:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800256c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d114      	bne.n	800259e <PCD_EP_OutXfrComplete_int+0x16a>
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d108      	bne.n	800259e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002596:	461a      	mov	r2, r3
 8002598:	2101      	movs	r1, #1
 800259a:	f002 ff0d 	bl	80053b8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	4619      	mov	r1, r3
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f004 fea3 	bl	80072f0 <HAL_PCD_DataOutStageCallback>
 80025aa:	e046      	b.n	800263a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4a26      	ldr	r2, [pc, #152]	; (8002648 <PCD_EP_OutXfrComplete_int+0x214>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d124      	bne.n	80025fe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ca:	461a      	mov	r2, r3
 80025cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025d0:	6093      	str	r3, [r2, #8]
 80025d2:	e032      	b.n	800263a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d008      	beq.n	80025f0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ea:	461a      	mov	r2, r3
 80025ec:	2320      	movs	r3, #32
 80025ee:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	4619      	mov	r1, r3
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f004 fe7a 	bl	80072f0 <HAL_PCD_DataOutStageCallback>
 80025fc:	e01d      	b.n	800263a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d114      	bne.n	800262e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	4613      	mov	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d108      	bne.n	800262e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002626:	461a      	mov	r2, r3
 8002628:	2100      	movs	r1, #0
 800262a:	f002 fec5 	bl	80053b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	4619      	mov	r1, r3
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f004 fe5b 	bl	80072f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	4f54300a 	.word	0x4f54300a
 8002648:	4f54310a 	.word	0x4f54310a

0800264c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	333c      	adds	r3, #60	; 0x3c
 8002664:	3304      	adds	r3, #4
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4413      	add	r3, r2
 8002672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4a15      	ldr	r2, [pc, #84]	; (80026d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d90e      	bls.n	80026a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002688:	2b00      	cmp	r3, #0
 800268a:	d009      	beq.n	80026a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4413      	add	r3, r2
 8002694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002698:	461a      	mov	r2, r3
 800269a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800269e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f004 fe13 	bl	80072cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d90c      	bls.n	80026c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d108      	bne.n	80026c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026c0:	461a      	mov	r2, r3
 80026c2:	2101      	movs	r1, #1
 80026c4:	f002 fe78 	bl	80053b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	4f54300a 	.word	0x4f54300a

080026d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	70fb      	strb	r3, [r7, #3]
 80026e4:	4613      	mov	r3, r2
 80026e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d107      	bne.n	8002706 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80026f6:	883b      	ldrh	r3, [r7, #0]
 80026f8:	0419      	lsls	r1, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	430a      	orrs	r2, r1
 8002702:	629a      	str	r2, [r3, #40]	; 0x28
 8002704:	e028      	b.n	8002758 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	0c1b      	lsrs	r3, r3, #16
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	4413      	add	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	e00d      	b.n	8002736 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	3340      	adds	r3, #64	; 0x40
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	0c1b      	lsrs	r3, r3, #16
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	4413      	add	r3, r2
 800272e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	3301      	adds	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	3b01      	subs	r3, #1
 800273c:	429a      	cmp	r2, r3
 800273e:	d3ec      	bcc.n	800271a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002740:	883b      	ldrh	r3, [r7, #0]
 8002742:	0418      	lsls	r0, r3, #16
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6819      	ldr	r1, [r3, #0]
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	3b01      	subs	r3, #1
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	4302      	orrs	r2, r0
 8002750:	3340      	adds	r3, #64	; 0x40
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	887a      	ldrh	r2, [r7, #2]
 8002778:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e267      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d075      	beq.n	80028aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027be:	4b88      	ldr	r3, [pc, #544]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d00c      	beq.n	80027e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ca:	4b85      	ldr	r3, [pc, #532]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d112      	bne.n	80027fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d6:	4b82      	ldr	r3, [pc, #520]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e2:	d10b      	bne.n	80027fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	4b7e      	ldr	r3, [pc, #504]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d05b      	beq.n	80028a8 <HAL_RCC_OscConfig+0x108>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d157      	bne.n	80028a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e242      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002804:	d106      	bne.n	8002814 <HAL_RCC_OscConfig+0x74>
 8002806:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a75      	ldr	r2, [pc, #468]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800280c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	e01d      	b.n	8002850 <HAL_RCC_OscConfig+0xb0>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x98>
 800281e:	4b70      	ldr	r3, [pc, #448]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a6f      	ldr	r2, [pc, #444]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b6d      	ldr	r3, [pc, #436]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a6c      	ldr	r2, [pc, #432]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0xb0>
 8002838:	4b69      	ldr	r3, [pc, #420]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a68      	ldr	r2, [pc, #416]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800283e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	4b66      	ldr	r3, [pc, #408]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a65      	ldr	r2, [pc, #404]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800284a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d013      	beq.n	8002880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7fe fb28 	bl	8000eac <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002860:	f7fe fb24 	bl	8000eac <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	; 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e207      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	4b5b      	ldr	r3, [pc, #364]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0xc0>
 800287e:	e014      	b.n	80028aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7fe fb14 	bl	8000eac <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002888:	f7fe fb10 	bl	8000eac <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b64      	cmp	r3, #100	; 0x64
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e1f3      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289a:	4b51      	ldr	r3, [pc, #324]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0xe8>
 80028a6:	e000      	b.n	80028aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d063      	beq.n	800297e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028b6:	4b4a      	ldr	r3, [pc, #296]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028c2:	4b47      	ldr	r3, [pc, #284]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d11c      	bne.n	8002908 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ce:	4b44      	ldr	r3, [pc, #272]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d116      	bne.n	8002908 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028da:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_RCC_OscConfig+0x152>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d001      	beq.n	80028f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e1c7      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f2:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4937      	ldr	r1, [pc, #220]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002906:	e03a      	b.n	800297e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d020      	beq.n	8002952 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002910:	4b34      	ldr	r3, [pc, #208]	; (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002912:	2201      	movs	r2, #1
 8002914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002916:	f7fe fac9 	bl	8000eac <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800291e:	f7fe fac5 	bl	8000eac <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e1a8      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002930:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293c:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4925      	ldr	r1, [pc, #148]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800294c:	4313      	orrs	r3, r2
 800294e:	600b      	str	r3, [r1, #0]
 8002950:	e015      	b.n	800297e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002952:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe faa8 	bl	8000eac <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002960:	f7fe faa4 	bl	8000eac <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e187      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d036      	beq.n	80029f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d016      	beq.n	80029c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002992:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_RCC_OscConfig+0x248>)
 8002994:	2201      	movs	r2, #1
 8002996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002998:	f7fe fa88 	bl	8000eac <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a0:	f7fe fa84 	bl	8000eac <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e167      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80029b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x200>
 80029be:	e01b      	b.n	80029f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_RCC_OscConfig+0x248>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c6:	f7fe fa71 	bl	8000eac <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029cc:	e00e      	b.n	80029ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ce:	f7fe fa6d 	bl	8000eac <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d907      	bls.n	80029ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e150      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
 80029e0:	40023800 	.word	0x40023800
 80029e4:	42470000 	.word	0x42470000
 80029e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ec:	4b88      	ldr	r3, [pc, #544]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 80029ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1ea      	bne.n	80029ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 8097 	beq.w	8002b34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a06:	2300      	movs	r3, #0
 8002a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0a:	4b81      	ldr	r3, [pc, #516]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10f      	bne.n	8002a36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	4b7d      	ldr	r3, [pc, #500]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	4a7c      	ldr	r2, [pc, #496]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6413      	str	r3, [r2, #64]	; 0x40
 8002a26:	4b7a      	ldr	r3, [pc, #488]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a32:	2301      	movs	r3, #1
 8002a34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a36:	4b77      	ldr	r3, [pc, #476]	; (8002c14 <HAL_RCC_OscConfig+0x474>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d118      	bne.n	8002a74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a42:	4b74      	ldr	r3, [pc, #464]	; (8002c14 <HAL_RCC_OscConfig+0x474>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a73      	ldr	r2, [pc, #460]	; (8002c14 <HAL_RCC_OscConfig+0x474>)
 8002a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fa2d 	bl	8000eac <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a56:	f7fe fa29 	bl	8000eac <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e10c      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a68:	4b6a      	ldr	r3, [pc, #424]	; (8002c14 <HAL_RCC_OscConfig+0x474>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCC_OscConfig+0x2ea>
 8002a7c:	4b64      	ldr	r3, [pc, #400]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	4a63      	ldr	r2, [pc, #396]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6713      	str	r3, [r2, #112]	; 0x70
 8002a88:	e01c      	b.n	8002ac4 <HAL_RCC_OscConfig+0x324>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b05      	cmp	r3, #5
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0x30c>
 8002a92:	4b5f      	ldr	r3, [pc, #380]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a96:	4a5e      	ldr	r2, [pc, #376]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a98:	f043 0304 	orr.w	r3, r3, #4
 8002a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9e:	4b5c      	ldr	r3, [pc, #368]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	4a5b      	ldr	r2, [pc, #364]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aaa:	e00b      	b.n	8002ac4 <HAL_RCC_OscConfig+0x324>
 8002aac:	4b58      	ldr	r3, [pc, #352]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab0:	4a57      	ldr	r2, [pc, #348]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab8:	4b55      	ldr	r3, [pc, #340]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abc:	4a54      	ldr	r2, [pc, #336]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002abe:	f023 0304 	bic.w	r3, r3, #4
 8002ac2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d015      	beq.n	8002af8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7fe f9ee 	bl	8000eac <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad2:	e00a      	b.n	8002aea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad4:	f7fe f9ea 	bl	8000eac <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e0cb      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aea:	4b49      	ldr	r3, [pc, #292]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0ee      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x334>
 8002af6:	e014      	b.n	8002b22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af8:	f7fe f9d8 	bl	8000eac <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afe:	e00a      	b.n	8002b16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b00:	f7fe f9d4 	bl	8000eac <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e0b5      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b16:	4b3e      	ldr	r3, [pc, #248]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1ee      	bne.n	8002b00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b22:	7dfb      	ldrb	r3, [r7, #23]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d105      	bne.n	8002b34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b28:	4b39      	ldr	r3, [pc, #228]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	4a38      	ldr	r2, [pc, #224]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80a1 	beq.w	8002c80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b3e:	4b34      	ldr	r3, [pc, #208]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d05c      	beq.n	8002c04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d141      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b52:	4b31      	ldr	r3, [pc, #196]	; (8002c18 <HAL_RCC_OscConfig+0x478>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fe f9a8 	bl	8000eac <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b60:	f7fe f9a4 	bl	8000eac <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e087      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	019b      	lsls	r3, r3, #6
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	085b      	lsrs	r3, r3, #1
 8002b96:	3b01      	subs	r3, #1
 8002b98:	041b      	lsls	r3, r3, #16
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	061b      	lsls	r3, r3, #24
 8002ba2:	491b      	ldr	r1, [pc, #108]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <HAL_RCC_OscConfig+0x478>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7fe f97d 	bl	8000eac <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb6:	f7fe f979 	bl	8000eac <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e05c      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc8:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x416>
 8002bd4:	e054      	b.n	8002c80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd6:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <HAL_RCC_OscConfig+0x478>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7fe f966 	bl	8000eac <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fe f962 	bl	8000eac <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e045      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x444>
 8002c02:	e03d      	b.n	8002c80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e038      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40007000 	.word	0x40007000
 8002c18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_RCC_OscConfig+0x4ec>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d028      	beq.n	8002c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d121      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d11a      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d111      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	085b      	lsrs	r3, r3, #1
 8002c64:	3b01      	subs	r3, #1
 8002c66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800

08002c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0cc      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca4:	4b68      	ldr	r3, [pc, #416]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d90c      	bls.n	8002ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb2:	4b65      	ldr	r3, [pc, #404]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cba:	4b63      	ldr	r3, [pc, #396]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0b8      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d020      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce4:	4b59      	ldr	r3, [pc, #356]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	4a58      	ldr	r2, [pc, #352]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cfc:	4b53      	ldr	r3, [pc, #332]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a52      	ldr	r2, [pc, #328]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d08:	4b50      	ldr	r3, [pc, #320]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	494d      	ldr	r1, [pc, #308]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d044      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2e:	4b47      	ldr	r3, [pc, #284]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d119      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e07f      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d003      	beq.n	8002d4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d107      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4e:	4b3f      	ldr	r3, [pc, #252]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e06f      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5e:	4b3b      	ldr	r3, [pc, #236]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e067      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d6e:	4b37      	ldr	r3, [pc, #220]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f023 0203 	bic.w	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4934      	ldr	r1, [pc, #208]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d80:	f7fe f894 	bl	8000eac <HAL_GetTick>
 8002d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d86:	e00a      	b.n	8002d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d88:	f7fe f890 	bl	8000eac <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e04f      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9e:	4b2b      	ldr	r3, [pc, #172]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 020c 	and.w	r2, r3, #12
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d1eb      	bne.n	8002d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db0:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d20c      	bcs.n	8002dd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dbe:	4b22      	ldr	r3, [pc, #136]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b20      	ldr	r3, [pc, #128]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e032      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4916      	ldr	r1, [pc, #88]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e02:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	490e      	ldr	r1, [pc, #56]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e16:	f000 f821 	bl	8002e5c <HAL_RCC_GetSysClockFreq>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	490a      	ldr	r1, [pc, #40]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002e28:	5ccb      	ldrb	r3, [r1, r3]
 8002e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2e:	4a09      	ldr	r2, [pc, #36]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_RCC_ClockConfig+0x1c8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd fff4 	bl	8000e24 <HAL_InitTick>

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40023c00 	.word	0x40023c00
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	08008238 	.word	0x08008238
 8002e54:	20000000 	.word	0x20000000
 8002e58:	20000004 	.word	0x20000004

08002e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e60:	b094      	sub	sp, #80	; 0x50
 8002e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	647b      	str	r3, [r7, #68]	; 0x44
 8002e68:	2300      	movs	r3, #0
 8002e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e74:	4b79      	ldr	r3, [pc, #484]	; (800305c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d00d      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0x40>
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	f200 80e1 	bhi.w	8003048 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0x34>
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d003      	beq.n	8002e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e8e:	e0db      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e90:	4b73      	ldr	r3, [pc, #460]	; (8003060 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e94:	e0db      	b.n	800304e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e96:	4b73      	ldr	r3, [pc, #460]	; (8003064 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e9a:	e0d8      	b.n	800304e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e9c:	4b6f      	ldr	r3, [pc, #444]	; (800305c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ea4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ea6:	4b6d      	ldr	r3, [pc, #436]	; (800305c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d063      	beq.n	8002f7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb2:	4b6a      	ldr	r3, [pc, #424]	; (800305c <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	099b      	lsrs	r3, r3, #6
 8002eb8:	2200      	movs	r2, #0
 8002eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ebc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ece:	4622      	mov	r2, r4
 8002ed0:	462b      	mov	r3, r5
 8002ed2:	f04f 0000 	mov.w	r0, #0
 8002ed6:	f04f 0100 	mov.w	r1, #0
 8002eda:	0159      	lsls	r1, r3, #5
 8002edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee0:	0150      	lsls	r0, r2, #5
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	1a51      	subs	r1, r2, r1
 8002eea:	6139      	str	r1, [r7, #16]
 8002eec:	4629      	mov	r1, r5
 8002eee:	eb63 0301 	sbc.w	r3, r3, r1
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f00:	4659      	mov	r1, fp
 8002f02:	018b      	lsls	r3, r1, #6
 8002f04:	4651      	mov	r1, sl
 8002f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f0a:	4651      	mov	r1, sl
 8002f0c:	018a      	lsls	r2, r1, #6
 8002f0e:	4651      	mov	r1, sl
 8002f10:	ebb2 0801 	subs.w	r8, r2, r1
 8002f14:	4659      	mov	r1, fp
 8002f16:	eb63 0901 	sbc.w	r9, r3, r1
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f2e:	4690      	mov	r8, r2
 8002f30:	4699      	mov	r9, r3
 8002f32:	4623      	mov	r3, r4
 8002f34:	eb18 0303 	adds.w	r3, r8, r3
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	462b      	mov	r3, r5
 8002f3c:	eb49 0303 	adc.w	r3, r9, r3
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f4e:	4629      	mov	r1, r5
 8002f50:	024b      	lsls	r3, r1, #9
 8002f52:	4621      	mov	r1, r4
 8002f54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f58:	4621      	mov	r1, r4
 8002f5a:	024a      	lsls	r2, r1, #9
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f62:	2200      	movs	r2, #0
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f6c:	f7fd f988 	bl	8000280 <__aeabi_uldivmod>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4613      	mov	r3, r2
 8002f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f78:	e058      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7a:	4b38      	ldr	r3, [pc, #224]	; (800305c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	099b      	lsrs	r3, r3, #6
 8002f80:	2200      	movs	r2, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	4611      	mov	r1, r2
 8002f86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f8a:	623b      	str	r3, [r7, #32]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f94:	4642      	mov	r2, r8
 8002f96:	464b      	mov	r3, r9
 8002f98:	f04f 0000 	mov.w	r0, #0
 8002f9c:	f04f 0100 	mov.w	r1, #0
 8002fa0:	0159      	lsls	r1, r3, #5
 8002fa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa6:	0150      	lsls	r0, r2, #5
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4641      	mov	r1, r8
 8002fae:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fb2:	4649      	mov	r1, r9
 8002fb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fcc:	ebb2 040a 	subs.w	r4, r2, sl
 8002fd0:	eb63 050b 	sbc.w	r5, r3, fp
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	00eb      	lsls	r3, r5, #3
 8002fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fe2:	00e2      	lsls	r2, r4, #3
 8002fe4:	4614      	mov	r4, r2
 8002fe6:	461d      	mov	r5, r3
 8002fe8:	4643      	mov	r3, r8
 8002fea:	18e3      	adds	r3, r4, r3
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	464b      	mov	r3, r9
 8002ff0:	eb45 0303 	adc.w	r3, r5, r3
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003002:	4629      	mov	r1, r5
 8003004:	028b      	lsls	r3, r1, #10
 8003006:	4621      	mov	r1, r4
 8003008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800300c:	4621      	mov	r1, r4
 800300e:	028a      	lsls	r2, r1, #10
 8003010:	4610      	mov	r0, r2
 8003012:	4619      	mov	r1, r3
 8003014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003016:	2200      	movs	r2, #0
 8003018:	61bb      	str	r3, [r7, #24]
 800301a:	61fa      	str	r2, [r7, #28]
 800301c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003020:	f7fd f92e 	bl	8000280 <__aeabi_uldivmod>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4613      	mov	r3, r2
 800302a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_RCC_GetSysClockFreq+0x200>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	0c1b      	lsrs	r3, r3, #16
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	3301      	adds	r3, #1
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800303c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800303e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003040:	fbb2 f3f3 	udiv	r3, r2, r3
 8003044:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003046:	e002      	b.n	800304e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_RCC_GetSysClockFreq+0x204>)
 800304a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800304c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800304e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003050:	4618      	mov	r0, r3
 8003052:	3750      	adds	r7, #80	; 0x50
 8003054:	46bd      	mov	sp, r7
 8003056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800
 8003060:	00f42400 	.word	0x00f42400
 8003064:	007a1200 	.word	0x007a1200

08003068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <HAL_RCC_GetHCLKFreq+0x14>)
 800306e:	681b      	ldr	r3, [r3, #0]
}
 8003070:	4618      	mov	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000000 	.word	0x20000000

08003080 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e07b      	b.n	800318a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	2b00      	cmp	r3, #0
 8003098:	d108      	bne.n	80030ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030a2:	d009      	beq.n	80030b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	61da      	str	r2, [r3, #28]
 80030aa:	e005      	b.n	80030b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fd fd3a 	bl	8000b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310a:	431a      	orrs	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313c:	ea42 0103 	orr.w	r1, r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	f003 0104 	and.w	r1, r3, #4
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	f003 0210 	and.w	r2, r3, #16
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003178:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e041      	b.n	8003228 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d106      	bne.n	80031be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7fd fd0f 	bl	8000bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2202      	movs	r2, #2
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3304      	adds	r3, #4
 80031ce:	4619      	mov	r1, r3
 80031d0:	4610      	mov	r0, r2
 80031d2:	f000 fad1 	bl	8003778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e041      	b.n	80032c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f839 	bl	80032ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3304      	adds	r3, #4
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f000 fa82 	bl	8003778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d109      	bne.n	8003308 <HAL_TIM_PWM_Start+0x24>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	bf14      	ite	ne
 8003300:	2301      	movne	r3, #1
 8003302:	2300      	moveq	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	e022      	b.n	800334e <HAL_TIM_PWM_Start+0x6a>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2b04      	cmp	r3, #4
 800330c:	d109      	bne.n	8003322 <HAL_TIM_PWM_Start+0x3e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b01      	cmp	r3, #1
 8003318:	bf14      	ite	ne
 800331a:	2301      	movne	r3, #1
 800331c:	2300      	moveq	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	e015      	b.n	800334e <HAL_TIM_PWM_Start+0x6a>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d109      	bne.n	800333c <HAL_TIM_PWM_Start+0x58>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	bf14      	ite	ne
 8003334:	2301      	movne	r3, #1
 8003336:	2300      	moveq	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	e008      	b.n	800334e <HAL_TIM_PWM_Start+0x6a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b01      	cmp	r3, #1
 8003346:	bf14      	ite	ne
 8003348:	2301      	movne	r3, #1
 800334a:	2300      	moveq	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e07c      	b.n	8003450 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d104      	bne.n	8003366 <HAL_TIM_PWM_Start+0x82>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003364:	e013      	b.n	800338e <HAL_TIM_PWM_Start+0xaa>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b04      	cmp	r3, #4
 800336a:	d104      	bne.n	8003376 <HAL_TIM_PWM_Start+0x92>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003374:	e00b      	b.n	800338e <HAL_TIM_PWM_Start+0xaa>
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b08      	cmp	r3, #8
 800337a:	d104      	bne.n	8003386 <HAL_TIM_PWM_Start+0xa2>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003384:	e003      	b.n	800338e <HAL_TIM_PWM_Start+0xaa>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2202      	movs	r2, #2
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2201      	movs	r2, #1
 8003394:	6839      	ldr	r1, [r7, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fcd8 	bl	8003d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2d      	ldr	r2, [pc, #180]	; (8003458 <HAL_TIM_PWM_Start+0x174>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d004      	beq.n	80033b0 <HAL_TIM_PWM_Start+0xcc>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a2c      	ldr	r2, [pc, #176]	; (800345c <HAL_TIM_PWM_Start+0x178>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d101      	bne.n	80033b4 <HAL_TIM_PWM_Start+0xd0>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <HAL_TIM_PWM_Start+0xd2>
 80033b4:	2300      	movs	r3, #0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d007      	beq.n	80033ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a22      	ldr	r2, [pc, #136]	; (8003458 <HAL_TIM_PWM_Start+0x174>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d022      	beq.n	800341a <HAL_TIM_PWM_Start+0x136>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033dc:	d01d      	beq.n	800341a <HAL_TIM_PWM_Start+0x136>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1f      	ldr	r2, [pc, #124]	; (8003460 <HAL_TIM_PWM_Start+0x17c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d018      	beq.n	800341a <HAL_TIM_PWM_Start+0x136>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1d      	ldr	r2, [pc, #116]	; (8003464 <HAL_TIM_PWM_Start+0x180>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d013      	beq.n	800341a <HAL_TIM_PWM_Start+0x136>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <HAL_TIM_PWM_Start+0x184>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00e      	beq.n	800341a <HAL_TIM_PWM_Start+0x136>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a16      	ldr	r2, [pc, #88]	; (800345c <HAL_TIM_PWM_Start+0x178>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d009      	beq.n	800341a <HAL_TIM_PWM_Start+0x136>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a18      	ldr	r2, [pc, #96]	; (800346c <HAL_TIM_PWM_Start+0x188>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d004      	beq.n	800341a <HAL_TIM_PWM_Start+0x136>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a16      	ldr	r2, [pc, #88]	; (8003470 <HAL_TIM_PWM_Start+0x18c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d111      	bne.n	800343e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b06      	cmp	r3, #6
 800342a:	d010      	beq.n	800344e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0201 	orr.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343c:	e007      	b.n	800344e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0201 	orr.w	r2, r2, #1
 800344c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40010000 	.word	0x40010000
 800345c:	40010400 	.word	0x40010400
 8003460:	40000400 	.word	0x40000400
 8003464:	40000800 	.word	0x40000800
 8003468:	40000c00 	.word	0x40000c00
 800346c:	40014000 	.word	0x40014000
 8003470:	40001800 	.word	0x40001800

08003474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800348a:	2302      	movs	r3, #2
 800348c:	e0ac      	b.n	80035e8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b0c      	cmp	r3, #12
 800349a:	f200 809f 	bhi.w	80035dc <HAL_TIM_PWM_ConfigChannel+0x168>
 800349e:	a201      	add	r2, pc, #4	; (adr r2, 80034a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a4:	080034d9 	.word	0x080034d9
 80034a8:	080035dd 	.word	0x080035dd
 80034ac:	080035dd 	.word	0x080035dd
 80034b0:	080035dd 	.word	0x080035dd
 80034b4:	08003519 	.word	0x08003519
 80034b8:	080035dd 	.word	0x080035dd
 80034bc:	080035dd 	.word	0x080035dd
 80034c0:	080035dd 	.word	0x080035dd
 80034c4:	0800355b 	.word	0x0800355b
 80034c8:	080035dd 	.word	0x080035dd
 80034cc:	080035dd 	.word	0x080035dd
 80034d0:	080035dd 	.word	0x080035dd
 80034d4:	0800359b 	.word	0x0800359b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68b9      	ldr	r1, [r7, #8]
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 f9ea 	bl	80038b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0208 	orr.w	r2, r2, #8
 80034f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0204 	bic.w	r2, r2, #4
 8003502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6999      	ldr	r1, [r3, #24]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	619a      	str	r2, [r3, #24]
      break;
 8003516:	e062      	b.n	80035de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fa3a 	bl	8003998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699a      	ldr	r2, [r3, #24]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6999      	ldr	r1, [r3, #24]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	021a      	lsls	r2, r3, #8
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	619a      	str	r2, [r3, #24]
      break;
 8003558:	e041      	b.n	80035de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	4618      	mov	r0, r3
 8003562:	f000 fa8f 	bl	8003a84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69da      	ldr	r2, [r3, #28]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0208 	orr.w	r2, r2, #8
 8003574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0204 	bic.w	r2, r2, #4
 8003584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69d9      	ldr	r1, [r3, #28]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	61da      	str	r2, [r3, #28]
      break;
 8003598:	e021      	b.n	80035de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fae3 	bl	8003b6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	69da      	ldr	r2, [r3, #28]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69da      	ldr	r2, [r3, #28]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69d9      	ldr	r1, [r3, #28]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	021a      	lsls	r2, r3, #8
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	61da      	str	r2, [r3, #28]
      break;
 80035da:	e000      	b.n	80035de <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80035dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_TIM_ConfigClockSource+0x18>
 8003604:	2302      	movs	r3, #2
 8003606:	e0b3      	b.n	8003770 <HAL_TIM_ConfigClockSource+0x180>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003626:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800362e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003640:	d03e      	beq.n	80036c0 <HAL_TIM_ConfigClockSource+0xd0>
 8003642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003646:	f200 8087 	bhi.w	8003758 <HAL_TIM_ConfigClockSource+0x168>
 800364a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800364e:	f000 8085 	beq.w	800375c <HAL_TIM_ConfigClockSource+0x16c>
 8003652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003656:	d87f      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x168>
 8003658:	2b70      	cmp	r3, #112	; 0x70
 800365a:	d01a      	beq.n	8003692 <HAL_TIM_ConfigClockSource+0xa2>
 800365c:	2b70      	cmp	r3, #112	; 0x70
 800365e:	d87b      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x168>
 8003660:	2b60      	cmp	r3, #96	; 0x60
 8003662:	d050      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0x116>
 8003664:	2b60      	cmp	r3, #96	; 0x60
 8003666:	d877      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x168>
 8003668:	2b50      	cmp	r3, #80	; 0x50
 800366a:	d03c      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0xf6>
 800366c:	2b50      	cmp	r3, #80	; 0x50
 800366e:	d873      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x168>
 8003670:	2b40      	cmp	r3, #64	; 0x40
 8003672:	d058      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x136>
 8003674:	2b40      	cmp	r3, #64	; 0x40
 8003676:	d86f      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x168>
 8003678:	2b30      	cmp	r3, #48	; 0x30
 800367a:	d064      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x156>
 800367c:	2b30      	cmp	r3, #48	; 0x30
 800367e:	d86b      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x168>
 8003680:	2b20      	cmp	r3, #32
 8003682:	d060      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x156>
 8003684:	2b20      	cmp	r3, #32
 8003686:	d867      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x168>
 8003688:	2b00      	cmp	r3, #0
 800368a:	d05c      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x156>
 800368c:	2b10      	cmp	r3, #16
 800368e:	d05a      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003690:	e062      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	6899      	ldr	r1, [r3, #8]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f000 fb33 	bl	8003d0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	609a      	str	r2, [r3, #8]
      break;
 80036be:	e04e      	b.n	800375e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6818      	ldr	r0, [r3, #0]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	6899      	ldr	r1, [r3, #8]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f000 fb1c 	bl	8003d0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036e2:	609a      	str	r2, [r3, #8]
      break;
 80036e4:	e03b      	b.n	800375e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6859      	ldr	r1, [r3, #4]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	461a      	mov	r2, r3
 80036f4:	f000 fa90 	bl	8003c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2150      	movs	r1, #80	; 0x50
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fae9 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 8003704:	e02b      	b.n	800375e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6859      	ldr	r1, [r3, #4]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	461a      	mov	r2, r3
 8003714:	f000 faaf 	bl	8003c76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2160      	movs	r1, #96	; 0x60
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fad9 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 8003724:	e01b      	b.n	800375e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6859      	ldr	r1, [r3, #4]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	461a      	mov	r2, r3
 8003734:	f000 fa70 	bl	8003c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2140      	movs	r1, #64	; 0x40
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fac9 	bl	8003cd6 <TIM_ITRx_SetConfig>
      break;
 8003744:	e00b      	b.n	800375e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4619      	mov	r1, r3
 8003750:	4610      	mov	r0, r2
 8003752:	f000 fac0 	bl	8003cd6 <TIM_ITRx_SetConfig>
        break;
 8003756:	e002      	b.n	800375e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003758:	bf00      	nop
 800375a:	e000      	b.n	800375e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800375c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a40      	ldr	r2, [pc, #256]	; (800388c <TIM_Base_SetConfig+0x114>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d013      	beq.n	80037b8 <TIM_Base_SetConfig+0x40>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003796:	d00f      	beq.n	80037b8 <TIM_Base_SetConfig+0x40>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a3d      	ldr	r2, [pc, #244]	; (8003890 <TIM_Base_SetConfig+0x118>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00b      	beq.n	80037b8 <TIM_Base_SetConfig+0x40>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a3c      	ldr	r2, [pc, #240]	; (8003894 <TIM_Base_SetConfig+0x11c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d007      	beq.n	80037b8 <TIM_Base_SetConfig+0x40>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a3b      	ldr	r2, [pc, #236]	; (8003898 <TIM_Base_SetConfig+0x120>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d003      	beq.n	80037b8 <TIM_Base_SetConfig+0x40>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a3a      	ldr	r2, [pc, #232]	; (800389c <TIM_Base_SetConfig+0x124>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d108      	bne.n	80037ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a2f      	ldr	r2, [pc, #188]	; (800388c <TIM_Base_SetConfig+0x114>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d02b      	beq.n	800382a <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d8:	d027      	beq.n	800382a <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a2c      	ldr	r2, [pc, #176]	; (8003890 <TIM_Base_SetConfig+0x118>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d023      	beq.n	800382a <TIM_Base_SetConfig+0xb2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a2b      	ldr	r2, [pc, #172]	; (8003894 <TIM_Base_SetConfig+0x11c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d01f      	beq.n	800382a <TIM_Base_SetConfig+0xb2>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a2a      	ldr	r2, [pc, #168]	; (8003898 <TIM_Base_SetConfig+0x120>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d01b      	beq.n	800382a <TIM_Base_SetConfig+0xb2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a29      	ldr	r2, [pc, #164]	; (800389c <TIM_Base_SetConfig+0x124>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d017      	beq.n	800382a <TIM_Base_SetConfig+0xb2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a28      	ldr	r2, [pc, #160]	; (80038a0 <TIM_Base_SetConfig+0x128>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d013      	beq.n	800382a <TIM_Base_SetConfig+0xb2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a27      	ldr	r2, [pc, #156]	; (80038a4 <TIM_Base_SetConfig+0x12c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00f      	beq.n	800382a <TIM_Base_SetConfig+0xb2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a26      	ldr	r2, [pc, #152]	; (80038a8 <TIM_Base_SetConfig+0x130>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00b      	beq.n	800382a <TIM_Base_SetConfig+0xb2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a25      	ldr	r2, [pc, #148]	; (80038ac <TIM_Base_SetConfig+0x134>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d007      	beq.n	800382a <TIM_Base_SetConfig+0xb2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a24      	ldr	r2, [pc, #144]	; (80038b0 <TIM_Base_SetConfig+0x138>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d003      	beq.n	800382a <TIM_Base_SetConfig+0xb2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a23      	ldr	r2, [pc, #140]	; (80038b4 <TIM_Base_SetConfig+0x13c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d108      	bne.n	800383c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4313      	orrs	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a0a      	ldr	r2, [pc, #40]	; (800388c <TIM_Base_SetConfig+0x114>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d003      	beq.n	8003870 <TIM_Base_SetConfig+0xf8>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a0c      	ldr	r2, [pc, #48]	; (800389c <TIM_Base_SetConfig+0x124>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d103      	bne.n	8003878 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	691a      	ldr	r2, [r3, #16]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	615a      	str	r2, [r3, #20]
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40010000 	.word	0x40010000
 8003890:	40000400 	.word	0x40000400
 8003894:	40000800 	.word	0x40000800
 8003898:	40000c00 	.word	0x40000c00
 800389c:	40010400 	.word	0x40010400
 80038a0:	40014000 	.word	0x40014000
 80038a4:	40014400 	.word	0x40014400
 80038a8:	40014800 	.word	0x40014800
 80038ac:	40001800 	.word	0x40001800
 80038b0:	40001c00 	.word	0x40001c00
 80038b4:	40002000 	.word	0x40002000

080038b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f023 0201 	bic.w	r2, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0303 	bic.w	r3, r3, #3
 80038ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f023 0302 	bic.w	r3, r3, #2
 8003900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a20      	ldr	r2, [pc, #128]	; (8003990 <TIM_OC1_SetConfig+0xd8>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d003      	beq.n	800391c <TIM_OC1_SetConfig+0x64>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a1f      	ldr	r2, [pc, #124]	; (8003994 <TIM_OC1_SetConfig+0xdc>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d10c      	bne.n	8003936 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f023 0308 	bic.w	r3, r3, #8
 8003922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f023 0304 	bic.w	r3, r3, #4
 8003934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a15      	ldr	r2, [pc, #84]	; (8003990 <TIM_OC1_SetConfig+0xd8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d003      	beq.n	8003946 <TIM_OC1_SetConfig+0x8e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a14      	ldr	r2, [pc, #80]	; (8003994 <TIM_OC1_SetConfig+0xdc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d111      	bne.n	800396a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800394c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	621a      	str	r2, [r3, #32]
}
 8003984:	bf00      	nop
 8003986:	371c      	adds	r7, #28
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	40010000 	.word	0x40010000
 8003994:	40010400 	.word	0x40010400

08003998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	f023 0210 	bic.w	r2, r3, #16
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f023 0320 	bic.w	r3, r3, #32
 80039e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a22      	ldr	r2, [pc, #136]	; (8003a7c <TIM_OC2_SetConfig+0xe4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d003      	beq.n	8003a00 <TIM_OC2_SetConfig+0x68>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a21      	ldr	r2, [pc, #132]	; (8003a80 <TIM_OC2_SetConfig+0xe8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d10d      	bne.n	8003a1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <TIM_OC2_SetConfig+0xe4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d003      	beq.n	8003a2c <TIM_OC2_SetConfig+0x94>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a16      	ldr	r2, [pc, #88]	; (8003a80 <TIM_OC2_SetConfig+0xe8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d113      	bne.n	8003a54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	621a      	str	r2, [r3, #32]
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40010400 	.word	0x40010400

08003a84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0303 	bic.w	r3, r3, #3
 8003aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	021b      	lsls	r3, r3, #8
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <TIM_OC3_SetConfig+0xe0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d003      	beq.n	8003aea <TIM_OC3_SetConfig+0x66>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a20      	ldr	r2, [pc, #128]	; (8003b68 <TIM_OC3_SetConfig+0xe4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10d      	bne.n	8003b06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a16      	ldr	r2, [pc, #88]	; (8003b64 <TIM_OC3_SetConfig+0xe0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <TIM_OC3_SetConfig+0x92>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a15      	ldr	r2, [pc, #84]	; (8003b68 <TIM_OC3_SetConfig+0xe4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d113      	bne.n	8003b3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	621a      	str	r2, [r3, #32]
}
 8003b58:	bf00      	nop
 8003b5a:	371c      	adds	r7, #28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	40010000 	.word	0x40010000
 8003b68:	40010400 	.word	0x40010400

08003b6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	021b      	lsls	r3, r3, #8
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	031b      	lsls	r3, r3, #12
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a12      	ldr	r2, [pc, #72]	; (8003c10 <TIM_OC4_SetConfig+0xa4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <TIM_OC4_SetConfig+0x68>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a11      	ldr	r2, [pc, #68]	; (8003c14 <TIM_OC4_SetConfig+0xa8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d109      	bne.n	8003be8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	019b      	lsls	r3, r3, #6
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	621a      	str	r2, [r3, #32]
}
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40010000 	.word	0x40010000
 8003c14:	40010400 	.word	0x40010400

08003c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	f023 0201 	bic.w	r2, r3, #1
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f023 030a 	bic.w	r3, r3, #10
 8003c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b087      	sub	sp, #28
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	f023 0210 	bic.w	r2, r3, #16
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	031b      	lsls	r3, r3, #12
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	621a      	str	r2, [r3, #32]
}
 8003cca:	bf00      	nop
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b085      	sub	sp, #20
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f043 0307 	orr.w	r3, r3, #7
 8003cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	609a      	str	r2, [r3, #8]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	021a      	lsls	r2, r3, #8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	609a      	str	r2, [r3, #8]
}
 8003d40:	bf00      	nop
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f003 031f 	and.w	r3, r3, #31
 8003d5e:	2201      	movs	r2, #1
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a1a      	ldr	r2, [r3, #32]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	401a      	ands	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a1a      	ldr	r2, [r3, #32]
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	fa01 f303 	lsl.w	r3, r1, r3
 8003d84:	431a      	orrs	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	621a      	str	r2, [r3, #32]
}
 8003d8a:	bf00      	nop
 8003d8c:	371c      	adds	r7, #28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e05a      	b.n	8003e66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a21      	ldr	r2, [pc, #132]	; (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d022      	beq.n	8003e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfc:	d01d      	beq.n	8003e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1d      	ldr	r2, [pc, #116]	; (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d018      	beq.n	8003e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1b      	ldr	r2, [pc, #108]	; (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1a      	ldr	r2, [pc, #104]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00e      	beq.n	8003e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a18      	ldr	r2, [pc, #96]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d009      	beq.n	8003e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a17      	ldr	r2, [pc, #92]	; (8003e88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d004      	beq.n	8003e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d10c      	bne.n	8003e54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40010000 	.word	0x40010000
 8003e78:	40000400 	.word	0x40000400
 8003e7c:	40000800 	.word	0x40000800
 8003e80:	40000c00 	.word	0x40000c00
 8003e84:	40010400 	.word	0x40010400
 8003e88:	40014000 	.word	0x40014000
 8003e8c:	40001800 	.word	0x40001800

08003e90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e90:	b084      	sub	sp, #16
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	f107 001c 	add.w	r0, r7, #28
 8003e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d122      	bne.n	8003eee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d105      	bne.n	8003ee2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f001 fac6 	bl	8005474 <USB_CoreReset>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	73fb      	strb	r3, [r7, #15]
 8003eec:	e01a      	b.n	8003f24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f001 faba 	bl	8005474 <USB_CoreReset>
 8003f00:	4603      	mov	r3, r0
 8003f02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	639a      	str	r2, [r3, #56]	; 0x38
 8003f16:	e005      	b.n	8003f24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d10b      	bne.n	8003f42 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f043 0206 	orr.w	r2, r3, #6
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f043 0220 	orr.w	r2, r3, #32
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f4e:	b004      	add	sp, #16
 8003f50:	4770      	bx	lr
	...

08003f54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d165      	bne.n	8004034 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4a41      	ldr	r2, [pc, #260]	; (8004070 <USB_SetTurnaroundTime+0x11c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d906      	bls.n	8003f7e <USB_SetTurnaroundTime+0x2a>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4a40      	ldr	r2, [pc, #256]	; (8004074 <USB_SetTurnaroundTime+0x120>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d202      	bcs.n	8003f7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003f78:	230f      	movs	r3, #15
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	e062      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	4a3c      	ldr	r2, [pc, #240]	; (8004074 <USB_SetTurnaroundTime+0x120>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d306      	bcc.n	8003f94 <USB_SetTurnaroundTime+0x40>
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	4a3b      	ldr	r2, [pc, #236]	; (8004078 <USB_SetTurnaroundTime+0x124>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d202      	bcs.n	8003f94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003f8e:	230e      	movs	r3, #14
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	e057      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	4a38      	ldr	r2, [pc, #224]	; (8004078 <USB_SetTurnaroundTime+0x124>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d306      	bcc.n	8003faa <USB_SetTurnaroundTime+0x56>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4a37      	ldr	r2, [pc, #220]	; (800407c <USB_SetTurnaroundTime+0x128>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d202      	bcs.n	8003faa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003fa4:	230d      	movs	r3, #13
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	e04c      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	4a33      	ldr	r2, [pc, #204]	; (800407c <USB_SetTurnaroundTime+0x128>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d306      	bcc.n	8003fc0 <USB_SetTurnaroundTime+0x6c>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	4a32      	ldr	r2, [pc, #200]	; (8004080 <USB_SetTurnaroundTime+0x12c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d802      	bhi.n	8003fc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003fba:	230c      	movs	r3, #12
 8003fbc:	617b      	str	r3, [r7, #20]
 8003fbe:	e041      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4a2f      	ldr	r2, [pc, #188]	; (8004080 <USB_SetTurnaroundTime+0x12c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d906      	bls.n	8003fd6 <USB_SetTurnaroundTime+0x82>
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4a2e      	ldr	r2, [pc, #184]	; (8004084 <USB_SetTurnaroundTime+0x130>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d802      	bhi.n	8003fd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003fd0:	230b      	movs	r3, #11
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	e036      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	4a2a      	ldr	r2, [pc, #168]	; (8004084 <USB_SetTurnaroundTime+0x130>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d906      	bls.n	8003fec <USB_SetTurnaroundTime+0x98>
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	4a29      	ldr	r2, [pc, #164]	; (8004088 <USB_SetTurnaroundTime+0x134>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d802      	bhi.n	8003fec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003fe6:	230a      	movs	r3, #10
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	e02b      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4a26      	ldr	r2, [pc, #152]	; (8004088 <USB_SetTurnaroundTime+0x134>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d906      	bls.n	8004002 <USB_SetTurnaroundTime+0xae>
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	4a25      	ldr	r2, [pc, #148]	; (800408c <USB_SetTurnaroundTime+0x138>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d202      	bcs.n	8004002 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003ffc:	2309      	movs	r3, #9
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	e020      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4a21      	ldr	r2, [pc, #132]	; (800408c <USB_SetTurnaroundTime+0x138>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d306      	bcc.n	8004018 <USB_SetTurnaroundTime+0xc4>
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4a20      	ldr	r2, [pc, #128]	; (8004090 <USB_SetTurnaroundTime+0x13c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d802      	bhi.n	8004018 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004012:	2308      	movs	r3, #8
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	e015      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4a1d      	ldr	r2, [pc, #116]	; (8004090 <USB_SetTurnaroundTime+0x13c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d906      	bls.n	800402e <USB_SetTurnaroundTime+0xda>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4a1c      	ldr	r2, [pc, #112]	; (8004094 <USB_SetTurnaroundTime+0x140>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d202      	bcs.n	800402e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004028:	2307      	movs	r3, #7
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	e00a      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800402e:	2306      	movs	r3, #6
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	e007      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800403a:	2309      	movs	r3, #9
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	e001      	b.n	8004044 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004040:	2309      	movs	r3, #9
 8004042:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	029b      	lsls	r3, r3, #10
 8004058:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800405c:	431a      	orrs	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	00d8acbf 	.word	0x00d8acbf
 8004074:	00e4e1c0 	.word	0x00e4e1c0
 8004078:	00f42400 	.word	0x00f42400
 800407c:	01067380 	.word	0x01067380
 8004080:	011a499f 	.word	0x011a499f
 8004084:	01312cff 	.word	0x01312cff
 8004088:	014ca43f 	.word	0x014ca43f
 800408c:	016e3600 	.word	0x016e3600
 8004090:	01a6ab1f 	.word	0x01a6ab1f
 8004094:	01e84800 	.word	0x01e84800

08004098 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f043 0201 	orr.w	r2, r3, #1
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f023 0201 	bic.w	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d106      	bne.n	8004108 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	e00b      	b.n	8004120 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	60da      	str	r2, [r3, #12]
 800411a:	e001      	b.n	8004120 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e003      	b.n	8004128 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004120:	2032      	movs	r0, #50	; 0x32
 8004122:	f7fc fecf 	bl	8000ec4 <HAL_Delay>

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004130:	b084      	sub	sp, #16
 8004132:	b580      	push	{r7, lr}
 8004134:	b086      	sub	sp, #24
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800413e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800414a:	2300      	movs	r3, #0
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	e009      	b.n	8004164 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	3340      	adds	r3, #64	; 0x40
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	2200      	movs	r2, #0
 800415c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	3301      	adds	r3, #1
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b0e      	cmp	r3, #14
 8004168:	d9f2      	bls.n	8004150 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800416a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800416c:	2b00      	cmp	r3, #0
 800416e:	d11c      	bne.n	80041aa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800417e:	f043 0302 	orr.w	r3, r3, #2
 8004182:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004188:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	639a      	str	r2, [r3, #56]	; 0x38
 80041a8:	e00b      	b.n	80041c2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041c8:	461a      	mov	r2, r3
 80041ca:	2300      	movs	r3, #0
 80041cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d4:	4619      	mov	r1, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041dc:	461a      	mov	r2, r3
 80041de:	680b      	ldr	r3, [r1, #0]
 80041e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d10c      	bne.n	8004202 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80041e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d104      	bne.n	80041f8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041ee:	2100      	movs	r1, #0
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f949 	bl	8004488 <USB_SetDevSpeed>
 80041f6:	e008      	b.n	800420a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041f8:	2101      	movs	r1, #1
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f944 	bl	8004488 <USB_SetDevSpeed>
 8004200:	e003      	b.n	800420a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004202:	2103      	movs	r1, #3
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f93f 	bl	8004488 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800420a:	2110      	movs	r1, #16
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f8f3 	bl	80043f8 <USB_FlushTxFifo>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f911 	bl	8004444 <USB_FlushRxFifo>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004232:	461a      	mov	r2, r3
 8004234:	2300      	movs	r3, #0
 8004236:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423e:	461a      	mov	r2, r3
 8004240:	2300      	movs	r3, #0
 8004242:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424a:	461a      	mov	r2, r3
 800424c:	2300      	movs	r3, #0
 800424e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004250:	2300      	movs	r3, #0
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	e043      	b.n	80042de <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800426c:	d118      	bne.n	80042a0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004280:	461a      	mov	r2, r3
 8004282:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	e013      	b.n	80042b2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004296:	461a      	mov	r2, r3
 8004298:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	e008      	b.n	80042b2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ac:	461a      	mov	r2, r3
 80042ae:	2300      	movs	r3, #0
 80042b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042be:	461a      	mov	r2, r3
 80042c0:	2300      	movs	r3, #0
 80042c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d0:	461a      	mov	r2, r3
 80042d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	3301      	adds	r3, #1
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d3b7      	bcc.n	8004256 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042e6:	2300      	movs	r3, #0
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	e043      	b.n	8004374 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004302:	d118      	bne.n	8004336 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10a      	bne.n	8004320 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004316:	461a      	mov	r2, r3
 8004318:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e013      	b.n	8004348 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432c:	461a      	mov	r2, r3
 800432e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	e008      	b.n	8004348 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004342:	461a      	mov	r2, r3
 8004344:	2300      	movs	r3, #0
 8004346:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4413      	add	r3, r2
 8004350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004354:	461a      	mov	r2, r3
 8004356:	2300      	movs	r3, #0
 8004358:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004366:	461a      	mov	r2, r3
 8004368:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800436c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	3301      	adds	r3, #1
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	429a      	cmp	r2, r3
 800437a:	d3b7      	bcc.n	80042ec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800438a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800438e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800439c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d105      	bne.n	80043b0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	f043 0210 	orr.w	r2, r3, #16
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699a      	ldr	r2, [r3, #24]
 80043b4:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <USB_DevInit+0x2c4>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f043 0208 	orr.w	r2, r3, #8
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80043ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d107      	bne.n	80043e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043dc:	f043 0304 	orr.w	r3, r3, #4
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043f0:	b004      	add	sp, #16
 80043f2:	4770      	bx	lr
 80043f4:	803c3800 	.word	0x803c3800

080043f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	019b      	lsls	r3, r3, #6
 800440a:	f043 0220 	orr.w	r2, r3, #32
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3301      	adds	r3, #1
 8004416:	60fb      	str	r3, [r7, #12]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4a09      	ldr	r2, [pc, #36]	; (8004440 <USB_FlushTxFifo+0x48>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d901      	bls.n	8004424 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e006      	b.n	8004432 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b20      	cmp	r3, #32
 800442e:	d0f0      	beq.n	8004412 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	00030d40 	.word	0x00030d40

08004444 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2210      	movs	r2, #16
 8004454:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3301      	adds	r3, #1
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4a09      	ldr	r2, [pc, #36]	; (8004484 <USB_FlushRxFifo+0x40>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d901      	bls.n	8004468 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e006      	b.n	8004476 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b10      	cmp	r3, #16
 8004472:	d0f0      	beq.n	8004456 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	00030d40 	.word	0x00030d40

08004488 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	78fb      	ldrb	r3, [r7, #3]
 80044a2:	68f9      	ldr	r1, [r7, #12]
 80044a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044a8:	4313      	orrs	r3, r2
 80044aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b087      	sub	sp, #28
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 0306 	and.w	r3, r3, #6
 80044d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d102      	bne.n	80044e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80044da:	2300      	movs	r3, #0
 80044dc:	75fb      	strb	r3, [r7, #23]
 80044de:	e00a      	b.n	80044f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d002      	beq.n	80044ec <USB_GetDevSpeed+0x32>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b06      	cmp	r3, #6
 80044ea:	d102      	bne.n	80044f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80044ec:	2302      	movs	r3, #2
 80044ee:	75fb      	strb	r3, [r7, #23]
 80044f0:	e001      	b.n	80044f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80044f2:	230f      	movs	r3, #15
 80044f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	785b      	ldrb	r3, [r3, #1]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d13a      	bne.n	8004596 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	f003 030f 	and.w	r3, r3, #15
 8004530:	2101      	movs	r1, #1
 8004532:	fa01 f303 	lsl.w	r3, r1, r3
 8004536:	b29b      	uxth	r3, r3
 8004538:	68f9      	ldr	r1, [r7, #12]
 800453a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800453e:	4313      	orrs	r3, r2
 8004540:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d155      	bne.n	8004604 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	78db      	ldrb	r3, [r3, #3]
 8004572:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004574:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	059b      	lsls	r3, r3, #22
 800457a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800457c:	4313      	orrs	r3, r2
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	0151      	lsls	r1, r2, #5
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	440a      	add	r2, r1
 8004586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800458a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800458e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	e036      	b.n	8004604 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459c:	69da      	ldr	r2, [r3, #28]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	2101      	movs	r1, #1
 80045a8:	fa01 f303 	lsl.w	r3, r1, r3
 80045ac:	041b      	lsls	r3, r3, #16
 80045ae:	68f9      	ldr	r1, [r7, #12]
 80045b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045b4:	4313      	orrs	r3, r2
 80045b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d11a      	bne.n	8004604 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	78db      	ldrb	r3, [r3, #3]
 80045e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045ea:	430b      	orrs	r3, r1
 80045ec:	4313      	orrs	r3, r2
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	0151      	lsls	r1, r2, #5
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	440a      	add	r2, r1
 80045f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004602:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	785b      	ldrb	r3, [r3, #1]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d161      	bne.n	80046f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004646:	d11f      	bne.n	8004688 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	0151      	lsls	r1, r2, #5
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	440a      	add	r2, r1
 800465e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004662:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004666:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	0151      	lsls	r1, r2, #5
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	440a      	add	r2, r1
 800467e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004682:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004686:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	2101      	movs	r1, #1
 800469a:	fa01 f303 	lsl.w	r3, r1, r3
 800469e:	b29b      	uxth	r3, r3
 80046a0:	43db      	mvns	r3, r3
 80046a2:	68f9      	ldr	r1, [r7, #12]
 80046a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046a8:	4013      	ands	r3, r2
 80046aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	2101      	movs	r1, #1
 80046be:	fa01 f303 	lsl.w	r3, r1, r3
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	68f9      	ldr	r1, [r7, #12]
 80046c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046cc:	4013      	ands	r3, r2
 80046ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	0159      	lsls	r1, r3, #5
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	440b      	add	r3, r1
 80046e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ea:	4619      	mov	r1, r3
 80046ec:	4b35      	ldr	r3, [pc, #212]	; (80047c4 <USB_DeactivateEndpoint+0x1b0>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]
 80046f2:	e060      	b.n	80047b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800470a:	d11f      	bne.n	800474c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	0151      	lsls	r1, r2, #5
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	440a      	add	r2, r1
 8004722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004726:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800472a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	0151      	lsls	r1, r2, #5
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	440a      	add	r2, r1
 8004742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004746:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800474a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	2101      	movs	r1, #1
 800475e:	fa01 f303 	lsl.w	r3, r1, r3
 8004762:	041b      	lsls	r3, r3, #16
 8004764:	43db      	mvns	r3, r3
 8004766:	68f9      	ldr	r1, [r7, #12]
 8004768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800476c:	4013      	ands	r3, r2
 800476e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	2101      	movs	r1, #1
 8004782:	fa01 f303 	lsl.w	r3, r1, r3
 8004786:	041b      	lsls	r3, r3, #16
 8004788:	43db      	mvns	r3, r3
 800478a:	68f9      	ldr	r1, [r7, #12]
 800478c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004790:	4013      	ands	r3, r2
 8004792:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	0159      	lsls	r1, r3, #5
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	440b      	add	r3, r1
 80047aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ae:	4619      	mov	r1, r3
 80047b0:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <USB_DeactivateEndpoint+0x1b4>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	ec337800 	.word	0xec337800
 80047c8:	eff37800 	.word	0xeff37800

080047cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08a      	sub	sp, #40	; 0x28
 80047d0:	af02      	add	r7, sp, #8
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	4613      	mov	r3, r2
 80047d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	785b      	ldrb	r3, [r3, #1]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	f040 815c 	bne.w	8004aa6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d132      	bne.n	800485c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	0151      	lsls	r1, r2, #5
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	440a      	add	r2, r1
 800480c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004810:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004814:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004818:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	0151      	lsls	r1, r2, #5
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	440a      	add	r2, r1
 8004830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004834:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004838:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	0151      	lsls	r1, r2, #5
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	440a      	add	r2, r1
 8004850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004854:	0cdb      	lsrs	r3, r3, #19
 8004856:	04db      	lsls	r3, r3, #19
 8004858:	6113      	str	r3, [r2, #16]
 800485a:	e074      	b.n	8004946 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	0151      	lsls	r1, r2, #5
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	440a      	add	r2, r1
 8004872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004876:	0cdb      	lsrs	r3, r3, #19
 8004878:	04db      	lsls	r3, r3, #19
 800487a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	0151      	lsls	r1, r2, #5
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	440a      	add	r2, r1
 8004892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004896:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800489a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800489e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	6959      	ldr	r1, [r3, #20]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	440b      	add	r3, r1
 80048b8:	1e59      	subs	r1, r3, #1
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	fbb1 f3f3 	udiv	r3, r1, r3
 80048c2:	04d9      	lsls	r1, r3, #19
 80048c4:	4b9d      	ldr	r3, [pc, #628]	; (8004b3c <USB_EPStartXfer+0x370>)
 80048c6:	400b      	ands	r3, r1
 80048c8:	69b9      	ldr	r1, [r7, #24]
 80048ca:	0148      	lsls	r0, r1, #5
 80048cc:	69f9      	ldr	r1, [r7, #28]
 80048ce:	4401      	add	r1, r0
 80048d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048d4:	4313      	orrs	r3, r2
 80048d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e4:	691a      	ldr	r2, [r3, #16]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ee:	69b9      	ldr	r1, [r7, #24]
 80048f0:	0148      	lsls	r0, r1, #5
 80048f2:	69f9      	ldr	r1, [r7, #28]
 80048f4:	4401      	add	r1, r0
 80048f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048fa:	4313      	orrs	r3, r2
 80048fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	78db      	ldrb	r3, [r3, #3]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d11f      	bne.n	8004946 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	0151      	lsls	r1, r2, #5
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	440a      	add	r2, r1
 800491c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004920:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004924:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	0151      	lsls	r1, r2, #5
 8004938:	69fa      	ldr	r2, [r7, #28]
 800493a:	440a      	add	r2, r1
 800493c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004940:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004944:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004946:	79fb      	ldrb	r3, [r7, #7]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d14b      	bne.n	80049e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d009      	beq.n	8004968 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004960:	461a      	mov	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	78db      	ldrb	r3, [r3, #3]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d128      	bne.n	80049c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497c:	2b00      	cmp	r3, #0
 800497e:	d110      	bne.n	80049a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	0151      	lsls	r1, r2, #5
 8004992:	69fa      	ldr	r2, [r7, #28]
 8004994:	440a      	add	r2, r1
 8004996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800499a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	e00f      	b.n	80049c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	0151      	lsls	r1, r2, #5
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	440a      	add	r2, r1
 80049d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	e12f      	b.n	8004c44 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	0151      	lsls	r1, r2, #5
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	440a      	add	r2, r1
 80049fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a02:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	78db      	ldrb	r3, [r3, #3]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d015      	beq.n	8004a38 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8117 	beq.w	8004c44 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	2101      	movs	r1, #1
 8004a28:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2c:	69f9      	ldr	r1, [r7, #28]
 8004a2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a32:	4313      	orrs	r3, r2
 8004a34:	634b      	str	r3, [r1, #52]	; 0x34
 8004a36:	e105      	b.n	8004c44 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d110      	bne.n	8004a6a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	0151      	lsls	r1, r2, #5
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	440a      	add	r2, r1
 8004a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	e00f      	b.n	8004a8a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	0151      	lsls	r1, r2, #5
 8004a7c:	69fa      	ldr	r2, [r7, #28]
 8004a7e:	440a      	add	r2, r1
 8004a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a88:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	68d9      	ldr	r1, [r3, #12]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	781a      	ldrb	r2, [r3, #0]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	b298      	uxth	r0, r3
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 fa2b 	bl	8004efa <USB_WritePacket>
 8004aa4:	e0ce      	b.n	8004c44 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	0151      	lsls	r1, r2, #5
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	440a      	add	r2, r1
 8004abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac0:	0cdb      	lsrs	r3, r3, #19
 8004ac2:	04db      	lsls	r3, r3, #19
 8004ac4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	0151      	lsls	r1, r2, #5
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	440a      	add	r2, r1
 8004adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ae4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ae8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d126      	bne.n	8004b40 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afe:	691a      	ldr	r2, [r3, #16]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b08:	69b9      	ldr	r1, [r7, #24]
 8004b0a:	0148      	lsls	r0, r1, #5
 8004b0c:	69f9      	ldr	r1, [r7, #28]
 8004b0e:	4401      	add	r1, r0
 8004b10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b14:	4313      	orrs	r3, r2
 8004b16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	0151      	lsls	r1, r2, #5
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	440a      	add	r2, r1
 8004b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b36:	6113      	str	r3, [r2, #16]
 8004b38:	e036      	b.n	8004ba8 <USB_EPStartXfer+0x3dc>
 8004b3a:	bf00      	nop
 8004b3c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	695a      	ldr	r2, [r3, #20]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	4413      	add	r3, r2
 8004b4a:	1e5a      	subs	r2, r3, #1
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b54:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b62:	691a      	ldr	r2, [r3, #16]
 8004b64:	8afb      	ldrh	r3, [r7, #22]
 8004b66:	04d9      	lsls	r1, r3, #19
 8004b68:	4b39      	ldr	r3, [pc, #228]	; (8004c50 <USB_EPStartXfer+0x484>)
 8004b6a:	400b      	ands	r3, r1
 8004b6c:	69b9      	ldr	r1, [r7, #24]
 8004b6e:	0148      	lsls	r0, r1, #5
 8004b70:	69f9      	ldr	r1, [r7, #28]
 8004b72:	4401      	add	r1, r0
 8004b74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	8af9      	ldrh	r1, [r7, #22]
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b98:	69b9      	ldr	r1, [r7, #24]
 8004b9a:	0148      	lsls	r0, r1, #5
 8004b9c:	69f9      	ldr	r1, [r7, #28]
 8004b9e:	4401      	add	r1, r0
 8004ba0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004ba8:	79fb      	ldrb	r3, [r7, #7]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d10d      	bne.n	8004bca <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d009      	beq.n	8004bca <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	68d9      	ldr	r1, [r3, #12]
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc6:	460a      	mov	r2, r1
 8004bc8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	78db      	ldrb	r3, [r3, #3]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d128      	bne.n	8004c24 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d110      	bne.n	8004c04 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	0151      	lsls	r1, r2, #5
 8004bf4:	69fa      	ldr	r2, [r7, #28]
 8004bf6:	440a      	add	r2, r1
 8004bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e00f      	b.n	8004c24 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	0151      	lsls	r1, r2, #5
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	440a      	add	r2, r1
 8004c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	0151      	lsls	r1, r2, #5
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	440a      	add	r2, r1
 8004c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	1ff80000 	.word	0x1ff80000

08004c54 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	f040 80cd 	bne.w	8004e10 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d132      	bne.n	8004ce4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	0151      	lsls	r1, r2, #5
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	440a      	add	r2, r1
 8004c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ca0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	0151      	lsls	r1, r2, #5
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	440a      	add	r2, r1
 8004cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	0151      	lsls	r1, r2, #5
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	440a      	add	r2, r1
 8004cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cdc:	0cdb      	lsrs	r3, r3, #19
 8004cde:	04db      	lsls	r3, r3, #19
 8004ce0:	6113      	str	r3, [r2, #16]
 8004ce2:	e04e      	b.n	8004d82 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	0151      	lsls	r1, r2, #5
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	440a      	add	r2, r1
 8004cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cfe:	0cdb      	lsrs	r3, r3, #19
 8004d00:	04db      	lsls	r3, r3, #19
 8004d02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	0151      	lsls	r1, r2, #5
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	440a      	add	r2, r1
 8004d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d26:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	695a      	ldr	r2, [r3, #20]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d903      	bls.n	8004d3c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	691a      	ldr	r2, [r3, #16]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d72:	6939      	ldr	r1, [r7, #16]
 8004d74:	0148      	lsls	r0, r1, #5
 8004d76:	6979      	ldr	r1, [r7, #20]
 8004d78:	4401      	add	r1, r0
 8004d7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d11e      	bne.n	8004dc6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d009      	beq.n	8004da4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	0151      	lsls	r1, r2, #5
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	440a      	add	r2, r1
 8004dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	e092      	b.n	8004eec <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	0151      	lsls	r1, r2, #5
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	440a      	add	r2, r1
 8004ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004de4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d07e      	beq.n	8004eec <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	2101      	movs	r1, #1
 8004e00:	fa01 f303 	lsl.w	r3, r1, r3
 8004e04:	6979      	ldr	r1, [r7, #20]
 8004e06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	634b      	str	r3, [r1, #52]	; 0x34
 8004e0e:	e06d      	b.n	8004eec <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	0151      	lsls	r1, r2, #5
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	440a      	add	r2, r1
 8004e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e2a:	0cdb      	lsrs	r3, r3, #19
 8004e2c:	04db      	lsls	r3, r3, #19
 8004e2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	0151      	lsls	r1, r2, #5
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	440a      	add	r2, r1
 8004e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e52:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	689a      	ldr	r2, [r3, #8]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	0151      	lsls	r1, r2, #5
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	440a      	add	r2, r1
 8004e7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e9a:	6939      	ldr	r1, [r7, #16]
 8004e9c:	0148      	lsls	r0, r1, #5
 8004e9e:	6979      	ldr	r1, [r7, #20]
 8004ea0:	4401      	add	r1, r0
 8004ea2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004eaa:	79fb      	ldrb	r3, [r7, #7]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d10d      	bne.n	8004ecc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d009      	beq.n	8004ecc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	68d9      	ldr	r1, [r3, #12]
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec8:	460a      	mov	r2, r1
 8004eca:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	0151      	lsls	r1, r2, #5
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	440a      	add	r2, r1
 8004ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b089      	sub	sp, #36	; 0x24
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	4611      	mov	r1, r2
 8004f06:	461a      	mov	r2, r3
 8004f08:	460b      	mov	r3, r1
 8004f0a:	71fb      	strb	r3, [r7, #7]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004f18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d11a      	bne.n	8004f56 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f20:	88bb      	ldrh	r3, [r7, #4]
 8004f22:	3303      	adds	r3, #3
 8004f24:	089b      	lsrs	r3, r3, #2
 8004f26:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61bb      	str	r3, [r7, #24]
 8004f2c:	e00f      	b.n	8004f4e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	031a      	lsls	r2, r3, #12
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	4413      	add	r3, r2
 8004f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	3304      	adds	r3, #4
 8004f46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	61bb      	str	r3, [r7, #24]
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d3eb      	bcc.n	8004f2e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3724      	adds	r7, #36	; 0x24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b089      	sub	sp, #36	; 0x24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004f7a:	88fb      	ldrh	r3, [r7, #6]
 8004f7c:	3303      	adds	r3, #3
 8004f7e:	089b      	lsrs	r3, r3, #2
 8004f80:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004f82:	2300      	movs	r3, #0
 8004f84:	61bb      	str	r3, [r7, #24]
 8004f86:	e00b      	b.n	8004fa0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	601a      	str	r2, [r3, #0]
    pDest++;
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	3304      	adds	r3, #4
 8004f98:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	61bb      	str	r3, [r7, #24]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d3ef      	bcc.n	8004f88 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004fa8:	69fb      	ldr	r3, [r7, #28]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3724      	adds	r7, #36	; 0x24
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	785b      	ldrb	r3, [r3, #1]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d12c      	bne.n	800502c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	db12      	blt.n	800500a <USB_EPSetStall+0x54>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00f      	beq.n	800500a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	0151      	lsls	r1, r2, #5
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	440a      	add	r2, r1
 8005000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005004:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005008:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	0151      	lsls	r1, r2, #5
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	440a      	add	r2, r1
 8005020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e02b      	b.n	8005084 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	db12      	blt.n	8005064 <USB_EPSetStall+0xae>
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00f      	beq.n	8005064 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	0151      	lsls	r1, r2, #5
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	440a      	add	r2, r1
 800505a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800505e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005062:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	0151      	lsls	r1, r2, #5
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	440a      	add	r2, r1
 800507a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800507e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005082:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005092:	b480      	push	{r7}
 8005094:	b085      	sub	sp, #20
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	785b      	ldrb	r3, [r3, #1]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d128      	bne.n	8005100 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	0151      	lsls	r1, r2, #5
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	440a      	add	r2, r1
 80050c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	78db      	ldrb	r3, [r3, #3]
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d003      	beq.n	80050de <USB_EPClearStall+0x4c>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	78db      	ldrb	r3, [r3, #3]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d138      	bne.n	8005150 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	0151      	lsls	r1, r2, #5
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	440a      	add	r2, r1
 80050f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	e027      	b.n	8005150 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	440a      	add	r2, r1
 8005116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800511a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800511e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	78db      	ldrb	r3, [r3, #3]
 8005124:	2b03      	cmp	r3, #3
 8005126:	d003      	beq.n	8005130 <USB_EPClearStall+0x9e>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	78db      	ldrb	r3, [r3, #3]
 800512c:	2b02      	cmp	r3, #2
 800512e:	d10f      	bne.n	8005150 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	0151      	lsls	r1, r2, #5
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	440a      	add	r2, r1
 8005146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800514e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800515e:	b480      	push	{r7}
 8005160:	b085      	sub	sp, #20
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	460b      	mov	r3, r1
 8005168:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800517c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005180:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	78fb      	ldrb	r3, [r7, #3]
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005192:	68f9      	ldr	r1, [r7, #12]
 8005194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005198:	4313      	orrs	r3, r2
 800519a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b085      	sub	sp, #20
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80051c4:	f023 0303 	bic.w	r3, r3, #3
 80051c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051d8:	f023 0302 	bic.w	r3, r3, #2
 80051dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005206:	f023 0303 	bic.w	r3, r3, #3
 800520a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800521a:	f043 0302 	orr.w	r3, r3, #2
 800521e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800522e:	b480      	push	{r7}
 8005230:	b085      	sub	sp, #20
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4013      	ands	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005246:	68fb      	ldr	r3, [r7, #12]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	4013      	ands	r3, r2
 8005276:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	0c1b      	lsrs	r3, r3, #16
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	4013      	ands	r3, r2
 80052aa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	b29b      	uxth	r3, r3
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	4013      	ands	r3, r2
 80052e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052ea:	68bb      	ldr	r3, [r7, #8]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	fa22 f303 	lsr.w	r3, r2, r3
 8005328:	01db      	lsls	r3, r3, #7
 800532a:	b2db      	uxtb	r3, r3
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005332:	78fb      	ldrb	r3, [r7, #3]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4013      	ands	r3, r2
 8005344:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005346:	68bb      	ldr	r3, [r7, #8]
}
 8005348:	4618      	mov	r0, r3
 800534a:	371c      	adds	r7, #28
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	f003 0301 	and.w	r3, r3, #1
}
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800538a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800538e:	f023 0307 	bic.w	r3, r3, #7
 8005392:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	460b      	mov	r3, r1
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	333c      	adds	r3, #60	; 0x3c
 80053ce:	3304      	adds	r3, #4
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	4a26      	ldr	r2, [pc, #152]	; (8005470 <USB_EP0_OutStart+0xb8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d90a      	bls.n	80053f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053ec:	d101      	bne.n	80053f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e037      	b.n	8005462 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f8:	461a      	mov	r2, r3
 80053fa:	2300      	movs	r3, #0
 80053fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800540c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005410:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005420:	f043 0318 	orr.w	r3, r3, #24
 8005424:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005434:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005438:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800543a:	7afb      	ldrb	r3, [r7, #11]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d10f      	bne.n	8005460 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005446:	461a      	mov	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800545a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800545e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	4f54300a 	.word	0x4f54300a

08005474 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3301      	adds	r3, #1
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4a13      	ldr	r2, [pc, #76]	; (80054d8 <USB_CoreReset+0x64>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d901      	bls.n	8005492 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e01b      	b.n	80054ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	daf2      	bge.n	8005480 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f043 0201 	orr.w	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3301      	adds	r3, #1
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4a09      	ldr	r2, [pc, #36]	; (80054d8 <USB_CoreReset+0x64>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d901      	bls.n	80054bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e006      	b.n	80054ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d0f0      	beq.n	80054aa <USB_CoreReset+0x36>

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	00030d40 	.word	0x00030d40

080054dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80054e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80054ec:	f002 f96a 	bl	80077c4 <USBD_static_malloc>
 80054f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d105      	bne.n	8005504 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005500:	2302      	movs	r3, #2
 8005502:	e066      	b.n	80055d2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	7c1b      	ldrb	r3, [r3, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d119      	bne.n	8005548 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005518:	2202      	movs	r2, #2
 800551a:	2181      	movs	r1, #129	; 0x81
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f002 f82e 	bl	800757e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800552c:	2202      	movs	r2, #2
 800552e:	2101      	movs	r1, #1
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f002 f824 	bl	800757e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2210      	movs	r2, #16
 8005542:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005546:	e016      	b.n	8005576 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005548:	2340      	movs	r3, #64	; 0x40
 800554a:	2202      	movs	r2, #2
 800554c:	2181      	movs	r1, #129	; 0x81
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f002 f815 	bl	800757e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800555a:	2340      	movs	r3, #64	; 0x40
 800555c:	2202      	movs	r2, #2
 800555e:	2101      	movs	r1, #1
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f002 f80c 	bl	800757e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2210      	movs	r2, #16
 8005572:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005576:	2308      	movs	r3, #8
 8005578:	2203      	movs	r2, #3
 800557a:	2182      	movs	r1, #130	; 0x82
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f001 fffe 	bl	800757e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	7c1b      	ldrb	r3, [r3, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d109      	bne.n	80055c0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055b6:	2101      	movs	r1, #1
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f002 f8cf 	bl	800775c <USBD_LL_PrepareReceive>
 80055be:	e007      	b.n	80055d0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80055c6:	2340      	movs	r3, #64	; 0x40
 80055c8:	2101      	movs	r1, #1
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f002 f8c6 	bl	800775c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b082      	sub	sp, #8
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	460b      	mov	r3, r1
 80055e4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80055e6:	2181      	movs	r1, #129	; 0x81
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f001 ffee 	bl	80075ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80055f4:	2101      	movs	r1, #1
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f001 ffe7 	bl	80075ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005604:	2182      	movs	r1, #130	; 0x82
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f001 ffdf 	bl	80075ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00e      	beq.n	8005644 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005636:	4618      	mov	r0, r3
 8005638:	f002 f8d2 	bl	80077e0 <USBD_static_free>
    pdev->pClassData = NULL;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
	...

08005650 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005660:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005674:	2303      	movs	r3, #3
 8005676:	e0af      	b.n	80057d8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005680:	2b00      	cmp	r3, #0
 8005682:	d03f      	beq.n	8005704 <USBD_CDC_Setup+0xb4>
 8005684:	2b20      	cmp	r3, #32
 8005686:	f040 809f 	bne.w	80057c8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	88db      	ldrh	r3, [r3, #6]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d02e      	beq.n	80056f0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	b25b      	sxtb	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	da16      	bge.n	80056ca <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80056a8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	88d2      	ldrh	r2, [r2, #6]
 80056ae:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	88db      	ldrh	r3, [r3, #6]
 80056b4:	2b07      	cmp	r3, #7
 80056b6:	bf28      	it	cs
 80056b8:	2307      	movcs	r3, #7
 80056ba:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	89fa      	ldrh	r2, [r7, #14]
 80056c0:	4619      	mov	r1, r3
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f001 fb19 	bl	8006cfa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80056c8:	e085      	b.n	80057d6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	785a      	ldrb	r2, [r3, #1]
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	88db      	ldrh	r3, [r3, #6]
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80056e0:	6939      	ldr	r1, [r7, #16]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	88db      	ldrh	r3, [r3, #6]
 80056e6:	461a      	mov	r2, r3
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f001 fb32 	bl	8006d52 <USBD_CtlPrepareRx>
      break;
 80056ee:	e072      	b.n	80057d6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	7850      	ldrb	r0, [r2, #1]
 80056fc:	2200      	movs	r2, #0
 80056fe:	6839      	ldr	r1, [r7, #0]
 8005700:	4798      	blx	r3
      break;
 8005702:	e068      	b.n	80057d6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	785b      	ldrb	r3, [r3, #1]
 8005708:	2b0b      	cmp	r3, #11
 800570a:	d852      	bhi.n	80057b2 <USBD_CDC_Setup+0x162>
 800570c:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <USBD_CDC_Setup+0xc4>)
 800570e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005712:	bf00      	nop
 8005714:	08005745 	.word	0x08005745
 8005718:	080057c1 	.word	0x080057c1
 800571c:	080057b3 	.word	0x080057b3
 8005720:	080057b3 	.word	0x080057b3
 8005724:	080057b3 	.word	0x080057b3
 8005728:	080057b3 	.word	0x080057b3
 800572c:	080057b3 	.word	0x080057b3
 8005730:	080057b3 	.word	0x080057b3
 8005734:	080057b3 	.word	0x080057b3
 8005738:	080057b3 	.word	0x080057b3
 800573c:	0800576f 	.word	0x0800576f
 8005740:	08005799 	.word	0x08005799
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b03      	cmp	r3, #3
 800574e:	d107      	bne.n	8005760 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005750:	f107 030a 	add.w	r3, r7, #10
 8005754:	2202      	movs	r2, #2
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f001 face 	bl	8006cfa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800575e:	e032      	b.n	80057c6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005760:	6839      	ldr	r1, [r7, #0]
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 fa58 	bl	8006c18 <USBD_CtlError>
            ret = USBD_FAIL;
 8005768:	2303      	movs	r3, #3
 800576a:	75fb      	strb	r3, [r7, #23]
          break;
 800576c:	e02b      	b.n	80057c6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b03      	cmp	r3, #3
 8005778:	d107      	bne.n	800578a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800577a:	f107 030d 	add.w	r3, r7, #13
 800577e:	2201      	movs	r2, #1
 8005780:	4619      	mov	r1, r3
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f001 fab9 	bl	8006cfa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005788:	e01d      	b.n	80057c6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800578a:	6839      	ldr	r1, [r7, #0]
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f001 fa43 	bl	8006c18 <USBD_CtlError>
            ret = USBD_FAIL;
 8005792:	2303      	movs	r3, #3
 8005794:	75fb      	strb	r3, [r7, #23]
          break;
 8005796:	e016      	b.n	80057c6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d00f      	beq.n	80057c4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80057a4:	6839      	ldr	r1, [r7, #0]
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f001 fa36 	bl	8006c18 <USBD_CtlError>
            ret = USBD_FAIL;
 80057ac:	2303      	movs	r3, #3
 80057ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80057b0:	e008      	b.n	80057c4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80057b2:	6839      	ldr	r1, [r7, #0]
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f001 fa2f 	bl	8006c18 <USBD_CtlError>
          ret = USBD_FAIL;
 80057ba:	2303      	movs	r3, #3
 80057bc:	75fb      	strb	r3, [r7, #23]
          break;
 80057be:	e002      	b.n	80057c6 <USBD_CDC_Setup+0x176>
          break;
 80057c0:	bf00      	nop
 80057c2:	e008      	b.n	80057d6 <USBD_CDC_Setup+0x186>
          break;
 80057c4:	bf00      	nop
      }
      break;
 80057c6:	e006      	b.n	80057d6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f001 fa24 	bl	8006c18 <USBD_CtlError>
      ret = USBD_FAIL;
 80057d0:	2303      	movs	r3, #3
 80057d2:	75fb      	strb	r3, [r7, #23]
      break;
 80057d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80057d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	460b      	mov	r3, r1
 80057ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80057f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80057fe:	2303      	movs	r3, #3
 8005800:	e04f      	b.n	80058a2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005808:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800580a:	78fa      	ldrb	r2, [r7, #3]
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	3318      	adds	r3, #24
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d029      	beq.n	8005874 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005820:	78fa      	ldrb	r2, [r7, #3]
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	3318      	adds	r3, #24
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	78f9      	ldrb	r1, [r7, #3]
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	460b      	mov	r3, r1
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	1a5b      	subs	r3, r3, r1
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4403      	add	r3, r0
 8005840:	3344      	adds	r3, #68	; 0x44
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	fbb2 f1f3 	udiv	r1, r2, r3
 8005848:	fb01 f303 	mul.w	r3, r1, r3
 800584c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800584e:	2b00      	cmp	r3, #0
 8005850:	d110      	bne.n	8005874 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005852:	78fa      	ldrb	r2, [r7, #3]
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	4613      	mov	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	440b      	add	r3, r1
 8005860:	3318      	adds	r3, #24
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005866:	78f9      	ldrb	r1, [r7, #3]
 8005868:	2300      	movs	r3, #0
 800586a:	2200      	movs	r2, #0
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f001 ff54 	bl	800771a <USBD_LL_Transmit>
 8005872:	e015      	b.n	80058a0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2200      	movs	r2, #0
 8005878:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00b      	beq.n	80058a0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800589c:	78fa      	ldrb	r2, [r7, #3]
 800589e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b084      	sub	sp, #16
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	460b      	mov	r3, r1
 80058b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e015      	b.n	80058f8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	4619      	mov	r1, r3
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f001 ff64 	bl	800779e <USBD_LL_GetRxDataSize>
 80058d6:	4602      	mov	r2, r0
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80058f2:	4611      	mov	r1, r2
 80058f4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800590e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005916:	2303      	movs	r3, #3
 8005918:	e01b      	b.n	8005952 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d015      	beq.n	8005950 <USBD_CDC_EP0_RxReady+0x50>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800592a:	2bff      	cmp	r3, #255	; 0xff
 800592c:	d010      	beq.n	8005950 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800593c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005944:	b292      	uxth	r2, r2
 8005946:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	22ff      	movs	r2, #255	; 0xff
 800594c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2243      	movs	r2, #67	; 0x43
 8005968:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800596a:	4b03      	ldr	r3, [pc, #12]	; (8005978 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	20000094 	.word	0x20000094

0800597c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2243      	movs	r2, #67	; 0x43
 8005988:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800598a:	4b03      	ldr	r3, [pc, #12]	; (8005998 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800598c:	4618      	mov	r0, r3
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	20000050 	.word	0x20000050

0800599c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2243      	movs	r2, #67	; 0x43
 80059a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80059aa:	4b03      	ldr	r3, [pc, #12]	; (80059b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	200000d8 	.word	0x200000d8

080059bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	220a      	movs	r2, #10
 80059c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80059ca:	4b03      	ldr	r3, [pc, #12]	; (80059d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	2000000c 	.word	0x2000000c

080059dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d101      	bne.n	80059f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e004      	b.n	80059fa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b087      	sub	sp, #28
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a18:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e008      	b.n	8005a36 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b085      	sub	sp, #20
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a52:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e004      	b.n	8005a68 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a82:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005a84:	2301      	movs	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e01a      	b.n	8005acc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d114      	bne.n	8005aca <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005abe:	2181      	movs	r1, #129	; 0x81
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f001 fe2a 	bl	800771a <USBD_LL_Transmit>

    ret = USBD_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ae2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e016      	b.n	8005b20 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	7c1b      	ldrb	r3, [r3, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d109      	bne.n	8005b0e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b04:	2101      	movs	r1, #1
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f001 fe28 	bl	800775c <USBD_LL_PrepareReceive>
 8005b0c:	e007      	b.n	8005b1e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b14:	2340      	movs	r3, #64	; 0x40
 8005b16:	2101      	movs	r1, #1
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 fe1f 	bl	800775c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	4613      	mov	r3, r2
 8005b34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e01f      	b.n	8005b80 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	79fa      	ldrb	r2, [r7, #7]
 8005b72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f001 fc9b 	bl	80074b0 <USBD_LL_Init>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e016      	b.n	8005bce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00b      	beq.n	8005bcc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbc:	f107 020e 	add.w	r2, r7, #14
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	4798      	blx	r3
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b082      	sub	sp, #8
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f001 fcb2 	bl	8007548 <USBD_LL_Start>
 8005be4:	4603      	mov	r3, r0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005c10:	2303      	movs	r3, #3
 8005c12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d009      	beq.n	8005c32 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	78fa      	ldrb	r2, [r7, #3]
 8005c28:	4611      	mov	r1, r2
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	4798      	blx	r3
 8005c2e:	4603      	mov	r3, r0
 8005c30:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d007      	beq.n	8005c62 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	78fa      	ldrb	r2, [r7, #3]
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	4798      	blx	r3
  }

  return USBD_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3708      	adds	r7, #8
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c7c:	6839      	ldr	r1, [r7, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 ff90 	bl	8006ba4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005c92:	461a      	mov	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ca0:	f003 031f 	and.w	r3, r3, #31
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d01a      	beq.n	8005cde <USBD_LL_SetupStage+0x72>
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d822      	bhi.n	8005cf2 <USBD_LL_SetupStage+0x86>
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <USBD_LL_SetupStage+0x4a>
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d00a      	beq.n	8005cca <USBD_LL_SetupStage+0x5e>
 8005cb4:	e01d      	b.n	8005cf2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fa62 	bl	8006188 <USBD_StdDevReq>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cc8:	e020      	b.n	8005d0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fac6 	bl	8006264 <USBD_StdItfReq>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	73fb      	strb	r3, [r7, #15]
      break;
 8005cdc:	e016      	b.n	8005d0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fb05 	bl	80062f6 <USBD_StdEPReq>
 8005cec:	4603      	mov	r3, r0
 8005cee:	73fb      	strb	r3, [r7, #15]
      break;
 8005cf0:	e00c      	b.n	8005d0c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005cf8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f001 fc81 	bl	8007608 <USBD_LL_StallEP>
 8005d06:	4603      	mov	r3, r0
 8005d08:	73fb      	strb	r3, [r7, #15]
      break;
 8005d0a:	bf00      	nop
  }

  return ret;
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b086      	sub	sp, #24
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	607a      	str	r2, [r7, #4]
 8005d22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005d24:	7afb      	ldrb	r3, [r7, #11]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d138      	bne.n	8005d9c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005d30:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d14a      	bne.n	8005dd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d913      	bls.n	8005d70 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	1ad2      	subs	r2, r2, r3
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	bf28      	it	cs
 8005d62:	4613      	movcs	r3, r2
 8005d64:	461a      	mov	r2, r3
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f001 f80f 	bl	8006d8c <USBD_CtlContinueRx>
 8005d6e:	e030      	b.n	8005dd2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d10b      	bne.n	8005d94 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d005      	beq.n	8005d94 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f001 f80a 	bl	8006dae <USBD_CtlSendStatus>
 8005d9a:	e01a      	b.n	8005dd2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d114      	bne.n	8005dd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00e      	beq.n	8005dd2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	7afa      	ldrb	r2, [r7, #11]
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	4798      	blx	r3
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005dc8:	7dfb      	ldrb	r3, [r7, #23]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005dce:	7dfb      	ldrb	r3, [r7, #23]
 8005dd0:	e000      	b.n	8005dd4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	460b      	mov	r3, r1
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005dea:	7afb      	ldrb	r3, [r7, #11]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d16b      	bne.n	8005ec8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3314      	adds	r3, #20
 8005df4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d156      	bne.n	8005eae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d914      	bls.n	8005e36 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	1ad2      	subs	r2, r2, r3
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 ff84 	bl	8006d30 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e28:	2300      	movs	r3, #0
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f001 fc94 	bl	800775c <USBD_LL_PrepareReceive>
 8005e34:	e03b      	b.n	8005eae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d11c      	bne.n	8005e7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d316      	bcc.n	8005e7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d20f      	bcs.n	8005e7c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2100      	movs	r1, #0
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 ff65 	bl	8006d30 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e6e:	2300      	movs	r3, #0
 8005e70:	2200      	movs	r2, #0
 8005e72:	2100      	movs	r1, #0
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f001 fc71 	bl	800775c <USBD_LL_PrepareReceive>
 8005e7a:	e018      	b.n	8005eae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d10b      	bne.n	8005ea0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ea0:	2180      	movs	r1, #128	; 0x80
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f001 fbb0 	bl	8007608 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 ff93 	bl	8006dd4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d122      	bne.n	8005efe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f7ff fe98 	bl	8005bee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005ec6:	e01a      	b.n	8005efe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d114      	bne.n	8005efe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00e      	beq.n	8005efe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	7afa      	ldrb	r2, [r7, #11]
 8005eea:	4611      	mov	r1, r2
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	4798      	blx	r3
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005ef4:	7dfb      	ldrb	r3, [r7, #23]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005efa:	7dfb      	ldrb	r3, [r7, #23]
 8005efc:	e000      	b.n	8005f00 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e02f      	b.n	8005f9c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00f      	beq.n	8005f66 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d009      	beq.n	8005f66 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	6852      	ldr	r2, [r2, #4]
 8005f5e:	b2d2      	uxtb	r2, r2
 8005f60:	4611      	mov	r1, r2
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f66:	2340      	movs	r3, #64	; 0x40
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 fb06 	bl	800757e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2240      	movs	r2, #64	; 0x40
 8005f7e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f82:	2340      	movs	r3, #64	; 0x40
 8005f84:	2200      	movs	r2, #0
 8005f86:	2180      	movs	r1, #128	; 0x80
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f001 faf8 	bl	800757e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2240      	movs	r2, #64	; 0x40
 8005f98:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3708      	adds	r7, #8
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	78fa      	ldrb	r2, [r7, #3]
 8005fb4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2204      	movs	r2, #4
 8005fde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b04      	cmp	r3, #4
 8006002:	d106      	bne.n	8006012 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800600a:	b2da      	uxtb	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006032:	2303      	movs	r3, #3
 8006034:	e012      	b.n	800605c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b03      	cmp	r3, #3
 8006040:	d10b      	bne.n	800605a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d005      	beq.n	800605a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800607a:	2303      	movs	r3, #3
 800607c:	e014      	b.n	80060a8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b03      	cmp	r3, #3
 8006088:	d10d      	bne.n	80060a6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d007      	beq.n	80060a6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	78fa      	ldrb	r2, [r7, #3]
 80060a0:	4611      	mov	r1, r2
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e014      	b.n	80060f4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b03      	cmp	r3, #3
 80060d4:	d10d      	bne.n	80060f2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d007      	beq.n	80060f2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	78fa      	ldrb	r2, [r7, #3]
 80060ec:	4611      	mov	r1, r2
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b082      	sub	sp, #8
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006128:	2b00      	cmp	r3, #0
 800612a:	d009      	beq.n	8006140 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6852      	ldr	r2, [r2, #4]
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	4611      	mov	r1, r2
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4798      	blx	r3
  }

  return USBD_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800614a:	b480      	push	{r7}
 800614c:	b087      	sub	sp, #28
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	3301      	adds	r3, #1
 8006160:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006168:	8a3b      	ldrh	r3, [r7, #16]
 800616a:	021b      	lsls	r3, r3, #8
 800616c:	b21a      	sxth	r2, r3
 800616e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006172:	4313      	orrs	r3, r2
 8006174:	b21b      	sxth	r3, r3
 8006176:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006178:	89fb      	ldrh	r3, [r7, #14]
}
 800617a:	4618      	mov	r0, r3
 800617c:	371c      	adds	r7, #28
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
	...

08006188 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	d005      	beq.n	80061ae <USBD_StdDevReq+0x26>
 80061a2:	2b40      	cmp	r3, #64	; 0x40
 80061a4:	d853      	bhi.n	800624e <USBD_StdDevReq+0xc6>
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00b      	beq.n	80061c2 <USBD_StdDevReq+0x3a>
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	d14f      	bne.n	800624e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	6839      	ldr	r1, [r7, #0]
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	4798      	blx	r3
 80061bc:	4603      	mov	r3, r0
 80061be:	73fb      	strb	r3, [r7, #15]
      break;
 80061c0:	e04a      	b.n	8006258 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	785b      	ldrb	r3, [r3, #1]
 80061c6:	2b09      	cmp	r3, #9
 80061c8:	d83b      	bhi.n	8006242 <USBD_StdDevReq+0xba>
 80061ca:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <USBD_StdDevReq+0x48>)
 80061cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d0:	08006225 	.word	0x08006225
 80061d4:	08006239 	.word	0x08006239
 80061d8:	08006243 	.word	0x08006243
 80061dc:	0800622f 	.word	0x0800622f
 80061e0:	08006243 	.word	0x08006243
 80061e4:	08006203 	.word	0x08006203
 80061e8:	080061f9 	.word	0x080061f9
 80061ec:	08006243 	.word	0x08006243
 80061f0:	0800621b 	.word	0x0800621b
 80061f4:	0800620d 	.word	0x0800620d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f9de 	bl	80065bc <USBD_GetDescriptor>
          break;
 8006200:	e024      	b.n	800624c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fb43 	bl	8006890 <USBD_SetAddress>
          break;
 800620a:	e01f      	b.n	800624c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 fb82 	bl	8006918 <USBD_SetConfig>
 8006214:	4603      	mov	r3, r0
 8006216:	73fb      	strb	r3, [r7, #15]
          break;
 8006218:	e018      	b.n	800624c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800621a:	6839      	ldr	r1, [r7, #0]
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 fc21 	bl	8006a64 <USBD_GetConfig>
          break;
 8006222:	e013      	b.n	800624c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fc52 	bl	8006ad0 <USBD_GetStatus>
          break;
 800622c:	e00e      	b.n	800624c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800622e:	6839      	ldr	r1, [r7, #0]
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fc81 	bl	8006b38 <USBD_SetFeature>
          break;
 8006236:	e009      	b.n	800624c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fc90 	bl	8006b60 <USBD_ClrFeature>
          break;
 8006240:	e004      	b.n	800624c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006242:	6839      	ldr	r1, [r7, #0]
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fce7 	bl	8006c18 <USBD_CtlError>
          break;
 800624a:	bf00      	nop
      }
      break;
 800624c:	e004      	b.n	8006258 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800624e:	6839      	ldr	r1, [r7, #0]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fce1 	bl	8006c18 <USBD_CtlError>
      break;
 8006256:	bf00      	nop
  }

  return ret;
 8006258:	7bfb      	ldrb	r3, [r7, #15]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop

08006264 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800627a:	2b40      	cmp	r3, #64	; 0x40
 800627c:	d005      	beq.n	800628a <USBD_StdItfReq+0x26>
 800627e:	2b40      	cmp	r3, #64	; 0x40
 8006280:	d82f      	bhi.n	80062e2 <USBD_StdItfReq+0x7e>
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <USBD_StdItfReq+0x26>
 8006286:	2b20      	cmp	r3, #32
 8006288:	d12b      	bne.n	80062e2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006290:	b2db      	uxtb	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	2b02      	cmp	r3, #2
 8006296:	d81d      	bhi.n	80062d4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	889b      	ldrh	r3, [r3, #4]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d813      	bhi.n	80062ca <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	4798      	blx	r3
 80062b0:	4603      	mov	r3, r0
 80062b2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	88db      	ldrh	r3, [r3, #6]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d110      	bne.n	80062de <USBD_StdItfReq+0x7a>
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10d      	bne.n	80062de <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fd73 	bl	8006dae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80062c8:	e009      	b.n	80062de <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fca3 	bl	8006c18 <USBD_CtlError>
          break;
 80062d2:	e004      	b.n	80062de <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fc9e 	bl	8006c18 <USBD_CtlError>
          break;
 80062dc:	e000      	b.n	80062e0 <USBD_StdItfReq+0x7c>
          break;
 80062de:	bf00      	nop
      }
      break;
 80062e0:	e004      	b.n	80062ec <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fc97 	bl	8006c18 <USBD_CtlError>
      break;
 80062ea:	bf00      	nop
  }

  return ret;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	889b      	ldrh	r3, [r3, #4]
 8006308:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006312:	2b40      	cmp	r3, #64	; 0x40
 8006314:	d007      	beq.n	8006326 <USBD_StdEPReq+0x30>
 8006316:	2b40      	cmp	r3, #64	; 0x40
 8006318:	f200 8145 	bhi.w	80065a6 <USBD_StdEPReq+0x2b0>
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00c      	beq.n	800633a <USBD_StdEPReq+0x44>
 8006320:	2b20      	cmp	r3, #32
 8006322:	f040 8140 	bne.w	80065a6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	4798      	blx	r3
 8006334:	4603      	mov	r3, r0
 8006336:	73fb      	strb	r3, [r7, #15]
      break;
 8006338:	e13a      	b.n	80065b0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	785b      	ldrb	r3, [r3, #1]
 800633e:	2b03      	cmp	r3, #3
 8006340:	d007      	beq.n	8006352 <USBD_StdEPReq+0x5c>
 8006342:	2b03      	cmp	r3, #3
 8006344:	f300 8129 	bgt.w	800659a <USBD_StdEPReq+0x2a4>
 8006348:	2b00      	cmp	r3, #0
 800634a:	d07f      	beq.n	800644c <USBD_StdEPReq+0x156>
 800634c:	2b01      	cmp	r3, #1
 800634e:	d03c      	beq.n	80063ca <USBD_StdEPReq+0xd4>
 8006350:	e123      	b.n	800659a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d002      	beq.n	8006364 <USBD_StdEPReq+0x6e>
 800635e:	2b03      	cmp	r3, #3
 8006360:	d016      	beq.n	8006390 <USBD_StdEPReq+0x9a>
 8006362:	e02c      	b.n	80063be <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00d      	beq.n	8006386 <USBD_StdEPReq+0x90>
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	2b80      	cmp	r3, #128	; 0x80
 800636e:	d00a      	beq.n	8006386 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006370:	7bbb      	ldrb	r3, [r7, #14]
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 f947 	bl	8007608 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800637a:	2180      	movs	r1, #128	; 0x80
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f001 f943 	bl	8007608 <USBD_LL_StallEP>
 8006382:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006384:	e020      	b.n	80063c8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006386:	6839      	ldr	r1, [r7, #0]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fc45 	bl	8006c18 <USBD_CtlError>
              break;
 800638e:	e01b      	b.n	80063c8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	885b      	ldrh	r3, [r3, #2]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10e      	bne.n	80063b6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006398:	7bbb      	ldrb	r3, [r7, #14]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00b      	beq.n	80063b6 <USBD_StdEPReq+0xc0>
 800639e:	7bbb      	ldrb	r3, [r7, #14]
 80063a0:	2b80      	cmp	r3, #128	; 0x80
 80063a2:	d008      	beq.n	80063b6 <USBD_StdEPReq+0xc0>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	88db      	ldrh	r3, [r3, #6]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d104      	bne.n	80063b6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80063ac:	7bbb      	ldrb	r3, [r7, #14]
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 f929 	bl	8007608 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 fcf9 	bl	8006dae <USBD_CtlSendStatus>

              break;
 80063bc:	e004      	b.n	80063c8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80063be:	6839      	ldr	r1, [r7, #0]
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fc29 	bl	8006c18 <USBD_CtlError>
              break;
 80063c6:	bf00      	nop
          }
          break;
 80063c8:	e0ec      	b.n	80065a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d002      	beq.n	80063dc <USBD_StdEPReq+0xe6>
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d016      	beq.n	8006408 <USBD_StdEPReq+0x112>
 80063da:	e030      	b.n	800643e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063dc:	7bbb      	ldrb	r3, [r7, #14]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00d      	beq.n	80063fe <USBD_StdEPReq+0x108>
 80063e2:	7bbb      	ldrb	r3, [r7, #14]
 80063e4:	2b80      	cmp	r3, #128	; 0x80
 80063e6:	d00a      	beq.n	80063fe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80063e8:	7bbb      	ldrb	r3, [r7, #14]
 80063ea:	4619      	mov	r1, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f001 f90b 	bl	8007608 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063f2:	2180      	movs	r1, #128	; 0x80
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 f907 	bl	8007608 <USBD_LL_StallEP>
 80063fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063fc:	e025      	b.n	800644a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80063fe:	6839      	ldr	r1, [r7, #0]
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fc09 	bl	8006c18 <USBD_CtlError>
              break;
 8006406:	e020      	b.n	800644a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	885b      	ldrh	r3, [r3, #2]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d11b      	bne.n	8006448 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006410:	7bbb      	ldrb	r3, [r7, #14]
 8006412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006416:	2b00      	cmp	r3, #0
 8006418:	d004      	beq.n	8006424 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800641a:	7bbb      	ldrb	r3, [r7, #14]
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f001 f911 	bl	8007646 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fcc2 	bl	8006dae <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	4798      	blx	r3
 8006438:	4603      	mov	r3, r0
 800643a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800643c:	e004      	b.n	8006448 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fbe9 	bl	8006c18 <USBD_CtlError>
              break;
 8006446:	e000      	b.n	800644a <USBD_StdEPReq+0x154>
              break;
 8006448:	bf00      	nop
          }
          break;
 800644a:	e0ab      	b.n	80065a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d002      	beq.n	800645e <USBD_StdEPReq+0x168>
 8006458:	2b03      	cmp	r3, #3
 800645a:	d032      	beq.n	80064c2 <USBD_StdEPReq+0x1cc>
 800645c:	e097      	b.n	800658e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800645e:	7bbb      	ldrb	r3, [r7, #14]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d007      	beq.n	8006474 <USBD_StdEPReq+0x17e>
 8006464:	7bbb      	ldrb	r3, [r7, #14]
 8006466:	2b80      	cmp	r3, #128	; 0x80
 8006468:	d004      	beq.n	8006474 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fbd3 	bl	8006c18 <USBD_CtlError>
                break;
 8006472:	e091      	b.n	8006598 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006474:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006478:	2b00      	cmp	r3, #0
 800647a:	da0b      	bge.n	8006494 <USBD_StdEPReq+0x19e>
 800647c:	7bbb      	ldrb	r3, [r7, #14]
 800647e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006482:	4613      	mov	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	4413      	add	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	3310      	adds	r3, #16
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	4413      	add	r3, r2
 8006490:	3304      	adds	r3, #4
 8006492:	e00b      	b.n	80064ac <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006494:	7bbb      	ldrb	r3, [r7, #14]
 8006496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	4413      	add	r3, r2
 80064aa:	3304      	adds	r3, #4
 80064ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2200      	movs	r2, #0
 80064b2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2202      	movs	r2, #2
 80064b8:	4619      	mov	r1, r3
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fc1d 	bl	8006cfa <USBD_CtlSendData>
              break;
 80064c0:	e06a      	b.n	8006598 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80064c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	da11      	bge.n	80064ee <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064ca:	7bbb      	ldrb	r3, [r7, #14]
 80064cc:	f003 020f 	and.w	r2, r3, #15
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	440b      	add	r3, r1
 80064dc:	3324      	adds	r3, #36	; 0x24
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d117      	bne.n	8006514 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fb96 	bl	8006c18 <USBD_CtlError>
                  break;
 80064ec:	e054      	b.n	8006598 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064ee:	7bbb      	ldrb	r3, [r7, #14]
 80064f0:	f003 020f 	and.w	r2, r3, #15
 80064f4:	6879      	ldr	r1, [r7, #4]
 80064f6:	4613      	mov	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	440b      	add	r3, r1
 8006500:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d104      	bne.n	8006514 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fb83 	bl	8006c18 <USBD_CtlError>
                  break;
 8006512:	e041      	b.n	8006598 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006514:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006518:	2b00      	cmp	r3, #0
 800651a:	da0b      	bge.n	8006534 <USBD_StdEPReq+0x23e>
 800651c:	7bbb      	ldrb	r3, [r7, #14]
 800651e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006522:	4613      	mov	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	3310      	adds	r3, #16
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	4413      	add	r3, r2
 8006530:	3304      	adds	r3, #4
 8006532:	e00b      	b.n	800654c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006534:	7bbb      	ldrb	r3, [r7, #14]
 8006536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	4413      	add	r3, r2
 800654a:	3304      	adds	r3, #4
 800654c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800654e:	7bbb      	ldrb	r3, [r7, #14]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <USBD_StdEPReq+0x264>
 8006554:	7bbb      	ldrb	r3, [r7, #14]
 8006556:	2b80      	cmp	r3, #128	; 0x80
 8006558:	d103      	bne.n	8006562 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2200      	movs	r2, #0
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	e00e      	b.n	8006580 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006562:	7bbb      	ldrb	r3, [r7, #14]
 8006564:	4619      	mov	r1, r3
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f001 f88c 	bl	8007684 <USBD_LL_IsStallEP>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2201      	movs	r2, #1
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	e002      	b.n	8006580 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2200      	movs	r2, #0
 800657e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2202      	movs	r2, #2
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fbb7 	bl	8006cfa <USBD_CtlSendData>
              break;
 800658c:	e004      	b.n	8006598 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fb41 	bl	8006c18 <USBD_CtlError>
              break;
 8006596:	bf00      	nop
          }
          break;
 8006598:	e004      	b.n	80065a4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fb3b 	bl	8006c18 <USBD_CtlError>
          break;
 80065a2:	bf00      	nop
      }
      break;
 80065a4:	e004      	b.n	80065b0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fb35 	bl	8006c18 <USBD_CtlError>
      break;
 80065ae:	bf00      	nop
  }

  return ret;
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
	...

080065bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	885b      	ldrh	r3, [r3, #2]
 80065d6:	0a1b      	lsrs	r3, r3, #8
 80065d8:	b29b      	uxth	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	2b06      	cmp	r3, #6
 80065de:	f200 8128 	bhi.w	8006832 <USBD_GetDescriptor+0x276>
 80065e2:	a201      	add	r2, pc, #4	; (adr r2, 80065e8 <USBD_GetDescriptor+0x2c>)
 80065e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e8:	08006605 	.word	0x08006605
 80065ec:	0800661d 	.word	0x0800661d
 80065f0:	0800665d 	.word	0x0800665d
 80065f4:	08006833 	.word	0x08006833
 80065f8:	08006833 	.word	0x08006833
 80065fc:	080067d3 	.word	0x080067d3
 8006600:	080067ff 	.word	0x080067ff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	7c12      	ldrb	r2, [r2, #16]
 8006610:	f107 0108 	add.w	r1, r7, #8
 8006614:	4610      	mov	r0, r2
 8006616:	4798      	blx	r3
 8006618:	60f8      	str	r0, [r7, #12]
      break;
 800661a:	e112      	b.n	8006842 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	7c1b      	ldrb	r3, [r3, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10d      	bne.n	8006640 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662c:	f107 0208 	add.w	r2, r7, #8
 8006630:	4610      	mov	r0, r2
 8006632:	4798      	blx	r3
 8006634:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3301      	adds	r3, #1
 800663a:	2202      	movs	r2, #2
 800663c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800663e:	e100      	b.n	8006842 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006648:	f107 0208 	add.w	r2, r7, #8
 800664c:	4610      	mov	r0, r2
 800664e:	4798      	blx	r3
 8006650:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	3301      	adds	r3, #1
 8006656:	2202      	movs	r2, #2
 8006658:	701a      	strb	r2, [r3, #0]
      break;
 800665a:	e0f2      	b.n	8006842 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	885b      	ldrh	r3, [r3, #2]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b05      	cmp	r3, #5
 8006664:	f200 80ac 	bhi.w	80067c0 <USBD_GetDescriptor+0x204>
 8006668:	a201      	add	r2, pc, #4	; (adr r2, 8006670 <USBD_GetDescriptor+0xb4>)
 800666a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666e:	bf00      	nop
 8006670:	08006689 	.word	0x08006689
 8006674:	080066bd 	.word	0x080066bd
 8006678:	080066f1 	.word	0x080066f1
 800667c:	08006725 	.word	0x08006725
 8006680:	08006759 	.word	0x08006759
 8006684:	0800678d 	.word	0x0800678d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00b      	beq.n	80066ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	7c12      	ldrb	r2, [r2, #16]
 80066a0:	f107 0108 	add.w	r1, r7, #8
 80066a4:	4610      	mov	r0, r2
 80066a6:	4798      	blx	r3
 80066a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066aa:	e091      	b.n	80067d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066ac:	6839      	ldr	r1, [r7, #0]
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fab2 	bl	8006c18 <USBD_CtlError>
            err++;
 80066b4:	7afb      	ldrb	r3, [r7, #11]
 80066b6:	3301      	adds	r3, #1
 80066b8:	72fb      	strb	r3, [r7, #11]
          break;
 80066ba:	e089      	b.n	80067d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00b      	beq.n	80066e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	7c12      	ldrb	r2, [r2, #16]
 80066d4:	f107 0108 	add.w	r1, r7, #8
 80066d8:	4610      	mov	r0, r2
 80066da:	4798      	blx	r3
 80066dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066de:	e077      	b.n	80067d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fa98 	bl	8006c18 <USBD_CtlError>
            err++;
 80066e8:	7afb      	ldrb	r3, [r7, #11]
 80066ea:	3301      	adds	r3, #1
 80066ec:	72fb      	strb	r3, [r7, #11]
          break;
 80066ee:	e06f      	b.n	80067d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00b      	beq.n	8006714 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	7c12      	ldrb	r2, [r2, #16]
 8006708:	f107 0108 	add.w	r1, r7, #8
 800670c:	4610      	mov	r0, r2
 800670e:	4798      	blx	r3
 8006710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006712:	e05d      	b.n	80067d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006714:	6839      	ldr	r1, [r7, #0]
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fa7e 	bl	8006c18 <USBD_CtlError>
            err++;
 800671c:	7afb      	ldrb	r3, [r7, #11]
 800671e:	3301      	adds	r3, #1
 8006720:	72fb      	strb	r3, [r7, #11]
          break;
 8006722:	e055      	b.n	80067d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00b      	beq.n	8006748 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	7c12      	ldrb	r2, [r2, #16]
 800673c:	f107 0108 	add.w	r1, r7, #8
 8006740:	4610      	mov	r0, r2
 8006742:	4798      	blx	r3
 8006744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006746:	e043      	b.n	80067d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fa64 	bl	8006c18 <USBD_CtlError>
            err++;
 8006750:	7afb      	ldrb	r3, [r7, #11]
 8006752:	3301      	adds	r3, #1
 8006754:	72fb      	strb	r3, [r7, #11]
          break;
 8006756:	e03b      	b.n	80067d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00b      	beq.n	800677c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	7c12      	ldrb	r2, [r2, #16]
 8006770:	f107 0108 	add.w	r1, r7, #8
 8006774:	4610      	mov	r0, r2
 8006776:	4798      	blx	r3
 8006778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800677a:	e029      	b.n	80067d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800677c:	6839      	ldr	r1, [r7, #0]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fa4a 	bl	8006c18 <USBD_CtlError>
            err++;
 8006784:	7afb      	ldrb	r3, [r7, #11]
 8006786:	3301      	adds	r3, #1
 8006788:	72fb      	strb	r3, [r7, #11]
          break;
 800678a:	e021      	b.n	80067d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00b      	beq.n	80067b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	7c12      	ldrb	r2, [r2, #16]
 80067a4:	f107 0108 	add.w	r1, r7, #8
 80067a8:	4610      	mov	r0, r2
 80067aa:	4798      	blx	r3
 80067ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ae:	e00f      	b.n	80067d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fa30 	bl	8006c18 <USBD_CtlError>
            err++;
 80067b8:	7afb      	ldrb	r3, [r7, #11]
 80067ba:	3301      	adds	r3, #1
 80067bc:	72fb      	strb	r3, [r7, #11]
          break;
 80067be:	e007      	b.n	80067d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80067c0:	6839      	ldr	r1, [r7, #0]
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fa28 	bl	8006c18 <USBD_CtlError>
          err++;
 80067c8:	7afb      	ldrb	r3, [r7, #11]
 80067ca:	3301      	adds	r3, #1
 80067cc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80067ce:	bf00      	nop
      }
      break;
 80067d0:	e037      	b.n	8006842 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	7c1b      	ldrb	r3, [r3, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d109      	bne.n	80067ee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e2:	f107 0208 	add.w	r2, r7, #8
 80067e6:	4610      	mov	r0, r2
 80067e8:	4798      	blx	r3
 80067ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067ec:	e029      	b.n	8006842 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fa11 	bl	8006c18 <USBD_CtlError>
        err++;
 80067f6:	7afb      	ldrb	r3, [r7, #11]
 80067f8:	3301      	adds	r3, #1
 80067fa:	72fb      	strb	r3, [r7, #11]
      break;
 80067fc:	e021      	b.n	8006842 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	7c1b      	ldrb	r3, [r3, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10d      	bne.n	8006822 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	f107 0208 	add.w	r2, r7, #8
 8006812:	4610      	mov	r0, r2
 8006814:	4798      	blx	r3
 8006816:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	2207      	movs	r2, #7
 800681e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006820:	e00f      	b.n	8006842 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f9f7 	bl	8006c18 <USBD_CtlError>
        err++;
 800682a:	7afb      	ldrb	r3, [r7, #11]
 800682c:	3301      	adds	r3, #1
 800682e:	72fb      	strb	r3, [r7, #11]
      break;
 8006830:	e007      	b.n	8006842 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f9ef 	bl	8006c18 <USBD_CtlError>
      err++;
 800683a:	7afb      	ldrb	r3, [r7, #11]
 800683c:	3301      	adds	r3, #1
 800683e:	72fb      	strb	r3, [r7, #11]
      break;
 8006840:	bf00      	nop
  }

  if (err != 0U)
 8006842:	7afb      	ldrb	r3, [r7, #11]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d11e      	bne.n	8006886 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	88db      	ldrh	r3, [r3, #6]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d016      	beq.n	800687e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006850:	893b      	ldrh	r3, [r7, #8]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00e      	beq.n	8006874 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	88da      	ldrh	r2, [r3, #6]
 800685a:	893b      	ldrh	r3, [r7, #8]
 800685c:	4293      	cmp	r3, r2
 800685e:	bf28      	it	cs
 8006860:	4613      	movcs	r3, r2
 8006862:	b29b      	uxth	r3, r3
 8006864:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006866:	893b      	ldrh	r3, [r7, #8]
 8006868:	461a      	mov	r2, r3
 800686a:	68f9      	ldr	r1, [r7, #12]
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fa44 	bl	8006cfa <USBD_CtlSendData>
 8006872:	e009      	b.n	8006888 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f9ce 	bl	8006c18 <USBD_CtlError>
 800687c:	e004      	b.n	8006888 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fa95 	bl	8006dae <USBD_CtlSendStatus>
 8006884:	e000      	b.n	8006888 <USBD_GetDescriptor+0x2cc>
    return;
 8006886:	bf00      	nop
  }
}
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop

08006890 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	889b      	ldrh	r3, [r3, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d131      	bne.n	8006906 <USBD_SetAddress+0x76>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	88db      	ldrh	r3, [r3, #6]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d12d      	bne.n	8006906 <USBD_SetAddress+0x76>
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	885b      	ldrh	r3, [r3, #2]
 80068ae:	2b7f      	cmp	r3, #127	; 0x7f
 80068b0:	d829      	bhi.n	8006906 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	885b      	ldrh	r3, [r3, #2]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d104      	bne.n	80068d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80068ca:	6839      	ldr	r1, [r7, #0]
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f9a3 	bl	8006c18 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d2:	e01d      	b.n	8006910 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	7bfa      	ldrb	r2, [r7, #15]
 80068d8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fefb 	bl	80076dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fa61 	bl	8006dae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d004      	beq.n	80068fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2202      	movs	r2, #2
 80068f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068fa:	e009      	b.n	8006910 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006904:	e004      	b.n	8006910 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f985 	bl	8006c18 <USBD_CtlError>
  }
}
 800690e:	bf00      	nop
 8006910:	bf00      	nop
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	885b      	ldrh	r3, [r3, #2]
 800692a:	b2da      	uxtb	r2, r3
 800692c:	4b4c      	ldr	r3, [pc, #304]	; (8006a60 <USBD_SetConfig+0x148>)
 800692e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006930:	4b4b      	ldr	r3, [pc, #300]	; (8006a60 <USBD_SetConfig+0x148>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d905      	bls.n	8006944 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f96c 	bl	8006c18 <USBD_CtlError>
    return USBD_FAIL;
 8006940:	2303      	movs	r3, #3
 8006942:	e088      	b.n	8006a56 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d002      	beq.n	8006956 <USBD_SetConfig+0x3e>
 8006950:	2b03      	cmp	r3, #3
 8006952:	d025      	beq.n	80069a0 <USBD_SetConfig+0x88>
 8006954:	e071      	b.n	8006a3a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006956:	4b42      	ldr	r3, [pc, #264]	; (8006a60 <USBD_SetConfig+0x148>)
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d01c      	beq.n	8006998 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800695e:	4b40      	ldr	r3, [pc, #256]	; (8006a60 <USBD_SetConfig+0x148>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006968:	4b3d      	ldr	r3, [pc, #244]	; (8006a60 <USBD_SetConfig+0x148>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff f948 	bl	8005c04 <USBD_SetClassConfig>
 8006974:	4603      	mov	r3, r0
 8006976:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006978:	7bfb      	ldrb	r3, [r7, #15]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d004      	beq.n	8006988 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f949 	bl	8006c18 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006986:	e065      	b.n	8006a54 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fa10 	bl	8006dae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2203      	movs	r2, #3
 8006992:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006996:	e05d      	b.n	8006a54 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fa08 	bl	8006dae <USBD_CtlSendStatus>
      break;
 800699e:	e059      	b.n	8006a54 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80069a0:	4b2f      	ldr	r3, [pc, #188]	; (8006a60 <USBD_SetConfig+0x148>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d112      	bne.n	80069ce <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80069b0:	4b2b      	ldr	r3, [pc, #172]	; (8006a60 <USBD_SetConfig+0x148>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	461a      	mov	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069ba:	4b29      	ldr	r3, [pc, #164]	; (8006a60 <USBD_SetConfig+0x148>)
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	4619      	mov	r1, r3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff f93b 	bl	8005c3c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f9f1 	bl	8006dae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069cc:	e042      	b.n	8006a54 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80069ce:	4b24      	ldr	r3, [pc, #144]	; (8006a60 <USBD_SetConfig+0x148>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	461a      	mov	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d02a      	beq.n	8006a32 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff f929 	bl	8005c3c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80069ea:	4b1d      	ldr	r3, [pc, #116]	; (8006a60 <USBD_SetConfig+0x148>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069f4:	4b1a      	ldr	r3, [pc, #104]	; (8006a60 <USBD_SetConfig+0x148>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff f902 	bl	8005c04 <USBD_SetClassConfig>
 8006a00:	4603      	mov	r3, r0
 8006a02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00f      	beq.n	8006a2a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f903 	bl	8006c18 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7ff f90e 	bl	8005c3c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a28:	e014      	b.n	8006a54 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f9bf 	bl	8006dae <USBD_CtlSendStatus>
      break;
 8006a30:	e010      	b.n	8006a54 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f9bb 	bl	8006dae <USBD_CtlSendStatus>
      break;
 8006a38:	e00c      	b.n	8006a54 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f8eb 	bl	8006c18 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a42:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <USBD_SetConfig+0x148>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7ff f8f7 	bl	8005c3c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	73fb      	strb	r3, [r7, #15]
      break;
 8006a52:	bf00      	nop
  }

  return ret;
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20000394 	.word	0x20000394

08006a64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	88db      	ldrh	r3, [r3, #6]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d004      	beq.n	8006a80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a76:	6839      	ldr	r1, [r7, #0]
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f8cd 	bl	8006c18 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a7e:	e023      	b.n	8006ac8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	dc02      	bgt.n	8006a92 <USBD_GetConfig+0x2e>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	dc03      	bgt.n	8006a98 <USBD_GetConfig+0x34>
 8006a90:	e015      	b.n	8006abe <USBD_GetConfig+0x5a>
 8006a92:	2b03      	cmp	r3, #3
 8006a94:	d00b      	beq.n	8006aae <USBD_GetConfig+0x4a>
 8006a96:	e012      	b.n	8006abe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f927 	bl	8006cfa <USBD_CtlSendData>
        break;
 8006aac:	e00c      	b.n	8006ac8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f91f 	bl	8006cfa <USBD_CtlSendData>
        break;
 8006abc:	e004      	b.n	8006ac8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f8a9 	bl	8006c18 <USBD_CtlError>
        break;
 8006ac6:	bf00      	nop
}
 8006ac8:	bf00      	nop
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d81e      	bhi.n	8006b26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	88db      	ldrh	r3, [r3, #6]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d004      	beq.n	8006afa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f890 	bl	8006c18 <USBD_CtlError>
        break;
 8006af8:	e01a      	b.n	8006b30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d005      	beq.n	8006b16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f043 0202 	orr.w	r2, r3, #2
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	330c      	adds	r3, #12
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f8eb 	bl	8006cfa <USBD_CtlSendData>
      break;
 8006b24:	e004      	b.n	8006b30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f875 	bl	8006c18 <USBD_CtlError>
      break;
 8006b2e:	bf00      	nop
  }
}
 8006b30:	bf00      	nop
 8006b32:	3708      	adds	r7, #8
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	885b      	ldrh	r3, [r3, #2]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d106      	bne.n	8006b58 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f92b 	bl	8006dae <USBD_CtlSendStatus>
  }
}
 8006b58:	bf00      	nop
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	3b01      	subs	r3, #1
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d80b      	bhi.n	8006b90 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	885b      	ldrh	r3, [r3, #2]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d10c      	bne.n	8006b9a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f910 	bl	8006dae <USBD_CtlSendStatus>
      }
      break;
 8006b8e:	e004      	b.n	8006b9a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f840 	bl	8006c18 <USBD_CtlError>
      break;
 8006b98:	e000      	b.n	8006b9c <USBD_ClrFeature+0x3c>
      break;
 8006b9a:	bf00      	nop
  }
}
 8006b9c:	bf00      	nop
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	781a      	ldrb	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	781a      	ldrb	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7ff fabb 	bl	800614a <SWAPBYTE>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	3301      	adds	r3, #1
 8006be0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	3301      	adds	r3, #1
 8006be6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f7ff faae 	bl	800614a <SWAPBYTE>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f7ff faa1 	bl	800614a <SWAPBYTE>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	80da      	strh	r2, [r3, #6]
}
 8006c10:	bf00      	nop
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c22:	2180      	movs	r1, #128	; 0x80
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fcef 	bl	8007608 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fceb 	bl	8007608 <USBD_LL_StallEP>
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b086      	sub	sp, #24
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d036      	beq.n	8006cbe <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c54:	6938      	ldr	r0, [r7, #16]
 8006c56:	f000 f836 	bl	8006cc6 <USBD_GetLen>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	7812      	ldrb	r2, [r2, #0]
 8006c72:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
 8006c76:	3301      	adds	r3, #1
 8006c78:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c7a:	7dfb      	ldrb	r3, [r7, #23]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	4413      	add	r3, r2
 8006c80:	2203      	movs	r2, #3
 8006c82:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	3301      	adds	r3, #1
 8006c88:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c8a:	e013      	b.n	8006cb4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	4413      	add	r3, r2
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	7812      	ldrb	r2, [r2, #0]
 8006c96:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	613b      	str	r3, [r7, #16]
    idx++;
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006ca4:	7dfb      	ldrb	r3, [r7, #23]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	4413      	add	r3, r2
 8006caa:	2200      	movs	r2, #0
 8006cac:	701a      	strb	r2, [r3, #0]
    idx++;
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e7      	bne.n	8006c8c <USBD_GetString+0x52>
 8006cbc:	e000      	b.n	8006cc0 <USBD_GetString+0x86>
    return;
 8006cbe:	bf00      	nop
  }
}
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b085      	sub	sp, #20
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006cd6:	e005      	b.n	8006ce4 <USBD_GetLen+0x1e>
  {
    len++;
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1f5      	bne.n	8006cd8 <USBD_GetLen+0x12>
  }

  return len;
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	60f8      	str	r0, [r7, #12]
 8006d02:	60b9      	str	r1, [r7, #8]
 8006d04:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2202      	movs	r2, #2
 8006d0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	2100      	movs	r1, #0
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 fcfa 	bl	800771a <USBD_LL_Transmit>

  return USBD_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	2100      	movs	r1, #0
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 fce9 	bl	800771a <USBD_LL_Transmit>

  return USBD_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3710      	adds	r7, #16
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2203      	movs	r2, #3
 8006d62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 fced 	bl	800775c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 fcdc 	bl	800775c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2204      	movs	r2, #4
 8006dba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fca8 	bl	800771a <USBD_LL_Transmit>

  return USBD_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2205      	movs	r2, #5
 8006de0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006de4:	2300      	movs	r3, #0
 8006de6:	2200      	movs	r2, #0
 8006de8:	2100      	movs	r1, #0
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fcb6 	bl	800775c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
	...

08006dfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e00:	2200      	movs	r2, #0
 8006e02:	4912      	ldr	r1, [pc, #72]	; (8006e4c <MX_USB_DEVICE_Init+0x50>)
 8006e04:	4812      	ldr	r0, [pc, #72]	; (8006e50 <MX_USB_DEVICE_Init+0x54>)
 8006e06:	f7fe fe8f 	bl	8005b28 <USBD_Init>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e10:	f7f9 fe6e 	bl	8000af0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006e14:	490f      	ldr	r1, [pc, #60]	; (8006e54 <MX_USB_DEVICE_Init+0x58>)
 8006e16:	480e      	ldr	r0, [pc, #56]	; (8006e50 <MX_USB_DEVICE_Init+0x54>)
 8006e18:	f7fe feb6 	bl	8005b88 <USBD_RegisterClass>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e22:	f7f9 fe65 	bl	8000af0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006e26:	490c      	ldr	r1, [pc, #48]	; (8006e58 <MX_USB_DEVICE_Init+0x5c>)
 8006e28:	4809      	ldr	r0, [pc, #36]	; (8006e50 <MX_USB_DEVICE_Init+0x54>)
 8006e2a:	f7fe fdd7 	bl	80059dc <USBD_CDC_RegisterInterface>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006e34:	f7f9 fe5c 	bl	8000af0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e38:	4805      	ldr	r0, [pc, #20]	; (8006e50 <MX_USB_DEVICE_Init+0x54>)
 8006e3a:	f7fe fecc 	bl	8005bd6 <USBD_Start>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e44:	f7f9 fe54 	bl	8000af0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e48:	bf00      	nop
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20000130 	.word	0x20000130
 8006e50:	20000398 	.word	0x20000398
 8006e54:	20000018 	.word	0x20000018
 8006e58:	2000011c 	.word	0x2000011c

08006e5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e60:	2200      	movs	r2, #0
 8006e62:	4905      	ldr	r1, [pc, #20]	; (8006e78 <CDC_Init_FS+0x1c>)
 8006e64:	4805      	ldr	r0, [pc, #20]	; (8006e7c <CDC_Init_FS+0x20>)
 8006e66:	f7fe fdce 	bl	8005a06 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e6a:	4905      	ldr	r1, [pc, #20]	; (8006e80 <CDC_Init_FS+0x24>)
 8006e6c:	4803      	ldr	r0, [pc, #12]	; (8006e7c <CDC_Init_FS+0x20>)
 8006e6e:	f7fe fde8 	bl	8005a42 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	20000e68 	.word	0x20000e68
 8006e7c:	20000398 	.word	0x20000398
 8006e80:	20000668 	.word	0x20000668

08006e84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e84:	b480      	push	{r7}
 8006e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	6039      	str	r1, [r7, #0]
 8006e9e:	71fb      	strb	r3, [r7, #7]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	2b23      	cmp	r3, #35	; 0x23
 8006ea8:	d84a      	bhi.n	8006f40 <CDC_Control_FS+0xac>
 8006eaa:	a201      	add	r2, pc, #4	; (adr r2, 8006eb0 <CDC_Control_FS+0x1c>)
 8006eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb0:	08006f41 	.word	0x08006f41
 8006eb4:	08006f41 	.word	0x08006f41
 8006eb8:	08006f41 	.word	0x08006f41
 8006ebc:	08006f41 	.word	0x08006f41
 8006ec0:	08006f41 	.word	0x08006f41
 8006ec4:	08006f41 	.word	0x08006f41
 8006ec8:	08006f41 	.word	0x08006f41
 8006ecc:	08006f41 	.word	0x08006f41
 8006ed0:	08006f41 	.word	0x08006f41
 8006ed4:	08006f41 	.word	0x08006f41
 8006ed8:	08006f41 	.word	0x08006f41
 8006edc:	08006f41 	.word	0x08006f41
 8006ee0:	08006f41 	.word	0x08006f41
 8006ee4:	08006f41 	.word	0x08006f41
 8006ee8:	08006f41 	.word	0x08006f41
 8006eec:	08006f41 	.word	0x08006f41
 8006ef0:	08006f41 	.word	0x08006f41
 8006ef4:	08006f41 	.word	0x08006f41
 8006ef8:	08006f41 	.word	0x08006f41
 8006efc:	08006f41 	.word	0x08006f41
 8006f00:	08006f41 	.word	0x08006f41
 8006f04:	08006f41 	.word	0x08006f41
 8006f08:	08006f41 	.word	0x08006f41
 8006f0c:	08006f41 	.word	0x08006f41
 8006f10:	08006f41 	.word	0x08006f41
 8006f14:	08006f41 	.word	0x08006f41
 8006f18:	08006f41 	.word	0x08006f41
 8006f1c:	08006f41 	.word	0x08006f41
 8006f20:	08006f41 	.word	0x08006f41
 8006f24:	08006f41 	.word	0x08006f41
 8006f28:	08006f41 	.word	0x08006f41
 8006f2c:	08006f41 	.word	0x08006f41
 8006f30:	08006f41 	.word	0x08006f41
 8006f34:	08006f41 	.word	0x08006f41
 8006f38:	08006f41 	.word	0x08006f41
 8006f3c:	08006f41 	.word	0x08006f41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f40:	bf00      	nop
  }

  return (USBD_OK);
 8006f42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f5a:	6879      	ldr	r1, [r7, #4]
 8006f5c:	4805      	ldr	r0, [pc, #20]	; (8006f74 <CDC_Receive_FS+0x24>)
 8006f5e:	f7fe fd70 	bl	8005a42 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f62:	4804      	ldr	r0, [pc, #16]	; (8006f74 <CDC_Receive_FS+0x24>)
 8006f64:	f7fe fdb6 	bl	8005ad4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	20000398 	.word	0x20000398

08006f78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006f88:	4b0d      	ldr	r3, [pc, #52]	; (8006fc0 <CDC_Transmit_FS+0x48>)
 8006f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e00b      	b.n	8006fb6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006f9e:	887b      	ldrh	r3, [r7, #2]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	4806      	ldr	r0, [pc, #24]	; (8006fc0 <CDC_Transmit_FS+0x48>)
 8006fa6:	f7fe fd2e 	bl	8005a06 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006faa:	4805      	ldr	r0, [pc, #20]	; (8006fc0 <CDC_Transmit_FS+0x48>)
 8006fac:	f7fe fd62 	bl	8005a74 <USBD_CDC_TransmitPacket>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000398 	.word	0x20000398

08006fc4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
	...

08006fe8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	6039      	str	r1, [r7, #0]
 8006ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	2212      	movs	r2, #18
 8006ff8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ffa:	4b03      	ldr	r3, [pc, #12]	; (8007008 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	2000014c 	.word	0x2000014c

0800700c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	6039      	str	r1, [r7, #0]
 8007016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2204      	movs	r2, #4
 800701c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800701e:	4b03      	ldr	r3, [pc, #12]	; (800702c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007020:	4618      	mov	r0, r3
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr
 800702c:	20000160 	.word	0x20000160

08007030 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	6039      	str	r1, [r7, #0]
 800703a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d105      	bne.n	800704e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	4907      	ldr	r1, [pc, #28]	; (8007064 <USBD_FS_ProductStrDescriptor+0x34>)
 8007046:	4808      	ldr	r0, [pc, #32]	; (8007068 <USBD_FS_ProductStrDescriptor+0x38>)
 8007048:	f7ff fdf7 	bl	8006c3a <USBD_GetString>
 800704c:	e004      	b.n	8007058 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	4904      	ldr	r1, [pc, #16]	; (8007064 <USBD_FS_ProductStrDescriptor+0x34>)
 8007052:	4805      	ldr	r0, [pc, #20]	; (8007068 <USBD_FS_ProductStrDescriptor+0x38>)
 8007054:	f7ff fdf1 	bl	8006c3a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007058:	4b02      	ldr	r3, [pc, #8]	; (8007064 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20001668 	.word	0x20001668
 8007068:	080081f0 	.word	0x080081f0

0800706c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	4603      	mov	r3, r0
 8007074:	6039      	str	r1, [r7, #0]
 8007076:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	4904      	ldr	r1, [pc, #16]	; (800708c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800707c:	4804      	ldr	r0, [pc, #16]	; (8007090 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800707e:	f7ff fddc 	bl	8006c3a <USBD_GetString>
  return USBD_StrDesc;
 8007082:	4b02      	ldr	r3, [pc, #8]	; (800708c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	20001668 	.word	0x20001668
 8007090:	08008208 	.word	0x08008208

08007094 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	4603      	mov	r3, r0
 800709c:	6039      	str	r1, [r7, #0]
 800709e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	221a      	movs	r2, #26
 80070a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80070a6:	f000 f843 	bl	8007130 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80070aa:	4b02      	ldr	r3, [pc, #8]	; (80070b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	20000164 	.word	0x20000164

080070b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	4603      	mov	r3, r0
 80070c0:	6039      	str	r1, [r7, #0]
 80070c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80070c4:	79fb      	ldrb	r3, [r7, #7]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d105      	bne.n	80070d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	4907      	ldr	r1, [pc, #28]	; (80070ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80070ce:	4808      	ldr	r0, [pc, #32]	; (80070f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070d0:	f7ff fdb3 	bl	8006c3a <USBD_GetString>
 80070d4:	e004      	b.n	80070e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	4904      	ldr	r1, [pc, #16]	; (80070ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80070da:	4805      	ldr	r0, [pc, #20]	; (80070f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070dc:	f7ff fdad 	bl	8006c3a <USBD_GetString>
  }
  return USBD_StrDesc;
 80070e0:	4b02      	ldr	r3, [pc, #8]	; (80070ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20001668 	.word	0x20001668
 80070f0:	0800821c 	.word	0x0800821c

080070f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	6039      	str	r1, [r7, #0]
 80070fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d105      	bne.n	8007112 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	4907      	ldr	r1, [pc, #28]	; (8007128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800710a:	4808      	ldr	r0, [pc, #32]	; (800712c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800710c:	f7ff fd95 	bl	8006c3a <USBD_GetString>
 8007110:	e004      	b.n	800711c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	4904      	ldr	r1, [pc, #16]	; (8007128 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007116:	4805      	ldr	r0, [pc, #20]	; (800712c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007118:	f7ff fd8f 	bl	8006c3a <USBD_GetString>
  }
  return USBD_StrDesc;
 800711c:	4b02      	ldr	r3, [pc, #8]	; (8007128 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20001668 	.word	0x20001668
 800712c:	08008228 	.word	0x08008228

08007130 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007136:	4b0f      	ldr	r3, [pc, #60]	; (8007174 <Get_SerialNum+0x44>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800713c:	4b0e      	ldr	r3, [pc, #56]	; (8007178 <Get_SerialNum+0x48>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007142:	4b0e      	ldr	r3, [pc, #56]	; (800717c <Get_SerialNum+0x4c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4413      	add	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d009      	beq.n	800716a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007156:	2208      	movs	r2, #8
 8007158:	4909      	ldr	r1, [pc, #36]	; (8007180 <Get_SerialNum+0x50>)
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 f814 	bl	8007188 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007160:	2204      	movs	r2, #4
 8007162:	4908      	ldr	r1, [pc, #32]	; (8007184 <Get_SerialNum+0x54>)
 8007164:	68b8      	ldr	r0, [r7, #8]
 8007166:	f000 f80f 	bl	8007188 <IntToUnicode>
  }
}
 800716a:	bf00      	nop
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	1fff7a10 	.word	0x1fff7a10
 8007178:	1fff7a14 	.word	0x1fff7a14
 800717c:	1fff7a18 	.word	0x1fff7a18
 8007180:	20000166 	.word	0x20000166
 8007184:	20000176 	.word	0x20000176

08007188 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	4613      	mov	r3, r2
 8007194:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007196:	2300      	movs	r3, #0
 8007198:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]
 800719e:	e027      	b.n	80071f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	0f1b      	lsrs	r3, r3, #28
 80071a4:	2b09      	cmp	r3, #9
 80071a6:	d80b      	bhi.n	80071c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	0f1b      	lsrs	r3, r3, #28
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
 80071b0:	005b      	lsls	r3, r3, #1
 80071b2:	4619      	mov	r1, r3
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	440b      	add	r3, r1
 80071b8:	3230      	adds	r2, #48	; 0x30
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	e00a      	b.n	80071d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	0f1b      	lsrs	r3, r3, #28
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	7dfb      	ldrb	r3, [r7, #23]
 80071c8:	005b      	lsls	r3, r3, #1
 80071ca:	4619      	mov	r1, r3
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	440b      	add	r3, r1
 80071d0:	3237      	adds	r2, #55	; 0x37
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	005b      	lsls	r3, r3, #1
 80071e0:	3301      	adds	r3, #1
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	4413      	add	r3, r2
 80071e6:	2200      	movs	r2, #0
 80071e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	3301      	adds	r3, #1
 80071ee:	75fb      	strb	r3, [r7, #23]
 80071f0:	7dfa      	ldrb	r2, [r7, #23]
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d3d3      	bcc.n	80071a0 <IntToUnicode+0x18>
  }
}
 80071f8:	bf00      	nop
 80071fa:	bf00      	nop
 80071fc:	371c      	adds	r7, #28
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
	...

08007208 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08a      	sub	sp, #40	; 0x28
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007210:	f107 0314 	add.w	r3, r7, #20
 8007214:	2200      	movs	r2, #0
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	605a      	str	r2, [r3, #4]
 800721a:	609a      	str	r2, [r3, #8]
 800721c:	60da      	str	r2, [r3, #12]
 800721e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007228:	d147      	bne.n	80072ba <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800722a:	2300      	movs	r3, #0
 800722c:	613b      	str	r3, [r7, #16]
 800722e:	4b25      	ldr	r3, [pc, #148]	; (80072c4 <HAL_PCD_MspInit+0xbc>)
 8007230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007232:	4a24      	ldr	r2, [pc, #144]	; (80072c4 <HAL_PCD_MspInit+0xbc>)
 8007234:	f043 0301 	orr.w	r3, r3, #1
 8007238:	6313      	str	r3, [r2, #48]	; 0x30
 800723a:	4b22      	ldr	r3, [pc, #136]	; (80072c4 <HAL_PCD_MspInit+0xbc>)
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	613b      	str	r3, [r7, #16]
 8007244:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800724a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800724c:	2300      	movs	r3, #0
 800724e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007250:	2300      	movs	r3, #0
 8007252:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007254:	f107 0314 	add.w	r3, r7, #20
 8007258:	4619      	mov	r1, r3
 800725a:	481b      	ldr	r0, [pc, #108]	; (80072c8 <HAL_PCD_MspInit+0xc0>)
 800725c:	f7f9 ff68 	bl	8001130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007260:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007266:	2302      	movs	r3, #2
 8007268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800726e:	2300      	movs	r3, #0
 8007270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007272:	230a      	movs	r3, #10
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007276:	f107 0314 	add.w	r3, r7, #20
 800727a:	4619      	mov	r1, r3
 800727c:	4812      	ldr	r0, [pc, #72]	; (80072c8 <HAL_PCD_MspInit+0xc0>)
 800727e:	f7f9 ff57 	bl	8001130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007282:	4b10      	ldr	r3, [pc, #64]	; (80072c4 <HAL_PCD_MspInit+0xbc>)
 8007284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007286:	4a0f      	ldr	r2, [pc, #60]	; (80072c4 <HAL_PCD_MspInit+0xbc>)
 8007288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800728c:	6353      	str	r3, [r2, #52]	; 0x34
 800728e:	2300      	movs	r3, #0
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	4b0c      	ldr	r3, [pc, #48]	; (80072c4 <HAL_PCD_MspInit+0xbc>)
 8007294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007296:	4a0b      	ldr	r2, [pc, #44]	; (80072c4 <HAL_PCD_MspInit+0xbc>)
 8007298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800729c:	6453      	str	r3, [r2, #68]	; 0x44
 800729e:	4b09      	ldr	r3, [pc, #36]	; (80072c4 <HAL_PCD_MspInit+0xbc>)
 80072a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80072aa:	2200      	movs	r2, #0
 80072ac:	2100      	movs	r1, #0
 80072ae:	2043      	movs	r0, #67	; 0x43
 80072b0:	f7f9 ff07 	bl	80010c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80072b4:	2043      	movs	r0, #67	; 0x43
 80072b6:	f7f9 ff20 	bl	80010fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80072ba:	bf00      	nop
 80072bc:	3728      	adds	r7, #40	; 0x28
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	40023800 	.word	0x40023800
 80072c8:	40020000 	.word	0x40020000

080072cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80072e0:	4619      	mov	r1, r3
 80072e2:	4610      	mov	r0, r2
 80072e4:	f7fe fcc2 	bl	8005c6c <USBD_LL_SetupStage>
}
 80072e8:	bf00      	nop
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	460b      	mov	r3, r1
 80072fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007302:	78fa      	ldrb	r2, [r7, #3]
 8007304:	6879      	ldr	r1, [r7, #4]
 8007306:	4613      	mov	r3, r2
 8007308:	00db      	lsls	r3, r3, #3
 800730a:	1a9b      	subs	r3, r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	440b      	add	r3, r1
 8007310:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	78fb      	ldrb	r3, [r7, #3]
 8007318:	4619      	mov	r1, r3
 800731a:	f7fe fcfc 	bl	8005d16 <USBD_LL_DataOutStage>
}
 800731e:	bf00      	nop
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	460b      	mov	r3, r1
 8007330:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007338:	78fa      	ldrb	r2, [r7, #3]
 800733a:	6879      	ldr	r1, [r7, #4]
 800733c:	4613      	mov	r3, r2
 800733e:	00db      	lsls	r3, r3, #3
 8007340:	1a9b      	subs	r3, r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	440b      	add	r3, r1
 8007346:	3348      	adds	r3, #72	; 0x48
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	78fb      	ldrb	r3, [r7, #3]
 800734c:	4619      	mov	r1, r3
 800734e:	f7fe fd45 	bl	8005ddc <USBD_LL_DataInStage>
}
 8007352:	bf00      	nop
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007368:	4618      	mov	r0, r3
 800736a:	f7fe fe59 	bl	8006020 <USBD_LL_SOF>
}
 800736e:	bf00      	nop
 8007370:	3708      	adds	r7, #8
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b084      	sub	sp, #16
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800737e:	2301      	movs	r3, #1
 8007380:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d102      	bne.n	8007390 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800738a:	2300      	movs	r3, #0
 800738c:	73fb      	strb	r3, [r7, #15]
 800738e:	e008      	b.n	80073a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	2b02      	cmp	r3, #2
 8007396:	d102      	bne.n	800739e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007398:	2301      	movs	r3, #1
 800739a:	73fb      	strb	r3, [r7, #15]
 800739c:	e001      	b.n	80073a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800739e:	f7f9 fba7 	bl	8000af0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073a8:	7bfa      	ldrb	r2, [r7, #15]
 80073aa:	4611      	mov	r1, r2
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7fe fdf9 	bl	8005fa4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe fda5 	bl	8005f08 <USBD_LL_Reset>
}
 80073be:	bf00      	nop
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fe fdf4 	bl	8005fc4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	6812      	ldr	r2, [r2, #0]
 80073ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073ee:	f043 0301 	orr.w	r3, r3, #1
 80073f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d005      	beq.n	8007408 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80073fc:	4b04      	ldr	r3, [pc, #16]	; (8007410 <HAL_PCD_SuspendCallback+0x48>)
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	4a03      	ldr	r2, [pc, #12]	; (8007410 <HAL_PCD_SuspendCallback+0x48>)
 8007402:	f043 0306 	orr.w	r3, r3, #6
 8007406:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007408:	bf00      	nop
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	e000ed00 	.word	0xe000ed00

08007414 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007422:	4618      	mov	r0, r3
 8007424:	f7fe fde4 	bl	8005ff0 <USBD_LL_Resume>
}
 8007428:	bf00      	nop
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007442:	78fa      	ldrb	r2, [r7, #3]
 8007444:	4611      	mov	r1, r2
 8007446:	4618      	mov	r0, r3
 8007448:	f7fe fe32 	bl	80060b0 <USBD_LL_IsoOUTIncomplete>
}
 800744c:	bf00      	nop
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007466:	78fa      	ldrb	r2, [r7, #3]
 8007468:	4611      	mov	r1, r2
 800746a:	4618      	mov	r0, r3
 800746c:	f7fe fdfa 	bl	8006064 <USBD_LL_IsoINIncomplete>
}
 8007470:	bf00      	nop
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007486:	4618      	mov	r0, r3
 8007488:	f7fe fe38 	bl	80060fc <USBD_LL_DevConnected>
}
 800748c:	bf00      	nop
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fe fe35 	bl	8006112 <USBD_LL_DevDisconnected>
}
 80074a8:	bf00      	nop
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d13c      	bne.n	800753a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80074c0:	4a20      	ldr	r2, [pc, #128]	; (8007544 <USBD_LL_Init+0x94>)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a1e      	ldr	r2, [pc, #120]	; (8007544 <USBD_LL_Init+0x94>)
 80074cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074d0:	4b1c      	ldr	r3, [pc, #112]	; (8007544 <USBD_LL_Init+0x94>)
 80074d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80074d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80074d8:	4b1a      	ldr	r3, [pc, #104]	; (8007544 <USBD_LL_Init+0x94>)
 80074da:	2204      	movs	r2, #4
 80074dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80074de:	4b19      	ldr	r3, [pc, #100]	; (8007544 <USBD_LL_Init+0x94>)
 80074e0:	2202      	movs	r2, #2
 80074e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074e4:	4b17      	ldr	r3, [pc, #92]	; (8007544 <USBD_LL_Init+0x94>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80074ea:	4b16      	ldr	r3, [pc, #88]	; (8007544 <USBD_LL_Init+0x94>)
 80074ec:	2202      	movs	r2, #2
 80074ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074f0:	4b14      	ldr	r3, [pc, #80]	; (8007544 <USBD_LL_Init+0x94>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80074f6:	4b13      	ldr	r3, [pc, #76]	; (8007544 <USBD_LL_Init+0x94>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80074fc:	4b11      	ldr	r3, [pc, #68]	; (8007544 <USBD_LL_Init+0x94>)
 80074fe:	2200      	movs	r2, #0
 8007500:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8007502:	4b10      	ldr	r3, [pc, #64]	; (8007544 <USBD_LL_Init+0x94>)
 8007504:	2201      	movs	r2, #1
 8007506:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007508:	4b0e      	ldr	r3, [pc, #56]	; (8007544 <USBD_LL_Init+0x94>)
 800750a:	2200      	movs	r2, #0
 800750c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800750e:	480d      	ldr	r0, [pc, #52]	; (8007544 <USBD_LL_Init+0x94>)
 8007510:	f7f9 ffc3 	bl	800149a <HAL_PCD_Init>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800751a:	f7f9 fae9 	bl	8000af0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800751e:	2180      	movs	r1, #128	; 0x80
 8007520:	4808      	ldr	r0, [pc, #32]	; (8007544 <USBD_LL_Init+0x94>)
 8007522:	f7fb f920 	bl	8002766 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007526:	2240      	movs	r2, #64	; 0x40
 8007528:	2100      	movs	r1, #0
 800752a:	4806      	ldr	r0, [pc, #24]	; (8007544 <USBD_LL_Init+0x94>)
 800752c:	f7fb f8d4 	bl	80026d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007530:	2280      	movs	r2, #128	; 0x80
 8007532:	2101      	movs	r1, #1
 8007534:	4803      	ldr	r0, [pc, #12]	; (8007544 <USBD_LL_Init+0x94>)
 8007536:	f7fb f8cf 	bl	80026d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	20001868 	.word	0x20001868

08007548 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800755e:	4618      	mov	r0, r3
 8007560:	f7fa f8b8 	bl	80016d4 <HAL_PCD_Start>
 8007564:	4603      	mov	r3, r0
 8007566:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	4618      	mov	r0, r3
 800756c:	f000 f942 	bl	80077f4 <USBD_Get_USB_Status>
 8007570:	4603      	mov	r3, r0
 8007572:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007574:	7bbb      	ldrb	r3, [r7, #14]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	4608      	mov	r0, r1
 8007588:	4611      	mov	r1, r2
 800758a:	461a      	mov	r2, r3
 800758c:	4603      	mov	r3, r0
 800758e:	70fb      	strb	r3, [r7, #3]
 8007590:	460b      	mov	r3, r1
 8007592:	70bb      	strb	r3, [r7, #2]
 8007594:	4613      	mov	r3, r2
 8007596:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007598:	2300      	movs	r3, #0
 800759a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800759c:	2300      	movs	r3, #0
 800759e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80075a6:	78bb      	ldrb	r3, [r7, #2]
 80075a8:	883a      	ldrh	r2, [r7, #0]
 80075aa:	78f9      	ldrb	r1, [r7, #3]
 80075ac:	f7fa fc9c 	bl	8001ee8 <HAL_PCD_EP_Open>
 80075b0:	4603      	mov	r3, r0
 80075b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 f91c 	bl	80077f4 <USBD_Get_USB_Status>
 80075bc:	4603      	mov	r3, r0
 80075be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	460b      	mov	r3, r1
 80075d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075e4:	78fa      	ldrb	r2, [r7, #3]
 80075e6:	4611      	mov	r1, r2
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fa fce5 	bl	8001fb8 <HAL_PCD_EP_Close>
 80075ee:	4603      	mov	r3, r0
 80075f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075f2:	7bfb      	ldrb	r3, [r7, #15]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 f8fd 	bl	80077f4 <USBD_Get_USB_Status>
 80075fa:	4603      	mov	r3, r0
 80075fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007622:	78fa      	ldrb	r2, [r7, #3]
 8007624:	4611      	mov	r1, r2
 8007626:	4618      	mov	r0, r3
 8007628:	f7fa fdbd 	bl	80021a6 <HAL_PCD_EP_SetStall>
 800762c:	4603      	mov	r3, r0
 800762e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007630:	7bfb      	ldrb	r3, [r7, #15]
 8007632:	4618      	mov	r0, r3
 8007634:	f000 f8de 	bl	80077f4 <USBD_Get_USB_Status>
 8007638:	4603      	mov	r3, r0
 800763a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800763c:	7bbb      	ldrb	r3, [r7, #14]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007660:	78fa      	ldrb	r2, [r7, #3]
 8007662:	4611      	mov	r1, r2
 8007664:	4618      	mov	r0, r3
 8007666:	f7fa fe02 	bl	800226e <HAL_PCD_EP_ClrStall>
 800766a:	4603      	mov	r3, r0
 800766c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	4618      	mov	r0, r3
 8007672:	f000 f8bf 	bl	80077f4 <USBD_Get_USB_Status>
 8007676:	4603      	mov	r3, r0
 8007678:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800767a:	7bbb      	ldrb	r3, [r7, #14]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007696:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800769c:	2b00      	cmp	r3, #0
 800769e:	da0b      	bge.n	80076b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076a6:	68f9      	ldr	r1, [r7, #12]
 80076a8:	4613      	mov	r3, r2
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	1a9b      	subs	r3, r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	440b      	add	r3, r1
 80076b2:	333e      	adds	r3, #62	; 0x3e
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	e00b      	b.n	80076d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80076b8:	78fb      	ldrb	r3, [r7, #3]
 80076ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076be:	68f9      	ldr	r1, [r7, #12]
 80076c0:	4613      	mov	r3, r2
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	1a9b      	subs	r3, r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	440b      	add	r3, r1
 80076ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80076ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	460b      	mov	r3, r1
 80076e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076f6:	78fa      	ldrb	r2, [r7, #3]
 80076f8:	4611      	mov	r1, r2
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fa fbcf 	bl	8001e9e <HAL_PCD_SetAddress>
 8007700:	4603      	mov	r3, r0
 8007702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	4618      	mov	r0, r3
 8007708:	f000 f874 	bl	80077f4 <USBD_Get_USB_Status>
 800770c:	4603      	mov	r3, r0
 800770e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007710:	7bbb      	ldrb	r3, [r7, #14]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b086      	sub	sp, #24
 800771e:	af00      	add	r7, sp, #0
 8007720:	60f8      	str	r0, [r7, #12]
 8007722:	607a      	str	r2, [r7, #4]
 8007724:	603b      	str	r3, [r7, #0]
 8007726:	460b      	mov	r3, r1
 8007728:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007738:	7af9      	ldrb	r1, [r7, #11]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	f7fa fce8 	bl	8002112 <HAL_PCD_EP_Transmit>
 8007742:	4603      	mov	r3, r0
 8007744:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007746:	7dfb      	ldrb	r3, [r7, #23]
 8007748:	4618      	mov	r0, r3
 800774a:	f000 f853 	bl	80077f4 <USBD_Get_USB_Status>
 800774e:	4603      	mov	r3, r0
 8007750:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007752:	7dbb      	ldrb	r3, [r7, #22]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3718      	adds	r7, #24
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	607a      	str	r2, [r7, #4]
 8007766:	603b      	str	r3, [r7, #0]
 8007768:	460b      	mov	r3, r1
 800776a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800777a:	7af9      	ldrb	r1, [r7, #11]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	f7fa fc64 	bl	800204c <HAL_PCD_EP_Receive>
 8007784:	4603      	mov	r3, r0
 8007786:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 f832 	bl	80077f4 <USBD_Get_USB_Status>
 8007790:	4603      	mov	r3, r0
 8007792:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007794:	7dbb      	ldrb	r3, [r7, #22]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b082      	sub	sp, #8
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	460b      	mov	r3, r1
 80077a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80077b0:	78fa      	ldrb	r2, [r7, #3]
 80077b2:	4611      	mov	r1, r2
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fa fc94 	bl	80020e2 <HAL_PCD_EP_GetRxCount>
 80077ba:	4603      	mov	r3, r0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80077cc:	4b03      	ldr	r3, [pc, #12]	; (80077dc <USBD_static_malloc+0x18>)
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	20001c70 	.word	0x20001c70

080077e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]

}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007802:	79fb      	ldrb	r3, [r7, #7]
 8007804:	2b03      	cmp	r3, #3
 8007806:	d817      	bhi.n	8007838 <USBD_Get_USB_Status+0x44>
 8007808:	a201      	add	r2, pc, #4	; (adr r2, 8007810 <USBD_Get_USB_Status+0x1c>)
 800780a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780e:	bf00      	nop
 8007810:	08007821 	.word	0x08007821
 8007814:	08007827 	.word	0x08007827
 8007818:	0800782d 	.word	0x0800782d
 800781c:	08007833 	.word	0x08007833
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
    break;
 8007824:	e00b      	b.n	800783e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007826:	2303      	movs	r3, #3
 8007828:	73fb      	strb	r3, [r7, #15]
    break;
 800782a:	e008      	b.n	800783e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800782c:	2301      	movs	r3, #1
 800782e:	73fb      	strb	r3, [r7, #15]
    break;
 8007830:	e005      	b.n	800783e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007832:	2303      	movs	r3, #3
 8007834:	73fb      	strb	r3, [r7, #15]
    break;
 8007836:	e002      	b.n	800783e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007838:	2303      	movs	r3, #3
 800783a:	73fb      	strb	r3, [r7, #15]
    break;
 800783c:	bf00      	nop
  }
  return usb_status;
 800783e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <sniprintf>:
 800784c:	b40c      	push	{r2, r3}
 800784e:	b530      	push	{r4, r5, lr}
 8007850:	4b17      	ldr	r3, [pc, #92]	; (80078b0 <sniprintf+0x64>)
 8007852:	1e0c      	subs	r4, r1, #0
 8007854:	681d      	ldr	r5, [r3, #0]
 8007856:	b09d      	sub	sp, #116	; 0x74
 8007858:	da08      	bge.n	800786c <sniprintf+0x20>
 800785a:	238b      	movs	r3, #139	; 0x8b
 800785c:	602b      	str	r3, [r5, #0]
 800785e:	f04f 30ff 	mov.w	r0, #4294967295
 8007862:	b01d      	add	sp, #116	; 0x74
 8007864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007868:	b002      	add	sp, #8
 800786a:	4770      	bx	lr
 800786c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007870:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007874:	bf14      	ite	ne
 8007876:	f104 33ff 	addne.w	r3, r4, #4294967295
 800787a:	4623      	moveq	r3, r4
 800787c:	9304      	str	r3, [sp, #16]
 800787e:	9307      	str	r3, [sp, #28]
 8007880:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007884:	9002      	str	r0, [sp, #8]
 8007886:	9006      	str	r0, [sp, #24]
 8007888:	f8ad 3016 	strh.w	r3, [sp, #22]
 800788c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800788e:	ab21      	add	r3, sp, #132	; 0x84
 8007890:	a902      	add	r1, sp, #8
 8007892:	4628      	mov	r0, r5
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	f000 f993 	bl	8007bc0 <_svfiprintf_r>
 800789a:	1c43      	adds	r3, r0, #1
 800789c:	bfbc      	itt	lt
 800789e:	238b      	movlt	r3, #139	; 0x8b
 80078a0:	602b      	strlt	r3, [r5, #0]
 80078a2:	2c00      	cmp	r4, #0
 80078a4:	d0dd      	beq.n	8007862 <sniprintf+0x16>
 80078a6:	9b02      	ldr	r3, [sp, #8]
 80078a8:	2200      	movs	r2, #0
 80078aa:	701a      	strb	r2, [r3, #0]
 80078ac:	e7d9      	b.n	8007862 <sniprintf+0x16>
 80078ae:	bf00      	nop
 80078b0:	200001cc 	.word	0x200001cc

080078b4 <memset>:
 80078b4:	4402      	add	r2, r0
 80078b6:	4603      	mov	r3, r0
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d100      	bne.n	80078be <memset+0xa>
 80078bc:	4770      	bx	lr
 80078be:	f803 1b01 	strb.w	r1, [r3], #1
 80078c2:	e7f9      	b.n	80078b8 <memset+0x4>

080078c4 <__errno>:
 80078c4:	4b01      	ldr	r3, [pc, #4]	; (80078cc <__errno+0x8>)
 80078c6:	6818      	ldr	r0, [r3, #0]
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	200001cc 	.word	0x200001cc

080078d0 <__libc_init_array>:
 80078d0:	b570      	push	{r4, r5, r6, lr}
 80078d2:	4d0d      	ldr	r5, [pc, #52]	; (8007908 <__libc_init_array+0x38>)
 80078d4:	4c0d      	ldr	r4, [pc, #52]	; (800790c <__libc_init_array+0x3c>)
 80078d6:	1b64      	subs	r4, r4, r5
 80078d8:	10a4      	asrs	r4, r4, #2
 80078da:	2600      	movs	r6, #0
 80078dc:	42a6      	cmp	r6, r4
 80078de:	d109      	bne.n	80078f4 <__libc_init_array+0x24>
 80078e0:	4d0b      	ldr	r5, [pc, #44]	; (8007910 <__libc_init_array+0x40>)
 80078e2:	4c0c      	ldr	r4, [pc, #48]	; (8007914 <__libc_init_array+0x44>)
 80078e4:	f000 fc6a 	bl	80081bc <_init>
 80078e8:	1b64      	subs	r4, r4, r5
 80078ea:	10a4      	asrs	r4, r4, #2
 80078ec:	2600      	movs	r6, #0
 80078ee:	42a6      	cmp	r6, r4
 80078f0:	d105      	bne.n	80078fe <__libc_init_array+0x2e>
 80078f2:	bd70      	pop	{r4, r5, r6, pc}
 80078f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80078f8:	4798      	blx	r3
 80078fa:	3601      	adds	r6, #1
 80078fc:	e7ee      	b.n	80078dc <__libc_init_array+0xc>
 80078fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007902:	4798      	blx	r3
 8007904:	3601      	adds	r6, #1
 8007906:	e7f2      	b.n	80078ee <__libc_init_array+0x1e>
 8007908:	08008284 	.word	0x08008284
 800790c:	08008284 	.word	0x08008284
 8007910:	08008284 	.word	0x08008284
 8007914:	08008288 	.word	0x08008288

08007918 <__retarget_lock_acquire_recursive>:
 8007918:	4770      	bx	lr

0800791a <__retarget_lock_release_recursive>:
 800791a:	4770      	bx	lr

0800791c <_free_r>:
 800791c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800791e:	2900      	cmp	r1, #0
 8007920:	d044      	beq.n	80079ac <_free_r+0x90>
 8007922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007926:	9001      	str	r0, [sp, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	f1a1 0404 	sub.w	r4, r1, #4
 800792e:	bfb8      	it	lt
 8007930:	18e4      	addlt	r4, r4, r3
 8007932:	f000 f8df 	bl	8007af4 <__malloc_lock>
 8007936:	4a1e      	ldr	r2, [pc, #120]	; (80079b0 <_free_r+0x94>)
 8007938:	9801      	ldr	r0, [sp, #4]
 800793a:	6813      	ldr	r3, [r2, #0]
 800793c:	b933      	cbnz	r3, 800794c <_free_r+0x30>
 800793e:	6063      	str	r3, [r4, #4]
 8007940:	6014      	str	r4, [r2, #0]
 8007942:	b003      	add	sp, #12
 8007944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007948:	f000 b8da 	b.w	8007b00 <__malloc_unlock>
 800794c:	42a3      	cmp	r3, r4
 800794e:	d908      	bls.n	8007962 <_free_r+0x46>
 8007950:	6825      	ldr	r5, [r4, #0]
 8007952:	1961      	adds	r1, r4, r5
 8007954:	428b      	cmp	r3, r1
 8007956:	bf01      	itttt	eq
 8007958:	6819      	ldreq	r1, [r3, #0]
 800795a:	685b      	ldreq	r3, [r3, #4]
 800795c:	1949      	addeq	r1, r1, r5
 800795e:	6021      	streq	r1, [r4, #0]
 8007960:	e7ed      	b.n	800793e <_free_r+0x22>
 8007962:	461a      	mov	r2, r3
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	b10b      	cbz	r3, 800796c <_free_r+0x50>
 8007968:	42a3      	cmp	r3, r4
 800796a:	d9fa      	bls.n	8007962 <_free_r+0x46>
 800796c:	6811      	ldr	r1, [r2, #0]
 800796e:	1855      	adds	r5, r2, r1
 8007970:	42a5      	cmp	r5, r4
 8007972:	d10b      	bne.n	800798c <_free_r+0x70>
 8007974:	6824      	ldr	r4, [r4, #0]
 8007976:	4421      	add	r1, r4
 8007978:	1854      	adds	r4, r2, r1
 800797a:	42a3      	cmp	r3, r4
 800797c:	6011      	str	r1, [r2, #0]
 800797e:	d1e0      	bne.n	8007942 <_free_r+0x26>
 8007980:	681c      	ldr	r4, [r3, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	6053      	str	r3, [r2, #4]
 8007986:	440c      	add	r4, r1
 8007988:	6014      	str	r4, [r2, #0]
 800798a:	e7da      	b.n	8007942 <_free_r+0x26>
 800798c:	d902      	bls.n	8007994 <_free_r+0x78>
 800798e:	230c      	movs	r3, #12
 8007990:	6003      	str	r3, [r0, #0]
 8007992:	e7d6      	b.n	8007942 <_free_r+0x26>
 8007994:	6825      	ldr	r5, [r4, #0]
 8007996:	1961      	adds	r1, r4, r5
 8007998:	428b      	cmp	r3, r1
 800799a:	bf04      	itt	eq
 800799c:	6819      	ldreq	r1, [r3, #0]
 800799e:	685b      	ldreq	r3, [r3, #4]
 80079a0:	6063      	str	r3, [r4, #4]
 80079a2:	bf04      	itt	eq
 80079a4:	1949      	addeq	r1, r1, r5
 80079a6:	6021      	streq	r1, [r4, #0]
 80079a8:	6054      	str	r4, [r2, #4]
 80079aa:	e7ca      	b.n	8007942 <_free_r+0x26>
 80079ac:	b003      	add	sp, #12
 80079ae:	bd30      	pop	{r4, r5, pc}
 80079b0:	20001fd0 	.word	0x20001fd0

080079b4 <sbrk_aligned>:
 80079b4:	b570      	push	{r4, r5, r6, lr}
 80079b6:	4e0e      	ldr	r6, [pc, #56]	; (80079f0 <sbrk_aligned+0x3c>)
 80079b8:	460c      	mov	r4, r1
 80079ba:	6831      	ldr	r1, [r6, #0]
 80079bc:	4605      	mov	r5, r0
 80079be:	b911      	cbnz	r1, 80079c6 <sbrk_aligned+0x12>
 80079c0:	f000 fba6 	bl	8008110 <_sbrk_r>
 80079c4:	6030      	str	r0, [r6, #0]
 80079c6:	4621      	mov	r1, r4
 80079c8:	4628      	mov	r0, r5
 80079ca:	f000 fba1 	bl	8008110 <_sbrk_r>
 80079ce:	1c43      	adds	r3, r0, #1
 80079d0:	d00a      	beq.n	80079e8 <sbrk_aligned+0x34>
 80079d2:	1cc4      	adds	r4, r0, #3
 80079d4:	f024 0403 	bic.w	r4, r4, #3
 80079d8:	42a0      	cmp	r0, r4
 80079da:	d007      	beq.n	80079ec <sbrk_aligned+0x38>
 80079dc:	1a21      	subs	r1, r4, r0
 80079de:	4628      	mov	r0, r5
 80079e0:	f000 fb96 	bl	8008110 <_sbrk_r>
 80079e4:	3001      	adds	r0, #1
 80079e6:	d101      	bne.n	80079ec <sbrk_aligned+0x38>
 80079e8:	f04f 34ff 	mov.w	r4, #4294967295
 80079ec:	4620      	mov	r0, r4
 80079ee:	bd70      	pop	{r4, r5, r6, pc}
 80079f0:	20001fd4 	.word	0x20001fd4

080079f4 <_malloc_r>:
 80079f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079f8:	1ccd      	adds	r5, r1, #3
 80079fa:	f025 0503 	bic.w	r5, r5, #3
 80079fe:	3508      	adds	r5, #8
 8007a00:	2d0c      	cmp	r5, #12
 8007a02:	bf38      	it	cc
 8007a04:	250c      	movcc	r5, #12
 8007a06:	2d00      	cmp	r5, #0
 8007a08:	4607      	mov	r7, r0
 8007a0a:	db01      	blt.n	8007a10 <_malloc_r+0x1c>
 8007a0c:	42a9      	cmp	r1, r5
 8007a0e:	d905      	bls.n	8007a1c <_malloc_r+0x28>
 8007a10:	230c      	movs	r3, #12
 8007a12:	603b      	str	r3, [r7, #0]
 8007a14:	2600      	movs	r6, #0
 8007a16:	4630      	mov	r0, r6
 8007a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007af0 <_malloc_r+0xfc>
 8007a20:	f000 f868 	bl	8007af4 <__malloc_lock>
 8007a24:	f8d8 3000 	ldr.w	r3, [r8]
 8007a28:	461c      	mov	r4, r3
 8007a2a:	bb5c      	cbnz	r4, 8007a84 <_malloc_r+0x90>
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	4638      	mov	r0, r7
 8007a30:	f7ff ffc0 	bl	80079b4 <sbrk_aligned>
 8007a34:	1c43      	adds	r3, r0, #1
 8007a36:	4604      	mov	r4, r0
 8007a38:	d155      	bne.n	8007ae6 <_malloc_r+0xf2>
 8007a3a:	f8d8 4000 	ldr.w	r4, [r8]
 8007a3e:	4626      	mov	r6, r4
 8007a40:	2e00      	cmp	r6, #0
 8007a42:	d145      	bne.n	8007ad0 <_malloc_r+0xdc>
 8007a44:	2c00      	cmp	r4, #0
 8007a46:	d048      	beq.n	8007ada <_malloc_r+0xe6>
 8007a48:	6823      	ldr	r3, [r4, #0]
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	4638      	mov	r0, r7
 8007a4e:	eb04 0903 	add.w	r9, r4, r3
 8007a52:	f000 fb5d 	bl	8008110 <_sbrk_r>
 8007a56:	4581      	cmp	r9, r0
 8007a58:	d13f      	bne.n	8007ada <_malloc_r+0xe6>
 8007a5a:	6821      	ldr	r1, [r4, #0]
 8007a5c:	1a6d      	subs	r5, r5, r1
 8007a5e:	4629      	mov	r1, r5
 8007a60:	4638      	mov	r0, r7
 8007a62:	f7ff ffa7 	bl	80079b4 <sbrk_aligned>
 8007a66:	3001      	adds	r0, #1
 8007a68:	d037      	beq.n	8007ada <_malloc_r+0xe6>
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	442b      	add	r3, r5
 8007a6e:	6023      	str	r3, [r4, #0]
 8007a70:	f8d8 3000 	ldr.w	r3, [r8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d038      	beq.n	8007aea <_malloc_r+0xf6>
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	42a2      	cmp	r2, r4
 8007a7c:	d12b      	bne.n	8007ad6 <_malloc_r+0xe2>
 8007a7e:	2200      	movs	r2, #0
 8007a80:	605a      	str	r2, [r3, #4]
 8007a82:	e00f      	b.n	8007aa4 <_malloc_r+0xb0>
 8007a84:	6822      	ldr	r2, [r4, #0]
 8007a86:	1b52      	subs	r2, r2, r5
 8007a88:	d41f      	bmi.n	8007aca <_malloc_r+0xd6>
 8007a8a:	2a0b      	cmp	r2, #11
 8007a8c:	d917      	bls.n	8007abe <_malloc_r+0xca>
 8007a8e:	1961      	adds	r1, r4, r5
 8007a90:	42a3      	cmp	r3, r4
 8007a92:	6025      	str	r5, [r4, #0]
 8007a94:	bf18      	it	ne
 8007a96:	6059      	strne	r1, [r3, #4]
 8007a98:	6863      	ldr	r3, [r4, #4]
 8007a9a:	bf08      	it	eq
 8007a9c:	f8c8 1000 	streq.w	r1, [r8]
 8007aa0:	5162      	str	r2, [r4, r5]
 8007aa2:	604b      	str	r3, [r1, #4]
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	f104 060b 	add.w	r6, r4, #11
 8007aaa:	f000 f829 	bl	8007b00 <__malloc_unlock>
 8007aae:	f026 0607 	bic.w	r6, r6, #7
 8007ab2:	1d23      	adds	r3, r4, #4
 8007ab4:	1af2      	subs	r2, r6, r3
 8007ab6:	d0ae      	beq.n	8007a16 <_malloc_r+0x22>
 8007ab8:	1b9b      	subs	r3, r3, r6
 8007aba:	50a3      	str	r3, [r4, r2]
 8007abc:	e7ab      	b.n	8007a16 <_malloc_r+0x22>
 8007abe:	42a3      	cmp	r3, r4
 8007ac0:	6862      	ldr	r2, [r4, #4]
 8007ac2:	d1dd      	bne.n	8007a80 <_malloc_r+0x8c>
 8007ac4:	f8c8 2000 	str.w	r2, [r8]
 8007ac8:	e7ec      	b.n	8007aa4 <_malloc_r+0xb0>
 8007aca:	4623      	mov	r3, r4
 8007acc:	6864      	ldr	r4, [r4, #4]
 8007ace:	e7ac      	b.n	8007a2a <_malloc_r+0x36>
 8007ad0:	4634      	mov	r4, r6
 8007ad2:	6876      	ldr	r6, [r6, #4]
 8007ad4:	e7b4      	b.n	8007a40 <_malloc_r+0x4c>
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	e7cc      	b.n	8007a74 <_malloc_r+0x80>
 8007ada:	230c      	movs	r3, #12
 8007adc:	603b      	str	r3, [r7, #0]
 8007ade:	4638      	mov	r0, r7
 8007ae0:	f000 f80e 	bl	8007b00 <__malloc_unlock>
 8007ae4:	e797      	b.n	8007a16 <_malloc_r+0x22>
 8007ae6:	6025      	str	r5, [r4, #0]
 8007ae8:	e7dc      	b.n	8007aa4 <_malloc_r+0xb0>
 8007aea:	605b      	str	r3, [r3, #4]
 8007aec:	deff      	udf	#255	; 0xff
 8007aee:	bf00      	nop
 8007af0:	20001fd0 	.word	0x20001fd0

08007af4 <__malloc_lock>:
 8007af4:	4801      	ldr	r0, [pc, #4]	; (8007afc <__malloc_lock+0x8>)
 8007af6:	f7ff bf0f 	b.w	8007918 <__retarget_lock_acquire_recursive>
 8007afa:	bf00      	nop
 8007afc:	20001fcc 	.word	0x20001fcc

08007b00 <__malloc_unlock>:
 8007b00:	4801      	ldr	r0, [pc, #4]	; (8007b08 <__malloc_unlock+0x8>)
 8007b02:	f7ff bf0a 	b.w	800791a <__retarget_lock_release_recursive>
 8007b06:	bf00      	nop
 8007b08:	20001fcc 	.word	0x20001fcc

08007b0c <__ssputs_r>:
 8007b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b10:	688e      	ldr	r6, [r1, #8]
 8007b12:	461f      	mov	r7, r3
 8007b14:	42be      	cmp	r6, r7
 8007b16:	680b      	ldr	r3, [r1, #0]
 8007b18:	4682      	mov	sl, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	4690      	mov	r8, r2
 8007b1e:	d82c      	bhi.n	8007b7a <__ssputs_r+0x6e>
 8007b20:	898a      	ldrh	r2, [r1, #12]
 8007b22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b26:	d026      	beq.n	8007b76 <__ssputs_r+0x6a>
 8007b28:	6965      	ldr	r5, [r4, #20]
 8007b2a:	6909      	ldr	r1, [r1, #16]
 8007b2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b30:	eba3 0901 	sub.w	r9, r3, r1
 8007b34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b38:	1c7b      	adds	r3, r7, #1
 8007b3a:	444b      	add	r3, r9
 8007b3c:	106d      	asrs	r5, r5, #1
 8007b3e:	429d      	cmp	r5, r3
 8007b40:	bf38      	it	cc
 8007b42:	461d      	movcc	r5, r3
 8007b44:	0553      	lsls	r3, r2, #21
 8007b46:	d527      	bpl.n	8007b98 <__ssputs_r+0x8c>
 8007b48:	4629      	mov	r1, r5
 8007b4a:	f7ff ff53 	bl	80079f4 <_malloc_r>
 8007b4e:	4606      	mov	r6, r0
 8007b50:	b360      	cbz	r0, 8007bac <__ssputs_r+0xa0>
 8007b52:	6921      	ldr	r1, [r4, #16]
 8007b54:	464a      	mov	r2, r9
 8007b56:	f000 faeb 	bl	8008130 <memcpy>
 8007b5a:	89a3      	ldrh	r3, [r4, #12]
 8007b5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b64:	81a3      	strh	r3, [r4, #12]
 8007b66:	6126      	str	r6, [r4, #16]
 8007b68:	6165      	str	r5, [r4, #20]
 8007b6a:	444e      	add	r6, r9
 8007b6c:	eba5 0509 	sub.w	r5, r5, r9
 8007b70:	6026      	str	r6, [r4, #0]
 8007b72:	60a5      	str	r5, [r4, #8]
 8007b74:	463e      	mov	r6, r7
 8007b76:	42be      	cmp	r6, r7
 8007b78:	d900      	bls.n	8007b7c <__ssputs_r+0x70>
 8007b7a:	463e      	mov	r6, r7
 8007b7c:	6820      	ldr	r0, [r4, #0]
 8007b7e:	4632      	mov	r2, r6
 8007b80:	4641      	mov	r1, r8
 8007b82:	f000 faab 	bl	80080dc <memmove>
 8007b86:	68a3      	ldr	r3, [r4, #8]
 8007b88:	1b9b      	subs	r3, r3, r6
 8007b8a:	60a3      	str	r3, [r4, #8]
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	4433      	add	r3, r6
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	2000      	movs	r0, #0
 8007b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b98:	462a      	mov	r2, r5
 8007b9a:	f000 fad7 	bl	800814c <_realloc_r>
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d1e0      	bne.n	8007b66 <__ssputs_r+0x5a>
 8007ba4:	6921      	ldr	r1, [r4, #16]
 8007ba6:	4650      	mov	r0, sl
 8007ba8:	f7ff feb8 	bl	800791c <_free_r>
 8007bac:	230c      	movs	r3, #12
 8007bae:	f8ca 3000 	str.w	r3, [sl]
 8007bb2:	89a3      	ldrh	r3, [r4, #12]
 8007bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bb8:	81a3      	strh	r3, [r4, #12]
 8007bba:	f04f 30ff 	mov.w	r0, #4294967295
 8007bbe:	e7e9      	b.n	8007b94 <__ssputs_r+0x88>

08007bc0 <_svfiprintf_r>:
 8007bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc4:	4698      	mov	r8, r3
 8007bc6:	898b      	ldrh	r3, [r1, #12]
 8007bc8:	061b      	lsls	r3, r3, #24
 8007bca:	b09d      	sub	sp, #116	; 0x74
 8007bcc:	4607      	mov	r7, r0
 8007bce:	460d      	mov	r5, r1
 8007bd0:	4614      	mov	r4, r2
 8007bd2:	d50e      	bpl.n	8007bf2 <_svfiprintf_r+0x32>
 8007bd4:	690b      	ldr	r3, [r1, #16]
 8007bd6:	b963      	cbnz	r3, 8007bf2 <_svfiprintf_r+0x32>
 8007bd8:	2140      	movs	r1, #64	; 0x40
 8007bda:	f7ff ff0b 	bl	80079f4 <_malloc_r>
 8007bde:	6028      	str	r0, [r5, #0]
 8007be0:	6128      	str	r0, [r5, #16]
 8007be2:	b920      	cbnz	r0, 8007bee <_svfiprintf_r+0x2e>
 8007be4:	230c      	movs	r3, #12
 8007be6:	603b      	str	r3, [r7, #0]
 8007be8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bec:	e0d0      	b.n	8007d90 <_svfiprintf_r+0x1d0>
 8007bee:	2340      	movs	r3, #64	; 0x40
 8007bf0:	616b      	str	r3, [r5, #20]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8007bf6:	2320      	movs	r3, #32
 8007bf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c00:	2330      	movs	r3, #48	; 0x30
 8007c02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007da8 <_svfiprintf_r+0x1e8>
 8007c06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c0a:	f04f 0901 	mov.w	r9, #1
 8007c0e:	4623      	mov	r3, r4
 8007c10:	469a      	mov	sl, r3
 8007c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c16:	b10a      	cbz	r2, 8007c1c <_svfiprintf_r+0x5c>
 8007c18:	2a25      	cmp	r2, #37	; 0x25
 8007c1a:	d1f9      	bne.n	8007c10 <_svfiprintf_r+0x50>
 8007c1c:	ebba 0b04 	subs.w	fp, sl, r4
 8007c20:	d00b      	beq.n	8007c3a <_svfiprintf_r+0x7a>
 8007c22:	465b      	mov	r3, fp
 8007c24:	4622      	mov	r2, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	4638      	mov	r0, r7
 8007c2a:	f7ff ff6f 	bl	8007b0c <__ssputs_r>
 8007c2e:	3001      	adds	r0, #1
 8007c30:	f000 80a9 	beq.w	8007d86 <_svfiprintf_r+0x1c6>
 8007c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c36:	445a      	add	r2, fp
 8007c38:	9209      	str	r2, [sp, #36]	; 0x24
 8007c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 80a1 	beq.w	8007d86 <_svfiprintf_r+0x1c6>
 8007c44:	2300      	movs	r3, #0
 8007c46:	f04f 32ff 	mov.w	r2, #4294967295
 8007c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c4e:	f10a 0a01 	add.w	sl, sl, #1
 8007c52:	9304      	str	r3, [sp, #16]
 8007c54:	9307      	str	r3, [sp, #28]
 8007c56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c5a:	931a      	str	r3, [sp, #104]	; 0x68
 8007c5c:	4654      	mov	r4, sl
 8007c5e:	2205      	movs	r2, #5
 8007c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c64:	4850      	ldr	r0, [pc, #320]	; (8007da8 <_svfiprintf_r+0x1e8>)
 8007c66:	f7f8 fabb 	bl	80001e0 <memchr>
 8007c6a:	9a04      	ldr	r2, [sp, #16]
 8007c6c:	b9d8      	cbnz	r0, 8007ca6 <_svfiprintf_r+0xe6>
 8007c6e:	06d0      	lsls	r0, r2, #27
 8007c70:	bf44      	itt	mi
 8007c72:	2320      	movmi	r3, #32
 8007c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c78:	0711      	lsls	r1, r2, #28
 8007c7a:	bf44      	itt	mi
 8007c7c:	232b      	movmi	r3, #43	; 0x2b
 8007c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c82:	f89a 3000 	ldrb.w	r3, [sl]
 8007c86:	2b2a      	cmp	r3, #42	; 0x2a
 8007c88:	d015      	beq.n	8007cb6 <_svfiprintf_r+0xf6>
 8007c8a:	9a07      	ldr	r2, [sp, #28]
 8007c8c:	4654      	mov	r4, sl
 8007c8e:	2000      	movs	r0, #0
 8007c90:	f04f 0c0a 	mov.w	ip, #10
 8007c94:	4621      	mov	r1, r4
 8007c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c9a:	3b30      	subs	r3, #48	; 0x30
 8007c9c:	2b09      	cmp	r3, #9
 8007c9e:	d94d      	bls.n	8007d3c <_svfiprintf_r+0x17c>
 8007ca0:	b1b0      	cbz	r0, 8007cd0 <_svfiprintf_r+0x110>
 8007ca2:	9207      	str	r2, [sp, #28]
 8007ca4:	e014      	b.n	8007cd0 <_svfiprintf_r+0x110>
 8007ca6:	eba0 0308 	sub.w	r3, r0, r8
 8007caa:	fa09 f303 	lsl.w	r3, r9, r3
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	9304      	str	r3, [sp, #16]
 8007cb2:	46a2      	mov	sl, r4
 8007cb4:	e7d2      	b.n	8007c5c <_svfiprintf_r+0x9c>
 8007cb6:	9b03      	ldr	r3, [sp, #12]
 8007cb8:	1d19      	adds	r1, r3, #4
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	9103      	str	r1, [sp, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	bfbb      	ittet	lt
 8007cc2:	425b      	neglt	r3, r3
 8007cc4:	f042 0202 	orrlt.w	r2, r2, #2
 8007cc8:	9307      	strge	r3, [sp, #28]
 8007cca:	9307      	strlt	r3, [sp, #28]
 8007ccc:	bfb8      	it	lt
 8007cce:	9204      	strlt	r2, [sp, #16]
 8007cd0:	7823      	ldrb	r3, [r4, #0]
 8007cd2:	2b2e      	cmp	r3, #46	; 0x2e
 8007cd4:	d10c      	bne.n	8007cf0 <_svfiprintf_r+0x130>
 8007cd6:	7863      	ldrb	r3, [r4, #1]
 8007cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8007cda:	d134      	bne.n	8007d46 <_svfiprintf_r+0x186>
 8007cdc:	9b03      	ldr	r3, [sp, #12]
 8007cde:	1d1a      	adds	r2, r3, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	9203      	str	r2, [sp, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	bfb8      	it	lt
 8007ce8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cec:	3402      	adds	r4, #2
 8007cee:	9305      	str	r3, [sp, #20]
 8007cf0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007db8 <_svfiprintf_r+0x1f8>
 8007cf4:	7821      	ldrb	r1, [r4, #0]
 8007cf6:	2203      	movs	r2, #3
 8007cf8:	4650      	mov	r0, sl
 8007cfa:	f7f8 fa71 	bl	80001e0 <memchr>
 8007cfe:	b138      	cbz	r0, 8007d10 <_svfiprintf_r+0x150>
 8007d00:	9b04      	ldr	r3, [sp, #16]
 8007d02:	eba0 000a 	sub.w	r0, r0, sl
 8007d06:	2240      	movs	r2, #64	; 0x40
 8007d08:	4082      	lsls	r2, r0
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	3401      	adds	r4, #1
 8007d0e:	9304      	str	r3, [sp, #16]
 8007d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d14:	4825      	ldr	r0, [pc, #148]	; (8007dac <_svfiprintf_r+0x1ec>)
 8007d16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d1a:	2206      	movs	r2, #6
 8007d1c:	f7f8 fa60 	bl	80001e0 <memchr>
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d038      	beq.n	8007d96 <_svfiprintf_r+0x1d6>
 8007d24:	4b22      	ldr	r3, [pc, #136]	; (8007db0 <_svfiprintf_r+0x1f0>)
 8007d26:	bb1b      	cbnz	r3, 8007d70 <_svfiprintf_r+0x1b0>
 8007d28:	9b03      	ldr	r3, [sp, #12]
 8007d2a:	3307      	adds	r3, #7
 8007d2c:	f023 0307 	bic.w	r3, r3, #7
 8007d30:	3308      	adds	r3, #8
 8007d32:	9303      	str	r3, [sp, #12]
 8007d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d36:	4433      	add	r3, r6
 8007d38:	9309      	str	r3, [sp, #36]	; 0x24
 8007d3a:	e768      	b.n	8007c0e <_svfiprintf_r+0x4e>
 8007d3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d40:	460c      	mov	r4, r1
 8007d42:	2001      	movs	r0, #1
 8007d44:	e7a6      	b.n	8007c94 <_svfiprintf_r+0xd4>
 8007d46:	2300      	movs	r3, #0
 8007d48:	3401      	adds	r4, #1
 8007d4a:	9305      	str	r3, [sp, #20]
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	f04f 0c0a 	mov.w	ip, #10
 8007d52:	4620      	mov	r0, r4
 8007d54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d58:	3a30      	subs	r2, #48	; 0x30
 8007d5a:	2a09      	cmp	r2, #9
 8007d5c:	d903      	bls.n	8007d66 <_svfiprintf_r+0x1a6>
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0c6      	beq.n	8007cf0 <_svfiprintf_r+0x130>
 8007d62:	9105      	str	r1, [sp, #20]
 8007d64:	e7c4      	b.n	8007cf0 <_svfiprintf_r+0x130>
 8007d66:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d6a:	4604      	mov	r4, r0
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e7f0      	b.n	8007d52 <_svfiprintf_r+0x192>
 8007d70:	ab03      	add	r3, sp, #12
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	462a      	mov	r2, r5
 8007d76:	4b0f      	ldr	r3, [pc, #60]	; (8007db4 <_svfiprintf_r+0x1f4>)
 8007d78:	a904      	add	r1, sp, #16
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	f3af 8000 	nop.w
 8007d80:	1c42      	adds	r2, r0, #1
 8007d82:	4606      	mov	r6, r0
 8007d84:	d1d6      	bne.n	8007d34 <_svfiprintf_r+0x174>
 8007d86:	89ab      	ldrh	r3, [r5, #12]
 8007d88:	065b      	lsls	r3, r3, #25
 8007d8a:	f53f af2d 	bmi.w	8007be8 <_svfiprintf_r+0x28>
 8007d8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d90:	b01d      	add	sp, #116	; 0x74
 8007d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d96:	ab03      	add	r3, sp, #12
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	462a      	mov	r2, r5
 8007d9c:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <_svfiprintf_r+0x1f4>)
 8007d9e:	a904      	add	r1, sp, #16
 8007da0:	4638      	mov	r0, r7
 8007da2:	f000 f879 	bl	8007e98 <_printf_i>
 8007da6:	e7eb      	b.n	8007d80 <_svfiprintf_r+0x1c0>
 8007da8:	08008248 	.word	0x08008248
 8007dac:	08008252 	.word	0x08008252
 8007db0:	00000000 	.word	0x00000000
 8007db4:	08007b0d 	.word	0x08007b0d
 8007db8:	0800824e 	.word	0x0800824e

08007dbc <_printf_common>:
 8007dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc0:	4616      	mov	r6, r2
 8007dc2:	4699      	mov	r9, r3
 8007dc4:	688a      	ldr	r2, [r1, #8]
 8007dc6:	690b      	ldr	r3, [r1, #16]
 8007dc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	bfb8      	it	lt
 8007dd0:	4613      	movlt	r3, r2
 8007dd2:	6033      	str	r3, [r6, #0]
 8007dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dd8:	4607      	mov	r7, r0
 8007dda:	460c      	mov	r4, r1
 8007ddc:	b10a      	cbz	r2, 8007de2 <_printf_common+0x26>
 8007dde:	3301      	adds	r3, #1
 8007de0:	6033      	str	r3, [r6, #0]
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	0699      	lsls	r1, r3, #26
 8007de6:	bf42      	ittt	mi
 8007de8:	6833      	ldrmi	r3, [r6, #0]
 8007dea:	3302      	addmi	r3, #2
 8007dec:	6033      	strmi	r3, [r6, #0]
 8007dee:	6825      	ldr	r5, [r4, #0]
 8007df0:	f015 0506 	ands.w	r5, r5, #6
 8007df4:	d106      	bne.n	8007e04 <_printf_common+0x48>
 8007df6:	f104 0a19 	add.w	sl, r4, #25
 8007dfa:	68e3      	ldr	r3, [r4, #12]
 8007dfc:	6832      	ldr	r2, [r6, #0]
 8007dfe:	1a9b      	subs	r3, r3, r2
 8007e00:	42ab      	cmp	r3, r5
 8007e02:	dc26      	bgt.n	8007e52 <_printf_common+0x96>
 8007e04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e08:	1e13      	subs	r3, r2, #0
 8007e0a:	6822      	ldr	r2, [r4, #0]
 8007e0c:	bf18      	it	ne
 8007e0e:	2301      	movne	r3, #1
 8007e10:	0692      	lsls	r2, r2, #26
 8007e12:	d42b      	bmi.n	8007e6c <_printf_common+0xb0>
 8007e14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e18:	4649      	mov	r1, r9
 8007e1a:	4638      	mov	r0, r7
 8007e1c:	47c0      	blx	r8
 8007e1e:	3001      	adds	r0, #1
 8007e20:	d01e      	beq.n	8007e60 <_printf_common+0xa4>
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	6922      	ldr	r2, [r4, #16]
 8007e26:	f003 0306 	and.w	r3, r3, #6
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	bf02      	ittt	eq
 8007e2e:	68e5      	ldreq	r5, [r4, #12]
 8007e30:	6833      	ldreq	r3, [r6, #0]
 8007e32:	1aed      	subeq	r5, r5, r3
 8007e34:	68a3      	ldr	r3, [r4, #8]
 8007e36:	bf0c      	ite	eq
 8007e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e3c:	2500      	movne	r5, #0
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	bfc4      	itt	gt
 8007e42:	1a9b      	subgt	r3, r3, r2
 8007e44:	18ed      	addgt	r5, r5, r3
 8007e46:	2600      	movs	r6, #0
 8007e48:	341a      	adds	r4, #26
 8007e4a:	42b5      	cmp	r5, r6
 8007e4c:	d11a      	bne.n	8007e84 <_printf_common+0xc8>
 8007e4e:	2000      	movs	r0, #0
 8007e50:	e008      	b.n	8007e64 <_printf_common+0xa8>
 8007e52:	2301      	movs	r3, #1
 8007e54:	4652      	mov	r2, sl
 8007e56:	4649      	mov	r1, r9
 8007e58:	4638      	mov	r0, r7
 8007e5a:	47c0      	blx	r8
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	d103      	bne.n	8007e68 <_printf_common+0xac>
 8007e60:	f04f 30ff 	mov.w	r0, #4294967295
 8007e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e68:	3501      	adds	r5, #1
 8007e6a:	e7c6      	b.n	8007dfa <_printf_common+0x3e>
 8007e6c:	18e1      	adds	r1, r4, r3
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	2030      	movs	r0, #48	; 0x30
 8007e72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e76:	4422      	add	r2, r4
 8007e78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e80:	3302      	adds	r3, #2
 8007e82:	e7c7      	b.n	8007e14 <_printf_common+0x58>
 8007e84:	2301      	movs	r3, #1
 8007e86:	4622      	mov	r2, r4
 8007e88:	4649      	mov	r1, r9
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	47c0      	blx	r8
 8007e8e:	3001      	adds	r0, #1
 8007e90:	d0e6      	beq.n	8007e60 <_printf_common+0xa4>
 8007e92:	3601      	adds	r6, #1
 8007e94:	e7d9      	b.n	8007e4a <_printf_common+0x8e>
	...

08007e98 <_printf_i>:
 8007e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e9c:	7e0f      	ldrb	r7, [r1, #24]
 8007e9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ea0:	2f78      	cmp	r7, #120	; 0x78
 8007ea2:	4691      	mov	r9, r2
 8007ea4:	4680      	mov	r8, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	469a      	mov	sl, r3
 8007eaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007eae:	d807      	bhi.n	8007ec0 <_printf_i+0x28>
 8007eb0:	2f62      	cmp	r7, #98	; 0x62
 8007eb2:	d80a      	bhi.n	8007eca <_printf_i+0x32>
 8007eb4:	2f00      	cmp	r7, #0
 8007eb6:	f000 80d4 	beq.w	8008062 <_printf_i+0x1ca>
 8007eba:	2f58      	cmp	r7, #88	; 0x58
 8007ebc:	f000 80c0 	beq.w	8008040 <_printf_i+0x1a8>
 8007ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ec8:	e03a      	b.n	8007f40 <_printf_i+0xa8>
 8007eca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ece:	2b15      	cmp	r3, #21
 8007ed0:	d8f6      	bhi.n	8007ec0 <_printf_i+0x28>
 8007ed2:	a101      	add	r1, pc, #4	; (adr r1, 8007ed8 <_printf_i+0x40>)
 8007ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ed8:	08007f31 	.word	0x08007f31
 8007edc:	08007f45 	.word	0x08007f45
 8007ee0:	08007ec1 	.word	0x08007ec1
 8007ee4:	08007ec1 	.word	0x08007ec1
 8007ee8:	08007ec1 	.word	0x08007ec1
 8007eec:	08007ec1 	.word	0x08007ec1
 8007ef0:	08007f45 	.word	0x08007f45
 8007ef4:	08007ec1 	.word	0x08007ec1
 8007ef8:	08007ec1 	.word	0x08007ec1
 8007efc:	08007ec1 	.word	0x08007ec1
 8007f00:	08007ec1 	.word	0x08007ec1
 8007f04:	08008049 	.word	0x08008049
 8007f08:	08007f71 	.word	0x08007f71
 8007f0c:	08008003 	.word	0x08008003
 8007f10:	08007ec1 	.word	0x08007ec1
 8007f14:	08007ec1 	.word	0x08007ec1
 8007f18:	0800806b 	.word	0x0800806b
 8007f1c:	08007ec1 	.word	0x08007ec1
 8007f20:	08007f71 	.word	0x08007f71
 8007f24:	08007ec1 	.word	0x08007ec1
 8007f28:	08007ec1 	.word	0x08007ec1
 8007f2c:	0800800b 	.word	0x0800800b
 8007f30:	682b      	ldr	r3, [r5, #0]
 8007f32:	1d1a      	adds	r2, r3, #4
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	602a      	str	r2, [r5, #0]
 8007f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f40:	2301      	movs	r3, #1
 8007f42:	e09f      	b.n	8008084 <_printf_i+0x1ec>
 8007f44:	6820      	ldr	r0, [r4, #0]
 8007f46:	682b      	ldr	r3, [r5, #0]
 8007f48:	0607      	lsls	r7, r0, #24
 8007f4a:	f103 0104 	add.w	r1, r3, #4
 8007f4e:	6029      	str	r1, [r5, #0]
 8007f50:	d501      	bpl.n	8007f56 <_printf_i+0xbe>
 8007f52:	681e      	ldr	r6, [r3, #0]
 8007f54:	e003      	b.n	8007f5e <_printf_i+0xc6>
 8007f56:	0646      	lsls	r6, r0, #25
 8007f58:	d5fb      	bpl.n	8007f52 <_printf_i+0xba>
 8007f5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007f5e:	2e00      	cmp	r6, #0
 8007f60:	da03      	bge.n	8007f6a <_printf_i+0xd2>
 8007f62:	232d      	movs	r3, #45	; 0x2d
 8007f64:	4276      	negs	r6, r6
 8007f66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f6a:	485a      	ldr	r0, [pc, #360]	; (80080d4 <_printf_i+0x23c>)
 8007f6c:	230a      	movs	r3, #10
 8007f6e:	e012      	b.n	8007f96 <_printf_i+0xfe>
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	6820      	ldr	r0, [r4, #0]
 8007f74:	1d19      	adds	r1, r3, #4
 8007f76:	6029      	str	r1, [r5, #0]
 8007f78:	0605      	lsls	r5, r0, #24
 8007f7a:	d501      	bpl.n	8007f80 <_printf_i+0xe8>
 8007f7c:	681e      	ldr	r6, [r3, #0]
 8007f7e:	e002      	b.n	8007f86 <_printf_i+0xee>
 8007f80:	0641      	lsls	r1, r0, #25
 8007f82:	d5fb      	bpl.n	8007f7c <_printf_i+0xe4>
 8007f84:	881e      	ldrh	r6, [r3, #0]
 8007f86:	4853      	ldr	r0, [pc, #332]	; (80080d4 <_printf_i+0x23c>)
 8007f88:	2f6f      	cmp	r7, #111	; 0x6f
 8007f8a:	bf0c      	ite	eq
 8007f8c:	2308      	moveq	r3, #8
 8007f8e:	230a      	movne	r3, #10
 8007f90:	2100      	movs	r1, #0
 8007f92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f96:	6865      	ldr	r5, [r4, #4]
 8007f98:	60a5      	str	r5, [r4, #8]
 8007f9a:	2d00      	cmp	r5, #0
 8007f9c:	bfa2      	ittt	ge
 8007f9e:	6821      	ldrge	r1, [r4, #0]
 8007fa0:	f021 0104 	bicge.w	r1, r1, #4
 8007fa4:	6021      	strge	r1, [r4, #0]
 8007fa6:	b90e      	cbnz	r6, 8007fac <_printf_i+0x114>
 8007fa8:	2d00      	cmp	r5, #0
 8007faa:	d04b      	beq.n	8008044 <_printf_i+0x1ac>
 8007fac:	4615      	mov	r5, r2
 8007fae:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fb2:	fb03 6711 	mls	r7, r3, r1, r6
 8007fb6:	5dc7      	ldrb	r7, [r0, r7]
 8007fb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fbc:	4637      	mov	r7, r6
 8007fbe:	42bb      	cmp	r3, r7
 8007fc0:	460e      	mov	r6, r1
 8007fc2:	d9f4      	bls.n	8007fae <_printf_i+0x116>
 8007fc4:	2b08      	cmp	r3, #8
 8007fc6:	d10b      	bne.n	8007fe0 <_printf_i+0x148>
 8007fc8:	6823      	ldr	r3, [r4, #0]
 8007fca:	07de      	lsls	r6, r3, #31
 8007fcc:	d508      	bpl.n	8007fe0 <_printf_i+0x148>
 8007fce:	6923      	ldr	r3, [r4, #16]
 8007fd0:	6861      	ldr	r1, [r4, #4]
 8007fd2:	4299      	cmp	r1, r3
 8007fd4:	bfde      	ittt	le
 8007fd6:	2330      	movle	r3, #48	; 0x30
 8007fd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007fe0:	1b52      	subs	r2, r2, r5
 8007fe2:	6122      	str	r2, [r4, #16]
 8007fe4:	f8cd a000 	str.w	sl, [sp]
 8007fe8:	464b      	mov	r3, r9
 8007fea:	aa03      	add	r2, sp, #12
 8007fec:	4621      	mov	r1, r4
 8007fee:	4640      	mov	r0, r8
 8007ff0:	f7ff fee4 	bl	8007dbc <_printf_common>
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	d14a      	bne.n	800808e <_printf_i+0x1f6>
 8007ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffc:	b004      	add	sp, #16
 8007ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	f043 0320 	orr.w	r3, r3, #32
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	4833      	ldr	r0, [pc, #204]	; (80080d8 <_printf_i+0x240>)
 800800c:	2778      	movs	r7, #120	; 0x78
 800800e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	6829      	ldr	r1, [r5, #0]
 8008016:	061f      	lsls	r7, r3, #24
 8008018:	f851 6b04 	ldr.w	r6, [r1], #4
 800801c:	d402      	bmi.n	8008024 <_printf_i+0x18c>
 800801e:	065f      	lsls	r7, r3, #25
 8008020:	bf48      	it	mi
 8008022:	b2b6      	uxthmi	r6, r6
 8008024:	07df      	lsls	r7, r3, #31
 8008026:	bf48      	it	mi
 8008028:	f043 0320 	orrmi.w	r3, r3, #32
 800802c:	6029      	str	r1, [r5, #0]
 800802e:	bf48      	it	mi
 8008030:	6023      	strmi	r3, [r4, #0]
 8008032:	b91e      	cbnz	r6, 800803c <_printf_i+0x1a4>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	f023 0320 	bic.w	r3, r3, #32
 800803a:	6023      	str	r3, [r4, #0]
 800803c:	2310      	movs	r3, #16
 800803e:	e7a7      	b.n	8007f90 <_printf_i+0xf8>
 8008040:	4824      	ldr	r0, [pc, #144]	; (80080d4 <_printf_i+0x23c>)
 8008042:	e7e4      	b.n	800800e <_printf_i+0x176>
 8008044:	4615      	mov	r5, r2
 8008046:	e7bd      	b.n	8007fc4 <_printf_i+0x12c>
 8008048:	682b      	ldr	r3, [r5, #0]
 800804a:	6826      	ldr	r6, [r4, #0]
 800804c:	6961      	ldr	r1, [r4, #20]
 800804e:	1d18      	adds	r0, r3, #4
 8008050:	6028      	str	r0, [r5, #0]
 8008052:	0635      	lsls	r5, r6, #24
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	d501      	bpl.n	800805c <_printf_i+0x1c4>
 8008058:	6019      	str	r1, [r3, #0]
 800805a:	e002      	b.n	8008062 <_printf_i+0x1ca>
 800805c:	0670      	lsls	r0, r6, #25
 800805e:	d5fb      	bpl.n	8008058 <_printf_i+0x1c0>
 8008060:	8019      	strh	r1, [r3, #0]
 8008062:	2300      	movs	r3, #0
 8008064:	6123      	str	r3, [r4, #16]
 8008066:	4615      	mov	r5, r2
 8008068:	e7bc      	b.n	8007fe4 <_printf_i+0x14c>
 800806a:	682b      	ldr	r3, [r5, #0]
 800806c:	1d1a      	adds	r2, r3, #4
 800806e:	602a      	str	r2, [r5, #0]
 8008070:	681d      	ldr	r5, [r3, #0]
 8008072:	6862      	ldr	r2, [r4, #4]
 8008074:	2100      	movs	r1, #0
 8008076:	4628      	mov	r0, r5
 8008078:	f7f8 f8b2 	bl	80001e0 <memchr>
 800807c:	b108      	cbz	r0, 8008082 <_printf_i+0x1ea>
 800807e:	1b40      	subs	r0, r0, r5
 8008080:	6060      	str	r0, [r4, #4]
 8008082:	6863      	ldr	r3, [r4, #4]
 8008084:	6123      	str	r3, [r4, #16]
 8008086:	2300      	movs	r3, #0
 8008088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800808c:	e7aa      	b.n	8007fe4 <_printf_i+0x14c>
 800808e:	6923      	ldr	r3, [r4, #16]
 8008090:	462a      	mov	r2, r5
 8008092:	4649      	mov	r1, r9
 8008094:	4640      	mov	r0, r8
 8008096:	47d0      	blx	sl
 8008098:	3001      	adds	r0, #1
 800809a:	d0ad      	beq.n	8007ff8 <_printf_i+0x160>
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	079b      	lsls	r3, r3, #30
 80080a0:	d413      	bmi.n	80080ca <_printf_i+0x232>
 80080a2:	68e0      	ldr	r0, [r4, #12]
 80080a4:	9b03      	ldr	r3, [sp, #12]
 80080a6:	4298      	cmp	r0, r3
 80080a8:	bfb8      	it	lt
 80080aa:	4618      	movlt	r0, r3
 80080ac:	e7a6      	b.n	8007ffc <_printf_i+0x164>
 80080ae:	2301      	movs	r3, #1
 80080b0:	4632      	mov	r2, r6
 80080b2:	4649      	mov	r1, r9
 80080b4:	4640      	mov	r0, r8
 80080b6:	47d0      	blx	sl
 80080b8:	3001      	adds	r0, #1
 80080ba:	d09d      	beq.n	8007ff8 <_printf_i+0x160>
 80080bc:	3501      	adds	r5, #1
 80080be:	68e3      	ldr	r3, [r4, #12]
 80080c0:	9903      	ldr	r1, [sp, #12]
 80080c2:	1a5b      	subs	r3, r3, r1
 80080c4:	42ab      	cmp	r3, r5
 80080c6:	dcf2      	bgt.n	80080ae <_printf_i+0x216>
 80080c8:	e7eb      	b.n	80080a2 <_printf_i+0x20a>
 80080ca:	2500      	movs	r5, #0
 80080cc:	f104 0619 	add.w	r6, r4, #25
 80080d0:	e7f5      	b.n	80080be <_printf_i+0x226>
 80080d2:	bf00      	nop
 80080d4:	08008259 	.word	0x08008259
 80080d8:	0800826a 	.word	0x0800826a

080080dc <memmove>:
 80080dc:	4288      	cmp	r0, r1
 80080de:	b510      	push	{r4, lr}
 80080e0:	eb01 0402 	add.w	r4, r1, r2
 80080e4:	d902      	bls.n	80080ec <memmove+0x10>
 80080e6:	4284      	cmp	r4, r0
 80080e8:	4623      	mov	r3, r4
 80080ea:	d807      	bhi.n	80080fc <memmove+0x20>
 80080ec:	1e43      	subs	r3, r0, #1
 80080ee:	42a1      	cmp	r1, r4
 80080f0:	d008      	beq.n	8008104 <memmove+0x28>
 80080f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080fa:	e7f8      	b.n	80080ee <memmove+0x12>
 80080fc:	4402      	add	r2, r0
 80080fe:	4601      	mov	r1, r0
 8008100:	428a      	cmp	r2, r1
 8008102:	d100      	bne.n	8008106 <memmove+0x2a>
 8008104:	bd10      	pop	{r4, pc}
 8008106:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800810a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800810e:	e7f7      	b.n	8008100 <memmove+0x24>

08008110 <_sbrk_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	4d06      	ldr	r5, [pc, #24]	; (800812c <_sbrk_r+0x1c>)
 8008114:	2300      	movs	r3, #0
 8008116:	4604      	mov	r4, r0
 8008118:	4608      	mov	r0, r1
 800811a:	602b      	str	r3, [r5, #0]
 800811c:	f7f8 fdee 	bl	8000cfc <_sbrk>
 8008120:	1c43      	adds	r3, r0, #1
 8008122:	d102      	bne.n	800812a <_sbrk_r+0x1a>
 8008124:	682b      	ldr	r3, [r5, #0]
 8008126:	b103      	cbz	r3, 800812a <_sbrk_r+0x1a>
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	20001fc8 	.word	0x20001fc8

08008130 <memcpy>:
 8008130:	440a      	add	r2, r1
 8008132:	4291      	cmp	r1, r2
 8008134:	f100 33ff 	add.w	r3, r0, #4294967295
 8008138:	d100      	bne.n	800813c <memcpy+0xc>
 800813a:	4770      	bx	lr
 800813c:	b510      	push	{r4, lr}
 800813e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008142:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008146:	4291      	cmp	r1, r2
 8008148:	d1f9      	bne.n	800813e <memcpy+0xe>
 800814a:	bd10      	pop	{r4, pc}

0800814c <_realloc_r>:
 800814c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008150:	4680      	mov	r8, r0
 8008152:	4614      	mov	r4, r2
 8008154:	460e      	mov	r6, r1
 8008156:	b921      	cbnz	r1, 8008162 <_realloc_r+0x16>
 8008158:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800815c:	4611      	mov	r1, r2
 800815e:	f7ff bc49 	b.w	80079f4 <_malloc_r>
 8008162:	b92a      	cbnz	r2, 8008170 <_realloc_r+0x24>
 8008164:	f7ff fbda 	bl	800791c <_free_r>
 8008168:	4625      	mov	r5, r4
 800816a:	4628      	mov	r0, r5
 800816c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008170:	f000 f81b 	bl	80081aa <_malloc_usable_size_r>
 8008174:	4284      	cmp	r4, r0
 8008176:	4607      	mov	r7, r0
 8008178:	d802      	bhi.n	8008180 <_realloc_r+0x34>
 800817a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800817e:	d812      	bhi.n	80081a6 <_realloc_r+0x5a>
 8008180:	4621      	mov	r1, r4
 8008182:	4640      	mov	r0, r8
 8008184:	f7ff fc36 	bl	80079f4 <_malloc_r>
 8008188:	4605      	mov	r5, r0
 800818a:	2800      	cmp	r0, #0
 800818c:	d0ed      	beq.n	800816a <_realloc_r+0x1e>
 800818e:	42bc      	cmp	r4, r7
 8008190:	4622      	mov	r2, r4
 8008192:	4631      	mov	r1, r6
 8008194:	bf28      	it	cs
 8008196:	463a      	movcs	r2, r7
 8008198:	f7ff ffca 	bl	8008130 <memcpy>
 800819c:	4631      	mov	r1, r6
 800819e:	4640      	mov	r0, r8
 80081a0:	f7ff fbbc 	bl	800791c <_free_r>
 80081a4:	e7e1      	b.n	800816a <_realloc_r+0x1e>
 80081a6:	4635      	mov	r5, r6
 80081a8:	e7df      	b.n	800816a <_realloc_r+0x1e>

080081aa <_malloc_usable_size_r>:
 80081aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ae:	1f18      	subs	r0, r3, #4
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	bfbc      	itt	lt
 80081b4:	580b      	ldrlt	r3, [r1, r0]
 80081b6:	18c0      	addlt	r0, r0, r3
 80081b8:	4770      	bx	lr
	...

080081bc <_init>:
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081be:	bf00      	nop
 80081c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c2:	bc08      	pop	{r3}
 80081c4:	469e      	mov	lr, r3
 80081c6:	4770      	bx	lr

080081c8 <_fini>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	bf00      	nop
 80081cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ce:	bc08      	pop	{r3}
 80081d0:	469e      	mov	lr, r3
 80081d2:	4770      	bx	lr
