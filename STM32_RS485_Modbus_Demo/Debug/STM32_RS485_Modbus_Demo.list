
STM32_RS485_Modbus_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  0800a158  0800a158  0001a158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a430  0800a430  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800a430  0800a430  0001a430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a438  0800a438  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a438  0800a438  0001a438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a43c  0800a43c  0001a43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800a440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020150  2**0
                  CONTENTS
 10 .bss          000023bc  20000150  20000150  00020150  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000250c  2000250c  00020150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a13f  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004772  00000000  00000000  0003a302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001588  00000000  00000000  0003ea78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001079  00000000  00000000  00040000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026231  00000000  00000000  00041079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020b81  00000000  00000000  000672aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf23e  00000000  00000000  00087e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005cd4  00000000  00000000  0015706c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  0015cd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a140 	.word	0x0800a140

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	0800a140 	.word	0x0800a140

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PC3   ------> I2S2_SD
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08c      	sub	sp, #48	; 0x30
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
 8000586:	4b69      	ldr	r3, [pc, #420]	; (800072c <MX_GPIO_Init+0x1c0>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a68      	ldr	r2, [pc, #416]	; (800072c <MX_GPIO_Init+0x1c0>)
 800058c:	f043 0310 	orr.w	r3, r3, #16
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b66      	ldr	r3, [pc, #408]	; (800072c <MX_GPIO_Init+0x1c0>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0310 	and.w	r3, r3, #16
 800059a:	61bb      	str	r3, [r7, #24]
 800059c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
 80005a2:	4b62      	ldr	r3, [pc, #392]	; (800072c <MX_GPIO_Init+0x1c0>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a61      	ldr	r2, [pc, #388]	; (800072c <MX_GPIO_Init+0x1c0>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b5f      	ldr	r3, [pc, #380]	; (800072c <MX_GPIO_Init+0x1c0>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	617b      	str	r3, [r7, #20]
 80005b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	4b5b      	ldr	r3, [pc, #364]	; (800072c <MX_GPIO_Init+0x1c0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a5a      	ldr	r2, [pc, #360]	; (800072c <MX_GPIO_Init+0x1c0>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b58      	ldr	r3, [pc, #352]	; (800072c <MX_GPIO_Init+0x1c0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	4b54      	ldr	r3, [pc, #336]	; (800072c <MX_GPIO_Init+0x1c0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a53      	ldr	r2, [pc, #332]	; (800072c <MX_GPIO_Init+0x1c0>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b51      	ldr	r3, [pc, #324]	; (800072c <MX_GPIO_Init+0x1c0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	4b4d      	ldr	r3, [pc, #308]	; (800072c <MX_GPIO_Init+0x1c0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a4c      	ldr	r2, [pc, #304]	; (800072c <MX_GPIO_Init+0x1c0>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b4a      	ldr	r3, [pc, #296]	; (800072c <MX_GPIO_Init+0x1c0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b46      	ldr	r3, [pc, #280]	; (800072c <MX_GPIO_Init+0x1c0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a45      	ldr	r2, [pc, #276]	; (800072c <MX_GPIO_Init+0x1c0>)
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b43      	ldr	r3, [pc, #268]	; (800072c <MX_GPIO_Init+0x1c0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0308 	and.w	r3, r3, #8
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2108      	movs	r1, #8
 800062e:	4840      	ldr	r0, [pc, #256]	; (8000730 <MX_GPIO_Init+0x1c4>)
 8000630:	f001 f8b4 	bl	800179c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2101      	movs	r1, #1
 8000638:	483e      	ldr	r0, [pc, #248]	; (8000734 <MX_GPIO_Init+0x1c8>)
 800063a:	f001 f8af 	bl	800179c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800063e:	2200      	movs	r2, #0
 8000640:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000644:	483c      	ldr	r0, [pc, #240]	; (8000738 <MX_GPIO_Init+0x1cc>)
 8000646:	f001 f8a9 	bl	800179c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800064a:	2308      	movs	r3, #8
 800064c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	4619      	mov	r1, r3
 8000660:	4833      	ldr	r0, [pc, #204]	; (8000730 <MX_GPIO_Init+0x1c4>)
 8000662:	f000 fee7 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000666:	2301      	movs	r3, #1
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2300      	movs	r3, #0
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	4619      	mov	r1, r3
 800067c:	482d      	ldr	r0, [pc, #180]	; (8000734 <MX_GPIO_Init+0x1c8>)
 800067e:	f000 fed9 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000682:	2308      	movs	r3, #8
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000686:	2302      	movs	r3, #2
 8000688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000692:	2305      	movs	r3, #5
 8000694:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4619      	mov	r1, r3
 800069c:	4825      	ldr	r0, [pc, #148]	; (8000734 <MX_GPIO_Init+0x1c8>)
 800069e:	f000 fec9 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4619      	mov	r1, r3
 80006b6:	4821      	ldr	r0, [pc, #132]	; (800073c <MX_GPIO_Init+0x1d0>)
 80006b8:	f000 febc 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006bc:	2304      	movs	r3, #4
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	481c      	ldr	r0, [pc, #112]	; (8000740 <MX_GPIO_Init+0x1d4>)
 80006d0:	f000 feb0 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006d4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006d8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	4812      	ldr	r0, [pc, #72]	; (8000738 <MX_GPIO_Init+0x1cc>)
 80006ee:	f000 fea1 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006f2:	2320      	movs	r3, #32
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	4619      	mov	r1, r3
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <MX_GPIO_Init+0x1cc>)
 8000706:	f000 fe95 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800070a:	2302      	movs	r3, #2
 800070c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800070e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000712:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_GPIO_Init+0x1c4>)
 8000720:	f000 fe88 	bl	8001434 <HAL_GPIO_Init>

}
 8000724:	bf00      	nop
 8000726:	3730      	adds	r7, #48	; 0x30
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40021000 	.word	0x40021000
 8000734:	40020800 	.word	0x40020800
 8000738:	40020c00 	.word	0x40020c00
 800073c:	40020000 	.word	0x40020000
 8000740:	40020400 	.word	0x40020400

08000744 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_I2C1_Init+0x50>)
 800074a:	4a13      	ldr	r2, [pc, #76]	; (8000798 <MX_I2C1_Init+0x54>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_I2C1_Init+0x50>)
 8000750:	4a12      	ldr	r2, [pc, #72]	; (800079c <MX_I2C1_Init+0x58>)
 8000752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_I2C1_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_I2C1_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_I2C1_Init+0x50>)
 8000762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000766:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_I2C1_Init+0x50>)
 8000782:	f001 f83f 	bl	8001804 <HAL_I2C_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800078c:	f000 fa42 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000016c 	.word	0x2000016c
 8000798:	40005400 	.word	0x40005400
 800079c:	000186a0 	.word	0x000186a0

080007a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	; 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a19      	ldr	r2, [pc, #100]	; (8000824 <HAL_I2C_MspInit+0x84>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d12c      	bne.n	800081c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b18      	ldr	r3, [pc, #96]	; (8000828 <HAL_I2C_MspInit+0x88>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a17      	ldr	r2, [pc, #92]	; (8000828 <HAL_I2C_MspInit+0x88>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_I2C_MspInit+0x88>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007de:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007e4:	2312      	movs	r3, #18
 80007e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007f0:	2304      	movs	r3, #4
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	480c      	ldr	r0, [pc, #48]	; (800082c <HAL_I2C_MspInit+0x8c>)
 80007fc:	f000 fe1a 	bl	8001434 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_I2C_MspInit+0x88>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_I2C_MspInit+0x88>)
 800080a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800080e:	6413      	str	r3, [r2, #64]	; 0x40
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_I2C_MspInit+0x88>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	; 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40005400 	.word	0x40005400
 8000828:	40023800 	.word	0x40023800
 800082c:	40020400 	.word	0x40020400

08000830 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_I2S3_Init+0x54>)
 8000836:	4a14      	ldr	r2, [pc, #80]	; (8000888 <MX_I2S3_Init+0x58>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_I2S3_Init+0x54>)
 800083c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000840:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_I2S3_Init+0x54>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_I2S3_Init+0x54>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <MX_I2S3_Init+0x54>)
 8000850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000854:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_I2S3_Init+0x54>)
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <MX_I2S3_Init+0x5c>)
 800085a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_I2S3_Init+0x54>)
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_I2S3_Init+0x54>)
 8000864:	2200      	movs	r2, #0
 8000866:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_I2S3_Init+0x54>)
 800086a:	2200      	movs	r2, #0
 800086c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_I2S3_Init+0x54>)
 8000870:	f001 f90c 	bl	8001a8c <HAL_I2S_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800087a:	f000 f9cb 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200001c0 	.word	0x200001c0
 8000888:	40003c00 	.word	0x40003c00
 800088c:	00017700 	.word	0x00017700

08000890 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08e      	sub	sp, #56	; 0x38
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a31      	ldr	r2, [pc, #196]	; (8000980 <HAL_I2S_MspInit+0xf0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d15a      	bne.n	8000976 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008c0:	2301      	movs	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008c4:	23c0      	movs	r3, #192	; 0xc0
 80008c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4618      	mov	r0, r3
 80008d2:	f003 fc91 	bl	80041f8 <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80008dc:	f000 f99a 	bl	8000c14 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	4b27      	ldr	r3, [pc, #156]	; (8000984 <HAL_I2S_MspInit+0xf4>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	4a26      	ldr	r2, [pc, #152]	; (8000984 <HAL_I2S_MspInit+0xf4>)
 80008ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008ee:	6413      	str	r3, [r2, #64]	; 0x40
 80008f0:	4b24      	ldr	r3, [pc, #144]	; (8000984 <HAL_I2S_MspInit+0xf4>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	4b20      	ldr	r3, [pc, #128]	; (8000984 <HAL_I2S_MspInit+0xf4>)
 8000902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000904:	4a1f      	ldr	r2, [pc, #124]	; (8000984 <HAL_I2S_MspInit+0xf4>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	6313      	str	r3, [r2, #48]	; 0x30
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <HAL_I2S_MspInit+0xf4>)
 800090e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	4b19      	ldr	r3, [pc, #100]	; (8000984 <HAL_I2S_MspInit+0xf4>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000920:	4a18      	ldr	r2, [pc, #96]	; (8000984 <HAL_I2S_MspInit+0xf4>)
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	6313      	str	r3, [r2, #48]	; 0x30
 8000928:	4b16      	ldr	r3, [pc, #88]	; (8000984 <HAL_I2S_MspInit+0xf4>)
 800092a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092c:	f003 0304 	and.w	r3, r3, #4
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000934:	2310      	movs	r3, #16
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000944:	2306      	movs	r3, #6
 8000946:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800094c:	4619      	mov	r1, r3
 800094e:	480e      	ldr	r0, [pc, #56]	; (8000988 <HAL_I2S_MspInit+0xf8>)
 8000950:	f000 fd70 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000954:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000966:	2306      	movs	r3, #6
 8000968:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	4619      	mov	r1, r3
 8000970:	4806      	ldr	r0, [pc, #24]	; (800098c <HAL_I2S_MspInit+0xfc>)
 8000972:	f000 fd5f 	bl	8001434 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000976:	bf00      	nop
 8000978:	3738      	adds	r7, #56	; 0x38
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40003c00 	.word	0x40003c00
 8000984:	40023800 	.word	0x40023800
 8000988:	40020000 	.word	0x40020000
 800098c:	40020800 	.word	0x40020800

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000992:	b089      	sub	sp, #36	; 0x24
 8000994:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	uint32_t lastRun = 0U;
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099a:	f000 fb11 	bl	8000fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099e:	f000 f8cf 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a2:	f7ff fde3 	bl	800056c <MX_GPIO_Init>
  MX_I2C1_Init();
 80009a6:	f7ff fecd 	bl	8000744 <MX_I2C1_Init>
  MX_I2S3_Init();
 80009aa:	f7ff ff41 	bl	8000830 <MX_I2S3_Init>
  MX_SPI1_Init();
 80009ae:	f000 f937 	bl	8000c20 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80009b2:	f008 f9cf 	bl	8008d54 <MX_USB_DEVICE_Init>
  MX_USART3_UART_Init();
 80009b6:	f000 fa5f 	bl	8000e78 <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 nowTime = HAL_GetTick();
 80009ba:	f000 fb67 	bl	800108c <HAL_GetTick>
 80009be:	6038      	str	r0, [r7, #0]

	 if ((nowTime - lastRun) >= 1000) {
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009ca:	d33f      	bcc.n	8000a4c <main+0xbc>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80009cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d0:	484c      	ldr	r0, [pc, #304]	; (8000b04 <main+0x174>)
 80009d2:	f000 fefc 	bl	80017ce <HAL_GPIO_TogglePin>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80009d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009da:	484a      	ldr	r0, [pc, #296]	; (8000b04 <main+0x174>)
 80009dc:	f000 fef7 	bl	80017ce <HAL_GPIO_TogglePin>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80009e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e4:	4847      	ldr	r0, [pc, #284]	; (8000b04 <main+0x174>)
 80009e6:	f000 fef2 	bl	80017ce <HAL_GPIO_TogglePin>

		 MB_MasterState=MBUS_REQSENT;
 80009ea:	4b47      	ldr	r3, [pc, #284]	; (8000b08 <main+0x178>)
 80009ec:	2202      	movs	r2, #2
 80009ee:	701a      	strb	r2, [r3, #0]
//		 ---   Slave ID=1, Write state 511 of 1 analog output register on addresses 0-15
//		  errorCode = eMBMasterReqWriteHoldingRegister(1,MBCnt,511,1);
//		  MBCnt= (MBCnt + 1) % 16;

//		 ---   Slave ID=1, Write state 511 of 1 analog output register on addresses 0-15
		 usModbusUserData[0]= usModbusUserData[1]= usModbusUserData[2]= usModbusUserData[3]=MBCnt;
 80009f0:	4b46      	ldr	r3, [pc, #280]	; (8000b0c <main+0x17c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	4b46      	ldr	r3, [pc, #280]	; (8000b10 <main+0x180>)
 80009f8:	80da      	strh	r2, [r3, #6]
 80009fa:	4b45      	ldr	r3, [pc, #276]	; (8000b10 <main+0x180>)
 80009fc:	88da      	ldrh	r2, [r3, #6]
 80009fe:	4b44      	ldr	r3, [pc, #272]	; (8000b10 <main+0x180>)
 8000a00:	809a      	strh	r2, [r3, #4]
 8000a02:	4b43      	ldr	r3, [pc, #268]	; (8000b10 <main+0x180>)
 8000a04:	889a      	ldrh	r2, [r3, #4]
 8000a06:	4b42      	ldr	r3, [pc, #264]	; (8000b10 <main+0x180>)
 8000a08:	805a      	strh	r2, [r3, #2]
 8000a0a:	4b41      	ldr	r3, [pc, #260]	; (8000b10 <main+0x180>)
 8000a0c:	885a      	ldrh	r2, [r3, #2]
 8000a0e:	4b40      	ldr	r3, [pc, #256]	; (8000b10 <main+0x180>)
 8000a10:	801a      	strh	r2, [r3, #0]
		 errorCode = eMBMasterReqWriteMultipleHoldingRegister(1,MBCnt,2,usModbusUserData,1);
 8000a12:	4b3e      	ldr	r3, [pc, #248]	; (8000b0c <main+0x17c>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b299      	uxth	r1, r3
 8000a18:	2301      	movs	r3, #1
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	4b3c      	ldr	r3, [pc, #240]	; (8000b10 <main+0x180>)
 8000a1e:	2202      	movs	r2, #2
 8000a20:	2001      	movs	r0, #1
 8000a22:	f006 f913 	bl	8006c4c <eMBMasterReqWriteMultipleHoldingRegister>
 8000a26:	4603      	mov	r3, r0
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b3a      	ldr	r3, [pc, #232]	; (8000b14 <main+0x184>)
 8000a2c:	701a      	strb	r2, [r3, #0]
		 MBCnt= (MBCnt + 1) % 16;
 8000a2e:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <main+0x17c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	3301      	adds	r3, #1
 8000a34:	425a      	negs	r2, r3
 8000a36:	f003 030f 	and.w	r3, r3, #15
 8000a3a:	f002 020f 	and.w	r2, r2, #15
 8000a3e:	bf58      	it	pl
 8000a40:	4253      	negpl	r3, r2
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <main+0x17c>)
 8000a46:	701a      	strb	r2, [r3, #0]
		 //       UNChecked tests - TODO
		 // -------------------------------------

		 //		errorCode = eMBMasterReqReadWriteMultipleHoldingRegister(1,3,2,usModbusUserData,5,2,WAIT_FOREVER);

	     lastRun = nowTime;
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	607b      	str	r3, [r7, #4]
	 }


	 KeyState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4832      	ldr	r0, [pc, #200]	; (8000b18 <main+0x188>)
 8000a50:	f000 fe8c 	bl	800176c <HAL_GPIO_ReadPin>
 8000a54:	4603      	mov	r3, r0
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <main+0x18c>)
 8000a5a:	601a      	str	r2, [r3, #0]
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, KeyState);
 8000a5c:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <main+0x18c>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	461a      	mov	r2, r3
 8000a64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a68:	4826      	ldr	r0, [pc, #152]	; (8000b04 <main+0x174>)
 8000a6a:	f000 fe97 	bl	800179c <HAL_GPIO_WritePin>


      // Receive over USB Virtual ComPort
	  if (RXbufferStrLen > 0) {
 8000a6e:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <main+0x190>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0a0      	beq.n	80009ba <main+0x2a>

		  if ((RXbuffer[0] == MBbuffer[0]) && (RXbuffer[1] == MBbuffer[1]) ) {
 8000a78:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <main+0x194>)
 8000a7a:	781a      	ldrb	r2, [r3, #0]
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <main+0x198>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d10c      	bne.n	8000a9e <main+0x10e>
 8000a84:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <main+0x194>)
 8000a86:	785a      	ldrb	r2, [r3, #1]
 8000a88:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <main+0x198>)
 8000a8a:	785b      	ldrb	r3, [r3, #1]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d106      	bne.n	8000a9e <main+0x10e>
			  succCount++;
 8000a90:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <main+0x19c>)
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	3301      	adds	r3, #1
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <main+0x19c>)
 8000a9a:	801a      	strh	r2, [r3, #0]
 8000a9c:	e009      	b.n	8000ab2 <main+0x122>
		  } else {
			  errorCount++;
 8000a9e:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <main+0x1a0>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <main+0x1a0>)
 8000aa8:	801a      	strh	r2, [r3, #0]
			  MBErrorCode = RXbuffer[2];
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <main+0x194>)
 8000aac:	789a      	ldrb	r2, [r3, #2]
 8000aae:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <main+0x1a4>)
 8000ab0:	701a      	strb	r2, [r3, #0]
		  }

		  snprintf(SendBuffer,BUFSIZE,"Modbus Msg Received: Addr:%d FC:%02x Bytes:%d | %02x %02x %04x\r\n\0",RXbuffer[0],RXbuffer[1],RXbuffer[2],RXbuffer[3],RXbuffer[4],RXbuffer[3]*256+RXbuffer[4]);
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <main+0x194>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	461e      	mov	r6, r3
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <main+0x194>)
 8000aba:	785b      	ldrb	r3, [r3, #1]
 8000abc:	4619      	mov	r1, r3
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <main+0x194>)
 8000ac0:	789b      	ldrb	r3, [r3, #2]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <main+0x194>)
 8000ac6:	78db      	ldrb	r3, [r3, #3]
 8000ac8:	461c      	mov	r4, r3
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <main+0x194>)
 8000acc:	791b      	ldrb	r3, [r3, #4]
 8000ace:	461d      	mov	r5, r3
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <main+0x194>)
 8000ad2:	78db      	ldrb	r3, [r3, #3]
 8000ad4:	021b      	lsls	r3, r3, #8
 8000ad6:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <main+0x194>)
 8000ad8:	7912      	ldrb	r2, [r2, #4]
 8000ada:	4413      	add	r3, r2
 8000adc:	9304      	str	r3, [sp, #16]
 8000ade:	9503      	str	r5, [sp, #12]
 8000ae0:	9402      	str	r4, [sp, #8]
 8000ae2:	9001      	str	r0, [sp, #4]
 8000ae4:	9100      	str	r1, [sp, #0]
 8000ae6:	4633      	mov	r3, r6
 8000ae8:	4a13      	ldr	r2, [pc, #76]	; (8000b38 <main+0x1a8>)
 8000aea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aee:	4813      	ldr	r0, [pc, #76]	; (8000b3c <main+0x1ac>)
 8000af0:	f008 fe6e 	bl	80097d0 <sniprintf>
          // Not sending on USB not to interfere with MODBUS communication !

		  MB_MasterState=MBUS_READY;
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <main+0x178>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
		  RXbufferStrLen = 0;
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <main+0x190>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
	 nowTime = HAL_GetTick();
 8000b00:	e75b      	b.n	80009ba <main+0x2a>
 8000b02:	bf00      	nop
 8000b04:	40020c00 	.word	0x40020c00
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000510 	.word	0x20000510
 8000b10:	20000518 	.word	0x20000518
 8000b14:	20000511 	.word	0x20000511
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	20000308 	.word	0x20000308
 8000b20:	2000040c 	.word	0x2000040c
 8000b24:	2000030c 	.word	0x2000030c
 8000b28:	20000410 	.word	0x20000410
 8000b2c:	20000514 	.word	0x20000514
 8000b30:	20000512 	.word	0x20000512
 8000b34:	20000516 	.word	0x20000516
 8000b38:	0800a158 	.word	0x0800a158
 8000b3c:	20000208 	.word	0x20000208

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b094      	sub	sp, #80	; 0x50
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0320 	add.w	r3, r7, #32
 8000b4a:	2230      	movs	r2, #48	; 0x30
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f008 fe72 	bl	8009838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <SystemClock_Config+0xcc>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a27      	ldr	r2, [pc, #156]	; (8000c0c <SystemClock_Config+0xcc>)
 8000b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <SystemClock_Config+0xcc>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b80:	2300      	movs	r3, #0
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <SystemClock_Config+0xd0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a21      	ldr	r2, [pc, #132]	; (8000c10 <SystemClock_Config+0xd0>)
 8000b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <SystemClock_Config+0xd0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000baa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bb4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bb8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bbe:	2307      	movs	r3, #7
 8000bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc2:	f107 0320 	add.w	r3, r7, #32
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 fe7e 	bl	80038c8 <HAL_RCC_OscConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bd2:	f000 f81f 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd6:	230f      	movs	r3, #15
 8000bd8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000be2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000be6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	2105      	movs	r1, #5
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 f8df 	bl	8003db8 <HAL_RCC_ClockConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c00:	f000 f808 	bl	8000c14 <Error_Handler>
  }
}
 8000c04:	bf00      	nop
 8000c06:	3750      	adds	r7, #80	; 0x50
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40007000 	.word	0x40007000

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>
	...

08000c20 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c26:	4a18      	ldr	r2, [pc, #96]	; (8000c88 <MX_SPI1_Init+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c6c:	220a      	movs	r2, #10
 8000c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c72:	f003 fc01 	bl	8004478 <HAL_SPI_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c7c:	f7ff ffca 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000714 	.word	0x20000714
 8000c88:	40013000 	.word	0x40013000

08000c8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a19      	ldr	r2, [pc, #100]	; (8000d10 <HAL_SPI_MspInit+0x84>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d12b      	bne.n	8000d06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <HAL_SPI_MspInit+0x88>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a17      	ldr	r2, [pc, #92]	; (8000d14 <HAL_SPI_MspInit+0x88>)
 8000cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_SPI_MspInit+0x88>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_SPI_MspInit+0x88>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <HAL_SPI_MspInit+0x88>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_SPI_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ce6:	23e0      	movs	r3, #224	; 0xe0
 8000ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	; (8000d18 <HAL_SPI_MspInit+0x8c>)
 8000d02:	f000 fb97 	bl	8001434 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d06:	bf00      	nop
 8000d08:	3728      	adds	r7, #40	; 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40013000 	.word	0x40013000
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020000 	.word	0x40020000

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5a:	2007      	movs	r0, #7
 8000d5c:	f000 fa96 	bl	800128c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f954 	bl	8001064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <USART3_IRQHandler+0x10>)
 8000dc6:	f003 fc2d 	bl	8004624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000770 	.word	0x20000770

08000dd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <OTG_FS_IRQHandler+0x10>)
 8000dda:	f001 fc47 	bl	800266c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20001c98 	.word	0x20001c98

08000de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df0:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <_sbrk+0x5c>)
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <_sbrk+0x60>)
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <_sbrk+0x64>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <_sbrk+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0a:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d207      	bcs.n	8000e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e18:	f008 fd16 	bl	8009848 <__errno>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	220c      	movs	r2, #12
 8000e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	e009      	b.n	8000e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2e:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <_sbrk+0x64>)
 8000e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20020000 	.word	0x20020000
 8000e48:	00000400 	.word	0x00000400
 8000e4c:	2000076c 	.word	0x2000076c
 8000e50:	20002510 	.word	0x20002510

08000e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <SystemInit+0x20>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <SystemInit+0x20>)
 8000e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_USART3_UART_Init+0x4c>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <MX_USART3_UART_Init+0x50>)
 8000e80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <MX_USART3_UART_Init+0x4c>)
 8000e84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_USART3_UART_Init+0x4c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_USART3_UART_Init+0x4c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <MX_USART3_UART_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_USART3_UART_Init+0x4c>)
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <MX_USART3_UART_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_USART3_UART_Init+0x4c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_USART3_UART_Init+0x4c>)
 8000eb0:	f003 fb6b 	bl	800458a <HAL_UART_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000eba:	f7ff feab 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000770 	.word	0x20000770
 8000ec8:	40004800 	.word	0x40004800

08000ecc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a1d      	ldr	r2, [pc, #116]	; (8000f60 <HAL_UART_MspInit+0x94>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d134      	bne.n	8000f58 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <HAL_UART_MspInit+0x98>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	4a1b      	ldr	r2, [pc, #108]	; (8000f64 <HAL_UART_MspInit+0x98>)
 8000ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efc:	6413      	str	r3, [r2, #64]	; 0x40
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <HAL_UART_MspInit+0x98>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_UART_MspInit+0x98>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <HAL_UART_MspInit+0x98>)
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_UART_MspInit+0x98>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f26:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f38:	2307      	movs	r3, #7
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	4619      	mov	r1, r3
 8000f42:	4809      	ldr	r0, [pc, #36]	; (8000f68 <HAL_UART_MspInit+0x9c>)
 8000f44:	f000 fa76 	bl	8001434 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2027      	movs	r0, #39	; 0x27
 8000f4e:	f000 f9a8 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f52:	2027      	movs	r0, #39	; 0x27
 8000f54:	f000 f9c1 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f58:	bf00      	nop
 8000f5a:	3728      	adds	r7, #40	; 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40004800 	.word	0x40004800
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020400 	.word	0x40020400

08000f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f72:	490e      	ldr	r1, [pc, #56]	; (8000fac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f88:	4c0b      	ldr	r4, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f96:	f7ff ff5d 	bl	8000e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f008 fc5b 	bl	8009854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9e:	f7ff fcf7 	bl	8000990 <main>
  bx  lr    
 8000fa2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8000fb0:	0800a440 	.word	0x0800a440
  ldr r2, =_sbss
 8000fb4:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000fb8:	2000250c 	.word	0x2000250c

08000fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC_IRQHandler>
	...

08000fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <HAL_Init+0x40>)
 8000fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <HAL_Init+0x40>)
 8000fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a07      	ldr	r2, [pc, #28]	; (8001000 <HAL_Init+0x40>)
 8000fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f94f 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f000 f808 	bl	8001004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff4:	f7ff fe92 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023c00 	.word	0x40023c00

08001004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_InitTick+0x54>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_InitTick+0x58>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101a:	fbb3 f3f1 	udiv	r3, r3, r1
 800101e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f967 	bl	80012f6 <HAL_SYSTICK_Config>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e00e      	b.n	8001050 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	d80a      	bhi.n	800104e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001038:	2200      	movs	r2, #0
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f000 f92f 	bl	80012a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001044:	4a06      	ldr	r2, [pc, #24]	; (8001060 <HAL_InitTick+0x5c>)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
 800104c:	e000      	b.n	8001050 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000004 	.word	0x20000004
 800105c:	2000000c 	.word	0x2000000c
 8001060:	20000008 	.word	0x20000008

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_IncTick+0x20>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_IncTick+0x24>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a04      	ldr	r2, [pc, #16]	; (8001088 <HAL_IncTick+0x24>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	2000000c 	.word	0x2000000c
 8001088:	200007b4 	.word	0x200007b4

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <HAL_GetTick+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	200007b4 	.word	0x200007b4

080010a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff ffee 	bl	800108c <HAL_GetTick>
 80010b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010bc:	d005      	beq.n	80010ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_Delay+0x44>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ca:	bf00      	nop
 80010cc:	f7ff ffde 	bl	800108c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d8f7      	bhi.n	80010cc <HAL_Delay+0x28>
  {
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000000c 	.word	0x2000000c

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800111c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4907      	ldr	r1, [pc, #28]	; (8001188 <__NVIC_EnableIRQ+0x38>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	; (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	; (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f7ff ff8e 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff29 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b4:	f7ff ff3e 	bl	8001134 <__NVIC_GetPriorityGrouping>
 80012b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	68b9      	ldr	r1, [r7, #8]
 80012be:	6978      	ldr	r0, [r7, #20]
 80012c0:	f7ff ff8e 	bl	80011e0 <NVIC_EncodePriority>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff5d 	bl	800118c <__NVIC_SetPriority>
}
 80012d2:	bf00      	nop
 80012d4:	3718      	adds	r7, #24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff31 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffa2 	bl	8001248 <SysTick_Config>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b084      	sub	sp, #16
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800131c:	f7ff feb6 	bl	800108c <HAL_GetTick>
 8001320:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d008      	beq.n	8001340 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2280      	movs	r2, #128	; 0x80
 8001332:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e052      	b.n	80013e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0216 	bic.w	r2, r2, #22
 800134e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800135e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	2b00      	cmp	r3, #0
 8001366:	d103      	bne.n	8001370 <HAL_DMA_Abort+0x62>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136c:	2b00      	cmp	r3, #0
 800136e:	d007      	beq.n	8001380 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0208 	bic.w	r2, r2, #8
 800137e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0201 	bic.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001390:	e013      	b.n	80013ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001392:	f7ff fe7b 	bl	800108c <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b05      	cmp	r3, #5
 800139e:	d90c      	bls.n	80013ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2220      	movs	r2, #32
 80013a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2203      	movs	r2, #3
 80013aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e015      	b.n	80013e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1e4      	bne.n	8001392 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013cc:	223f      	movs	r2, #63	; 0x3f
 80013ce:	409a      	lsls	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d004      	beq.n	800140c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2280      	movs	r2, #128	; 0x80
 8001406:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e00c      	b.n	8001426 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2205      	movs	r2, #5
 8001410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0201 	bic.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	e16b      	b.n	8001728 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001450:	2201      	movs	r2, #1
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	429a      	cmp	r2, r3
 800146a:	f040 815a 	bne.w	8001722 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b01      	cmp	r3, #1
 8001478:	d005      	beq.n	8001486 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001482:	2b02      	cmp	r3, #2
 8001484:	d130      	bne.n	80014e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	2203      	movs	r2, #3
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	68da      	ldr	r2, [r3, #12]
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014bc:	2201      	movs	r2, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	f003 0201 	and.w	r2, r3, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d017      	beq.n	8001524 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2203      	movs	r2, #3
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d123      	bne.n	8001578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	08da      	lsrs	r2, r3, #3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3208      	adds	r2, #8
 8001538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	220f      	movs	r2, #15
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	08da      	lsrs	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3208      	adds	r2, #8
 8001572:	69b9      	ldr	r1, [r7, #24]
 8001574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0203 	and.w	r2, r3, #3
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80b4 	beq.w	8001722 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b60      	ldr	r3, [pc, #384]	; (8001740 <HAL_GPIO_Init+0x30c>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a5f      	ldr	r2, [pc, #380]	; (8001740 <HAL_GPIO_Init+0x30c>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b5d      	ldr	r3, [pc, #372]	; (8001740 <HAL_GPIO_Init+0x30c>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d6:	4a5b      	ldr	r2, [pc, #364]	; (8001744 <HAL_GPIO_Init+0x310>)
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3302      	adds	r3, #2
 80015de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	220f      	movs	r2, #15
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a52      	ldr	r2, [pc, #328]	; (8001748 <HAL_GPIO_Init+0x314>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d02b      	beq.n	800165a <HAL_GPIO_Init+0x226>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a51      	ldr	r2, [pc, #324]	; (800174c <HAL_GPIO_Init+0x318>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d025      	beq.n	8001656 <HAL_GPIO_Init+0x222>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a50      	ldr	r2, [pc, #320]	; (8001750 <HAL_GPIO_Init+0x31c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d01f      	beq.n	8001652 <HAL_GPIO_Init+0x21e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4f      	ldr	r2, [pc, #316]	; (8001754 <HAL_GPIO_Init+0x320>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d019      	beq.n	800164e <HAL_GPIO_Init+0x21a>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4e      	ldr	r2, [pc, #312]	; (8001758 <HAL_GPIO_Init+0x324>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d013      	beq.n	800164a <HAL_GPIO_Init+0x216>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4d      	ldr	r2, [pc, #308]	; (800175c <HAL_GPIO_Init+0x328>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d00d      	beq.n	8001646 <HAL_GPIO_Init+0x212>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a4c      	ldr	r2, [pc, #304]	; (8001760 <HAL_GPIO_Init+0x32c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d007      	beq.n	8001642 <HAL_GPIO_Init+0x20e>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a4b      	ldr	r2, [pc, #300]	; (8001764 <HAL_GPIO_Init+0x330>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d101      	bne.n	800163e <HAL_GPIO_Init+0x20a>
 800163a:	2307      	movs	r3, #7
 800163c:	e00e      	b.n	800165c <HAL_GPIO_Init+0x228>
 800163e:	2308      	movs	r3, #8
 8001640:	e00c      	b.n	800165c <HAL_GPIO_Init+0x228>
 8001642:	2306      	movs	r3, #6
 8001644:	e00a      	b.n	800165c <HAL_GPIO_Init+0x228>
 8001646:	2305      	movs	r3, #5
 8001648:	e008      	b.n	800165c <HAL_GPIO_Init+0x228>
 800164a:	2304      	movs	r3, #4
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x228>
 800164e:	2303      	movs	r3, #3
 8001650:	e004      	b.n	800165c <HAL_GPIO_Init+0x228>
 8001652:	2302      	movs	r3, #2
 8001654:	e002      	b.n	800165c <HAL_GPIO_Init+0x228>
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <HAL_GPIO_Init+0x228>
 800165a:	2300      	movs	r3, #0
 800165c:	69fa      	ldr	r2, [r7, #28]
 800165e:	f002 0203 	and.w	r2, r2, #3
 8001662:	0092      	lsls	r2, r2, #2
 8001664:	4093      	lsls	r3, r2
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800166c:	4935      	ldr	r1, [pc, #212]	; (8001744 <HAL_GPIO_Init+0x310>)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	089b      	lsrs	r3, r3, #2
 8001672:	3302      	adds	r3, #2
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800167a:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <HAL_GPIO_Init+0x334>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800169e:	4a32      	ldr	r2, [pc, #200]	; (8001768 <HAL_GPIO_Init+0x334>)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a4:	4b30      	ldr	r3, [pc, #192]	; (8001768 <HAL_GPIO_Init+0x334>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016c8:	4a27      	ldr	r2, [pc, #156]	; (8001768 <HAL_GPIO_Init+0x334>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ce:	4b26      	ldr	r3, [pc, #152]	; (8001768 <HAL_GPIO_Init+0x334>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016f2:	4a1d      	ldr	r2, [pc, #116]	; (8001768 <HAL_GPIO_Init+0x334>)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <HAL_GPIO_Init+0x334>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800171c:	4a12      	ldr	r2, [pc, #72]	; (8001768 <HAL_GPIO_Init+0x334>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3301      	adds	r3, #1
 8001726:	61fb      	str	r3, [r7, #28]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	2b0f      	cmp	r3, #15
 800172c:	f67f ae90 	bls.w	8001450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	40013800 	.word	0x40013800
 8001748:	40020000 	.word	0x40020000
 800174c:	40020400 	.word	0x40020400
 8001750:	40020800 	.word	0x40020800
 8001754:	40020c00 	.word	0x40020c00
 8001758:	40021000 	.word	0x40021000
 800175c:	40021400 	.word	0x40021400
 8001760:	40021800 	.word	0x40021800
 8001764:	40021c00 	.word	0x40021c00
 8001768:	40013c00 	.word	0x40013c00

0800176c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	887b      	ldrh	r3, [r7, #2]
 800177e:	4013      	ands	r3, r2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001784:	2301      	movs	r3, #1
 8001786:	73fb      	strb	r3, [r7, #15]
 8001788:	e001      	b.n	800178e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800178a:	2300      	movs	r3, #0
 800178c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	807b      	strh	r3, [r7, #2]
 80017a8:	4613      	mov	r3, r2
 80017aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017ac:	787b      	ldrb	r3, [r7, #1]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b2:	887a      	ldrh	r2, [r7, #2]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017b8:	e003      	b.n	80017c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017ba:	887b      	ldrh	r3, [r7, #2]
 80017bc:	041a      	lsls	r2, r3, #16
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	619a      	str	r2, [r3, #24]
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b085      	sub	sp, #20
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	460b      	mov	r3, r1
 80017d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017e0:	887a      	ldrh	r2, [r7, #2]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4013      	ands	r3, r2
 80017e6:	041a      	lsls	r2, r3, #16
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	887b      	ldrh	r3, [r7, #2]
 80017ee:	400b      	ands	r3, r1
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	619a      	str	r2, [r3, #24]
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e12b      	b.n	8001a6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d106      	bne.n	8001830 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7fe ffb8 	bl	80007a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2224      	movs	r2, #36	; 0x24
 8001834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f022 0201 	bic.w	r2, r2, #1
 8001846:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001856:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001866:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001868:	f002 fc9e 	bl	80041a8 <HAL_RCC_GetPCLK1Freq>
 800186c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4a81      	ldr	r2, [pc, #516]	; (8001a78 <HAL_I2C_Init+0x274>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d807      	bhi.n	8001888 <HAL_I2C_Init+0x84>
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4a80      	ldr	r2, [pc, #512]	; (8001a7c <HAL_I2C_Init+0x278>)
 800187c:	4293      	cmp	r3, r2
 800187e:	bf94      	ite	ls
 8001880:	2301      	movls	r3, #1
 8001882:	2300      	movhi	r3, #0
 8001884:	b2db      	uxtb	r3, r3
 8001886:	e006      	b.n	8001896 <HAL_I2C_Init+0x92>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4a7d      	ldr	r2, [pc, #500]	; (8001a80 <HAL_I2C_Init+0x27c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	bf94      	ite	ls
 8001890:	2301      	movls	r3, #1
 8001892:	2300      	movhi	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e0e7      	b.n	8001a6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4a78      	ldr	r2, [pc, #480]	; (8001a84 <HAL_I2C_Init+0x280>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	0c9b      	lsrs	r3, r3, #18
 80018a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a6a      	ldr	r2, [pc, #424]	; (8001a78 <HAL_I2C_Init+0x274>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d802      	bhi.n	80018d8 <HAL_I2C_Init+0xd4>
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	3301      	adds	r3, #1
 80018d6:	e009      	b.n	80018ec <HAL_I2C_Init+0xe8>
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018de:	fb02 f303 	mul.w	r3, r2, r3
 80018e2:	4a69      	ldr	r2, [pc, #420]	; (8001a88 <HAL_I2C_Init+0x284>)
 80018e4:	fba2 2303 	umull	r2, r3, r2, r3
 80018e8:	099b      	lsrs	r3, r3, #6
 80018ea:	3301      	adds	r3, #1
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	430b      	orrs	r3, r1
 80018f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80018fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	495c      	ldr	r1, [pc, #368]	; (8001a78 <HAL_I2C_Init+0x274>)
 8001908:	428b      	cmp	r3, r1
 800190a:	d819      	bhi.n	8001940 <HAL_I2C_Init+0x13c>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	1e59      	subs	r1, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	fbb1 f3f3 	udiv	r3, r1, r3
 800191a:	1c59      	adds	r1, r3, #1
 800191c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001920:	400b      	ands	r3, r1
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00a      	beq.n	800193c <HAL_I2C_Init+0x138>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1e59      	subs	r1, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	fbb1 f3f3 	udiv	r3, r1, r3
 8001934:	3301      	adds	r3, #1
 8001936:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193a:	e051      	b.n	80019e0 <HAL_I2C_Init+0x1dc>
 800193c:	2304      	movs	r3, #4
 800193e:	e04f      	b.n	80019e0 <HAL_I2C_Init+0x1dc>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d111      	bne.n	800196c <HAL_I2C_Init+0x168>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1e58      	subs	r0, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6859      	ldr	r1, [r3, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	440b      	add	r3, r1
 8001956:	fbb0 f3f3 	udiv	r3, r0, r3
 800195a:	3301      	adds	r3, #1
 800195c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf0c      	ite	eq
 8001964:	2301      	moveq	r3, #1
 8001966:	2300      	movne	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	e012      	b.n	8001992 <HAL_I2C_Init+0x18e>
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	1e58      	subs	r0, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6859      	ldr	r1, [r3, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	0099      	lsls	r1, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001982:	3301      	adds	r3, #1
 8001984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001988:	2b00      	cmp	r3, #0
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_I2C_Init+0x196>
 8001996:	2301      	movs	r3, #1
 8001998:	e022      	b.n	80019e0 <HAL_I2C_Init+0x1dc>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10e      	bne.n	80019c0 <HAL_I2C_Init+0x1bc>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1e58      	subs	r0, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6859      	ldr	r1, [r3, #4]
 80019aa:	460b      	mov	r3, r1
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	440b      	add	r3, r1
 80019b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b4:	3301      	adds	r3, #1
 80019b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019be:	e00f      	b.n	80019e0 <HAL_I2C_Init+0x1dc>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1e58      	subs	r0, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6859      	ldr	r1, [r3, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	0099      	lsls	r1, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d6:	3301      	adds	r3, #1
 80019d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	6809      	ldr	r1, [r1, #0]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69da      	ldr	r2, [r3, #28]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6911      	ldr	r1, [r2, #16]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	68d2      	ldr	r2, [r2, #12]
 8001a1a:	4311      	orrs	r1, r2
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	430b      	orrs	r3, r1
 8001a22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0201 	orr.w	r2, r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2220      	movs	r2, #32
 8001a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	000186a0 	.word	0x000186a0
 8001a7c:	001e847f 	.word	0x001e847f
 8001a80:	003d08ff 	.word	0x003d08ff
 8001a84:	431bde83 	.word	0x431bde83
 8001a88:	10624dd3 	.word	0x10624dd3

08001a8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e128      	b.n	8001cf0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a90      	ldr	r2, [pc, #576]	; (8001cf8 <HAL_I2S_Init+0x26c>)
 8001ab6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7fe fee9 	bl	8000890 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ad4:	f023 030f 	bic.w	r3, r3, #15
 8001ad8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d060      	beq.n	8001bac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d102      	bne.n	8001af8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001af2:	2310      	movs	r3, #16
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	e001      	b.n	8001afc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001af8:	2320      	movs	r3, #32
 8001afa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b20      	cmp	r3, #32
 8001b02:	d802      	bhi.n	8001b0a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	f002 fc56 	bl	80043bc <HAL_RCCEx_GetPeriphCLKFreq>
 8001b10:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b1a:	d125      	bne.n	8001b68 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d010      	beq.n	8001b46 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b2e:	4613      	mov	r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	461a      	mov	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b40:	3305      	adds	r3, #5
 8001b42:	613b      	str	r3, [r7, #16]
 8001b44:	e01f      	b.n	8001b86 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	461a      	mov	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b62:	3305      	adds	r3, #5
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	e00e      	b.n	8001b86 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	461a      	mov	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	3305      	adds	r3, #5
 8001b84:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4a5c      	ldr	r2, [pc, #368]	; (8001cfc <HAL_I2S_Init+0x270>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	08db      	lsrs	r3, r3, #3
 8001b90:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	085b      	lsrs	r3, r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	021b      	lsls	r3, r3, #8
 8001ba8:	61bb      	str	r3, [r7, #24]
 8001baa:	e003      	b.n	8001bb4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001bac:	2302      	movs	r3, #2
 8001bae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d902      	bls.n	8001bc0 <HAL_I2S_Init+0x134>
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	2bff      	cmp	r3, #255	; 0xff
 8001bbe:	d907      	bls.n	8001bd0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc4:	f043 0210 	orr.w	r2, r3, #16
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e08f      	b.n	8001cf0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	ea42 0103 	orr.w	r1, r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001bee:	f023 030f 	bic.w	r3, r3, #15
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6851      	ldr	r1, [r2, #4]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6892      	ldr	r2, [r2, #8]
 8001bfa:	4311      	orrs	r1, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	68d2      	ldr	r2, [r2, #12]
 8001c00:	4311      	orrs	r1, r2
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6992      	ldr	r2, [r2, #24]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c12:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d161      	bne.n	8001ce0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a38      	ldr	r2, [pc, #224]	; (8001d00 <HAL_I2S_Init+0x274>)
 8001c20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a37      	ldr	r2, [pc, #220]	; (8001d04 <HAL_I2S_Init+0x278>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_I2S_Init+0x1a4>
 8001c2c:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <HAL_I2S_Init+0x27c>)
 8001c2e:	e001      	b.n	8001c34 <HAL_I2S_Init+0x1a8>
 8001c30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	4932      	ldr	r1, [pc, #200]	; (8001d04 <HAL_I2S_Init+0x278>)
 8001c3c:	428a      	cmp	r2, r1
 8001c3e:	d101      	bne.n	8001c44 <HAL_I2S_Init+0x1b8>
 8001c40:	4a31      	ldr	r2, [pc, #196]	; (8001d08 <HAL_I2S_Init+0x27c>)
 8001c42:	e001      	b.n	8001c48 <HAL_I2S_Init+0x1bc>
 8001c44:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001c48:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001c4c:	f023 030f 	bic.w	r3, r3, #15
 8001c50:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a2b      	ldr	r2, [pc, #172]	; (8001d04 <HAL_I2S_Init+0x278>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d101      	bne.n	8001c60 <HAL_I2S_Init+0x1d4>
 8001c5c:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <HAL_I2S_Init+0x27c>)
 8001c5e:	e001      	b.n	8001c64 <HAL_I2S_Init+0x1d8>
 8001c60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c64:	2202      	movs	r2, #2
 8001c66:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a25      	ldr	r2, [pc, #148]	; (8001d04 <HAL_I2S_Init+0x278>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d101      	bne.n	8001c76 <HAL_I2S_Init+0x1ea>
 8001c72:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <HAL_I2S_Init+0x27c>)
 8001c74:	e001      	b.n	8001c7a <HAL_I2S_Init+0x1ee>
 8001c76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c86:	d003      	beq.n	8001c90 <HAL_I2S_Init+0x204>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d103      	bne.n	8001c98 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	e001      	b.n	8001c9c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	897b      	ldrh	r3, [r7, #10]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cc8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <HAL_I2S_Init+0x278>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d101      	bne.n	8001cd8 <HAL_I2S_Init+0x24c>
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <HAL_I2S_Init+0x27c>)
 8001cd6:	e001      	b.n	8001cdc <HAL_I2S_Init+0x250>
 8001cd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cdc:	897a      	ldrh	r2, [r7, #10]
 8001cde:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3720      	adds	r7, #32
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	08001e03 	.word	0x08001e03
 8001cfc:	cccccccd 	.word	0xcccccccd
 8001d00:	08001f19 	.word	0x08001f19
 8001d04:	40003800 	.word	0x40003800
 8001d08:	40003400 	.word	0x40003400

08001d0c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	881a      	ldrh	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	1c9a      	adds	r2, r3, #2
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10e      	bne.n	8001d9c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d8c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ffb8 	bl	8001d0c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	b292      	uxth	r2, r2
 8001db8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	1c9a      	adds	r2, r3, #2
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10e      	bne.n	8001dfa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ff93 	bl	8001d20 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d13a      	bne.n	8001e94 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d109      	bne.n	8001e3c <I2S_IRQHandler+0x3a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e32:	2b40      	cmp	r3, #64	; 0x40
 8001e34:	d102      	bne.n	8001e3c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ffb4 	bl	8001da4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e42:	2b40      	cmp	r3, #64	; 0x40
 8001e44:	d126      	bne.n	8001e94 <I2S_IRQHandler+0x92>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0320 	and.w	r3, r3, #32
 8001e50:	2b20      	cmp	r3, #32
 8001e52:	d11f      	bne.n	8001e94 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f043 0202 	orr.w	r2, r3, #2
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ff50 	bl	8001d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d136      	bne.n	8001f0e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d109      	bne.n	8001ebe <I2S_IRQHandler+0xbc>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb4:	2b80      	cmp	r3, #128	; 0x80
 8001eb6:	d102      	bne.n	8001ebe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f7ff ff45 	bl	8001d48 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d122      	bne.n	8001f0e <I2S_IRQHandler+0x10c>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	2b20      	cmp	r3, #32
 8001ed4:	d11b      	bne.n	8001f0e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ee4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f00:	f043 0204 	orr.w	r2, r3, #4
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ff13 	bl	8001d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f0e:	bf00      	nop
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a92      	ldr	r2, [pc, #584]	; (8002178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d101      	bne.n	8001f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001f32:	4b92      	ldr	r3, [pc, #584]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f34:	e001      	b.n	8001f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001f36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a8b      	ldr	r2, [pc, #556]	; (8002178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d101      	bne.n	8001f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001f50:	4b8a      	ldr	r3, [pc, #552]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f52:	e001      	b.n	8001f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001f54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f64:	d004      	beq.n	8001f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f040 8099 	bne.w	80020a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d107      	bne.n	8001f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f925 	bl	80021d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d107      	bne.n	8001fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f9c8 	bl	8002334 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001faa:	2b40      	cmp	r3, #64	; 0x40
 8001fac:	d13a      	bne.n	8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d035      	beq.n	8002024 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a6e      	ldr	r2, [pc, #440]	; (8002178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d101      	bne.n	8001fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001fc2:	4b6e      	ldr	r3, [pc, #440]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fc4:	e001      	b.n	8001fca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001fc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4969      	ldr	r1, [pc, #420]	; (8002178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fd2:	428b      	cmp	r3, r1
 8001fd4:	d101      	bne.n	8001fda <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001fd6:	4b69      	ldr	r3, [pc, #420]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fd8:	e001      	b.n	8001fde <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001fda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fe2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ff2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f043 0202 	orr.w	r2, r3, #2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff fe88 	bl	8001d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b08      	cmp	r3, #8
 800202c:	f040 80c3 	bne.w	80021b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f003 0320 	and.w	r3, r3, #32
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80bd 	beq.w	80021b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800204a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a49      	ldr	r2, [pc, #292]	; (8002178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d101      	bne.n	800205a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002056:	4b49      	ldr	r3, [pc, #292]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002058:	e001      	b.n	800205e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800205a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4944      	ldr	r1, [pc, #272]	; (8002178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002066:	428b      	cmp	r3, r1
 8002068:	d101      	bne.n	800206e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800206a:	4b44      	ldr	r3, [pc, #272]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800206c:	e001      	b.n	8002072 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800206e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002072:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002076:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f043 0204 	orr.w	r2, r3, #4
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff fe4a 	bl	8001d34 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020a0:	e089      	b.n	80021b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d107      	bne.n	80020bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f8be 	bl	8002238 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d107      	bne.n	80020d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f8fd 	bl	80022d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020dc:	2b40      	cmp	r3, #64	; 0x40
 80020de:	d12f      	bne.n	8002140 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d02a      	beq.n	8002140 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d101      	bne.n	8002108 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002106:	e001      	b.n	800210c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002108:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4919      	ldr	r1, [pc, #100]	; (8002178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002114:	428b      	cmp	r3, r1
 8002116:	d101      	bne.n	800211c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002118:	4b18      	ldr	r3, [pc, #96]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800211a:	e001      	b.n	8002120 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800211c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002120:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002124:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	f043 0202 	orr.w	r2, r3, #2
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fdfa 	bl	8001d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b08      	cmp	r3, #8
 8002148:	d136      	bne.n	80021b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b00      	cmp	r3, #0
 8002152:	d031      	beq.n	80021b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a07      	ldr	r2, [pc, #28]	; (8002178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d101      	bne.n	8002162 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800215e:	4b07      	ldr	r3, [pc, #28]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002160:	e001      	b.n	8002166 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002162:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4902      	ldr	r1, [pc, #8]	; (8002178 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800216e:	428b      	cmp	r3, r1
 8002170:	d106      	bne.n	8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002172:	4b02      	ldr	r3, [pc, #8]	; (800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002174:	e006      	b.n	8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002176:	bf00      	nop
 8002178:	40003800 	.word	0x40003800
 800217c:	40003400 	.word	0x40003400
 8002180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002184:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002188:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002198:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f043 0204 	orr.w	r2, r3, #4
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff fdc0 	bl	8001d34 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021b4:	e000      	b.n	80021b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80021b6:	bf00      	nop
}
 80021b8:	bf00      	nop
 80021ba:	3720      	adds	r7, #32
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	1c99      	adds	r1, r3, #2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6251      	str	r1, [r2, #36]	; 0x24
 80021e6:	881a      	ldrh	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d113      	bne.n	800222e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002214:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800221a:	b29b      	uxth	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d106      	bne.n	800222e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ffc9 	bl	80021c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	1c99      	adds	r1, r3, #2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6251      	str	r1, [r2, #36]	; 0x24
 800224a:	8819      	ldrh	r1, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a1d      	ldr	r2, [pc, #116]	; (80022c8 <I2SEx_TxISR_I2SExt+0x90>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d101      	bne.n	800225a <I2SEx_TxISR_I2SExt+0x22>
 8002256:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <I2SEx_TxISR_I2SExt+0x94>)
 8002258:	e001      	b.n	800225e <I2SEx_TxISR_I2SExt+0x26>
 800225a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800225e:	460a      	mov	r2, r1
 8002260:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002274:	b29b      	uxth	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d121      	bne.n	80022be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a12      	ldr	r2, [pc, #72]	; (80022c8 <I2SEx_TxISR_I2SExt+0x90>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d101      	bne.n	8002288 <I2SEx_TxISR_I2SExt+0x50>
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <I2SEx_TxISR_I2SExt+0x94>)
 8002286:	e001      	b.n	800228c <I2SEx_TxISR_I2SExt+0x54>
 8002288:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	490d      	ldr	r1, [pc, #52]	; (80022c8 <I2SEx_TxISR_I2SExt+0x90>)
 8002294:	428b      	cmp	r3, r1
 8002296:	d101      	bne.n	800229c <I2SEx_TxISR_I2SExt+0x64>
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <I2SEx_TxISR_I2SExt+0x94>)
 800229a:	e001      	b.n	80022a0 <I2SEx_TxISR_I2SExt+0x68>
 800229c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d106      	bne.n	80022be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ff81 	bl	80021c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40003800 	.word	0x40003800
 80022cc:	40003400 	.word	0x40003400

080022d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68d8      	ldr	r0, [r3, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	1c99      	adds	r1, r3, #2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80022e8:	b282      	uxth	r2, r0
 80022ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022fe:	b29b      	uxth	r3, r3
 8002300:	2b00      	cmp	r3, #0
 8002302:	d113      	bne.n	800232c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002312:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002318:	b29b      	uxth	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ff4a 	bl	80021c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a20      	ldr	r2, [pc, #128]	; (80023c4 <I2SEx_RxISR_I2SExt+0x90>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d101      	bne.n	800234a <I2SEx_RxISR_I2SExt+0x16>
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <I2SEx_RxISR_I2SExt+0x94>)
 8002348:	e001      	b.n	800234e <I2SEx_RxISR_I2SExt+0x1a>
 800234a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800234e:	68d8      	ldr	r0, [r3, #12]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	1c99      	adds	r1, r3, #2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	62d1      	str	r1, [r2, #44]	; 0x2c
 800235a:	b282      	uxth	r2, r0
 800235c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002370:	b29b      	uxth	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d121      	bne.n	80023ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <I2SEx_RxISR_I2SExt+0x90>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d101      	bne.n	8002384 <I2SEx_RxISR_I2SExt+0x50>
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <I2SEx_RxISR_I2SExt+0x94>)
 8002382:	e001      	b.n	8002388 <I2SEx_RxISR_I2SExt+0x54>
 8002384:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	490d      	ldr	r1, [pc, #52]	; (80023c4 <I2SEx_RxISR_I2SExt+0x90>)
 8002390:	428b      	cmp	r3, r1
 8002392:	d101      	bne.n	8002398 <I2SEx_RxISR_I2SExt+0x64>
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <I2SEx_RxISR_I2SExt+0x94>)
 8002396:	e001      	b.n	800239c <I2SEx_RxISR_I2SExt+0x68>
 8002398:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800239c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d106      	bne.n	80023ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff03 	bl	80021c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40003800 	.word	0x40003800
 80023c8:	40003400 	.word	0x40003400

080023cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ce:	b08f      	sub	sp, #60	; 0x3c
 80023d0:	af0a      	add	r7, sp, #40	; 0x28
 80023d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e10f      	b.n	80025fe <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d106      	bne.n	80023fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f006 fec7 	bl	800918c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2203      	movs	r2, #3
 8002402:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f003 f8dc 	bl	80055da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	687e      	ldr	r6, [r7, #4]
 800242a:	466d      	mov	r5, sp
 800242c:	f106 0410 	add.w	r4, r6, #16
 8002430:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002432:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002436:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002438:	e894 0003 	ldmia.w	r4, {r0, r1}
 800243c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002440:	1d33      	adds	r3, r6, #4
 8002442:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002444:	6838      	ldr	r0, [r7, #0]
 8002446:	f002 ffb3 	bl	80053b0 <USB_CoreInit>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d005      	beq.n	800245c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0d0      	b.n	80025fe <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f003 f8ca 	bl	80055fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e04a      	b.n	8002504 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	333d      	adds	r3, #61	; 0x3d
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	333c      	adds	r3, #60	; 0x3c
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	b298      	uxth	r0, r3
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	3344      	adds	r3, #68	; 0x44
 80024aa:	4602      	mov	r2, r0
 80024ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024ae:	7bfa      	ldrb	r2, [r7, #15]
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	3340      	adds	r3, #64	; 0x40
 80024be:	2200      	movs	r2, #0
 80024c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024c2:	7bfa      	ldrb	r2, [r7, #15]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	3348      	adds	r3, #72	; 0x48
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	334c      	adds	r3, #76	; 0x4c
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	3354      	adds	r3, #84	; 0x54
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	3301      	adds	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	7bfa      	ldrb	r2, [r7, #15]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	429a      	cmp	r2, r3
 800250c:	d3af      	bcc.n	800246e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800250e:	2300      	movs	r3, #0
 8002510:	73fb      	strb	r3, [r7, #15]
 8002512:	e044      	b.n	800259e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002514:	7bfa      	ldrb	r2, [r7, #15]
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	4613      	mov	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800253c:	7bfa      	ldrb	r2, [r7, #15]
 800253e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	4613      	mov	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4413      	add	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002556:	7bfa      	ldrb	r2, [r7, #15]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	3301      	adds	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d3b5      	bcc.n	8002514 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	687e      	ldr	r6, [r7, #4]
 80025b0:	466d      	mov	r5, sp
 80025b2:	f106 0410 	add.w	r4, r6, #16
 80025b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80025c6:	1d33      	adds	r3, r6, #4
 80025c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	f003 f862 	bl	8005694 <USB_DevInit>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2202      	movs	r2, #2
 80025da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e00d      	b.n	80025fe <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f004 f9b1 	bl	800695e <USB_DevDisconnect>

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002606 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b084      	sub	sp, #16
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_PCD_Start+0x1c>
 800261e:	2302      	movs	r3, #2
 8002620:	e020      	b.n	8002664 <HAL_PCD_Start+0x5e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	2b01      	cmp	r3, #1
 8002630:	d109      	bne.n	8002646 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002636:	2b01      	cmp	r3, #1
 8002638:	d005      	beq.n	8002646 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f002 ffb4 	bl	80055b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f004 f961 	bl	800691c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b08d      	sub	sp, #52	; 0x34
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f004 fa1f 	bl	8006ac6 <USB_GetMode>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	f040 848a 	bne.w	8002fa4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f004 f983 	bl	80069a0 <USB_ReadInterrupts>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 8480 	beq.w	8002fa2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f004 f970 	bl	80069a0 <USB_ReadInterrupts>
 80026c0:	4603      	mov	r3, r0
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d107      	bne.n	80026da <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695a      	ldr	r2, [r3, #20]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f002 0202 	and.w	r2, r2, #2
 80026d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f004 f95e 	bl	80069a0 <USB_ReadInterrupts>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	d161      	bne.n	80027b2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699a      	ldr	r2, [r3, #24]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0210 	bic.w	r2, r2, #16
 80026fc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	f003 020f 	and.w	r2, r3, #15
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4413      	add	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	3304      	adds	r3, #4
 800271c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	0c5b      	lsrs	r3, r3, #17
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	2b02      	cmp	r3, #2
 8002728:	d124      	bne.n	8002774 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d035      	beq.n	80027a2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002740:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002744:	b29b      	uxth	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	6a38      	ldr	r0, [r7, #32]
 800274a:	f003 ff95 	bl	8006678 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800275a:	441a      	add	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	6a1a      	ldr	r2, [r3, #32]
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800276c:	441a      	add	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	621a      	str	r2, [r3, #32]
 8002772:	e016      	b.n	80027a2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	0c5b      	lsrs	r3, r3, #17
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	2b06      	cmp	r3, #6
 800277e:	d110      	bne.n	80027a2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002786:	2208      	movs	r2, #8
 8002788:	4619      	mov	r1, r3
 800278a:	6a38      	ldr	r0, [r7, #32]
 800278c:	f003 ff74 	bl	8006678 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	6a1a      	ldr	r2, [r3, #32]
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800279c:	441a      	add	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0210 	orr.w	r2, r2, #16
 80027b0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f004 f8f2 	bl	80069a0 <USB_ReadInterrupts>
 80027bc:	4603      	mov	r3, r0
 80027be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027c6:	f040 80a7 	bne.w	8002918 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f004 f8f7 	bl	80069c6 <USB_ReadDevAllOutEpInterrupt>
 80027d8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80027da:	e099      	b.n	8002910 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 808e 	beq.w	8002904 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f004 f91b 	bl	8006a2e <USB_ReadDevOutEPInterrupt>
 80027f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00c      	beq.n	800281e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	4413      	add	r3, r2
 800280c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002810:	461a      	mov	r2, r3
 8002812:	2301      	movs	r3, #1
 8002814:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002816:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fec3 	bl	80035a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00c      	beq.n	8002842 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002834:	461a      	mov	r2, r3
 8002836:	2308      	movs	r3, #8
 8002838:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800283a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 ff99 	bl	8003774 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	4413      	add	r3, r2
 8002854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002858:	461a      	mov	r2, r3
 800285a:	2310      	movs	r3, #16
 800285c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d030      	beq.n	80028ca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002870:	2b80      	cmp	r3, #128	; 0x80
 8002872:	d109      	bne.n	8002888 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	69fa      	ldr	r2, [r7, #28]
 800287e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002882:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002886:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	3304      	adds	r3, #4
 800289c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	78db      	ldrb	r3, [r3, #3]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d108      	bne.n	80028b8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2200      	movs	r2, #0
 80028aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	4619      	mov	r1, r3
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f006 fd7e 	bl	80093b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028c4:	461a      	mov	r2, r3
 80028c6:	2302      	movs	r3, #2
 80028c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e0:	461a      	mov	r2, r3
 80028e2:	2320      	movs	r3, #32
 80028e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d009      	beq.n	8002904 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028fc:	461a      	mov	r2, r3
 80028fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002902:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	3301      	adds	r3, #1
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290c:	085b      	lsrs	r3, r3, #1
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002912:	2b00      	cmp	r3, #0
 8002914:	f47f af62 	bne.w	80027dc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f004 f83f 	bl	80069a0 <USB_ReadInterrupts>
 8002922:	4603      	mov	r3, r0
 8002924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002928:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800292c:	f040 80db 	bne.w	8002ae6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f004 f860 	bl	80069fa <USB_ReadDevAllInEpInterrupt>
 800293a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002940:	e0cd      	b.n	8002ade <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80c2 	beq.w	8002ad2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f004 f886 	bl	8006a6a <USB_ReadDevInEPInterrupt>
 800295e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d057      	beq.n	8002a1a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	2201      	movs	r2, #1
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800297e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	43db      	mvns	r3, r3
 8002984:	69f9      	ldr	r1, [r7, #28]
 8002986:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800298a:	4013      	ands	r3, r2
 800298c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	4413      	add	r3, r2
 8002996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800299a:	461a      	mov	r2, r3
 800299c:	2301      	movs	r3, #1
 800299e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d132      	bne.n	8002a0e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	334c      	adds	r3, #76	; 0x4c
 80029b8:	6819      	ldr	r1, [r3, #0]
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4403      	add	r3, r0
 80029c8:	3348      	adds	r3, #72	; 0x48
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4419      	add	r1, r3
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d2:	4613      	mov	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4403      	add	r3, r0
 80029dc:	334c      	adds	r3, #76	; 0x4c
 80029de:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d113      	bne.n	8002a0e <HAL_PCD_IRQHandler+0x3a2>
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	3354      	adds	r3, #84	; 0x54
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d108      	bne.n	8002a0e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a06:	461a      	mov	r2, r3
 8002a08:	2101      	movs	r1, #1
 8002a0a:	f004 f88d 	bl	8006b28 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	4619      	mov	r1, r3
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f006 fc48 	bl	80092aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f003 0308 	and.w	r3, r3, #8
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a30:	461a      	mov	r2, r3
 8002a32:	2308      	movs	r3, #8
 8002a34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2310      	movs	r3, #16
 8002a50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2340      	movs	r3, #64	; 0x40
 8002a6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d023      	beq.n	8002ac0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002a78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a7a:	6a38      	ldr	r0, [r7, #32]
 8002a7c:	f002 ff6e 	bl	800595c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	3338      	adds	r3, #56	; 0x38
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	4413      	add	r3, r2
 8002a90:	3304      	adds	r3, #4
 8002a92:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	78db      	ldrb	r3, [r3, #3]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d108      	bne.n	8002aae <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f006 fc95 	bl	80093d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	015a      	lsls	r2, r3, #5
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aba:	461a      	mov	r2, r3
 8002abc:	2302      	movs	r3, #2
 8002abe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002aca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fcdb 	bl	8003488 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f47f af2e 	bne.w	8002942 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f003 ff58 	bl	80069a0 <USB_ReadInterrupts>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002af6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002afa:	d122      	bne.n	8002b42 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b0a:	f023 0301 	bic.w	r3, r3, #1
 8002b0e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d108      	bne.n	8002b2c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b22:	2100      	movs	r1, #0
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 fec3 	bl	80038b0 <HAL_PCDEx_LPM_Callback>
 8002b2a:	e002      	b.n	8002b32 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f006 fc33 	bl	8009398 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 ff2a 	bl	80069a0 <USB_ReadInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b56:	d112      	bne.n	8002b7e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d102      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f006 fbef 	bl	800934c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695a      	ldr	r2, [r3, #20]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b7c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f003 ff0c 	bl	80069a0 <USB_ReadInterrupts>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b92:	f040 80b7 	bne.w	8002d04 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2110      	movs	r1, #16
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f002 fed3 	bl	800595c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bba:	e046      	b.n	8002c4a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be0:	0151      	lsls	r1, r2, #5
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	440a      	add	r2, r1
 8002be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002bea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c02:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c14:	0151      	lsls	r1, r2, #5
 8002c16:	69fa      	ldr	r2, [r7, #28]
 8002c18:	440a      	add	r2, r1
 8002c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c26:	015a      	lsls	r2, r3, #5
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c34:	0151      	lsls	r1, r2, #5
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	440a      	add	r2, r1
 8002c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c42:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c46:	3301      	adds	r3, #1
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d3b3      	bcc.n	8002bbc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c62:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c66:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d016      	beq.n	8002c9e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c80:	f043 030b 	orr.w	r3, r3, #11
 8002c84:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c96:	f043 030b 	orr.w	r3, r3, #11
 8002c9a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9c:	e015      	b.n	8002cca <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cb0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002cb4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cc4:	f043 030b 	orr.w	r3, r3, #11
 8002cc8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69fa      	ldr	r2, [r7, #28]
 8002cd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cd8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002cdc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f003 ff1a 	bl	8006b28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f003 fe49 	bl	80069a0 <USB_ReadInterrupts>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d18:	d124      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f003 fedf 	bl	8006ae2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f002 fe94 	bl	8005a56 <USB_GetDevSpeed>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	461a      	mov	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681c      	ldr	r4, [r3, #0]
 8002d3a:	f001 fa29 	bl	8004190 <HAL_RCC_GetHCLKFreq>
 8002d3e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	4620      	mov	r0, r4
 8002d4a:	f002 fb93 	bl	8005474 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f006 fad3 	bl	80092fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f003 fe19 	bl	80069a0 <USB_ReadInterrupts>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d10a      	bne.n	8002d8e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f006 fab0 	bl	80092de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f002 0208 	and.w	r2, r2, #8
 8002d8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f003 fe04 	bl	80069a0 <USB_ReadInterrupts>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d9e:	2b80      	cmp	r3, #128	; 0x80
 8002da0:	d122      	bne.n	8002de8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002daa:	6a3b      	ldr	r3, [r7, #32]
 8002dac:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dae:	2301      	movs	r3, #1
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
 8002db2:	e014      	b.n	8002dde <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d105      	bne.n	8002dd8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fb27 	bl	8003426 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	3301      	adds	r3, #1
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d3e5      	bcc.n	8002db4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f003 fdd7 	bl	80069a0 <USB_ReadInterrupts>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002df8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dfc:	d13b      	bne.n	8002e76 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dfe:	2301      	movs	r3, #1
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
 8002e02:	e02b      	b.n	8002e5c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e18:	4613      	mov	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	3340      	adds	r3, #64	; 0x40
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d115      	bne.n	8002e56 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e2a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	da12      	bge.n	8002e56 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	333f      	adds	r3, #63	; 0x3f
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fae8 	bl	8003426 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	3301      	adds	r3, #1
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d3ce      	bcc.n	8002e04 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f003 fd90 	bl	80069a0 <USB_ReadInterrupts>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e8a:	d155      	bne.n	8002f38 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e90:	e045      	b.n	8002f1e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d12e      	bne.n	8002f18 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002eba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	da2b      	bge.n	8002f18 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002ecc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d121      	bne.n	8002f18 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f14:	6053      	str	r3, [r2, #4]
            break;
 8002f16:	e007      	b.n	8002f28 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d3b4      	bcc.n	8002e92 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002f36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f003 fd2f 	bl	80069a0 <USB_ReadInterrupts>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4c:	d10a      	bne.n	8002f64 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f006 fa54 	bl	80093fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002f62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f003 fd19 	bl	80069a0 <USB_ReadInterrupts>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d115      	bne.n	8002fa4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f006 fa44 	bl	8009418 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	e000      	b.n	8002fa4 <HAL_PCD_IRQHandler+0x938>
      return;
 8002fa2:	bf00      	nop
    }
  }
}
 8002fa4:	3734      	adds	r7, #52	; 0x34
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd90      	pop	{r4, r7, pc}

08002faa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_PCD_SetAddress+0x1a>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e013      	b.n	8002fec <HAL_PCD_SetAddress+0x42>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f003 fc77 	bl	80068d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	4611      	mov	r1, r2
 8003000:	461a      	mov	r2, r3
 8003002:	4603      	mov	r3, r0
 8003004:	70fb      	strb	r3, [r7, #3]
 8003006:	460b      	mov	r3, r1
 8003008:	803b      	strh	r3, [r7, #0]
 800300a:	4613      	mov	r3, r2
 800300c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003012:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003016:	2b00      	cmp	r3, #0
 8003018:	da0f      	bge.n	800303a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	f003 020f 	and.w	r2, r3, #15
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	3338      	adds	r3, #56	; 0x38
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	3304      	adds	r3, #4
 8003030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2201      	movs	r2, #1
 8003036:	705a      	strb	r2, [r3, #1]
 8003038:	e00f      	b.n	800305a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	f003 020f 	and.w	r2, r3, #15
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	4413      	add	r3, r2
 8003050:	3304      	adds	r3, #4
 8003052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	b2da      	uxtb	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003066:	883a      	ldrh	r2, [r7, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	78ba      	ldrb	r2, [r7, #2]
 8003070:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	785b      	ldrb	r3, [r3, #1]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d004      	beq.n	8003084 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003084:	78bb      	ldrb	r3, [r7, #2]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d102      	bne.n	8003090 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_PCD_EP_Open+0xaa>
 800309a:	2302      	movs	r3, #2
 800309c:	e00e      	b.n	80030bc <HAL_PCD_EP_Open+0xc8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68f9      	ldr	r1, [r7, #12]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f002 fcf7 	bl	8005aa0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80030ba:	7afb      	ldrb	r3, [r7, #11]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	da0f      	bge.n	80030f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	f003 020f 	and.w	r2, r3, #15
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	3338      	adds	r3, #56	; 0x38
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	3304      	adds	r3, #4
 80030ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	705a      	strb	r2, [r3, #1]
 80030f6:	e00f      	b.n	8003118 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	f003 020f 	and.w	r2, r3, #15
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	3304      	adds	r3, #4
 8003110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	b2da      	uxtb	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_PCD_EP_Close+0x6e>
 800312e:	2302      	movs	r3, #2
 8003130:	e00e      	b.n	8003150 <HAL_PCD_EP_Close+0x8c>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68f9      	ldr	r1, [r7, #12]
 8003140:	4618      	mov	r0, r3
 8003142:	f002 fd35 	bl	8005bb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	607a      	str	r2, [r7, #4]
 8003162:	603b      	str	r3, [r7, #0]
 8003164:	460b      	mov	r3, r1
 8003166:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003168:	7afb      	ldrb	r3, [r7, #11]
 800316a:	f003 020f 	and.w	r2, r3, #15
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4413      	add	r3, r2
 800317e:	3304      	adds	r3, #4
 8003180:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2200      	movs	r2, #0
 8003192:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2200      	movs	r2, #0
 8003198:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800319a:	7afb      	ldrb	r3, [r7, #11]
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d102      	bne.n	80031b4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031b4:	7afb      	ldrb	r3, [r7, #11]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	6979      	ldr	r1, [r7, #20]
 80031cc:	f003 f814 	bl	80061f8 <USB_EP0StartXfer>
 80031d0:	e008      	b.n	80031e4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	6979      	ldr	r1, [r7, #20]
 80031e0:	f002 fdc2 	bl	8005d68 <USB_EPStartXfer>
  }

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	f003 020f 	and.w	r2, r3, #15
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003210:	681b      	ldr	r3, [r3, #0]
}
 8003212:	4618      	mov	r0, r3
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b086      	sub	sp, #24
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
 800322a:	460b      	mov	r3, r1
 800322c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800322e:	7afb      	ldrb	r3, [r7, #11]
 8003230:	f003 020f 	and.w	r2, r3, #15
 8003234:	4613      	mov	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	3338      	adds	r3, #56	; 0x38
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4413      	add	r3, r2
 8003242:	3304      	adds	r3, #4
 8003244:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2200      	movs	r2, #0
 8003256:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2201      	movs	r2, #1
 800325c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800325e:	7afb      	ldrb	r3, [r7, #11]
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	b2da      	uxtb	r2, r3
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d102      	bne.n	8003278 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003278:	7afb      	ldrb	r3, [r7, #11]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	6979      	ldr	r1, [r7, #20]
 8003290:	f002 ffb2 	bl	80061f8 <USB_EP0StartXfer>
 8003294:	e008      	b.n	80032a8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	6979      	ldr	r1, [r7, #20]
 80032a4:	f002 fd60 	bl	8005d68 <USB_EPStartXfer>
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	460b      	mov	r3, r1
 80032bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032be:	78fb      	ldrb	r3, [r7, #3]
 80032c0:	f003 020f 	and.w	r2, r3, #15
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d901      	bls.n	80032d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e050      	b.n	8003372 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	da0f      	bge.n	80032f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	f003 020f 	and.w	r2, r3, #15
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	3338      	adds	r3, #56	; 0x38
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4413      	add	r3, r2
 80032ec:	3304      	adds	r3, #4
 80032ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2201      	movs	r2, #1
 80032f4:	705a      	strb	r2, [r3, #1]
 80032f6:	e00d      	b.n	8003314 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	4613      	mov	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	3304      	adds	r3, #4
 800330c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2201      	movs	r2, #1
 8003318:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	b2da      	uxtb	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_PCD_EP_SetStall+0x82>
 8003330:	2302      	movs	r3, #2
 8003332:	e01e      	b.n	8003372 <HAL_PCD_EP_SetStall+0xc0>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68f9      	ldr	r1, [r7, #12]
 8003342:	4618      	mov	r0, r3
 8003344:	f003 f9f0 	bl	8006728 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10a      	bne.n	8003368 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	b2d9      	uxtb	r1, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003362:	461a      	mov	r2, r3
 8003364:	f003 fbe0 	bl	8006b28 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	460b      	mov	r3, r1
 8003384:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003386:	78fb      	ldrb	r3, [r7, #3]
 8003388:	f003 020f 	and.w	r2, r3, #15
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	429a      	cmp	r2, r3
 8003392:	d901      	bls.n	8003398 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e042      	b.n	800341e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800339c:	2b00      	cmp	r3, #0
 800339e:	da0f      	bge.n	80033c0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	f003 020f 	and.w	r2, r3, #15
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	3338      	adds	r3, #56	; 0x38
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	4413      	add	r3, r2
 80033b4:	3304      	adds	r3, #4
 80033b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	705a      	strb	r2, [r3, #1]
 80033be:	e00f      	b.n	80033e0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	f003 020f 	and.w	r2, r3, #15
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	3304      	adds	r3, #4
 80033d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_PCD_EP_ClrStall+0x86>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e00e      	b.n	800341e <HAL_PCD_EP_ClrStall+0xa4>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68f9      	ldr	r1, [r7, #12]
 800340e:	4618      	mov	r0, r3
 8003410:	f003 f9f8 	bl	8006804 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b084      	sub	sp, #16
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003436:	2b00      	cmp	r3, #0
 8003438:	da0c      	bge.n	8003454 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	f003 020f 	and.w	r2, r3, #15
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	3338      	adds	r3, #56	; 0x38
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	3304      	adds	r3, #4
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	e00c      	b.n	800346e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	f003 020f 	and.w	r2, r3, #15
 800345a:	4613      	mov	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	3304      	adds	r3, #4
 800346c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68f9      	ldr	r1, [r7, #12]
 8003474:	4618      	mov	r0, r3
 8003476:	f003 f817 	bl	80064a8 <USB_EPStopXfer>
 800347a:	4603      	mov	r3, r0
 800347c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800347e:	7afb      	ldrb	r3, [r7, #11]
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08a      	sub	sp, #40	; 0x28
 800348c:	af02      	add	r7, sp, #8
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	4613      	mov	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	3338      	adds	r3, #56	; 0x38
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	4413      	add	r3, r2
 80034ac:	3304      	adds	r3, #4
 80034ae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a1a      	ldr	r2, [r3, #32]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d901      	bls.n	80034c0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e06c      	b.n	800359a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	699a      	ldr	r2, [r3, #24]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	69fa      	ldr	r2, [r7, #28]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d902      	bls.n	80034dc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	3303      	adds	r3, #3
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80034e4:	e02b      	b.n	800353e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	69fa      	ldr	r2, [r7, #28]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d902      	bls.n	8003502 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3303      	adds	r3, #3
 8003506:	089b      	lsrs	r3, r3, #2
 8003508:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6919      	ldr	r1, [r3, #16]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800351a:	b2db      	uxtb	r3, r3
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	4603      	mov	r3, r0
 8003520:	6978      	ldr	r0, [r7, #20]
 8003522:	f003 f86b 	bl	80065fc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	441a      	add	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a1a      	ldr	r2, [r3, #32]
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	441a      	add	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4413      	add	r3, r2
 8003546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	429a      	cmp	r2, r3
 8003552:	d809      	bhi.n	8003568 <PCD_WriteEmptyTxFifo+0xe0>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1a      	ldr	r2, [r3, #32]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800355c:	429a      	cmp	r2, r3
 800355e:	d203      	bcs.n	8003568 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1be      	bne.n	80034e6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	699a      	ldr	r2, [r3, #24]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	429a      	cmp	r2, r3
 8003572:	d811      	bhi.n	8003598 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	2201      	movs	r2, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	43db      	mvns	r3, r3
 800358e:	6939      	ldr	r1, [r7, #16]
 8003590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003594:	4013      	ands	r3, r2
 8003596:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3720      	adds	r7, #32
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	333c      	adds	r3, #60	; 0x3c
 80035bc:	3304      	adds	r3, #4
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d17b      	bne.n	80036d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d015      	beq.n	8003610 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	4a61      	ldr	r2, [pc, #388]	; (800376c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	f240 80b9 	bls.w	8003760 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80b3 	beq.w	8003760 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003606:	461a      	mov	r2, r3
 8003608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360c:	6093      	str	r3, [r2, #8]
 800360e:	e0a7      	b.n	8003760 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003626:	461a      	mov	r2, r3
 8003628:	2320      	movs	r3, #32
 800362a:	6093      	str	r3, [r2, #8]
 800362c:	e098      	b.n	8003760 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003634:	2b00      	cmp	r3, #0
 8003636:	f040 8093 	bne.w	8003760 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	4a4b      	ldr	r2, [pc, #300]	; (800376c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d90f      	bls.n	8003662 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00a      	beq.n	8003662 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	015a      	lsls	r2, r3, #5
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	4413      	add	r3, r2
 8003654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003658:	461a      	mov	r2, r3
 800365a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800365e:	6093      	str	r3, [r2, #8]
 8003660:	e07e      	b.n	8003760 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4413      	add	r3, r2
 8003674:	3304      	adds	r3, #4
 8003676:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	69da      	ldr	r2, [r3, #28]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	0159      	lsls	r1, r3, #5
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	440b      	add	r3, r1
 8003684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800368e:	1ad2      	subs	r2, r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d114      	bne.n	80036c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d109      	bne.n	80036b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036ac:	461a      	mov	r2, r3
 80036ae:	2101      	movs	r1, #1
 80036b0:	f003 fa3a 	bl	8006b28 <USB_EP0_OutStart>
 80036b4:	e006      	b.n	80036c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	441a      	add	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	4619      	mov	r1, r3
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f005 fdd2 	bl	8009274 <HAL_PCD_DataOutStageCallback>
 80036d0:	e046      	b.n	8003760 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	4a26      	ldr	r2, [pc, #152]	; (8003770 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d124      	bne.n	8003724 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f0:	461a      	mov	r2, r3
 80036f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036f6:	6093      	str	r3, [r2, #8]
 80036f8:	e032      	b.n	8003760 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f003 0320 	and.w	r3, r3, #32
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003710:	461a      	mov	r2, r3
 8003712:	2320      	movs	r3, #32
 8003714:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	4619      	mov	r1, r3
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f005 fda9 	bl	8009274 <HAL_PCD_DataOutStageCallback>
 8003722:	e01d      	b.n	8003760 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d114      	bne.n	8003754 <PCD_EP_OutXfrComplete_int+0x1b0>
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d108      	bne.n	8003754 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800374c:	461a      	mov	r2, r3
 800374e:	2100      	movs	r1, #0
 8003750:	f003 f9ea 	bl	8006b28 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	4619      	mov	r1, r3
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f005 fd8a 	bl	8009274 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3720      	adds	r7, #32
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	4f54300a 	.word	0x4f54300a
 8003770:	4f54310a 	.word	0x4f54310a

08003774 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	333c      	adds	r3, #60	; 0x3c
 800378c:	3304      	adds	r3, #4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4a15      	ldr	r2, [pc, #84]	; (80037fc <PCD_EP_OutSetupPacket_int+0x88>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d90e      	bls.n	80037c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d009      	beq.n	80037c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c0:	461a      	mov	r2, r3
 80037c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f005 fd41 	bl	8009250 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4a0a      	ldr	r2, [pc, #40]	; (80037fc <PCD_EP_OutSetupPacket_int+0x88>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d90c      	bls.n	80037f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d108      	bne.n	80037f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037e8:	461a      	mov	r2, r3
 80037ea:	2101      	movs	r1, #1
 80037ec:	f003 f99c 	bl	8006b28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	4f54300a 	.word	0x4f54300a

08003800 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	70fb      	strb	r3, [r7, #3]
 800380c:	4613      	mov	r3, r2
 800380e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d107      	bne.n	800382e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800381e:	883b      	ldrh	r3, [r7, #0]
 8003820:	0419      	lsls	r1, r3, #16
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	430a      	orrs	r2, r1
 800382a:	629a      	str	r2, [r3, #40]	; 0x28
 800382c:	e028      	b.n	8003880 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	0c1b      	lsrs	r3, r3, #16
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	4413      	add	r3, r2
 800383a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800383c:	2300      	movs	r3, #0
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	e00d      	b.n	800385e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	3340      	adds	r3, #64	; 0x40
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	0c1b      	lsrs	r3, r3, #16
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	4413      	add	r3, r2
 8003856:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	3301      	adds	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
 800385e:	7bfa      	ldrb	r2, [r7, #15]
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	3b01      	subs	r3, #1
 8003864:	429a      	cmp	r2, r3
 8003866:	d3ec      	bcc.n	8003842 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003868:	883b      	ldrh	r3, [r7, #0]
 800386a:	0418      	lsls	r0, r3, #16
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6819      	ldr	r1, [r3, #0]
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	3b01      	subs	r3, #1
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	4302      	orrs	r2, r0
 8003878:	3340      	adds	r3, #64	; 0x40
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	460b      	mov	r3, r1
 8003898:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	887a      	ldrh	r2, [r7, #2]
 80038a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e267      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d075      	beq.n	80039d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038e6:	4b88      	ldr	r3, [pc, #544]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d00c      	beq.n	800390c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038f2:	4b85      	ldr	r3, [pc, #532]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d112      	bne.n	8003924 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038fe:	4b82      	ldr	r3, [pc, #520]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800390a:	d10b      	bne.n	8003924 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390c:	4b7e      	ldr	r3, [pc, #504]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d05b      	beq.n	80039d0 <HAL_RCC_OscConfig+0x108>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d157      	bne.n	80039d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e242      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800392c:	d106      	bne.n	800393c <HAL_RCC_OscConfig+0x74>
 800392e:	4b76      	ldr	r3, [pc, #472]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a75      	ldr	r2, [pc, #468]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e01d      	b.n	8003978 <HAL_RCC_OscConfig+0xb0>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003944:	d10c      	bne.n	8003960 <HAL_RCC_OscConfig+0x98>
 8003946:	4b70      	ldr	r3, [pc, #448]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a6f      	ldr	r2, [pc, #444]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 800394c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003950:	6013      	str	r3, [r2, #0]
 8003952:	4b6d      	ldr	r3, [pc, #436]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a6c      	ldr	r2, [pc, #432]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e00b      	b.n	8003978 <HAL_RCC_OscConfig+0xb0>
 8003960:	4b69      	ldr	r3, [pc, #420]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a68      	ldr	r2, [pc, #416]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	4b66      	ldr	r3, [pc, #408]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a65      	ldr	r2, [pc, #404]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d013      	beq.n	80039a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003980:	f7fd fb84 	bl	800108c <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003988:	f7fd fb80 	bl	800108c <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b64      	cmp	r3, #100	; 0x64
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e207      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399a:	4b5b      	ldr	r3, [pc, #364]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0xc0>
 80039a6:	e014      	b.n	80039d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a8:	f7fd fb70 	bl	800108c <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b0:	f7fd fb6c 	bl	800108c <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b64      	cmp	r3, #100	; 0x64
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e1f3      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c2:	4b51      	ldr	r3, [pc, #324]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0xe8>
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d063      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039de:	4b4a      	ldr	r3, [pc, #296]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ea:	4b47      	ldr	r3, [pc, #284]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d11c      	bne.n	8003a30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039f6:	4b44      	ldr	r3, [pc, #272]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d116      	bne.n	8003a30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a02:	4b41      	ldr	r3, [pc, #260]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_RCC_OscConfig+0x152>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d001      	beq.n	8003a1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e1c7      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1a:	4b3b      	ldr	r3, [pc, #236]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4937      	ldr	r1, [pc, #220]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2e:	e03a      	b.n	8003aa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d020      	beq.n	8003a7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a38:	4b34      	ldr	r3, [pc, #208]	; (8003b0c <HAL_RCC_OscConfig+0x244>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3e:	f7fd fb25 	bl	800108c <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a46:	f7fd fb21 	bl	800108c <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e1a8      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a58:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a64:	4b28      	ldr	r3, [pc, #160]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4925      	ldr	r1, [pc, #148]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	600b      	str	r3, [r1, #0]
 8003a78:	e015      	b.n	8003aa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7a:	4b24      	ldr	r3, [pc, #144]	; (8003b0c <HAL_RCC_OscConfig+0x244>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a80:	f7fd fb04 	bl	800108c <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a88:	f7fd fb00 	bl	800108c <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e187      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d036      	beq.n	8003b20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d016      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aba:	4b15      	ldr	r3, [pc, #84]	; (8003b10 <HAL_RCC_OscConfig+0x248>)
 8003abc:	2201      	movs	r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac0:	f7fd fae4 	bl	800108c <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac8:	f7fd fae0 	bl	800108c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e167      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ada:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_RCC_OscConfig+0x240>)
 8003adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x200>
 8003ae6:	e01b      	b.n	8003b20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae8:	4b09      	ldr	r3, [pc, #36]	; (8003b10 <HAL_RCC_OscConfig+0x248>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aee:	f7fd facd 	bl	800108c <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af4:	e00e      	b.n	8003b14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af6:	f7fd fac9 	bl	800108c <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d907      	bls.n	8003b14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e150      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	42470000 	.word	0x42470000
 8003b10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b14:	4b88      	ldr	r3, [pc, #544]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1ea      	bne.n	8003af6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 8097 	beq.w	8003c5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b32:	4b81      	ldr	r3, [pc, #516]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10f      	bne.n	8003b5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	4b7d      	ldr	r3, [pc, #500]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	4a7c      	ldr	r2, [pc, #496]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4e:	4b7a      	ldr	r3, [pc, #488]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5e:	4b77      	ldr	r3, [pc, #476]	; (8003d3c <HAL_RCC_OscConfig+0x474>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d118      	bne.n	8003b9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b6a:	4b74      	ldr	r3, [pc, #464]	; (8003d3c <HAL_RCC_OscConfig+0x474>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a73      	ldr	r2, [pc, #460]	; (8003d3c <HAL_RCC_OscConfig+0x474>)
 8003b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b76:	f7fd fa89 	bl	800108c <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7e:	f7fd fa85 	bl	800108c <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e10c      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b90:	4b6a      	ldr	r3, [pc, #424]	; (8003d3c <HAL_RCC_OscConfig+0x474>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x2ea>
 8003ba4:	4b64      	ldr	r3, [pc, #400]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	4a63      	ldr	r2, [pc, #396]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003baa:	f043 0301 	orr.w	r3, r3, #1
 8003bae:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb0:	e01c      	b.n	8003bec <HAL_RCC_OscConfig+0x324>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b05      	cmp	r3, #5
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x30c>
 8003bba:	4b5f      	ldr	r3, [pc, #380]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbe:	4a5e      	ldr	r2, [pc, #376]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bc0:	f043 0304 	orr.w	r3, r3, #4
 8003bc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc6:	4b5c      	ldr	r3, [pc, #368]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bca:	4a5b      	ldr	r2, [pc, #364]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd2:	e00b      	b.n	8003bec <HAL_RCC_OscConfig+0x324>
 8003bd4:	4b58      	ldr	r3, [pc, #352]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	4a57      	ldr	r2, [pc, #348]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	6713      	str	r3, [r2, #112]	; 0x70
 8003be0:	4b55      	ldr	r3, [pc, #340]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be4:	4a54      	ldr	r2, [pc, #336]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003be6:	f023 0304 	bic.w	r3, r3, #4
 8003bea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d015      	beq.n	8003c20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf4:	f7fd fa4a 	bl	800108c <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bfc:	f7fd fa46 	bl	800108c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e0cb      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c12:	4b49      	ldr	r3, [pc, #292]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0ee      	beq.n	8003bfc <HAL_RCC_OscConfig+0x334>
 8003c1e:	e014      	b.n	8003c4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c20:	f7fd fa34 	bl	800108c <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c28:	f7fd fa30 	bl	800108c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e0b5      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3e:	4b3e      	ldr	r3, [pc, #248]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1ee      	bne.n	8003c28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d105      	bne.n	8003c5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c50:	4b39      	ldr	r3, [pc, #228]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	4a38      	ldr	r2, [pc, #224]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80a1 	beq.w	8003da8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c66:	4b34      	ldr	r3, [pc, #208]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d05c      	beq.n	8003d2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d141      	bne.n	8003cfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c7a:	4b31      	ldr	r3, [pc, #196]	; (8003d40 <HAL_RCC_OscConfig+0x478>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fd fa04 	bl	800108c <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fd fa00 	bl	800108c <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e087      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c9a:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f0      	bne.n	8003c88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69da      	ldr	r2, [r3, #28]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	019b      	lsls	r3, r3, #6
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	085b      	lsrs	r3, r3, #1
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	041b      	lsls	r3, r3, #16
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	061b      	lsls	r3, r3, #24
 8003cca:	491b      	ldr	r1, [pc, #108]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <HAL_RCC_OscConfig+0x478>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd6:	f7fd f9d9 	bl	800108c <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cde:	f7fd f9d5 	bl	800108c <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e05c      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf0:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x416>
 8003cfc:	e054      	b.n	8003da8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfe:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <HAL_RCC_OscConfig+0x478>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fd f9c2 	bl	800108c <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0c:	f7fd f9be 	bl	800108c <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e045      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <HAL_RCC_OscConfig+0x470>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x444>
 8003d2a:	e03d      	b.n	8003da8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d107      	bne.n	8003d44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e038      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	40007000 	.word	0x40007000
 8003d40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_RCC_OscConfig+0x4ec>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d028      	beq.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d121      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d11a      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d74:	4013      	ands	r3, r2
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d111      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	085b      	lsrs	r3, r3, #1
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d107      	bne.n	8003da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800

08003db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0cc      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dcc:	4b68      	ldr	r3, [pc, #416]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d90c      	bls.n	8003df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dda:	4b65      	ldr	r3, [pc, #404]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b63      	ldr	r3, [pc, #396]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d001      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0b8      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d020      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e0c:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	4a58      	ldr	r2, [pc, #352]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e24:	4b53      	ldr	r3, [pc, #332]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	4a52      	ldr	r2, [pc, #328]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e30:	4b50      	ldr	r3, [pc, #320]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	494d      	ldr	r1, [pc, #308]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d044      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d107      	bne.n	8003e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e56:	4b47      	ldr	r3, [pc, #284]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d119      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e07f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d003      	beq.n	8003e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e76:	4b3f      	ldr	r3, [pc, #252]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e06f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e067      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e96:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f023 0203 	bic.w	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4934      	ldr	r1, [pc, #208]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea8:	f7fd f8f0 	bl	800108c <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb0:	f7fd f8ec 	bl	800108c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e04f      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 020c 	and.w	r2, r3, #12
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d1eb      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b25      	ldr	r3, [pc, #148]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d20c      	bcs.n	8003f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b22      	ldr	r3, [pc, #136]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e032      	b.n	8003f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f0c:	4b19      	ldr	r3, [pc, #100]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	4916      	ldr	r1, [pc, #88]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f2a:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	490e      	ldr	r1, [pc, #56]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f3e:	f000 f821 	bl	8003f84 <HAL_RCC_GetSysClockFreq>
 8003f42:	4602      	mov	r2, r0
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	490a      	ldr	r1, [pc, #40]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003f50:	5ccb      	ldrb	r3, [r1, r3]
 8003f52:	fa22 f303 	lsr.w	r3, r2, r3
 8003f56:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fd f850 	bl	8001004 <HAL_InitTick>

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40023c00 	.word	0x40023c00
 8003f74:	40023800 	.word	0x40023800
 8003f78:	0800a1e4 	.word	0x0800a1e4
 8003f7c:	20000004 	.word	0x20000004
 8003f80:	20000008 	.word	0x20000008

08003f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f88:	b094      	sub	sp, #80	; 0x50
 8003f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f90:	2300      	movs	r3, #0
 8003f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f94:	2300      	movs	r3, #0
 8003f96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f9c:	4b79      	ldr	r3, [pc, #484]	; (8004184 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 030c 	and.w	r3, r3, #12
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d00d      	beq.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	f200 80e1 	bhi.w	8004170 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8003fb6:	e0db      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fb8:	4b73      	ldr	r3, [pc, #460]	; (8004188 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003fbc:	e0db      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fbe:	4b73      	ldr	r3, [pc, #460]	; (800418c <HAL_RCC_GetSysClockFreq+0x208>)
 8003fc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fc2:	e0d8      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fc4:	4b6f      	ldr	r3, [pc, #444]	; (8004184 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fcc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fce:	4b6d      	ldr	r3, [pc, #436]	; (8004184 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d063      	beq.n	80040a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fda:	4b6a      	ldr	r3, [pc, #424]	; (8004184 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	099b      	lsrs	r3, r3, #6
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fe4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fec:	633b      	str	r3, [r7, #48]	; 0x30
 8003fee:	2300      	movs	r3, #0
 8003ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ff6:	4622      	mov	r2, r4
 8003ff8:	462b      	mov	r3, r5
 8003ffa:	f04f 0000 	mov.w	r0, #0
 8003ffe:	f04f 0100 	mov.w	r1, #0
 8004002:	0159      	lsls	r1, r3, #5
 8004004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004008:	0150      	lsls	r0, r2, #5
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4621      	mov	r1, r4
 8004010:	1a51      	subs	r1, r2, r1
 8004012:	6139      	str	r1, [r7, #16]
 8004014:	4629      	mov	r1, r5
 8004016:	eb63 0301 	sbc.w	r3, r3, r1
 800401a:	617b      	str	r3, [r7, #20]
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004028:	4659      	mov	r1, fp
 800402a:	018b      	lsls	r3, r1, #6
 800402c:	4651      	mov	r1, sl
 800402e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004032:	4651      	mov	r1, sl
 8004034:	018a      	lsls	r2, r1, #6
 8004036:	4651      	mov	r1, sl
 8004038:	ebb2 0801 	subs.w	r8, r2, r1
 800403c:	4659      	mov	r1, fp
 800403e:	eb63 0901 	sbc.w	r9, r3, r1
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800404e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004052:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004056:	4690      	mov	r8, r2
 8004058:	4699      	mov	r9, r3
 800405a:	4623      	mov	r3, r4
 800405c:	eb18 0303 	adds.w	r3, r8, r3
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	462b      	mov	r3, r5
 8004064:	eb49 0303 	adc.w	r3, r9, r3
 8004068:	60fb      	str	r3, [r7, #12]
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004076:	4629      	mov	r1, r5
 8004078:	024b      	lsls	r3, r1, #9
 800407a:	4621      	mov	r1, r4
 800407c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004080:	4621      	mov	r1, r4
 8004082:	024a      	lsls	r2, r1, #9
 8004084:	4610      	mov	r0, r2
 8004086:	4619      	mov	r1, r3
 8004088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800408a:	2200      	movs	r2, #0
 800408c:	62bb      	str	r3, [r7, #40]	; 0x28
 800408e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004090:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004094:	f7fc f8ec 	bl	8000270 <__aeabi_uldivmod>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4613      	mov	r3, r2
 800409e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040a0:	e058      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a2:	4b38      	ldr	r3, [pc, #224]	; (8004184 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	099b      	lsrs	r3, r3, #6
 80040a8:	2200      	movs	r2, #0
 80040aa:	4618      	mov	r0, r3
 80040ac:	4611      	mov	r1, r2
 80040ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040b2:	623b      	str	r3, [r7, #32]
 80040b4:	2300      	movs	r3, #0
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
 80040b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040bc:	4642      	mov	r2, r8
 80040be:	464b      	mov	r3, r9
 80040c0:	f04f 0000 	mov.w	r0, #0
 80040c4:	f04f 0100 	mov.w	r1, #0
 80040c8:	0159      	lsls	r1, r3, #5
 80040ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ce:	0150      	lsls	r0, r2, #5
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4641      	mov	r1, r8
 80040d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80040da:	4649      	mov	r1, r9
 80040dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80040ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80040f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80040f4:	ebb2 040a 	subs.w	r4, r2, sl
 80040f8:	eb63 050b 	sbc.w	r5, r3, fp
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	00eb      	lsls	r3, r5, #3
 8004106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800410a:	00e2      	lsls	r2, r4, #3
 800410c:	4614      	mov	r4, r2
 800410e:	461d      	mov	r5, r3
 8004110:	4643      	mov	r3, r8
 8004112:	18e3      	adds	r3, r4, r3
 8004114:	603b      	str	r3, [r7, #0]
 8004116:	464b      	mov	r3, r9
 8004118:	eb45 0303 	adc.w	r3, r5, r3
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	e9d7 4500 	ldrd	r4, r5, [r7]
 800412a:	4629      	mov	r1, r5
 800412c:	028b      	lsls	r3, r1, #10
 800412e:	4621      	mov	r1, r4
 8004130:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004134:	4621      	mov	r1, r4
 8004136:	028a      	lsls	r2, r1, #10
 8004138:	4610      	mov	r0, r2
 800413a:	4619      	mov	r1, r3
 800413c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800413e:	2200      	movs	r2, #0
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	61fa      	str	r2, [r7, #28]
 8004144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004148:	f7fc f892 	bl	8000270 <__aeabi_uldivmod>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	4613      	mov	r3, r2
 8004152:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004154:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_RCC_GetSysClockFreq+0x200>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	0c1b      	lsrs	r3, r3, #16
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	3301      	adds	r3, #1
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004164:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004168:	fbb2 f3f3 	udiv	r3, r2, r3
 800416c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800416e:	e002      	b.n	8004176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_RCC_GetSysClockFreq+0x204>)
 8004172:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004178:	4618      	mov	r0, r3
 800417a:	3750      	adds	r7, #80	; 0x50
 800417c:	46bd      	mov	sp, r7
 800417e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004182:	bf00      	nop
 8004184:	40023800 	.word	0x40023800
 8004188:	00f42400 	.word	0x00f42400
 800418c:	007a1200 	.word	0x007a1200

08004190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004194:	4b03      	ldr	r3, [pc, #12]	; (80041a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004196:	681b      	ldr	r3, [r3, #0]
}
 8004198:	4618      	mov	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000004 	.word	0x20000004

080041a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041ac:	f7ff fff0 	bl	8004190 <HAL_RCC_GetHCLKFreq>
 80041b0:	4602      	mov	r2, r0
 80041b2:	4b05      	ldr	r3, [pc, #20]	; (80041c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	0a9b      	lsrs	r3, r3, #10
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	4903      	ldr	r1, [pc, #12]	; (80041cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041be:	5ccb      	ldrb	r3, [r1, r3]
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40023800 	.word	0x40023800
 80041cc:	0800a1f4 	.word	0x0800a1f4

080041d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041d4:	f7ff ffdc 	bl	8004190 <HAL_RCC_GetHCLKFreq>
 80041d8:	4602      	mov	r2, r0
 80041da:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	0b5b      	lsrs	r3, r3, #13
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	4903      	ldr	r1, [pc, #12]	; (80041f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041e6:	5ccb      	ldrb	r3, [r1, r3]
 80041e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	40023800 	.word	0x40023800
 80041f4:	0800a1f4 	.word	0x0800a1f4

080041f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d105      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800421c:	2b00      	cmp	r3, #0
 800421e:	d035      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004220:	4b62      	ldr	r3, [pc, #392]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004226:	f7fc ff31 	bl	800108c <HAL_GetTick>
 800422a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800422c:	e008      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800422e:	f7fc ff2d 	bl	800108c <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e0b0      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004240:	4b5b      	ldr	r3, [pc, #364]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f0      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	019a      	lsls	r2, r3, #6
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	071b      	lsls	r3, r3, #28
 8004258:	4955      	ldr	r1, [pc, #340]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004260:	4b52      	ldr	r3, [pc, #328]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004262:	2201      	movs	r2, #1
 8004264:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004266:	f7fc ff11 	bl	800108c <HAL_GetTick>
 800426a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800426c:	e008      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800426e:	f7fc ff0d 	bl	800108c <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e090      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004280:	4b4b      	ldr	r3, [pc, #300]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8083 	beq.w	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	4b44      	ldr	r3, [pc, #272]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	4a43      	ldr	r2, [pc, #268]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a8:	6413      	str	r3, [r2, #64]	; 0x40
 80042aa:	4b41      	ldr	r3, [pc, #260]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80042b6:	4b3f      	ldr	r3, [pc, #252]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a3e      	ldr	r2, [pc, #248]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042c2:	f7fc fee3 	bl	800108c <HAL_GetTick>
 80042c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042c8:	e008      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042ca:	f7fc fedf 	bl	800108c <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e062      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042dc:	4b35      	ldr	r3, [pc, #212]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042e8:	4b31      	ldr	r3, [pc, #196]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d02f      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	429a      	cmp	r2, r3
 8004304:	d028      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004306:	4b2a      	ldr	r3, [pc, #168]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800430e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004310:	4b29      	ldr	r3, [pc, #164]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004316:	4b28      	ldr	r3, [pc, #160]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800431c:	4a24      	ldr	r2, [pc, #144]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004322:	4b23      	ldr	r3, [pc, #140]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b01      	cmp	r3, #1
 800432c:	d114      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800432e:	f7fc fead 	bl	800108c <HAL_GetTick>
 8004332:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004334:	e00a      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004336:	f7fc fea9 	bl	800108c <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	f241 3288 	movw	r2, #5000	; 0x1388
 8004344:	4293      	cmp	r3, r2
 8004346:	d901      	bls.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e02a      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434c:	4b18      	ldr	r3, [pc, #96]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0ee      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004360:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004364:	d10d      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004366:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800437a:	490d      	ldr	r1, [pc, #52]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800437c:	4313      	orrs	r3, r2
 800437e:	608b      	str	r3, [r1, #8]
 8004380:	e005      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004382:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004388:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800438c:	6093      	str	r3, [r2, #8]
 800438e:	4b08      	ldr	r3, [pc, #32]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004390:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800439a:	4905      	ldr	r1, [pc, #20]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800439c:	4313      	orrs	r3, r2
 800439e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	42470068 	.word	0x42470068
 80043b0:	40023800 	.word	0x40023800
 80043b4:	40007000 	.word	0x40007000
 80043b8:	42470e40 	.word	0x42470e40

080043bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d13e      	bne.n	8004458 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80043da:	4b23      	ldr	r3, [pc, #140]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d12f      	bne.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80043f0:	4b1e      	ldr	r3, [pc, #120]	; (800446c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043f2:	617b      	str	r3, [r7, #20]
          break;
 80043f4:	e02f      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043f6:	4b1c      	ldr	r3, [pc, #112]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004402:	d108      	bne.n	8004416 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004404:	4b18      	ldr	r3, [pc, #96]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800440c:	4a18      	ldr	r2, [pc, #96]	; (8004470 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800440e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	e007      	b.n	8004426 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004416:	4b14      	ldr	r3, [pc, #80]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800441e:	4a15      	ldr	r2, [pc, #84]	; (8004474 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004426:	4b10      	ldr	r3, [pc, #64]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442c:	099b      	lsrs	r3, r3, #6
 800442e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	fb02 f303 	mul.w	r3, r2, r3
 8004438:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800443a:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800443c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004440:	0f1b      	lsrs	r3, r3, #28
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	617b      	str	r3, [r7, #20]
          break;
 800444e:	e002      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]
          break;
 8004454:	bf00      	nop
        }
      }
      break;
 8004456:	bf00      	nop
    }
  }
  return frequency;
 8004458:	697b      	ldr	r3, [r7, #20]
}
 800445a:	4618      	mov	r0, r3
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40023800 	.word	0x40023800
 800446c:	00bb8000 	.word	0x00bb8000
 8004470:	007a1200 	.word	0x007a1200
 8004474:	00f42400 	.word	0x00f42400

08004478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e07b      	b.n	8004582 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	2b00      	cmp	r3, #0
 8004490:	d108      	bne.n	80044a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800449a:	d009      	beq.n	80044b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	61da      	str	r2, [r3, #28]
 80044a2:	e005      	b.n	80044b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fc fbde 	bl	8000c8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	ea42 0103 	orr.w	r1, r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	0c1b      	lsrs	r3, r3, #16
 800454e:	f003 0104 	and.w	r1, r3, #4
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	f003 0210 	and.w	r2, r3, #16
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	69da      	ldr	r2, [r3, #28]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004570:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b082      	sub	sp, #8
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e03f      	b.n	800461c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d106      	bne.n	80045b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f7fc fc8b 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2224      	movs	r2, #36	; 0x24
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fc7a 	bl	8004ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695a      	ldr	r2, [r3, #20]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004602:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b0ba      	sub	sp, #232	; 0xe8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800464a:	2300      	movs	r3, #0
 800464c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004650:	2300      	movs	r3, #0
 8004652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10f      	bne.n	800468a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800466a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <HAL_UART_IRQHandler+0x66>
 8004676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fb65 	bl	8004d52 <UART_Receive_IT>
      return;
 8004688:	e256      	b.n	8004b38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800468a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 80de 	beq.w	8004850 <HAL_UART_IRQHandler+0x22c>
 8004694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d106      	bne.n	80046ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80d1 	beq.w	8004850 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00b      	beq.n	80046d2 <HAL_UART_IRQHandler+0xae>
 80046ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f043 0201 	orr.w	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00b      	beq.n	80046f6 <HAL_UART_IRQHandler+0xd2>
 80046de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f043 0202 	orr.w	r2, r3, #2
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00b      	beq.n	800471a <HAL_UART_IRQHandler+0xf6>
 8004702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f043 0204 	orr.w	r2, r3, #4
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800471a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d011      	beq.n	800474a <HAL_UART_IRQHandler+0x126>
 8004726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	2b00      	cmp	r3, #0
 8004730:	d105      	bne.n	800473e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f043 0208 	orr.w	r2, r3, #8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 81ed 	beq.w	8004b2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d008      	beq.n	8004772 <HAL_UART_IRQHandler+0x14e>
 8004760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 faf0 	bl	8004d52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477c:	2b40      	cmp	r3, #64	; 0x40
 800477e:	bf0c      	ite	eq
 8004780:	2301      	moveq	r3, #1
 8004782:	2300      	movne	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d103      	bne.n	800479e <HAL_UART_IRQHandler+0x17a>
 8004796:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800479a:	2b00      	cmp	r3, #0
 800479c:	d04f      	beq.n	800483e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f9f8 	bl	8004b94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ae:	2b40      	cmp	r3, #64	; 0x40
 80047b0:	d141      	bne.n	8004836 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3314      	adds	r3, #20
 80047b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047c0:	e853 3f00 	ldrex	r3, [r3]
 80047c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3314      	adds	r3, #20
 80047da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1d9      	bne.n	80047b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004802:	2b00      	cmp	r3, #0
 8004804:	d013      	beq.n	800482e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	4a7d      	ldr	r2, [pc, #500]	; (8004a00 <HAL_UART_IRQHandler+0x3dc>)
 800480c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	4618      	mov	r0, r3
 8004814:	f7fc fdeb 	bl	80013ee <HAL_DMA_Abort_IT>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d016      	beq.n	800484c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004828:	4610      	mov	r0, r2
 800482a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800482c:	e00e      	b.n	800484c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f99a 	bl	8004b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004834:	e00a      	b.n	800484c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f996 	bl	8004b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483c:	e006      	b.n	800484c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f992 	bl	8004b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800484a:	e170      	b.n	8004b2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484c:	bf00      	nop
    return;
 800484e:	e16e      	b.n	8004b2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	2b01      	cmp	r3, #1
 8004856:	f040 814a 	bne.w	8004aee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800485a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 8143 	beq.w	8004aee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 813c 	beq.w	8004aee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004876:	2300      	movs	r3, #0
 8004878:	60bb      	str	r3, [r7, #8]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	60bb      	str	r3, [r7, #8]
 800488a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004896:	2b40      	cmp	r3, #64	; 0x40
 8004898:	f040 80b4 	bne.w	8004a04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8140 	beq.w	8004b32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048ba:	429a      	cmp	r2, r3
 80048bc:	f080 8139 	bcs.w	8004b32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d2:	f000 8088 	beq.w	80049e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	330c      	adds	r3, #12
 80048dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	330c      	adds	r3, #12
 80048fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004902:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004906:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800490e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004912:	e841 2300 	strex	r3, r2, [r1]
 8004916:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800491a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1d9      	bne.n	80048d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3314      	adds	r3, #20
 8004928:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3314      	adds	r3, #20
 8004942:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004946:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800494a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800494e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e1      	bne.n	8004922 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3314      	adds	r3, #20
 8004964:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800496e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3314      	adds	r3, #20
 800497e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004982:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004984:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004988:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004990:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e3      	bne.n	800495e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b6:	f023 0310 	bic.w	r3, r3, #16
 80049ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	330c      	adds	r3, #12
 80049c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80049c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80049ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e3      	bne.n	80049a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fc fc94 	bl	800130e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	4619      	mov	r1, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f8c0 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049fc:	e099      	b.n	8004b32 <HAL_UART_IRQHandler+0x50e>
 80049fe:	bf00      	nop
 8004a00:	08004c5b 	.word	0x08004c5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 808b 	beq.w	8004b36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004a20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8086 	beq.w	8004b36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	330c      	adds	r3, #12
 8004a30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a34:	e853 3f00 	ldrex	r3, [r3]
 8004a38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004a4e:	647a      	str	r2, [r7, #68]	; 0x44
 8004a50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e3      	bne.n	8004a2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3314      	adds	r3, #20
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	623b      	str	r3, [r7, #32]
   return(result);
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3314      	adds	r3, #20
 8004a82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a86:	633a      	str	r2, [r7, #48]	; 0x30
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e3      	bne.n	8004a62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	330c      	adds	r3, #12
 8004aae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0310 	bic.w	r3, r3, #16
 8004abe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004acc:	61fa      	str	r2, [r7, #28]
 8004ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	69b9      	ldr	r1, [r7, #24]
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	e841 2300 	strex	r3, r2, [r1]
 8004ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e3      	bne.n	8004aa8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f848 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004aec:	e023      	b.n	8004b36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <HAL_UART_IRQHandler+0x4ea>
 8004afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f8bb 	bl	8004c82 <UART_Transmit_IT>
    return;
 8004b0c:	e014      	b.n	8004b38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00e      	beq.n	8004b38 <HAL_UART_IRQHandler+0x514>
 8004b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d008      	beq.n	8004b38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f8fb 	bl	8004d22 <UART_EndTransmit_IT>
    return;
 8004b2c:	e004      	b.n	8004b38 <HAL_UART_IRQHandler+0x514>
    return;
 8004b2e:	bf00      	nop
 8004b30:	e002      	b.n	8004b38 <HAL_UART_IRQHandler+0x514>
      return;
 8004b32:	bf00      	nop
 8004b34:	e000      	b.n	8004b38 <HAL_UART_IRQHandler+0x514>
      return;
 8004b36:	bf00      	nop
  }
}
 8004b38:	37e8      	adds	r7, #232	; 0xe8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop

08004b40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b095      	sub	sp, #84	; 0x54
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	330c      	adds	r3, #12
 8004ba2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba6:	e853 3f00 	ldrex	r3, [r3]
 8004baa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	330c      	adds	r3, #12
 8004bba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bbc:	643a      	str	r2, [r7, #64]	; 0x40
 8004bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bc4:	e841 2300 	strex	r3, r2, [r1]
 8004bc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1e5      	bne.n	8004b9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3314      	adds	r3, #20
 8004bd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	61fb      	str	r3, [r7, #28]
   return(result);
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3314      	adds	r3, #20
 8004bee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bf0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e5      	bne.n	8004bd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d119      	bne.n	8004c40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	330c      	adds	r3, #12
 8004c12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f023 0310 	bic.w	r3, r3, #16
 8004c22:	647b      	str	r3, [r7, #68]	; 0x44
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	330c      	adds	r3, #12
 8004c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c2c:	61ba      	str	r2, [r7, #24]
 8004c2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	6979      	ldr	r1, [r7, #20]
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	613b      	str	r3, [r7, #16]
   return(result);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e5      	bne.n	8004c0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c4e:	bf00      	nop
 8004c50:	3754      	adds	r7, #84	; 0x54
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f7ff ff77 	bl	8004b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c7a:	bf00      	nop
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b085      	sub	sp, #20
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b21      	cmp	r3, #33	; 0x21
 8004c94:	d13e      	bne.n	8004d14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9e:	d114      	bne.n	8004cca <UART_Transmit_IT+0x48>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d110      	bne.n	8004cca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cbc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	1c9a      	adds	r2, r3, #2
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	621a      	str	r2, [r3, #32]
 8004cc8:	e008      	b.n	8004cdc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	1c59      	adds	r1, r3, #1
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6211      	str	r1, [r2, #32]
 8004cd4:	781a      	ldrb	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10f      	bne.n	8004d10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cfe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	e000      	b.n	8004d16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d14:	2302      	movs	r3, #2
  }
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff fefc 	bl	8004b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b08c      	sub	sp, #48	; 0x30
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b22      	cmp	r3, #34	; 0x22
 8004d64:	f040 80ab 	bne.w	8004ebe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d70:	d117      	bne.n	8004da2 <UART_Receive_IT+0x50>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d113      	bne.n	8004da2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	1c9a      	adds	r2, r3, #2
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	629a      	str	r2, [r3, #40]	; 0x28
 8004da0:	e026      	b.n	8004df0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db4:	d007      	beq.n	8004dc6 <UART_Receive_IT+0x74>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10a      	bne.n	8004dd4 <UART_Receive_IT+0x82>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	e008      	b.n	8004de6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d15a      	bne.n	8004eba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0220 	bic.w	r2, r2, #32
 8004e12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695a      	ldr	r2, [r3, #20]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d135      	bne.n	8004eb0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330c      	adds	r3, #12
 8004e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f023 0310 	bic.w	r3, r3, #16
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	330c      	adds	r3, #12
 8004e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6a:	623a      	str	r2, [r7, #32]
 8004e6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	69f9      	ldr	r1, [r7, #28]
 8004e70:	6a3a      	ldr	r2, [r7, #32]
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e5      	bne.n	8004e4a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0310 	and.w	r3, r3, #16
 8004e88:	2b10      	cmp	r3, #16
 8004e8a:	d10a      	bne.n	8004ea2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff fe67 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
 8004eae:	e002      	b.n	8004eb6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff fe4f 	bl	8004b54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	e002      	b.n	8004ec0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	e000      	b.n	8004ec0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004ebe:	2302      	movs	r3, #2
  }
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3730      	adds	r7, #48	; 0x30
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ecc:	b0c0      	sub	sp, #256	; 0x100
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee4:	68d9      	ldr	r1, [r3, #12]
 8004ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	ea40 0301 	orr.w	r3, r0, r1
 8004ef0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f20:	f021 010c 	bic.w	r1, r1, #12
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f2e:	430b      	orrs	r3, r1
 8004f30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f42:	6999      	ldr	r1, [r3, #24]
 8004f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	ea40 0301 	orr.w	r3, r0, r1
 8004f4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	4b8f      	ldr	r3, [pc, #572]	; (8005194 <UART_SetConfig+0x2cc>)
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d005      	beq.n	8004f68 <UART_SetConfig+0xa0>
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4b8d      	ldr	r3, [pc, #564]	; (8005198 <UART_SetConfig+0x2d0>)
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d104      	bne.n	8004f72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f68:	f7ff f932 	bl	80041d0 <HAL_RCC_GetPCLK2Freq>
 8004f6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f70:	e003      	b.n	8004f7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f72:	f7ff f919 	bl	80041a8 <HAL_RCC_GetPCLK1Freq>
 8004f76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f84:	f040 810c 	bne.w	80051a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f9a:	4622      	mov	r2, r4
 8004f9c:	462b      	mov	r3, r5
 8004f9e:	1891      	adds	r1, r2, r2
 8004fa0:	65b9      	str	r1, [r7, #88]	; 0x58
 8004fa2:	415b      	adcs	r3, r3
 8004fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004faa:	4621      	mov	r1, r4
 8004fac:	eb12 0801 	adds.w	r8, r2, r1
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	eb43 0901 	adc.w	r9, r3, r1
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fca:	4690      	mov	r8, r2
 8004fcc:	4699      	mov	r9, r3
 8004fce:	4623      	mov	r3, r4
 8004fd0:	eb18 0303 	adds.w	r3, r8, r3
 8004fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004fd8:	462b      	mov	r3, r5
 8004fda:	eb49 0303 	adc.w	r3, r9, r3
 8004fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ff2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	18db      	adds	r3, r3, r3
 8004ffa:	653b      	str	r3, [r7, #80]	; 0x50
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	eb42 0303 	adc.w	r3, r2, r3
 8005002:	657b      	str	r3, [r7, #84]	; 0x54
 8005004:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005008:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800500c:	f7fb f930 	bl	8000270 <__aeabi_uldivmod>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4b61      	ldr	r3, [pc, #388]	; (800519c <UART_SetConfig+0x2d4>)
 8005016:	fba3 2302 	umull	r2, r3, r3, r2
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	011c      	lsls	r4, r3, #4
 800501e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005022:	2200      	movs	r2, #0
 8005024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005028:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800502c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005030:	4642      	mov	r2, r8
 8005032:	464b      	mov	r3, r9
 8005034:	1891      	adds	r1, r2, r2
 8005036:	64b9      	str	r1, [r7, #72]	; 0x48
 8005038:	415b      	adcs	r3, r3
 800503a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800503c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005040:	4641      	mov	r1, r8
 8005042:	eb12 0a01 	adds.w	sl, r2, r1
 8005046:	4649      	mov	r1, r9
 8005048:	eb43 0b01 	adc.w	fp, r3, r1
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005058:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800505c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005060:	4692      	mov	sl, r2
 8005062:	469b      	mov	fp, r3
 8005064:	4643      	mov	r3, r8
 8005066:	eb1a 0303 	adds.w	r3, sl, r3
 800506a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800506e:	464b      	mov	r3, r9
 8005070:	eb4b 0303 	adc.w	r3, fp, r3
 8005074:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005084:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005088:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800508c:	460b      	mov	r3, r1
 800508e:	18db      	adds	r3, r3, r3
 8005090:	643b      	str	r3, [r7, #64]	; 0x40
 8005092:	4613      	mov	r3, r2
 8005094:	eb42 0303 	adc.w	r3, r2, r3
 8005098:	647b      	str	r3, [r7, #68]	; 0x44
 800509a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800509e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050a2:	f7fb f8e5 	bl	8000270 <__aeabi_uldivmod>
 80050a6:	4602      	mov	r2, r0
 80050a8:	460b      	mov	r3, r1
 80050aa:	4611      	mov	r1, r2
 80050ac:	4b3b      	ldr	r3, [pc, #236]	; (800519c <UART_SetConfig+0x2d4>)
 80050ae:	fba3 2301 	umull	r2, r3, r3, r1
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	2264      	movs	r2, #100	; 0x64
 80050b6:	fb02 f303 	mul.w	r3, r2, r3
 80050ba:	1acb      	subs	r3, r1, r3
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050c2:	4b36      	ldr	r3, [pc, #216]	; (800519c <UART_SetConfig+0x2d4>)
 80050c4:	fba3 2302 	umull	r2, r3, r3, r2
 80050c8:	095b      	lsrs	r3, r3, #5
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050d0:	441c      	add	r4, r3
 80050d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050d6:	2200      	movs	r2, #0
 80050d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80050e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80050e4:	4642      	mov	r2, r8
 80050e6:	464b      	mov	r3, r9
 80050e8:	1891      	adds	r1, r2, r2
 80050ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80050ec:	415b      	adcs	r3, r3
 80050ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80050f4:	4641      	mov	r1, r8
 80050f6:	1851      	adds	r1, r2, r1
 80050f8:	6339      	str	r1, [r7, #48]	; 0x30
 80050fa:	4649      	mov	r1, r9
 80050fc:	414b      	adcs	r3, r1
 80050fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800510c:	4659      	mov	r1, fp
 800510e:	00cb      	lsls	r3, r1, #3
 8005110:	4651      	mov	r1, sl
 8005112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005116:	4651      	mov	r1, sl
 8005118:	00ca      	lsls	r2, r1, #3
 800511a:	4610      	mov	r0, r2
 800511c:	4619      	mov	r1, r3
 800511e:	4603      	mov	r3, r0
 8005120:	4642      	mov	r2, r8
 8005122:	189b      	adds	r3, r3, r2
 8005124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005128:	464b      	mov	r3, r9
 800512a:	460a      	mov	r2, r1
 800512c:	eb42 0303 	adc.w	r3, r2, r3
 8005130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005140:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005144:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005148:	460b      	mov	r3, r1
 800514a:	18db      	adds	r3, r3, r3
 800514c:	62bb      	str	r3, [r7, #40]	; 0x28
 800514e:	4613      	mov	r3, r2
 8005150:	eb42 0303 	adc.w	r3, r2, r3
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005156:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800515a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800515e:	f7fb f887 	bl	8000270 <__aeabi_uldivmod>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4b0d      	ldr	r3, [pc, #52]	; (800519c <UART_SetConfig+0x2d4>)
 8005168:	fba3 1302 	umull	r1, r3, r3, r2
 800516c:	095b      	lsrs	r3, r3, #5
 800516e:	2164      	movs	r1, #100	; 0x64
 8005170:	fb01 f303 	mul.w	r3, r1, r3
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	3332      	adds	r3, #50	; 0x32
 800517a:	4a08      	ldr	r2, [pc, #32]	; (800519c <UART_SetConfig+0x2d4>)
 800517c:	fba2 2303 	umull	r2, r3, r2, r3
 8005180:	095b      	lsrs	r3, r3, #5
 8005182:	f003 0207 	and.w	r2, r3, #7
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4422      	add	r2, r4
 800518e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005190:	e106      	b.n	80053a0 <UART_SetConfig+0x4d8>
 8005192:	bf00      	nop
 8005194:	40011000 	.word	0x40011000
 8005198:	40011400 	.word	0x40011400
 800519c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051a4:	2200      	movs	r2, #0
 80051a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80051ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80051b2:	4642      	mov	r2, r8
 80051b4:	464b      	mov	r3, r9
 80051b6:	1891      	adds	r1, r2, r2
 80051b8:	6239      	str	r1, [r7, #32]
 80051ba:	415b      	adcs	r3, r3
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
 80051be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051c2:	4641      	mov	r1, r8
 80051c4:	1854      	adds	r4, r2, r1
 80051c6:	4649      	mov	r1, r9
 80051c8:	eb43 0501 	adc.w	r5, r3, r1
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	00eb      	lsls	r3, r5, #3
 80051d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051da:	00e2      	lsls	r2, r4, #3
 80051dc:	4614      	mov	r4, r2
 80051de:	461d      	mov	r5, r3
 80051e0:	4643      	mov	r3, r8
 80051e2:	18e3      	adds	r3, r4, r3
 80051e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051e8:	464b      	mov	r3, r9
 80051ea:	eb45 0303 	adc.w	r3, r5, r3
 80051ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800520e:	4629      	mov	r1, r5
 8005210:	008b      	lsls	r3, r1, #2
 8005212:	4621      	mov	r1, r4
 8005214:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005218:	4621      	mov	r1, r4
 800521a:	008a      	lsls	r2, r1, #2
 800521c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005220:	f7fb f826 	bl	8000270 <__aeabi_uldivmod>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4b60      	ldr	r3, [pc, #384]	; (80053ac <UART_SetConfig+0x4e4>)
 800522a:	fba3 2302 	umull	r2, r3, r3, r2
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	011c      	lsls	r4, r3, #4
 8005232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005236:	2200      	movs	r2, #0
 8005238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800523c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005240:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005244:	4642      	mov	r2, r8
 8005246:	464b      	mov	r3, r9
 8005248:	1891      	adds	r1, r2, r2
 800524a:	61b9      	str	r1, [r7, #24]
 800524c:	415b      	adcs	r3, r3
 800524e:	61fb      	str	r3, [r7, #28]
 8005250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005254:	4641      	mov	r1, r8
 8005256:	1851      	adds	r1, r2, r1
 8005258:	6139      	str	r1, [r7, #16]
 800525a:	4649      	mov	r1, r9
 800525c:	414b      	adcs	r3, r1
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800526c:	4659      	mov	r1, fp
 800526e:	00cb      	lsls	r3, r1, #3
 8005270:	4651      	mov	r1, sl
 8005272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005276:	4651      	mov	r1, sl
 8005278:	00ca      	lsls	r2, r1, #3
 800527a:	4610      	mov	r0, r2
 800527c:	4619      	mov	r1, r3
 800527e:	4603      	mov	r3, r0
 8005280:	4642      	mov	r2, r8
 8005282:	189b      	adds	r3, r3, r2
 8005284:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005288:	464b      	mov	r3, r9
 800528a:	460a      	mov	r2, r1
 800528c:	eb42 0303 	adc.w	r3, r2, r3
 8005290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	67bb      	str	r3, [r7, #120]	; 0x78
 800529e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80052ac:	4649      	mov	r1, r9
 80052ae:	008b      	lsls	r3, r1, #2
 80052b0:	4641      	mov	r1, r8
 80052b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052b6:	4641      	mov	r1, r8
 80052b8:	008a      	lsls	r2, r1, #2
 80052ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052be:	f7fa ffd7 	bl	8000270 <__aeabi_uldivmod>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4611      	mov	r1, r2
 80052c8:	4b38      	ldr	r3, [pc, #224]	; (80053ac <UART_SetConfig+0x4e4>)
 80052ca:	fba3 2301 	umull	r2, r3, r3, r1
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	2264      	movs	r2, #100	; 0x64
 80052d2:	fb02 f303 	mul.w	r3, r2, r3
 80052d6:	1acb      	subs	r3, r1, r3
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	3332      	adds	r3, #50	; 0x32
 80052dc:	4a33      	ldr	r2, [pc, #204]	; (80053ac <UART_SetConfig+0x4e4>)
 80052de:	fba2 2303 	umull	r2, r3, r2, r3
 80052e2:	095b      	lsrs	r3, r3, #5
 80052e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052e8:	441c      	add	r4, r3
 80052ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052ee:	2200      	movs	r2, #0
 80052f0:	673b      	str	r3, [r7, #112]	; 0x70
 80052f2:	677a      	str	r2, [r7, #116]	; 0x74
 80052f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80052f8:	4642      	mov	r2, r8
 80052fa:	464b      	mov	r3, r9
 80052fc:	1891      	adds	r1, r2, r2
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	415b      	adcs	r3, r3
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005308:	4641      	mov	r1, r8
 800530a:	1851      	adds	r1, r2, r1
 800530c:	6039      	str	r1, [r7, #0]
 800530e:	4649      	mov	r1, r9
 8005310:	414b      	adcs	r3, r1
 8005312:	607b      	str	r3, [r7, #4]
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005320:	4659      	mov	r1, fp
 8005322:	00cb      	lsls	r3, r1, #3
 8005324:	4651      	mov	r1, sl
 8005326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800532a:	4651      	mov	r1, sl
 800532c:	00ca      	lsls	r2, r1, #3
 800532e:	4610      	mov	r0, r2
 8005330:	4619      	mov	r1, r3
 8005332:	4603      	mov	r3, r0
 8005334:	4642      	mov	r2, r8
 8005336:	189b      	adds	r3, r3, r2
 8005338:	66bb      	str	r3, [r7, #104]	; 0x68
 800533a:	464b      	mov	r3, r9
 800533c:	460a      	mov	r2, r1
 800533e:	eb42 0303 	adc.w	r3, r2, r3
 8005342:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	663b      	str	r3, [r7, #96]	; 0x60
 800534e:	667a      	str	r2, [r7, #100]	; 0x64
 8005350:	f04f 0200 	mov.w	r2, #0
 8005354:	f04f 0300 	mov.w	r3, #0
 8005358:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800535c:	4649      	mov	r1, r9
 800535e:	008b      	lsls	r3, r1, #2
 8005360:	4641      	mov	r1, r8
 8005362:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005366:	4641      	mov	r1, r8
 8005368:	008a      	lsls	r2, r1, #2
 800536a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800536e:	f7fa ff7f 	bl	8000270 <__aeabi_uldivmod>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4b0d      	ldr	r3, [pc, #52]	; (80053ac <UART_SetConfig+0x4e4>)
 8005378:	fba3 1302 	umull	r1, r3, r3, r2
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	2164      	movs	r1, #100	; 0x64
 8005380:	fb01 f303 	mul.w	r3, r1, r3
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	3332      	adds	r3, #50	; 0x32
 800538a:	4a08      	ldr	r2, [pc, #32]	; (80053ac <UART_SetConfig+0x4e4>)
 800538c:	fba2 2303 	umull	r2, r3, r2, r3
 8005390:	095b      	lsrs	r3, r3, #5
 8005392:	f003 020f 	and.w	r2, r3, #15
 8005396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4422      	add	r2, r4
 800539e:	609a      	str	r2, [r3, #8]
}
 80053a0:	bf00      	nop
 80053a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053a6:	46bd      	mov	sp, r7
 80053a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053ac:	51eb851f 	.word	0x51eb851f

080053b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053b0:	b084      	sub	sp, #16
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
 80053ba:	f107 001c 	add.w	r0, r7, #28
 80053be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d122      	bne.n	800540e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80053dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d105      	bne.n	8005402 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f001 fbee 	bl	8006be4 <USB_CoreReset>
 8005408:	4603      	mov	r3, r0
 800540a:	73fb      	strb	r3, [r7, #15]
 800540c:	e01a      	b.n	8005444 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f001 fbe2 	bl	8006be4 <USB_CoreReset>
 8005420:	4603      	mov	r3, r0
 8005422:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	639a      	str	r2, [r3, #56]	; 0x38
 8005436:	e005      	b.n	8005444 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	2b01      	cmp	r3, #1
 8005448:	d10b      	bne.n	8005462 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f043 0206 	orr.w	r2, r3, #6
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f043 0220 	orr.w	r2, r3, #32
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005462:	7bfb      	ldrb	r3, [r7, #15]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800546e:	b004      	add	sp, #16
 8005470:	4770      	bx	lr
	...

08005474 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	4613      	mov	r3, r2
 8005480:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	2b02      	cmp	r3, #2
 8005486:	d165      	bne.n	8005554 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4a41      	ldr	r2, [pc, #260]	; (8005590 <USB_SetTurnaroundTime+0x11c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d906      	bls.n	800549e <USB_SetTurnaroundTime+0x2a>
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4a40      	ldr	r2, [pc, #256]	; (8005594 <USB_SetTurnaroundTime+0x120>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d202      	bcs.n	800549e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005498:	230f      	movs	r3, #15
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	e062      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	4a3c      	ldr	r2, [pc, #240]	; (8005594 <USB_SetTurnaroundTime+0x120>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d306      	bcc.n	80054b4 <USB_SetTurnaroundTime+0x40>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	4a3b      	ldr	r2, [pc, #236]	; (8005598 <USB_SetTurnaroundTime+0x124>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d202      	bcs.n	80054b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80054ae:	230e      	movs	r3, #14
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	e057      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4a38      	ldr	r2, [pc, #224]	; (8005598 <USB_SetTurnaroundTime+0x124>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d306      	bcc.n	80054ca <USB_SetTurnaroundTime+0x56>
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4a37      	ldr	r2, [pc, #220]	; (800559c <USB_SetTurnaroundTime+0x128>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d202      	bcs.n	80054ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80054c4:	230d      	movs	r3, #13
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	e04c      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	4a33      	ldr	r2, [pc, #204]	; (800559c <USB_SetTurnaroundTime+0x128>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d306      	bcc.n	80054e0 <USB_SetTurnaroundTime+0x6c>
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	4a32      	ldr	r2, [pc, #200]	; (80055a0 <USB_SetTurnaroundTime+0x12c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d802      	bhi.n	80054e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054da:	230c      	movs	r3, #12
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	e041      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4a2f      	ldr	r2, [pc, #188]	; (80055a0 <USB_SetTurnaroundTime+0x12c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d906      	bls.n	80054f6 <USB_SetTurnaroundTime+0x82>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4a2e      	ldr	r2, [pc, #184]	; (80055a4 <USB_SetTurnaroundTime+0x130>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d802      	bhi.n	80054f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054f0:	230b      	movs	r3, #11
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	e036      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	4a2a      	ldr	r2, [pc, #168]	; (80055a4 <USB_SetTurnaroundTime+0x130>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d906      	bls.n	800550c <USB_SetTurnaroundTime+0x98>
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4a29      	ldr	r2, [pc, #164]	; (80055a8 <USB_SetTurnaroundTime+0x134>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d802      	bhi.n	800550c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005506:	230a      	movs	r3, #10
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	e02b      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4a26      	ldr	r2, [pc, #152]	; (80055a8 <USB_SetTurnaroundTime+0x134>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d906      	bls.n	8005522 <USB_SetTurnaroundTime+0xae>
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4a25      	ldr	r2, [pc, #148]	; (80055ac <USB_SetTurnaroundTime+0x138>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d202      	bcs.n	8005522 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800551c:	2309      	movs	r3, #9
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	e020      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4a21      	ldr	r2, [pc, #132]	; (80055ac <USB_SetTurnaroundTime+0x138>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d306      	bcc.n	8005538 <USB_SetTurnaroundTime+0xc4>
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4a20      	ldr	r2, [pc, #128]	; (80055b0 <USB_SetTurnaroundTime+0x13c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d802      	bhi.n	8005538 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005532:	2308      	movs	r3, #8
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	e015      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4a1d      	ldr	r2, [pc, #116]	; (80055b0 <USB_SetTurnaroundTime+0x13c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d906      	bls.n	800554e <USB_SetTurnaroundTime+0xda>
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4a1c      	ldr	r2, [pc, #112]	; (80055b4 <USB_SetTurnaroundTime+0x140>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d202      	bcs.n	800554e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005548:	2307      	movs	r3, #7
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	e00a      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800554e:	2306      	movs	r3, #6
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	e007      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005554:	79fb      	ldrb	r3, [r7, #7]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d102      	bne.n	8005560 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800555a:	2309      	movs	r3, #9
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	e001      	b.n	8005564 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005560:	2309      	movs	r3, #9
 8005562:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	68da      	ldr	r2, [r3, #12]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	029b      	lsls	r3, r3, #10
 8005578:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800557c:	431a      	orrs	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	00d8acbf 	.word	0x00d8acbf
 8005594:	00e4e1c0 	.word	0x00e4e1c0
 8005598:	00f42400 	.word	0x00f42400
 800559c:	01067380 	.word	0x01067380
 80055a0:	011a499f 	.word	0x011a499f
 80055a4:	01312cff 	.word	0x01312cff
 80055a8:	014ca43f 	.word	0x014ca43f
 80055ac:	016e3600 	.word	0x016e3600
 80055b0:	01a6ab1f 	.word	0x01a6ab1f
 80055b4:	01e84800 	.word	0x01e84800

080055b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f043 0201 	orr.w	r2, r3, #1
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f023 0201 	bic.w	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d115      	bne.n	800564a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800562a:	2001      	movs	r0, #1
 800562c:	f7fb fd3a 	bl	80010a4 <HAL_Delay>
      ms++;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3301      	adds	r3, #1
 8005634:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f001 fa45 	bl	8006ac6 <USB_GetMode>
 800563c:	4603      	mov	r3, r0
 800563e:	2b01      	cmp	r3, #1
 8005640:	d01e      	beq.n	8005680 <USB_SetCurrentMode+0x84>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b31      	cmp	r3, #49	; 0x31
 8005646:	d9f0      	bls.n	800562a <USB_SetCurrentMode+0x2e>
 8005648:	e01a      	b.n	8005680 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d115      	bne.n	800567c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800565c:	2001      	movs	r0, #1
 800565e:	f7fb fd21 	bl	80010a4 <HAL_Delay>
      ms++;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	3301      	adds	r3, #1
 8005666:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f001 fa2c 	bl	8006ac6 <USB_GetMode>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <USB_SetCurrentMode+0x84>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b31      	cmp	r3, #49	; 0x31
 8005678:	d9f0      	bls.n	800565c <USB_SetCurrentMode+0x60>
 800567a:	e001      	b.n	8005680 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e005      	b.n	800568c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b32      	cmp	r3, #50	; 0x32
 8005684:	d101      	bne.n	800568a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e000      	b.n	800568c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3710      	adds	r7, #16
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005694:	b084      	sub	sp, #16
 8005696:	b580      	push	{r7, lr}
 8005698:	b086      	sub	sp, #24
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056ae:	2300      	movs	r3, #0
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	e009      	b.n	80056c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	3340      	adds	r3, #64	; 0x40
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	2200      	movs	r2, #0
 80056c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	3301      	adds	r3, #1
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	2b0e      	cmp	r3, #14
 80056cc:	d9f2      	bls.n	80056b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d11c      	bne.n	800570e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056e2:	f043 0302 	orr.w	r3, r3, #2
 80056e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	639a      	str	r2, [r3, #56]	; 0x38
 800570c:	e00b      	b.n	8005726 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005712:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800572c:	461a      	mov	r2, r3
 800572e:	2300      	movs	r3, #0
 8005730:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005738:	4619      	mov	r1, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005740:	461a      	mov	r2, r3
 8005742:	680b      	ldr	r3, [r1, #0]
 8005744:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	2b01      	cmp	r3, #1
 800574a:	d10c      	bne.n	8005766 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800574c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d104      	bne.n	800575c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005752:	2100      	movs	r1, #0
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f965 	bl	8005a24 <USB_SetDevSpeed>
 800575a:	e008      	b.n	800576e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800575c:	2101      	movs	r1, #1
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f960 	bl	8005a24 <USB_SetDevSpeed>
 8005764:	e003      	b.n	800576e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005766:	2103      	movs	r1, #3
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f95b 	bl	8005a24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800576e:	2110      	movs	r1, #16
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f8f3 	bl	800595c <USB_FlushTxFifo>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f91f 	bl	80059c4 <USB_FlushRxFifo>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005796:	461a      	mov	r2, r3
 8005798:	2300      	movs	r3, #0
 800579a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a2:	461a      	mov	r2, r3
 80057a4:	2300      	movs	r3, #0
 80057a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ae:	461a      	mov	r2, r3
 80057b0:	2300      	movs	r3, #0
 80057b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b4:	2300      	movs	r3, #0
 80057b6:	613b      	str	r3, [r7, #16]
 80057b8:	e043      	b.n	8005842 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057d0:	d118      	bne.n	8005804 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e4:	461a      	mov	r2, r3
 80057e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	e013      	b.n	8005816 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fa:	461a      	mov	r2, r3
 80057fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	e008      	b.n	8005816 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005810:	461a      	mov	r2, r3
 8005812:	2300      	movs	r3, #0
 8005814:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005822:	461a      	mov	r2, r3
 8005824:	2300      	movs	r3, #0
 8005826:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005834:	461a      	mov	r2, r3
 8005836:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800583a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	3301      	adds	r3, #1
 8005840:	613b      	str	r3, [r7, #16]
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	429a      	cmp	r2, r3
 8005848:	d3b7      	bcc.n	80057ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800584a:	2300      	movs	r3, #0
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	e043      	b.n	80058d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005866:	d118      	bne.n	800589a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10a      	bne.n	8005884 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587a:	461a      	mov	r2, r3
 800587c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	e013      	b.n	80058ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	461a      	mov	r2, r3
 8005892:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	e008      	b.n	80058ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a6:	461a      	mov	r2, r3
 80058a8:	2300      	movs	r3, #0
 80058aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b8:	461a      	mov	r2, r3
 80058ba:	2300      	movs	r3, #0
 80058bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ca:	461a      	mov	r2, r3
 80058cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	3301      	adds	r3, #1
 80058d6:	613b      	str	r3, [r7, #16]
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d3b7      	bcc.n	8005850 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005900:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	2b00      	cmp	r3, #0
 8005906:	d105      	bne.n	8005914 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	f043 0210 	orr.w	r2, r3, #16
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	699a      	ldr	r2, [r3, #24]
 8005918:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <USB_DevInit+0x2c4>)
 800591a:	4313      	orrs	r3, r2
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005922:	2b00      	cmp	r3, #0
 8005924:	d005      	beq.n	8005932 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f043 0208 	orr.w	r2, r3, #8
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005934:	2b01      	cmp	r3, #1
 8005936:	d107      	bne.n	8005948 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005940:	f043 0304 	orr.w	r3, r3, #4
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005948:	7dfb      	ldrb	r3, [r7, #23]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005954:	b004      	add	sp, #16
 8005956:	4770      	bx	lr
 8005958:	803c3800 	.word	0x803c3800

0800595c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3301      	adds	r3, #1
 800596e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4a13      	ldr	r2, [pc, #76]	; (80059c0 <USB_FlushTxFifo+0x64>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d901      	bls.n	800597c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e01b      	b.n	80059b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	2b00      	cmp	r3, #0
 8005982:	daf2      	bge.n	800596a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	019b      	lsls	r3, r3, #6
 800598c:	f043 0220 	orr.w	r2, r3, #32
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	3301      	adds	r3, #1
 8005998:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4a08      	ldr	r2, [pc, #32]	; (80059c0 <USB_FlushTxFifo+0x64>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d901      	bls.n	80059a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e006      	b.n	80059b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	d0f0      	beq.n	8005994 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	00030d40 	.word	0x00030d40

080059c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3301      	adds	r3, #1
 80059d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4a11      	ldr	r2, [pc, #68]	; (8005a20 <USB_FlushRxFifo+0x5c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d901      	bls.n	80059e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e018      	b.n	8005a14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	daf2      	bge.n	80059d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2210      	movs	r2, #16
 80059f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3301      	adds	r3, #1
 80059f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	4a08      	ldr	r2, [pc, #32]	; (8005a20 <USB_FlushRxFifo+0x5c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d901      	bls.n	8005a06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e006      	b.n	8005a14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f003 0310 	and.w	r3, r3, #16
 8005a0e:	2b10      	cmp	r3, #16
 8005a10:	d0f0      	beq.n	80059f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	00030d40 	.word	0x00030d40

08005a24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	78fb      	ldrb	r3, [r7, #3]
 8005a3e:	68f9      	ldr	r1, [r7, #12]
 8005a40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a44:	4313      	orrs	r3, r2
 8005a46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b087      	sub	sp, #28
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 0306 	and.w	r3, r3, #6
 8005a6e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d102      	bne.n	8005a7c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a76:	2300      	movs	r3, #0
 8005a78:	75fb      	strb	r3, [r7, #23]
 8005a7a:	e00a      	b.n	8005a92 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d002      	beq.n	8005a88 <USB_GetDevSpeed+0x32>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b06      	cmp	r3, #6
 8005a86:	d102      	bne.n	8005a8e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a88:	2302      	movs	r3, #2
 8005a8a:	75fb      	strb	r3, [r7, #23]
 8005a8c:	e001      	b.n	8005a92 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a8e:	230f      	movs	r3, #15
 8005a90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	371c      	adds	r7, #28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	785b      	ldrb	r3, [r3, #1]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d13a      	bne.n	8005b32 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac2:	69da      	ldr	r2, [r3, #28]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	f003 030f 	and.w	r3, r3, #15
 8005acc:	2101      	movs	r1, #1
 8005ace:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	68f9      	ldr	r1, [r7, #12]
 8005ad6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ada:	4313      	orrs	r3, r2
 8005adc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d155      	bne.n	8005ba0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	791b      	ldrb	r3, [r3, #4]
 8005b0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	059b      	lsls	r3, r3, #22
 8005b16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	0151      	lsls	r1, r2, #5
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	440a      	add	r2, r1
 8005b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	e036      	b.n	8005ba0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b38:	69da      	ldr	r2, [r3, #28]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	2101      	movs	r1, #1
 8005b44:	fa01 f303 	lsl.w	r3, r1, r3
 8005b48:	041b      	lsls	r3, r3, #16
 8005b4a:	68f9      	ldr	r1, [r7, #12]
 8005b4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b50:	4313      	orrs	r3, r2
 8005b52:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d11a      	bne.n	8005ba0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	791b      	ldrb	r3, [r3, #4]
 8005b84:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b86:	430b      	orrs	r3, r1
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	0151      	lsls	r1, r2, #5
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	440a      	add	r2, r1
 8005b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
	...

08005bb0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	785b      	ldrb	r3, [r3, #1]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d161      	bne.n	8005c90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005be2:	d11f      	bne.n	8005c24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	0151      	lsls	r1, r2, #5
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	440a      	add	r2, r1
 8005c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	2101      	movs	r1, #1
 8005c36:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	43db      	mvns	r3, r3
 8005c3e:	68f9      	ldr	r1, [r7, #12]
 8005c40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c44:	4013      	ands	r3, r2
 8005c46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4e:	69da      	ldr	r2, [r3, #28]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	2101      	movs	r1, #1
 8005c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	43db      	mvns	r3, r3
 8005c62:	68f9      	ldr	r1, [r7, #12]
 8005c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c68:	4013      	ands	r3, r2
 8005c6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	0159      	lsls	r1, r3, #5
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	440b      	add	r3, r1
 8005c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c86:	4619      	mov	r1, r3
 8005c88:	4b35      	ldr	r3, [pc, #212]	; (8005d60 <USB_DeactivateEndpoint+0x1b0>)
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	600b      	str	r3, [r1, #0]
 8005c8e:	e060      	b.n	8005d52 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ca2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ca6:	d11f      	bne.n	8005ce8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cc6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	0151      	lsls	r1, r2, #5
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	440a      	add	r2, r1
 8005cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ce6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	f003 030f 	and.w	r3, r3, #15
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8005cfe:	041b      	lsls	r3, r3, #16
 8005d00:	43db      	mvns	r3, r3
 8005d02:	68f9      	ldr	r1, [r7, #12]
 8005d04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d08:	4013      	ands	r3, r2
 8005d0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d12:	69da      	ldr	r2, [r3, #28]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	f003 030f 	and.w	r3, r3, #15
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d22:	041b      	lsls	r3, r3, #16
 8005d24:	43db      	mvns	r3, r3
 8005d26:	68f9      	ldr	r1, [r7, #12]
 8005d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	0159      	lsls	r1, r3, #5
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	440b      	add	r3, r1
 8005d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <USB_DeactivateEndpoint+0x1b4>)
 8005d4e:	4013      	ands	r3, r2
 8005d50:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr
 8005d60:	ec337800 	.word	0xec337800
 8005d64:	eff37800 	.word	0xeff37800

08005d68 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b08a      	sub	sp, #40	; 0x28
 8005d6c:	af02      	add	r7, sp, #8
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	4613      	mov	r3, r2
 8005d74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	785b      	ldrb	r3, [r3, #1]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	f040 815c 	bne.w	8006042 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d132      	bne.n	8005df8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	0151      	lsls	r1, r2, #5
 8005da4:	69fa      	ldr	r2, [r7, #28]
 8005da6:	440a      	add	r2, r1
 8005da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005db0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005db4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	69fa      	ldr	r2, [r7, #28]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df0:	0cdb      	lsrs	r3, r3, #19
 8005df2:	04db      	lsls	r3, r3, #19
 8005df4:	6113      	str	r3, [r2, #16]
 8005df6:	e074      	b.n	8005ee2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	0151      	lsls	r1, r2, #5
 8005e0a:	69fa      	ldr	r2, [r7, #28]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e12:	0cdb      	lsrs	r3, r3, #19
 8005e14:	04db      	lsls	r3, r3, #19
 8005e16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e48:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	6999      	ldr	r1, [r3, #24]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	440b      	add	r3, r1
 8005e54:	1e59      	subs	r1, r3, #1
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e5e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005e60:	4b9d      	ldr	r3, [pc, #628]	; (80060d8 <USB_EPStartXfer+0x370>)
 8005e62:	400b      	ands	r3, r1
 8005e64:	69b9      	ldr	r1, [r7, #24]
 8005e66:	0148      	lsls	r0, r1, #5
 8005e68:	69f9      	ldr	r1, [r7, #28]
 8005e6a:	4401      	add	r1, r0
 8005e6c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e70:	4313      	orrs	r3, r2
 8005e72:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e80:	691a      	ldr	r2, [r3, #16]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e8a:	69b9      	ldr	r1, [r7, #24]
 8005e8c:	0148      	lsls	r0, r1, #5
 8005e8e:	69f9      	ldr	r1, [r7, #28]
 8005e90:	4401      	add	r1, r0
 8005e92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e96:	4313      	orrs	r3, r2
 8005e98:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	791b      	ldrb	r3, [r3, #4]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d11f      	bne.n	8005ee2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ebc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005ec0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	0151      	lsls	r1, r2, #5
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	440a      	add	r2, r1
 8005ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005edc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ee0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005ee2:	79fb      	ldrb	r3, [r7, #7]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d14b      	bne.n	8005f80 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d009      	beq.n	8005f04 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005efc:	461a      	mov	r2, r3
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	791b      	ldrb	r3, [r3, #4]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d128      	bne.n	8005f5e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d110      	bne.n	8005f3e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	0151      	lsls	r1, r2, #5
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	440a      	add	r2, r1
 8005f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f3a:	6013      	str	r3, [r2, #0]
 8005f3c:	e00f      	b.n	8005f5e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	0151      	lsls	r1, r2, #5
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	440a      	add	r2, r1
 8005f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f5c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	69fa      	ldr	r2, [r7, #28]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	e133      	b.n	80061e8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f9e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	791b      	ldrb	r3, [r3, #4]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d015      	beq.n	8005fd4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 811b 	beq.w	80061e8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	f003 030f 	and.w	r3, r3, #15
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc8:	69f9      	ldr	r1, [r7, #28]
 8005fca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	634b      	str	r3, [r1, #52]	; 0x34
 8005fd2:	e109      	b.n	80061e8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d110      	bne.n	8006006 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	e00f      	b.n	8006026 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	0151      	lsls	r1, r2, #5
 8006018:	69fa      	ldr	r2, [r7, #28]
 800601a:	440a      	add	r2, r1
 800601c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006024:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	6919      	ldr	r1, [r3, #16]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	781a      	ldrb	r2, [r3, #0]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	b298      	uxth	r0, r3
 8006034:	79fb      	ldrb	r3, [r7, #7]
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	4603      	mov	r3, r0
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 fade 	bl	80065fc <USB_WritePacket>
 8006040:	e0d2      	b.n	80061e8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	4413      	add	r3, r2
 800604a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	0151      	lsls	r1, r2, #5
 8006054:	69fa      	ldr	r2, [r7, #28]
 8006056:	440a      	add	r2, r1
 8006058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800605c:	0cdb      	lsrs	r3, r3, #19
 800605e:	04db      	lsls	r3, r3, #19
 8006060:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	0151      	lsls	r1, r2, #5
 8006074:	69fa      	ldr	r2, [r7, #28]
 8006076:	440a      	add	r2, r1
 8006078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800607c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006080:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006084:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d126      	bne.n	80060dc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	4413      	add	r3, r2
 8006096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060a4:	69b9      	ldr	r1, [r7, #24]
 80060a6:	0148      	lsls	r0, r1, #5
 80060a8:	69f9      	ldr	r1, [r7, #28]
 80060aa:	4401      	add	r1, r0
 80060ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060b0:	4313      	orrs	r3, r2
 80060b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060d2:	6113      	str	r3, [r2, #16]
 80060d4:	e03a      	b.n	800614c <USB_EPStartXfer+0x3e4>
 80060d6:	bf00      	nop
 80060d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	699a      	ldr	r2, [r3, #24]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	4413      	add	r3, r2
 80060e6:	1e5a      	subs	r2, r3, #1
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	8afa      	ldrh	r2, [r7, #22]
 80060f8:	fb03 f202 	mul.w	r2, r3, r2
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610c:	691a      	ldr	r2, [r3, #16]
 800610e:	8afb      	ldrh	r3, [r7, #22]
 8006110:	04d9      	lsls	r1, r3, #19
 8006112:	4b38      	ldr	r3, [pc, #224]	; (80061f4 <USB_EPStartXfer+0x48c>)
 8006114:	400b      	ands	r3, r1
 8006116:	69b9      	ldr	r1, [r7, #24]
 8006118:	0148      	lsls	r0, r1, #5
 800611a:	69f9      	ldr	r1, [r7, #28]
 800611c:	4401      	add	r1, r0
 800611e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006122:	4313      	orrs	r3, r2
 8006124:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006132:	691a      	ldr	r2, [r3, #16]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800613c:	69b9      	ldr	r1, [r7, #24]
 800613e:	0148      	lsls	r0, r1, #5
 8006140:	69f9      	ldr	r1, [r7, #28]
 8006142:	4401      	add	r1, r0
 8006144:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006148:	4313      	orrs	r3, r2
 800614a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800614c:	79fb      	ldrb	r3, [r7, #7]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d10d      	bne.n	800616e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d009      	beq.n	800616e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	6919      	ldr	r1, [r3, #16]
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616a:	460a      	mov	r2, r1
 800616c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	791b      	ldrb	r3, [r3, #4]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d128      	bne.n	80061c8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006182:	2b00      	cmp	r3, #0
 8006184:	d110      	bne.n	80061a8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	0151      	lsls	r1, r2, #5
 8006198:	69fa      	ldr	r2, [r7, #28]
 800619a:	440a      	add	r2, r1
 800619c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	e00f      	b.n	80061c8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	0151      	lsls	r1, r2, #5
 80061da:	69fa      	ldr	r2, [r7, #28]
 80061dc:	440a      	add	r2, r1
 80061de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3720      	adds	r7, #32
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	1ff80000 	.word	0x1ff80000

080061f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	4613      	mov	r3, r2
 8006204:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	785b      	ldrb	r3, [r3, #1]
 8006214:	2b01      	cmp	r3, #1
 8006216:	f040 80ce 	bne.w	80063b6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d132      	bne.n	8006288 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	0151      	lsls	r1, r2, #5
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	440a      	add	r2, r1
 8006238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800623c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006240:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006244:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	0151      	lsls	r1, r2, #5
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	440a      	add	r2, r1
 800625c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006260:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006264:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	4413      	add	r3, r2
 800626e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	0151      	lsls	r1, r2, #5
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	440a      	add	r2, r1
 800627c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006280:	0cdb      	lsrs	r3, r3, #19
 8006282:	04db      	lsls	r3, r3, #19
 8006284:	6113      	str	r3, [r2, #16]
 8006286:	e04e      	b.n	8006326 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	0151      	lsls	r1, r2, #5
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	440a      	add	r2, r1
 800629e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a2:	0cdb      	lsrs	r3, r3, #19
 80062a4:	04db      	lsls	r3, r3, #19
 80062a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	693a      	ldr	r2, [r7, #16]
 80062b8:	0151      	lsls	r1, r2, #5
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	440a      	add	r2, r1
 80062be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	699a      	ldr	r2, [r3, #24]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d903      	bls.n	80062e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630c:	691a      	ldr	r2, [r3, #16]
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006316:	6939      	ldr	r1, [r7, #16]
 8006318:	0148      	lsls	r0, r1, #5
 800631a:	6979      	ldr	r1, [r7, #20]
 800631c:	4401      	add	r1, r0
 800631e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006322:	4313      	orrs	r3, r2
 8006324:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d11e      	bne.n	800636a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d009      	beq.n	8006348 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006340:	461a      	mov	r2, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	0151      	lsls	r1, r2, #5
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	440a      	add	r2, r1
 800635e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006362:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	e097      	b.n	800649a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	0151      	lsls	r1, r2, #5
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	440a      	add	r2, r1
 8006380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006384:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006388:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 8083 	beq.w	800649a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	f003 030f 	and.w	r3, r3, #15
 80063a4:	2101      	movs	r1, #1
 80063a6:	fa01 f303 	lsl.w	r3, r1, r3
 80063aa:	6979      	ldr	r1, [r7, #20]
 80063ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063b0:	4313      	orrs	r3, r2
 80063b2:	634b      	str	r3, [r1, #52]	; 0x34
 80063b4:	e071      	b.n	800649a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063d0:	0cdb      	lsrs	r3, r3, #19
 80063d2:	04db      	lsls	r3, r3, #19
 80063d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	697a      	ldr	r2, [r7, #20]
 8006426:	440a      	add	r2, r1
 8006428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800642c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006430:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643e:	691a      	ldr	r2, [r3, #16]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006448:	6939      	ldr	r1, [r7, #16]
 800644a:	0148      	lsls	r0, r1, #5
 800644c:	6979      	ldr	r1, [r7, #20]
 800644e:	4401      	add	r1, r0
 8006450:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006454:	4313      	orrs	r3, r2
 8006456:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006458:	79fb      	ldrb	r3, [r7, #7]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d10d      	bne.n	800647a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d009      	beq.n	800647a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	6919      	ldr	r1, [r3, #16]
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006476:	460a      	mov	r2, r1
 8006478:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	440a      	add	r2, r1
 8006490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006494:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006498:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	371c      	adds	r7, #28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	785b      	ldrb	r3, [r3, #1]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d14a      	bne.n	800655c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064de:	f040 8086 	bne.w	80065ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	7812      	ldrb	r2, [r2, #0]
 80064f6:	0151      	lsls	r1, r2, #5
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	440a      	add	r2, r1
 80064fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006500:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006504:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	7812      	ldrb	r2, [r2, #0]
 800651a:	0151      	lsls	r1, r2, #5
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	440a      	add	r2, r1
 8006520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006524:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006528:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3301      	adds	r3, #1
 800652e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f242 7210 	movw	r2, #10000	; 0x2710
 8006536:	4293      	cmp	r3, r2
 8006538:	d902      	bls.n	8006540 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	75fb      	strb	r3, [r7, #23]
          break;
 800653e:	e056      	b.n	80065ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006558:	d0e7      	beq.n	800652a <USB_EPStopXfer+0x82>
 800655a:	e048      	b.n	80065ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006574:	d13b      	bne.n	80065ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	7812      	ldrb	r2, [r2, #0]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	440a      	add	r2, r1
 8006590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006594:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006598:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	7812      	ldrb	r2, [r2, #0]
 80065ae:	0151      	lsls	r1, r2, #5
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	440a      	add	r2, r1
 80065b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3301      	adds	r3, #1
 80065c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d902      	bls.n	80065d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	75fb      	strb	r3, [r7, #23]
          break;
 80065d2:	e00c      	b.n	80065ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065ec:	d0e7      	beq.n	80065be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	371c      	adds	r7, #28
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b089      	sub	sp, #36	; 0x24
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	4611      	mov	r1, r2
 8006608:	461a      	mov	r2, r3
 800660a:	460b      	mov	r3, r1
 800660c:	71fb      	strb	r3, [r7, #7]
 800660e:	4613      	mov	r3, r2
 8006610:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800661a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800661e:	2b00      	cmp	r3, #0
 8006620:	d123      	bne.n	800666a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006622:	88bb      	ldrh	r3, [r7, #4]
 8006624:	3303      	adds	r3, #3
 8006626:	089b      	lsrs	r3, r3, #2
 8006628:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800662a:	2300      	movs	r3, #0
 800662c:	61bb      	str	r3, [r7, #24]
 800662e:	e018      	b.n	8006662 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006630:	79fb      	ldrb	r3, [r7, #7]
 8006632:	031a      	lsls	r2, r3, #12
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	4413      	add	r3, r2
 8006638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800663c:	461a      	mov	r2, r3
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	3301      	adds	r3, #1
 8006648:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	3301      	adds	r3, #1
 800664e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	3301      	adds	r3, #1
 8006654:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	3301      	adds	r3, #1
 800665a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	3301      	adds	r3, #1
 8006660:	61bb      	str	r3, [r7, #24]
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	429a      	cmp	r2, r3
 8006668:	d3e2      	bcc.n	8006630 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3724      	adds	r7, #36	; 0x24
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006678:	b480      	push	{r7}
 800667a:	b08b      	sub	sp, #44	; 0x2c
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	4613      	mov	r3, r2
 8006684:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800668e:	88fb      	ldrh	r3, [r7, #6]
 8006690:	089b      	lsrs	r3, r3, #2
 8006692:	b29b      	uxth	r3, r3
 8006694:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006696:	88fb      	ldrh	r3, [r7, #6]
 8006698:	f003 0303 	and.w	r3, r3, #3
 800669c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800669e:	2300      	movs	r3, #0
 80066a0:	623b      	str	r3, [r7, #32]
 80066a2:	e014      	b.n	80066ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	3301      	adds	r3, #1
 80066b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	3301      	adds	r3, #1
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066be:	3301      	adds	r3, #1
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	3301      	adds	r3, #1
 80066c6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	3301      	adds	r3, #1
 80066cc:	623b      	str	r3, [r7, #32]
 80066ce:	6a3a      	ldr	r2, [r7, #32]
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d3e6      	bcc.n	80066a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80066d6:	8bfb      	ldrh	r3, [r7, #30]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01e      	beq.n	800671a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e6:	461a      	mov	r2, r3
 80066e8:	f107 0310 	add.w	r3, r7, #16
 80066ec:	6812      	ldr	r2, [r2, #0]
 80066ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	fa22 f303 	lsr.w	r3, r2, r3
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	701a      	strb	r2, [r3, #0]
      i++;
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	3301      	adds	r3, #1
 8006706:	623b      	str	r3, [r7, #32]
      pDest++;
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	3301      	adds	r3, #1
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800670e:	8bfb      	ldrh	r3, [r7, #30]
 8006710:	3b01      	subs	r3, #1
 8006712:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006714:	8bfb      	ldrh	r3, [r7, #30]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1ea      	bne.n	80066f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800671c:	4618      	mov	r0, r3
 800671e:	372c      	adds	r7, #44	; 0x2c
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	785b      	ldrb	r3, [r3, #1]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d12c      	bne.n	800679e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	db12      	blt.n	800677c <USB_EPSetStall+0x54>
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00f      	beq.n	800677c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	0151      	lsls	r1, r2, #5
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	440a      	add	r2, r1
 8006772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006776:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800677a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	0151      	lsls	r1, r2, #5
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	440a      	add	r2, r1
 8006792:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006796:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800679a:	6013      	str	r3, [r2, #0]
 800679c:	e02b      	b.n	80067f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	db12      	blt.n	80067d6 <USB_EPSetStall+0xae>
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00f      	beq.n	80067d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	0151      	lsls	r1, r2, #5
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	440a      	add	r2, r1
 80067cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	0151      	lsls	r1, r2, #5
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	440a      	add	r2, r1
 80067ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	785b      	ldrb	r3, [r3, #1]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d128      	bne.n	8006872 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	0151      	lsls	r1, r2, #5
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	440a      	add	r2, r1
 8006836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800683a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800683e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	791b      	ldrb	r3, [r3, #4]
 8006844:	2b03      	cmp	r3, #3
 8006846:	d003      	beq.n	8006850 <USB_EPClearStall+0x4c>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	791b      	ldrb	r3, [r3, #4]
 800684c:	2b02      	cmp	r3, #2
 800684e:	d138      	bne.n	80068c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	440a      	add	r2, r1
 8006866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	e027      	b.n	80068c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	0151      	lsls	r1, r2, #5
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	440a      	add	r2, r1
 8006888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800688c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006890:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	791b      	ldrb	r3, [r3, #4]
 8006896:	2b03      	cmp	r3, #3
 8006898:	d003      	beq.n	80068a2 <USB_EPClearStall+0x9e>
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	791b      	ldrb	r3, [r3, #4]
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d10f      	bne.n	80068c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	0151      	lsls	r1, r2, #5
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	440a      	add	r2, r1
 80068b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80068f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006904:	68f9      	ldr	r1, [r7, #12]
 8006906:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800690a:	4313      	orrs	r3, r2
 800690c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006936:	f023 0303 	bic.w	r3, r3, #3
 800693a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800694a:	f023 0302 	bic.w	r3, r3, #2
 800694e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800695e:	b480      	push	{r7}
 8006960:	b085      	sub	sp, #20
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006978:	f023 0303 	bic.w	r3, r3, #3
 800697c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800698c:	f043 0302 	orr.w	r3, r3, #2
 8006990:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4013      	ands	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80069b8:	68fb      	ldr	r3, [r7, #12]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b085      	sub	sp, #20
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	68ba      	ldr	r2, [r7, #8]
 80069e6:	4013      	ands	r3, r2
 80069e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	0c1b      	lsrs	r3, r3, #16
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b085      	sub	sp, #20
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	b29b      	uxth	r3, r3
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b085      	sub	sp, #20
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	460b      	mov	r3, r1
 8006a38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006a3e:	78fb      	ldrb	r3, [r7, #3]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b087      	sub	sp, #28
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	460b      	mov	r3, r1
 8006a74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a8c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006a8e:	78fb      	ldrb	r3, [r7, #3]
 8006a90:	f003 030f 	and.w	r3, r3, #15
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	fa22 f303 	lsr.w	r3, r2, r3
 8006a9a:	01db      	lsls	r3, r3, #7
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006aa4:	78fb      	ldrb	r3, [r7, #3]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	371c      	adds	r7, #28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b083      	sub	sp, #12
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b085      	sub	sp, #20
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006afc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006b00:	f023 0307 	bic.w	r3, r3, #7
 8006b04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	460b      	mov	r3, r1
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	333c      	adds	r3, #60	; 0x3c
 8006b3e:	3304      	adds	r3, #4
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	4a26      	ldr	r2, [pc, #152]	; (8006be0 <USB_EP0_OutStart+0xb8>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d90a      	bls.n	8006b62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b5c:	d101      	bne.n	8006b62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	e037      	b.n	8006bd2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b68:	461a      	mov	r2, r3
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b90:	f043 0318 	orr.w	r3, r3, #24
 8006b94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ba4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ba8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006baa:	7afb      	ldrb	r3, [r7, #11]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d10f      	bne.n	8006bd0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006bce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	4f54300a 	.word	0x4f54300a

08006be4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4a13      	ldr	r2, [pc, #76]	; (8006c48 <USB_CoreReset+0x64>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d901      	bls.n	8006c02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e01b      	b.n	8006c3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	daf2      	bge.n	8006bf0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	f043 0201 	orr.w	r2, r3, #1
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4a09      	ldr	r2, [pc, #36]	; (8006c48 <USB_CoreReset+0x64>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d901      	bls.n	8006c2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e006      	b.n	8006c3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d0f0      	beq.n	8006c1a <USB_CoreReset+0x36>

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	00030d40 	.word	0x00030d40

08006c4c <eMBMasterReqWriteMultipleHoldingRegister>:
 * @return error code
 */
eMBMasterReqErrCode
eMBMasterReqWriteMultipleHoldingRegister( UCHAR ucSndAddr,
		USHORT usRegAddr, USHORT usNRegs, USHORT * pusDataBuffer, LONG lTimeOut )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	607b      	str	r3, [r7, #4]
 8006c54:	4603      	mov	r3, r0
 8006c56:	73fb      	strb	r3, [r7, #15]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	81bb      	strh	r3, [r7, #12]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    USHORT                 usRegIndex = 0;
 8006c60:	2300      	movs	r3, #0
 8006c62:	837b      	strh	r3, [r7, #26]
    UCHAR Length;
     USHORT          usCRC16;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8006c64:	2300      	movs	r3, #0
 8006c66:	767b      	strb	r3, [r7, #25]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	2bf3      	cmp	r3, #243	; 0xf3
 8006c6c:	d902      	bls.n	8006c74 <eMBMasterReqWriteMultipleHoldingRegister+0x28>
 8006c6e:	2302      	movs	r3, #2
 8006c70:	767b      	strb	r3, [r7, #25]
 8006c72:	e068      	b.n	8006d46 <eMBMasterReqWriteMultipleHoldingRegister+0xfa>
    else
    {
//		vMBMasterGetPDUSndBuf(&ucMBFrame);
//		vMBMasterSetDestAddress(ucSndAddr);

       	MBbuffer[0]=ucSndAddr; //Slave Address
 8006c74:	4a36      	ldr	r2, [pc, #216]	; (8006d50 <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
 8006c78:	7013      	strb	r3, [r2, #0]
        ucMBFrame = &MBbuffer[1];  // Start from offset 1
 8006c7a:	4b36      	ldr	r3, [pc, #216]	; (8006d54 <eMBMasterReqWriteMultipleHoldingRegister+0x108>)
 8006c7c:	61fb      	str	r3, [r7, #28]

		ucMBFrame[MB_PDU_FUNC_OFF]                     = MB_FUNC_WRITE_MULTIPLE_REGISTERS;
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	2210      	movs	r2, #16
 8006c82:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF]       = usRegAddr >> 8;
 8006c84:	89bb      	ldrh	r3, [r7, #12]
 8006c86:	0a1b      	lsrs	r3, r3, #8
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	b2d2      	uxtb	r2, r2
 8006c90:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1]   = usRegAddr;
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	3302      	adds	r3, #2
 8006c96:	89ba      	ldrh	r2, [r7, #12]
 8006c98:	b2d2      	uxtb	r2, r2
 8006c9a:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF]     = usNRegs >> 8;
 8006c9c:	897b      	ldrh	r3, [r7, #10]
 8006c9e:	0a1b      	lsrs	r3, r3, #8
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	3303      	adds	r3, #3
 8006ca6:	b2d2      	uxtb	r2, r2
 8006ca8:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] = usNRegs ;
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	3304      	adds	r3, #4
 8006cae:	897a      	ldrh	r2, [r7, #10]
 8006cb0:	b2d2      	uxtb	r2, r2
 8006cb2:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF]    = usNRegs * 2;
 8006cb4:	897b      	ldrh	r3, [r7, #10]
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	3305      	adds	r3, #5
 8006cbc:	0052      	lsls	r2, r2, #1
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	701a      	strb	r2, [r3, #0]
		ucMBFrame += MB_PDU_REQ_WRITE_MUL_VALUES_OFF;
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	3306      	adds	r3, #6
 8006cc6:	61fb      	str	r3, [r7, #28]
		while( usNRegs > usRegIndex)
 8006cc8:	e017      	b.n	8006cfa <eMBMasterReqWriteMultipleHoldingRegister+0xae>
		{
			*ucMBFrame++ = pusDataBuffer[usRegIndex] >> 8;
 8006cca:	8b7b      	ldrh	r3, [r7, #26]
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	0a1b      	lsrs	r3, r3, #8
 8006cd6:	b299      	uxth	r1, r3
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	61fa      	str	r2, [r7, #28]
 8006cde:	b2ca      	uxtb	r2, r1
 8006ce0:	701a      	strb	r2, [r3, #0]
			*ucMBFrame++ = pusDataBuffer[usRegIndex++] ;
 8006ce2:	8b7b      	ldrh	r3, [r7, #26]
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	837a      	strh	r2, [r7, #26]
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	4413      	add	r3, r2
 8006cee:	8819      	ldrh	r1, [r3, #0]
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	61fa      	str	r2, [r7, #28]
 8006cf6:	b2ca      	uxtb	r2, r1
 8006cf8:	701a      	strb	r2, [r3, #0]
		while( usNRegs > usRegIndex)
 8006cfa:	897a      	ldrh	r2, [r7, #10]
 8006cfc:	8b7b      	ldrh	r3, [r7, #26]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d8e3      	bhi.n	8006cca <eMBMasterReqWriteMultipleHoldingRegister+0x7e>
		}

		Length = MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_MUL_SIZE_MIN + 2*usNRegs + 3 ; //Address + CRC
 8006d02:	897b      	ldrh	r3, [r7, #10]
 8006d04:	3303      	adds	r3, #3
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	3303      	adds	r3, #3
 8006d0e:	763b      	strb	r3, [r7, #24]
        usCRC16 = usMBCRC16( &MBbuffer[0], Length-2 );
 8006d10:	7e3b      	ldrb	r3, [r7, #24]
 8006d12:	3b02      	subs	r3, #2
 8006d14:	4619      	mov	r1, r3
 8006d16:	480e      	ldr	r0, [pc, #56]	; (8006d50 <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 8006d18:	f000 f81e 	bl	8006d58 <usMBCRC16>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	82fb      	strh	r3, [r7, #22]

        MBbuffer[Length-1] = usCRC16 >> 8;
 8006d20:	8afb      	ldrh	r3, [r7, #22]
 8006d22:	0a1b      	lsrs	r3, r3, #8
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	7e3b      	ldrb	r3, [r7, #24]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	b2d1      	uxtb	r1, r2
 8006d2c:	4a08      	ldr	r2, [pc, #32]	; (8006d50 <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 8006d2e:	54d1      	strb	r1, [r2, r3]
        MBbuffer[Length-2] = usCRC16 & 0xff;
 8006d30:	7e3b      	ldrb	r3, [r7, #24]
 8006d32:	3b02      	subs	r3, #2
 8006d34:	8afa      	ldrh	r2, [r7, #22]
 8006d36:	b2d1      	uxtb	r1, r2
 8006d38:	4a05      	ldr	r2, [pc, #20]	; (8006d50 <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 8006d3a:	54d1      	strb	r1, [r2, r3]

		 CDC_Transmit_FS(MBbuffer,Length);
 8006d3c:	7e3b      	ldrb	r3, [r7, #24]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	4803      	ldr	r0, [pc, #12]	; (8006d50 <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 8006d42:	f002 f8db 	bl	8008efc <CDC_Transmit_FS>

//		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_MUL_SIZE_MIN + 2*usNRegs );
//		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
//		eErrStatus = eMBMasterWaitRequestFinish( );
    }
    return eErrStatus;
 8006d46:	7e7b      	ldrb	r3, [r7, #25]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3720      	adds	r7, #32
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20000410 	.word	0x20000410
 8006d54:	20000411 	.word	0x20000411

08006d58 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	460b      	mov	r3, r1
 8006d62:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8006d64:	23ff      	movs	r3, #255	; 0xff
 8006d66:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8006d68:	23ff      	movs	r3, #255	; 0xff
 8006d6a:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8006d6c:	e013      	b.n	8006d96 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	781a      	ldrb	r2, [r3, #0]
 8006d76:	7bbb      	ldrb	r3, [r7, #14]
 8006d78:	4053      	eors	r3, r2
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8006d7e:	4a0f      	ldr	r2, [pc, #60]	; (8006dbc <usMBCRC16+0x64>)
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4413      	add	r3, r2
 8006d84:	781a      	ldrb	r2, [r3, #0]
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
 8006d88:	4053      	eors	r3, r2
 8006d8a:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8006d8c:	4a0c      	ldr	r2, [pc, #48]	; (8006dc0 <usMBCRC16+0x68>)
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	4413      	add	r3, r2
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8006d96:	887b      	ldrh	r3, [r7, #2]
 8006d98:	1e5a      	subs	r2, r3, #1
 8006d9a:	807a      	strh	r2, [r7, #2]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1e6      	bne.n	8006d6e <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	b21a      	sxth	r2, r3
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	b21b      	sxth	r3, r3
 8006daa:	4313      	orrs	r3, r2
 8006dac:	b21b      	sxth	r3, r3
 8006dae:	b29b      	uxth	r3, r3
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	0800a1fc 	.word	0x0800a1fc
 8006dc0:	0800a2fc 	.word	0x0800a2fc

08006dc4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006dd0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006dd4:	f002 fcb8 	bl	8009748 <USBD_static_malloc>
 8006dd8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d109      	bne.n	8006df4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	32b0      	adds	r2, #176	; 0xb0
 8006dea:	2100      	movs	r1, #0
 8006dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006df0:	2302      	movs	r3, #2
 8006df2:	e0d4      	b.n	8006f9e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006df4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006df8:	2100      	movs	r1, #0
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f002 fd1c 	bl	8009838 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	32b0      	adds	r2, #176	; 0xb0
 8006e0a:	68f9      	ldr	r1, [r7, #12]
 8006e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	32b0      	adds	r2, #176	; 0xb0
 8006e1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	7c1b      	ldrb	r3, [r3, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d138      	bne.n	8006e9e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e2c:	4b5e      	ldr	r3, [pc, #376]	; (8006fa8 <USBD_CDC_Init+0x1e4>)
 8006e2e:	7819      	ldrb	r1, [r3, #0]
 8006e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e34:	2202      	movs	r2, #2
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f002 fb63 	bl	8009502 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e3c:	4b5a      	ldr	r3, [pc, #360]	; (8006fa8 <USBD_CDC_Init+0x1e4>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	f003 020f 	and.w	r2, r3, #15
 8006e44:	6879      	ldr	r1, [r7, #4]
 8006e46:	4613      	mov	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	440b      	add	r3, r1
 8006e50:	3324      	adds	r3, #36	; 0x24
 8006e52:	2201      	movs	r2, #1
 8006e54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e56:	4b55      	ldr	r3, [pc, #340]	; (8006fac <USBD_CDC_Init+0x1e8>)
 8006e58:	7819      	ldrb	r1, [r3, #0]
 8006e5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e5e:	2202      	movs	r2, #2
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f002 fb4e 	bl	8009502 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e66:	4b51      	ldr	r3, [pc, #324]	; (8006fac <USBD_CDC_Init+0x1e8>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	f003 020f 	and.w	r2, r3, #15
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	4613      	mov	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4413      	add	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	440b      	add	r3, r1
 8006e7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e7e:	2201      	movs	r2, #1
 8006e80:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006e82:	4b4b      	ldr	r3, [pc, #300]	; (8006fb0 <USBD_CDC_Init+0x1ec>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	f003 020f 	and.w	r2, r3, #15
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	440b      	add	r3, r1
 8006e96:	3326      	adds	r3, #38	; 0x26
 8006e98:	2210      	movs	r2, #16
 8006e9a:	801a      	strh	r2, [r3, #0]
 8006e9c:	e035      	b.n	8006f0a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e9e:	4b42      	ldr	r3, [pc, #264]	; (8006fa8 <USBD_CDC_Init+0x1e4>)
 8006ea0:	7819      	ldrb	r1, [r3, #0]
 8006ea2:	2340      	movs	r3, #64	; 0x40
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f002 fb2b 	bl	8009502 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006eac:	4b3e      	ldr	r3, [pc, #248]	; (8006fa8 <USBD_CDC_Init+0x1e4>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	f003 020f 	and.w	r2, r3, #15
 8006eb4:	6879      	ldr	r1, [r7, #4]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	3324      	adds	r3, #36	; 0x24
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ec6:	4b39      	ldr	r3, [pc, #228]	; (8006fac <USBD_CDC_Init+0x1e8>)
 8006ec8:	7819      	ldrb	r1, [r3, #0]
 8006eca:	2340      	movs	r3, #64	; 0x40
 8006ecc:	2202      	movs	r2, #2
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f002 fb17 	bl	8009502 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006ed4:	4b35      	ldr	r3, [pc, #212]	; (8006fac <USBD_CDC_Init+0x1e8>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	f003 020f 	and.w	r2, r3, #15
 8006edc:	6879      	ldr	r1, [r7, #4]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	440b      	add	r3, r1
 8006ee8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006eec:	2201      	movs	r2, #1
 8006eee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006ef0:	4b2f      	ldr	r3, [pc, #188]	; (8006fb0 <USBD_CDC_Init+0x1ec>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	f003 020f 	and.w	r2, r3, #15
 8006ef8:	6879      	ldr	r1, [r7, #4]
 8006efa:	4613      	mov	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	440b      	add	r3, r1
 8006f04:	3326      	adds	r3, #38	; 0x26
 8006f06:	2210      	movs	r2, #16
 8006f08:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f0a:	4b29      	ldr	r3, [pc, #164]	; (8006fb0 <USBD_CDC_Init+0x1ec>)
 8006f0c:	7819      	ldrb	r1, [r3, #0]
 8006f0e:	2308      	movs	r3, #8
 8006f10:	2203      	movs	r2, #3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f002 faf5 	bl	8009502 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006f18:	4b25      	ldr	r3, [pc, #148]	; (8006fb0 <USBD_CDC_Init+0x1ec>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	f003 020f 	and.w	r2, r3, #15
 8006f20:	6879      	ldr	r1, [r7, #4]
 8006f22:	4613      	mov	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	440b      	add	r3, r1
 8006f2c:	3324      	adds	r3, #36	; 0x24
 8006f2e:	2201      	movs	r2, #1
 8006f30:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	33b0      	adds	r3, #176	; 0xb0
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	4413      	add	r3, r2
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006f68:	2302      	movs	r3, #2
 8006f6a:	e018      	b.n	8006f9e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	7c1b      	ldrb	r3, [r3, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10a      	bne.n	8006f8a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f74:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <USBD_CDC_Init+0x1e8>)
 8006f76:	7819      	ldrb	r1, [r3, #0]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f002 fbac 	bl	80096e0 <USBD_LL_PrepareReceive>
 8006f88:	e008      	b.n	8006f9c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f8a:	4b08      	ldr	r3, [pc, #32]	; (8006fac <USBD_CDC_Init+0x1e8>)
 8006f8c:	7819      	ldrb	r1, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f94:	2340      	movs	r3, #64	; 0x40
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f002 fba2 	bl	80096e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20000097 	.word	0x20000097
 8006fac:	20000098 	.word	0x20000098
 8006fb0:	20000099 	.word	0x20000099

08006fb4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006fc0:	4b3a      	ldr	r3, [pc, #232]	; (80070ac <USBD_CDC_DeInit+0xf8>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f002 fac1 	bl	800954e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006fcc:	4b37      	ldr	r3, [pc, #220]	; (80070ac <USBD_CDC_DeInit+0xf8>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	f003 020f 	and.w	r2, r3, #15
 8006fd4:	6879      	ldr	r1, [r7, #4]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	440b      	add	r3, r1
 8006fe0:	3324      	adds	r3, #36	; 0x24
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006fe6:	4b32      	ldr	r3, [pc, #200]	; (80070b0 <USBD_CDC_DeInit+0xfc>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f002 faae 	bl	800954e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006ff2:	4b2f      	ldr	r3, [pc, #188]	; (80070b0 <USBD_CDC_DeInit+0xfc>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	f003 020f 	and.w	r2, r3, #15
 8006ffa:	6879      	ldr	r1, [r7, #4]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800700a:	2200      	movs	r2, #0
 800700c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800700e:	4b29      	ldr	r3, [pc, #164]	; (80070b4 <USBD_CDC_DeInit+0x100>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f002 fa9a 	bl	800954e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800701a:	4b26      	ldr	r3, [pc, #152]	; (80070b4 <USBD_CDC_DeInit+0x100>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	f003 020f 	and.w	r2, r3, #15
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	4613      	mov	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	440b      	add	r3, r1
 800702e:	3324      	adds	r3, #36	; 0x24
 8007030:	2200      	movs	r2, #0
 8007032:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007034:	4b1f      	ldr	r3, [pc, #124]	; (80070b4 <USBD_CDC_DeInit+0x100>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	f003 020f 	and.w	r2, r3, #15
 800703c:	6879      	ldr	r1, [r7, #4]
 800703e:	4613      	mov	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	4413      	add	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	440b      	add	r3, r1
 8007048:	3326      	adds	r3, #38	; 0x26
 800704a:	2200      	movs	r2, #0
 800704c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	32b0      	adds	r2, #176	; 0xb0
 8007058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d01f      	beq.n	80070a0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	33b0      	adds	r3, #176	; 0xb0
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	32b0      	adds	r2, #176	; 0xb0
 800707e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007082:	4618      	mov	r0, r3
 8007084:	f002 fb6e 	bl	8009764 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	32b0      	adds	r2, #176	; 0xb0
 8007092:	2100      	movs	r1, #0
 8007094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20000097 	.word	0x20000097
 80070b0:	20000098 	.word	0x20000098
 80070b4:	20000099 	.word	0x20000099

080070b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	32b0      	adds	r2, #176	; 0xb0
 80070cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e0bf      	b.n	8007268 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d050      	beq.n	8007196 <USBD_CDC_Setup+0xde>
 80070f4:	2b20      	cmp	r3, #32
 80070f6:	f040 80af 	bne.w	8007258 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	88db      	ldrh	r3, [r3, #6]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d03a      	beq.n	8007178 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	b25b      	sxtb	r3, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	da1b      	bge.n	8007144 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	33b0      	adds	r3, #176	; 0xb0
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007122:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	88d2      	ldrh	r2, [r2, #6]
 8007128:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	88db      	ldrh	r3, [r3, #6]
 800712e:	2b07      	cmp	r3, #7
 8007130:	bf28      	it	cs
 8007132:	2307      	movcs	r3, #7
 8007134:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	89fa      	ldrh	r2, [r7, #14]
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 fd89 	bl	8008c54 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007142:	e090      	b.n	8007266 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	785a      	ldrb	r2, [r3, #1]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	88db      	ldrh	r3, [r3, #6]
 8007152:	2b3f      	cmp	r3, #63	; 0x3f
 8007154:	d803      	bhi.n	800715e <USBD_CDC_Setup+0xa6>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	88db      	ldrh	r3, [r3, #6]
 800715a:	b2da      	uxtb	r2, r3
 800715c:	e000      	b.n	8007160 <USBD_CDC_Setup+0xa8>
 800715e:	2240      	movs	r2, #64	; 0x40
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007166:	6939      	ldr	r1, [r7, #16]
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800716e:	461a      	mov	r2, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f001 fd9b 	bl	8008cac <USBD_CtlPrepareRx>
      break;
 8007176:	e076      	b.n	8007266 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	33b0      	adds	r3, #176	; 0xb0
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	7850      	ldrb	r0, [r2, #1]
 800718e:	2200      	movs	r2, #0
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	4798      	blx	r3
      break;
 8007194:	e067      	b.n	8007266 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	785b      	ldrb	r3, [r3, #1]
 800719a:	2b0b      	cmp	r3, #11
 800719c:	d851      	bhi.n	8007242 <USBD_CDC_Setup+0x18a>
 800719e:	a201      	add	r2, pc, #4	; (adr r2, 80071a4 <USBD_CDC_Setup+0xec>)
 80071a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a4:	080071d5 	.word	0x080071d5
 80071a8:	08007251 	.word	0x08007251
 80071ac:	08007243 	.word	0x08007243
 80071b0:	08007243 	.word	0x08007243
 80071b4:	08007243 	.word	0x08007243
 80071b8:	08007243 	.word	0x08007243
 80071bc:	08007243 	.word	0x08007243
 80071c0:	08007243 	.word	0x08007243
 80071c4:	08007243 	.word	0x08007243
 80071c8:	08007243 	.word	0x08007243
 80071cc:	080071ff 	.word	0x080071ff
 80071d0:	08007229 	.word	0x08007229
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d107      	bne.n	80071f0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80071e0:	f107 030a 	add.w	r3, r7, #10
 80071e4:	2202      	movs	r2, #2
 80071e6:	4619      	mov	r1, r3
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 fd33 	bl	8008c54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071ee:	e032      	b.n	8007256 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f001 fcbd 	bl	8008b72 <USBD_CtlError>
            ret = USBD_FAIL;
 80071f8:	2303      	movs	r3, #3
 80071fa:	75fb      	strb	r3, [r7, #23]
          break;
 80071fc:	e02b      	b.n	8007256 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b03      	cmp	r3, #3
 8007208:	d107      	bne.n	800721a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800720a:	f107 030d 	add.w	r3, r7, #13
 800720e:	2201      	movs	r2, #1
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f001 fd1e 	bl	8008c54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007218:	e01d      	b.n	8007256 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 fca8 	bl	8008b72 <USBD_CtlError>
            ret = USBD_FAIL;
 8007222:	2303      	movs	r3, #3
 8007224:	75fb      	strb	r3, [r7, #23]
          break;
 8007226:	e016      	b.n	8007256 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800722e:	b2db      	uxtb	r3, r3
 8007230:	2b03      	cmp	r3, #3
 8007232:	d00f      	beq.n	8007254 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 fc9b 	bl	8008b72 <USBD_CtlError>
            ret = USBD_FAIL;
 800723c:	2303      	movs	r3, #3
 800723e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007240:	e008      	b.n	8007254 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 fc94 	bl	8008b72 <USBD_CtlError>
          ret = USBD_FAIL;
 800724a:	2303      	movs	r3, #3
 800724c:	75fb      	strb	r3, [r7, #23]
          break;
 800724e:	e002      	b.n	8007256 <USBD_CDC_Setup+0x19e>
          break;
 8007250:	bf00      	nop
 8007252:	e008      	b.n	8007266 <USBD_CDC_Setup+0x1ae>
          break;
 8007254:	bf00      	nop
      }
      break;
 8007256:	e006      	b.n	8007266 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f001 fc89 	bl	8008b72 <USBD_CtlError>
      ret = USBD_FAIL;
 8007260:	2303      	movs	r3, #3
 8007262:	75fb      	strb	r3, [r7, #23]
      break;
 8007264:	bf00      	nop
  }

  return (uint8_t)ret;
 8007266:	7dfb      	ldrb	r3, [r7, #23]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007282:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	32b0      	adds	r2, #176	; 0xb0
 800728e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007296:	2303      	movs	r3, #3
 8007298:	e065      	b.n	8007366 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	32b0      	adds	r2, #176	; 0xb0
 80072a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072aa:	78fb      	ldrb	r3, [r7, #3]
 80072ac:	f003 020f 	and.w	r2, r3, #15
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	440b      	add	r3, r1
 80072bc:	3318      	adds	r3, #24
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d02f      	beq.n	8007324 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	f003 020f 	and.w	r2, r3, #15
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	4613      	mov	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	440b      	add	r3, r1
 80072d6:	3318      	adds	r3, #24
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	78fb      	ldrb	r3, [r7, #3]
 80072dc:	f003 010f 	and.w	r1, r3, #15
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	460b      	mov	r3, r1
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	440b      	add	r3, r1
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4403      	add	r3, r0
 80072ec:	3348      	adds	r3, #72	; 0x48
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80072f4:	fb01 f303 	mul.w	r3, r1, r3
 80072f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d112      	bne.n	8007324 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	f003 020f 	and.w	r2, r3, #15
 8007304:	6879      	ldr	r1, [r7, #4]
 8007306:	4613      	mov	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	440b      	add	r3, r1
 8007310:	3318      	adds	r3, #24
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007316:	78f9      	ldrb	r1, [r7, #3]
 8007318:	2300      	movs	r3, #0
 800731a:	2200      	movs	r2, #0
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f002 f9be 	bl	800969e <USBD_LL_Transmit>
 8007322:	e01f      	b.n	8007364 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2200      	movs	r2, #0
 8007328:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	33b0      	adds	r3, #176	; 0xb0
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d010      	beq.n	8007364 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	33b0      	adds	r3, #176	; 0xb0
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007360:	78fa      	ldrb	r2, [r7, #3]
 8007362:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	460b      	mov	r3, r1
 8007378:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	32b0      	adds	r2, #176	; 0xb0
 8007384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007388:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	32b0      	adds	r2, #176	; 0xb0
 8007394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800739c:	2303      	movs	r3, #3
 800739e:	e01a      	b.n	80073d6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f002 f9bc 	bl	8009722 <USBD_LL_GetRxDataSize>
 80073aa:	4602      	mov	r2, r0
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	33b0      	adds	r3, #176	; 0xb0
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80073d0:	4611      	mov	r1, r2
 80073d2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	32b0      	adds	r2, #176	; 0xb0
 80073f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e025      	b.n	800744c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	33b0      	adds	r3, #176	; 0xb0
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d01a      	beq.n	800744a <USBD_CDC_EP0_RxReady+0x6c>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800741a:	2bff      	cmp	r3, #255	; 0xff
 800741c:	d015      	beq.n	800744a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	33b0      	adds	r3, #176	; 0xb0
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007436:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800743e:	b292      	uxth	r2, r2
 8007440:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	22ff      	movs	r2, #255	; 0xff
 8007446:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800745c:	2182      	movs	r1, #130	; 0x82
 800745e:	4818      	ldr	r0, [pc, #96]	; (80074c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007460:	f000 fd4f 	bl	8007f02 <USBD_GetEpDesc>
 8007464:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007466:	2101      	movs	r1, #1
 8007468:	4815      	ldr	r0, [pc, #84]	; (80074c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800746a:	f000 fd4a 	bl	8007f02 <USBD_GetEpDesc>
 800746e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007470:	2181      	movs	r1, #129	; 0x81
 8007472:	4813      	ldr	r0, [pc, #76]	; (80074c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007474:	f000 fd45 	bl	8007f02 <USBD_GetEpDesc>
 8007478:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2210      	movs	r2, #16
 8007484:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d006      	beq.n	800749a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	2200      	movs	r2, #0
 8007490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007494:	711a      	strb	r2, [r3, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d006      	beq.n	80074ae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074a8:	711a      	strb	r2, [r3, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2243      	movs	r2, #67	; 0x43
 80074b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074b4:	4b02      	ldr	r3, [pc, #8]	; (80074c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	20000054 	.word	0x20000054

080074c4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074cc:	2182      	movs	r1, #130	; 0x82
 80074ce:	4818      	ldr	r0, [pc, #96]	; (8007530 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074d0:	f000 fd17 	bl	8007f02 <USBD_GetEpDesc>
 80074d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074d6:	2101      	movs	r1, #1
 80074d8:	4815      	ldr	r0, [pc, #84]	; (8007530 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074da:	f000 fd12 	bl	8007f02 <USBD_GetEpDesc>
 80074de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074e0:	2181      	movs	r1, #129	; 0x81
 80074e2:	4813      	ldr	r0, [pc, #76]	; (8007530 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80074e4:	f000 fd0d 	bl	8007f02 <USBD_GetEpDesc>
 80074e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d002      	beq.n	80074f6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	2210      	movs	r2, #16
 80074f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d006      	beq.n	800750a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	2200      	movs	r2, #0
 8007500:	711a      	strb	r2, [r3, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f042 0202 	orr.w	r2, r2, #2
 8007508:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d006      	beq.n	800751e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	711a      	strb	r2, [r3, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f042 0202 	orr.w	r2, r2, #2
 800751c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2243      	movs	r2, #67	; 0x43
 8007522:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007524:	4b02      	ldr	r3, [pc, #8]	; (8007530 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007526:	4618      	mov	r0, r3
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20000054 	.word	0x20000054

08007534 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800753c:	2182      	movs	r1, #130	; 0x82
 800753e:	4818      	ldr	r0, [pc, #96]	; (80075a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007540:	f000 fcdf 	bl	8007f02 <USBD_GetEpDesc>
 8007544:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007546:	2101      	movs	r1, #1
 8007548:	4815      	ldr	r0, [pc, #84]	; (80075a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800754a:	f000 fcda 	bl	8007f02 <USBD_GetEpDesc>
 800754e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007550:	2181      	movs	r1, #129	; 0x81
 8007552:	4813      	ldr	r0, [pc, #76]	; (80075a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007554:	f000 fcd5 	bl	8007f02 <USBD_GetEpDesc>
 8007558:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	2210      	movs	r2, #16
 8007564:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d006      	beq.n	800757a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	2200      	movs	r2, #0
 8007570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007574:	711a      	strb	r2, [r3, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d006      	beq.n	800758e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007588:	711a      	strb	r2, [r3, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2243      	movs	r2, #67	; 0x43
 8007592:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007594:	4b02      	ldr	r3, [pc, #8]	; (80075a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20000054 	.word	0x20000054

080075a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	220a      	movs	r2, #10
 80075b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80075b2:	4b03      	ldr	r3, [pc, #12]	; (80075c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	20000010 	.word	0x20000010

080075c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e009      	b.n	80075ec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	33b0      	adds	r3, #176	; 0xb0
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	32b0      	adds	r2, #176	; 0xb0
 800760e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007612:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800761a:	2303      	movs	r3, #3
 800761c:	e008      	b.n	8007630 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	371c      	adds	r7, #28
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	32b0      	adds	r2, #176	; 0xb0
 8007650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007654:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800765c:	2303      	movs	r3, #3
 800765e:	e004      	b.n	800766a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	683a      	ldr	r2, [r7, #0]
 8007664:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
	...

08007678 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	32b0      	adds	r2, #176	; 0xb0
 800768a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800768e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007690:	2301      	movs	r3, #1
 8007692:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	32b0      	adds	r2, #176	; 0xb0
 800769e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80076a6:	2303      	movs	r3, #3
 80076a8:	e025      	b.n	80076f6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d11f      	bne.n	80076f4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80076bc:	4b10      	ldr	r3, [pc, #64]	; (8007700 <USBD_CDC_TransmitPacket+0x88>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	f003 020f 	and.w	r2, r3, #15
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	4613      	mov	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4403      	add	r3, r0
 80076d6:	3318      	adds	r3, #24
 80076d8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80076da:	4b09      	ldr	r3, [pc, #36]	; (8007700 <USBD_CDC_TransmitPacket+0x88>)
 80076dc:	7819      	ldrb	r1, [r3, #0]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f001 ffd7 	bl	800969e <USBD_LL_Transmit>

    ret = USBD_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	20000097 	.word	0x20000097

08007704 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	32b0      	adds	r2, #176	; 0xb0
 8007716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800771a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	32b0      	adds	r2, #176	; 0xb0
 8007726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800772e:	2303      	movs	r3, #3
 8007730:	e018      	b.n	8007764 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	7c1b      	ldrb	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10a      	bne.n	8007750 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800773a:	4b0c      	ldr	r3, [pc, #48]	; (800776c <USBD_CDC_ReceivePacket+0x68>)
 800773c:	7819      	ldrb	r1, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f001 ffc9 	bl	80096e0 <USBD_LL_PrepareReceive>
 800774e:	e008      	b.n	8007762 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007750:	4b06      	ldr	r3, [pc, #24]	; (800776c <USBD_CDC_ReceivePacket+0x68>)
 8007752:	7819      	ldrb	r1, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800775a:	2340      	movs	r3, #64	; 0x40
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 ffbf 	bl	80096e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	20000098 	.word	0x20000098

08007770 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	4613      	mov	r3, r2
 800777c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007784:	2303      	movs	r3, #3
 8007786:	e01f      	b.n	80077c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	79fa      	ldrb	r2, [r7, #7]
 80077ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f001 fe39 	bl	8009434 <USBD_LL_Init>
 80077c2:	4603      	mov	r3, r0
 80077c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3718      	adds	r7, #24
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e025      	b.n	8007834 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	32ae      	adds	r2, #174	; 0xae
 80077fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00f      	beq.n	8007824 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	32ae      	adds	r2, #174	; 0xae
 800780e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	f107 020e 	add.w	r2, r7, #14
 8007818:	4610      	mov	r0, r2
 800781a:	4798      	blx	r3
 800781c:	4602      	mov	r2, r0
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f001 fe41 	bl	80094cc <USBD_LL_Start>
 800784a:	4603      	mov	r3, r0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800785c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800785e:	4618      	mov	r0, r3
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b084      	sub	sp, #16
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	460b      	mov	r3, r1
 8007874:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007880:	2b00      	cmp	r3, #0
 8007882:	d009      	beq.n	8007898 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	78fa      	ldrb	r2, [r7, #3]
 800788e:	4611      	mov	r1, r2
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	4798      	blx	r3
 8007894:	4603      	mov	r3, r0
 8007896:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007898:	7bfb      	ldrb	r3, [r7, #15]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	460b      	mov	r3, r1
 80078ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	78fa      	ldrb	r2, [r7, #3]
 80078bc:	4611      	mov	r1, r2
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	4798      	blx	r3
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80078c8:	2303      	movs	r3, #3
 80078ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f001 f908 	bl	8008afe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80078fc:	461a      	mov	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800790a:	f003 031f 	and.w	r3, r3, #31
 800790e:	2b02      	cmp	r3, #2
 8007910:	d01a      	beq.n	8007948 <USBD_LL_SetupStage+0x72>
 8007912:	2b02      	cmp	r3, #2
 8007914:	d822      	bhi.n	800795c <USBD_LL_SetupStage+0x86>
 8007916:	2b00      	cmp	r3, #0
 8007918:	d002      	beq.n	8007920 <USBD_LL_SetupStage+0x4a>
 800791a:	2b01      	cmp	r3, #1
 800791c:	d00a      	beq.n	8007934 <USBD_LL_SetupStage+0x5e>
 800791e:	e01d      	b.n	800795c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fb5f 	bl	8007fec <USBD_StdDevReq>
 800792e:	4603      	mov	r3, r0
 8007930:	73fb      	strb	r3, [r7, #15]
      break;
 8007932:	e020      	b.n	8007976 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fbc7 	bl	80080d0 <USBD_StdItfReq>
 8007942:	4603      	mov	r3, r0
 8007944:	73fb      	strb	r3, [r7, #15]
      break;
 8007946:	e016      	b.n	8007976 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fc29 	bl	80081a8 <USBD_StdEPReq>
 8007956:	4603      	mov	r3, r0
 8007958:	73fb      	strb	r3, [r7, #15]
      break;
 800795a:	e00c      	b.n	8007976 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007962:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007966:	b2db      	uxtb	r3, r3
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f001 fe0e 	bl	800958c <USBD_LL_StallEP>
 8007970:	4603      	mov	r3, r0
 8007972:	73fb      	strb	r3, [r7, #15]
      break;
 8007974:	bf00      	nop
  }

  return ret;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	460b      	mov	r3, r1
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007992:	7afb      	ldrb	r3, [r7, #11]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d16e      	bne.n	8007a76 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800799e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	f040 8098 	bne.w	8007adc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d913      	bls.n	80079e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	689a      	ldr	r2, [r3, #8]
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	1ad2      	subs	r2, r2, r3
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	68da      	ldr	r2, [r3, #12]
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	4293      	cmp	r3, r2
 80079d0:	bf28      	it	cs
 80079d2:	4613      	movcs	r3, r2
 80079d4:	461a      	mov	r2, r3
 80079d6:	6879      	ldr	r1, [r7, #4]
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f001 f984 	bl	8008ce6 <USBD_CtlContinueRx>
 80079de:	e07d      	b.n	8007adc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079e6:	f003 031f 	and.w	r3, r3, #31
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d014      	beq.n	8007a18 <USBD_LL_DataOutStage+0x98>
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d81d      	bhi.n	8007a2e <USBD_LL_DataOutStage+0xae>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <USBD_LL_DataOutStage+0x7c>
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d003      	beq.n	8007a02 <USBD_LL_DataOutStage+0x82>
 80079fa:	e018      	b.n	8007a2e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	75bb      	strb	r3, [r7, #22]
            break;
 8007a00:	e018      	b.n	8007a34 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 fa5e 	bl	8007ece <USBD_CoreFindIF>
 8007a12:	4603      	mov	r3, r0
 8007a14:	75bb      	strb	r3, [r7, #22]
            break;
 8007a16:	e00d      	b.n	8007a34 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	4619      	mov	r1, r3
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f000 fa60 	bl	8007ee8 <USBD_CoreFindEP>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	75bb      	strb	r3, [r7, #22]
            break;
 8007a2c:	e002      	b.n	8007a34 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	75bb      	strb	r3, [r7, #22]
            break;
 8007a32:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007a34:	7dbb      	ldrb	r3, [r7, #22]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d119      	bne.n	8007a6e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d113      	bne.n	8007a6e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a46:	7dba      	ldrb	r2, [r7, #22]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	32ae      	adds	r2, #174	; 0xae
 8007a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00b      	beq.n	8007a6e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007a56:	7dba      	ldrb	r2, [r7, #22]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a5e:	7dba      	ldrb	r2, [r7, #22]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	32ae      	adds	r2, #174	; 0xae
 8007a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f001 f94a 	bl	8008d08 <USBD_CtlSendStatus>
 8007a74:	e032      	b.n	8007adc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a76:	7afb      	ldrb	r3, [r7, #11]
 8007a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	4619      	mov	r1, r3
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 fa31 	bl	8007ee8 <USBD_CoreFindEP>
 8007a86:	4603      	mov	r3, r0
 8007a88:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a8a:	7dbb      	ldrb	r3, [r7, #22]
 8007a8c:	2bff      	cmp	r3, #255	; 0xff
 8007a8e:	d025      	beq.n	8007adc <USBD_LL_DataOutStage+0x15c>
 8007a90:	7dbb      	ldrb	r3, [r7, #22]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d122      	bne.n	8007adc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b03      	cmp	r3, #3
 8007aa0:	d117      	bne.n	8007ad2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007aa2:	7dba      	ldrb	r2, [r7, #22]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	32ae      	adds	r2, #174	; 0xae
 8007aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00f      	beq.n	8007ad2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007ab2:	7dba      	ldrb	r2, [r7, #22]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007aba:	7dba      	ldrb	r2, [r7, #22]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	32ae      	adds	r2, #174	; 0xae
 8007ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	7afa      	ldrb	r2, [r7, #11]
 8007ac8:	4611      	mov	r1, r2
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	4798      	blx	r3
 8007ace:	4603      	mov	r3, r0
 8007ad0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	e000      	b.n	8007ade <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b086      	sub	sp, #24
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	460b      	mov	r3, r1
 8007af0:	607a      	str	r2, [r7, #4]
 8007af2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007af4:	7afb      	ldrb	r3, [r7, #11]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d16f      	bne.n	8007bda <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3314      	adds	r3, #20
 8007afe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d15a      	bne.n	8007bc0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	689a      	ldr	r2, [r3, #8]
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d914      	bls.n	8007b40 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	689a      	ldr	r2, [r3, #8]
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	1ad2      	subs	r2, r2, r3
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f001 f8ac 	bl	8008c8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b32:	2300      	movs	r3, #0
 8007b34:	2200      	movs	r2, #0
 8007b36:	2100      	movs	r1, #0
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f001 fdd1 	bl	80096e0 <USBD_LL_PrepareReceive>
 8007b3e:	e03f      	b.n	8007bc0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	68da      	ldr	r2, [r3, #12]
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d11c      	bne.n	8007b86 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d316      	bcc.n	8007b86 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d20f      	bcs.n	8007b86 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b66:	2200      	movs	r2, #0
 8007b68:	2100      	movs	r1, #0
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f001 f88d 	bl	8008c8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b78:	2300      	movs	r3, #0
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f001 fdae 	bl	80096e0 <USBD_LL_PrepareReceive>
 8007b84:	e01c      	b.n	8007bc0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d10f      	bne.n	8007bb2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d009      	beq.n	8007bb2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bb2:	2180      	movs	r1, #128	; 0x80
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f001 fce9 	bl	800958c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f001 f8b7 	bl	8008d2e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d03a      	beq.n	8007c40 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f7ff fe42 	bl	8007854 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007bd8:	e032      	b.n	8007c40 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007bda:	7afb      	ldrb	r3, [r7, #11]
 8007bdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	4619      	mov	r1, r3
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 f97f 	bl	8007ee8 <USBD_CoreFindEP>
 8007bea:	4603      	mov	r3, r0
 8007bec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
 8007bf0:	2bff      	cmp	r3, #255	; 0xff
 8007bf2:	d025      	beq.n	8007c40 <USBD_LL_DataInStage+0x15a>
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d122      	bne.n	8007c40 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d11c      	bne.n	8007c40 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c06:	7dfa      	ldrb	r2, [r7, #23]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	32ae      	adds	r2, #174	; 0xae
 8007c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d014      	beq.n	8007c40 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007c16:	7dfa      	ldrb	r2, [r7, #23]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c1e:	7dfa      	ldrb	r2, [r7, #23]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	32ae      	adds	r2, #174	; 0xae
 8007c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	7afa      	ldrb	r2, [r7, #11]
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	4798      	blx	r3
 8007c32:	4603      	mov	r3, r0
 8007c34:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007c36:	7dbb      	ldrb	r3, [r7, #22]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007c3c:	7dbb      	ldrb	r3, [r7, #22]
 8007c3e:	e000      	b.n	8007c42 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3718      	adds	r7, #24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c52:	2300      	movs	r3, #0
 8007c54:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d014      	beq.n	8007cb0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00e      	beq.n	8007cb0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6852      	ldr	r2, [r2, #4]
 8007c9e:	b2d2      	uxtb	r2, r2
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	4798      	blx	r3
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007cac:	2303      	movs	r3, #3
 8007cae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cb0:	2340      	movs	r3, #64	; 0x40
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f001 fc23 	bl	8009502 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2240      	movs	r2, #64	; 0x40
 8007cc8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ccc:	2340      	movs	r3, #64	; 0x40
 8007cce:	2200      	movs	r2, #0
 8007cd0:	2180      	movs	r1, #128	; 0x80
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f001 fc15 	bl	8009502 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2240      	movs	r2, #64	; 0x40
 8007ce2:	621a      	str	r2, [r3, #32]

  return ret;
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b083      	sub	sp, #12
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	78fa      	ldrb	r2, [r7, #3]
 8007cfe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b083      	sub	sp, #12
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2204      	movs	r2, #4
 8007d28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b083      	sub	sp, #12
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	2b04      	cmp	r3, #4
 8007d4c:	d106      	bne.n	8007d5c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d54:	b2da      	uxtb	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d110      	bne.n	8007da0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00b      	beq.n	8007da0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d8e:	69db      	ldr	r3, [r3, #28]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d005      	beq.n	8007da0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	460b      	mov	r3, r1
 8007db4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	32ae      	adds	r2, #174	; 0xae
 8007dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e01c      	b.n	8007e06 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d115      	bne.n	8007e04 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	32ae      	adds	r2, #174	; 0xae
 8007de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de6:	6a1b      	ldr	r3, [r3, #32]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00b      	beq.n	8007e04 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	32ae      	adds	r2, #174	; 0xae
 8007df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	78fa      	ldrb	r2, [r7, #3]
 8007dfe:	4611      	mov	r1, r2
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
 8007e16:	460b      	mov	r3, r1
 8007e18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	32ae      	adds	r2, #174	; 0xae
 8007e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e01c      	b.n	8007e6a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d115      	bne.n	8007e68 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	32ae      	adds	r2, #174	; 0xae
 8007e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00b      	beq.n	8007e68 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	32ae      	adds	r2, #174	; 0xae
 8007e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	78fa      	ldrb	r2, [r7, #3]
 8007e62:	4611      	mov	r1, r2
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b083      	sub	sp, #12
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00e      	beq.n	8007ec4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	6852      	ldr	r2, [r2, #4]
 8007eb2:	b2d2      	uxtb	r2, r2
 8007eb4:	4611      	mov	r1, r2
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	4798      	blx	r3
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007eda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ef4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b086      	sub	sp, #24
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007f16:	2300      	movs	r3, #0
 8007f18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	885b      	ldrh	r3, [r3, #2]
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d920      	bls.n	8007f6c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007f32:	e013      	b.n	8007f5c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007f34:	f107 030a 	add.w	r3, r7, #10
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6978      	ldr	r0, [r7, #20]
 8007f3c:	f000 f81b 	bl	8007f76 <USBD_GetNextDesc>
 8007f40:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	785b      	ldrb	r3, [r3, #1]
 8007f46:	2b05      	cmp	r3, #5
 8007f48:	d108      	bne.n	8007f5c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	789b      	ldrb	r3, [r3, #2]
 8007f52:	78fa      	ldrb	r2, [r7, #3]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d008      	beq.n	8007f6a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	885b      	ldrh	r3, [r3, #2]
 8007f60:	b29a      	uxth	r2, r3
 8007f62:	897b      	ldrh	r3, [r7, #10]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d8e5      	bhi.n	8007f34 <USBD_GetEpDesc+0x32>
 8007f68:	e000      	b.n	8007f6c <USBD_GetEpDesc+0x6a>
          break;
 8007f6a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f6c:	693b      	ldr	r3, [r7, #16]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b085      	sub	sp, #20
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	881a      	ldrh	r2, [r3, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	4413      	add	r3, r2
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007fce:	8a3b      	ldrh	r3, [r7, #16]
 8007fd0:	021b      	lsls	r3, r3, #8
 8007fd2:	b21a      	sxth	r2, r3
 8007fd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	b21b      	sxth	r3, r3
 8007fdc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fde:	89fb      	ldrh	r3, [r7, #14]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	371c      	adds	r7, #28
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008002:	2b40      	cmp	r3, #64	; 0x40
 8008004:	d005      	beq.n	8008012 <USBD_StdDevReq+0x26>
 8008006:	2b40      	cmp	r3, #64	; 0x40
 8008008:	d857      	bhi.n	80080ba <USBD_StdDevReq+0xce>
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00f      	beq.n	800802e <USBD_StdDevReq+0x42>
 800800e:	2b20      	cmp	r3, #32
 8008010:	d153      	bne.n	80080ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	32ae      	adds	r2, #174	; 0xae
 800801c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	4798      	blx	r3
 8008028:	4603      	mov	r3, r0
 800802a:	73fb      	strb	r3, [r7, #15]
      break;
 800802c:	e04a      	b.n	80080c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	785b      	ldrb	r3, [r3, #1]
 8008032:	2b09      	cmp	r3, #9
 8008034:	d83b      	bhi.n	80080ae <USBD_StdDevReq+0xc2>
 8008036:	a201      	add	r2, pc, #4	; (adr r2, 800803c <USBD_StdDevReq+0x50>)
 8008038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803c:	08008091 	.word	0x08008091
 8008040:	080080a5 	.word	0x080080a5
 8008044:	080080af 	.word	0x080080af
 8008048:	0800809b 	.word	0x0800809b
 800804c:	080080af 	.word	0x080080af
 8008050:	0800806f 	.word	0x0800806f
 8008054:	08008065 	.word	0x08008065
 8008058:	080080af 	.word	0x080080af
 800805c:	08008087 	.word	0x08008087
 8008060:	08008079 	.word	0x08008079
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fa3c 	bl	80084e4 <USBD_GetDescriptor>
          break;
 800806c:	e024      	b.n	80080b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fba1 	bl	80087b8 <USBD_SetAddress>
          break;
 8008076:	e01f      	b.n	80080b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fbe0 	bl	8008840 <USBD_SetConfig>
 8008080:	4603      	mov	r3, r0
 8008082:	73fb      	strb	r3, [r7, #15]
          break;
 8008084:	e018      	b.n	80080b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 fc83 	bl	8008994 <USBD_GetConfig>
          break;
 800808e:	e013      	b.n	80080b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fcb4 	bl	8008a00 <USBD_GetStatus>
          break;
 8008098:	e00e      	b.n	80080b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fce3 	bl	8008a68 <USBD_SetFeature>
          break;
 80080a2:	e009      	b.n	80080b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fd07 	bl	8008aba <USBD_ClrFeature>
          break;
 80080ac:	e004      	b.n	80080b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fd5e 	bl	8008b72 <USBD_CtlError>
          break;
 80080b6:	bf00      	nop
      }
      break;
 80080b8:	e004      	b.n	80080c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fd58 	bl	8008b72 <USBD_CtlError>
      break;
 80080c2:	bf00      	nop
  }

  return ret;
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop

080080d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080e6:	2b40      	cmp	r3, #64	; 0x40
 80080e8:	d005      	beq.n	80080f6 <USBD_StdItfReq+0x26>
 80080ea:	2b40      	cmp	r3, #64	; 0x40
 80080ec:	d852      	bhi.n	8008194 <USBD_StdItfReq+0xc4>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <USBD_StdItfReq+0x26>
 80080f2:	2b20      	cmp	r3, #32
 80080f4:	d14e      	bne.n	8008194 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	3b01      	subs	r3, #1
 8008100:	2b02      	cmp	r3, #2
 8008102:	d840      	bhi.n	8008186 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	889b      	ldrh	r3, [r3, #4]
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b01      	cmp	r3, #1
 800810c:	d836      	bhi.n	800817c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	889b      	ldrh	r3, [r3, #4]
 8008112:	b2db      	uxtb	r3, r3
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff fed9 	bl	8007ece <USBD_CoreFindIF>
 800811c:	4603      	mov	r3, r0
 800811e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	2bff      	cmp	r3, #255	; 0xff
 8008124:	d01d      	beq.n	8008162 <USBD_StdItfReq+0x92>
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d11a      	bne.n	8008162 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800812c:	7bba      	ldrb	r2, [r7, #14]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	32ae      	adds	r2, #174	; 0xae
 8008132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00f      	beq.n	800815c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800813c:	7bba      	ldrb	r2, [r7, #14]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008144:	7bba      	ldrb	r2, [r7, #14]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	32ae      	adds	r2, #174	; 0xae
 800814a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	4798      	blx	r3
 8008156:	4603      	mov	r3, r0
 8008158:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800815a:	e004      	b.n	8008166 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800815c:	2303      	movs	r3, #3
 800815e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008160:	e001      	b.n	8008166 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008162:	2303      	movs	r3, #3
 8008164:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	88db      	ldrh	r3, [r3, #6]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d110      	bne.n	8008190 <USBD_StdItfReq+0xc0>
 800816e:	7bfb      	ldrb	r3, [r7, #15]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10d      	bne.n	8008190 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fdc7 	bl	8008d08 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800817a:	e009      	b.n	8008190 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fcf7 	bl	8008b72 <USBD_CtlError>
          break;
 8008184:	e004      	b.n	8008190 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fcf2 	bl	8008b72 <USBD_CtlError>
          break;
 800818e:	e000      	b.n	8008192 <USBD_StdItfReq+0xc2>
          break;
 8008190:	bf00      	nop
      }
      break;
 8008192:	e004      	b.n	800819e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008194:	6839      	ldr	r1, [r7, #0]
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fceb 	bl	8008b72 <USBD_CtlError>
      break;
 800819c:	bf00      	nop
  }

  return ret;
 800819e:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	889b      	ldrh	r3, [r3, #4]
 80081ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081c4:	2b40      	cmp	r3, #64	; 0x40
 80081c6:	d007      	beq.n	80081d8 <USBD_StdEPReq+0x30>
 80081c8:	2b40      	cmp	r3, #64	; 0x40
 80081ca:	f200 817f 	bhi.w	80084cc <USBD_StdEPReq+0x324>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d02a      	beq.n	8008228 <USBD_StdEPReq+0x80>
 80081d2:	2b20      	cmp	r3, #32
 80081d4:	f040 817a 	bne.w	80084cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff fe83 	bl	8007ee8 <USBD_CoreFindEP>
 80081e2:	4603      	mov	r3, r0
 80081e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081e6:	7b7b      	ldrb	r3, [r7, #13]
 80081e8:	2bff      	cmp	r3, #255	; 0xff
 80081ea:	f000 8174 	beq.w	80084d6 <USBD_StdEPReq+0x32e>
 80081ee:	7b7b      	ldrb	r3, [r7, #13]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f040 8170 	bne.w	80084d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80081f6:	7b7a      	ldrb	r2, [r7, #13]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80081fe:	7b7a      	ldrb	r2, [r7, #13]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	32ae      	adds	r2, #174	; 0xae
 8008204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 8163 	beq.w	80084d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008210:	7b7a      	ldrb	r2, [r7, #13]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	32ae      	adds	r2, #174	; 0xae
 8008216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	4798      	blx	r3
 8008222:	4603      	mov	r3, r0
 8008224:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008226:	e156      	b.n	80084d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	2b03      	cmp	r3, #3
 800822e:	d008      	beq.n	8008242 <USBD_StdEPReq+0x9a>
 8008230:	2b03      	cmp	r3, #3
 8008232:	f300 8145 	bgt.w	80084c0 <USBD_StdEPReq+0x318>
 8008236:	2b00      	cmp	r3, #0
 8008238:	f000 809b 	beq.w	8008372 <USBD_StdEPReq+0x1ca>
 800823c:	2b01      	cmp	r3, #1
 800823e:	d03c      	beq.n	80082ba <USBD_StdEPReq+0x112>
 8008240:	e13e      	b.n	80084c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b02      	cmp	r3, #2
 800824c:	d002      	beq.n	8008254 <USBD_StdEPReq+0xac>
 800824e:	2b03      	cmp	r3, #3
 8008250:	d016      	beq.n	8008280 <USBD_StdEPReq+0xd8>
 8008252:	e02c      	b.n	80082ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008254:	7bbb      	ldrb	r3, [r7, #14]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00d      	beq.n	8008276 <USBD_StdEPReq+0xce>
 800825a:	7bbb      	ldrb	r3, [r7, #14]
 800825c:	2b80      	cmp	r3, #128	; 0x80
 800825e:	d00a      	beq.n	8008276 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008260:	7bbb      	ldrb	r3, [r7, #14]
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f001 f991 	bl	800958c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800826a:	2180      	movs	r1, #128	; 0x80
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 f98d 	bl	800958c <USBD_LL_StallEP>
 8008272:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008274:	e020      	b.n	80082b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 fc7a 	bl	8008b72 <USBD_CtlError>
              break;
 800827e:	e01b      	b.n	80082b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	885b      	ldrh	r3, [r3, #2]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10e      	bne.n	80082a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00b      	beq.n	80082a6 <USBD_StdEPReq+0xfe>
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	2b80      	cmp	r3, #128	; 0x80
 8008292:	d008      	beq.n	80082a6 <USBD_StdEPReq+0xfe>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	88db      	ldrh	r3, [r3, #6]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d104      	bne.n	80082a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 f973 	bl	800958c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fd2e 	bl	8008d08 <USBD_CtlSendStatus>

              break;
 80082ac:	e004      	b.n	80082b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80082ae:	6839      	ldr	r1, [r7, #0]
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fc5e 	bl	8008b72 <USBD_CtlError>
              break;
 80082b6:	bf00      	nop
          }
          break;
 80082b8:	e107      	b.n	80084ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d002      	beq.n	80082cc <USBD_StdEPReq+0x124>
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d016      	beq.n	80082f8 <USBD_StdEPReq+0x150>
 80082ca:	e04b      	b.n	8008364 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00d      	beq.n	80082ee <USBD_StdEPReq+0x146>
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
 80082d4:	2b80      	cmp	r3, #128	; 0x80
 80082d6:	d00a      	beq.n	80082ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f001 f955 	bl	800958c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082e2:	2180      	movs	r1, #128	; 0x80
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 f951 	bl	800958c <USBD_LL_StallEP>
 80082ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082ec:	e040      	b.n	8008370 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fc3e 	bl	8008b72 <USBD_CtlError>
              break;
 80082f6:	e03b      	b.n	8008370 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	885b      	ldrh	r3, [r3, #2]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d136      	bne.n	800836e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008300:	7bbb      	ldrb	r3, [r7, #14]
 8008302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008306:	2b00      	cmp	r3, #0
 8008308:	d004      	beq.n	8008314 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f001 f95b 	bl	80095ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fcf7 	bl	8008d08 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800831a:	7bbb      	ldrb	r3, [r7, #14]
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7ff fde2 	bl	8007ee8 <USBD_CoreFindEP>
 8008324:	4603      	mov	r3, r0
 8008326:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008328:	7b7b      	ldrb	r3, [r7, #13]
 800832a:	2bff      	cmp	r3, #255	; 0xff
 800832c:	d01f      	beq.n	800836e <USBD_StdEPReq+0x1c6>
 800832e:	7b7b      	ldrb	r3, [r7, #13]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d11c      	bne.n	800836e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008334:	7b7a      	ldrb	r2, [r7, #13]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800833c:	7b7a      	ldrb	r2, [r7, #13]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	32ae      	adds	r2, #174	; 0xae
 8008342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d010      	beq.n	800836e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800834c:	7b7a      	ldrb	r2, [r7, #13]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	32ae      	adds	r2, #174	; 0xae
 8008352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	4798      	blx	r3
 800835e:	4603      	mov	r3, r0
 8008360:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008362:	e004      	b.n	800836e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008364:	6839      	ldr	r1, [r7, #0]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fc03 	bl	8008b72 <USBD_CtlError>
              break;
 800836c:	e000      	b.n	8008370 <USBD_StdEPReq+0x1c8>
              break;
 800836e:	bf00      	nop
          }
          break;
 8008370:	e0ab      	b.n	80084ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b02      	cmp	r3, #2
 800837c:	d002      	beq.n	8008384 <USBD_StdEPReq+0x1dc>
 800837e:	2b03      	cmp	r3, #3
 8008380:	d032      	beq.n	80083e8 <USBD_StdEPReq+0x240>
 8008382:	e097      	b.n	80084b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d007      	beq.n	800839a <USBD_StdEPReq+0x1f2>
 800838a:	7bbb      	ldrb	r3, [r7, #14]
 800838c:	2b80      	cmp	r3, #128	; 0x80
 800838e:	d004      	beq.n	800839a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fbed 	bl	8008b72 <USBD_CtlError>
                break;
 8008398:	e091      	b.n	80084be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800839a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	da0b      	bge.n	80083ba <USBD_StdEPReq+0x212>
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083a8:	4613      	mov	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	4413      	add	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	3310      	adds	r3, #16
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	4413      	add	r3, r2
 80083b6:	3304      	adds	r3, #4
 80083b8:	e00b      	b.n	80083d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083c0:	4613      	mov	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	4413      	add	r3, r2
 80083d0:	3304      	adds	r3, #4
 80083d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2200      	movs	r2, #0
 80083d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	2202      	movs	r2, #2
 80083de:	4619      	mov	r1, r3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fc37 	bl	8008c54 <USBD_CtlSendData>
              break;
 80083e6:	e06a      	b.n	80084be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	da11      	bge.n	8008414 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083f0:	7bbb      	ldrb	r3, [r7, #14]
 80083f2:	f003 020f 	and.w	r2, r3, #15
 80083f6:	6879      	ldr	r1, [r7, #4]
 80083f8:	4613      	mov	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	440b      	add	r3, r1
 8008402:	3324      	adds	r3, #36	; 0x24
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d117      	bne.n	800843a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fbb0 	bl	8008b72 <USBD_CtlError>
                  break;
 8008412:	e054      	b.n	80084be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	f003 020f 	and.w	r2, r3, #15
 800841a:	6879      	ldr	r1, [r7, #4]
 800841c:	4613      	mov	r3, r2
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	440b      	add	r3, r1
 8008426:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d104      	bne.n	800843a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fb9d 	bl	8008b72 <USBD_CtlError>
                  break;
 8008438:	e041      	b.n	80084be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800843a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800843e:	2b00      	cmp	r3, #0
 8008440:	da0b      	bge.n	800845a <USBD_StdEPReq+0x2b2>
 8008442:	7bbb      	ldrb	r3, [r7, #14]
 8008444:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008448:	4613      	mov	r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	4413      	add	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	3310      	adds	r3, #16
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	4413      	add	r3, r2
 8008456:	3304      	adds	r3, #4
 8008458:	e00b      	b.n	8008472 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800845a:	7bbb      	ldrb	r3, [r7, #14]
 800845c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008460:	4613      	mov	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4413      	add	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	4413      	add	r3, r2
 8008470:	3304      	adds	r3, #4
 8008472:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008474:	7bbb      	ldrb	r3, [r7, #14]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d002      	beq.n	8008480 <USBD_StdEPReq+0x2d8>
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	2b80      	cmp	r3, #128	; 0x80
 800847e:	d103      	bne.n	8008488 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	2200      	movs	r2, #0
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	e00e      	b.n	80084a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	4619      	mov	r1, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f001 f8bb 	bl	8009608 <USBD_LL_IsStallEP>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d003      	beq.n	80084a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2201      	movs	r2, #1
 800849c:	601a      	str	r2, [r3, #0]
 800849e:	e002      	b.n	80084a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2200      	movs	r2, #0
 80084a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2202      	movs	r2, #2
 80084aa:	4619      	mov	r1, r3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fbd1 	bl	8008c54 <USBD_CtlSendData>
              break;
 80084b2:	e004      	b.n	80084be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80084b4:	6839      	ldr	r1, [r7, #0]
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 fb5b 	bl	8008b72 <USBD_CtlError>
              break;
 80084bc:	bf00      	nop
          }
          break;
 80084be:	e004      	b.n	80084ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fb55 	bl	8008b72 <USBD_CtlError>
          break;
 80084c8:	bf00      	nop
      }
      break;
 80084ca:	e005      	b.n	80084d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fb4f 	bl	8008b72 <USBD_CtlError>
      break;
 80084d4:	e000      	b.n	80084d8 <USBD_StdEPReq+0x330>
      break;
 80084d6:	bf00      	nop
  }

  return ret;
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084f6:	2300      	movs	r3, #0
 80084f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	885b      	ldrh	r3, [r3, #2]
 80084fe:	0a1b      	lsrs	r3, r3, #8
 8008500:	b29b      	uxth	r3, r3
 8008502:	3b01      	subs	r3, #1
 8008504:	2b06      	cmp	r3, #6
 8008506:	f200 8128 	bhi.w	800875a <USBD_GetDescriptor+0x276>
 800850a:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <USBD_GetDescriptor+0x2c>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	0800852d 	.word	0x0800852d
 8008514:	08008545 	.word	0x08008545
 8008518:	08008585 	.word	0x08008585
 800851c:	0800875b 	.word	0x0800875b
 8008520:	0800875b 	.word	0x0800875b
 8008524:	080086fb 	.word	0x080086fb
 8008528:	08008727 	.word	0x08008727
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	7c12      	ldrb	r2, [r2, #16]
 8008538:	f107 0108 	add.w	r1, r7, #8
 800853c:	4610      	mov	r0, r2
 800853e:	4798      	blx	r3
 8008540:	60f8      	str	r0, [r7, #12]
      break;
 8008542:	e112      	b.n	800876a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	7c1b      	ldrb	r3, [r3, #16]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10d      	bne.n	8008568 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008554:	f107 0208 	add.w	r2, r7, #8
 8008558:	4610      	mov	r0, r2
 800855a:	4798      	blx	r3
 800855c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	3301      	adds	r3, #1
 8008562:	2202      	movs	r2, #2
 8008564:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008566:	e100      	b.n	800876a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	f107 0208 	add.w	r2, r7, #8
 8008574:	4610      	mov	r0, r2
 8008576:	4798      	blx	r3
 8008578:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	3301      	adds	r3, #1
 800857e:	2202      	movs	r2, #2
 8008580:	701a      	strb	r2, [r3, #0]
      break;
 8008582:	e0f2      	b.n	800876a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	885b      	ldrh	r3, [r3, #2]
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b05      	cmp	r3, #5
 800858c:	f200 80ac 	bhi.w	80086e8 <USBD_GetDescriptor+0x204>
 8008590:	a201      	add	r2, pc, #4	; (adr r2, 8008598 <USBD_GetDescriptor+0xb4>)
 8008592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008596:	bf00      	nop
 8008598:	080085b1 	.word	0x080085b1
 800859c:	080085e5 	.word	0x080085e5
 80085a0:	08008619 	.word	0x08008619
 80085a4:	0800864d 	.word	0x0800864d
 80085a8:	08008681 	.word	0x08008681
 80085ac:	080086b5 	.word	0x080086b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00b      	beq.n	80085d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	7c12      	ldrb	r2, [r2, #16]
 80085c8:	f107 0108 	add.w	r1, r7, #8
 80085cc:	4610      	mov	r0, r2
 80085ce:	4798      	blx	r3
 80085d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085d2:	e091      	b.n	80086f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 facb 	bl	8008b72 <USBD_CtlError>
            err++;
 80085dc:	7afb      	ldrb	r3, [r7, #11]
 80085de:	3301      	adds	r3, #1
 80085e0:	72fb      	strb	r3, [r7, #11]
          break;
 80085e2:	e089      	b.n	80086f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00b      	beq.n	8008608 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	7c12      	ldrb	r2, [r2, #16]
 80085fc:	f107 0108 	add.w	r1, r7, #8
 8008600:	4610      	mov	r0, r2
 8008602:	4798      	blx	r3
 8008604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008606:	e077      	b.n	80086f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fab1 	bl	8008b72 <USBD_CtlError>
            err++;
 8008610:	7afb      	ldrb	r3, [r7, #11]
 8008612:	3301      	adds	r3, #1
 8008614:	72fb      	strb	r3, [r7, #11]
          break;
 8008616:	e06f      	b.n	80086f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00b      	beq.n	800863c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	7c12      	ldrb	r2, [r2, #16]
 8008630:	f107 0108 	add.w	r1, r7, #8
 8008634:	4610      	mov	r0, r2
 8008636:	4798      	blx	r3
 8008638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800863a:	e05d      	b.n	80086f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fa97 	bl	8008b72 <USBD_CtlError>
            err++;
 8008644:	7afb      	ldrb	r3, [r7, #11]
 8008646:	3301      	adds	r3, #1
 8008648:	72fb      	strb	r3, [r7, #11]
          break;
 800864a:	e055      	b.n	80086f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00b      	beq.n	8008670 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	7c12      	ldrb	r2, [r2, #16]
 8008664:	f107 0108 	add.w	r1, r7, #8
 8008668:	4610      	mov	r0, r2
 800866a:	4798      	blx	r3
 800866c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800866e:	e043      	b.n	80086f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fa7d 	bl	8008b72 <USBD_CtlError>
            err++;
 8008678:	7afb      	ldrb	r3, [r7, #11]
 800867a:	3301      	adds	r3, #1
 800867c:	72fb      	strb	r3, [r7, #11]
          break;
 800867e:	e03b      	b.n	80086f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00b      	beq.n	80086a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	7c12      	ldrb	r2, [r2, #16]
 8008698:	f107 0108 	add.w	r1, r7, #8
 800869c:	4610      	mov	r0, r2
 800869e:	4798      	blx	r3
 80086a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086a2:	e029      	b.n	80086f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 fa63 	bl	8008b72 <USBD_CtlError>
            err++;
 80086ac:	7afb      	ldrb	r3, [r7, #11]
 80086ae:	3301      	adds	r3, #1
 80086b0:	72fb      	strb	r3, [r7, #11]
          break;
 80086b2:	e021      	b.n	80086f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00b      	beq.n	80086d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	7c12      	ldrb	r2, [r2, #16]
 80086cc:	f107 0108 	add.w	r1, r7, #8
 80086d0:	4610      	mov	r0, r2
 80086d2:	4798      	blx	r3
 80086d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086d6:	e00f      	b.n	80086f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fa49 	bl	8008b72 <USBD_CtlError>
            err++;
 80086e0:	7afb      	ldrb	r3, [r7, #11]
 80086e2:	3301      	adds	r3, #1
 80086e4:	72fb      	strb	r3, [r7, #11]
          break;
 80086e6:	e007      	b.n	80086f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fa41 	bl	8008b72 <USBD_CtlError>
          err++;
 80086f0:	7afb      	ldrb	r3, [r7, #11]
 80086f2:	3301      	adds	r3, #1
 80086f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80086f6:	bf00      	nop
      }
      break;
 80086f8:	e037      	b.n	800876a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	7c1b      	ldrb	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d109      	bne.n	8008716 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800870a:	f107 0208 	add.w	r2, r7, #8
 800870e:	4610      	mov	r0, r2
 8008710:	4798      	blx	r3
 8008712:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008714:	e029      	b.n	800876a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fa2a 	bl	8008b72 <USBD_CtlError>
        err++;
 800871e:	7afb      	ldrb	r3, [r7, #11]
 8008720:	3301      	adds	r3, #1
 8008722:	72fb      	strb	r3, [r7, #11]
      break;
 8008724:	e021      	b.n	800876a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	7c1b      	ldrb	r3, [r3, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d10d      	bne.n	800874a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008736:	f107 0208 	add.w	r2, r7, #8
 800873a:	4610      	mov	r0, r2
 800873c:	4798      	blx	r3
 800873e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3301      	adds	r3, #1
 8008744:	2207      	movs	r2, #7
 8008746:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008748:	e00f      	b.n	800876a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800874a:	6839      	ldr	r1, [r7, #0]
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fa10 	bl	8008b72 <USBD_CtlError>
        err++;
 8008752:	7afb      	ldrb	r3, [r7, #11]
 8008754:	3301      	adds	r3, #1
 8008756:	72fb      	strb	r3, [r7, #11]
      break;
 8008758:	e007      	b.n	800876a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800875a:	6839      	ldr	r1, [r7, #0]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fa08 	bl	8008b72 <USBD_CtlError>
      err++;
 8008762:	7afb      	ldrb	r3, [r7, #11]
 8008764:	3301      	adds	r3, #1
 8008766:	72fb      	strb	r3, [r7, #11]
      break;
 8008768:	bf00      	nop
  }

  if (err != 0U)
 800876a:	7afb      	ldrb	r3, [r7, #11]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d11e      	bne.n	80087ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	88db      	ldrh	r3, [r3, #6]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d016      	beq.n	80087a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008778:	893b      	ldrh	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00e      	beq.n	800879c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	88da      	ldrh	r2, [r3, #6]
 8008782:	893b      	ldrh	r3, [r7, #8]
 8008784:	4293      	cmp	r3, r2
 8008786:	bf28      	it	cs
 8008788:	4613      	movcs	r3, r2
 800878a:	b29b      	uxth	r3, r3
 800878c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800878e:	893b      	ldrh	r3, [r7, #8]
 8008790:	461a      	mov	r2, r3
 8008792:	68f9      	ldr	r1, [r7, #12]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fa5d 	bl	8008c54 <USBD_CtlSendData>
 800879a:	e009      	b.n	80087b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f9e7 	bl	8008b72 <USBD_CtlError>
 80087a4:	e004      	b.n	80087b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 faae 	bl	8008d08 <USBD_CtlSendStatus>
 80087ac:	e000      	b.n	80087b0 <USBD_GetDescriptor+0x2cc>
    return;
 80087ae:	bf00      	nop
  }
}
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop

080087b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	889b      	ldrh	r3, [r3, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d131      	bne.n	800882e <USBD_SetAddress+0x76>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	88db      	ldrh	r3, [r3, #6]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d12d      	bne.n	800882e <USBD_SetAddress+0x76>
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	885b      	ldrh	r3, [r3, #2]
 80087d6:	2b7f      	cmp	r3, #127	; 0x7f
 80087d8:	d829      	bhi.n	800882e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	885b      	ldrh	r3, [r3, #2]
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b03      	cmp	r3, #3
 80087f0:	d104      	bne.n	80087fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80087f2:	6839      	ldr	r1, [r7, #0]
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f9bc 	bl	8008b72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087fa:	e01d      	b.n	8008838 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	7bfa      	ldrb	r2, [r7, #15]
 8008800:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008804:	7bfb      	ldrb	r3, [r7, #15]
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 ff29 	bl	8009660 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fa7a 	bl	8008d08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d004      	beq.n	8008824 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2202      	movs	r2, #2
 800881e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008822:	e009      	b.n	8008838 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800882c:	e004      	b.n	8008838 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800882e:	6839      	ldr	r1, [r7, #0]
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f99e 	bl	8008b72 <USBD_CtlError>
  }
}
 8008836:	bf00      	nop
 8008838:	bf00      	nop
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	885b      	ldrh	r3, [r3, #2]
 8008852:	b2da      	uxtb	r2, r3
 8008854:	4b4e      	ldr	r3, [pc, #312]	; (8008990 <USBD_SetConfig+0x150>)
 8008856:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008858:	4b4d      	ldr	r3, [pc, #308]	; (8008990 <USBD_SetConfig+0x150>)
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d905      	bls.n	800886c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f985 	bl	8008b72 <USBD_CtlError>
    return USBD_FAIL;
 8008868:	2303      	movs	r3, #3
 800886a:	e08c      	b.n	8008986 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008872:	b2db      	uxtb	r3, r3
 8008874:	2b02      	cmp	r3, #2
 8008876:	d002      	beq.n	800887e <USBD_SetConfig+0x3e>
 8008878:	2b03      	cmp	r3, #3
 800887a:	d029      	beq.n	80088d0 <USBD_SetConfig+0x90>
 800887c:	e075      	b.n	800896a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800887e:	4b44      	ldr	r3, [pc, #272]	; (8008990 <USBD_SetConfig+0x150>)
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d020      	beq.n	80088c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008886:	4b42      	ldr	r3, [pc, #264]	; (8008990 <USBD_SetConfig+0x150>)
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008890:	4b3f      	ldr	r3, [pc, #252]	; (8008990 <USBD_SetConfig+0x150>)
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7fe ffe7 	bl	800786a <USBD_SetClassConfig>
 800889c:	4603      	mov	r3, r0
 800889e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d008      	beq.n	80088b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f962 	bl	8008b72 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2202      	movs	r2, #2
 80088b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088b6:	e065      	b.n	8008984 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fa25 	bl	8008d08 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2203      	movs	r2, #3
 80088c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088c6:	e05d      	b.n	8008984 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fa1d 	bl	8008d08 <USBD_CtlSendStatus>
      break;
 80088ce:	e059      	b.n	8008984 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80088d0:	4b2f      	ldr	r3, [pc, #188]	; (8008990 <USBD_SetConfig+0x150>)
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d112      	bne.n	80088fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2202      	movs	r2, #2
 80088dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80088e0:	4b2b      	ldr	r3, [pc, #172]	; (8008990 <USBD_SetConfig+0x150>)
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	461a      	mov	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088ea:	4b29      	ldr	r3, [pc, #164]	; (8008990 <USBD_SetConfig+0x150>)
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	4619      	mov	r1, r3
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7fe ffd6 	bl	80078a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fa06 	bl	8008d08 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088fc:	e042      	b.n	8008984 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80088fe:	4b24      	ldr	r3, [pc, #144]	; (8008990 <USBD_SetConfig+0x150>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	429a      	cmp	r2, r3
 800890a:	d02a      	beq.n	8008962 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	b2db      	uxtb	r3, r3
 8008912:	4619      	mov	r1, r3
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7fe ffc4 	bl	80078a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800891a:	4b1d      	ldr	r3, [pc, #116]	; (8008990 <USBD_SetConfig+0x150>)
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008924:	4b1a      	ldr	r3, [pc, #104]	; (8008990 <USBD_SetConfig+0x150>)
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	4619      	mov	r1, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7fe ff9d 	bl	800786a <USBD_SetClassConfig>
 8008930:	4603      	mov	r3, r0
 8008932:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00f      	beq.n	800895a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f918 	bl	8008b72 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	b2db      	uxtb	r3, r3
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7fe ffa9 	bl	80078a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008958:	e014      	b.n	8008984 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f9d4 	bl	8008d08 <USBD_CtlSendStatus>
      break;
 8008960:	e010      	b.n	8008984 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f9d0 	bl	8008d08 <USBD_CtlSendStatus>
      break;
 8008968:	e00c      	b.n	8008984 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f900 	bl	8008b72 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008972:	4b07      	ldr	r3, [pc, #28]	; (8008990 <USBD_SetConfig+0x150>)
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7fe ff92 	bl	80078a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800897e:	2303      	movs	r3, #3
 8008980:	73fb      	strb	r3, [r7, #15]
      break;
 8008982:	bf00      	nop
  }

  return ret;
 8008984:	7bfb      	ldrb	r3, [r7, #15]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	200007b8 	.word	0x200007b8

08008994 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	88db      	ldrh	r3, [r3, #6]
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d004      	beq.n	80089b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f8e2 	bl	8008b72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089ae:	e023      	b.n	80089f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	dc02      	bgt.n	80089c2 <USBD_GetConfig+0x2e>
 80089bc:	2b00      	cmp	r3, #0
 80089be:	dc03      	bgt.n	80089c8 <USBD_GetConfig+0x34>
 80089c0:	e015      	b.n	80089ee <USBD_GetConfig+0x5a>
 80089c2:	2b03      	cmp	r3, #3
 80089c4:	d00b      	beq.n	80089de <USBD_GetConfig+0x4a>
 80089c6:	e012      	b.n	80089ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	3308      	adds	r3, #8
 80089d2:	2201      	movs	r2, #1
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f93c 	bl	8008c54 <USBD_CtlSendData>
        break;
 80089dc:	e00c      	b.n	80089f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	3304      	adds	r3, #4
 80089e2:	2201      	movs	r2, #1
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f934 	bl	8008c54 <USBD_CtlSendData>
        break;
 80089ec:	e004      	b.n	80089f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f8be 	bl	8008b72 <USBD_CtlError>
        break;
 80089f6:	bf00      	nop
}
 80089f8:	bf00      	nop
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	3b01      	subs	r3, #1
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d81e      	bhi.n	8008a56 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	88db      	ldrh	r3, [r3, #6]
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d004      	beq.n	8008a2a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f8a5 	bl	8008b72 <USBD_CtlError>
        break;
 8008a28:	e01a      	b.n	8008a60 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d005      	beq.n	8008a46 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f043 0202 	orr.w	r2, r3, #2
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	330c      	adds	r3, #12
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f900 	bl	8008c54 <USBD_CtlSendData>
      break;
 8008a54:	e004      	b.n	8008a60 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f88a 	bl	8008b72 <USBD_CtlError>
      break;
 8008a5e:	bf00      	nop
  }
}
 8008a60:	bf00      	nop
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	885b      	ldrh	r3, [r3, #2]
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d107      	bne.n	8008a8a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f940 	bl	8008d08 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a88:	e013      	b.n	8008ab2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	885b      	ldrh	r3, [r3, #2]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d10b      	bne.n	8008aaa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	889b      	ldrh	r3, [r3, #4]
 8008a96:	0a1b      	lsrs	r3, r3, #8
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f930 	bl	8008d08 <USBD_CtlSendStatus>
}
 8008aa8:	e003      	b.n	8008ab2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f860 	bl	8008b72 <USBD_CtlError>
}
 8008ab2:	bf00      	nop
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b082      	sub	sp, #8
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	3b01      	subs	r3, #1
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d80b      	bhi.n	8008aea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	885b      	ldrh	r3, [r3, #2]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d10c      	bne.n	8008af4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f910 	bl	8008d08 <USBD_CtlSendStatus>
      }
      break;
 8008ae8:	e004      	b.n	8008af4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f840 	bl	8008b72 <USBD_CtlError>
      break;
 8008af2:	e000      	b.n	8008af6 <USBD_ClrFeature+0x3c>
      break;
 8008af4:	bf00      	nop
  }
}
 8008af6:	bf00      	nop
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b084      	sub	sp, #16
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	781a      	ldrb	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3301      	adds	r3, #1
 8008b18:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	781a      	ldrb	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3301      	adds	r3, #1
 8008b26:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f7ff fa41 	bl	8007fb0 <SWAPBYTE>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	461a      	mov	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b42:	68f8      	ldr	r0, [r7, #12]
 8008b44:	f7ff fa34 	bl	8007fb0 <SWAPBYTE>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	3301      	adds	r3, #1
 8008b54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f7ff fa27 	bl	8007fb0 <SWAPBYTE>
 8008b62:	4603      	mov	r3, r0
 8008b64:	461a      	mov	r2, r3
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	80da      	strh	r2, [r3, #6]
}
 8008b6a:	bf00      	nop
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b082      	sub	sp, #8
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
 8008b7a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b7c:	2180      	movs	r1, #128	; 0x80
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 fd04 	bl	800958c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b84:	2100      	movs	r1, #0
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fd00 	bl	800958c <USBD_LL_StallEP>
}
 8008b8c:	bf00      	nop
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d036      	beq.n	8008c18 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008bae:	6938      	ldr	r0, [r7, #16]
 8008bb0:	f000 f836 	bl	8008c20 <USBD_GetLen>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	005b      	lsls	r3, r3, #1
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	68ba      	ldr	r2, [r7, #8]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	7812      	ldrb	r2, [r2, #0]
 8008bcc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bce:	7dfb      	ldrb	r3, [r7, #23]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008bd4:	7dfb      	ldrb	r3, [r7, #23]
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	4413      	add	r3, r2
 8008bda:	2203      	movs	r2, #3
 8008bdc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	3301      	adds	r3, #1
 8008be2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008be4:	e013      	b.n	8008c0e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008be6:	7dfb      	ldrb	r3, [r7, #23]
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	4413      	add	r3, r2
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	7812      	ldrb	r2, [r2, #0]
 8008bf0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	613b      	str	r3, [r7, #16]
    idx++;
 8008bf8:	7dfb      	ldrb	r3, [r7, #23]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008bfe:	7dfb      	ldrb	r3, [r7, #23]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	4413      	add	r3, r2
 8008c04:	2200      	movs	r2, #0
 8008c06:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1e7      	bne.n	8008be6 <USBD_GetString+0x52>
 8008c16:	e000      	b.n	8008c1a <USBD_GetString+0x86>
    return;
 8008c18:	bf00      	nop
  }
}
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c30:	e005      	b.n	8008c3e <USBD_GetLen+0x1e>
  {
    len++;
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	3301      	adds	r3, #1
 8008c36:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1f5      	bne.n	8008c32 <USBD_GetLen+0x12>
  }

  return len;
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2202      	movs	r2, #2
 8008c64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	2100      	movs	r1, #0
 8008c7a:	68f8      	ldr	r0, [r7, #12]
 8008c7c:	f000 fd0f 	bl	800969e <USBD_LL_Transmit>

  return USBD_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 fcfe 	bl	800969e <USBD_LL_Transmit>

  return USBD_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2203      	movs	r2, #3
 8008cbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 fd02 	bl	80096e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	60f8      	str	r0, [r7, #12]
 8008cee:	60b9      	str	r1, [r7, #8]
 8008cf0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f000 fcf1 	bl	80096e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2204      	movs	r2, #4
 8008d14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d18:	2300      	movs	r3, #0
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fcbd 	bl	800969e <USBD_LL_Transmit>

  return USBD_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b082      	sub	sp, #8
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2205      	movs	r2, #5
 8008d3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d3e:	2300      	movs	r3, #0
 8008d40:	2200      	movs	r2, #0
 8008d42:	2100      	movs	r1, #0
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fccb 	bl	80096e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	4912      	ldr	r1, [pc, #72]	; (8008da4 <MX_USB_DEVICE_Init+0x50>)
 8008d5c:	4812      	ldr	r0, [pc, #72]	; (8008da8 <MX_USB_DEVICE_Init+0x54>)
 8008d5e:	f7fe fd07 	bl	8007770 <USBD_Init>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d68:	f7f7 ff54 	bl	8000c14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d6c:	490f      	ldr	r1, [pc, #60]	; (8008dac <MX_USB_DEVICE_Init+0x58>)
 8008d6e:	480e      	ldr	r0, [pc, #56]	; (8008da8 <MX_USB_DEVICE_Init+0x54>)
 8008d70:	f7fe fd2e 	bl	80077d0 <USBD_RegisterClass>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d001      	beq.n	8008d7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d7a:	f7f7 ff4b 	bl	8000c14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d7e:	490c      	ldr	r1, [pc, #48]	; (8008db0 <MX_USB_DEVICE_Init+0x5c>)
 8008d80:	4809      	ldr	r0, [pc, #36]	; (8008da8 <MX_USB_DEVICE_Init+0x54>)
 8008d82:	f7fe fc1f 	bl	80075c4 <USBD_CDC_RegisterInterface>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d001      	beq.n	8008d90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d8c:	f7f7 ff42 	bl	8000c14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d90:	4805      	ldr	r0, [pc, #20]	; (8008da8 <MX_USB_DEVICE_Init+0x54>)
 8008d92:	f7fe fd53 	bl	800783c <USBD_Start>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d9c:	f7f7 ff3a 	bl	8000c14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008da0:	bf00      	nop
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	200000b0 	.word	0x200000b0
 8008da8:	200007bc 	.word	0x200007bc
 8008dac:	2000001c 	.word	0x2000001c
 8008db0:	2000009c 	.word	0x2000009c

08008db4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008db8:	2200      	movs	r2, #0
 8008dba:	4905      	ldr	r1, [pc, #20]	; (8008dd0 <CDC_Init_FS+0x1c>)
 8008dbc:	4805      	ldr	r0, [pc, #20]	; (8008dd4 <CDC_Init_FS+0x20>)
 8008dbe:	f7fe fc1b 	bl	80075f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008dc2:	4905      	ldr	r1, [pc, #20]	; (8008dd8 <CDC_Init_FS+0x24>)
 8008dc4:	4803      	ldr	r0, [pc, #12]	; (8008dd4 <CDC_Init_FS+0x20>)
 8008dc6:	f7fe fc39 	bl	800763c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008dca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	20001298 	.word	0x20001298
 8008dd4:	200007bc 	.word	0x200007bc
 8008dd8:	20000a98 	.word	0x20000a98

08008ddc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008de0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	4603      	mov	r3, r0
 8008df4:	6039      	str	r1, [r7, #0]
 8008df6:	71fb      	strb	r3, [r7, #7]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008dfc:	79fb      	ldrb	r3, [r7, #7]
 8008dfe:	2b23      	cmp	r3, #35	; 0x23
 8008e00:	d84a      	bhi.n	8008e98 <CDC_Control_FS+0xac>
 8008e02:	a201      	add	r2, pc, #4	; (adr r2, 8008e08 <CDC_Control_FS+0x1c>)
 8008e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e08:	08008e99 	.word	0x08008e99
 8008e0c:	08008e99 	.word	0x08008e99
 8008e10:	08008e99 	.word	0x08008e99
 8008e14:	08008e99 	.word	0x08008e99
 8008e18:	08008e99 	.word	0x08008e99
 8008e1c:	08008e99 	.word	0x08008e99
 8008e20:	08008e99 	.word	0x08008e99
 8008e24:	08008e99 	.word	0x08008e99
 8008e28:	08008e99 	.word	0x08008e99
 8008e2c:	08008e99 	.word	0x08008e99
 8008e30:	08008e99 	.word	0x08008e99
 8008e34:	08008e99 	.word	0x08008e99
 8008e38:	08008e99 	.word	0x08008e99
 8008e3c:	08008e99 	.word	0x08008e99
 8008e40:	08008e99 	.word	0x08008e99
 8008e44:	08008e99 	.word	0x08008e99
 8008e48:	08008e99 	.word	0x08008e99
 8008e4c:	08008e99 	.word	0x08008e99
 8008e50:	08008e99 	.word	0x08008e99
 8008e54:	08008e99 	.word	0x08008e99
 8008e58:	08008e99 	.word	0x08008e99
 8008e5c:	08008e99 	.word	0x08008e99
 8008e60:	08008e99 	.word	0x08008e99
 8008e64:	08008e99 	.word	0x08008e99
 8008e68:	08008e99 	.word	0x08008e99
 8008e6c:	08008e99 	.word	0x08008e99
 8008e70:	08008e99 	.word	0x08008e99
 8008e74:	08008e99 	.word	0x08008e99
 8008e78:	08008e99 	.word	0x08008e99
 8008e7c:	08008e99 	.word	0x08008e99
 8008e80:	08008e99 	.word	0x08008e99
 8008e84:	08008e99 	.word	0x08008e99
 8008e88:	08008e99 	.word	0x08008e99
 8008e8c:	08008e99 	.word	0x08008e99
 8008e90:	08008e99 	.word	0x08008e99
 8008e94:	08008e99 	.word	0x08008e99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e98:	bf00      	nop
  }

  return (USBD_OK);
 8008e9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  memset (RXbuffer, '\0', sizeof(RXbuffer));  // clear the buffer
 8008eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	480d      	ldr	r0, [pc, #52]	; (8008ef0 <CDC_Receive_FS+0x48>)
 8008eba:	f000 fcbd 	bl	8009838 <memset>
  RXbufferStrLen = (uint8_t)*Len;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	b2da      	uxtb	r2, r3
 8008ec4:	4b0b      	ldr	r3, [pc, #44]	; (8008ef4 <CDC_Receive_FS+0x4c>)
 8008ec6:	701a      	strb	r2, [r3, #0]
  memcpy(RXbuffer, Buf, RXbufferStrLen);  // copy the data to the buffer
 8008ec8:	4b0a      	ldr	r3, [pc, #40]	; (8008ef4 <CDC_Receive_FS+0x4c>)
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	461a      	mov	r2, r3
 8008ed0:	6879      	ldr	r1, [r7, #4]
 8008ed2:	4807      	ldr	r0, [pc, #28]	; (8008ef0 <CDC_Receive_FS+0x48>)
 8008ed4:	f000 fce4 	bl	80098a0 <memcpy>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008ed8:	6879      	ldr	r1, [r7, #4]
 8008eda:	4807      	ldr	r0, [pc, #28]	; (8008ef8 <CDC_Receive_FS+0x50>)
 8008edc:	f7fe fbae 	bl	800763c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ee0:	4805      	ldr	r0, [pc, #20]	; (8008ef8 <CDC_Receive_FS+0x50>)
 8008ee2:	f7fe fc0f 	bl	8007704 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 8008ee6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	2000030c 	.word	0x2000030c
 8008ef4:	2000040c 	.word	0x2000040c
 8008ef8:	200007bc 	.word	0x200007bc

08008efc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f0c:	4b0d      	ldr	r3, [pc, #52]	; (8008f44 <CDC_Transmit_FS+0x48>)
 8008f0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f12:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e00b      	b.n	8008f3a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f22:	887b      	ldrh	r3, [r7, #2]
 8008f24:	461a      	mov	r2, r3
 8008f26:	6879      	ldr	r1, [r7, #4]
 8008f28:	4806      	ldr	r0, [pc, #24]	; (8008f44 <CDC_Transmit_FS+0x48>)
 8008f2a:	f7fe fb65 	bl	80075f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f2e:	4805      	ldr	r0, [pc, #20]	; (8008f44 <CDC_Transmit_FS+0x48>)
 8008f30:	f7fe fba2 	bl	8007678 <USBD_CDC_TransmitPacket>
 8008f34:	4603      	mov	r3, r0
 8008f36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	200007bc 	.word	0x200007bc

08008f48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b087      	sub	sp, #28
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	4613      	mov	r3, r2
 8008f54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	371c      	adds	r7, #28
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
	...

08008f6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	6039      	str	r1, [r7, #0]
 8008f76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	2212      	movs	r2, #18
 8008f7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f7e:	4b03      	ldr	r3, [pc, #12]	; (8008f8c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	200000cc 	.word	0x200000cc

08008f90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4603      	mov	r3, r0
 8008f98:	6039      	str	r1, [r7, #0]
 8008f9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	2204      	movs	r2, #4
 8008fa0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008fa2:	4b03      	ldr	r3, [pc, #12]	; (8008fb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	200000e0 	.word	0x200000e0

08008fb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	6039      	str	r1, [r7, #0]
 8008fbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fc0:	79fb      	ldrb	r3, [r7, #7]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d105      	bne.n	8008fd2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	4907      	ldr	r1, [pc, #28]	; (8008fe8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fca:	4808      	ldr	r0, [pc, #32]	; (8008fec <USBD_FS_ProductStrDescriptor+0x38>)
 8008fcc:	f7ff fde2 	bl	8008b94 <USBD_GetString>
 8008fd0:	e004      	b.n	8008fdc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fd2:	683a      	ldr	r2, [r7, #0]
 8008fd4:	4904      	ldr	r1, [pc, #16]	; (8008fe8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008fd6:	4805      	ldr	r0, [pc, #20]	; (8008fec <USBD_FS_ProductStrDescriptor+0x38>)
 8008fd8:	f7ff fddc 	bl	8008b94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fdc:	4b02      	ldr	r3, [pc, #8]	; (8008fe8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	20001a98 	.word	0x20001a98
 8008fec:	0800a19c 	.word	0x0800a19c

08008ff0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	6039      	str	r1, [r7, #0]
 8008ffa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	4904      	ldr	r1, [pc, #16]	; (8009010 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009000:	4804      	ldr	r0, [pc, #16]	; (8009014 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009002:	f7ff fdc7 	bl	8008b94 <USBD_GetString>
  return USBD_StrDesc;
 8009006:	4b02      	ldr	r3, [pc, #8]	; (8009010 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009008:	4618      	mov	r0, r3
 800900a:	3708      	adds	r7, #8
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	20001a98 	.word	0x20001a98
 8009014:	0800a1b4 	.word	0x0800a1b4

08009018 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	4603      	mov	r3, r0
 8009020:	6039      	str	r1, [r7, #0]
 8009022:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	221a      	movs	r2, #26
 8009028:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800902a:	f000 f843 	bl	80090b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800902e:	4b02      	ldr	r3, [pc, #8]	; (8009038 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009030:	4618      	mov	r0, r3
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	200000e4 	.word	0x200000e4

0800903c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	4603      	mov	r3, r0
 8009044:	6039      	str	r1, [r7, #0]
 8009046:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009048:	79fb      	ldrb	r3, [r7, #7]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d105      	bne.n	800905a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	4907      	ldr	r1, [pc, #28]	; (8009070 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009052:	4808      	ldr	r0, [pc, #32]	; (8009074 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009054:	f7ff fd9e 	bl	8008b94 <USBD_GetString>
 8009058:	e004      	b.n	8009064 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	4904      	ldr	r1, [pc, #16]	; (8009070 <USBD_FS_ConfigStrDescriptor+0x34>)
 800905e:	4805      	ldr	r0, [pc, #20]	; (8009074 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009060:	f7ff fd98 	bl	8008b94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009064:	4b02      	ldr	r3, [pc, #8]	; (8009070 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009066:	4618      	mov	r0, r3
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	20001a98 	.word	0x20001a98
 8009074:	0800a1c8 	.word	0x0800a1c8

08009078 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	4603      	mov	r3, r0
 8009080:	6039      	str	r1, [r7, #0]
 8009082:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009084:	79fb      	ldrb	r3, [r7, #7]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d105      	bne.n	8009096 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	4907      	ldr	r1, [pc, #28]	; (80090ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800908e:	4808      	ldr	r0, [pc, #32]	; (80090b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009090:	f7ff fd80 	bl	8008b94 <USBD_GetString>
 8009094:	e004      	b.n	80090a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	4904      	ldr	r1, [pc, #16]	; (80090ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800909a:	4805      	ldr	r0, [pc, #20]	; (80090b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800909c:	f7ff fd7a 	bl	8008b94 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090a0:	4b02      	ldr	r3, [pc, #8]	; (80090ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	20001a98 	.word	0x20001a98
 80090b0:	0800a1d4 	.word	0x0800a1d4

080090b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090ba:	4b0f      	ldr	r3, [pc, #60]	; (80090f8 <Get_SerialNum+0x44>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090c0:	4b0e      	ldr	r3, [pc, #56]	; (80090fc <Get_SerialNum+0x48>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090c6:	4b0e      	ldr	r3, [pc, #56]	; (8009100 <Get_SerialNum+0x4c>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4413      	add	r3, r2
 80090d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d009      	beq.n	80090ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80090da:	2208      	movs	r2, #8
 80090dc:	4909      	ldr	r1, [pc, #36]	; (8009104 <Get_SerialNum+0x50>)
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f000 f814 	bl	800910c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090e4:	2204      	movs	r2, #4
 80090e6:	4908      	ldr	r1, [pc, #32]	; (8009108 <Get_SerialNum+0x54>)
 80090e8:	68b8      	ldr	r0, [r7, #8]
 80090ea:	f000 f80f 	bl	800910c <IntToUnicode>
  }
}
 80090ee:	bf00      	nop
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	1fff7a10 	.word	0x1fff7a10
 80090fc:	1fff7a14 	.word	0x1fff7a14
 8009100:	1fff7a18 	.word	0x1fff7a18
 8009104:	200000e6 	.word	0x200000e6
 8009108:	200000f6 	.word	0x200000f6

0800910c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800910c:	b480      	push	{r7}
 800910e:	b087      	sub	sp, #28
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	4613      	mov	r3, r2
 8009118:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800911a:	2300      	movs	r3, #0
 800911c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800911e:	2300      	movs	r3, #0
 8009120:	75fb      	strb	r3, [r7, #23]
 8009122:	e027      	b.n	8009174 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	0f1b      	lsrs	r3, r3, #28
 8009128:	2b09      	cmp	r3, #9
 800912a:	d80b      	bhi.n	8009144 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	0f1b      	lsrs	r3, r3, #28
 8009130:	b2da      	uxtb	r2, r3
 8009132:	7dfb      	ldrb	r3, [r7, #23]
 8009134:	005b      	lsls	r3, r3, #1
 8009136:	4619      	mov	r1, r3
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	440b      	add	r3, r1
 800913c:	3230      	adds	r2, #48	; 0x30
 800913e:	b2d2      	uxtb	r2, r2
 8009140:	701a      	strb	r2, [r3, #0]
 8009142:	e00a      	b.n	800915a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	0f1b      	lsrs	r3, r3, #28
 8009148:	b2da      	uxtb	r2, r3
 800914a:	7dfb      	ldrb	r3, [r7, #23]
 800914c:	005b      	lsls	r3, r3, #1
 800914e:	4619      	mov	r1, r3
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	440b      	add	r3, r1
 8009154:	3237      	adds	r2, #55	; 0x37
 8009156:	b2d2      	uxtb	r2, r2
 8009158:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	011b      	lsls	r3, r3, #4
 800915e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009160:	7dfb      	ldrb	r3, [r7, #23]
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	3301      	adds	r3, #1
 8009166:	68ba      	ldr	r2, [r7, #8]
 8009168:	4413      	add	r3, r2
 800916a:	2200      	movs	r2, #0
 800916c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800916e:	7dfb      	ldrb	r3, [r7, #23]
 8009170:	3301      	adds	r3, #1
 8009172:	75fb      	strb	r3, [r7, #23]
 8009174:	7dfa      	ldrb	r2, [r7, #23]
 8009176:	79fb      	ldrb	r3, [r7, #7]
 8009178:	429a      	cmp	r2, r3
 800917a:	d3d3      	bcc.n	8009124 <IntToUnicode+0x18>
  }
}
 800917c:	bf00      	nop
 800917e:	bf00      	nop
 8009180:	371c      	adds	r7, #28
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
	...

0800918c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b08a      	sub	sp, #40	; 0x28
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009194:	f107 0314 	add.w	r3, r7, #20
 8009198:	2200      	movs	r2, #0
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	605a      	str	r2, [r3, #4]
 800919e:	609a      	str	r2, [r3, #8]
 80091a0:	60da      	str	r2, [r3, #12]
 80091a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091ac:	d147      	bne.n	800923e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091ae:	2300      	movs	r3, #0
 80091b0:	613b      	str	r3, [r7, #16]
 80091b2:	4b25      	ldr	r3, [pc, #148]	; (8009248 <HAL_PCD_MspInit+0xbc>)
 80091b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b6:	4a24      	ldr	r2, [pc, #144]	; (8009248 <HAL_PCD_MspInit+0xbc>)
 80091b8:	f043 0301 	orr.w	r3, r3, #1
 80091bc:	6313      	str	r3, [r2, #48]	; 0x30
 80091be:	4b22      	ldr	r3, [pc, #136]	; (8009248 <HAL_PCD_MspInit+0xbc>)
 80091c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	613b      	str	r3, [r7, #16]
 80091c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80091ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091d0:	2300      	movs	r3, #0
 80091d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d4:	2300      	movs	r3, #0
 80091d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80091d8:	f107 0314 	add.w	r3, r7, #20
 80091dc:	4619      	mov	r1, r3
 80091de:	481b      	ldr	r0, [pc, #108]	; (800924c <HAL_PCD_MspInit+0xc0>)
 80091e0:	f7f8 f928 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80091e4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80091e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091ea:	2302      	movs	r3, #2
 80091ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091ee:	2300      	movs	r3, #0
 80091f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091f2:	2300      	movs	r3, #0
 80091f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091f6:	230a      	movs	r3, #10
 80091f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091fa:	f107 0314 	add.w	r3, r7, #20
 80091fe:	4619      	mov	r1, r3
 8009200:	4812      	ldr	r0, [pc, #72]	; (800924c <HAL_PCD_MspInit+0xc0>)
 8009202:	f7f8 f917 	bl	8001434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009206:	4b10      	ldr	r3, [pc, #64]	; (8009248 <HAL_PCD_MspInit+0xbc>)
 8009208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800920a:	4a0f      	ldr	r2, [pc, #60]	; (8009248 <HAL_PCD_MspInit+0xbc>)
 800920c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009210:	6353      	str	r3, [r2, #52]	; 0x34
 8009212:	2300      	movs	r3, #0
 8009214:	60fb      	str	r3, [r7, #12]
 8009216:	4b0c      	ldr	r3, [pc, #48]	; (8009248 <HAL_PCD_MspInit+0xbc>)
 8009218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800921a:	4a0b      	ldr	r2, [pc, #44]	; (8009248 <HAL_PCD_MspInit+0xbc>)
 800921c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009220:	6453      	str	r3, [r2, #68]	; 0x44
 8009222:	4b09      	ldr	r3, [pc, #36]	; (8009248 <HAL_PCD_MspInit+0xbc>)
 8009224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800922a:	60fb      	str	r3, [r7, #12]
 800922c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800922e:	2200      	movs	r2, #0
 8009230:	2100      	movs	r1, #0
 8009232:	2043      	movs	r0, #67	; 0x43
 8009234:	f7f8 f835 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009238:	2043      	movs	r0, #67	; 0x43
 800923a:	f7f8 f84e 	bl	80012da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800923e:	bf00      	nop
 8009240:	3728      	adds	r7, #40	; 0x28
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	40023800 	.word	0x40023800
 800924c:	40020000 	.word	0x40020000

08009250 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009264:	4619      	mov	r1, r3
 8009266:	4610      	mov	r0, r2
 8009268:	f7fe fb35 	bl	80078d6 <USBD_LL_SetupStage>
}
 800926c:	bf00      	nop
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	460b      	mov	r3, r1
 800927e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009286:	78fa      	ldrb	r2, [r7, #3]
 8009288:	6879      	ldr	r1, [r7, #4]
 800928a:	4613      	mov	r3, r2
 800928c:	00db      	lsls	r3, r3, #3
 800928e:	4413      	add	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	440b      	add	r3, r1
 8009294:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	78fb      	ldrb	r3, [r7, #3]
 800929c:	4619      	mov	r1, r3
 800929e:	f7fe fb6f 	bl	8007980 <USBD_LL_DataOutStage>
}
 80092a2:	bf00      	nop
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b082      	sub	sp, #8
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	460b      	mov	r3, r1
 80092b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80092bc:	78fa      	ldrb	r2, [r7, #3]
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	4613      	mov	r3, r2
 80092c2:	00db      	lsls	r3, r3, #3
 80092c4:	4413      	add	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	440b      	add	r3, r1
 80092ca:	334c      	adds	r3, #76	; 0x4c
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	78fb      	ldrb	r3, [r7, #3]
 80092d0:	4619      	mov	r1, r3
 80092d2:	f7fe fc08 	bl	8007ae6 <USBD_LL_DataInStage>
}
 80092d6:	bf00      	nop
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b082      	sub	sp, #8
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7fe fd3c 	bl	8007d6a <USBD_LL_SOF>
}
 80092f2:	bf00      	nop
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009302:	2301      	movs	r3, #1
 8009304:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d102      	bne.n	8009314 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800930e:	2300      	movs	r3, #0
 8009310:	73fb      	strb	r3, [r7, #15]
 8009312:	e008      	b.n	8009326 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	2b02      	cmp	r3, #2
 800931a:	d102      	bne.n	8009322 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800931c:	2301      	movs	r3, #1
 800931e:	73fb      	strb	r3, [r7, #15]
 8009320:	e001      	b.n	8009326 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009322:	f7f7 fc77 	bl	8000c14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800932c:	7bfa      	ldrb	r2, [r7, #15]
 800932e:	4611      	mov	r1, r2
 8009330:	4618      	mov	r0, r3
 8009332:	f7fe fcdc 	bl	8007cee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800933c:	4618      	mov	r0, r3
 800933e:	f7fe fc84 	bl	8007c4a <USBD_LL_Reset>
}
 8009342:	bf00      	nop
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
	...

0800934c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800935a:	4618      	mov	r0, r3
 800935c:	f7fe fcd7 	bl	8007d0e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	6812      	ldr	r2, [r2, #0]
 800936e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009372:	f043 0301 	orr.w	r3, r3, #1
 8009376:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d005      	beq.n	800938c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009380:	4b04      	ldr	r3, [pc, #16]	; (8009394 <HAL_PCD_SuspendCallback+0x48>)
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	4a03      	ldr	r2, [pc, #12]	; (8009394 <HAL_PCD_SuspendCallback+0x48>)
 8009386:	f043 0306 	orr.w	r3, r3, #6
 800938a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800938c:	bf00      	nop
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	e000ed00 	.word	0xe000ed00

08009398 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fe fcc7 	bl	8007d3a <USBD_LL_Resume>
}
 80093ac:	bf00      	nop
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	460b      	mov	r3, r1
 80093be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093c6:	78fa      	ldrb	r2, [r7, #3]
 80093c8:	4611      	mov	r1, r2
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe fd1f 	bl	8007e0e <USBD_LL_IsoOUTIncomplete>
}
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	460b      	mov	r3, r1
 80093e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093ea:	78fa      	ldrb	r2, [r7, #3]
 80093ec:	4611      	mov	r1, r2
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fe fcdb 	bl	8007daa <USBD_LL_IsoINIncomplete>
}
 80093f4:	bf00      	nop
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800940a:	4618      	mov	r0, r3
 800940c:	f7fe fd31 	bl	8007e72 <USBD_LL_DevConnected>
}
 8009410:	bf00      	nop
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009426:	4618      	mov	r0, r3
 8009428:	f7fe fd2e 	bl	8007e88 <USBD_LL_DevDisconnected>
}
 800942c:	bf00      	nop
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d13c      	bne.n	80094be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009444:	4a20      	ldr	r2, [pc, #128]	; (80094c8 <USBD_LL_Init+0x94>)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a1e      	ldr	r2, [pc, #120]	; (80094c8 <USBD_LL_Init+0x94>)
 8009450:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009454:	4b1c      	ldr	r3, [pc, #112]	; (80094c8 <USBD_LL_Init+0x94>)
 8009456:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800945a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800945c:	4b1a      	ldr	r3, [pc, #104]	; (80094c8 <USBD_LL_Init+0x94>)
 800945e:	2204      	movs	r2, #4
 8009460:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009462:	4b19      	ldr	r3, [pc, #100]	; (80094c8 <USBD_LL_Init+0x94>)
 8009464:	2202      	movs	r2, #2
 8009466:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009468:	4b17      	ldr	r3, [pc, #92]	; (80094c8 <USBD_LL_Init+0x94>)
 800946a:	2200      	movs	r2, #0
 800946c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800946e:	4b16      	ldr	r3, [pc, #88]	; (80094c8 <USBD_LL_Init+0x94>)
 8009470:	2202      	movs	r2, #2
 8009472:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009474:	4b14      	ldr	r3, [pc, #80]	; (80094c8 <USBD_LL_Init+0x94>)
 8009476:	2200      	movs	r2, #0
 8009478:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800947a:	4b13      	ldr	r3, [pc, #76]	; (80094c8 <USBD_LL_Init+0x94>)
 800947c:	2200      	movs	r2, #0
 800947e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009480:	4b11      	ldr	r3, [pc, #68]	; (80094c8 <USBD_LL_Init+0x94>)
 8009482:	2200      	movs	r2, #0
 8009484:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009486:	4b10      	ldr	r3, [pc, #64]	; (80094c8 <USBD_LL_Init+0x94>)
 8009488:	2200      	movs	r2, #0
 800948a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800948c:	4b0e      	ldr	r3, [pc, #56]	; (80094c8 <USBD_LL_Init+0x94>)
 800948e:	2200      	movs	r2, #0
 8009490:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009492:	480d      	ldr	r0, [pc, #52]	; (80094c8 <USBD_LL_Init+0x94>)
 8009494:	f7f8 ff9a 	bl	80023cc <HAL_PCD_Init>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800949e:	f7f7 fbb9 	bl	8000c14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80094a2:	2180      	movs	r1, #128	; 0x80
 80094a4:	4808      	ldr	r0, [pc, #32]	; (80094c8 <USBD_LL_Init+0x94>)
 80094a6:	f7fa f9f2 	bl	800388e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80094aa:	2240      	movs	r2, #64	; 0x40
 80094ac:	2100      	movs	r1, #0
 80094ae:	4806      	ldr	r0, [pc, #24]	; (80094c8 <USBD_LL_Init+0x94>)
 80094b0:	f7fa f9a6 	bl	8003800 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80094b4:	2280      	movs	r2, #128	; 0x80
 80094b6:	2101      	movs	r1, #1
 80094b8:	4803      	ldr	r0, [pc, #12]	; (80094c8 <USBD_LL_Init+0x94>)
 80094ba:	f7fa f9a1 	bl	8003800 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	20001c98 	.word	0x20001c98

080094cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7f9 f88f 	bl	8002606 <HAL_PCD_Start>
 80094e8:	4603      	mov	r3, r0
 80094ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094ec:	7bfb      	ldrb	r3, [r7, #15]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 f942 	bl	8009778 <USBD_Get_USB_Status>
 80094f4:	4603      	mov	r3, r0
 80094f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b084      	sub	sp, #16
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	4608      	mov	r0, r1
 800950c:	4611      	mov	r1, r2
 800950e:	461a      	mov	r2, r3
 8009510:	4603      	mov	r3, r0
 8009512:	70fb      	strb	r3, [r7, #3]
 8009514:	460b      	mov	r3, r1
 8009516:	70bb      	strb	r3, [r7, #2]
 8009518:	4613      	mov	r3, r2
 800951a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800952a:	78bb      	ldrb	r3, [r7, #2]
 800952c:	883a      	ldrh	r2, [r7, #0]
 800952e:	78f9      	ldrb	r1, [r7, #3]
 8009530:	f7f9 fd60 	bl	8002ff4 <HAL_PCD_EP_Open>
 8009534:	4603      	mov	r3, r0
 8009536:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009538:	7bfb      	ldrb	r3, [r7, #15]
 800953a:	4618      	mov	r0, r3
 800953c:	f000 f91c 	bl	8009778 <USBD_Get_USB_Status>
 8009540:	4603      	mov	r3, r0
 8009542:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009544:	7bbb      	ldrb	r3, [r7, #14]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b084      	sub	sp, #16
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	460b      	mov	r3, r1
 8009558:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009568:	78fa      	ldrb	r2, [r7, #3]
 800956a:	4611      	mov	r1, r2
 800956c:	4618      	mov	r0, r3
 800956e:	f7f9 fda9 	bl	80030c4 <HAL_PCD_EP_Close>
 8009572:	4603      	mov	r3, r0
 8009574:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	4618      	mov	r0, r3
 800957a:	f000 f8fd 	bl	8009778 <USBD_Get_USB_Status>
 800957e:	4603      	mov	r3, r0
 8009580:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009582:	7bbb      	ldrb	r3, [r7, #14]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095a6:	78fa      	ldrb	r2, [r7, #3]
 80095a8:	4611      	mov	r1, r2
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7f9 fe81 	bl	80032b2 <HAL_PCD_EP_SetStall>
 80095b0:	4603      	mov	r3, r0
 80095b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 f8de 	bl	8009778 <USBD_Get_USB_Status>
 80095bc:	4603      	mov	r3, r0
 80095be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b084      	sub	sp, #16
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	460b      	mov	r3, r1
 80095d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095e4:	78fa      	ldrb	r2, [r7, #3]
 80095e6:	4611      	mov	r1, r2
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7f9 fec6 	bl	800337a <HAL_PCD_EP_ClrStall>
 80095ee:	4603      	mov	r3, r0
 80095f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
 80095f4:	4618      	mov	r0, r3
 80095f6:	f000 f8bf 	bl	8009778 <USBD_Get_USB_Status>
 80095fa:	4603      	mov	r3, r0
 80095fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009600:	4618      	mov	r0, r3
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800961a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800961c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009620:	2b00      	cmp	r3, #0
 8009622:	da0b      	bge.n	800963c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009624:	78fb      	ldrb	r3, [r7, #3]
 8009626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800962a:	68f9      	ldr	r1, [r7, #12]
 800962c:	4613      	mov	r3, r2
 800962e:	00db      	lsls	r3, r3, #3
 8009630:	4413      	add	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	440b      	add	r3, r1
 8009636:	333e      	adds	r3, #62	; 0x3e
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	e00b      	b.n	8009654 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800963c:	78fb      	ldrb	r3, [r7, #3]
 800963e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009642:	68f9      	ldr	r1, [r7, #12]
 8009644:	4613      	mov	r3, r2
 8009646:	00db      	lsls	r3, r3, #3
 8009648:	4413      	add	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	440b      	add	r3, r1
 800964e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009652:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009654:	4618      	mov	r0, r3
 8009656:	3714      	adds	r7, #20
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	460b      	mov	r3, r1
 800966a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800967a:	78fa      	ldrb	r2, [r7, #3]
 800967c:	4611      	mov	r1, r2
 800967e:	4618      	mov	r0, r3
 8009680:	f7f9 fc93 	bl	8002faa <HAL_PCD_SetAddress>
 8009684:	4603      	mov	r3, r0
 8009686:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009688:	7bfb      	ldrb	r3, [r7, #15]
 800968a:	4618      	mov	r0, r3
 800968c:	f000 f874 	bl	8009778 <USBD_Get_USB_Status>
 8009690:	4603      	mov	r3, r0
 8009692:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009694:	7bbb      	ldrb	r3, [r7, #14]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b086      	sub	sp, #24
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	60f8      	str	r0, [r7, #12]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	603b      	str	r3, [r7, #0]
 80096aa:	460b      	mov	r3, r1
 80096ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80096bc:	7af9      	ldrb	r1, [r7, #11]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	f7f9 fdac 	bl	800321e <HAL_PCD_EP_Transmit>
 80096c6:	4603      	mov	r3, r0
 80096c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ca:	7dfb      	ldrb	r3, [r7, #23]
 80096cc:	4618      	mov	r0, r3
 80096ce:	f000 f853 	bl	8009778 <USBD_Get_USB_Status>
 80096d2:	4603      	mov	r3, r0
 80096d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3718      	adds	r7, #24
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	607a      	str	r2, [r7, #4]
 80096ea:	603b      	str	r3, [r7, #0]
 80096ec:	460b      	mov	r3, r1
 80096ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f0:	2300      	movs	r3, #0
 80096f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80096fe:	7af9      	ldrb	r1, [r7, #11]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	f7f9 fd28 	bl	8003158 <HAL_PCD_EP_Receive>
 8009708:	4603      	mov	r3, r0
 800970a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800970c:	7dfb      	ldrb	r3, [r7, #23]
 800970e:	4618      	mov	r0, r3
 8009710:	f000 f832 	bl	8009778 <USBD_Get_USB_Status>
 8009714:	4603      	mov	r3, r0
 8009716:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009718:	7dbb      	ldrb	r3, [r7, #22]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b082      	sub	sp, #8
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
 800972a:	460b      	mov	r3, r1
 800972c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009734:	78fa      	ldrb	r2, [r7, #3]
 8009736:	4611      	mov	r1, r2
 8009738:	4618      	mov	r0, r3
 800973a:	f7f9 fd58 	bl	80031ee <HAL_PCD_EP_GetRxCount>
 800973e:	4603      	mov	r3, r0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009750:	4b03      	ldr	r3, [pc, #12]	; (8009760 <USBD_static_malloc+0x18>)
}
 8009752:	4618      	mov	r0, r3
 8009754:	370c      	adds	r7, #12
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	200021a4 	.word	0x200021a4

08009764 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]

}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009778:	b480      	push	{r7}
 800977a:	b085      	sub	sp, #20
 800977c:	af00      	add	r7, sp, #0
 800977e:	4603      	mov	r3, r0
 8009780:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009786:	79fb      	ldrb	r3, [r7, #7]
 8009788:	2b03      	cmp	r3, #3
 800978a:	d817      	bhi.n	80097bc <USBD_Get_USB_Status+0x44>
 800978c:	a201      	add	r2, pc, #4	; (adr r2, 8009794 <USBD_Get_USB_Status+0x1c>)
 800978e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009792:	bf00      	nop
 8009794:	080097a5 	.word	0x080097a5
 8009798:	080097ab 	.word	0x080097ab
 800979c:	080097b1 	.word	0x080097b1
 80097a0:	080097b7 	.word	0x080097b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73fb      	strb	r3, [r7, #15]
    break;
 80097a8:	e00b      	b.n	80097c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097aa:	2303      	movs	r3, #3
 80097ac:	73fb      	strb	r3, [r7, #15]
    break;
 80097ae:	e008      	b.n	80097c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097b0:	2301      	movs	r3, #1
 80097b2:	73fb      	strb	r3, [r7, #15]
    break;
 80097b4:	e005      	b.n	80097c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097b6:	2303      	movs	r3, #3
 80097b8:	73fb      	strb	r3, [r7, #15]
    break;
 80097ba:	e002      	b.n	80097c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80097bc:	2303      	movs	r3, #3
 80097be:	73fb      	strb	r3, [r7, #15]
    break;
 80097c0:	bf00      	nop
  }
  return usb_status;
 80097c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3714      	adds	r7, #20
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <sniprintf>:
 80097d0:	b40c      	push	{r2, r3}
 80097d2:	b530      	push	{r4, r5, lr}
 80097d4:	4b17      	ldr	r3, [pc, #92]	; (8009834 <sniprintf+0x64>)
 80097d6:	1e0c      	subs	r4, r1, #0
 80097d8:	681d      	ldr	r5, [r3, #0]
 80097da:	b09d      	sub	sp, #116	; 0x74
 80097dc:	da08      	bge.n	80097f0 <sniprintf+0x20>
 80097de:	238b      	movs	r3, #139	; 0x8b
 80097e0:	602b      	str	r3, [r5, #0]
 80097e2:	f04f 30ff 	mov.w	r0, #4294967295
 80097e6:	b01d      	add	sp, #116	; 0x74
 80097e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80097ec:	b002      	add	sp, #8
 80097ee:	4770      	bx	lr
 80097f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80097f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80097f8:	bf14      	ite	ne
 80097fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80097fe:	4623      	moveq	r3, r4
 8009800:	9304      	str	r3, [sp, #16]
 8009802:	9307      	str	r3, [sp, #28]
 8009804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009808:	9002      	str	r0, [sp, #8]
 800980a:	9006      	str	r0, [sp, #24]
 800980c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009810:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009812:	ab21      	add	r3, sp, #132	; 0x84
 8009814:	a902      	add	r1, sp, #8
 8009816:	4628      	mov	r0, r5
 8009818:	9301      	str	r3, [sp, #4]
 800981a:	f000 f9a1 	bl	8009b60 <_svfiprintf_r>
 800981e:	1c43      	adds	r3, r0, #1
 8009820:	bfbc      	itt	lt
 8009822:	238b      	movlt	r3, #139	; 0x8b
 8009824:	602b      	strlt	r3, [r5, #0]
 8009826:	2c00      	cmp	r4, #0
 8009828:	d0dd      	beq.n	80097e6 <sniprintf+0x16>
 800982a:	9b02      	ldr	r3, [sp, #8]
 800982c:	2200      	movs	r2, #0
 800982e:	701a      	strb	r2, [r3, #0]
 8009830:	e7d9      	b.n	80097e6 <sniprintf+0x16>
 8009832:	bf00      	nop
 8009834:	2000014c 	.word	0x2000014c

08009838 <memset>:
 8009838:	4402      	add	r2, r0
 800983a:	4603      	mov	r3, r0
 800983c:	4293      	cmp	r3, r2
 800983e:	d100      	bne.n	8009842 <memset+0xa>
 8009840:	4770      	bx	lr
 8009842:	f803 1b01 	strb.w	r1, [r3], #1
 8009846:	e7f9      	b.n	800983c <memset+0x4>

08009848 <__errno>:
 8009848:	4b01      	ldr	r3, [pc, #4]	; (8009850 <__errno+0x8>)
 800984a:	6818      	ldr	r0, [r3, #0]
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	2000014c 	.word	0x2000014c

08009854 <__libc_init_array>:
 8009854:	b570      	push	{r4, r5, r6, lr}
 8009856:	4d0d      	ldr	r5, [pc, #52]	; (800988c <__libc_init_array+0x38>)
 8009858:	4c0d      	ldr	r4, [pc, #52]	; (8009890 <__libc_init_array+0x3c>)
 800985a:	1b64      	subs	r4, r4, r5
 800985c:	10a4      	asrs	r4, r4, #2
 800985e:	2600      	movs	r6, #0
 8009860:	42a6      	cmp	r6, r4
 8009862:	d109      	bne.n	8009878 <__libc_init_array+0x24>
 8009864:	4d0b      	ldr	r5, [pc, #44]	; (8009894 <__libc_init_array+0x40>)
 8009866:	4c0c      	ldr	r4, [pc, #48]	; (8009898 <__libc_init_array+0x44>)
 8009868:	f000 fc6a 	bl	800a140 <_init>
 800986c:	1b64      	subs	r4, r4, r5
 800986e:	10a4      	asrs	r4, r4, #2
 8009870:	2600      	movs	r6, #0
 8009872:	42a6      	cmp	r6, r4
 8009874:	d105      	bne.n	8009882 <__libc_init_array+0x2e>
 8009876:	bd70      	pop	{r4, r5, r6, pc}
 8009878:	f855 3b04 	ldr.w	r3, [r5], #4
 800987c:	4798      	blx	r3
 800987e:	3601      	adds	r6, #1
 8009880:	e7ee      	b.n	8009860 <__libc_init_array+0xc>
 8009882:	f855 3b04 	ldr.w	r3, [r5], #4
 8009886:	4798      	blx	r3
 8009888:	3601      	adds	r6, #1
 800988a:	e7f2      	b.n	8009872 <__libc_init_array+0x1e>
 800988c:	0800a438 	.word	0x0800a438
 8009890:	0800a438 	.word	0x0800a438
 8009894:	0800a438 	.word	0x0800a438
 8009898:	0800a43c 	.word	0x0800a43c

0800989c <__retarget_lock_acquire_recursive>:
 800989c:	4770      	bx	lr

0800989e <__retarget_lock_release_recursive>:
 800989e:	4770      	bx	lr

080098a0 <memcpy>:
 80098a0:	440a      	add	r2, r1
 80098a2:	4291      	cmp	r1, r2
 80098a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80098a8:	d100      	bne.n	80098ac <memcpy+0xc>
 80098aa:	4770      	bx	lr
 80098ac:	b510      	push	{r4, lr}
 80098ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098b6:	4291      	cmp	r1, r2
 80098b8:	d1f9      	bne.n	80098ae <memcpy+0xe>
 80098ba:	bd10      	pop	{r4, pc}

080098bc <_free_r>:
 80098bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098be:	2900      	cmp	r1, #0
 80098c0:	d044      	beq.n	800994c <_free_r+0x90>
 80098c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098c6:	9001      	str	r0, [sp, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f1a1 0404 	sub.w	r4, r1, #4
 80098ce:	bfb8      	it	lt
 80098d0:	18e4      	addlt	r4, r4, r3
 80098d2:	f000 f8df 	bl	8009a94 <__malloc_lock>
 80098d6:	4a1e      	ldr	r2, [pc, #120]	; (8009950 <_free_r+0x94>)
 80098d8:	9801      	ldr	r0, [sp, #4]
 80098da:	6813      	ldr	r3, [r2, #0]
 80098dc:	b933      	cbnz	r3, 80098ec <_free_r+0x30>
 80098de:	6063      	str	r3, [r4, #4]
 80098e0:	6014      	str	r4, [r2, #0]
 80098e2:	b003      	add	sp, #12
 80098e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098e8:	f000 b8da 	b.w	8009aa0 <__malloc_unlock>
 80098ec:	42a3      	cmp	r3, r4
 80098ee:	d908      	bls.n	8009902 <_free_r+0x46>
 80098f0:	6825      	ldr	r5, [r4, #0]
 80098f2:	1961      	adds	r1, r4, r5
 80098f4:	428b      	cmp	r3, r1
 80098f6:	bf01      	itttt	eq
 80098f8:	6819      	ldreq	r1, [r3, #0]
 80098fa:	685b      	ldreq	r3, [r3, #4]
 80098fc:	1949      	addeq	r1, r1, r5
 80098fe:	6021      	streq	r1, [r4, #0]
 8009900:	e7ed      	b.n	80098de <_free_r+0x22>
 8009902:	461a      	mov	r2, r3
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	b10b      	cbz	r3, 800990c <_free_r+0x50>
 8009908:	42a3      	cmp	r3, r4
 800990a:	d9fa      	bls.n	8009902 <_free_r+0x46>
 800990c:	6811      	ldr	r1, [r2, #0]
 800990e:	1855      	adds	r5, r2, r1
 8009910:	42a5      	cmp	r5, r4
 8009912:	d10b      	bne.n	800992c <_free_r+0x70>
 8009914:	6824      	ldr	r4, [r4, #0]
 8009916:	4421      	add	r1, r4
 8009918:	1854      	adds	r4, r2, r1
 800991a:	42a3      	cmp	r3, r4
 800991c:	6011      	str	r1, [r2, #0]
 800991e:	d1e0      	bne.n	80098e2 <_free_r+0x26>
 8009920:	681c      	ldr	r4, [r3, #0]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	6053      	str	r3, [r2, #4]
 8009926:	440c      	add	r4, r1
 8009928:	6014      	str	r4, [r2, #0]
 800992a:	e7da      	b.n	80098e2 <_free_r+0x26>
 800992c:	d902      	bls.n	8009934 <_free_r+0x78>
 800992e:	230c      	movs	r3, #12
 8009930:	6003      	str	r3, [r0, #0]
 8009932:	e7d6      	b.n	80098e2 <_free_r+0x26>
 8009934:	6825      	ldr	r5, [r4, #0]
 8009936:	1961      	adds	r1, r4, r5
 8009938:	428b      	cmp	r3, r1
 800993a:	bf04      	itt	eq
 800993c:	6819      	ldreq	r1, [r3, #0]
 800993e:	685b      	ldreq	r3, [r3, #4]
 8009940:	6063      	str	r3, [r4, #4]
 8009942:	bf04      	itt	eq
 8009944:	1949      	addeq	r1, r1, r5
 8009946:	6021      	streq	r1, [r4, #0]
 8009948:	6054      	str	r4, [r2, #4]
 800994a:	e7ca      	b.n	80098e2 <_free_r+0x26>
 800994c:	b003      	add	sp, #12
 800994e:	bd30      	pop	{r4, r5, pc}
 8009950:	20002504 	.word	0x20002504

08009954 <sbrk_aligned>:
 8009954:	b570      	push	{r4, r5, r6, lr}
 8009956:	4e0e      	ldr	r6, [pc, #56]	; (8009990 <sbrk_aligned+0x3c>)
 8009958:	460c      	mov	r4, r1
 800995a:	6831      	ldr	r1, [r6, #0]
 800995c:	4605      	mov	r5, r0
 800995e:	b911      	cbnz	r1, 8009966 <sbrk_aligned+0x12>
 8009960:	f000 fba6 	bl	800a0b0 <_sbrk_r>
 8009964:	6030      	str	r0, [r6, #0]
 8009966:	4621      	mov	r1, r4
 8009968:	4628      	mov	r0, r5
 800996a:	f000 fba1 	bl	800a0b0 <_sbrk_r>
 800996e:	1c43      	adds	r3, r0, #1
 8009970:	d00a      	beq.n	8009988 <sbrk_aligned+0x34>
 8009972:	1cc4      	adds	r4, r0, #3
 8009974:	f024 0403 	bic.w	r4, r4, #3
 8009978:	42a0      	cmp	r0, r4
 800997a:	d007      	beq.n	800998c <sbrk_aligned+0x38>
 800997c:	1a21      	subs	r1, r4, r0
 800997e:	4628      	mov	r0, r5
 8009980:	f000 fb96 	bl	800a0b0 <_sbrk_r>
 8009984:	3001      	adds	r0, #1
 8009986:	d101      	bne.n	800998c <sbrk_aligned+0x38>
 8009988:	f04f 34ff 	mov.w	r4, #4294967295
 800998c:	4620      	mov	r0, r4
 800998e:	bd70      	pop	{r4, r5, r6, pc}
 8009990:	20002508 	.word	0x20002508

08009994 <_malloc_r>:
 8009994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009998:	1ccd      	adds	r5, r1, #3
 800999a:	f025 0503 	bic.w	r5, r5, #3
 800999e:	3508      	adds	r5, #8
 80099a0:	2d0c      	cmp	r5, #12
 80099a2:	bf38      	it	cc
 80099a4:	250c      	movcc	r5, #12
 80099a6:	2d00      	cmp	r5, #0
 80099a8:	4607      	mov	r7, r0
 80099aa:	db01      	blt.n	80099b0 <_malloc_r+0x1c>
 80099ac:	42a9      	cmp	r1, r5
 80099ae:	d905      	bls.n	80099bc <_malloc_r+0x28>
 80099b0:	230c      	movs	r3, #12
 80099b2:	603b      	str	r3, [r7, #0]
 80099b4:	2600      	movs	r6, #0
 80099b6:	4630      	mov	r0, r6
 80099b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a90 <_malloc_r+0xfc>
 80099c0:	f000 f868 	bl	8009a94 <__malloc_lock>
 80099c4:	f8d8 3000 	ldr.w	r3, [r8]
 80099c8:	461c      	mov	r4, r3
 80099ca:	bb5c      	cbnz	r4, 8009a24 <_malloc_r+0x90>
 80099cc:	4629      	mov	r1, r5
 80099ce:	4638      	mov	r0, r7
 80099d0:	f7ff ffc0 	bl	8009954 <sbrk_aligned>
 80099d4:	1c43      	adds	r3, r0, #1
 80099d6:	4604      	mov	r4, r0
 80099d8:	d155      	bne.n	8009a86 <_malloc_r+0xf2>
 80099da:	f8d8 4000 	ldr.w	r4, [r8]
 80099de:	4626      	mov	r6, r4
 80099e0:	2e00      	cmp	r6, #0
 80099e2:	d145      	bne.n	8009a70 <_malloc_r+0xdc>
 80099e4:	2c00      	cmp	r4, #0
 80099e6:	d048      	beq.n	8009a7a <_malloc_r+0xe6>
 80099e8:	6823      	ldr	r3, [r4, #0]
 80099ea:	4631      	mov	r1, r6
 80099ec:	4638      	mov	r0, r7
 80099ee:	eb04 0903 	add.w	r9, r4, r3
 80099f2:	f000 fb5d 	bl	800a0b0 <_sbrk_r>
 80099f6:	4581      	cmp	r9, r0
 80099f8:	d13f      	bne.n	8009a7a <_malloc_r+0xe6>
 80099fa:	6821      	ldr	r1, [r4, #0]
 80099fc:	1a6d      	subs	r5, r5, r1
 80099fe:	4629      	mov	r1, r5
 8009a00:	4638      	mov	r0, r7
 8009a02:	f7ff ffa7 	bl	8009954 <sbrk_aligned>
 8009a06:	3001      	adds	r0, #1
 8009a08:	d037      	beq.n	8009a7a <_malloc_r+0xe6>
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	442b      	add	r3, r5
 8009a0e:	6023      	str	r3, [r4, #0]
 8009a10:	f8d8 3000 	ldr.w	r3, [r8]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d038      	beq.n	8009a8a <_malloc_r+0xf6>
 8009a18:	685a      	ldr	r2, [r3, #4]
 8009a1a:	42a2      	cmp	r2, r4
 8009a1c:	d12b      	bne.n	8009a76 <_malloc_r+0xe2>
 8009a1e:	2200      	movs	r2, #0
 8009a20:	605a      	str	r2, [r3, #4]
 8009a22:	e00f      	b.n	8009a44 <_malloc_r+0xb0>
 8009a24:	6822      	ldr	r2, [r4, #0]
 8009a26:	1b52      	subs	r2, r2, r5
 8009a28:	d41f      	bmi.n	8009a6a <_malloc_r+0xd6>
 8009a2a:	2a0b      	cmp	r2, #11
 8009a2c:	d917      	bls.n	8009a5e <_malloc_r+0xca>
 8009a2e:	1961      	adds	r1, r4, r5
 8009a30:	42a3      	cmp	r3, r4
 8009a32:	6025      	str	r5, [r4, #0]
 8009a34:	bf18      	it	ne
 8009a36:	6059      	strne	r1, [r3, #4]
 8009a38:	6863      	ldr	r3, [r4, #4]
 8009a3a:	bf08      	it	eq
 8009a3c:	f8c8 1000 	streq.w	r1, [r8]
 8009a40:	5162      	str	r2, [r4, r5]
 8009a42:	604b      	str	r3, [r1, #4]
 8009a44:	4638      	mov	r0, r7
 8009a46:	f104 060b 	add.w	r6, r4, #11
 8009a4a:	f000 f829 	bl	8009aa0 <__malloc_unlock>
 8009a4e:	f026 0607 	bic.w	r6, r6, #7
 8009a52:	1d23      	adds	r3, r4, #4
 8009a54:	1af2      	subs	r2, r6, r3
 8009a56:	d0ae      	beq.n	80099b6 <_malloc_r+0x22>
 8009a58:	1b9b      	subs	r3, r3, r6
 8009a5a:	50a3      	str	r3, [r4, r2]
 8009a5c:	e7ab      	b.n	80099b6 <_malloc_r+0x22>
 8009a5e:	42a3      	cmp	r3, r4
 8009a60:	6862      	ldr	r2, [r4, #4]
 8009a62:	d1dd      	bne.n	8009a20 <_malloc_r+0x8c>
 8009a64:	f8c8 2000 	str.w	r2, [r8]
 8009a68:	e7ec      	b.n	8009a44 <_malloc_r+0xb0>
 8009a6a:	4623      	mov	r3, r4
 8009a6c:	6864      	ldr	r4, [r4, #4]
 8009a6e:	e7ac      	b.n	80099ca <_malloc_r+0x36>
 8009a70:	4634      	mov	r4, r6
 8009a72:	6876      	ldr	r6, [r6, #4]
 8009a74:	e7b4      	b.n	80099e0 <_malloc_r+0x4c>
 8009a76:	4613      	mov	r3, r2
 8009a78:	e7cc      	b.n	8009a14 <_malloc_r+0x80>
 8009a7a:	230c      	movs	r3, #12
 8009a7c:	603b      	str	r3, [r7, #0]
 8009a7e:	4638      	mov	r0, r7
 8009a80:	f000 f80e 	bl	8009aa0 <__malloc_unlock>
 8009a84:	e797      	b.n	80099b6 <_malloc_r+0x22>
 8009a86:	6025      	str	r5, [r4, #0]
 8009a88:	e7dc      	b.n	8009a44 <_malloc_r+0xb0>
 8009a8a:	605b      	str	r3, [r3, #4]
 8009a8c:	deff      	udf	#255	; 0xff
 8009a8e:	bf00      	nop
 8009a90:	20002504 	.word	0x20002504

08009a94 <__malloc_lock>:
 8009a94:	4801      	ldr	r0, [pc, #4]	; (8009a9c <__malloc_lock+0x8>)
 8009a96:	f7ff bf01 	b.w	800989c <__retarget_lock_acquire_recursive>
 8009a9a:	bf00      	nop
 8009a9c:	20002500 	.word	0x20002500

08009aa0 <__malloc_unlock>:
 8009aa0:	4801      	ldr	r0, [pc, #4]	; (8009aa8 <__malloc_unlock+0x8>)
 8009aa2:	f7ff befc 	b.w	800989e <__retarget_lock_release_recursive>
 8009aa6:	bf00      	nop
 8009aa8:	20002500 	.word	0x20002500

08009aac <__ssputs_r>:
 8009aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab0:	688e      	ldr	r6, [r1, #8]
 8009ab2:	461f      	mov	r7, r3
 8009ab4:	42be      	cmp	r6, r7
 8009ab6:	680b      	ldr	r3, [r1, #0]
 8009ab8:	4682      	mov	sl, r0
 8009aba:	460c      	mov	r4, r1
 8009abc:	4690      	mov	r8, r2
 8009abe:	d82c      	bhi.n	8009b1a <__ssputs_r+0x6e>
 8009ac0:	898a      	ldrh	r2, [r1, #12]
 8009ac2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ac6:	d026      	beq.n	8009b16 <__ssputs_r+0x6a>
 8009ac8:	6965      	ldr	r5, [r4, #20]
 8009aca:	6909      	ldr	r1, [r1, #16]
 8009acc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ad0:	eba3 0901 	sub.w	r9, r3, r1
 8009ad4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ad8:	1c7b      	adds	r3, r7, #1
 8009ada:	444b      	add	r3, r9
 8009adc:	106d      	asrs	r5, r5, #1
 8009ade:	429d      	cmp	r5, r3
 8009ae0:	bf38      	it	cc
 8009ae2:	461d      	movcc	r5, r3
 8009ae4:	0553      	lsls	r3, r2, #21
 8009ae6:	d527      	bpl.n	8009b38 <__ssputs_r+0x8c>
 8009ae8:	4629      	mov	r1, r5
 8009aea:	f7ff ff53 	bl	8009994 <_malloc_r>
 8009aee:	4606      	mov	r6, r0
 8009af0:	b360      	cbz	r0, 8009b4c <__ssputs_r+0xa0>
 8009af2:	6921      	ldr	r1, [r4, #16]
 8009af4:	464a      	mov	r2, r9
 8009af6:	f7ff fed3 	bl	80098a0 <memcpy>
 8009afa:	89a3      	ldrh	r3, [r4, #12]
 8009afc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b04:	81a3      	strh	r3, [r4, #12]
 8009b06:	6126      	str	r6, [r4, #16]
 8009b08:	6165      	str	r5, [r4, #20]
 8009b0a:	444e      	add	r6, r9
 8009b0c:	eba5 0509 	sub.w	r5, r5, r9
 8009b10:	6026      	str	r6, [r4, #0]
 8009b12:	60a5      	str	r5, [r4, #8]
 8009b14:	463e      	mov	r6, r7
 8009b16:	42be      	cmp	r6, r7
 8009b18:	d900      	bls.n	8009b1c <__ssputs_r+0x70>
 8009b1a:	463e      	mov	r6, r7
 8009b1c:	6820      	ldr	r0, [r4, #0]
 8009b1e:	4632      	mov	r2, r6
 8009b20:	4641      	mov	r1, r8
 8009b22:	f000 faab 	bl	800a07c <memmove>
 8009b26:	68a3      	ldr	r3, [r4, #8]
 8009b28:	1b9b      	subs	r3, r3, r6
 8009b2a:	60a3      	str	r3, [r4, #8]
 8009b2c:	6823      	ldr	r3, [r4, #0]
 8009b2e:	4433      	add	r3, r6
 8009b30:	6023      	str	r3, [r4, #0]
 8009b32:	2000      	movs	r0, #0
 8009b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b38:	462a      	mov	r2, r5
 8009b3a:	f000 fac9 	bl	800a0d0 <_realloc_r>
 8009b3e:	4606      	mov	r6, r0
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d1e0      	bne.n	8009b06 <__ssputs_r+0x5a>
 8009b44:	6921      	ldr	r1, [r4, #16]
 8009b46:	4650      	mov	r0, sl
 8009b48:	f7ff feb8 	bl	80098bc <_free_r>
 8009b4c:	230c      	movs	r3, #12
 8009b4e:	f8ca 3000 	str.w	r3, [sl]
 8009b52:	89a3      	ldrh	r3, [r4, #12]
 8009b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b58:	81a3      	strh	r3, [r4, #12]
 8009b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b5e:	e7e9      	b.n	8009b34 <__ssputs_r+0x88>

08009b60 <_svfiprintf_r>:
 8009b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	4698      	mov	r8, r3
 8009b66:	898b      	ldrh	r3, [r1, #12]
 8009b68:	061b      	lsls	r3, r3, #24
 8009b6a:	b09d      	sub	sp, #116	; 0x74
 8009b6c:	4607      	mov	r7, r0
 8009b6e:	460d      	mov	r5, r1
 8009b70:	4614      	mov	r4, r2
 8009b72:	d50e      	bpl.n	8009b92 <_svfiprintf_r+0x32>
 8009b74:	690b      	ldr	r3, [r1, #16]
 8009b76:	b963      	cbnz	r3, 8009b92 <_svfiprintf_r+0x32>
 8009b78:	2140      	movs	r1, #64	; 0x40
 8009b7a:	f7ff ff0b 	bl	8009994 <_malloc_r>
 8009b7e:	6028      	str	r0, [r5, #0]
 8009b80:	6128      	str	r0, [r5, #16]
 8009b82:	b920      	cbnz	r0, 8009b8e <_svfiprintf_r+0x2e>
 8009b84:	230c      	movs	r3, #12
 8009b86:	603b      	str	r3, [r7, #0]
 8009b88:	f04f 30ff 	mov.w	r0, #4294967295
 8009b8c:	e0d0      	b.n	8009d30 <_svfiprintf_r+0x1d0>
 8009b8e:	2340      	movs	r3, #64	; 0x40
 8009b90:	616b      	str	r3, [r5, #20]
 8009b92:	2300      	movs	r3, #0
 8009b94:	9309      	str	r3, [sp, #36]	; 0x24
 8009b96:	2320      	movs	r3, #32
 8009b98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ba0:	2330      	movs	r3, #48	; 0x30
 8009ba2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009d48 <_svfiprintf_r+0x1e8>
 8009ba6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009baa:	f04f 0901 	mov.w	r9, #1
 8009bae:	4623      	mov	r3, r4
 8009bb0:	469a      	mov	sl, r3
 8009bb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bb6:	b10a      	cbz	r2, 8009bbc <_svfiprintf_r+0x5c>
 8009bb8:	2a25      	cmp	r2, #37	; 0x25
 8009bba:	d1f9      	bne.n	8009bb0 <_svfiprintf_r+0x50>
 8009bbc:	ebba 0b04 	subs.w	fp, sl, r4
 8009bc0:	d00b      	beq.n	8009bda <_svfiprintf_r+0x7a>
 8009bc2:	465b      	mov	r3, fp
 8009bc4:	4622      	mov	r2, r4
 8009bc6:	4629      	mov	r1, r5
 8009bc8:	4638      	mov	r0, r7
 8009bca:	f7ff ff6f 	bl	8009aac <__ssputs_r>
 8009bce:	3001      	adds	r0, #1
 8009bd0:	f000 80a9 	beq.w	8009d26 <_svfiprintf_r+0x1c6>
 8009bd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bd6:	445a      	add	r2, fp
 8009bd8:	9209      	str	r2, [sp, #36]	; 0x24
 8009bda:	f89a 3000 	ldrb.w	r3, [sl]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f000 80a1 	beq.w	8009d26 <_svfiprintf_r+0x1c6>
 8009be4:	2300      	movs	r3, #0
 8009be6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bee:	f10a 0a01 	add.w	sl, sl, #1
 8009bf2:	9304      	str	r3, [sp, #16]
 8009bf4:	9307      	str	r3, [sp, #28]
 8009bf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bfa:	931a      	str	r3, [sp, #104]	; 0x68
 8009bfc:	4654      	mov	r4, sl
 8009bfe:	2205      	movs	r2, #5
 8009c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c04:	4850      	ldr	r0, [pc, #320]	; (8009d48 <_svfiprintf_r+0x1e8>)
 8009c06:	f7f6 fae3 	bl	80001d0 <memchr>
 8009c0a:	9a04      	ldr	r2, [sp, #16]
 8009c0c:	b9d8      	cbnz	r0, 8009c46 <_svfiprintf_r+0xe6>
 8009c0e:	06d0      	lsls	r0, r2, #27
 8009c10:	bf44      	itt	mi
 8009c12:	2320      	movmi	r3, #32
 8009c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c18:	0711      	lsls	r1, r2, #28
 8009c1a:	bf44      	itt	mi
 8009c1c:	232b      	movmi	r3, #43	; 0x2b
 8009c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c22:	f89a 3000 	ldrb.w	r3, [sl]
 8009c26:	2b2a      	cmp	r3, #42	; 0x2a
 8009c28:	d015      	beq.n	8009c56 <_svfiprintf_r+0xf6>
 8009c2a:	9a07      	ldr	r2, [sp, #28]
 8009c2c:	4654      	mov	r4, sl
 8009c2e:	2000      	movs	r0, #0
 8009c30:	f04f 0c0a 	mov.w	ip, #10
 8009c34:	4621      	mov	r1, r4
 8009c36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c3a:	3b30      	subs	r3, #48	; 0x30
 8009c3c:	2b09      	cmp	r3, #9
 8009c3e:	d94d      	bls.n	8009cdc <_svfiprintf_r+0x17c>
 8009c40:	b1b0      	cbz	r0, 8009c70 <_svfiprintf_r+0x110>
 8009c42:	9207      	str	r2, [sp, #28]
 8009c44:	e014      	b.n	8009c70 <_svfiprintf_r+0x110>
 8009c46:	eba0 0308 	sub.w	r3, r0, r8
 8009c4a:	fa09 f303 	lsl.w	r3, r9, r3
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	9304      	str	r3, [sp, #16]
 8009c52:	46a2      	mov	sl, r4
 8009c54:	e7d2      	b.n	8009bfc <_svfiprintf_r+0x9c>
 8009c56:	9b03      	ldr	r3, [sp, #12]
 8009c58:	1d19      	adds	r1, r3, #4
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	9103      	str	r1, [sp, #12]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	bfbb      	ittet	lt
 8009c62:	425b      	neglt	r3, r3
 8009c64:	f042 0202 	orrlt.w	r2, r2, #2
 8009c68:	9307      	strge	r3, [sp, #28]
 8009c6a:	9307      	strlt	r3, [sp, #28]
 8009c6c:	bfb8      	it	lt
 8009c6e:	9204      	strlt	r2, [sp, #16]
 8009c70:	7823      	ldrb	r3, [r4, #0]
 8009c72:	2b2e      	cmp	r3, #46	; 0x2e
 8009c74:	d10c      	bne.n	8009c90 <_svfiprintf_r+0x130>
 8009c76:	7863      	ldrb	r3, [r4, #1]
 8009c78:	2b2a      	cmp	r3, #42	; 0x2a
 8009c7a:	d134      	bne.n	8009ce6 <_svfiprintf_r+0x186>
 8009c7c:	9b03      	ldr	r3, [sp, #12]
 8009c7e:	1d1a      	adds	r2, r3, #4
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	9203      	str	r2, [sp, #12]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	bfb8      	it	lt
 8009c88:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c8c:	3402      	adds	r4, #2
 8009c8e:	9305      	str	r3, [sp, #20]
 8009c90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009d58 <_svfiprintf_r+0x1f8>
 8009c94:	7821      	ldrb	r1, [r4, #0]
 8009c96:	2203      	movs	r2, #3
 8009c98:	4650      	mov	r0, sl
 8009c9a:	f7f6 fa99 	bl	80001d0 <memchr>
 8009c9e:	b138      	cbz	r0, 8009cb0 <_svfiprintf_r+0x150>
 8009ca0:	9b04      	ldr	r3, [sp, #16]
 8009ca2:	eba0 000a 	sub.w	r0, r0, sl
 8009ca6:	2240      	movs	r2, #64	; 0x40
 8009ca8:	4082      	lsls	r2, r0
 8009caa:	4313      	orrs	r3, r2
 8009cac:	3401      	adds	r4, #1
 8009cae:	9304      	str	r3, [sp, #16]
 8009cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb4:	4825      	ldr	r0, [pc, #148]	; (8009d4c <_svfiprintf_r+0x1ec>)
 8009cb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cba:	2206      	movs	r2, #6
 8009cbc:	f7f6 fa88 	bl	80001d0 <memchr>
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d038      	beq.n	8009d36 <_svfiprintf_r+0x1d6>
 8009cc4:	4b22      	ldr	r3, [pc, #136]	; (8009d50 <_svfiprintf_r+0x1f0>)
 8009cc6:	bb1b      	cbnz	r3, 8009d10 <_svfiprintf_r+0x1b0>
 8009cc8:	9b03      	ldr	r3, [sp, #12]
 8009cca:	3307      	adds	r3, #7
 8009ccc:	f023 0307 	bic.w	r3, r3, #7
 8009cd0:	3308      	adds	r3, #8
 8009cd2:	9303      	str	r3, [sp, #12]
 8009cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd6:	4433      	add	r3, r6
 8009cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cda:	e768      	b.n	8009bae <_svfiprintf_r+0x4e>
 8009cdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ce0:	460c      	mov	r4, r1
 8009ce2:	2001      	movs	r0, #1
 8009ce4:	e7a6      	b.n	8009c34 <_svfiprintf_r+0xd4>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	3401      	adds	r4, #1
 8009cea:	9305      	str	r3, [sp, #20]
 8009cec:	4619      	mov	r1, r3
 8009cee:	f04f 0c0a 	mov.w	ip, #10
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cf8:	3a30      	subs	r2, #48	; 0x30
 8009cfa:	2a09      	cmp	r2, #9
 8009cfc:	d903      	bls.n	8009d06 <_svfiprintf_r+0x1a6>
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d0c6      	beq.n	8009c90 <_svfiprintf_r+0x130>
 8009d02:	9105      	str	r1, [sp, #20]
 8009d04:	e7c4      	b.n	8009c90 <_svfiprintf_r+0x130>
 8009d06:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e7f0      	b.n	8009cf2 <_svfiprintf_r+0x192>
 8009d10:	ab03      	add	r3, sp, #12
 8009d12:	9300      	str	r3, [sp, #0]
 8009d14:	462a      	mov	r2, r5
 8009d16:	4b0f      	ldr	r3, [pc, #60]	; (8009d54 <_svfiprintf_r+0x1f4>)
 8009d18:	a904      	add	r1, sp, #16
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	f3af 8000 	nop.w
 8009d20:	1c42      	adds	r2, r0, #1
 8009d22:	4606      	mov	r6, r0
 8009d24:	d1d6      	bne.n	8009cd4 <_svfiprintf_r+0x174>
 8009d26:	89ab      	ldrh	r3, [r5, #12]
 8009d28:	065b      	lsls	r3, r3, #25
 8009d2a:	f53f af2d 	bmi.w	8009b88 <_svfiprintf_r+0x28>
 8009d2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d30:	b01d      	add	sp, #116	; 0x74
 8009d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d36:	ab03      	add	r3, sp, #12
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	462a      	mov	r2, r5
 8009d3c:	4b05      	ldr	r3, [pc, #20]	; (8009d54 <_svfiprintf_r+0x1f4>)
 8009d3e:	a904      	add	r1, sp, #16
 8009d40:	4638      	mov	r0, r7
 8009d42:	f000 f879 	bl	8009e38 <_printf_i>
 8009d46:	e7eb      	b.n	8009d20 <_svfiprintf_r+0x1c0>
 8009d48:	0800a3fc 	.word	0x0800a3fc
 8009d4c:	0800a406 	.word	0x0800a406
 8009d50:	00000000 	.word	0x00000000
 8009d54:	08009aad 	.word	0x08009aad
 8009d58:	0800a402 	.word	0x0800a402

08009d5c <_printf_common>:
 8009d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d60:	4616      	mov	r6, r2
 8009d62:	4699      	mov	r9, r3
 8009d64:	688a      	ldr	r2, [r1, #8]
 8009d66:	690b      	ldr	r3, [r1, #16]
 8009d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	bfb8      	it	lt
 8009d70:	4613      	movlt	r3, r2
 8009d72:	6033      	str	r3, [r6, #0]
 8009d74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d78:	4607      	mov	r7, r0
 8009d7a:	460c      	mov	r4, r1
 8009d7c:	b10a      	cbz	r2, 8009d82 <_printf_common+0x26>
 8009d7e:	3301      	adds	r3, #1
 8009d80:	6033      	str	r3, [r6, #0]
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	0699      	lsls	r1, r3, #26
 8009d86:	bf42      	ittt	mi
 8009d88:	6833      	ldrmi	r3, [r6, #0]
 8009d8a:	3302      	addmi	r3, #2
 8009d8c:	6033      	strmi	r3, [r6, #0]
 8009d8e:	6825      	ldr	r5, [r4, #0]
 8009d90:	f015 0506 	ands.w	r5, r5, #6
 8009d94:	d106      	bne.n	8009da4 <_printf_common+0x48>
 8009d96:	f104 0a19 	add.w	sl, r4, #25
 8009d9a:	68e3      	ldr	r3, [r4, #12]
 8009d9c:	6832      	ldr	r2, [r6, #0]
 8009d9e:	1a9b      	subs	r3, r3, r2
 8009da0:	42ab      	cmp	r3, r5
 8009da2:	dc26      	bgt.n	8009df2 <_printf_common+0x96>
 8009da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009da8:	1e13      	subs	r3, r2, #0
 8009daa:	6822      	ldr	r2, [r4, #0]
 8009dac:	bf18      	it	ne
 8009dae:	2301      	movne	r3, #1
 8009db0:	0692      	lsls	r2, r2, #26
 8009db2:	d42b      	bmi.n	8009e0c <_printf_common+0xb0>
 8009db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009db8:	4649      	mov	r1, r9
 8009dba:	4638      	mov	r0, r7
 8009dbc:	47c0      	blx	r8
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	d01e      	beq.n	8009e00 <_printf_common+0xa4>
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	6922      	ldr	r2, [r4, #16]
 8009dc6:	f003 0306 	and.w	r3, r3, #6
 8009dca:	2b04      	cmp	r3, #4
 8009dcc:	bf02      	ittt	eq
 8009dce:	68e5      	ldreq	r5, [r4, #12]
 8009dd0:	6833      	ldreq	r3, [r6, #0]
 8009dd2:	1aed      	subeq	r5, r5, r3
 8009dd4:	68a3      	ldr	r3, [r4, #8]
 8009dd6:	bf0c      	ite	eq
 8009dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ddc:	2500      	movne	r5, #0
 8009dde:	4293      	cmp	r3, r2
 8009de0:	bfc4      	itt	gt
 8009de2:	1a9b      	subgt	r3, r3, r2
 8009de4:	18ed      	addgt	r5, r5, r3
 8009de6:	2600      	movs	r6, #0
 8009de8:	341a      	adds	r4, #26
 8009dea:	42b5      	cmp	r5, r6
 8009dec:	d11a      	bne.n	8009e24 <_printf_common+0xc8>
 8009dee:	2000      	movs	r0, #0
 8009df0:	e008      	b.n	8009e04 <_printf_common+0xa8>
 8009df2:	2301      	movs	r3, #1
 8009df4:	4652      	mov	r2, sl
 8009df6:	4649      	mov	r1, r9
 8009df8:	4638      	mov	r0, r7
 8009dfa:	47c0      	blx	r8
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d103      	bne.n	8009e08 <_printf_common+0xac>
 8009e00:	f04f 30ff 	mov.w	r0, #4294967295
 8009e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e08:	3501      	adds	r5, #1
 8009e0a:	e7c6      	b.n	8009d9a <_printf_common+0x3e>
 8009e0c:	18e1      	adds	r1, r4, r3
 8009e0e:	1c5a      	adds	r2, r3, #1
 8009e10:	2030      	movs	r0, #48	; 0x30
 8009e12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e16:	4422      	add	r2, r4
 8009e18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e20:	3302      	adds	r3, #2
 8009e22:	e7c7      	b.n	8009db4 <_printf_common+0x58>
 8009e24:	2301      	movs	r3, #1
 8009e26:	4622      	mov	r2, r4
 8009e28:	4649      	mov	r1, r9
 8009e2a:	4638      	mov	r0, r7
 8009e2c:	47c0      	blx	r8
 8009e2e:	3001      	adds	r0, #1
 8009e30:	d0e6      	beq.n	8009e00 <_printf_common+0xa4>
 8009e32:	3601      	adds	r6, #1
 8009e34:	e7d9      	b.n	8009dea <_printf_common+0x8e>
	...

08009e38 <_printf_i>:
 8009e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e3c:	7e0f      	ldrb	r7, [r1, #24]
 8009e3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e40:	2f78      	cmp	r7, #120	; 0x78
 8009e42:	4691      	mov	r9, r2
 8009e44:	4680      	mov	r8, r0
 8009e46:	460c      	mov	r4, r1
 8009e48:	469a      	mov	sl, r3
 8009e4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e4e:	d807      	bhi.n	8009e60 <_printf_i+0x28>
 8009e50:	2f62      	cmp	r7, #98	; 0x62
 8009e52:	d80a      	bhi.n	8009e6a <_printf_i+0x32>
 8009e54:	2f00      	cmp	r7, #0
 8009e56:	f000 80d4 	beq.w	800a002 <_printf_i+0x1ca>
 8009e5a:	2f58      	cmp	r7, #88	; 0x58
 8009e5c:	f000 80c0 	beq.w	8009fe0 <_printf_i+0x1a8>
 8009e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e68:	e03a      	b.n	8009ee0 <_printf_i+0xa8>
 8009e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e6e:	2b15      	cmp	r3, #21
 8009e70:	d8f6      	bhi.n	8009e60 <_printf_i+0x28>
 8009e72:	a101      	add	r1, pc, #4	; (adr r1, 8009e78 <_printf_i+0x40>)
 8009e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e78:	08009ed1 	.word	0x08009ed1
 8009e7c:	08009ee5 	.word	0x08009ee5
 8009e80:	08009e61 	.word	0x08009e61
 8009e84:	08009e61 	.word	0x08009e61
 8009e88:	08009e61 	.word	0x08009e61
 8009e8c:	08009e61 	.word	0x08009e61
 8009e90:	08009ee5 	.word	0x08009ee5
 8009e94:	08009e61 	.word	0x08009e61
 8009e98:	08009e61 	.word	0x08009e61
 8009e9c:	08009e61 	.word	0x08009e61
 8009ea0:	08009e61 	.word	0x08009e61
 8009ea4:	08009fe9 	.word	0x08009fe9
 8009ea8:	08009f11 	.word	0x08009f11
 8009eac:	08009fa3 	.word	0x08009fa3
 8009eb0:	08009e61 	.word	0x08009e61
 8009eb4:	08009e61 	.word	0x08009e61
 8009eb8:	0800a00b 	.word	0x0800a00b
 8009ebc:	08009e61 	.word	0x08009e61
 8009ec0:	08009f11 	.word	0x08009f11
 8009ec4:	08009e61 	.word	0x08009e61
 8009ec8:	08009e61 	.word	0x08009e61
 8009ecc:	08009fab 	.word	0x08009fab
 8009ed0:	682b      	ldr	r3, [r5, #0]
 8009ed2:	1d1a      	adds	r2, r3, #4
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	602a      	str	r2, [r5, #0]
 8009ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e09f      	b.n	800a024 <_printf_i+0x1ec>
 8009ee4:	6820      	ldr	r0, [r4, #0]
 8009ee6:	682b      	ldr	r3, [r5, #0]
 8009ee8:	0607      	lsls	r7, r0, #24
 8009eea:	f103 0104 	add.w	r1, r3, #4
 8009eee:	6029      	str	r1, [r5, #0]
 8009ef0:	d501      	bpl.n	8009ef6 <_printf_i+0xbe>
 8009ef2:	681e      	ldr	r6, [r3, #0]
 8009ef4:	e003      	b.n	8009efe <_printf_i+0xc6>
 8009ef6:	0646      	lsls	r6, r0, #25
 8009ef8:	d5fb      	bpl.n	8009ef2 <_printf_i+0xba>
 8009efa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009efe:	2e00      	cmp	r6, #0
 8009f00:	da03      	bge.n	8009f0a <_printf_i+0xd2>
 8009f02:	232d      	movs	r3, #45	; 0x2d
 8009f04:	4276      	negs	r6, r6
 8009f06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f0a:	485a      	ldr	r0, [pc, #360]	; (800a074 <_printf_i+0x23c>)
 8009f0c:	230a      	movs	r3, #10
 8009f0e:	e012      	b.n	8009f36 <_printf_i+0xfe>
 8009f10:	682b      	ldr	r3, [r5, #0]
 8009f12:	6820      	ldr	r0, [r4, #0]
 8009f14:	1d19      	adds	r1, r3, #4
 8009f16:	6029      	str	r1, [r5, #0]
 8009f18:	0605      	lsls	r5, r0, #24
 8009f1a:	d501      	bpl.n	8009f20 <_printf_i+0xe8>
 8009f1c:	681e      	ldr	r6, [r3, #0]
 8009f1e:	e002      	b.n	8009f26 <_printf_i+0xee>
 8009f20:	0641      	lsls	r1, r0, #25
 8009f22:	d5fb      	bpl.n	8009f1c <_printf_i+0xe4>
 8009f24:	881e      	ldrh	r6, [r3, #0]
 8009f26:	4853      	ldr	r0, [pc, #332]	; (800a074 <_printf_i+0x23c>)
 8009f28:	2f6f      	cmp	r7, #111	; 0x6f
 8009f2a:	bf0c      	ite	eq
 8009f2c:	2308      	moveq	r3, #8
 8009f2e:	230a      	movne	r3, #10
 8009f30:	2100      	movs	r1, #0
 8009f32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f36:	6865      	ldr	r5, [r4, #4]
 8009f38:	60a5      	str	r5, [r4, #8]
 8009f3a:	2d00      	cmp	r5, #0
 8009f3c:	bfa2      	ittt	ge
 8009f3e:	6821      	ldrge	r1, [r4, #0]
 8009f40:	f021 0104 	bicge.w	r1, r1, #4
 8009f44:	6021      	strge	r1, [r4, #0]
 8009f46:	b90e      	cbnz	r6, 8009f4c <_printf_i+0x114>
 8009f48:	2d00      	cmp	r5, #0
 8009f4a:	d04b      	beq.n	8009fe4 <_printf_i+0x1ac>
 8009f4c:	4615      	mov	r5, r2
 8009f4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f52:	fb03 6711 	mls	r7, r3, r1, r6
 8009f56:	5dc7      	ldrb	r7, [r0, r7]
 8009f58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f5c:	4637      	mov	r7, r6
 8009f5e:	42bb      	cmp	r3, r7
 8009f60:	460e      	mov	r6, r1
 8009f62:	d9f4      	bls.n	8009f4e <_printf_i+0x116>
 8009f64:	2b08      	cmp	r3, #8
 8009f66:	d10b      	bne.n	8009f80 <_printf_i+0x148>
 8009f68:	6823      	ldr	r3, [r4, #0]
 8009f6a:	07de      	lsls	r6, r3, #31
 8009f6c:	d508      	bpl.n	8009f80 <_printf_i+0x148>
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	6861      	ldr	r1, [r4, #4]
 8009f72:	4299      	cmp	r1, r3
 8009f74:	bfde      	ittt	le
 8009f76:	2330      	movle	r3, #48	; 0x30
 8009f78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f80:	1b52      	subs	r2, r2, r5
 8009f82:	6122      	str	r2, [r4, #16]
 8009f84:	f8cd a000 	str.w	sl, [sp]
 8009f88:	464b      	mov	r3, r9
 8009f8a:	aa03      	add	r2, sp, #12
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	4640      	mov	r0, r8
 8009f90:	f7ff fee4 	bl	8009d5c <_printf_common>
 8009f94:	3001      	adds	r0, #1
 8009f96:	d14a      	bne.n	800a02e <_printf_i+0x1f6>
 8009f98:	f04f 30ff 	mov.w	r0, #4294967295
 8009f9c:	b004      	add	sp, #16
 8009f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	f043 0320 	orr.w	r3, r3, #32
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	4833      	ldr	r0, [pc, #204]	; (800a078 <_printf_i+0x240>)
 8009fac:	2778      	movs	r7, #120	; 0x78
 8009fae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	6829      	ldr	r1, [r5, #0]
 8009fb6:	061f      	lsls	r7, r3, #24
 8009fb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fbc:	d402      	bmi.n	8009fc4 <_printf_i+0x18c>
 8009fbe:	065f      	lsls	r7, r3, #25
 8009fc0:	bf48      	it	mi
 8009fc2:	b2b6      	uxthmi	r6, r6
 8009fc4:	07df      	lsls	r7, r3, #31
 8009fc6:	bf48      	it	mi
 8009fc8:	f043 0320 	orrmi.w	r3, r3, #32
 8009fcc:	6029      	str	r1, [r5, #0]
 8009fce:	bf48      	it	mi
 8009fd0:	6023      	strmi	r3, [r4, #0]
 8009fd2:	b91e      	cbnz	r6, 8009fdc <_printf_i+0x1a4>
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	f023 0320 	bic.w	r3, r3, #32
 8009fda:	6023      	str	r3, [r4, #0]
 8009fdc:	2310      	movs	r3, #16
 8009fde:	e7a7      	b.n	8009f30 <_printf_i+0xf8>
 8009fe0:	4824      	ldr	r0, [pc, #144]	; (800a074 <_printf_i+0x23c>)
 8009fe2:	e7e4      	b.n	8009fae <_printf_i+0x176>
 8009fe4:	4615      	mov	r5, r2
 8009fe6:	e7bd      	b.n	8009f64 <_printf_i+0x12c>
 8009fe8:	682b      	ldr	r3, [r5, #0]
 8009fea:	6826      	ldr	r6, [r4, #0]
 8009fec:	6961      	ldr	r1, [r4, #20]
 8009fee:	1d18      	adds	r0, r3, #4
 8009ff0:	6028      	str	r0, [r5, #0]
 8009ff2:	0635      	lsls	r5, r6, #24
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	d501      	bpl.n	8009ffc <_printf_i+0x1c4>
 8009ff8:	6019      	str	r1, [r3, #0]
 8009ffa:	e002      	b.n	800a002 <_printf_i+0x1ca>
 8009ffc:	0670      	lsls	r0, r6, #25
 8009ffe:	d5fb      	bpl.n	8009ff8 <_printf_i+0x1c0>
 800a000:	8019      	strh	r1, [r3, #0]
 800a002:	2300      	movs	r3, #0
 800a004:	6123      	str	r3, [r4, #16]
 800a006:	4615      	mov	r5, r2
 800a008:	e7bc      	b.n	8009f84 <_printf_i+0x14c>
 800a00a:	682b      	ldr	r3, [r5, #0]
 800a00c:	1d1a      	adds	r2, r3, #4
 800a00e:	602a      	str	r2, [r5, #0]
 800a010:	681d      	ldr	r5, [r3, #0]
 800a012:	6862      	ldr	r2, [r4, #4]
 800a014:	2100      	movs	r1, #0
 800a016:	4628      	mov	r0, r5
 800a018:	f7f6 f8da 	bl	80001d0 <memchr>
 800a01c:	b108      	cbz	r0, 800a022 <_printf_i+0x1ea>
 800a01e:	1b40      	subs	r0, r0, r5
 800a020:	6060      	str	r0, [r4, #4]
 800a022:	6863      	ldr	r3, [r4, #4]
 800a024:	6123      	str	r3, [r4, #16]
 800a026:	2300      	movs	r3, #0
 800a028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a02c:	e7aa      	b.n	8009f84 <_printf_i+0x14c>
 800a02e:	6923      	ldr	r3, [r4, #16]
 800a030:	462a      	mov	r2, r5
 800a032:	4649      	mov	r1, r9
 800a034:	4640      	mov	r0, r8
 800a036:	47d0      	blx	sl
 800a038:	3001      	adds	r0, #1
 800a03a:	d0ad      	beq.n	8009f98 <_printf_i+0x160>
 800a03c:	6823      	ldr	r3, [r4, #0]
 800a03e:	079b      	lsls	r3, r3, #30
 800a040:	d413      	bmi.n	800a06a <_printf_i+0x232>
 800a042:	68e0      	ldr	r0, [r4, #12]
 800a044:	9b03      	ldr	r3, [sp, #12]
 800a046:	4298      	cmp	r0, r3
 800a048:	bfb8      	it	lt
 800a04a:	4618      	movlt	r0, r3
 800a04c:	e7a6      	b.n	8009f9c <_printf_i+0x164>
 800a04e:	2301      	movs	r3, #1
 800a050:	4632      	mov	r2, r6
 800a052:	4649      	mov	r1, r9
 800a054:	4640      	mov	r0, r8
 800a056:	47d0      	blx	sl
 800a058:	3001      	adds	r0, #1
 800a05a:	d09d      	beq.n	8009f98 <_printf_i+0x160>
 800a05c:	3501      	adds	r5, #1
 800a05e:	68e3      	ldr	r3, [r4, #12]
 800a060:	9903      	ldr	r1, [sp, #12]
 800a062:	1a5b      	subs	r3, r3, r1
 800a064:	42ab      	cmp	r3, r5
 800a066:	dcf2      	bgt.n	800a04e <_printf_i+0x216>
 800a068:	e7eb      	b.n	800a042 <_printf_i+0x20a>
 800a06a:	2500      	movs	r5, #0
 800a06c:	f104 0619 	add.w	r6, r4, #25
 800a070:	e7f5      	b.n	800a05e <_printf_i+0x226>
 800a072:	bf00      	nop
 800a074:	0800a40d 	.word	0x0800a40d
 800a078:	0800a41e 	.word	0x0800a41e

0800a07c <memmove>:
 800a07c:	4288      	cmp	r0, r1
 800a07e:	b510      	push	{r4, lr}
 800a080:	eb01 0402 	add.w	r4, r1, r2
 800a084:	d902      	bls.n	800a08c <memmove+0x10>
 800a086:	4284      	cmp	r4, r0
 800a088:	4623      	mov	r3, r4
 800a08a:	d807      	bhi.n	800a09c <memmove+0x20>
 800a08c:	1e43      	subs	r3, r0, #1
 800a08e:	42a1      	cmp	r1, r4
 800a090:	d008      	beq.n	800a0a4 <memmove+0x28>
 800a092:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a09a:	e7f8      	b.n	800a08e <memmove+0x12>
 800a09c:	4402      	add	r2, r0
 800a09e:	4601      	mov	r1, r0
 800a0a0:	428a      	cmp	r2, r1
 800a0a2:	d100      	bne.n	800a0a6 <memmove+0x2a>
 800a0a4:	bd10      	pop	{r4, pc}
 800a0a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0ae:	e7f7      	b.n	800a0a0 <memmove+0x24>

0800a0b0 <_sbrk_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4d06      	ldr	r5, [pc, #24]	; (800a0cc <_sbrk_r+0x1c>)
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	602b      	str	r3, [r5, #0]
 800a0bc:	f7f6 fe94 	bl	8000de8 <_sbrk>
 800a0c0:	1c43      	adds	r3, r0, #1
 800a0c2:	d102      	bne.n	800a0ca <_sbrk_r+0x1a>
 800a0c4:	682b      	ldr	r3, [r5, #0]
 800a0c6:	b103      	cbz	r3, 800a0ca <_sbrk_r+0x1a>
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	bd38      	pop	{r3, r4, r5, pc}
 800a0cc:	200024fc 	.word	0x200024fc

0800a0d0 <_realloc_r>:
 800a0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d4:	4680      	mov	r8, r0
 800a0d6:	4614      	mov	r4, r2
 800a0d8:	460e      	mov	r6, r1
 800a0da:	b921      	cbnz	r1, 800a0e6 <_realloc_r+0x16>
 800a0dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	f7ff bc57 	b.w	8009994 <_malloc_r>
 800a0e6:	b92a      	cbnz	r2, 800a0f4 <_realloc_r+0x24>
 800a0e8:	f7ff fbe8 	bl	80098bc <_free_r>
 800a0ec:	4625      	mov	r5, r4
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0f4:	f000 f81b 	bl	800a12e <_malloc_usable_size_r>
 800a0f8:	4284      	cmp	r4, r0
 800a0fa:	4607      	mov	r7, r0
 800a0fc:	d802      	bhi.n	800a104 <_realloc_r+0x34>
 800a0fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a102:	d812      	bhi.n	800a12a <_realloc_r+0x5a>
 800a104:	4621      	mov	r1, r4
 800a106:	4640      	mov	r0, r8
 800a108:	f7ff fc44 	bl	8009994 <_malloc_r>
 800a10c:	4605      	mov	r5, r0
 800a10e:	2800      	cmp	r0, #0
 800a110:	d0ed      	beq.n	800a0ee <_realloc_r+0x1e>
 800a112:	42bc      	cmp	r4, r7
 800a114:	4622      	mov	r2, r4
 800a116:	4631      	mov	r1, r6
 800a118:	bf28      	it	cs
 800a11a:	463a      	movcs	r2, r7
 800a11c:	f7ff fbc0 	bl	80098a0 <memcpy>
 800a120:	4631      	mov	r1, r6
 800a122:	4640      	mov	r0, r8
 800a124:	f7ff fbca 	bl	80098bc <_free_r>
 800a128:	e7e1      	b.n	800a0ee <_realloc_r+0x1e>
 800a12a:	4635      	mov	r5, r6
 800a12c:	e7df      	b.n	800a0ee <_realloc_r+0x1e>

0800a12e <_malloc_usable_size_r>:
 800a12e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a132:	1f18      	subs	r0, r3, #4
 800a134:	2b00      	cmp	r3, #0
 800a136:	bfbc      	itt	lt
 800a138:	580b      	ldrlt	r3, [r1, r0]
 800a13a:	18c0      	addlt	r0, r0, r3
 800a13c:	4770      	bx	lr
	...

0800a140 <_init>:
 800a140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a142:	bf00      	nop
 800a144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a146:	bc08      	pop	{r3}
 800a148:	469e      	mov	lr, r3
 800a14a:	4770      	bx	lr

0800a14c <_fini>:
 800a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14e:	bf00      	nop
 800a150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a152:	bc08      	pop	{r3}
 800a154:	469e      	mov	lr, r3
 800a156:	4770      	bx	lr
