
STM32_RS485_Modbus_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  080090fc  080090fc  000190fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093d4  080093d4  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  080093d4  080093d4  000193d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093dc  080093dc  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093dc  080093dc  000193dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093e0  080093e0  000193e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  080093e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          00002240  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200023a4  200023a4  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b6f  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e03  00000000  00000000  00036d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  0003ab08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010e0  00000000  00000000  0003bdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025dfd  00000000  00000000  0003cea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b7ad  00000000  00000000  00062ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccf77  00000000  00000000  0007e452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b3c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fa4  00000000  00000000  0014b41c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080090e4 	.word	0x080090e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	080090e4 	.word	0x080090e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08c      	sub	sp, #48	; 0x30
 8000578:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
 800058e:	4b72      	ldr	r3, [pc, #456]	; (8000758 <MX_GPIO_Init+0x1e4>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a71      	ldr	r2, [pc, #452]	; (8000758 <MX_GPIO_Init+0x1e4>)
 8000594:	f043 0310 	orr.w	r3, r3, #16
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b6f      	ldr	r3, [pc, #444]	; (8000758 <MX_GPIO_Init+0x1e4>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0310 	and.w	r3, r3, #16
 80005a2:	61bb      	str	r3, [r7, #24]
 80005a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	4b6b      	ldr	r3, [pc, #428]	; (8000758 <MX_GPIO_Init+0x1e4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a6a      	ldr	r2, [pc, #424]	; (8000758 <MX_GPIO_Init+0x1e4>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b68      	ldr	r3, [pc, #416]	; (8000758 <MX_GPIO_Init+0x1e4>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
 80005c6:	4b64      	ldr	r3, [pc, #400]	; (8000758 <MX_GPIO_Init+0x1e4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a63      	ldr	r2, [pc, #396]	; (8000758 <MX_GPIO_Init+0x1e4>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b61      	ldr	r3, [pc, #388]	; (8000758 <MX_GPIO_Init+0x1e4>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005da:	613b      	str	r3, [r7, #16]
 80005dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	4b5d      	ldr	r3, [pc, #372]	; (8000758 <MX_GPIO_Init+0x1e4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a5c      	ldr	r2, [pc, #368]	; (8000758 <MX_GPIO_Init+0x1e4>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b5a      	ldr	r3, [pc, #360]	; (8000758 <MX_GPIO_Init+0x1e4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b56      	ldr	r3, [pc, #344]	; (8000758 <MX_GPIO_Init+0x1e4>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a55      	ldr	r2, [pc, #340]	; (8000758 <MX_GPIO_Init+0x1e4>)
 8000604:	f043 0302 	orr.w	r3, r3, #2
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b53      	ldr	r3, [pc, #332]	; (8000758 <MX_GPIO_Init+0x1e4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0302 	and.w	r3, r3, #2
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b4f      	ldr	r3, [pc, #316]	; (8000758 <MX_GPIO_Init+0x1e4>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a4e      	ldr	r2, [pc, #312]	; (8000758 <MX_GPIO_Init+0x1e4>)
 8000620:	f043 0308 	orr.w	r3, r3, #8
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b4c      	ldr	r3, [pc, #304]	; (8000758 <MX_GPIO_Init+0x1e4>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0308 	and.w	r3, r3, #8
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2108      	movs	r1, #8
 8000636:	4849      	ldr	r0, [pc, #292]	; (800075c <MX_GPIO_Init+0x1e8>)
 8000638:	f000 ffae 	bl	8001598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	2101      	movs	r1, #1
 8000640:	4847      	ldr	r0, [pc, #284]	; (8000760 <MX_GPIO_Init+0x1ec>)
 8000642:	f000 ffa9 	bl	8001598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000646:	2200      	movs	r2, #0
 8000648:	f24f 0110 	movw	r1, #61456	; 0xf010
 800064c:	4845      	ldr	r0, [pc, #276]	; (8000764 <MX_GPIO_Init+0x1f0>)
 800064e:	f000 ffa3 	bl	8001598 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000652:	2308      	movs	r3, #8
 8000654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	2300      	movs	r3, #0
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	4619      	mov	r1, r3
 8000668:	483c      	ldr	r0, [pc, #240]	; (800075c <MX_GPIO_Init+0x1e8>)
 800066a:	f000 fde1 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800066e:	2301      	movs	r3, #1
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	4619      	mov	r1, r3
 8000684:	4836      	ldr	r0, [pc, #216]	; (8000760 <MX_GPIO_Init+0x1ec>)
 8000686:	f000 fdd3 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800068a:	2308      	movs	r3, #8
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068e:	2302      	movs	r3, #2
 8000690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800069a:	2305      	movs	r3, #5
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	4619      	mov	r1, r3
 80006a4:	482e      	ldr	r0, [pc, #184]	; (8000760 <MX_GPIO_Init+0x1ec>)
 80006a6:	f000 fdc3 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006ae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	482a      	ldr	r0, [pc, #168]	; (8000768 <MX_GPIO_Init+0x1f4>)
 80006c0:	f000 fdb6 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006c4:	2304      	movs	r3, #4
 80006c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	4619      	mov	r1, r3
 80006d6:	4825      	ldr	r0, [pc, #148]	; (800076c <MX_GPIO_Init+0x1f8>)
 80006d8:	f000 fdaa 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e2:	2302      	movs	r3, #2
 80006e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006ee:	2305      	movs	r3, #5
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4619      	mov	r1, r3
 80006f8:	481c      	ldr	r0, [pc, #112]	; (800076c <MX_GPIO_Init+0x1f8>)
 80006fa:	f000 fd99 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006fe:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000702:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	2301      	movs	r3, #1
 8000706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	4813      	ldr	r0, [pc, #76]	; (8000764 <MX_GPIO_Init+0x1f0>)
 8000718:	f000 fd8a 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800071c:	2320      	movs	r3, #32
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	2300      	movs	r3, #0
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4619      	mov	r1, r3
 800072e:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_GPIO_Init+0x1f0>)
 8000730:	f000 fd7e 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000734:	2302      	movs	r3, #2
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000738:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_GPIO_Init+0x1e8>)
 800074a:	f000 fd71 	bl	8001230 <HAL_GPIO_Init>

}
 800074e:	bf00      	nop
 8000750:	3730      	adds	r7, #48	; 0x30
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40021000 	.word	0x40021000
 8000760:	40020800 	.word	0x40020800
 8000764:	40020c00 	.word	0x40020c00
 8000768:	40020000 	.word	0x40020000
 800076c:	40020400 	.word	0x40020400

08000770 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000776:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <MX_I2C1_Init+0x54>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_I2C1_Init+0x50>)
 800077c:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_I2C1_Init+0x58>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_I2C1_Init+0x50>)
 800078e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000792:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_I2C1_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_I2C1_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <MX_I2C1_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_I2C1_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_I2C1_Init+0x50>)
 80007ae:	f000 ff27 	bl	8001600 <HAL_I2C_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b8:	f000 fa40 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000180 	.word	0x20000180
 80007c4:	40005400 	.word	0x40005400
 80007c8:	000186a0 	.word	0x000186a0

080007cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a19      	ldr	r2, [pc, #100]	; (8000850 <HAL_I2C_MspInit+0x84>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d12c      	bne.n	8000848 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <HAL_I2C_MspInit+0x88>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a17      	ldr	r2, [pc, #92]	; (8000854 <HAL_I2C_MspInit+0x88>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_I2C_MspInit+0x88>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800080a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800080e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000810:	2312      	movs	r3, #18
 8000812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000814:	2301      	movs	r3, #1
 8000816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800081c:	2304      	movs	r3, #4
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	480c      	ldr	r0, [pc, #48]	; (8000858 <HAL_I2C_MspInit+0x8c>)
 8000828:	f000 fd02 	bl	8001230 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_I2C_MspInit+0x88>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <HAL_I2C_MspInit+0x88>)
 8000836:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800083a:	6413      	str	r3, [r2, #64]	; 0x40
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_I2C_MspInit+0x88>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	; 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40005400 	.word	0x40005400
 8000854:	40023800 	.word	0x40023800
 8000858:	40020400 	.word	0x40020400

0800085c <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_I2S3_Init+0x54>)
 8000862:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <MX_I2S3_Init+0x58>)
 8000864:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_I2S3_Init+0x54>)
 8000868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_I2S3_Init+0x54>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000874:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_I2S3_Init+0x54>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_I2S3_Init+0x54>)
 800087c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000880:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_I2S3_Init+0x54>)
 8000884:	4a0c      	ldr	r2, [pc, #48]	; (80008b8 <MX_I2S3_Init+0x5c>)
 8000886:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_I2S3_Init+0x54>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_I2S3_Init+0x54>)
 8000890:	2200      	movs	r2, #0
 8000892:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_I2S3_Init+0x54>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_I2S3_Init+0x54>)
 800089c:	f000 fff4 	bl	8001888 <HAL_I2S_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008a6:	f000 f9c9 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200001d4 	.word	0x200001d4
 80008b4:	40003c00 	.word	0x40003c00
 80008b8:	00017700 	.word	0x00017700

080008bc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08e      	sub	sp, #56	; 0x38
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a31      	ldr	r2, [pc, #196]	; (80009ac <HAL_I2S_MspInit+0xf0>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d15a      	bne.n	80009a2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008ec:	2301      	movs	r3, #1
 80008ee:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008f0:	23c0      	movs	r3, #192	; 0xc0
 80008f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4618      	mov	r0, r3
 80008fe:	f003 fb65 	bl	8003fcc <HAL_RCCEx_PeriphCLKConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000908:	f000 f998 	bl	8000c3c <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <HAL_I2S_MspInit+0xf4>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	4a26      	ldr	r2, [pc, #152]	; (80009b0 <HAL_I2S_MspInit+0xf4>)
 8000916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800091a:	6413      	str	r3, [r2, #64]	; 0x40
 800091c:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <HAL_I2S_MspInit+0xf4>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <HAL_I2S_MspInit+0xf4>)
 800092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000930:	4a1f      	ldr	r2, [pc, #124]	; (80009b0 <HAL_I2S_MspInit+0xf4>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	6313      	str	r3, [r2, #48]	; 0x30
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <HAL_I2S_MspInit+0xf4>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093c:	f003 0301 	and.w	r3, r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <HAL_I2S_MspInit+0xf4>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	4a18      	ldr	r2, [pc, #96]	; (80009b0 <HAL_I2S_MspInit+0xf4>)
 800094e:	f043 0304 	orr.w	r3, r3, #4
 8000952:	6313      	str	r3, [r2, #48]	; 0x30
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <HAL_I2S_MspInit+0xf4>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000960:	2310      	movs	r3, #16
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000970:	2306      	movs	r3, #6
 8000972:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000978:	4619      	mov	r1, r3
 800097a:	480e      	ldr	r0, [pc, #56]	; (80009b4 <HAL_I2S_MspInit+0xf8>)
 800097c:	f000 fc58 	bl	8001230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000980:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000992:	2306      	movs	r3, #6
 8000994:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	4806      	ldr	r0, [pc, #24]	; (80009b8 <HAL_I2S_MspInit+0xfc>)
 800099e:	f000 fc47 	bl	8001230 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009a2:	bf00      	nop
 80009a4:	3738      	adds	r7, #56	; 0x38
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40003c00 	.word	0x40003c00
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40020000 	.word	0x40020000
 80009b8:	40020800 	.word	0x40020800

080009bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	uint32_t lastRun = 0U;
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c6:	f000 fa8b 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ca:	f000 f8cd 	bl	8000b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ce:	f7ff fdd1 	bl	8000574 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009d2:	f7ff fecd 	bl	8000770 <MX_I2C1_Init>
  MX_I2S3_Init();
 80009d6:	f7ff ff41 	bl	800085c <MX_I2S3_Init>
  MX_SPI1_Init();
 80009da:	f000 f935 	bl	8000c48 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80009de:	f007 f98f 	bl	8007d00 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 nowTime = HAL_GetTick();
 80009e2:	f000 fae3 	bl	8000fac <HAL_GetTick>
 80009e6:	6038      	str	r0, [r7, #0]

	 if ((nowTime - lastRun) >= 1000) {
 80009e8:	683a      	ldr	r2, [r7, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009f2:	d33f      	bcc.n	8000a74 <main+0xb8>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80009f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f8:	484c      	ldr	r0, [pc, #304]	; (8000b2c <main+0x170>)
 80009fa:	f000 fde6 	bl	80015ca <HAL_GPIO_TogglePin>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80009fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a02:	484a      	ldr	r0, [pc, #296]	; (8000b2c <main+0x170>)
 8000a04:	f000 fde1 	bl	80015ca <HAL_GPIO_TogglePin>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a0c:	4847      	ldr	r0, [pc, #284]	; (8000b2c <main+0x170>)
 8000a0e:	f000 fddc 	bl	80015ca <HAL_GPIO_TogglePin>

		 MB_MasterState=MBUS_REQSENT;
 8000a12:	4b47      	ldr	r3, [pc, #284]	; (8000b30 <main+0x174>)
 8000a14:	2202      	movs	r2, #2
 8000a16:	701a      	strb	r2, [r3, #0]
//		 ---   Slave ID=1, Write state 511 of 1 analog output register on addresses 0-15
//		  errorCode = eMBMasterReqWriteHoldingRegister(1,MBCnt,511,1);
//		  MBCnt= (MBCnt + 1) % 16;

//		 ---   Slave ID=1, Write state 511 of 1 analog output register on addresses 0-15
		 usModbusUserData[0]= usModbusUserData[1]= usModbusUserData[2]= usModbusUserData[3]=MBCnt;
 8000a18:	4b46      	ldr	r3, [pc, #280]	; (8000b34 <main+0x178>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	4b46      	ldr	r3, [pc, #280]	; (8000b38 <main+0x17c>)
 8000a20:	80da      	strh	r2, [r3, #6]
 8000a22:	4b45      	ldr	r3, [pc, #276]	; (8000b38 <main+0x17c>)
 8000a24:	88da      	ldrh	r2, [r3, #6]
 8000a26:	4b44      	ldr	r3, [pc, #272]	; (8000b38 <main+0x17c>)
 8000a28:	809a      	strh	r2, [r3, #4]
 8000a2a:	4b43      	ldr	r3, [pc, #268]	; (8000b38 <main+0x17c>)
 8000a2c:	889a      	ldrh	r2, [r3, #4]
 8000a2e:	4b42      	ldr	r3, [pc, #264]	; (8000b38 <main+0x17c>)
 8000a30:	805a      	strh	r2, [r3, #2]
 8000a32:	4b41      	ldr	r3, [pc, #260]	; (8000b38 <main+0x17c>)
 8000a34:	885a      	ldrh	r2, [r3, #2]
 8000a36:	4b40      	ldr	r3, [pc, #256]	; (8000b38 <main+0x17c>)
 8000a38:	801a      	strh	r2, [r3, #0]
		 errorCode = eMBMasterReqWriteMultipleHoldingRegister(1,MBCnt,2,usModbusUserData,1);
 8000a3a:	4b3e      	ldr	r3, [pc, #248]	; (8000b34 <main+0x178>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b299      	uxth	r1, r3
 8000a40:	2301      	movs	r3, #1
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	4b3c      	ldr	r3, [pc, #240]	; (8000b38 <main+0x17c>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f005 f8d5 	bl	8005bf8 <eMBMasterReqWriteMultipleHoldingRegister>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b3a      	ldr	r3, [pc, #232]	; (8000b3c <main+0x180>)
 8000a54:	701a      	strb	r2, [r3, #0]
		 MBCnt= (MBCnt + 1) % 16;
 8000a56:	4b37      	ldr	r3, [pc, #220]	; (8000b34 <main+0x178>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	425a      	negs	r2, r3
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	f002 020f 	and.w	r2, r2, #15
 8000a66:	bf58      	it	pl
 8000a68:	4253      	negpl	r3, r2
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	4b31      	ldr	r3, [pc, #196]	; (8000b34 <main+0x178>)
 8000a6e:	701a      	strb	r2, [r3, #0]
		 //       UNChecked tests - TODO
		 // -------------------------------------

		 //		errorCode = eMBMasterReqReadWriteMultipleHoldingRegister(1,3,2,usModbusUserData,5,2,WAIT_FOREVER);

	     lastRun = nowTime;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	607b      	str	r3, [r7, #4]
	 }


	 KeyState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000a74:	2101      	movs	r1, #1
 8000a76:	4832      	ldr	r0, [pc, #200]	; (8000b40 <main+0x184>)
 8000a78:	f000 fd76 	bl	8001568 <HAL_GPIO_ReadPin>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <main+0x188>)
 8000a82:	601a      	str	r2, [r3, #0]
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, KeyState);
 8000a84:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <main+0x188>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a90:	4826      	ldr	r0, [pc, #152]	; (8000b2c <main+0x170>)
 8000a92:	f000 fd81 	bl	8001598 <HAL_GPIO_WritePin>


      // Receive over USB Virtual ComPort
	  if (RXbufferStrLen > 0) {
 8000a96:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <main+0x18c>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0a0      	beq.n	80009e2 <main+0x26>

		  if ((RXbuffer[0] == MBbuffer[0]) && (RXbuffer[1] == MBbuffer[1]) ) {
 8000aa0:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <main+0x190>)
 8000aa2:	781a      	ldrb	r2, [r3, #0]
 8000aa4:	4b2a      	ldr	r3, [pc, #168]	; (8000b50 <main+0x194>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d10c      	bne.n	8000ac6 <main+0x10a>
 8000aac:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <main+0x190>)
 8000aae:	785a      	ldrb	r2, [r3, #1]
 8000ab0:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <main+0x194>)
 8000ab2:	785b      	ldrb	r3, [r3, #1]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d106      	bne.n	8000ac6 <main+0x10a>
			  succCount++;
 8000ab8:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <main+0x198>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <main+0x198>)
 8000ac2:	801a      	strh	r2, [r3, #0]
 8000ac4:	e009      	b.n	8000ada <main+0x11e>
		  } else {
			  errorCount++;
 8000ac6:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <main+0x19c>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	3301      	adds	r3, #1
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <main+0x19c>)
 8000ad0:	801a      	strh	r2, [r3, #0]
			  MBErrorCode = RXbuffer[2];
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <main+0x190>)
 8000ad4:	789a      	ldrb	r2, [r3, #2]
 8000ad6:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <main+0x1a0>)
 8000ad8:	701a      	strb	r2, [r3, #0]
		  }

		  snprintf(SendBuffer,BUFSIZE,"Modbus Msg Received: Addr:%d FC:%02x Bytes:%d | %02x %02x %04x\r\n\0",RXbuffer[0],RXbuffer[1],RXbuffer[2],RXbuffer[3],RXbuffer[4],RXbuffer[3]*256+RXbuffer[4]);
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <main+0x190>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461e      	mov	r6, r3
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <main+0x190>)
 8000ae2:	785b      	ldrb	r3, [r3, #1]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <main+0x190>)
 8000ae8:	789b      	ldrb	r3, [r3, #2]
 8000aea:	4618      	mov	r0, r3
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <main+0x190>)
 8000aee:	78db      	ldrb	r3, [r3, #3]
 8000af0:	461c      	mov	r4, r3
 8000af2:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <main+0x190>)
 8000af4:	791b      	ldrb	r3, [r3, #4]
 8000af6:	461d      	mov	r5, r3
 8000af8:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <main+0x190>)
 8000afa:	78db      	ldrb	r3, [r3, #3]
 8000afc:	021b      	lsls	r3, r3, #8
 8000afe:	4a13      	ldr	r2, [pc, #76]	; (8000b4c <main+0x190>)
 8000b00:	7912      	ldrb	r2, [r2, #4]
 8000b02:	4413      	add	r3, r2
 8000b04:	9304      	str	r3, [sp, #16]
 8000b06:	9503      	str	r5, [sp, #12]
 8000b08:	9402      	str	r4, [sp, #8]
 8000b0a:	9001      	str	r0, [sp, #4]
 8000b0c:	9100      	str	r1, [sp, #0]
 8000b0e:	4633      	mov	r3, r6
 8000b10:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <main+0x1a4>)
 8000b12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b16:	4813      	ldr	r0, [pc, #76]	; (8000b64 <main+0x1a8>)
 8000b18:	f007 fe70 	bl	80087fc <sniprintf>
          // Not sending on USB not to interfere with MODBUS communication !

		  MB_MasterState=MBUS_READY;
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <main+0x174>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	701a      	strb	r2, [r3, #0]
		  RXbufferStrLen = 0;
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <main+0x18c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
	 nowTime = HAL_GetTick();
 8000b28:	e75b      	b.n	80009e2 <main+0x26>
 8000b2a:	bf00      	nop
 8000b2c:	40020c00 	.word	0x40020c00
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000524 	.word	0x20000524
 8000b38:	2000052c 	.word	0x2000052c
 8000b3c:	20000525 	.word	0x20000525
 8000b40:	40020000 	.word	0x40020000
 8000b44:	2000031c 	.word	0x2000031c
 8000b48:	20000420 	.word	0x20000420
 8000b4c:	20000320 	.word	0x20000320
 8000b50:	20000424 	.word	0x20000424
 8000b54:	20000528 	.word	0x20000528
 8000b58:	20000526 	.word	0x20000526
 8000b5c:	2000052a 	.word	0x2000052a
 8000b60:	080090fc 	.word	0x080090fc
 8000b64:	2000021c 	.word	0x2000021c

08000b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b094      	sub	sp, #80	; 0x50
 8000b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6e:	f107 0320 	add.w	r3, r7, #32
 8000b72:	2230      	movs	r2, #48	; 0x30
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f007 fe38 	bl	80087ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <SystemClock_Config+0xcc>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	4a27      	ldr	r2, [pc, #156]	; (8000c34 <SystemClock_Config+0xcc>)
 8000b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9c:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <SystemClock_Config+0xcc>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <SystemClock_Config+0xd0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a21      	ldr	r2, [pc, #132]	; (8000c38 <SystemClock_Config+0xd0>)
 8000bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <SystemClock_Config+0xd0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bdc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000be0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000be6:	2307      	movs	r3, #7
 8000be8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bea:	f107 0320 	add.w	r3, r7, #32
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f002 fd68 	bl	80036c4 <HAL_RCC_OscConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bfa:	f000 f81f 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	230f      	movs	r3, #15
 8000c00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c02:	2302      	movs	r3, #2
 8000c04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	2105      	movs	r1, #5
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f002 ffc9 	bl	8003bb4 <HAL_RCC_ClockConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c28:	f000 f808 	bl	8000c3c <Error_Handler>
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3750      	adds	r7, #80	; 0x50
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40007000 	.word	0x40007000

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_SPI1_Init+0x64>)
 8000c4e:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <MX_SPI1_Init+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <MX_SPI1_Init+0x64>)
 8000c54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_SPI1_Init+0x64>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_SPI1_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_SPI1_Init+0x64>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_SPI1_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_SPI1_Init+0x64>)
 8000c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_SPI1_Init+0x64>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <MX_SPI1_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_SPI1_Init+0x64>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <MX_SPI1_Init+0x64>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_SPI1_Init+0x64>)
 8000c94:	220a      	movs	r2, #10
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_SPI1_Init+0x64>)
 8000c9a:	f003 fad7 	bl	800424c <HAL_SPI_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ca4:	f7ff ffca 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000728 	.word	0x20000728
 8000cb0:	40013000 	.word	0x40013000

08000cb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <HAL_SPI_MspInit+0x84>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d12b      	bne.n	8000d2e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000ce0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_SPI_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d0e:	23e0      	movs	r3, #224	; 0xe0
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_SPI_MspInit+0x8c>)
 8000d2a:	f000 fa81 	bl	8001230 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	; 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40013000 	.word	0x40013000
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000

08000d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_MspInit+0x4c>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d82:	2007      	movs	r0, #7
 8000d84:	f000 fa12 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40023800 	.word	0x40023800

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <NMI_Handler+0x4>

08000d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <HardFault_Handler+0x4>

08000da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <MemManage_Handler+0x4>

08000da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <BusFault_Handler+0x4>

08000dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <UsageFault_Handler+0x4>

08000db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de0:	f000 f8d0 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <OTG_FS_IRQHandler+0x10>)
 8000dee:	f001 fb3b 	bl	8002468 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20001c68 	.word	0x20001c68

08000dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <_sbrk+0x5c>)
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <_sbrk+0x60>)
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <_sbrk+0x64>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <_sbrk+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d207      	bcs.n	8000e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e2c:	f007 fca6 	bl	800877c <__errno>
 8000e30:	4603      	mov	r3, r0
 8000e32:	220c      	movs	r2, #12
 8000e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	e009      	b.n	8000e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <_sbrk+0x64>)
 8000e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20020000 	.word	0x20020000
 8000e5c:	00000400 	.word	0x00000400
 8000e60:	20000780 	.word	0x20000780
 8000e64:	200023a8 	.word	0x200023a8

08000e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <SystemInit+0x20>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <SystemInit+0x20>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e92:	490e      	ldr	r1, [pc, #56]	; (8000ecc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea8:	4c0b      	ldr	r4, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eb6:	f7ff ffd7 	bl	8000e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eba:	f007 fc65 	bl	8008788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ebe:	f7ff fd7d 	bl	80009bc <main>
  bx  lr    
 8000ec2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000ed0:	080093e4 	.word	0x080093e4
  ldr r2, =_sbss
 8000ed4:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000ed8:	200023a4 	.word	0x200023a4

08000edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <HAL_Init+0x40>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_Init+0x40>)
 8000ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	; (8000f20 <HAL_Init+0x40>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f94f 	bl	80011ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f7ff ff16 	bl	8000d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f967 	bl	8001216 <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f000 f92f 	bl	80011c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000004 	.word	0x20000004
 8000f7c:	2000000c 	.word	0x2000000c
 8000f80:	20000008 	.word	0x20000008

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	2000000c 	.word	0x2000000c
 8000fa8:	20000784 	.word	0x20000784

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000784 	.word	0x20000784

08000fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff ffee 	bl	8000fac <HAL_GetTick>
 8000fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fdc:	d005      	beq.n	8000fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_Delay+0x44>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fea:	bf00      	nop
 8000fec:	f7ff ffde 	bl	8000fac <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d8f7      	bhi.n	8000fec <HAL_Delay+0x28>
  {
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	2000000c 	.word	0x2000000c

0800100c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001028:	4013      	ands	r3, r2
 800102a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001034:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x44>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <__NVIC_GetPriorityGrouping+0x18>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	0a1b      	lsrs	r3, r3, #8
 800105e:	f003 0307 	and.w	r3, r3, #7
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <__NVIC_EnableIRQ+0x38>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001178:	d301      	bcc.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e00f      	b.n	800119e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <SysTick_Config+0x40>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	210f      	movs	r1, #15
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f7ff ff8e 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <SysTick_Config+0x40>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <SysTick_Config+0x40>)
 8001198:	2207      	movs	r2, #7
 800119a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	e000e010 	.word	0xe000e010

080011ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff29 	bl	800100c <__NVIC_SetPriorityGrouping>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
 80011ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d4:	f7ff ff3e 	bl	8001054 <__NVIC_GetPriorityGrouping>
 80011d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68b9      	ldr	r1, [r7, #8]
 80011de:	6978      	ldr	r0, [r7, #20]
 80011e0:	f7ff ff8e 	bl	8001100 <NVIC_EncodePriority>
 80011e4:	4602      	mov	r2, r0
 80011e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>
}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff31 	bl	8001070 <__NVIC_EnableIRQ>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffa2 	bl	8001168 <SysTick_Config>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
 800124a:	e16b      	b.n	8001524 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800124c:	2201      	movs	r2, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	429a      	cmp	r2, r3
 8001266:	f040 815a 	bne.w	800151e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0303 	and.w	r3, r3, #3
 8001272:	2b01      	cmp	r3, #1
 8001274:	d005      	beq.n	8001282 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800127e:	2b02      	cmp	r3, #2
 8001280:	d130      	bne.n	80012e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b8:	2201      	movs	r2, #1
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	091b      	lsrs	r3, r3, #4
 80012ce:	f003 0201 	and.w	r2, r3, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d017      	beq.n	8001320 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	2203      	movs	r2, #3
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	689a      	ldr	r2, [r3, #8]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d123      	bne.n	8001374 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	08da      	lsrs	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3208      	adds	r2, #8
 8001334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	220f      	movs	r2, #15
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	69b9      	ldr	r1, [r7, #24]
 8001370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0203 	and.w	r2, r3, #3
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80b4 	beq.w	800151e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b60      	ldr	r3, [pc, #384]	; (800153c <HAL_GPIO_Init+0x30c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a5f      	ldr	r2, [pc, #380]	; (800153c <HAL_GPIO_Init+0x30c>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b5d      	ldr	r3, [pc, #372]	; (800153c <HAL_GPIO_Init+0x30c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013d2:	4a5b      	ldr	r2, [pc, #364]	; (8001540 <HAL_GPIO_Init+0x310>)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a52      	ldr	r2, [pc, #328]	; (8001544 <HAL_GPIO_Init+0x314>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d02b      	beq.n	8001456 <HAL_GPIO_Init+0x226>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a51      	ldr	r2, [pc, #324]	; (8001548 <HAL_GPIO_Init+0x318>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d025      	beq.n	8001452 <HAL_GPIO_Init+0x222>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a50      	ldr	r2, [pc, #320]	; (800154c <HAL_GPIO_Init+0x31c>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d01f      	beq.n	800144e <HAL_GPIO_Init+0x21e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4f      	ldr	r2, [pc, #316]	; (8001550 <HAL_GPIO_Init+0x320>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d019      	beq.n	800144a <HAL_GPIO_Init+0x21a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4e      	ldr	r2, [pc, #312]	; (8001554 <HAL_GPIO_Init+0x324>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0x216>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4d      	ldr	r2, [pc, #308]	; (8001558 <HAL_GPIO_Init+0x328>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00d      	beq.n	8001442 <HAL_GPIO_Init+0x212>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4c      	ldr	r2, [pc, #304]	; (800155c <HAL_GPIO_Init+0x32c>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d007      	beq.n	800143e <HAL_GPIO_Init+0x20e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4b      	ldr	r2, [pc, #300]	; (8001560 <HAL_GPIO_Init+0x330>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_GPIO_Init+0x20a>
 8001436:	2307      	movs	r3, #7
 8001438:	e00e      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800143a:	2308      	movs	r3, #8
 800143c:	e00c      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800143e:	2306      	movs	r3, #6
 8001440:	e00a      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001442:	2305      	movs	r3, #5
 8001444:	e008      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001446:	2304      	movs	r3, #4
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800144a:	2303      	movs	r3, #3
 800144c:	e004      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800144e:	2302      	movs	r3, #2
 8001450:	e002      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001456:	2300      	movs	r3, #0
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	f002 0203 	and.w	r2, r2, #3
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	4093      	lsls	r3, r2
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001468:	4935      	ldr	r1, [pc, #212]	; (8001540 <HAL_GPIO_Init+0x310>)
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001476:	4b3b      	ldr	r3, [pc, #236]	; (8001564 <HAL_GPIO_Init+0x334>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800149a:	4a32      	ldr	r2, [pc, #200]	; (8001564 <HAL_GPIO_Init+0x334>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014a0:	4b30      	ldr	r3, [pc, #192]	; (8001564 <HAL_GPIO_Init+0x334>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014c4:	4a27      	ldr	r2, [pc, #156]	; (8001564 <HAL_GPIO_Init+0x334>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <HAL_GPIO_Init+0x334>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ee:	4a1d      	ldr	r2, [pc, #116]	; (8001564 <HAL_GPIO_Init+0x334>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <HAL_GPIO_Init+0x334>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001518:	4a12      	ldr	r2, [pc, #72]	; (8001564 <HAL_GPIO_Init+0x334>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3301      	adds	r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	2b0f      	cmp	r3, #15
 8001528:	f67f ae90 	bls.w	800124c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40013800 	.word	0x40013800
 8001544:	40020000 	.word	0x40020000
 8001548:	40020400 	.word	0x40020400
 800154c:	40020800 	.word	0x40020800
 8001550:	40020c00 	.word	0x40020c00
 8001554:	40021000 	.word	0x40021000
 8001558:	40021400 	.word	0x40021400
 800155c:	40021800 	.word	0x40021800
 8001560:	40021c00 	.word	0x40021c00
 8001564:	40013c00 	.word	0x40013c00

08001568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001580:	2301      	movs	r3, #1
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e001      	b.n	800158a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]
 80015a4:	4613      	mov	r3, r2
 80015a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a8:	787b      	ldrb	r3, [r7, #1]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015b4:	e003      	b.n	80015be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015b6:	887b      	ldrh	r3, [r7, #2]
 80015b8:	041a      	lsls	r2, r3, #16
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	619a      	str	r2, [r3, #24]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b085      	sub	sp, #20
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015dc:	887a      	ldrh	r2, [r7, #2]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4013      	ands	r3, r2
 80015e2:	041a      	lsls	r2, r3, #16
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	43d9      	mvns	r1, r3
 80015e8:	887b      	ldrh	r3, [r7, #2]
 80015ea:	400b      	ands	r3, r1
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	619a      	str	r2, [r3, #24]
}
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e12b      	b.n	800186a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d106      	bne.n	800162c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff f8d0 	bl	80007cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2224      	movs	r2, #36	; 0x24
 8001630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0201 	bic.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001652:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001662:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001664:	f002 fc9e 	bl	8003fa4 <HAL_RCC_GetPCLK1Freq>
 8001668:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4a81      	ldr	r2, [pc, #516]	; (8001874 <HAL_I2C_Init+0x274>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d807      	bhi.n	8001684 <HAL_I2C_Init+0x84>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4a80      	ldr	r2, [pc, #512]	; (8001878 <HAL_I2C_Init+0x278>)
 8001678:	4293      	cmp	r3, r2
 800167a:	bf94      	ite	ls
 800167c:	2301      	movls	r3, #1
 800167e:	2300      	movhi	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	e006      	b.n	8001692 <HAL_I2C_Init+0x92>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4a7d      	ldr	r2, [pc, #500]	; (800187c <HAL_I2C_Init+0x27c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	bf94      	ite	ls
 800168c:	2301      	movls	r3, #1
 800168e:	2300      	movhi	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e0e7      	b.n	800186a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4a78      	ldr	r2, [pc, #480]	; (8001880 <HAL_I2C_Init+0x280>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	0c9b      	lsrs	r3, r3, #18
 80016a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	4a6a      	ldr	r2, [pc, #424]	; (8001874 <HAL_I2C_Init+0x274>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d802      	bhi.n	80016d4 <HAL_I2C_Init+0xd4>
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	3301      	adds	r3, #1
 80016d2:	e009      	b.n	80016e8 <HAL_I2C_Init+0xe8>
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	4a69      	ldr	r2, [pc, #420]	; (8001884 <HAL_I2C_Init+0x284>)
 80016e0:	fba2 2303 	umull	r2, r3, r2, r3
 80016e4:	099b      	lsrs	r3, r3, #6
 80016e6:	3301      	adds	r3, #1
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	495c      	ldr	r1, [pc, #368]	; (8001874 <HAL_I2C_Init+0x274>)
 8001704:	428b      	cmp	r3, r1
 8001706:	d819      	bhi.n	800173c <HAL_I2C_Init+0x13c>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1e59      	subs	r1, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	fbb1 f3f3 	udiv	r3, r1, r3
 8001716:	1c59      	adds	r1, r3, #1
 8001718:	f640 73fc 	movw	r3, #4092	; 0xffc
 800171c:	400b      	ands	r3, r1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00a      	beq.n	8001738 <HAL_I2C_Init+0x138>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1e59      	subs	r1, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001730:	3301      	adds	r3, #1
 8001732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001736:	e051      	b.n	80017dc <HAL_I2C_Init+0x1dc>
 8001738:	2304      	movs	r3, #4
 800173a:	e04f      	b.n	80017dc <HAL_I2C_Init+0x1dc>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d111      	bne.n	8001768 <HAL_I2C_Init+0x168>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	1e58      	subs	r0, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	440b      	add	r3, r1
 8001752:	fbb0 f3f3 	udiv	r3, r0, r3
 8001756:	3301      	adds	r3, #1
 8001758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf0c      	ite	eq
 8001760:	2301      	moveq	r3, #1
 8001762:	2300      	movne	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	e012      	b.n	800178e <HAL_I2C_Init+0x18e>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1e58      	subs	r0, r3, #1
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6859      	ldr	r1, [r3, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	0099      	lsls	r1, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	fbb0 f3f3 	udiv	r3, r0, r3
 800177e:	3301      	adds	r3, #1
 8001780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf0c      	ite	eq
 8001788:	2301      	moveq	r3, #1
 800178a:	2300      	movne	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_I2C_Init+0x196>
 8001792:	2301      	movs	r3, #1
 8001794:	e022      	b.n	80017dc <HAL_I2C_Init+0x1dc>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10e      	bne.n	80017bc <HAL_I2C_Init+0x1bc>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1e58      	subs	r0, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6859      	ldr	r1, [r3, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	440b      	add	r3, r1
 80017ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b0:	3301      	adds	r3, #1
 80017b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ba:	e00f      	b.n	80017dc <HAL_I2C_Init+0x1dc>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1e58      	subs	r0, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6859      	ldr	r1, [r3, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	0099      	lsls	r1, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d2:	3301      	adds	r3, #1
 80017d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	6809      	ldr	r1, [r1, #0]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69da      	ldr	r2, [r3, #28]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800180a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6911      	ldr	r1, [r2, #16]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68d2      	ldr	r2, [r2, #12]
 8001816:	4311      	orrs	r1, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	430b      	orrs	r3, r1
 800181e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695a      	ldr	r2, [r3, #20]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0201 	orr.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2220      	movs	r2, #32
 8001856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	000186a0 	.word	0x000186a0
 8001878:	001e847f 	.word	0x001e847f
 800187c:	003d08ff 	.word	0x003d08ff
 8001880:	431bde83 	.word	0x431bde83
 8001884:	10624dd3 	.word	0x10624dd3

08001888 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e128      	b.n	8001aec <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a90      	ldr	r2, [pc, #576]	; (8001af4 <HAL_I2S_Init+0x26c>)
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff f801 	bl	80008bc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2202      	movs	r2, #2
 80018be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80018d0:	f023 030f 	bic.w	r3, r3, #15
 80018d4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2202      	movs	r2, #2
 80018dc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d060      	beq.n	80019a8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d102      	bne.n	80018f4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80018ee:	2310      	movs	r3, #16
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	e001      	b.n	80018f8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80018f4:	2320      	movs	r3, #32
 80018f6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b20      	cmp	r3, #32
 80018fe:	d802      	bhi.n	8001906 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001906:	2001      	movs	r0, #1
 8001908:	f002 fc42 	bl	8004190 <HAL_RCCEx_GetPeriphCLKFreq>
 800190c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001916:	d125      	bne.n	8001964 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d010      	beq.n	8001942 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	fbb2 f2f3 	udiv	r2, r2, r3
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	461a      	mov	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	fbb2 f3f3 	udiv	r3, r2, r3
 800193c:	3305      	adds	r3, #5
 800193e:	613b      	str	r3, [r7, #16]
 8001940:	e01f      	b.n	8001982 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	fbb2 f2f3 	udiv	r2, r2, r3
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	461a      	mov	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	3305      	adds	r3, #5
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	e00e      	b.n	8001982 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	fbb2 f2f3 	udiv	r2, r2, r3
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	461a      	mov	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	3305      	adds	r3, #5
 8001980:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4a5c      	ldr	r2, [pc, #368]	; (8001af8 <HAL_I2S_Init+0x270>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	08db      	lsrs	r3, r3, #3
 800198c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	085b      	lsrs	r3, r3, #1
 800199e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	61bb      	str	r3, [r7, #24]
 80019a6:	e003      	b.n	80019b0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80019a8:	2302      	movs	r3, #2
 80019aa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d902      	bls.n	80019bc <HAL_I2S_Init+0x134>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	2bff      	cmp	r3, #255	; 0xff
 80019ba:	d907      	bls.n	80019cc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c0:	f043 0210 	orr.w	r2, r3, #16
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e08f      	b.n	8001aec <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	ea42 0103 	orr.w	r1, r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	430a      	orrs	r2, r1
 80019de:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80019ea:	f023 030f 	bic.w	r3, r3, #15
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6851      	ldr	r1, [r2, #4]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6892      	ldr	r2, [r2, #8]
 80019f6:	4311      	orrs	r1, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	68d2      	ldr	r2, [r2, #12]
 80019fc:	4311      	orrs	r1, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6992      	ldr	r2, [r2, #24]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a0e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d161      	bne.n	8001adc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a38      	ldr	r2, [pc, #224]	; (8001afc <HAL_I2S_Init+0x274>)
 8001a1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a37      	ldr	r2, [pc, #220]	; (8001b00 <HAL_I2S_Init+0x278>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_I2S_Init+0x1a4>
 8001a28:	4b36      	ldr	r3, [pc, #216]	; (8001b04 <HAL_I2S_Init+0x27c>)
 8001a2a:	e001      	b.n	8001a30 <HAL_I2S_Init+0x1a8>
 8001a2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6812      	ldr	r2, [r2, #0]
 8001a36:	4932      	ldr	r1, [pc, #200]	; (8001b00 <HAL_I2S_Init+0x278>)
 8001a38:	428a      	cmp	r2, r1
 8001a3a:	d101      	bne.n	8001a40 <HAL_I2S_Init+0x1b8>
 8001a3c:	4a31      	ldr	r2, [pc, #196]	; (8001b04 <HAL_I2S_Init+0x27c>)
 8001a3e:	e001      	b.n	8001a44 <HAL_I2S_Init+0x1bc>
 8001a40:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a44:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a48:	f023 030f 	bic.w	r3, r3, #15
 8001a4c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a2b      	ldr	r2, [pc, #172]	; (8001b00 <HAL_I2S_Init+0x278>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d101      	bne.n	8001a5c <HAL_I2S_Init+0x1d4>
 8001a58:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_I2S_Init+0x27c>)
 8001a5a:	e001      	b.n	8001a60 <HAL_I2S_Init+0x1d8>
 8001a5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a60:	2202      	movs	r2, #2
 8001a62:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a25      	ldr	r2, [pc, #148]	; (8001b00 <HAL_I2S_Init+0x278>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_I2S_Init+0x1ea>
 8001a6e:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <HAL_I2S_Init+0x27c>)
 8001a70:	e001      	b.n	8001a76 <HAL_I2S_Init+0x1ee>
 8001a72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a82:	d003      	beq.n	8001a8c <HAL_I2S_Init+0x204>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d103      	bne.n	8001a94 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	e001      	b.n	8001a98 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001aac:	4313      	orrs	r3, r2
 8001aae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	897b      	ldrh	r3, [r7, #10]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ac4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <HAL_I2S_Init+0x278>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d101      	bne.n	8001ad4 <HAL_I2S_Init+0x24c>
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <HAL_I2S_Init+0x27c>)
 8001ad2:	e001      	b.n	8001ad8 <HAL_I2S_Init+0x250>
 8001ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ad8:	897a      	ldrh	r2, [r7, #10]
 8001ada:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3720      	adds	r7, #32
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	08001bff 	.word	0x08001bff
 8001af8:	cccccccd 	.word	0xcccccccd
 8001afc:	08001d15 	.word	0x08001d15
 8001b00:	40003800 	.word	0x40003800
 8001b04:	40003400 	.word	0x40003400

08001b08 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	881a      	ldrh	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	1c9a      	adds	r2, r3, #2
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10e      	bne.n	8001b98 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b88:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff ffb8 	bl	8001b08 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb2:	b292      	uxth	r2, r2
 8001bb4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	1c9a      	adds	r2, r3, #2
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10e      	bne.n	8001bf6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001be6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff93 	bl	8001b1c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b086      	sub	sp, #24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d13a      	bne.n	8001c90 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d109      	bne.n	8001c38 <I2S_IRQHandler+0x3a>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2e:	2b40      	cmp	r3, #64	; 0x40
 8001c30:	d102      	bne.n	8001c38 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ffb4 	bl	8001ba0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c3e:	2b40      	cmp	r3, #64	; 0x40
 8001c40:	d126      	bne.n	8001c90 <I2S_IRQHandler+0x92>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0320 	and.w	r3, r3, #32
 8001c4c:	2b20      	cmp	r3, #32
 8001c4e:	d11f      	bne.n	8001c90 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c5e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f043 0202 	orr.w	r2, r3, #2
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff ff50 	bl	8001b30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d136      	bne.n	8001d0a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d109      	bne.n	8001cba <I2S_IRQHandler+0xbc>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb0:	2b80      	cmp	r3, #128	; 0x80
 8001cb2:	d102      	bne.n	8001cba <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ff45 	bl	8001b44 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d122      	bne.n	8001d0a <I2S_IRQHandler+0x10c>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	d11b      	bne.n	8001d0a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ce0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfc:	f043 0204 	orr.w	r2, r3, #4
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ff13 	bl	8001b30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a92      	ldr	r2, [pc, #584]	; (8001f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d101      	bne.n	8001d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001d2e:	4b92      	ldr	r3, [pc, #584]	; (8001f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d30:	e001      	b.n	8001d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001d32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a8b      	ldr	r2, [pc, #556]	; (8001f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d101      	bne.n	8001d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001d4c:	4b8a      	ldr	r3, [pc, #552]	; (8001f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d4e:	e001      	b.n	8001d54 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001d50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d60:	d004      	beq.n	8001d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 8099 	bne.w	8001e9e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d107      	bne.n	8001d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f925 	bl	8001fd0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d107      	bne.n	8001da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f9c8 	bl	8002130 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da6:	2b40      	cmp	r3, #64	; 0x40
 8001da8:	d13a      	bne.n	8001e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f003 0320 	and.w	r3, r3, #32
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d035      	beq.n	8001e20 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a6e      	ldr	r2, [pc, #440]	; (8001f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d101      	bne.n	8001dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001dbe:	4b6e      	ldr	r3, [pc, #440]	; (8001f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001dc0:	e001      	b.n	8001dc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001dc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4969      	ldr	r1, [pc, #420]	; (8001f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001dce:	428b      	cmp	r3, r1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001dd2:	4b69      	ldr	r3, [pc, #420]	; (8001f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001dd4:	e001      	b.n	8001dda <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001dd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dde:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001dee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f043 0202 	orr.w	r2, r3, #2
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff fe88 	bl	8001b30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	f040 80c3 	bne.w	8001fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f003 0320 	and.w	r3, r3, #32
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 80bd 	beq.w	8001fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e46:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a49      	ldr	r2, [pc, #292]	; (8001f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d101      	bne.n	8001e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001e52:	4b49      	ldr	r3, [pc, #292]	; (8001f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e54:	e001      	b.n	8001e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001e56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4944      	ldr	r1, [pc, #272]	; (8001f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e62:	428b      	cmp	r3, r1
 8001e64:	d101      	bne.n	8001e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001e66:	4b44      	ldr	r3, [pc, #272]	; (8001f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e68:	e001      	b.n	8001e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001e6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e72:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	f043 0204 	orr.w	r2, r3, #4
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fe4a 	bl	8001b30 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e9c:	e089      	b.n	8001fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d107      	bne.n	8001eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f8be 	bl	8002034 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d107      	bne.n	8001ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f8fd 	bl	80020cc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed8:	2b40      	cmp	r3, #64	; 0x40
 8001eda:	d12f      	bne.n	8001f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d02a      	beq.n	8001f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ef4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1e      	ldr	r2, [pc, #120]	; (8001f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d101      	bne.n	8001f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f02:	e001      	b.n	8001f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4919      	ldr	r1, [pc, #100]	; (8001f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f10:	428b      	cmp	r3, r1
 8001f12:	d101      	bne.n	8001f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001f14:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f16:	e001      	b.n	8001f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f20:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f043 0202 	orr.w	r2, r3, #2
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff fdfa 	bl	8001b30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b08      	cmp	r3, #8
 8001f44:	d136      	bne.n	8001fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d031      	beq.n	8001fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d101      	bne.n	8001f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f5c:	e001      	b.n	8001f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001f5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4902      	ldr	r1, [pc, #8]	; (8001f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f6a:	428b      	cmp	r3, r1
 8001f6c:	d106      	bne.n	8001f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001f6e:	4b02      	ldr	r3, [pc, #8]	; (8001f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f70:	e006      	b.n	8001f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001f72:	bf00      	nop
 8001f74:	40003800 	.word	0x40003800
 8001f78:	40003400 	.word	0x40003400
 8001f7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f84:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f94:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa2:	f043 0204 	orr.w	r2, r3, #4
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff fdc0 	bl	8001b30 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fb0:	e000      	b.n	8001fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001fb2:	bf00      	nop
}
 8001fb4:	bf00      	nop
 8001fb6:	3720      	adds	r7, #32
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	1c99      	adds	r1, r3, #2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6251      	str	r1, [r2, #36]	; 0x24
 8001fe2:	881a      	ldrh	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d113      	bne.n	800202a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002010:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002016:	b29b      	uxth	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d106      	bne.n	800202a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ffc9 	bl	8001fbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	1c99      	adds	r1, r3, #2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6251      	str	r1, [r2, #36]	; 0x24
 8002046:	8819      	ldrh	r1, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1d      	ldr	r2, [pc, #116]	; (80020c4 <I2SEx_TxISR_I2SExt+0x90>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d101      	bne.n	8002056 <I2SEx_TxISR_I2SExt+0x22>
 8002052:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <I2SEx_TxISR_I2SExt+0x94>)
 8002054:	e001      	b.n	800205a <I2SEx_TxISR_I2SExt+0x26>
 8002056:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800205a:	460a      	mov	r2, r1
 800205c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002070:	b29b      	uxth	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d121      	bne.n	80020ba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <I2SEx_TxISR_I2SExt+0x90>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d101      	bne.n	8002084 <I2SEx_TxISR_I2SExt+0x50>
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <I2SEx_TxISR_I2SExt+0x94>)
 8002082:	e001      	b.n	8002088 <I2SEx_TxISR_I2SExt+0x54>
 8002084:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	490d      	ldr	r1, [pc, #52]	; (80020c4 <I2SEx_TxISR_I2SExt+0x90>)
 8002090:	428b      	cmp	r3, r1
 8002092:	d101      	bne.n	8002098 <I2SEx_TxISR_I2SExt+0x64>
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <I2SEx_TxISR_I2SExt+0x94>)
 8002096:	e001      	b.n	800209c <I2SEx_TxISR_I2SExt+0x68>
 8002098:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800209c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d106      	bne.n	80020ba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff81 	bl	8001fbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40003800 	.word	0x40003800
 80020c8:	40003400 	.word	0x40003400

080020cc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68d8      	ldr	r0, [r3, #12]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	1c99      	adds	r1, r3, #2
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80020e4:	b282      	uxth	r2, r0
 80020e6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d113      	bne.n	8002128 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800210e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002114:	b29b      	uxth	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d106      	bne.n	8002128 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ff4a 	bl	8001fbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a20      	ldr	r2, [pc, #128]	; (80021c0 <I2SEx_RxISR_I2SExt+0x90>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d101      	bne.n	8002146 <I2SEx_RxISR_I2SExt+0x16>
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <I2SEx_RxISR_I2SExt+0x94>)
 8002144:	e001      	b.n	800214a <I2SEx_RxISR_I2SExt+0x1a>
 8002146:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800214a:	68d8      	ldr	r0, [r3, #12]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	1c99      	adds	r1, r3, #2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002156:	b282      	uxth	r2, r0
 8002158:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800216c:	b29b      	uxth	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d121      	bne.n	80021b6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <I2SEx_RxISR_I2SExt+0x90>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d101      	bne.n	8002180 <I2SEx_RxISR_I2SExt+0x50>
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <I2SEx_RxISR_I2SExt+0x94>)
 800217e:	e001      	b.n	8002184 <I2SEx_RxISR_I2SExt+0x54>
 8002180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	490d      	ldr	r1, [pc, #52]	; (80021c0 <I2SEx_RxISR_I2SExt+0x90>)
 800218c:	428b      	cmp	r3, r1
 800218e:	d101      	bne.n	8002194 <I2SEx_RxISR_I2SExt+0x64>
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <I2SEx_RxISR_I2SExt+0x94>)
 8002192:	e001      	b.n	8002198 <I2SEx_RxISR_I2SExt+0x68>
 8002194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002198:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800219c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d106      	bne.n	80021b6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff03 	bl	8001fbc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40003800 	.word	0x40003800
 80021c4:	40003400 	.word	0x40003400

080021c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ca:	b08f      	sub	sp, #60	; 0x3c
 80021cc:	af0a      	add	r7, sp, #40	; 0x28
 80021ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e10f      	b.n	80023fa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d106      	bne.n	80021fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f005 ff9f 	bl	8008138 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2203      	movs	r2, #3
 80021fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d102      	bne.n	8002214 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f002 f9b4 	bl	8004586 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	687e      	ldr	r6, [r7, #4]
 8002226:	466d      	mov	r5, sp
 8002228:	f106 0410 	add.w	r4, r6, #16
 800222c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002234:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002238:	e885 0003 	stmia.w	r5, {r0, r1}
 800223c:	1d33      	adds	r3, r6, #4
 800223e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002240:	6838      	ldr	r0, [r7, #0]
 8002242:	f002 f88c 	bl	800435e <USB_CoreInit>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0d0      	b.n	80023fa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2100      	movs	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f002 f9a2 	bl	80045a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002264:	2300      	movs	r3, #0
 8002266:	73fb      	strb	r3, [r7, #15]
 8002268:	e04a      	b.n	8002300 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800226a:	7bfa      	ldrb	r2, [r7, #15]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4413      	add	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	333d      	adds	r3, #61	; 0x3d
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	333c      	adds	r3, #60	; 0x3c
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002292:	7bfa      	ldrb	r2, [r7, #15]
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	b298      	uxth	r0, r3
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	3344      	adds	r3, #68	; 0x44
 80022a6:	4602      	mov	r2, r0
 80022a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022aa:	7bfa      	ldrb	r2, [r7, #15]
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	440b      	add	r3, r1
 80022b8:	3340      	adds	r3, #64	; 0x40
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022be:	7bfa      	ldrb	r2, [r7, #15]
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	3348      	adds	r3, #72	; 0x48
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	334c      	adds	r3, #76	; 0x4c
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3354      	adds	r3, #84	; 0x54
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	3301      	adds	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	429a      	cmp	r2, r3
 8002308:	d3af      	bcc.n	800226a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230a:	2300      	movs	r3, #0
 800230c:	73fb      	strb	r3, [r7, #15]
 800230e:	e044      	b.n	800239a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800233c:	7bfa      	ldrb	r2, [r7, #15]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	3301      	adds	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d3b5      	bcc.n	8002310 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	687e      	ldr	r6, [r7, #4]
 80023ac:	466d      	mov	r5, sp
 80023ae:	f106 0410 	add.w	r4, r6, #16
 80023b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023be:	e885 0003 	stmia.w	r5, {r0, r1}
 80023c2:	1d33      	adds	r3, r6, #4
 80023c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c6:	6838      	ldr	r0, [r7, #0]
 80023c8:	f002 f93a 	bl	8004640 <USB_DevInit>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2202      	movs	r2, #2
 80023d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e00d      	b.n	80023fa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 fa89 	bl	800590a <USB_DevDisconnect>

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002402 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_PCD_Start+0x1c>
 800241a:	2302      	movs	r3, #2
 800241c:	e020      	b.n	8002460 <HAL_PCD_Start+0x5e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	2b01      	cmp	r3, #1
 800242c:	d109      	bne.n	8002442 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002432:	2b01      	cmp	r3, #1
 8002434:	d005      	beq.n	8002442 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f002 f88c 	bl	8004564 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f003 fa39 	bl	80058c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b08d      	sub	sp, #52	; 0x34
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f003 faf7 	bl	8005a72 <USB_GetMode>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	f040 848a 	bne.w	8002da0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f003 fa5b 	bl	800594c <USB_ReadInterrupts>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 8480 	beq.w	8002d9e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 fa48 	bl	800594c <USB_ReadInterrupts>
 80024bc:	4603      	mov	r3, r0
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d107      	bne.n	80024d6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695a      	ldr	r2, [r3, #20]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f002 0202 	and.w	r2, r2, #2
 80024d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 fa36 	bl	800594c <USB_ReadInterrupts>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b10      	cmp	r3, #16
 80024e8:	d161      	bne.n	80025ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699a      	ldr	r2, [r3, #24]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0210 	bic.w	r2, r2, #16
 80024f8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	f003 020f 	and.w	r2, r3, #15
 8002506:	4613      	mov	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	3304      	adds	r3, #4
 8002518:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	0c5b      	lsrs	r3, r3, #17
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	2b02      	cmp	r3, #2
 8002524:	d124      	bne.n	8002570 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800252c:	4013      	ands	r3, r2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d035      	beq.n	800259e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800253c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002540:	b29b      	uxth	r3, r3
 8002542:	461a      	mov	r2, r3
 8002544:	6a38      	ldr	r0, [r7, #32]
 8002546:	f003 f86d 	bl	8005624 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002556:	441a      	add	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	6a1a      	ldr	r2, [r3, #32]
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	091b      	lsrs	r3, r3, #4
 8002564:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002568:	441a      	add	r2, r3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	621a      	str	r2, [r3, #32]
 800256e:	e016      	b.n	800259e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	0c5b      	lsrs	r3, r3, #17
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	2b06      	cmp	r3, #6
 800257a:	d110      	bne.n	800259e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002582:	2208      	movs	r2, #8
 8002584:	4619      	mov	r1, r3
 8002586:	6a38      	ldr	r0, [r7, #32]
 8002588:	f003 f84c 	bl	8005624 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	6a1a      	ldr	r2, [r3, #32]
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002598:	441a      	add	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699a      	ldr	r2, [r3, #24]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0210 	orr.w	r2, r2, #16
 80025ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f003 f9ca 	bl	800594c <USB_ReadInterrupts>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025c2:	f040 80a7 	bne.w	8002714 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 f9cf 	bl	8005972 <USB_ReadDevAllOutEpInterrupt>
 80025d4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025d6:	e099      	b.n	800270c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 808e 	beq.w	8002700 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f003 f9f3 	bl	80059da <USB_ReadDevOutEPInterrupt>
 80025f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00c      	beq.n	800261a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	4413      	add	r3, r2
 8002608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800260c:	461a      	mov	r2, r3
 800260e:	2301      	movs	r3, #1
 8002610:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002612:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fec3 	bl	80033a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00c      	beq.n	800263e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	4413      	add	r3, r2
 800262c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002630:	461a      	mov	r2, r3
 8002632:	2308      	movs	r3, #8
 8002634:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 ff99 	bl	8003570 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	4413      	add	r3, r2
 8002650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002654:	461a      	mov	r2, r3
 8002656:	2310      	movs	r3, #16
 8002658:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d030      	beq.n	80026c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266c:	2b80      	cmp	r3, #128	; 0x80
 800266e:	d109      	bne.n	8002684 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800267e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002682:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	3304      	adds	r3, #4
 8002698:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	78db      	ldrb	r3, [r3, #3]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d108      	bne.n	80026b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2200      	movs	r2, #0
 80026a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	4619      	mov	r1, r3
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f005 fe56 	bl	8008360 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c0:	461a      	mov	r2, r3
 80026c2:	2302      	movs	r3, #2
 80026c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f003 0320 	and.w	r3, r3, #32
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d008      	beq.n	80026e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026dc:	461a      	mov	r2, r3
 80026de:	2320      	movs	r3, #32
 80026e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d009      	beq.n	8002700 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f8:	461a      	mov	r2, r3
 80026fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	3301      	adds	r3, #1
 8002704:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002708:	085b      	lsrs	r3, r3, #1
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270e:	2b00      	cmp	r3, #0
 8002710:	f47f af62 	bne.w	80025d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f003 f917 	bl	800594c <USB_ReadInterrupts>
 800271e:	4603      	mov	r3, r0
 8002720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002724:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002728:	f040 80db 	bne.w	80028e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f003 f938 	bl	80059a6 <USB_ReadDevAllInEpInterrupt>
 8002736:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800273c:	e0cd      	b.n	80028da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80c2 	beq.w	80028ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f003 f95e 	bl	8005a16 <USB_ReadDevInEPInterrupt>
 800275a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d057      	beq.n	8002816 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	f003 030f 	and.w	r3, r3, #15
 800276c:	2201      	movs	r2, #1
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800277a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	43db      	mvns	r3, r3
 8002780:	69f9      	ldr	r1, [r7, #28]
 8002782:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002786:	4013      	ands	r3, r2
 8002788:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	015a      	lsls	r2, r3, #5
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	4413      	add	r3, r2
 8002792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002796:	461a      	mov	r2, r3
 8002798:	2301      	movs	r3, #1
 800279a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d132      	bne.n	800280a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	334c      	adds	r3, #76	; 0x4c
 80027b4:	6819      	ldr	r1, [r3, #0]
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4403      	add	r3, r0
 80027c4:	3348      	adds	r3, #72	; 0x48
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4419      	add	r1, r3
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4403      	add	r3, r0
 80027d8:	334c      	adds	r3, #76	; 0x4c
 80027da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d113      	bne.n	800280a <HAL_PCD_IRQHandler+0x3a2>
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e6:	4613      	mov	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	3354      	adds	r3, #84	; 0x54
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d108      	bne.n	800280a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002802:	461a      	mov	r2, r3
 8002804:	2101      	movs	r1, #1
 8002806:	f003 f965 	bl	8005ad4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	b2db      	uxtb	r3, r3
 800280e:	4619      	mov	r1, r3
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f005 fd20 	bl	8008256 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	4413      	add	r3, r2
 8002828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800282c:	461a      	mov	r2, r3
 800282e:	2308      	movs	r3, #8
 8002830:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	4413      	add	r3, r2
 8002844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002848:	461a      	mov	r2, r3
 800284a:	2310      	movs	r3, #16
 800284c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002864:	461a      	mov	r2, r3
 8002866:	2340      	movs	r3, #64	; 0x40
 8002868:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d023      	beq.n	80028bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002876:	6a38      	ldr	r0, [r7, #32]
 8002878:	f002 f846 	bl	8004908 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800287c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287e:	4613      	mov	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	3338      	adds	r3, #56	; 0x38
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	3304      	adds	r3, #4
 800288e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	78db      	ldrb	r3, [r3, #3]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d108      	bne.n	80028aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2200      	movs	r2, #0
 800289c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	4619      	mov	r1, r3
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f005 fd6d 	bl	8008384 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028b6:	461a      	mov	r2, r3
 80028b8:	2302      	movs	r3, #2
 80028ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fcdb 	bl	8003284 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	3301      	adds	r3, #1
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	085b      	lsrs	r3, r3, #1
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f47f af2e 	bne.w	800273e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f003 f830 	bl	800594c <USB_ReadInterrupts>
 80028ec:	4603      	mov	r3, r0
 80028ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028f6:	d122      	bne.n	800293e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002906:	f023 0301 	bic.w	r3, r3, #1
 800290a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002912:	2b01      	cmp	r3, #1
 8002914:	d108      	bne.n	8002928 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800291e:	2100      	movs	r1, #0
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 fec3 	bl	80036ac <HAL_PCDEx_LPM_Callback>
 8002926:	e002      	b.n	800292e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f005 fd0b 	bl	8008344 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800293c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f003 f802 	bl	800594c <USB_ReadInterrupts>
 8002948:	4603      	mov	r3, r0
 800294a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800294e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002952:	d112      	bne.n	800297a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b01      	cmp	r3, #1
 8002962:	d102      	bne.n	800296a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f005 fcc7 	bl	80082f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695a      	ldr	r2, [r3, #20]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002978:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f002 ffe4 	bl	800594c <USB_ReadInterrupts>
 8002984:	4603      	mov	r3, r0
 8002986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800298e:	f040 80b7 	bne.w	8002b00 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2110      	movs	r1, #16
 80029ac:	4618      	mov	r0, r3
 80029ae:	f001 ffab 	bl	8004908 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029b6:	e046      	b.n	8002a46 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ba:	015a      	lsls	r2, r3, #5
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	4413      	add	r3, r2
 80029c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029c4:	461a      	mov	r2, r3
 80029c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029dc:	0151      	lsls	r1, r2, #5
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	440a      	add	r2, r1
 80029e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80029e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029f8:	461a      	mov	r2, r3
 80029fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80029fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a10:	0151      	lsls	r1, r2, #5
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	440a      	add	r2, r1
 8002a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a1e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a22:	015a      	lsls	r2, r3, #5
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	4413      	add	r3, r2
 8002a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a30:	0151      	lsls	r1, r2, #5
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	440a      	add	r2, r1
 8002a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a3e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	3301      	adds	r3, #1
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d3b3      	bcc.n	80029b8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a5e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a62:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d016      	beq.n	8002a9a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a7c:	f043 030b 	orr.w	r3, r3, #11
 8002a80:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a92:	f043 030b 	orr.w	r3, r3, #11
 8002a96:	6453      	str	r3, [r2, #68]	; 0x44
 8002a98:	e015      	b.n	8002ac6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002aac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ab0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ac0:	f043 030b 	orr.w	r3, r3, #11
 8002ac4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ad8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002aea:	461a      	mov	r2, r3
 8002aec:	f002 fff2 	bl	8005ad4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002afe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f002 ff21 	bl	800594c <USB_ReadInterrupts>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b14:	d124      	bne.n	8002b60 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f002 ffb7 	bl	8005a8e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f001 ff6c 	bl	8004a02 <USB_GetDevSpeed>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681c      	ldr	r4, [r3, #0]
 8002b36:	f001 fa29 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8002b3a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	4620      	mov	r0, r4
 8002b46:	f001 fc6b 	bl	8004420 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f005 fbab 	bl	80082a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695a      	ldr	r2, [r3, #20]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f002 fef1 	bl	800594c <USB_ReadInterrupts>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d10a      	bne.n	8002b8a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f005 fb88 	bl	800828a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695a      	ldr	r2, [r3, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f002 0208 	and.w	r2, r2, #8
 8002b88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 fedc 	bl	800594c <USB_ReadInterrupts>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9a:	2b80      	cmp	r3, #128	; 0x80
 8002b9c:	d122      	bne.n	8002be4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002baa:	2301      	movs	r3, #1
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
 8002bae:	e014      	b.n	8002bda <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d105      	bne.n	8002bd4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	4619      	mov	r1, r3
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fb27 	bl	8003222 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d3e5      	bcc.n	8002bb0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f002 feaf 	bl	800594c <USB_ReadInterrupts>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bf8:	d13b      	bne.n	8002c72 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfe:	e02b      	b.n	8002c58 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	3340      	adds	r3, #64	; 0x40
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d115      	bne.n	8002c52 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c26:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	da12      	bge.n	8002c52 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	333f      	adds	r3, #63	; 0x3f
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fae8 	bl	8003222 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	3301      	adds	r3, #1
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d3ce      	bcc.n	8002c00 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f002 fe68 	bl	800594c <USB_ReadInterrupts>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c86:	d155      	bne.n	8002d34 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c88:	2301      	movs	r3, #1
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c8c:	e045      	b.n	8002d1a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d12e      	bne.n	8002d14 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cb6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	da2b      	bge.n	8002d14 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002cc8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d121      	bne.n	8002d14 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ce6:	6a3b      	ldr	r3, [r7, #32]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d10:	6053      	str	r3, [r2, #4]
            break;
 8002d12:	e007      	b.n	8002d24 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	3301      	adds	r3, #1
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d3b4      	bcc.n	8002c8e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f002 fe07 	bl	800594c <USB_ReadInterrupts>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d48:	d10a      	bne.n	8002d60 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f005 fb2c 	bl	80083a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f002 fdf1 	bl	800594c <USB_ReadInterrupts>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d115      	bne.n	8002da0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f005 fb1c 	bl	80083c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6859      	ldr	r1, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	605a      	str	r2, [r3, #4]
 8002d9c:	e000      	b.n	8002da0 <HAL_PCD_IRQHandler+0x938>
      return;
 8002d9e:	bf00      	nop
    }
  }
}
 8002da0:	3734      	adds	r7, #52	; 0x34
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd90      	pop	{r4, r7, pc}

08002da6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	460b      	mov	r3, r1
 8002db0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <HAL_PCD_SetAddress+0x1a>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e013      	b.n	8002de8 <HAL_PCD_SetAddress+0x42>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f002 fd4f 	bl	800587c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	4608      	mov	r0, r1
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4603      	mov	r3, r0
 8002e00:	70fb      	strb	r3, [r7, #3]
 8002e02:	460b      	mov	r3, r1
 8002e04:	803b      	strh	r3, [r7, #0]
 8002e06:	4613      	mov	r3, r2
 8002e08:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	da0f      	bge.n	8002e36 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	f003 020f 	and.w	r2, r3, #15
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	3338      	adds	r3, #56	; 0x38
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	705a      	strb	r2, [r3, #1]
 8002e34:	e00f      	b.n	8002e56 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	f003 020f 	and.w	r2, r3, #15
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e62:	883a      	ldrh	r2, [r7, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	78ba      	ldrb	r2, [r7, #2]
 8002e6c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	785b      	ldrb	r3, [r3, #1]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d004      	beq.n	8002e80 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e80:	78bb      	ldrb	r3, [r7, #2]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d102      	bne.n	8002e8c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_PCD_EP_Open+0xaa>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e00e      	b.n	8002eb8 <HAL_PCD_EP_Open+0xc8>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68f9      	ldr	r1, [r7, #12]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f001 fdcf 	bl	8004a4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002eb6:	7afb      	ldrb	r3, [r7, #11]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ecc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	da0f      	bge.n	8002ef4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	f003 020f 	and.w	r2, r3, #15
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	3338      	adds	r3, #56	; 0x38
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3304      	adds	r3, #4
 8002eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	705a      	strb	r2, [r3, #1]
 8002ef2:	e00f      	b.n	8002f14 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	f003 020f 	and.w	r2, r3, #15
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_PCD_EP_Close+0x6e>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e00e      	b.n	8002f4c <HAL_PCD_EP_Close+0x8c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68f9      	ldr	r1, [r7, #12]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f001 fe0d 	bl	8004b5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	460b      	mov	r3, r1
 8002f62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f64:	7afb      	ldrb	r3, [r7, #11]
 8002f66:	f003 020f 	and.w	r2, r3, #15
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4413      	add	r3, r2
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2200      	movs	r2, #0
 8002f94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f96:	7afb      	ldrb	r3, [r7, #11]
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d102      	bne.n	8002fb0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fb0:	7afb      	ldrb	r3, [r7, #11]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	6979      	ldr	r1, [r7, #20]
 8002fc8:	f002 f8ec 	bl	80051a4 <USB_EP0StartXfer>
 8002fcc:	e008      	b.n	8002fe0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	6979      	ldr	r1, [r7, #20]
 8002fdc:	f001 fe9a 	bl	8004d14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	f003 020f 	and.w	r2, r3, #15
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800300c:	681b      	ldr	r3, [r3, #0]
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b086      	sub	sp, #24
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	460b      	mov	r3, r1
 8003028:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800302a:	7afb      	ldrb	r3, [r7, #11]
 800302c:	f003 020f 	and.w	r2, r3, #15
 8003030:	4613      	mov	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	3338      	adds	r3, #56	; 0x38
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4413      	add	r3, r2
 800303e:	3304      	adds	r3, #4
 8003040:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2200      	movs	r2, #0
 8003052:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2201      	movs	r2, #1
 8003058:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800305a:	7afb      	ldrb	r3, [r7, #11]
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	b2da      	uxtb	r2, r3
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d102      	bne.n	8003074 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003074:	7afb      	ldrb	r3, [r7, #11]
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	6979      	ldr	r1, [r7, #20]
 800308c:	f002 f88a 	bl	80051a4 <USB_EP0StartXfer>
 8003090:	e008      	b.n	80030a4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6818      	ldr	r0, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	461a      	mov	r2, r3
 800309e:	6979      	ldr	r1, [r7, #20]
 80030a0:	f001 fe38 	bl	8004d14 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	460b      	mov	r3, r1
 80030b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	f003 020f 	and.w	r2, r3, #15
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d901      	bls.n	80030cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e050      	b.n	800316e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	da0f      	bge.n	80030f4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	f003 020f 	and.w	r2, r3, #15
 80030da:	4613      	mov	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	3338      	adds	r3, #56	; 0x38
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4413      	add	r3, r2
 80030e8:	3304      	adds	r3, #4
 80030ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	705a      	strb	r2, [r3, #1]
 80030f2:	e00d      	b.n	8003110 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	4413      	add	r3, r2
 8003106:	3304      	adds	r3, #4
 8003108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2201      	movs	r2, #1
 8003114:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003116:	78fb      	ldrb	r3, [r7, #3]
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	b2da      	uxtb	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_PCD_EP_SetStall+0x82>
 800312c:	2302      	movs	r3, #2
 800312e:	e01e      	b.n	800316e <HAL_PCD_EP_SetStall+0xc0>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68f9      	ldr	r1, [r7, #12]
 800313e:	4618      	mov	r0, r3
 8003140:	f002 fac8 	bl	80056d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10a      	bne.n	8003164 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	b2d9      	uxtb	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800315e:	461a      	mov	r2, r3
 8003160:	f002 fcb8 	bl	8005ad4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	f003 020f 	and.w	r2, r3, #15
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	429a      	cmp	r2, r3
 800318e:	d901      	bls.n	8003194 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e042      	b.n	800321a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003198:	2b00      	cmp	r3, #0
 800319a:	da0f      	bge.n	80031bc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	f003 020f 	and.w	r2, r3, #15
 80031a2:	4613      	mov	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4413      	add	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	3338      	adds	r3, #56	; 0x38
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	4413      	add	r3, r2
 80031b0:	3304      	adds	r3, #4
 80031b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2201      	movs	r2, #1
 80031b8:	705a      	strb	r2, [r3, #1]
 80031ba:	e00f      	b.n	80031dc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	f003 020f 	and.w	r2, r3, #15
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4413      	add	r3, r2
 80031d2:	3304      	adds	r3, #4
 80031d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_PCD_EP_ClrStall+0x86>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e00e      	b.n	800321a <HAL_PCD_EP_ClrStall+0xa4>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68f9      	ldr	r1, [r7, #12]
 800320a:	4618      	mov	r0, r3
 800320c:	f002 fad0 	bl	80057b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b084      	sub	sp, #16
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800322e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003232:	2b00      	cmp	r3, #0
 8003234:	da0c      	bge.n	8003250 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	f003 020f 	and.w	r2, r3, #15
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	3338      	adds	r3, #56	; 0x38
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	3304      	adds	r3, #4
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	e00c      	b.n	800326a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	f003 020f 	and.w	r2, r3, #15
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	3304      	adds	r3, #4
 8003268:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68f9      	ldr	r1, [r7, #12]
 8003270:	4618      	mov	r0, r3
 8003272:	f002 f8ef 	bl	8005454 <USB_EPStopXfer>
 8003276:	4603      	mov	r3, r0
 8003278:	72fb      	strb	r3, [r7, #11]

  return ret;
 800327a:	7afb      	ldrb	r3, [r7, #11]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	; 0x28
 8003288:	af02      	add	r7, sp, #8
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	3338      	adds	r3, #56	; 0x38
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	4413      	add	r3, r2
 80032a8:	3304      	adds	r3, #4
 80032aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6a1a      	ldr	r2, [r3, #32]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d901      	bls.n	80032bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e06c      	b.n	8003396 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	699a      	ldr	r2, [r3, #24]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	69fa      	ldr	r2, [r7, #28]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d902      	bls.n	80032d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	3303      	adds	r3, #3
 80032dc:	089b      	lsrs	r3, r3, #2
 80032de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032e0:	e02b      	b.n	800333a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d902      	bls.n	80032fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3303      	adds	r3, #3
 8003302:	089b      	lsrs	r3, r3, #2
 8003304:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6919      	ldr	r1, [r3, #16]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003316:	b2db      	uxtb	r3, r3
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	4603      	mov	r3, r0
 800331c:	6978      	ldr	r0, [r7, #20]
 800331e:	f002 f943 	bl	80055a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	691a      	ldr	r2, [r3, #16]
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	441a      	add	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a1a      	ldr	r2, [r3, #32]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	441a      	add	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	b29b      	uxth	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	429a      	cmp	r2, r3
 800334e:	d809      	bhi.n	8003364 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a1a      	ldr	r2, [r3, #32]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003358:	429a      	cmp	r2, r3
 800335a:	d203      	bcs.n	8003364 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1be      	bne.n	80032e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	699a      	ldr	r2, [r3, #24]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	429a      	cmp	r2, r3
 800336e:	d811      	bhi.n	8003394 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	2201      	movs	r2, #1
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	43db      	mvns	r3, r3
 800338a:	6939      	ldr	r1, [r7, #16]
 800338c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003390:	4013      	ands	r3, r2
 8003392:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3720      	adds	r7, #32
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	333c      	adds	r3, #60	; 0x3c
 80033b8:	3304      	adds	r3, #4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d17b      	bne.n	80034ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d015      	beq.n	800340c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	4a61      	ldr	r2, [pc, #388]	; (8003568 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	f240 80b9 	bls.w	800355c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80b3 	beq.w	800355c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003402:	461a      	mov	r2, r3
 8003404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003408:	6093      	str	r3, [r2, #8]
 800340a:	e0a7      	b.n	800355c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b00      	cmp	r3, #0
 8003414:	d009      	beq.n	800342a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003422:	461a      	mov	r2, r3
 8003424:	2320      	movs	r3, #32
 8003426:	6093      	str	r3, [r2, #8]
 8003428:	e098      	b.n	800355c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003430:	2b00      	cmp	r3, #0
 8003432:	f040 8093 	bne.w	800355c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	4a4b      	ldr	r2, [pc, #300]	; (8003568 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d90f      	bls.n	800345e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	015a      	lsls	r2, r3, #5
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	4413      	add	r3, r2
 8003450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003454:	461a      	mov	r2, r3
 8003456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800345a:	6093      	str	r3, [r2, #8]
 800345c:	e07e      	b.n	800355c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	4413      	add	r3, r2
 8003470:	3304      	adds	r3, #4
 8003472:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	0159      	lsls	r1, r3, #5
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	440b      	add	r3, r1
 8003480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348a:	1ad2      	subs	r2, r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034a8:	461a      	mov	r2, r3
 80034aa:	2101      	movs	r1, #1
 80034ac:	f002 fb12 	bl	8005ad4 <USB_EP0_OutStart>
 80034b0:	e006      	b.n	80034c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	441a      	add	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	4619      	mov	r1, r3
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f004 feaa 	bl	8008220 <HAL_PCD_DataOutStageCallback>
 80034cc:	e046      	b.n	800355c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	4a26      	ldr	r2, [pc, #152]	; (800356c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d124      	bne.n	8003520 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ec:	461a      	mov	r2, r3
 80034ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034f2:	6093      	str	r3, [r2, #8]
 80034f4:	e032      	b.n	800355c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350c:	461a      	mov	r2, r3
 800350e:	2320      	movs	r3, #32
 8003510:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	4619      	mov	r1, r3
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f004 fe81 	bl	8008220 <HAL_PCD_DataOutStageCallback>
 800351e:	e01d      	b.n	800355c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d114      	bne.n	8003550 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d108      	bne.n	8003550 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6818      	ldr	r0, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003548:	461a      	mov	r2, r3
 800354a:	2100      	movs	r1, #0
 800354c:	f002 fac2 	bl	8005ad4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	4619      	mov	r1, r3
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f004 fe62 	bl	8008220 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3720      	adds	r7, #32
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	4f54300a 	.word	0x4f54300a
 800356c:	4f54310a 	.word	0x4f54310a

08003570 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	333c      	adds	r3, #60	; 0x3c
 8003588:	3304      	adds	r3, #4
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4413      	add	r3, r2
 8003596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d90e      	bls.n	80035c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d009      	beq.n	80035c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035bc:	461a      	mov	r2, r3
 80035be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f004 fe19 	bl	80081fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4a0a      	ldr	r2, [pc, #40]	; (80035f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d90c      	bls.n	80035ec <PCD_EP_OutSetupPacket_int+0x7c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d108      	bne.n	80035ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6818      	ldr	r0, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035e4:	461a      	mov	r2, r3
 80035e6:	2101      	movs	r1, #1
 80035e8:	f002 fa74 	bl	8005ad4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	4f54300a 	.word	0x4f54300a

080035fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	70fb      	strb	r3, [r7, #3]
 8003608:	4613      	mov	r3, r2
 800360a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d107      	bne.n	800362a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800361a:	883b      	ldrh	r3, [r7, #0]
 800361c:	0419      	lsls	r1, r3, #16
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	430a      	orrs	r2, r1
 8003626:	629a      	str	r2, [r3, #40]	; 0x28
 8003628:	e028      	b.n	800367c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	0c1b      	lsrs	r3, r3, #16
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	4413      	add	r3, r2
 8003636:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003638:	2300      	movs	r3, #0
 800363a:	73fb      	strb	r3, [r7, #15]
 800363c:	e00d      	b.n	800365a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	3340      	adds	r3, #64	; 0x40
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	0c1b      	lsrs	r3, r3, #16
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	4413      	add	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	3301      	adds	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	3b01      	subs	r3, #1
 8003660:	429a      	cmp	r2, r3
 8003662:	d3ec      	bcc.n	800363e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003664:	883b      	ldrh	r3, [r7, #0]
 8003666:	0418      	lsls	r0, r3, #16
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6819      	ldr	r1, [r3, #0]
 800366c:	78fb      	ldrb	r3, [r7, #3]
 800366e:	3b01      	subs	r3, #1
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	4302      	orrs	r2, r0
 8003674:	3340      	adds	r3, #64	; 0x40
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	460b      	mov	r3, r1
 8003694:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	887a      	ldrh	r2, [r7, #2]
 800369c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e267      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d075      	beq.n	80037ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036e2:	4b88      	ldr	r3, [pc, #544]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d00c      	beq.n	8003708 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ee:	4b85      	ldr	r3, [pc, #532]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d112      	bne.n	8003720 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fa:	4b82      	ldr	r3, [pc, #520]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003706:	d10b      	bne.n	8003720 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003708:	4b7e      	ldr	r3, [pc, #504]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d05b      	beq.n	80037cc <HAL_RCC_OscConfig+0x108>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d157      	bne.n	80037cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e242      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003728:	d106      	bne.n	8003738 <HAL_RCC_OscConfig+0x74>
 800372a:	4b76      	ldr	r3, [pc, #472]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a75      	ldr	r2, [pc, #468]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e01d      	b.n	8003774 <HAL_RCC_OscConfig+0xb0>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x98>
 8003742:	4b70      	ldr	r3, [pc, #448]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a6f      	ldr	r2, [pc, #444]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b6d      	ldr	r3, [pc, #436]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a6c      	ldr	r2, [pc, #432]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e00b      	b.n	8003774 <HAL_RCC_OscConfig+0xb0>
 800375c:	4b69      	ldr	r3, [pc, #420]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a68      	ldr	r2, [pc, #416]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	4b66      	ldr	r3, [pc, #408]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a65      	ldr	r2, [pc, #404]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 800376e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d013      	beq.n	80037a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377c:	f7fd fc16 	bl	8000fac <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003784:	f7fd fc12 	bl	8000fac <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	; 0x64
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e207      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003796:	4b5b      	ldr	r3, [pc, #364]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0xc0>
 80037a2:	e014      	b.n	80037ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7fd fc02 	bl	8000fac <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ac:	f7fd fbfe 	bl	8000fac <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	; 0x64
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e1f3      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037be:	4b51      	ldr	r3, [pc, #324]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0xe8>
 80037ca:	e000      	b.n	80037ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d063      	beq.n	80038a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037da:	4b4a      	ldr	r3, [pc, #296]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037e6:	4b47      	ldr	r3, [pc, #284]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d11c      	bne.n	800382c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037f2:	4b44      	ldr	r3, [pc, #272]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d116      	bne.n	800382c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fe:	4b41      	ldr	r3, [pc, #260]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <HAL_RCC_OscConfig+0x152>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d001      	beq.n	8003816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e1c7      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003816:	4b3b      	ldr	r3, [pc, #236]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4937      	ldr	r1, [pc, #220]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382a:	e03a      	b.n	80038a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d020      	beq.n	8003876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003834:	4b34      	ldr	r3, [pc, #208]	; (8003908 <HAL_RCC_OscConfig+0x244>)
 8003836:	2201      	movs	r2, #1
 8003838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383a:	f7fd fbb7 	bl	8000fac <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003842:	f7fd fbb3 	bl	8000fac <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e1a8      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003854:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003860:	4b28      	ldr	r3, [pc, #160]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4925      	ldr	r1, [pc, #148]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]
 8003874:	e015      	b.n	80038a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003876:	4b24      	ldr	r3, [pc, #144]	; (8003908 <HAL_RCC_OscConfig+0x244>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fd fb96 	bl	8000fac <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003884:	f7fd fb92 	bl	8000fac <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e187      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003896:	4b1b      	ldr	r3, [pc, #108]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d036      	beq.n	800391c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d016      	beq.n	80038e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b6:	4b15      	ldr	r3, [pc, #84]	; (800390c <HAL_RCC_OscConfig+0x248>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038bc:	f7fd fb76 	bl	8000fac <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038c4:	f7fd fb72 	bl	8000fac <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e167      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d6:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_RCC_OscConfig+0x240>)
 80038d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0x200>
 80038e2:	e01b      	b.n	800391c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e4:	4b09      	ldr	r3, [pc, #36]	; (800390c <HAL_RCC_OscConfig+0x248>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ea:	f7fd fb5f 	bl	8000fac <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f0:	e00e      	b.n	8003910 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038f2:	f7fd fb5b 	bl	8000fac <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d907      	bls.n	8003910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e150      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
 8003904:	40023800 	.word	0x40023800
 8003908:	42470000 	.word	0x42470000
 800390c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003910:	4b88      	ldr	r3, [pc, #544]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1ea      	bne.n	80038f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 8097 	beq.w	8003a58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800392a:	2300      	movs	r3, #0
 800392c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800392e:	4b81      	ldr	r3, [pc, #516]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10f      	bne.n	800395a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	4b7d      	ldr	r3, [pc, #500]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	4a7c      	ldr	r2, [pc, #496]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003948:	6413      	str	r3, [r2, #64]	; 0x40
 800394a:	4b7a      	ldr	r3, [pc, #488]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003956:	2301      	movs	r3, #1
 8003958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395a:	4b77      	ldr	r3, [pc, #476]	; (8003b38 <HAL_RCC_OscConfig+0x474>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003962:	2b00      	cmp	r3, #0
 8003964:	d118      	bne.n	8003998 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003966:	4b74      	ldr	r3, [pc, #464]	; (8003b38 <HAL_RCC_OscConfig+0x474>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a73      	ldr	r2, [pc, #460]	; (8003b38 <HAL_RCC_OscConfig+0x474>)
 800396c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003972:	f7fd fb1b 	bl	8000fac <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397a:	f7fd fb17 	bl	8000fac <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e10c      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398c:	4b6a      	ldr	r3, [pc, #424]	; (8003b38 <HAL_RCC_OscConfig+0x474>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f0      	beq.n	800397a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d106      	bne.n	80039ae <HAL_RCC_OscConfig+0x2ea>
 80039a0:	4b64      	ldr	r3, [pc, #400]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a4:	4a63      	ldr	r2, [pc, #396]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	6713      	str	r3, [r2, #112]	; 0x70
 80039ac:	e01c      	b.n	80039e8 <HAL_RCC_OscConfig+0x324>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b05      	cmp	r3, #5
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x30c>
 80039b6:	4b5f      	ldr	r3, [pc, #380]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ba:	4a5e      	ldr	r2, [pc, #376]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039bc:	f043 0304 	orr.w	r3, r3, #4
 80039c0:	6713      	str	r3, [r2, #112]	; 0x70
 80039c2:	4b5c      	ldr	r3, [pc, #368]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	4a5b      	ldr	r2, [pc, #364]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6713      	str	r3, [r2, #112]	; 0x70
 80039ce:	e00b      	b.n	80039e8 <HAL_RCC_OscConfig+0x324>
 80039d0:	4b58      	ldr	r3, [pc, #352]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d4:	4a57      	ldr	r2, [pc, #348]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	6713      	str	r3, [r2, #112]	; 0x70
 80039dc:	4b55      	ldr	r3, [pc, #340]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e0:	4a54      	ldr	r2, [pc, #336]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 80039e2:	f023 0304 	bic.w	r3, r3, #4
 80039e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d015      	beq.n	8003a1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f0:	f7fd fadc 	bl	8000fac <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f6:	e00a      	b.n	8003a0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f8:	f7fd fad8 	bl	8000fac <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e0cb      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0e:	4b49      	ldr	r3, [pc, #292]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0ee      	beq.n	80039f8 <HAL_RCC_OscConfig+0x334>
 8003a1a:	e014      	b.n	8003a46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1c:	f7fd fac6 	bl	8000fac <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a22:	e00a      	b.n	8003a3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a24:	f7fd fac2 	bl	8000fac <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e0b5      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a3a:	4b3e      	ldr	r3, [pc, #248]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1ee      	bne.n	8003a24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a46:	7dfb      	ldrb	r3, [r7, #23]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d105      	bne.n	8003a58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a4c:	4b39      	ldr	r3, [pc, #228]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	4a38      	ldr	r2, [pc, #224]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80a1 	beq.w	8003ba4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a62:	4b34      	ldr	r3, [pc, #208]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d05c      	beq.n	8003b28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d141      	bne.n	8003afa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a76:	4b31      	ldr	r3, [pc, #196]	; (8003b3c <HAL_RCC_OscConfig+0x478>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7fd fa96 	bl	8000fac <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a84:	f7fd fa92 	bl	8000fac <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e087      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a96:	4b27      	ldr	r3, [pc, #156]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69da      	ldr	r2, [r3, #28]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	019b      	lsls	r3, r3, #6
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab8:	085b      	lsrs	r3, r3, #1
 8003aba:	3b01      	subs	r3, #1
 8003abc:	041b      	lsls	r3, r3, #16
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	061b      	lsls	r3, r3, #24
 8003ac6:	491b      	ldr	r1, [pc, #108]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003acc:	4b1b      	ldr	r3, [pc, #108]	; (8003b3c <HAL_RCC_OscConfig+0x478>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad2:	f7fd fa6b 	bl	8000fac <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ada:	f7fd fa67 	bl	8000fac <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e05c      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aec:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0x416>
 8003af8:	e054      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afa:	4b10      	ldr	r3, [pc, #64]	; (8003b3c <HAL_RCC_OscConfig+0x478>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b00:	f7fd fa54 	bl	8000fac <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b08:	f7fd fa50 	bl	8000fac <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e045      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x444>
 8003b26:	e03d      	b.n	8003ba4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e038      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40007000 	.word	0x40007000
 8003b3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b40:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <HAL_RCC_OscConfig+0x4ec>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d028      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d121      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d11a      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b70:	4013      	ands	r3, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d111      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b86:	085b      	lsrs	r3, r3, #1
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d107      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800

08003bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0cc      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b68      	ldr	r3, [pc, #416]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d90c      	bls.n	8003bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b65      	ldr	r3, [pc, #404]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bde:	4b63      	ldr	r3, [pc, #396]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d001      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0b8      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d020      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d005      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c08:	4b59      	ldr	r3, [pc, #356]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4a58      	ldr	r2, [pc, #352]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c20:	4b53      	ldr	r3, [pc, #332]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	4a52      	ldr	r2, [pc, #328]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c2c:	4b50      	ldr	r3, [pc, #320]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	494d      	ldr	r1, [pc, #308]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d044      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d107      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	4b47      	ldr	r3, [pc, #284]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d119      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e07f      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d003      	beq.n	8003c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c72:	4b3f      	ldr	r3, [pc, #252]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d109      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e06f      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c82:	4b3b      	ldr	r3, [pc, #236]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e067      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c92:	4b37      	ldr	r3, [pc, #220]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f023 0203 	bic.w	r2, r3, #3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	4934      	ldr	r1, [pc, #208]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ca4:	f7fd f982 	bl	8000fac <HAL_GetTick>
 8003ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cac:	f7fd f97e 	bl	8000fac <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e04f      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc2:	4b2b      	ldr	r3, [pc, #172]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 020c 	and.w	r2, r3, #12
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d1eb      	bne.n	8003cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd4:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d20c      	bcs.n	8003cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce2:	4b22      	ldr	r3, [pc, #136]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cea:	4b20      	ldr	r3, [pc, #128]	; (8003d6c <HAL_RCC_ClockConfig+0x1b8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e032      	b.n	8003d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d008      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4916      	ldr	r1, [pc, #88]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d26:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	490e      	ldr	r1, [pc, #56]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d3a:	f000 f821 	bl	8003d80 <HAL_RCC_GetSysClockFreq>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	490a      	ldr	r1, [pc, #40]	; (8003d74 <HAL_RCC_ClockConfig+0x1c0>)
 8003d4c:	5ccb      	ldrb	r3, [r1, r3]
 8003d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d52:	4a09      	ldr	r2, [pc, #36]	; (8003d78 <HAL_RCC_ClockConfig+0x1c4>)
 8003d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d56:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <HAL_RCC_ClockConfig+0x1c8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7fd f8e2 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	40023c00 	.word	0x40023c00
 8003d70:	40023800 	.word	0x40023800
 8003d74:	08009188 	.word	0x08009188
 8003d78:	20000004 	.word	0x20000004
 8003d7c:	20000008 	.word	0x20000008

08003d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d84:	b094      	sub	sp, #80	; 0x50
 8003d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d90:	2300      	movs	r3, #0
 8003d92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d98:	4b79      	ldr	r3, [pc, #484]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d00d      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	f200 80e1 	bhi.w	8003f6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d003      	beq.n	8003dba <HAL_RCC_GetSysClockFreq+0x3a>
 8003db2:	e0db      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003db4:	4b73      	ldr	r3, [pc, #460]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003db6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003db8:	e0db      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dba:	4b73      	ldr	r3, [pc, #460]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x208>)
 8003dbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dbe:	e0d8      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dc0:	4b6f      	ldr	r3, [pc, #444]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dc8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dca:	4b6d      	ldr	r3, [pc, #436]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d063      	beq.n	8003e9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd6:	4b6a      	ldr	r3, [pc, #424]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	099b      	lsrs	r3, r3, #6
 8003ddc:	2200      	movs	r2, #0
 8003dde:	63bb      	str	r3, [r7, #56]	; 0x38
 8003de0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de8:	633b      	str	r3, [r7, #48]	; 0x30
 8003dea:	2300      	movs	r3, #0
 8003dec:	637b      	str	r3, [r7, #52]	; 0x34
 8003dee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003df2:	4622      	mov	r2, r4
 8003df4:	462b      	mov	r3, r5
 8003df6:	f04f 0000 	mov.w	r0, #0
 8003dfa:	f04f 0100 	mov.w	r1, #0
 8003dfe:	0159      	lsls	r1, r3, #5
 8003e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e04:	0150      	lsls	r0, r2, #5
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4621      	mov	r1, r4
 8003e0c:	1a51      	subs	r1, r2, r1
 8003e0e:	6139      	str	r1, [r7, #16]
 8003e10:	4629      	mov	r1, r5
 8003e12:	eb63 0301 	sbc.w	r3, r3, r1
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e24:	4659      	mov	r1, fp
 8003e26:	018b      	lsls	r3, r1, #6
 8003e28:	4651      	mov	r1, sl
 8003e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e2e:	4651      	mov	r1, sl
 8003e30:	018a      	lsls	r2, r1, #6
 8003e32:	4651      	mov	r1, sl
 8003e34:	ebb2 0801 	subs.w	r8, r2, r1
 8003e38:	4659      	mov	r1, fp
 8003e3a:	eb63 0901 	sbc.w	r9, r3, r1
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e52:	4690      	mov	r8, r2
 8003e54:	4699      	mov	r9, r3
 8003e56:	4623      	mov	r3, r4
 8003e58:	eb18 0303 	adds.w	r3, r8, r3
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	462b      	mov	r3, r5
 8003e60:	eb49 0303 	adc.w	r3, r9, r3
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e72:	4629      	mov	r1, r5
 8003e74:	024b      	lsls	r3, r1, #9
 8003e76:	4621      	mov	r1, r4
 8003e78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	024a      	lsls	r2, r1, #9
 8003e80:	4610      	mov	r0, r2
 8003e82:	4619      	mov	r1, r3
 8003e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e86:	2200      	movs	r2, #0
 8003e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e90:	f7fc f9ee 	bl	8000270 <__aeabi_uldivmod>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4613      	mov	r3, r2
 8003e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e9c:	e058      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9e:	4b38      	ldr	r3, [pc, #224]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	099b      	lsrs	r3, r3, #6
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003eae:	623b      	str	r3, [r7, #32]
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003eb8:	4642      	mov	r2, r8
 8003eba:	464b      	mov	r3, r9
 8003ebc:	f04f 0000 	mov.w	r0, #0
 8003ec0:	f04f 0100 	mov.w	r1, #0
 8003ec4:	0159      	lsls	r1, r3, #5
 8003ec6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eca:	0150      	lsls	r0, r2, #5
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ee8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003eec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ef0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ef4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	00eb      	lsls	r3, r5, #3
 8003f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f06:	00e2      	lsls	r2, r4, #3
 8003f08:	4614      	mov	r4, r2
 8003f0a:	461d      	mov	r5, r3
 8003f0c:	4643      	mov	r3, r8
 8003f0e:	18e3      	adds	r3, r4, r3
 8003f10:	603b      	str	r3, [r7, #0]
 8003f12:	464b      	mov	r3, r9
 8003f14:	eb45 0303 	adc.w	r3, r5, r3
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f26:	4629      	mov	r1, r5
 8003f28:	028b      	lsls	r3, r1, #10
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f30:	4621      	mov	r1, r4
 8003f32:	028a      	lsls	r2, r1, #10
 8003f34:	4610      	mov	r0, r2
 8003f36:	4619      	mov	r1, r3
 8003f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	61fa      	str	r2, [r7, #28]
 8003f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f44:	f7fc f994 	bl	8000270 <__aeabi_uldivmod>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f6a:	e002      	b.n	8003f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3750      	adds	r7, #80	; 0x50
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800
 8003f84:	00f42400 	.word	0x00f42400
 8003f88:	007a1200 	.word	0x007a1200

08003f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f90:	4b03      	ldr	r3, [pc, #12]	; (8003fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f92:	681b      	ldr	r3, [r3, #0]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20000004 	.word	0x20000004

08003fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fa8:	f7ff fff0 	bl	8003f8c <HAL_RCC_GetHCLKFreq>
 8003fac:	4602      	mov	r2, r0
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	0a9b      	lsrs	r3, r3, #10
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	4903      	ldr	r1, [pc, #12]	; (8003fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fba:	5ccb      	ldrb	r3, [r1, r3]
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	08009198 	.word	0x08009198

08003fcc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d035      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ff4:	4b62      	ldr	r3, [pc, #392]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ffa:	f7fc ffd7 	bl	8000fac <HAL_GetTick>
 8003ffe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004002:	f7fc ffd3 	bl	8000fac <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e0b0      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004014:	4b5b      	ldr	r3, [pc, #364]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1f0      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	019a      	lsls	r2, r3, #6
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	071b      	lsls	r3, r3, #28
 800402c:	4955      	ldr	r1, [pc, #340]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004034:	4b52      	ldr	r3, [pc, #328]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004036:	2201      	movs	r2, #1
 8004038:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800403a:	f7fc ffb7 	bl	8000fac <HAL_GetTick>
 800403e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004040:	e008      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004042:	f7fc ffb3 	bl	8000fac <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e090      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004054:	4b4b      	ldr	r3, [pc, #300]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 8083 	beq.w	8004174 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800406e:	2300      	movs	r3, #0
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	4b44      	ldr	r3, [pc, #272]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	4a43      	ldr	r2, [pc, #268]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800407c:	6413      	str	r3, [r2, #64]	; 0x40
 800407e:	4b41      	ldr	r3, [pc, #260]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800408a:	4b3f      	ldr	r3, [pc, #252]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a3e      	ldr	r2, [pc, #248]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004094:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004096:	f7fc ff89 	bl	8000fac <HAL_GetTick>
 800409a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800409c:	e008      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800409e:	f7fc ff85 	bl	8000fac <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e062      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040b0:	4b35      	ldr	r3, [pc, #212]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f0      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040bc:	4b31      	ldr	r3, [pc, #196]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d02f      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d028      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040da:	4b2a      	ldr	r3, [pc, #168]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040e4:	4b29      	ldr	r3, [pc, #164]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040ea:	4b28      	ldr	r3, [pc, #160]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040f0:	4a24      	ldr	r2, [pc, #144]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040f6:	4b23      	ldr	r3, [pc, #140]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d114      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004102:	f7fc ff53 	bl	8000fac <HAL_GetTick>
 8004106:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	e00a      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fc ff4f 	bl	8000fac <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	; 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e02a      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004120:	4b18      	ldr	r3, [pc, #96]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ee      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004138:	d10d      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800413a:	4b12      	ldr	r3, [pc, #72]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800414a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414e:	490d      	ldr	r1, [pc, #52]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004150:	4313      	orrs	r3, r2
 8004152:	608b      	str	r3, [r1, #8]
 8004154:	e005      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004156:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800415c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004160:	6093      	str	r3, [r2, #8]
 8004162:	4b08      	ldr	r3, [pc, #32]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004164:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416e:	4905      	ldr	r1, [pc, #20]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004170:	4313      	orrs	r3, r2
 8004172:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	42470068 	.word	0x42470068
 8004184:	40023800 	.word	0x40023800
 8004188:	40007000 	.word	0x40007000
 800418c:	42470e40 	.word	0x42470e40

08004190 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d13e      	bne.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80041ae:	4b23      	ldr	r3, [pc, #140]	; (800423c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d005      	beq.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d12f      	bne.n	8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80041c4:	4b1e      	ldr	r3, [pc, #120]	; (8004240 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041c6:	617b      	str	r3, [r7, #20]
          break;
 80041c8:	e02f      	b.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041ca:	4b1c      	ldr	r3, [pc, #112]	; (800423c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d6:	d108      	bne.n	80041ea <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80041d8:	4b18      	ldr	r3, [pc, #96]	; (800423c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041e0:	4a18      	ldr	r2, [pc, #96]	; (8004244 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80041e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	e007      	b.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80041ea:	4b14      	ldr	r3, [pc, #80]	; (800423c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041f2:	4a15      	ldr	r2, [pc, #84]	; (8004248 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80041fa:	4b10      	ldr	r3, [pc, #64]	; (800423c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004200:	099b      	lsrs	r3, r3, #6
 8004202:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	fb02 f303 	mul.w	r3, r2, r3
 800420c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800420e:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004214:	0f1b      	lsrs	r3, r3, #28
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004220:	617b      	str	r3, [r7, #20]
          break;
 8004222:	e002      	b.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
          break;
 8004228:	bf00      	nop
        }
      }
      break;
 800422a:	bf00      	nop
    }
  }
  return frequency;
 800422c:	697b      	ldr	r3, [r7, #20]
}
 800422e:	4618      	mov	r0, r3
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40023800 	.word	0x40023800
 8004240:	00bb8000 	.word	0x00bb8000
 8004244:	007a1200 	.word	0x007a1200
 8004248:	00f42400 	.word	0x00f42400

0800424c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e07b      	b.n	8004356 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	2b00      	cmp	r3, #0
 8004264:	d108      	bne.n	8004278 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800426e:	d009      	beq.n	8004284 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	61da      	str	r2, [r3, #28]
 8004276:	e005      	b.n	8004284 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7fc fd08 	bl	8000cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1b      	ldr	r3, [r3, #32]
 8004304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004308:	ea42 0103 	orr.w	r1, r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004310:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	0c1b      	lsrs	r3, r3, #16
 8004322:	f003 0104 	and.w	r1, r3, #4
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	f003 0210 	and.w	r2, r3, #16
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69da      	ldr	r2, [r3, #28]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004344:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800435e:	b084      	sub	sp, #16
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	f107 001c 	add.w	r0, r7, #28
 800436c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	2b01      	cmp	r3, #1
 8004374:	d122      	bne.n	80043bc <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800438a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800439e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d105      	bne.n	80043b0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f001 fbed 	bl	8005b90 <USB_CoreReset>
 80043b6:	4603      	mov	r3, r0
 80043b8:	73fb      	strb	r3, [r7, #15]
 80043ba:	e01a      	b.n	80043f2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f001 fbe1 	bl	8005b90 <USB_CoreReset>
 80043ce:	4603      	mov	r3, r0
 80043d0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d106      	bne.n	80043e6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	639a      	str	r2, [r3, #56]	; 0x38
 80043e4:	e005      	b.n	80043f2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d10b      	bne.n	8004410 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f043 0206 	orr.w	r2, r3, #6
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f043 0220 	orr.w	r2, r3, #32
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004410:	7bfb      	ldrb	r3, [r7, #15]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800441c:	b004      	add	sp, #16
 800441e:	4770      	bx	lr

08004420 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	4613      	mov	r3, r2
 800442c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d165      	bne.n	8004500 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4a41      	ldr	r2, [pc, #260]	; (800453c <USB_SetTurnaroundTime+0x11c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d906      	bls.n	800444a <USB_SetTurnaroundTime+0x2a>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4a40      	ldr	r2, [pc, #256]	; (8004540 <USB_SetTurnaroundTime+0x120>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d202      	bcs.n	800444a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004444:	230f      	movs	r3, #15
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	e062      	b.n	8004510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	4a3c      	ldr	r2, [pc, #240]	; (8004540 <USB_SetTurnaroundTime+0x120>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d306      	bcc.n	8004460 <USB_SetTurnaroundTime+0x40>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	4a3b      	ldr	r2, [pc, #236]	; (8004544 <USB_SetTurnaroundTime+0x124>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d202      	bcs.n	8004460 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800445a:	230e      	movs	r3, #14
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	e057      	b.n	8004510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4a38      	ldr	r2, [pc, #224]	; (8004544 <USB_SetTurnaroundTime+0x124>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d306      	bcc.n	8004476 <USB_SetTurnaroundTime+0x56>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4a37      	ldr	r2, [pc, #220]	; (8004548 <USB_SetTurnaroundTime+0x128>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d202      	bcs.n	8004476 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004470:	230d      	movs	r3, #13
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	e04c      	b.n	8004510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	4a33      	ldr	r2, [pc, #204]	; (8004548 <USB_SetTurnaroundTime+0x128>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d306      	bcc.n	800448c <USB_SetTurnaroundTime+0x6c>
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4a32      	ldr	r2, [pc, #200]	; (800454c <USB_SetTurnaroundTime+0x12c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d802      	bhi.n	800448c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004486:	230c      	movs	r3, #12
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	e041      	b.n	8004510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4a2f      	ldr	r2, [pc, #188]	; (800454c <USB_SetTurnaroundTime+0x12c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d906      	bls.n	80044a2 <USB_SetTurnaroundTime+0x82>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4a2e      	ldr	r2, [pc, #184]	; (8004550 <USB_SetTurnaroundTime+0x130>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d802      	bhi.n	80044a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800449c:	230b      	movs	r3, #11
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	e036      	b.n	8004510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	4a2a      	ldr	r2, [pc, #168]	; (8004550 <USB_SetTurnaroundTime+0x130>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d906      	bls.n	80044b8 <USB_SetTurnaroundTime+0x98>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4a29      	ldr	r2, [pc, #164]	; (8004554 <USB_SetTurnaroundTime+0x134>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d802      	bhi.n	80044b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80044b2:	230a      	movs	r3, #10
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	e02b      	b.n	8004510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4a26      	ldr	r2, [pc, #152]	; (8004554 <USB_SetTurnaroundTime+0x134>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d906      	bls.n	80044ce <USB_SetTurnaroundTime+0xae>
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4a25      	ldr	r2, [pc, #148]	; (8004558 <USB_SetTurnaroundTime+0x138>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d202      	bcs.n	80044ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044c8:	2309      	movs	r3, #9
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	e020      	b.n	8004510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4a21      	ldr	r2, [pc, #132]	; (8004558 <USB_SetTurnaroundTime+0x138>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d306      	bcc.n	80044e4 <USB_SetTurnaroundTime+0xc4>
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	4a20      	ldr	r2, [pc, #128]	; (800455c <USB_SetTurnaroundTime+0x13c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d802      	bhi.n	80044e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044de:	2308      	movs	r3, #8
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	e015      	b.n	8004510 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4a1d      	ldr	r2, [pc, #116]	; (800455c <USB_SetTurnaroundTime+0x13c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d906      	bls.n	80044fa <USB_SetTurnaroundTime+0xda>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4a1c      	ldr	r2, [pc, #112]	; (8004560 <USB_SetTurnaroundTime+0x140>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d202      	bcs.n	80044fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044f4:	2307      	movs	r3, #7
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	e00a      	b.n	8004510 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044fa:	2306      	movs	r3, #6
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	e007      	b.n	8004510 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d102      	bne.n	800450c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004506:	2309      	movs	r3, #9
 8004508:	617b      	str	r3, [r7, #20]
 800450a:	e001      	b.n	8004510 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800450c:	2309      	movs	r3, #9
 800450e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	029b      	lsls	r3, r3, #10
 8004524:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004528:	431a      	orrs	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	371c      	adds	r7, #28
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	00d8acbf 	.word	0x00d8acbf
 8004540:	00e4e1c0 	.word	0x00e4e1c0
 8004544:	00f42400 	.word	0x00f42400
 8004548:	01067380 	.word	0x01067380
 800454c:	011a499f 	.word	0x011a499f
 8004550:	01312cff 	.word	0x01312cff
 8004554:	014ca43f 	.word	0x014ca43f
 8004558:	016e3600 	.word	0x016e3600
 800455c:	01a6ab1f 	.word	0x01a6ab1f
 8004560:	01e84800 	.word	0x01e84800

08004564 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f043 0201 	orr.w	r2, r3, #1
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004586:	b480      	push	{r7}
 8004588:	b083      	sub	sp, #12
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f023 0201 	bic.w	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d115      	bne.n	80045f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045d6:	2001      	movs	r0, #1
 80045d8:	f7fc fcf4 	bl	8000fc4 <HAL_Delay>
      ms++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	3301      	adds	r3, #1
 80045e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f001 fa45 	bl	8005a72 <USB_GetMode>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d01e      	beq.n	800462c <USB_SetCurrentMode+0x84>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b31      	cmp	r3, #49	; 0x31
 80045f2:	d9f0      	bls.n	80045d6 <USB_SetCurrentMode+0x2e>
 80045f4:	e01a      	b.n	800462c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d115      	bne.n	8004628 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004608:	2001      	movs	r0, #1
 800460a:	f7fc fcdb 	bl	8000fc4 <HAL_Delay>
      ms++;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3301      	adds	r3, #1
 8004612:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f001 fa2c 	bl	8005a72 <USB_GetMode>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <USB_SetCurrentMode+0x84>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b31      	cmp	r3, #49	; 0x31
 8004624:	d9f0      	bls.n	8004608 <USB_SetCurrentMode+0x60>
 8004626:	e001      	b.n	800462c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e005      	b.n	8004638 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b32      	cmp	r3, #50	; 0x32
 8004630:	d101      	bne.n	8004636 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004640:	b084      	sub	sp, #16
 8004642:	b580      	push	{r7, lr}
 8004644:	b086      	sub	sp, #24
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800464e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800465a:	2300      	movs	r3, #0
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	e009      	b.n	8004674 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	3340      	adds	r3, #64	; 0x40
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	2200      	movs	r2, #0
 800466c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	3301      	adds	r3, #1
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b0e      	cmp	r3, #14
 8004678:	d9f2      	bls.n	8004660 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800467a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467c:	2b00      	cmp	r3, #0
 800467e:	d11c      	bne.n	80046ba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800468e:	f043 0302 	orr.w	r3, r3, #2
 8004692:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	639a      	str	r2, [r3, #56]	; 0x38
 80046b8:	e00b      	b.n	80046d2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046d8:	461a      	mov	r2, r3
 80046da:	2300      	movs	r3, #0
 80046dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e4:	4619      	mov	r1, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ec:	461a      	mov	r2, r3
 80046ee:	680b      	ldr	r3, [r1, #0]
 80046f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d10c      	bne.n	8004712 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d104      	bne.n	8004708 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046fe:	2100      	movs	r1, #0
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f965 	bl	80049d0 <USB_SetDevSpeed>
 8004706:	e008      	b.n	800471a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004708:	2101      	movs	r1, #1
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f960 	bl	80049d0 <USB_SetDevSpeed>
 8004710:	e003      	b.n	800471a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004712:	2103      	movs	r1, #3
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f95b 	bl	80049d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800471a:	2110      	movs	r1, #16
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 f8f3 	bl	8004908 <USB_FlushTxFifo>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f91f 	bl	8004970 <USB_FlushRxFifo>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004742:	461a      	mov	r2, r3
 8004744:	2300      	movs	r3, #0
 8004746:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474e:	461a      	mov	r2, r3
 8004750:	2300      	movs	r3, #0
 8004752:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475a:	461a      	mov	r2, r3
 800475c:	2300      	movs	r3, #0
 800475e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004760:	2300      	movs	r3, #0
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	e043      	b.n	80047ee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4413      	add	r3, r2
 800476e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004778:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800477c:	d118      	bne.n	80047b0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10a      	bne.n	800479a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004790:	461a      	mov	r2, r3
 8004792:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	e013      	b.n	80047c2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a6:	461a      	mov	r2, r3
 80047a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	e008      	b.n	80047c2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047bc:	461a      	mov	r2, r3
 80047be:	2300      	movs	r3, #0
 80047c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ce:	461a      	mov	r2, r3
 80047d0:	2300      	movs	r3, #0
 80047d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e0:	461a      	mov	r2, r3
 80047e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	3301      	adds	r3, #1
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d3b7      	bcc.n	8004766 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047f6:	2300      	movs	r3, #0
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	e043      	b.n	8004884 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800480e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004812:	d118      	bne.n	8004846 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10a      	bne.n	8004830 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004826:	461a      	mov	r2, r3
 8004828:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	e013      	b.n	8004858 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483c:	461a      	mov	r2, r3
 800483e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	e008      	b.n	8004858 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004852:	461a      	mov	r2, r3
 8004854:	2300      	movs	r3, #0
 8004856:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004864:	461a      	mov	r2, r3
 8004866:	2300      	movs	r3, #0
 8004868:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004876:	461a      	mov	r2, r3
 8004878:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800487c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	3301      	adds	r3, #1
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	429a      	cmp	r2, r3
 800488a:	d3b7      	bcc.n	80047fc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800489a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800489e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80048ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d105      	bne.n	80048c0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	f043 0210 	orr.w	r2, r3, #16
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	699a      	ldr	r2, [r3, #24]
 80048c4:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <USB_DevInit+0x2c4>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d005      	beq.n	80048de <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	f043 0208 	orr.w	r2, r3, #8
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d107      	bne.n	80048f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048ec:	f043 0304 	orr.w	r3, r3, #4
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004900:	b004      	add	sp, #16
 8004902:	4770      	bx	lr
 8004904:	803c3800 	.word	0x803c3800

08004908 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3301      	adds	r3, #1
 800491a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4a13      	ldr	r2, [pc, #76]	; (800496c <USB_FlushTxFifo+0x64>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d901      	bls.n	8004928 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e01b      	b.n	8004960 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	daf2      	bge.n	8004916 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	019b      	lsls	r3, r3, #6
 8004938:	f043 0220 	orr.w	r2, r3, #32
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3301      	adds	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4a08      	ldr	r2, [pc, #32]	; (800496c <USB_FlushTxFifo+0x64>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d901      	bls.n	8004952 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e006      	b.n	8004960 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b20      	cmp	r3, #32
 800495c:	d0f0      	beq.n	8004940 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	00030d40 	.word	0x00030d40

08004970 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3301      	adds	r3, #1
 8004980:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4a11      	ldr	r2, [pc, #68]	; (80049cc <USB_FlushRxFifo+0x5c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e018      	b.n	80049c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	daf2      	bge.n	800497c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2210      	movs	r2, #16
 800499e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3301      	adds	r3, #1
 80049a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4a08      	ldr	r2, [pc, #32]	; (80049cc <USB_FlushRxFifo+0x5c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d901      	bls.n	80049b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e006      	b.n	80049c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0310 	and.w	r3, r3, #16
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	d0f0      	beq.n	80049a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	00030d40 	.word	0x00030d40

080049d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	460b      	mov	r3, r1
 80049da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	68f9      	ldr	r1, [r7, #12]
 80049ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049f0:	4313      	orrs	r3, r2
 80049f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b087      	sub	sp, #28
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 0306 	and.w	r3, r3, #6
 8004a1a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d102      	bne.n	8004a28 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004a22:	2300      	movs	r3, #0
 8004a24:	75fb      	strb	r3, [r7, #23]
 8004a26:	e00a      	b.n	8004a3e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d002      	beq.n	8004a34 <USB_GetDevSpeed+0x32>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b06      	cmp	r3, #6
 8004a32:	d102      	bne.n	8004a3a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a34:	2302      	movs	r3, #2
 8004a36:	75fb      	strb	r3, [r7, #23]
 8004a38:	e001      	b.n	8004a3e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004a3a:	230f      	movs	r3, #15
 8004a3c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	371c      	adds	r7, #28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	785b      	ldrb	r3, [r3, #1]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d13a      	bne.n	8004ade <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6e:	69da      	ldr	r2, [r3, #28]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	f003 030f 	and.w	r3, r3, #15
 8004a78:	2101      	movs	r1, #1
 8004a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	68f9      	ldr	r1, [r7, #12]
 8004a82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a86:	4313      	orrs	r3, r2
 8004a88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d155      	bne.n	8004b4c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	791b      	ldrb	r3, [r3, #4]
 8004aba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004abc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	059b      	lsls	r3, r3, #22
 8004ac2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	0151      	lsls	r1, r2, #5
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	440a      	add	r2, r1
 8004ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ada:	6013      	str	r3, [r2, #0]
 8004adc:	e036      	b.n	8004b4c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae4:	69da      	ldr	r2, [r3, #28]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	2101      	movs	r1, #1
 8004af0:	fa01 f303 	lsl.w	r3, r1, r3
 8004af4:	041b      	lsls	r3, r3, #16
 8004af6:	68f9      	ldr	r1, [r7, #12]
 8004af8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004afc:	4313      	orrs	r3, r2
 8004afe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d11a      	bne.n	8004b4c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	791b      	ldrb	r3, [r3, #4]
 8004b30:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b32:	430b      	orrs	r3, r1
 8004b34:	4313      	orrs	r3, r2
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	0151      	lsls	r1, r2, #5
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	440a      	add	r2, r1
 8004b3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b4a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
	...

08004b5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	785b      	ldrb	r3, [r3, #1]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d161      	bne.n	8004c3c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b8e:	d11f      	bne.n	8004bd0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	0151      	lsls	r1, r2, #5
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	440a      	add	r2, r1
 8004ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004baa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	0151      	lsls	r1, r2, #5
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	f003 030f 	and.w	r3, r3, #15
 8004be0:	2101      	movs	r1, #1
 8004be2:	fa01 f303 	lsl.w	r3, r1, r3
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	43db      	mvns	r3, r3
 8004bea:	68f9      	ldr	r1, [r7, #12]
 8004bec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	2101      	movs	r1, #1
 8004c06:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	68f9      	ldr	r1, [r7, #12]
 8004c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c14:	4013      	ands	r3, r2
 8004c16:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	0159      	lsls	r1, r3, #5
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	440b      	add	r3, r1
 8004c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c32:	4619      	mov	r1, r3
 8004c34:	4b35      	ldr	r3, [pc, #212]	; (8004d0c <USB_DeactivateEndpoint+0x1b0>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	600b      	str	r3, [r1, #0]
 8004c3a:	e060      	b.n	8004cfe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c52:	d11f      	bne.n	8004c94 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	0151      	lsls	r1, r2, #5
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	440a      	add	r2, r1
 8004c6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c72:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	0151      	lsls	r1, r2, #5
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	440a      	add	r2, r1
 8004c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	43db      	mvns	r3, r3
 8004cae:	68f9      	ldr	r1, [r7, #12]
 8004cb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	2101      	movs	r1, #1
 8004cca:	fa01 f303 	lsl.w	r3, r1, r3
 8004cce:	041b      	lsls	r3, r3, #16
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	68f9      	ldr	r1, [r7, #12]
 8004cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cd8:	4013      	ands	r3, r2
 8004cda:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	0159      	lsls	r1, r3, #5
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	440b      	add	r3, r1
 8004cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <USB_DeactivateEndpoint+0x1b4>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	ec337800 	.word	0xec337800
 8004d10:	eff37800 	.word	0xeff37800

08004d14 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08a      	sub	sp, #40	; 0x28
 8004d18:	af02      	add	r7, sp, #8
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	785b      	ldrb	r3, [r3, #1]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	f040 815c 	bne.w	8004fee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d132      	bne.n	8004da4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	0151      	lsls	r1, r2, #5
 8004d50:	69fa      	ldr	r2, [r7, #28]
 8004d52:	440a      	add	r2, r1
 8004d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	0151      	lsls	r1, r2, #5
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	440a      	add	r2, r1
 8004d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	015a      	lsls	r2, r3, #5
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	4413      	add	r3, r2
 8004d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	0151      	lsls	r1, r2, #5
 8004d94:	69fa      	ldr	r2, [r7, #28]
 8004d96:	440a      	add	r2, r1
 8004d98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d9c:	0cdb      	lsrs	r3, r3, #19
 8004d9e:	04db      	lsls	r3, r3, #19
 8004da0:	6113      	str	r3, [r2, #16]
 8004da2:	e074      	b.n	8004e8e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	0151      	lsls	r1, r2, #5
 8004db6:	69fa      	ldr	r2, [r7, #28]
 8004db8:	440a      	add	r2, r1
 8004dba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dbe:	0cdb      	lsrs	r3, r3, #19
 8004dc0:	04db      	lsls	r3, r3, #19
 8004dc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	0151      	lsls	r1, r2, #5
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	440a      	add	r2, r1
 8004dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004de2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004de6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	6999      	ldr	r1, [r3, #24]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	440b      	add	r3, r1
 8004e00:	1e59      	subs	r1, r3, #1
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e0a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e0c:	4b9d      	ldr	r3, [pc, #628]	; (8005084 <USB_EPStartXfer+0x370>)
 8004e0e:	400b      	ands	r3, r1
 8004e10:	69b9      	ldr	r1, [r7, #24]
 8004e12:	0148      	lsls	r0, r1, #5
 8004e14:	69f9      	ldr	r1, [r7, #28]
 8004e16:	4401      	add	r1, r0
 8004e18:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e36:	69b9      	ldr	r1, [r7, #24]
 8004e38:	0148      	lsls	r0, r1, #5
 8004e3a:	69f9      	ldr	r1, [r7, #28]
 8004e3c:	4401      	add	r1, r0
 8004e3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e42:	4313      	orrs	r3, r2
 8004e44:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	791b      	ldrb	r3, [r3, #4]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d11f      	bne.n	8004e8e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5a:	691b      	ldr	r3, [r3, #16]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	0151      	lsls	r1, r2, #5
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	440a      	add	r2, r1
 8004e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e68:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e6c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	0151      	lsls	r1, r2, #5
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	440a      	add	r2, r1
 8004e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e8c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e8e:	79fb      	ldrb	r3, [r7, #7]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d14b      	bne.n	8004f2c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d009      	beq.n	8004eb0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	791b      	ldrb	r3, [r3, #4]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d128      	bne.n	8004f0a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d110      	bne.n	8004eea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	0151      	lsls	r1, r2, #5
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	440a      	add	r2, r1
 8004ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	e00f      	b.n	8004f0a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	0151      	lsls	r1, r2, #5
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	440a      	add	r2, r1
 8004f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f08:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	e133      	b.n	8005194 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	0151      	lsls	r1, r2, #5
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	440a      	add	r2, r1
 8004f42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f4a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	791b      	ldrb	r3, [r3, #4]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d015      	beq.n	8004f80 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 811b 	beq.w	8005194 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	2101      	movs	r1, #1
 8004f70:	fa01 f303 	lsl.w	r3, r1, r3
 8004f74:	69f9      	ldr	r1, [r7, #28]
 8004f76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	634b      	str	r3, [r1, #52]	; 0x34
 8004f7e:	e109      	b.n	8005194 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d110      	bne.n	8004fb2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	0151      	lsls	r1, r2, #5
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	440a      	add	r2, r1
 8004fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004faa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	e00f      	b.n	8004fd2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	015a      	lsls	r2, r3, #5
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	4413      	add	r3, r2
 8004fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	0151      	lsls	r1, r2, #5
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	440a      	add	r2, r1
 8004fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	6919      	ldr	r1, [r3, #16]
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	781a      	ldrb	r2, [r3, #0]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	b298      	uxth	r0, r3
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 fade 	bl	80055a8 <USB_WritePacket>
 8004fec:	e0d2      	b.n	8005194 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	0151      	lsls	r1, r2, #5
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	440a      	add	r2, r1
 8005004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005008:	0cdb      	lsrs	r3, r3, #19
 800500a:	04db      	lsls	r3, r3, #19
 800500c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	4413      	add	r3, r2
 8005016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	0151      	lsls	r1, r2, #5
 8005020:	69fa      	ldr	r2, [r7, #28]
 8005022:	440a      	add	r2, r1
 8005024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005028:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800502c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005030:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d126      	bne.n	8005088 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005050:	69b9      	ldr	r1, [r7, #24]
 8005052:	0148      	lsls	r0, r1, #5
 8005054:	69f9      	ldr	r1, [r7, #28]
 8005056:	4401      	add	r1, r0
 8005058:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800505c:	4313      	orrs	r3, r2
 800505e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	0151      	lsls	r1, r2, #5
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	440a      	add	r2, r1
 8005076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800507a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800507e:	6113      	str	r3, [r2, #16]
 8005080:	e03a      	b.n	80050f8 <USB_EPStartXfer+0x3e4>
 8005082:	bf00      	nop
 8005084:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	699a      	ldr	r2, [r3, #24]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4413      	add	r3, r2
 8005092:	1e5a      	subs	r2, r3, #1
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	fbb2 f3f3 	udiv	r3, r2, r3
 800509c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	8afa      	ldrh	r2, [r7, #22]
 80050a4:	fb03 f202 	mul.w	r2, r3, r2
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	8afb      	ldrh	r3, [r7, #22]
 80050bc:	04d9      	lsls	r1, r3, #19
 80050be:	4b38      	ldr	r3, [pc, #224]	; (80051a0 <USB_EPStartXfer+0x48c>)
 80050c0:	400b      	ands	r3, r1
 80050c2:	69b9      	ldr	r1, [r7, #24]
 80050c4:	0148      	lsls	r0, r1, #5
 80050c6:	69f9      	ldr	r1, [r7, #28]
 80050c8:	4401      	add	r1, r0
 80050ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050ce:	4313      	orrs	r3, r2
 80050d0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e8:	69b9      	ldr	r1, [r7, #24]
 80050ea:	0148      	lsls	r0, r1, #5
 80050ec:	69f9      	ldr	r1, [r7, #28]
 80050ee:	4401      	add	r1, r0
 80050f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050f4:	4313      	orrs	r3, r2
 80050f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050f8:	79fb      	ldrb	r3, [r7, #7]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d10d      	bne.n	800511a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d009      	beq.n	800511a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	6919      	ldr	r1, [r3, #16]
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005116:	460a      	mov	r2, r1
 8005118:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	791b      	ldrb	r3, [r3, #4]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d128      	bne.n	8005174 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512e:	2b00      	cmp	r3, #0
 8005130:	d110      	bne.n	8005154 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	0151      	lsls	r1, r2, #5
 8005144:	69fa      	ldr	r2, [r7, #28]
 8005146:	440a      	add	r2, r1
 8005148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	e00f      	b.n	8005174 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	0151      	lsls	r1, r2, #5
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	440a      	add	r2, r1
 800516a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800516e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005172:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	0151      	lsls	r1, r2, #5
 8005186:	69fa      	ldr	r2, [r7, #28]
 8005188:	440a      	add	r2, r1
 800518a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800518e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005192:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3720      	adds	r7, #32
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	1ff80000 	.word	0x1ff80000

080051a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	4613      	mov	r3, r2
 80051b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	785b      	ldrb	r3, [r3, #1]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	f040 80ce 	bne.w	8005362 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d132      	bne.n	8005234 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	0151      	lsls	r1, r2, #5
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	440a      	add	r2, r1
 80051e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	015a      	lsls	r2, r3, #5
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	4413      	add	r3, r2
 80051fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	0151      	lsls	r1, r2, #5
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	440a      	add	r2, r1
 8005208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800520c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005210:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	0151      	lsls	r1, r2, #5
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	440a      	add	r2, r1
 8005228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522c:	0cdb      	lsrs	r3, r3, #19
 800522e:	04db      	lsls	r3, r3, #19
 8005230:	6113      	str	r3, [r2, #16]
 8005232:	e04e      	b.n	80052d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	015a      	lsls	r2, r3, #5
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	4413      	add	r3, r2
 800523c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	0151      	lsls	r1, r2, #5
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	440a      	add	r2, r1
 800524a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524e:	0cdb      	lsrs	r3, r3, #19
 8005250:	04db      	lsls	r3, r3, #19
 8005252:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	0151      	lsls	r1, r2, #5
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	440a      	add	r2, r1
 800526a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800526e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005272:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005276:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	699a      	ldr	r2, [r3, #24]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	429a      	cmp	r2, r3
 8005282:	d903      	bls.n	800528c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	0151      	lsls	r1, r2, #5
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	440a      	add	r2, r1
 80052a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052c2:	6939      	ldr	r1, [r7, #16]
 80052c4:	0148      	lsls	r0, r1, #5
 80052c6:	6979      	ldr	r1, [r7, #20]
 80052c8:	4401      	add	r1, r0
 80052ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052ce:	4313      	orrs	r3, r2
 80052d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d11e      	bne.n	8005316 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d009      	beq.n	80052f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ec:	461a      	mov	r2, r3
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	0151      	lsls	r1, r2, #5
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	440a      	add	r2, r1
 800530a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800530e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	e097      	b.n	8005446 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	0151      	lsls	r1, r2, #5
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	440a      	add	r2, r1
 800532c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005330:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005334:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 8083 	beq.w	8005446 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	f003 030f 	and.w	r3, r3, #15
 8005350:	2101      	movs	r1, #1
 8005352:	fa01 f303 	lsl.w	r3, r1, r3
 8005356:	6979      	ldr	r1, [r7, #20]
 8005358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800535c:	4313      	orrs	r3, r2
 800535e:	634b      	str	r3, [r1, #52]	; 0x34
 8005360:	e071      	b.n	8005446 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	0151      	lsls	r1, r2, #5
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	440a      	add	r2, r1
 8005378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800537c:	0cdb      	lsrs	r3, r3, #19
 800537e:	04db      	lsls	r3, r3, #19
 8005380:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	0151      	lsls	r1, r2, #5
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	440a      	add	r2, r1
 8005398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800539c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	0151      	lsls	r1, r2, #5
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	440a      	add	r2, r1
 80053d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053f4:	6939      	ldr	r1, [r7, #16]
 80053f6:	0148      	lsls	r0, r1, #5
 80053f8:	6979      	ldr	r1, [r7, #20]
 80053fa:	4401      	add	r1, r0
 80053fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005400:	4313      	orrs	r3, r2
 8005402:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005404:	79fb      	ldrb	r3, [r7, #7]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d10d      	bne.n	8005426 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d009      	beq.n	8005426 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	6919      	ldr	r1, [r3, #16]
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005422:	460a      	mov	r2, r1
 8005424:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	0151      	lsls	r1, r2, #5
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	440a      	add	r2, r1
 800543c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005440:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005444:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	371c      	adds	r7, #28
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	785b      	ldrb	r3, [r3, #1]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d14a      	bne.n	8005508 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800548a:	f040 8086 	bne.w	800559a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	7812      	ldrb	r2, [r2, #0]
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	7812      	ldrb	r2, [r2, #0]
 80054c6:	0151      	lsls	r1, r2, #5
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	440a      	add	r2, r1
 80054cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3301      	adds	r3, #1
 80054da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f242 7210 	movw	r2, #10000	; 0x2710
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d902      	bls.n	80054ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	75fb      	strb	r3, [r7, #23]
          break;
 80054ea:	e056      	b.n	800559a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005500:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005504:	d0e7      	beq.n	80054d6 <USB_EPStopXfer+0x82>
 8005506:	e048      	b.n	800559a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800551c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005520:	d13b      	bne.n	800559a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	015a      	lsls	r2, r3, #5
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	4413      	add	r3, r2
 800552c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	7812      	ldrb	r2, [r2, #0]
 8005536:	0151      	lsls	r1, r2, #5
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	440a      	add	r2, r1
 800553c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005540:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005544:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	7812      	ldrb	r2, [r2, #0]
 800555a:	0151      	lsls	r1, r2, #5
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	440a      	add	r2, r1
 8005560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005564:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005568:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3301      	adds	r3, #1
 800556e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f242 7210 	movw	r2, #10000	; 0x2710
 8005576:	4293      	cmp	r3, r2
 8005578:	d902      	bls.n	8005580 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	75fb      	strb	r3, [r7, #23]
          break;
 800557e:	e00c      	b.n	800559a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005594:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005598:	d0e7      	beq.n	800556a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800559a:	7dfb      	ldrb	r3, [r7, #23]
}
 800559c:	4618      	mov	r0, r3
 800559e:	371c      	adds	r7, #28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b089      	sub	sp, #36	; 0x24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	4611      	mov	r1, r2
 80055b4:	461a      	mov	r2, r3
 80055b6:	460b      	mov	r3, r1
 80055b8:	71fb      	strb	r3, [r7, #7]
 80055ba:	4613      	mov	r3, r2
 80055bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80055c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d123      	bne.n	8005616 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055ce:	88bb      	ldrh	r3, [r7, #4]
 80055d0:	3303      	adds	r3, #3
 80055d2:	089b      	lsrs	r3, r3, #2
 80055d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055d6:	2300      	movs	r3, #0
 80055d8:	61bb      	str	r3, [r7, #24]
 80055da:	e018      	b.n	800560e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	031a      	lsls	r2, r3, #12
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055e8:	461a      	mov	r2, r3
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	3301      	adds	r3, #1
 80055f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	3301      	adds	r3, #1
 80055fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	3301      	adds	r3, #1
 8005600:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	3301      	adds	r3, #1
 8005606:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	3301      	adds	r3, #1
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	429a      	cmp	r2, r3
 8005614:	d3e2      	bcc.n	80055dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3724      	adds	r7, #36	; 0x24
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005624:	b480      	push	{r7}
 8005626:	b08b      	sub	sp, #44	; 0x2c
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	4613      	mov	r3, r2
 8005630:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800563a:	88fb      	ldrh	r3, [r7, #6]
 800563c:	089b      	lsrs	r3, r3, #2
 800563e:	b29b      	uxth	r3, r3
 8005640:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005642:	88fb      	ldrh	r3, [r7, #6]
 8005644:	f003 0303 	and.w	r3, r3, #3
 8005648:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800564a:	2300      	movs	r3, #0
 800564c:	623b      	str	r3, [r7, #32]
 800564e:	e014      	b.n	800567a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	601a      	str	r2, [r3, #0]
    pDest++;
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	3301      	adds	r3, #1
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	3301      	adds	r3, #1
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	3301      	adds	r3, #1
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	3301      	adds	r3, #1
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	3301      	adds	r3, #1
 8005678:	623b      	str	r3, [r7, #32]
 800567a:	6a3a      	ldr	r2, [r7, #32]
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	429a      	cmp	r2, r3
 8005680:	d3e6      	bcc.n	8005650 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005682:	8bfb      	ldrh	r3, [r7, #30]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d01e      	beq.n	80056c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005692:	461a      	mov	r2, r3
 8005694:	f107 0310 	add.w	r3, r7, #16
 8005698:	6812      	ldr	r2, [r2, #0]
 800569a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	fa22 f303 	lsr.w	r3, r2, r3
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	701a      	strb	r2, [r3, #0]
      i++;
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	3301      	adds	r3, #1
 80056b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	3301      	adds	r3, #1
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80056ba:	8bfb      	ldrh	r3, [r7, #30]
 80056bc:	3b01      	subs	r3, #1
 80056be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80056c0:	8bfb      	ldrh	r3, [r7, #30]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1ea      	bne.n	800569c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	372c      	adds	r7, #44	; 0x2c
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d12c      	bne.n	800574a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	db12      	blt.n	8005728 <USB_EPSetStall+0x54>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00f      	beq.n	8005728 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	0151      	lsls	r1, r2, #5
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	440a      	add	r2, r1
 800571e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005722:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005726:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	0151      	lsls	r1, r2, #5
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	440a      	add	r2, r1
 800573e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005742:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	e02b      	b.n	80057a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	db12      	blt.n	8005782 <USB_EPSetStall+0xae>
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00f      	beq.n	8005782 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	440a      	add	r2, r1
 8005778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800577c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005780:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	0151      	lsls	r1, r2, #5
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	440a      	add	r2, r1
 8005798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d128      	bne.n	800581e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	0151      	lsls	r1, r2, #5
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	440a      	add	r2, r1
 80057e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	791b      	ldrb	r3, [r3, #4]
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d003      	beq.n	80057fc <USB_EPClearStall+0x4c>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	791b      	ldrb	r3, [r3, #4]
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d138      	bne.n	800586e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	0151      	lsls	r1, r2, #5
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	440a      	add	r2, r1
 8005812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	e027      	b.n	800586e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	0151      	lsls	r1, r2, #5
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	440a      	add	r2, r1
 8005834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005838:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800583c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	791b      	ldrb	r3, [r3, #4]
 8005842:	2b03      	cmp	r3, #3
 8005844:	d003      	beq.n	800584e <USB_EPClearStall+0x9e>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	791b      	ldrb	r3, [r3, #4]
 800584a:	2b02      	cmp	r3, #2
 800584c:	d10f      	bne.n	800586e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	0151      	lsls	r1, r2, #5
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	440a      	add	r2, r1
 8005864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800586c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	460b      	mov	r3, r1
 8005886:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800589a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800589e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80058b0:	68f9      	ldr	r1, [r7, #12]
 80058b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b6:	4313      	orrs	r3, r2
 80058b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058e2:	f023 0303 	bic.w	r3, r3, #3
 80058e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058f6:	f023 0302 	bic.w	r3, r3, #2
 80058fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800590a:	b480      	push	{r7}
 800590c:	b085      	sub	sp, #20
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005924:	f023 0303 	bic.w	r3, r3, #3
 8005928:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005938:	f043 0302 	orr.w	r3, r3, #2
 800593c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4013      	ands	r3, r2
 8005962:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005964:	68fb      	ldr	r3, [r7, #12]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	4013      	ands	r3, r2
 8005994:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	0c1b      	lsrs	r3, r3, #16
}
 800599a:	4618      	mov	r0, r3
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b085      	sub	sp, #20
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	4013      	ands	r3, r2
 80059c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	b29b      	uxth	r3, r3
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3714      	adds	r7, #20
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059da:	b480      	push	{r7}
 80059dc:	b085      	sub	sp, #20
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	460b      	mov	r3, r1
 80059e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	4013      	ands	r3, r2
 8005a06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a08:	68bb      	ldr	r3, [r7, #8]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b087      	sub	sp, #28
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	460b      	mov	r3, r1
 8005a20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a38:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a3a:	78fb      	ldrb	r3, [r7, #3]
 8005a3c:	f003 030f 	and.w	r3, r3, #15
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	fa22 f303 	lsr.w	r3, r2, r3
 8005a46:	01db      	lsls	r3, r3, #7
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4013      	ands	r3, r2
 8005a62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a64:	68bb      	ldr	r3, [r7, #8]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	371c      	adds	r7, #28
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005aac:	f023 0307 	bic.w	r3, r3, #7
 8005ab0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	460b      	mov	r3, r1
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	333c      	adds	r3, #60	; 0x3c
 8005aea:	3304      	adds	r3, #4
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	4a26      	ldr	r2, [pc, #152]	; (8005b8c <USB_EP0_OutStart+0xb8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d90a      	bls.n	8005b0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b08:	d101      	bne.n	8005b0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e037      	b.n	8005b7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b14:	461a      	mov	r2, r3
 8005b16:	2300      	movs	r3, #0
 8005b18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b3c:	f043 0318 	orr.w	r3, r3, #24
 8005b40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005b54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b56:	7afb      	ldrb	r3, [r7, #11]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d10f      	bne.n	8005b7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b62:	461a      	mov	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b76:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	371c      	adds	r7, #28
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	4f54300a 	.word	0x4f54300a

08005b90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4a13      	ldr	r2, [pc, #76]	; (8005bf4 <USB_CoreReset+0x64>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d901      	bls.n	8005bae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e01b      	b.n	8005be6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	daf2      	bge.n	8005b9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f043 0201 	orr.w	r2, r3, #1
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4a09      	ldr	r2, [pc, #36]	; (8005bf4 <USB_CoreReset+0x64>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d901      	bls.n	8005bd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e006      	b.n	8005be6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d0f0      	beq.n	8005bc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	00030d40 	.word	0x00030d40

08005bf8 <eMBMasterReqWriteMultipleHoldingRegister>:
 * @return error code
 */
eMBMasterReqErrCode
eMBMasterReqWriteMultipleHoldingRegister( UCHAR ucSndAddr,
		USHORT usRegAddr, USHORT usNRegs, USHORT * pusDataBuffer, LONG lTimeOut )
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	607b      	str	r3, [r7, #4]
 8005c00:	4603      	mov	r3, r0
 8005c02:	73fb      	strb	r3, [r7, #15]
 8005c04:	460b      	mov	r3, r1
 8005c06:	81bb      	strh	r3, [r7, #12]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    USHORT                 usRegIndex = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	837b      	strh	r3, [r7, #26]
    UCHAR Length;
     USHORT          usCRC16;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8005c10:	2300      	movs	r3, #0
 8005c12:	767b      	strb	r3, [r7, #25]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	2bf3      	cmp	r3, #243	; 0xf3
 8005c18:	d902      	bls.n	8005c20 <eMBMasterReqWriteMultipleHoldingRegister+0x28>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	767b      	strb	r3, [r7, #25]
 8005c1e:	e068      	b.n	8005cf2 <eMBMasterReqWriteMultipleHoldingRegister+0xfa>
    else
    {
//		vMBMasterGetPDUSndBuf(&ucMBFrame);
//		vMBMasterSetDestAddress(ucSndAddr);

       	MBbuffer[0]=ucSndAddr; //Slave Address
 8005c20:	4a36      	ldr	r2, [pc, #216]	; (8005cfc <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 8005c22:	7bfb      	ldrb	r3, [r7, #15]
 8005c24:	7013      	strb	r3, [r2, #0]
        ucMBFrame = &MBbuffer[1];  // Start from offset 1
 8005c26:	4b36      	ldr	r3, [pc, #216]	; (8005d00 <eMBMasterReqWriteMultipleHoldingRegister+0x108>)
 8005c28:	61fb      	str	r3, [r7, #28]

		ucMBFrame[MB_PDU_FUNC_OFF]                     = MB_FUNC_WRITE_MULTIPLE_REGISTERS;
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	2210      	movs	r2, #16
 8005c2e:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF]       = usRegAddr >> 8;
 8005c30:	89bb      	ldrh	r3, [r7, #12]
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1]   = usRegAddr;
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	3302      	adds	r3, #2
 8005c42:	89ba      	ldrh	r2, [r7, #12]
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF]     = usNRegs >> 8;
 8005c48:	897b      	ldrh	r3, [r7, #10]
 8005c4a:	0a1b      	lsrs	r3, r3, #8
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	3303      	adds	r3, #3
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] = usNRegs ;
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	3304      	adds	r3, #4
 8005c5a:	897a      	ldrh	r2, [r7, #10]
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF]    = usNRegs * 2;
 8005c60:	897b      	ldrh	r3, [r7, #10]
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	3305      	adds	r3, #5
 8005c68:	0052      	lsls	r2, r2, #1
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	701a      	strb	r2, [r3, #0]
		ucMBFrame += MB_PDU_REQ_WRITE_MUL_VALUES_OFF;
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	3306      	adds	r3, #6
 8005c72:	61fb      	str	r3, [r7, #28]
		while( usNRegs > usRegIndex)
 8005c74:	e017      	b.n	8005ca6 <eMBMasterReqWriteMultipleHoldingRegister+0xae>
		{
			*ucMBFrame++ = pusDataBuffer[usRegIndex] >> 8;
 8005c76:	8b7b      	ldrh	r3, [r7, #26]
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	0a1b      	lsrs	r3, r3, #8
 8005c82:	b299      	uxth	r1, r3
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	61fa      	str	r2, [r7, #28]
 8005c8a:	b2ca      	uxtb	r2, r1
 8005c8c:	701a      	strb	r2, [r3, #0]
			*ucMBFrame++ = pusDataBuffer[usRegIndex++] ;
 8005c8e:	8b7b      	ldrh	r3, [r7, #26]
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	837a      	strh	r2, [r7, #26]
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	4413      	add	r3, r2
 8005c9a:	8819      	ldrh	r1, [r3, #0]
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	61fa      	str	r2, [r7, #28]
 8005ca2:	b2ca      	uxtb	r2, r1
 8005ca4:	701a      	strb	r2, [r3, #0]
		while( usNRegs > usRegIndex)
 8005ca6:	897a      	ldrh	r2, [r7, #10]
 8005ca8:	8b7b      	ldrh	r3, [r7, #26]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d8e3      	bhi.n	8005c76 <eMBMasterReqWriteMultipleHoldingRegister+0x7e>
		}

		Length = MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_MUL_SIZE_MIN + 2*usNRegs + 3 ; //Address + CRC
 8005cae:	897b      	ldrh	r3, [r7, #10]
 8005cb0:	3303      	adds	r3, #3
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	3303      	adds	r3, #3
 8005cba:	763b      	strb	r3, [r7, #24]
        usCRC16 = usMBCRC16( &MBbuffer[0], Length-2 );
 8005cbc:	7e3b      	ldrb	r3, [r7, #24]
 8005cbe:	3b02      	subs	r3, #2
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	480e      	ldr	r0, [pc, #56]	; (8005cfc <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 8005cc4:	f000 f81e 	bl	8005d04 <usMBCRC16>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	82fb      	strh	r3, [r7, #22]

        MBbuffer[Length-1] = usCRC16 >> 8;
 8005ccc:	8afb      	ldrh	r3, [r7, #22]
 8005cce:	0a1b      	lsrs	r3, r3, #8
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	7e3b      	ldrb	r3, [r7, #24]
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b2d1      	uxtb	r1, r2
 8005cd8:	4a08      	ldr	r2, [pc, #32]	; (8005cfc <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 8005cda:	54d1      	strb	r1, [r2, r3]
        MBbuffer[Length-2] = usCRC16 & 0xff;
 8005cdc:	7e3b      	ldrb	r3, [r7, #24]
 8005cde:	3b02      	subs	r3, #2
 8005ce0:	8afa      	ldrh	r2, [r7, #22]
 8005ce2:	b2d1      	uxtb	r1, r2
 8005ce4:	4a05      	ldr	r2, [pc, #20]	; (8005cfc <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 8005ce6:	54d1      	strb	r1, [r2, r3]

		 CDC_Transmit_FS(MBbuffer,Length);
 8005ce8:	7e3b      	ldrb	r3, [r7, #24]
 8005cea:	4619      	mov	r1, r3
 8005cec:	4803      	ldr	r0, [pc, #12]	; (8005cfc <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 8005cee:	f002 f8db 	bl	8007ea8 <CDC_Transmit_FS>

//		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_MUL_SIZE_MIN + 2*usNRegs );
//		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
//		eErrStatus = eMBMasterWaitRequestFinish( );
    }
    return eErrStatus;
 8005cf2:	7e7b      	ldrb	r3, [r7, #25]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3720      	adds	r7, #32
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	20000424 	.word	0x20000424
 8005d00:	20000425 	.word	0x20000425

08005d04 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8005d10:	23ff      	movs	r3, #255	; 0xff
 8005d12:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8005d14:	23ff      	movs	r3, #255	; 0xff
 8005d16:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8005d18:	e013      	b.n	8005d42 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	781a      	ldrb	r2, [r3, #0]
 8005d22:	7bbb      	ldrb	r3, [r7, #14]
 8005d24:	4053      	eors	r3, r2
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8005d2a:	4a0f      	ldr	r2, [pc, #60]	; (8005d68 <usMBCRC16+0x64>)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	4413      	add	r3, r2
 8005d30:	781a      	ldrb	r2, [r3, #0]
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	4053      	eors	r3, r2
 8005d36:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8005d38:	4a0c      	ldr	r2, [pc, #48]	; (8005d6c <usMBCRC16+0x68>)
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8005d42:	887b      	ldrh	r3, [r7, #2]
 8005d44:	1e5a      	subs	r2, r3, #1
 8005d46:	807a      	strh	r2, [r7, #2]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e6      	bne.n	8005d1a <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	021b      	lsls	r3, r3, #8
 8005d50:	b21a      	sxth	r2, r3
 8005d52:	7bbb      	ldrb	r3, [r7, #14]
 8005d54:	b21b      	sxth	r3, r3
 8005d56:	4313      	orrs	r3, r2
 8005d58:	b21b      	sxth	r3, r3
 8005d5a:	b29b      	uxth	r3, r3
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	080091a0 	.word	0x080091a0
 8005d6c:	080092a0 	.word	0x080092a0

08005d70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d7c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d80:	f002 fcb8 	bl	80086f4 <USBD_static_malloc>
 8005d84:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d109      	bne.n	8005da0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	32b0      	adds	r2, #176	; 0xb0
 8005d96:	2100      	movs	r1, #0
 8005d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e0d4      	b.n	8005f4a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005da0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005da4:	2100      	movs	r1, #0
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f002 fd20 	bl	80087ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	32b0      	adds	r2, #176	; 0xb0
 8005db6:	68f9      	ldr	r1, [r7, #12]
 8005db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	32b0      	adds	r2, #176	; 0xb0
 8005dc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	7c1b      	ldrb	r3, [r3, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d138      	bne.n	8005e4a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005dd8:	4b5e      	ldr	r3, [pc, #376]	; (8005f54 <USBD_CDC_Init+0x1e4>)
 8005dda:	7819      	ldrb	r1, [r3, #0]
 8005ddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005de0:	2202      	movs	r2, #2
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f002 fb63 	bl	80084ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005de8:	4b5a      	ldr	r3, [pc, #360]	; (8005f54 <USBD_CDC_Init+0x1e4>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	f003 020f 	and.w	r2, r3, #15
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	3324      	adds	r3, #36	; 0x24
 8005dfe:	2201      	movs	r2, #1
 8005e00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e02:	4b55      	ldr	r3, [pc, #340]	; (8005f58 <USBD_CDC_Init+0x1e8>)
 8005e04:	7819      	ldrb	r1, [r3, #0]
 8005e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f002 fb4e 	bl	80084ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e12:	4b51      	ldr	r3, [pc, #324]	; (8005f58 <USBD_CDC_Init+0x1e8>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	f003 020f 	and.w	r2, r3, #15
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	440b      	add	r3, r1
 8005e26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e2e:	4b4b      	ldr	r3, [pc, #300]	; (8005f5c <USBD_CDC_Init+0x1ec>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	f003 020f 	and.w	r2, r3, #15
 8005e36:	6879      	ldr	r1, [r7, #4]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	440b      	add	r3, r1
 8005e42:	3326      	adds	r3, #38	; 0x26
 8005e44:	2210      	movs	r2, #16
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	e035      	b.n	8005eb6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e4a:	4b42      	ldr	r3, [pc, #264]	; (8005f54 <USBD_CDC_Init+0x1e4>)
 8005e4c:	7819      	ldrb	r1, [r3, #0]
 8005e4e:	2340      	movs	r3, #64	; 0x40
 8005e50:	2202      	movs	r2, #2
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f002 fb2b 	bl	80084ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e58:	4b3e      	ldr	r3, [pc, #248]	; (8005f54 <USBD_CDC_Init+0x1e4>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	f003 020f 	and.w	r2, r3, #15
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	440b      	add	r3, r1
 8005e6c:	3324      	adds	r3, #36	; 0x24
 8005e6e:	2201      	movs	r2, #1
 8005e70:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e72:	4b39      	ldr	r3, [pc, #228]	; (8005f58 <USBD_CDC_Init+0x1e8>)
 8005e74:	7819      	ldrb	r1, [r3, #0]
 8005e76:	2340      	movs	r3, #64	; 0x40
 8005e78:	2202      	movs	r2, #2
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f002 fb17 	bl	80084ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e80:	4b35      	ldr	r3, [pc, #212]	; (8005f58 <USBD_CDC_Init+0x1e8>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	f003 020f 	and.w	r2, r3, #15
 8005e88:	6879      	ldr	r1, [r7, #4]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	440b      	add	r3, r1
 8005e94:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e98:	2201      	movs	r2, #1
 8005e9a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005e9c:	4b2f      	ldr	r3, [pc, #188]	; (8005f5c <USBD_CDC_Init+0x1ec>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	f003 020f 	and.w	r2, r3, #15
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	3326      	adds	r3, #38	; 0x26
 8005eb2:	2210      	movs	r2, #16
 8005eb4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005eb6:	4b29      	ldr	r3, [pc, #164]	; (8005f5c <USBD_CDC_Init+0x1ec>)
 8005eb8:	7819      	ldrb	r1, [r3, #0]
 8005eba:	2308      	movs	r3, #8
 8005ebc:	2203      	movs	r2, #3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f002 faf5 	bl	80084ae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005ec4:	4b25      	ldr	r3, [pc, #148]	; (8005f5c <USBD_CDC_Init+0x1ec>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	f003 020f 	and.w	r2, r3, #15
 8005ecc:	6879      	ldr	r1, [r7, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	3324      	adds	r3, #36	; 0x24
 8005eda:	2201      	movs	r2, #1
 8005edc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	33b0      	adds	r3, #176	; 0xb0
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005f14:	2302      	movs	r3, #2
 8005f16:	e018      	b.n	8005f4a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	7c1b      	ldrb	r3, [r3, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10a      	bne.n	8005f36 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f20:	4b0d      	ldr	r3, [pc, #52]	; (8005f58 <USBD_CDC_Init+0x1e8>)
 8005f22:	7819      	ldrb	r1, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f002 fbac 	bl	800868c <USBD_LL_PrepareReceive>
 8005f34:	e008      	b.n	8005f48 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f36:	4b08      	ldr	r3, [pc, #32]	; (8005f58 <USBD_CDC_Init+0x1e8>)
 8005f38:	7819      	ldrb	r1, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f40:	2340      	movs	r3, #64	; 0x40
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f002 fba2 	bl	800868c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000097 	.word	0x20000097
 8005f58:	20000098 	.word	0x20000098
 8005f5c:	20000099 	.word	0x20000099

08005f60 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005f6c:	4b3a      	ldr	r3, [pc, #232]	; (8006058 <USBD_CDC_DeInit+0xf8>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	4619      	mov	r1, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f002 fac1 	bl	80084fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005f78:	4b37      	ldr	r3, [pc, #220]	; (8006058 <USBD_CDC_DeInit+0xf8>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	f003 020f 	and.w	r2, r3, #15
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	4613      	mov	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	3324      	adds	r3, #36	; 0x24
 8005f8e:	2200      	movs	r2, #0
 8005f90:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005f92:	4b32      	ldr	r3, [pc, #200]	; (800605c <USBD_CDC_DeInit+0xfc>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	4619      	mov	r1, r3
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f002 faae 	bl	80084fa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005f9e:	4b2f      	ldr	r3, [pc, #188]	; (800605c <USBD_CDC_DeInit+0xfc>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	f003 020f 	and.w	r2, r3, #15
 8005fa6:	6879      	ldr	r1, [r7, #4]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	440b      	add	r3, r1
 8005fb2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005fba:	4b29      	ldr	r3, [pc, #164]	; (8006060 <USBD_CDC_DeInit+0x100>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f002 fa9a 	bl	80084fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005fc6:	4b26      	ldr	r3, [pc, #152]	; (8006060 <USBD_CDC_DeInit+0x100>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	f003 020f 	and.w	r2, r3, #15
 8005fce:	6879      	ldr	r1, [r7, #4]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	440b      	add	r3, r1
 8005fda:	3324      	adds	r3, #36	; 0x24
 8005fdc:	2200      	movs	r2, #0
 8005fde:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005fe0:	4b1f      	ldr	r3, [pc, #124]	; (8006060 <USBD_CDC_DeInit+0x100>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	f003 020f 	and.w	r2, r3, #15
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	4613      	mov	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	440b      	add	r3, r1
 8005ff4:	3326      	adds	r3, #38	; 0x26
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	32b0      	adds	r2, #176	; 0xb0
 8006004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01f      	beq.n	800604c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	33b0      	adds	r3, #176	; 0xb0
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	32b0      	adds	r2, #176	; 0xb0
 800602a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602e:	4618      	mov	r0, r3
 8006030:	f002 fb6e 	bl	8008710 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	32b0      	adds	r2, #176	; 0xb0
 800603e:	2100      	movs	r1, #0
 8006040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	20000097 	.word	0x20000097
 800605c:	20000098 	.word	0x20000098
 8006060:	20000099 	.word	0x20000099

08006064 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	32b0      	adds	r2, #176	; 0xb0
 8006078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800607e:	2300      	movs	r3, #0
 8006080:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006090:	2303      	movs	r3, #3
 8006092:	e0bf      	b.n	8006214 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800609c:	2b00      	cmp	r3, #0
 800609e:	d050      	beq.n	8006142 <USBD_CDC_Setup+0xde>
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	f040 80af 	bne.w	8006204 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	88db      	ldrh	r3, [r3, #6]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d03a      	beq.n	8006124 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	b25b      	sxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	da1b      	bge.n	80060f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	33b0      	adds	r3, #176	; 0xb0
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80060ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	88d2      	ldrh	r2, [r2, #6]
 80060d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	88db      	ldrh	r3, [r3, #6]
 80060da:	2b07      	cmp	r3, #7
 80060dc:	bf28      	it	cs
 80060de:	2307      	movcs	r3, #7
 80060e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	89fa      	ldrh	r2, [r7, #14]
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f001 fd89 	bl	8007c00 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80060ee:	e090      	b.n	8006212 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	785a      	ldrb	r2, [r3, #1]
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	88db      	ldrh	r3, [r3, #6]
 80060fe:	2b3f      	cmp	r3, #63	; 0x3f
 8006100:	d803      	bhi.n	800610a <USBD_CDC_Setup+0xa6>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	88db      	ldrh	r3, [r3, #6]
 8006106:	b2da      	uxtb	r2, r3
 8006108:	e000      	b.n	800610c <USBD_CDC_Setup+0xa8>
 800610a:	2240      	movs	r2, #64	; 0x40
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006112:	6939      	ldr	r1, [r7, #16]
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800611a:	461a      	mov	r2, r3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f001 fd9b 	bl	8007c58 <USBD_CtlPrepareRx>
      break;
 8006122:	e076      	b.n	8006212 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	33b0      	adds	r3, #176	; 0xb0
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	7850      	ldrb	r0, [r2, #1]
 800613a:	2200      	movs	r2, #0
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	4798      	blx	r3
      break;
 8006140:	e067      	b.n	8006212 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	785b      	ldrb	r3, [r3, #1]
 8006146:	2b0b      	cmp	r3, #11
 8006148:	d851      	bhi.n	80061ee <USBD_CDC_Setup+0x18a>
 800614a:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <USBD_CDC_Setup+0xec>)
 800614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006150:	08006181 	.word	0x08006181
 8006154:	080061fd 	.word	0x080061fd
 8006158:	080061ef 	.word	0x080061ef
 800615c:	080061ef 	.word	0x080061ef
 8006160:	080061ef 	.word	0x080061ef
 8006164:	080061ef 	.word	0x080061ef
 8006168:	080061ef 	.word	0x080061ef
 800616c:	080061ef 	.word	0x080061ef
 8006170:	080061ef 	.word	0x080061ef
 8006174:	080061ef 	.word	0x080061ef
 8006178:	080061ab 	.word	0x080061ab
 800617c:	080061d5 	.word	0x080061d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b03      	cmp	r3, #3
 800618a:	d107      	bne.n	800619c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800618c:	f107 030a 	add.w	r3, r7, #10
 8006190:	2202      	movs	r2, #2
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f001 fd33 	bl	8007c00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800619a:	e032      	b.n	8006202 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f001 fcbd 	bl	8007b1e <USBD_CtlError>
            ret = USBD_FAIL;
 80061a4:	2303      	movs	r3, #3
 80061a6:	75fb      	strb	r3, [r7, #23]
          break;
 80061a8:	e02b      	b.n	8006202 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d107      	bne.n	80061c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80061b6:	f107 030d 	add.w	r3, r7, #13
 80061ba:	2201      	movs	r2, #1
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f001 fd1e 	bl	8007c00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061c4:	e01d      	b.n	8006202 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 fca8 	bl	8007b1e <USBD_CtlError>
            ret = USBD_FAIL;
 80061ce:	2303      	movs	r3, #3
 80061d0:	75fb      	strb	r3, [r7, #23]
          break;
 80061d2:	e016      	b.n	8006202 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d00f      	beq.n	8006200 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80061e0:	6839      	ldr	r1, [r7, #0]
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f001 fc9b 	bl	8007b1e <USBD_CtlError>
            ret = USBD_FAIL;
 80061e8:	2303      	movs	r3, #3
 80061ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80061ec:	e008      	b.n	8006200 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f001 fc94 	bl	8007b1e <USBD_CtlError>
          ret = USBD_FAIL;
 80061f6:	2303      	movs	r3, #3
 80061f8:	75fb      	strb	r3, [r7, #23]
          break;
 80061fa:	e002      	b.n	8006202 <USBD_CDC_Setup+0x19e>
          break;
 80061fc:	bf00      	nop
 80061fe:	e008      	b.n	8006212 <USBD_CDC_Setup+0x1ae>
          break;
 8006200:	bf00      	nop
      }
      break;
 8006202:	e006      	b.n	8006212 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f001 fc89 	bl	8007b1e <USBD_CtlError>
      ret = USBD_FAIL;
 800620c:	2303      	movs	r3, #3
 800620e:	75fb      	strb	r3, [r7, #23]
      break;
 8006210:	bf00      	nop
  }

  return (uint8_t)ret;
 8006212:	7dfb      	ldrb	r3, [r7, #23]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800622e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	32b0      	adds	r2, #176	; 0xb0
 800623a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006242:	2303      	movs	r3, #3
 8006244:	e065      	b.n	8006312 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	32b0      	adds	r2, #176	; 0xb0
 8006250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006254:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006256:	78fb      	ldrb	r3, [r7, #3]
 8006258:	f003 020f 	and.w	r2, r3, #15
 800625c:	6879      	ldr	r1, [r7, #4]
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	440b      	add	r3, r1
 8006268:	3318      	adds	r3, #24
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d02f      	beq.n	80062d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	f003 020f 	and.w	r2, r3, #15
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	440b      	add	r3, r1
 8006282:	3318      	adds	r3, #24
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	f003 010f 	and.w	r1, r3, #15
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	460b      	mov	r3, r1
 8006290:	00db      	lsls	r3, r3, #3
 8006292:	440b      	add	r3, r1
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4403      	add	r3, r0
 8006298:	3348      	adds	r3, #72	; 0x48
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	fbb2 f1f3 	udiv	r1, r2, r3
 80062a0:	fb01 f303 	mul.w	r3, r1, r3
 80062a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d112      	bne.n	80062d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80062aa:	78fb      	ldrb	r3, [r7, #3]
 80062ac:	f003 020f 	and.w	r2, r3, #15
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	440b      	add	r3, r1
 80062bc:	3318      	adds	r3, #24
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80062c2:	78f9      	ldrb	r1, [r7, #3]
 80062c4:	2300      	movs	r3, #0
 80062c6:	2200      	movs	r2, #0
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f002 f9be 	bl	800864a <USBD_LL_Transmit>
 80062ce:	e01f      	b.n	8006310 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	33b0      	adds	r3, #176	; 0xb0
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d010      	beq.n	8006310 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	33b0      	adds	r3, #176	; 0xb0
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800630c:	78fa      	ldrb	r2, [r7, #3]
 800630e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	460b      	mov	r3, r1
 8006324:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	32b0      	adds	r2, #176	; 0xb0
 8006330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006334:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	32b0      	adds	r2, #176	; 0xb0
 8006340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006348:	2303      	movs	r3, #3
 800634a:	e01a      	b.n	8006382 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800634c:	78fb      	ldrb	r3, [r7, #3]
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f002 f9bc 	bl	80086ce <USBD_LL_GetRxDataSize>
 8006356:	4602      	mov	r2, r0
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	33b0      	adds	r3, #176	; 0xb0
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800637c:	4611      	mov	r1, r2
 800637e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	32b0      	adds	r2, #176	; 0xb0
 800639c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e025      	b.n	80063f8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	33b0      	adds	r3, #176	; 0xb0
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01a      	beq.n	80063f6 <USBD_CDC_EP0_RxReady+0x6c>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80063c6:	2bff      	cmp	r3, #255	; 0xff
 80063c8:	d015      	beq.n	80063f6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	33b0      	adds	r3, #176	; 0xb0
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80063e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80063ea:	b292      	uxth	r2, r2
 80063ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	22ff      	movs	r2, #255	; 0xff
 80063f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006408:	2182      	movs	r1, #130	; 0x82
 800640a:	4818      	ldr	r0, [pc, #96]	; (800646c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800640c:	f000 fd4f 	bl	8006eae <USBD_GetEpDesc>
 8006410:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006412:	2101      	movs	r1, #1
 8006414:	4815      	ldr	r0, [pc, #84]	; (800646c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006416:	f000 fd4a 	bl	8006eae <USBD_GetEpDesc>
 800641a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800641c:	2181      	movs	r1, #129	; 0x81
 800641e:	4813      	ldr	r0, [pc, #76]	; (800646c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006420:	f000 fd45 	bl	8006eae <USBD_GetEpDesc>
 8006424:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	2210      	movs	r2, #16
 8006430:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d006      	beq.n	8006446 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	2200      	movs	r2, #0
 800643c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006440:	711a      	strb	r2, [r3, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d006      	beq.n	800645a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006454:	711a      	strb	r2, [r3, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2243      	movs	r2, #67	; 0x43
 800645e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006460:	4b02      	ldr	r3, [pc, #8]	; (800646c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20000054 	.word	0x20000054

08006470 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006478:	2182      	movs	r1, #130	; 0x82
 800647a:	4818      	ldr	r0, [pc, #96]	; (80064dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800647c:	f000 fd17 	bl	8006eae <USBD_GetEpDesc>
 8006480:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006482:	2101      	movs	r1, #1
 8006484:	4815      	ldr	r0, [pc, #84]	; (80064dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006486:	f000 fd12 	bl	8006eae <USBD_GetEpDesc>
 800648a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800648c:	2181      	movs	r1, #129	; 0x81
 800648e:	4813      	ldr	r0, [pc, #76]	; (80064dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006490:	f000 fd0d 	bl	8006eae <USBD_GetEpDesc>
 8006494:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d002      	beq.n	80064a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2210      	movs	r2, #16
 80064a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d006      	beq.n	80064b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	2200      	movs	r2, #0
 80064ac:	711a      	strb	r2, [r3, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f042 0202 	orr.w	r2, r2, #2
 80064b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d006      	beq.n	80064ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	711a      	strb	r2, [r3, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f042 0202 	orr.w	r2, r2, #2
 80064c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2243      	movs	r2, #67	; 0x43
 80064ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064d0:	4b02      	ldr	r3, [pc, #8]	; (80064dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3718      	adds	r7, #24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	20000054 	.word	0x20000054

080064e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064e8:	2182      	movs	r1, #130	; 0x82
 80064ea:	4818      	ldr	r0, [pc, #96]	; (800654c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064ec:	f000 fcdf 	bl	8006eae <USBD_GetEpDesc>
 80064f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064f2:	2101      	movs	r1, #1
 80064f4:	4815      	ldr	r0, [pc, #84]	; (800654c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064f6:	f000 fcda 	bl	8006eae <USBD_GetEpDesc>
 80064fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064fc:	2181      	movs	r1, #129	; 0x81
 80064fe:	4813      	ldr	r0, [pc, #76]	; (800654c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006500:	f000 fcd5 	bl	8006eae <USBD_GetEpDesc>
 8006504:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	2210      	movs	r2, #16
 8006510:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d006      	beq.n	8006526 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	2200      	movs	r2, #0
 800651c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006520:	711a      	strb	r2, [r3, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d006      	beq.n	800653a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006534:	711a      	strb	r2, [r3, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2243      	movs	r2, #67	; 0x43
 800653e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006540:	4b02      	ldr	r3, [pc, #8]	; (800654c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20000054 	.word	0x20000054

08006550 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	220a      	movs	r2, #10
 800655c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800655e:	4b03      	ldr	r3, [pc, #12]	; (800656c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	20000010 	.word	0x20000010

08006570 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006580:	2303      	movs	r3, #3
 8006582:	e009      	b.n	8006598 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	33b0      	adds	r3, #176	; 0xb0
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	32b0      	adds	r2, #176	; 0xb0
 80065ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065be:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e008      	b.n	80065dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	32b0      	adds	r2, #176	; 0xb0
 80065fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006600:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006608:	2303      	movs	r3, #3
 800660a:	e004      	b.n	8006616 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
	...

08006624 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	32b0      	adds	r2, #176	; 0xb0
 8006636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800663a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800663c:	2301      	movs	r3, #1
 800663e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	32b0      	adds	r2, #176	; 0xb0
 800664a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d101      	bne.n	8006656 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006652:	2303      	movs	r3, #3
 8006654:	e025      	b.n	80066a2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800665c:	2b00      	cmp	r3, #0
 800665e:	d11f      	bne.n	80066a0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2201      	movs	r2, #1
 8006664:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006668:	4b10      	ldr	r3, [pc, #64]	; (80066ac <USBD_CDC_TransmitPacket+0x88>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	f003 020f 	and.w	r2, r3, #15
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	4613      	mov	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4403      	add	r3, r0
 8006682:	3318      	adds	r3, #24
 8006684:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006686:	4b09      	ldr	r3, [pc, #36]	; (80066ac <USBD_CDC_TransmitPacket+0x88>)
 8006688:	7819      	ldrb	r1, [r3, #0]
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f001 ffd7 	bl	800864a <USBD_LL_Transmit>

    ret = USBD_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	20000097 	.word	0x20000097

080066b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	32b0      	adds	r2, #176	; 0xb0
 80066c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	32b0      	adds	r2, #176	; 0xb0
 80066d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80066da:	2303      	movs	r3, #3
 80066dc:	e018      	b.n	8006710 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	7c1b      	ldrb	r3, [r3, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066e6:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <USBD_CDC_ReceivePacket+0x68>)
 80066e8:	7819      	ldrb	r1, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f001 ffc9 	bl	800868c <USBD_LL_PrepareReceive>
 80066fa:	e008      	b.n	800670e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <USBD_CDC_ReceivePacket+0x68>)
 80066fe:	7819      	ldrb	r1, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006706:	2340      	movs	r3, #64	; 0x40
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f001 ffbf 	bl	800868c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	20000098 	.word	0x20000098

0800671c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	4613      	mov	r3, r2
 8006728:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006730:	2303      	movs	r3, #3
 8006732:	e01f      	b.n	8006774 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	79fa      	ldrb	r2, [r7, #7]
 8006766:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f001 fe39 	bl	80083e0 <USBD_LL_Init>
 800676e:	4603      	mov	r3, r0
 8006770:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006772:	7dfb      	ldrb	r3, [r7, #23]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006790:	2303      	movs	r3, #3
 8006792:	e025      	b.n	80067e0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	32ae      	adds	r2, #174	; 0xae
 80067a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00f      	beq.n	80067d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	32ae      	adds	r2, #174	; 0xae
 80067ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c0:	f107 020e 	add.w	r2, r7, #14
 80067c4:	4610      	mov	r0, r2
 80067c6:	4798      	blx	r3
 80067c8:	4602      	mov	r2, r0
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f001 fe41 	bl	8008478 <USBD_LL_Start>
 80067f6:	4603      	mov	r3, r0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3708      	adds	r7, #8
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006808:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800680a:	4618      	mov	r0, r3
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	460b      	mov	r3, r1
 8006820:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006822:	2300      	movs	r3, #0
 8006824:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800682c:	2b00      	cmp	r3, #0
 800682e:	d009      	beq.n	8006844 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	78fa      	ldrb	r2, [r7, #3]
 800683a:	4611      	mov	r1, r2
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	4798      	blx	r3
 8006840:	4603      	mov	r3, r0
 8006842:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	460b      	mov	r3, r1
 8006858:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	78fa      	ldrb	r2, [r7, #3]
 8006868:	4611      	mov	r1, r2
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	4798      	blx	r3
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006874:	2303      	movs	r3, #3
 8006876:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006878:	7bfb      	ldrb	r3, [r7, #15]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	4618      	mov	r0, r3
 8006896:	f001 f908 	bl	8007aaa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80068a8:	461a      	mov	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068b6:	f003 031f 	and.w	r3, r3, #31
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d01a      	beq.n	80068f4 <USBD_LL_SetupStage+0x72>
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d822      	bhi.n	8006908 <USBD_LL_SetupStage+0x86>
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d002      	beq.n	80068cc <USBD_LL_SetupStage+0x4a>
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d00a      	beq.n	80068e0 <USBD_LL_SetupStage+0x5e>
 80068ca:	e01d      	b.n	8006908 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 fb5f 	bl	8006f98 <USBD_StdDevReq>
 80068da:	4603      	mov	r3, r0
 80068dc:	73fb      	strb	r3, [r7, #15]
      break;
 80068de:	e020      	b.n	8006922 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fbc7 	bl	800707c <USBD_StdItfReq>
 80068ee:	4603      	mov	r3, r0
 80068f0:	73fb      	strb	r3, [r7, #15]
      break;
 80068f2:	e016      	b.n	8006922 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fc29 	bl	8007154 <USBD_StdEPReq>
 8006902:	4603      	mov	r3, r0
 8006904:	73fb      	strb	r3, [r7, #15]
      break;
 8006906:	e00c      	b.n	8006922 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800690e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006912:	b2db      	uxtb	r3, r3
 8006914:	4619      	mov	r1, r3
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f001 fe0e 	bl	8008538 <USBD_LL_StallEP>
 800691c:	4603      	mov	r3, r0
 800691e:	73fb      	strb	r3, [r7, #15]
      break;
 8006920:	bf00      	nop
  }

  return ret;
 8006922:	7bfb      	ldrb	r3, [r7, #15]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	460b      	mov	r3, r1
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800693e:	7afb      	ldrb	r3, [r7, #11]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d16e      	bne.n	8006a22 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800694a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006952:	2b03      	cmp	r3, #3
 8006954:	f040 8098 	bne.w	8006a88 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	429a      	cmp	r2, r3
 8006962:	d913      	bls.n	800698c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	1ad2      	subs	r2, r2, r3
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	4293      	cmp	r3, r2
 800697c:	bf28      	it	cs
 800697e:	4613      	movcs	r3, r2
 8006980:	461a      	mov	r2, r3
 8006982:	6879      	ldr	r1, [r7, #4]
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f001 f984 	bl	8007c92 <USBD_CtlContinueRx>
 800698a:	e07d      	b.n	8006a88 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006992:	f003 031f 	and.w	r3, r3, #31
 8006996:	2b02      	cmp	r3, #2
 8006998:	d014      	beq.n	80069c4 <USBD_LL_DataOutStage+0x98>
 800699a:	2b02      	cmp	r3, #2
 800699c:	d81d      	bhi.n	80069da <USBD_LL_DataOutStage+0xae>
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d002      	beq.n	80069a8 <USBD_LL_DataOutStage+0x7c>
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d003      	beq.n	80069ae <USBD_LL_DataOutStage+0x82>
 80069a6:	e018      	b.n	80069da <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	75bb      	strb	r3, [r7, #22]
            break;
 80069ac:	e018      	b.n	80069e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	4619      	mov	r1, r3
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fa5e 	bl	8006e7a <USBD_CoreFindIF>
 80069be:	4603      	mov	r3, r0
 80069c0:	75bb      	strb	r3, [r7, #22]
            break;
 80069c2:	e00d      	b.n	80069e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	4619      	mov	r1, r3
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 fa60 	bl	8006e94 <USBD_CoreFindEP>
 80069d4:	4603      	mov	r3, r0
 80069d6:	75bb      	strb	r3, [r7, #22]
            break;
 80069d8:	e002      	b.n	80069e0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	75bb      	strb	r3, [r7, #22]
            break;
 80069de:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80069e0:	7dbb      	ldrb	r3, [r7, #22]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d119      	bne.n	8006a1a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d113      	bne.n	8006a1a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80069f2:	7dba      	ldrb	r2, [r7, #22]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	32ae      	adds	r2, #174	; 0xae
 80069f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00b      	beq.n	8006a1a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a02:	7dba      	ldrb	r2, [r7, #22]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a0a:	7dba      	ldrb	r2, [r7, #22]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	32ae      	adds	r2, #174	; 0xae
 8006a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f001 f94a 	bl	8007cb4 <USBD_CtlSendStatus>
 8006a20:	e032      	b.n	8006a88 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a22:	7afb      	ldrb	r3, [r7, #11]
 8006a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 fa31 	bl	8006e94 <USBD_CoreFindEP>
 8006a32:	4603      	mov	r3, r0
 8006a34:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a36:	7dbb      	ldrb	r3, [r7, #22]
 8006a38:	2bff      	cmp	r3, #255	; 0xff
 8006a3a:	d025      	beq.n	8006a88 <USBD_LL_DataOutStage+0x15c>
 8006a3c:	7dbb      	ldrb	r3, [r7, #22]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d122      	bne.n	8006a88 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d117      	bne.n	8006a7e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a4e:	7dba      	ldrb	r2, [r7, #22]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	32ae      	adds	r2, #174	; 0xae
 8006a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00f      	beq.n	8006a7e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006a5e:	7dba      	ldrb	r2, [r7, #22]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a66:	7dba      	ldrb	r2, [r7, #22]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	32ae      	adds	r2, #174	; 0xae
 8006a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	7afa      	ldrb	r2, [r7, #11]
 8006a74:	4611      	mov	r1, r2
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	4798      	blx	r3
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006a7e:	7dfb      	ldrb	r3, [r7, #23]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006a84:	7dfb      	ldrb	r3, [r7, #23]
 8006a86:	e000      	b.n	8006a8a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b086      	sub	sp, #24
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	60f8      	str	r0, [r7, #12]
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	607a      	str	r2, [r7, #4]
 8006a9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006aa0:	7afb      	ldrb	r3, [r7, #11]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d16f      	bne.n	8006b86 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3314      	adds	r3, #20
 8006aaa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d15a      	bne.n	8006b6c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	689a      	ldr	r2, [r3, #8]
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d914      	bls.n	8006aec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	1ad2      	subs	r2, r2, r3
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f001 f8ac 	bl	8007c36 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ade:	2300      	movs	r3, #0
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f001 fdd1 	bl	800868c <USBD_LL_PrepareReceive>
 8006aea:	e03f      	b.n	8006b6c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d11c      	bne.n	8006b32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d316      	bcc.n	8006b32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d20f      	bcs.n	8006b32 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b12:	2200      	movs	r2, #0
 8006b14:	2100      	movs	r1, #0
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f001 f88d 	bl	8007c36 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b24:	2300      	movs	r3, #0
 8006b26:	2200      	movs	r2, #0
 8006b28:	2100      	movs	r1, #0
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f001 fdae 	bl	800868c <USBD_LL_PrepareReceive>
 8006b30:	e01c      	b.n	8006b6c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d10f      	bne.n	8006b5e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d009      	beq.n	8006b5e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b5e:	2180      	movs	r1, #128	; 0x80
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f001 fce9 	bl	8008538 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	f001 f8b7 	bl	8007cda <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d03a      	beq.n	8006bec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f7ff fe42 	bl	8006800 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b84:	e032      	b.n	8006bec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006b86:	7afb      	ldrb	r3, [r7, #11]
 8006b88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	4619      	mov	r1, r3
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 f97f 	bl	8006e94 <USBD_CoreFindEP>
 8006b96:	4603      	mov	r3, r0
 8006b98:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
 8006b9c:	2bff      	cmp	r3, #255	; 0xff
 8006b9e:	d025      	beq.n	8006bec <USBD_LL_DataInStage+0x15a>
 8006ba0:	7dfb      	ldrb	r3, [r7, #23]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d122      	bne.n	8006bec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	d11c      	bne.n	8006bec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006bb2:	7dfa      	ldrb	r2, [r7, #23]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	32ae      	adds	r2, #174	; 0xae
 8006bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d014      	beq.n	8006bec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006bc2:	7dfa      	ldrb	r2, [r7, #23]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006bca:	7dfa      	ldrb	r2, [r7, #23]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	32ae      	adds	r2, #174	; 0xae
 8006bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	7afa      	ldrb	r2, [r7, #11]
 8006bd8:	4611      	mov	r1, r2
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	4798      	blx	r3
 8006bde:	4603      	mov	r3, r0
 8006be0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006be2:	7dbb      	ldrb	r3, [r7, #22]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006be8:	7dbb      	ldrb	r3, [r7, #22]
 8006bea:	e000      	b.n	8006bee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3718      	adds	r7, #24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b084      	sub	sp, #16
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2201      	movs	r2, #1
 8006c06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d014      	beq.n	8006c5c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00e      	beq.n	8006c5c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	6852      	ldr	r2, [r2, #4]
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	4798      	blx	r3
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c5c:	2340      	movs	r3, #64	; 0x40
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2100      	movs	r1, #0
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 fc23 	bl	80084ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2240      	movs	r2, #64	; 0x40
 8006c74:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c78:	2340      	movs	r3, #64	; 0x40
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2180      	movs	r1, #128	; 0x80
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fc15 	bl	80084ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2240      	movs	r2, #64	; 0x40
 8006c8e:	621a      	str	r2, [r3, #32]

  return ret;
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	78fa      	ldrb	r2, [r7, #3]
 8006caa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b083      	sub	sp, #12
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2204      	movs	r2, #4
 8006cd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b04      	cmp	r3, #4
 8006cf8:	d106      	bne.n	8006d08 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b082      	sub	sp, #8
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d110      	bne.n	8006d4c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00b      	beq.n	8006d4c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d3a:	69db      	ldr	r3, [r3, #28]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d005      	beq.n	8006d4c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b082      	sub	sp, #8
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	32ae      	adds	r2, #174	; 0xae
 8006d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e01c      	b.n	8006db2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d115      	bne.n	8006db0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	32ae      	adds	r2, #174	; 0xae
 8006d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00b      	beq.n	8006db0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	32ae      	adds	r2, #174	; 0xae
 8006da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da6:	6a1b      	ldr	r3, [r3, #32]
 8006da8:	78fa      	ldrb	r2, [r7, #3]
 8006daa:	4611      	mov	r1, r2
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b082      	sub	sp, #8
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	32ae      	adds	r2, #174	; 0xae
 8006dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e01c      	b.n	8006e16 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d115      	bne.n	8006e14 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	32ae      	adds	r2, #174	; 0xae
 8006df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00b      	beq.n	8006e14 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	32ae      	adds	r2, #174	; 0xae
 8006e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	78fa      	ldrb	r2, [r7, #3]
 8006e0e:	4611      	mov	r1, r2
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00e      	beq.n	8006e70 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6852      	ldr	r2, [r2, #4]
 8006e5e:	b2d2      	uxtb	r2, r2
 8006e60:	4611      	mov	r1, r2
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	4798      	blx	r3
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	460b      	mov	r3, r1
 8006e84:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e86:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ea0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b086      	sub	sp, #24
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	885b      	ldrh	r3, [r3, #2]
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d920      	bls.n	8006f18 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006ede:	e013      	b.n	8006f08 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006ee0:	f107 030a 	add.w	r3, r7, #10
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6978      	ldr	r0, [r7, #20]
 8006ee8:	f000 f81b 	bl	8006f22 <USBD_GetNextDesc>
 8006eec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	2b05      	cmp	r3, #5
 8006ef4:	d108      	bne.n	8006f08 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	789b      	ldrb	r3, [r3, #2]
 8006efe:	78fa      	ldrb	r2, [r7, #3]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d008      	beq.n	8006f16 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f04:	2300      	movs	r3, #0
 8006f06:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	885b      	ldrh	r3, [r3, #2]
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	897b      	ldrh	r3, [r7, #10]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d8e5      	bhi.n	8006ee0 <USBD_GetEpDesc+0x32>
 8006f14:	e000      	b.n	8006f18 <USBD_GetEpDesc+0x6a>
          break;
 8006f16:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f18:	693b      	ldr	r3, [r7, #16]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b085      	sub	sp, #20
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	881a      	ldrh	r2, [r3, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	4413      	add	r3, r2
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	461a      	mov	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	3301      	adds	r3, #1
 8006f72:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f7a:	8a3b      	ldrh	r3, [r7, #16]
 8006f7c:	021b      	lsls	r3, r3, #8
 8006f7e:	b21a      	sxth	r2, r3
 8006f80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	b21b      	sxth	r3, r3
 8006f88:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f8a:	89fb      	ldrh	r3, [r7, #14]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	371c      	adds	r7, #28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fae:	2b40      	cmp	r3, #64	; 0x40
 8006fb0:	d005      	beq.n	8006fbe <USBD_StdDevReq+0x26>
 8006fb2:	2b40      	cmp	r3, #64	; 0x40
 8006fb4:	d857      	bhi.n	8007066 <USBD_StdDevReq+0xce>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00f      	beq.n	8006fda <USBD_StdDevReq+0x42>
 8006fba:	2b20      	cmp	r3, #32
 8006fbc:	d153      	bne.n	8007066 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	32ae      	adds	r2, #174	; 0xae
 8006fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	6839      	ldr	r1, [r7, #0]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	4798      	blx	r3
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fd8:	e04a      	b.n	8007070 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	785b      	ldrb	r3, [r3, #1]
 8006fde:	2b09      	cmp	r3, #9
 8006fe0:	d83b      	bhi.n	800705a <USBD_StdDevReq+0xc2>
 8006fe2:	a201      	add	r2, pc, #4	; (adr r2, 8006fe8 <USBD_StdDevReq+0x50>)
 8006fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe8:	0800703d 	.word	0x0800703d
 8006fec:	08007051 	.word	0x08007051
 8006ff0:	0800705b 	.word	0x0800705b
 8006ff4:	08007047 	.word	0x08007047
 8006ff8:	0800705b 	.word	0x0800705b
 8006ffc:	0800701b 	.word	0x0800701b
 8007000:	08007011 	.word	0x08007011
 8007004:	0800705b 	.word	0x0800705b
 8007008:	08007033 	.word	0x08007033
 800700c:	08007025 	.word	0x08007025
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa3c 	bl	8007490 <USBD_GetDescriptor>
          break;
 8007018:	e024      	b.n	8007064 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fba1 	bl	8007764 <USBD_SetAddress>
          break;
 8007022:	e01f      	b.n	8007064 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fbe0 	bl	80077ec <USBD_SetConfig>
 800702c:	4603      	mov	r3, r0
 800702e:	73fb      	strb	r3, [r7, #15]
          break;
 8007030:	e018      	b.n	8007064 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fc83 	bl	8007940 <USBD_GetConfig>
          break;
 800703a:	e013      	b.n	8007064 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fcb4 	bl	80079ac <USBD_GetStatus>
          break;
 8007044:	e00e      	b.n	8007064 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fce3 	bl	8007a14 <USBD_SetFeature>
          break;
 800704e:	e009      	b.n	8007064 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fd07 	bl	8007a66 <USBD_ClrFeature>
          break;
 8007058:	e004      	b.n	8007064 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fd5e 	bl	8007b1e <USBD_CtlError>
          break;
 8007062:	bf00      	nop
      }
      break;
 8007064:	e004      	b.n	8007070 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fd58 	bl	8007b1e <USBD_CtlError>
      break;
 800706e:	bf00      	nop
  }

  return ret;
 8007070:	7bfb      	ldrb	r3, [r7, #15]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop

0800707c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007092:	2b40      	cmp	r3, #64	; 0x40
 8007094:	d005      	beq.n	80070a2 <USBD_StdItfReq+0x26>
 8007096:	2b40      	cmp	r3, #64	; 0x40
 8007098:	d852      	bhi.n	8007140 <USBD_StdItfReq+0xc4>
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <USBD_StdItfReq+0x26>
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d14e      	bne.n	8007140 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	3b01      	subs	r3, #1
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d840      	bhi.n	8007132 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	889b      	ldrh	r3, [r3, #4]
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d836      	bhi.n	8007128 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	889b      	ldrh	r3, [r3, #4]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7ff fed9 	bl	8006e7a <USBD_CoreFindIF>
 80070c8:	4603      	mov	r3, r0
 80070ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	2bff      	cmp	r3, #255	; 0xff
 80070d0:	d01d      	beq.n	800710e <USBD_StdItfReq+0x92>
 80070d2:	7bbb      	ldrb	r3, [r7, #14]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d11a      	bne.n	800710e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80070d8:	7bba      	ldrb	r2, [r7, #14]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	32ae      	adds	r2, #174	; 0xae
 80070de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00f      	beq.n	8007108 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80070e8:	7bba      	ldrb	r2, [r7, #14]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80070f0:	7bba      	ldrb	r2, [r7, #14]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	32ae      	adds	r2, #174	; 0xae
 80070f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	4798      	blx	r3
 8007102:	4603      	mov	r3, r0
 8007104:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007106:	e004      	b.n	8007112 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007108:	2303      	movs	r3, #3
 800710a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800710c:	e001      	b.n	8007112 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800710e:	2303      	movs	r3, #3
 8007110:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	88db      	ldrh	r3, [r3, #6]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d110      	bne.n	800713c <USBD_StdItfReq+0xc0>
 800711a:	7bfb      	ldrb	r3, [r7, #15]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10d      	bne.n	800713c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fdc7 	bl	8007cb4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007126:	e009      	b.n	800713c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 fcf7 	bl	8007b1e <USBD_CtlError>
          break;
 8007130:	e004      	b.n	800713c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fcf2 	bl	8007b1e <USBD_CtlError>
          break;
 800713a:	e000      	b.n	800713e <USBD_StdItfReq+0xc2>
          break;
 800713c:	bf00      	nop
      }
      break;
 800713e:	e004      	b.n	800714a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fceb 	bl	8007b1e <USBD_CtlError>
      break;
 8007148:	bf00      	nop
  }

  return ret;
 800714a:	7bfb      	ldrb	r3, [r7, #15]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	889b      	ldrh	r3, [r3, #4]
 8007166:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007170:	2b40      	cmp	r3, #64	; 0x40
 8007172:	d007      	beq.n	8007184 <USBD_StdEPReq+0x30>
 8007174:	2b40      	cmp	r3, #64	; 0x40
 8007176:	f200 817f 	bhi.w	8007478 <USBD_StdEPReq+0x324>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d02a      	beq.n	80071d4 <USBD_StdEPReq+0x80>
 800717e:	2b20      	cmp	r3, #32
 8007180:	f040 817a 	bne.w	8007478 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7ff fe83 	bl	8006e94 <USBD_CoreFindEP>
 800718e:	4603      	mov	r3, r0
 8007190:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007192:	7b7b      	ldrb	r3, [r7, #13]
 8007194:	2bff      	cmp	r3, #255	; 0xff
 8007196:	f000 8174 	beq.w	8007482 <USBD_StdEPReq+0x32e>
 800719a:	7b7b      	ldrb	r3, [r7, #13]
 800719c:	2b00      	cmp	r3, #0
 800719e:	f040 8170 	bne.w	8007482 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80071a2:	7b7a      	ldrb	r2, [r7, #13]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80071aa:	7b7a      	ldrb	r2, [r7, #13]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	32ae      	adds	r2, #174	; 0xae
 80071b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	f000 8163 	beq.w	8007482 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80071bc:	7b7a      	ldrb	r2, [r7, #13]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	32ae      	adds	r2, #174	; 0xae
 80071c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	4798      	blx	r3
 80071ce:	4603      	mov	r3, r0
 80071d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071d2:	e156      	b.n	8007482 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	785b      	ldrb	r3, [r3, #1]
 80071d8:	2b03      	cmp	r3, #3
 80071da:	d008      	beq.n	80071ee <USBD_StdEPReq+0x9a>
 80071dc:	2b03      	cmp	r3, #3
 80071de:	f300 8145 	bgt.w	800746c <USBD_StdEPReq+0x318>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 809b 	beq.w	800731e <USBD_StdEPReq+0x1ca>
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d03c      	beq.n	8007266 <USBD_StdEPReq+0x112>
 80071ec:	e13e      	b.n	800746c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d002      	beq.n	8007200 <USBD_StdEPReq+0xac>
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d016      	beq.n	800722c <USBD_StdEPReq+0xd8>
 80071fe:	e02c      	b.n	800725a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007200:	7bbb      	ldrb	r3, [r7, #14]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00d      	beq.n	8007222 <USBD_StdEPReq+0xce>
 8007206:	7bbb      	ldrb	r3, [r7, #14]
 8007208:	2b80      	cmp	r3, #128	; 0x80
 800720a:	d00a      	beq.n	8007222 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800720c:	7bbb      	ldrb	r3, [r7, #14]
 800720e:	4619      	mov	r1, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f001 f991 	bl	8008538 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007216:	2180      	movs	r1, #128	; 0x80
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f001 f98d 	bl	8008538 <USBD_LL_StallEP>
 800721e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007220:	e020      	b.n	8007264 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fc7a 	bl	8007b1e <USBD_CtlError>
              break;
 800722a:	e01b      	b.n	8007264 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	885b      	ldrh	r3, [r3, #2]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10e      	bne.n	8007252 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00b      	beq.n	8007252 <USBD_StdEPReq+0xfe>
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	2b80      	cmp	r3, #128	; 0x80
 800723e:	d008      	beq.n	8007252 <USBD_StdEPReq+0xfe>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	88db      	ldrh	r3, [r3, #6]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d104      	bne.n	8007252 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f001 f973 	bl	8008538 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fd2e 	bl	8007cb4 <USBD_CtlSendStatus>

              break;
 8007258:	e004      	b.n	8007264 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fc5e 	bl	8007b1e <USBD_CtlError>
              break;
 8007262:	bf00      	nop
          }
          break;
 8007264:	e107      	b.n	8007476 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d002      	beq.n	8007278 <USBD_StdEPReq+0x124>
 8007272:	2b03      	cmp	r3, #3
 8007274:	d016      	beq.n	80072a4 <USBD_StdEPReq+0x150>
 8007276:	e04b      	b.n	8007310 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00d      	beq.n	800729a <USBD_StdEPReq+0x146>
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	2b80      	cmp	r3, #128	; 0x80
 8007282:	d00a      	beq.n	800729a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007284:	7bbb      	ldrb	r3, [r7, #14]
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 f955 	bl	8008538 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800728e:	2180      	movs	r1, #128	; 0x80
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 f951 	bl	8008538 <USBD_LL_StallEP>
 8007296:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007298:	e040      	b.n	800731c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fc3e 	bl	8007b1e <USBD_CtlError>
              break;
 80072a2:	e03b      	b.n	800731c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	885b      	ldrh	r3, [r3, #2]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d136      	bne.n	800731a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
 80072ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d004      	beq.n	80072c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072b6:	7bbb      	ldrb	r3, [r7, #14]
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f001 f95b 	bl	8008576 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fcf7 	bl	8007cb4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80072c6:	7bbb      	ldrb	r3, [r7, #14]
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff fde2 	bl	8006e94 <USBD_CoreFindEP>
 80072d0:	4603      	mov	r3, r0
 80072d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072d4:	7b7b      	ldrb	r3, [r7, #13]
 80072d6:	2bff      	cmp	r3, #255	; 0xff
 80072d8:	d01f      	beq.n	800731a <USBD_StdEPReq+0x1c6>
 80072da:	7b7b      	ldrb	r3, [r7, #13]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d11c      	bne.n	800731a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80072e0:	7b7a      	ldrb	r2, [r7, #13]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80072e8:	7b7a      	ldrb	r2, [r7, #13]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	32ae      	adds	r2, #174	; 0xae
 80072ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d010      	beq.n	800731a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80072f8:	7b7a      	ldrb	r2, [r7, #13]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	32ae      	adds	r2, #174	; 0xae
 80072fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	4798      	blx	r3
 800730a:	4603      	mov	r3, r0
 800730c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800730e:	e004      	b.n	800731a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fc03 	bl	8007b1e <USBD_CtlError>
              break;
 8007318:	e000      	b.n	800731c <USBD_StdEPReq+0x1c8>
              break;
 800731a:	bf00      	nop
          }
          break;
 800731c:	e0ab      	b.n	8007476 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b02      	cmp	r3, #2
 8007328:	d002      	beq.n	8007330 <USBD_StdEPReq+0x1dc>
 800732a:	2b03      	cmp	r3, #3
 800732c:	d032      	beq.n	8007394 <USBD_StdEPReq+0x240>
 800732e:	e097      	b.n	8007460 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007330:	7bbb      	ldrb	r3, [r7, #14]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <USBD_StdEPReq+0x1f2>
 8007336:	7bbb      	ldrb	r3, [r7, #14]
 8007338:	2b80      	cmp	r3, #128	; 0x80
 800733a:	d004      	beq.n	8007346 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fbed 	bl	8007b1e <USBD_CtlError>
                break;
 8007344:	e091      	b.n	800746a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007346:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800734a:	2b00      	cmp	r3, #0
 800734c:	da0b      	bge.n	8007366 <USBD_StdEPReq+0x212>
 800734e:	7bbb      	ldrb	r3, [r7, #14]
 8007350:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007354:	4613      	mov	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4413      	add	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	3310      	adds	r3, #16
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	4413      	add	r3, r2
 8007362:	3304      	adds	r3, #4
 8007364:	e00b      	b.n	800737e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007366:	7bbb      	ldrb	r3, [r7, #14]
 8007368:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800736c:	4613      	mov	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	4413      	add	r3, r2
 800737c:	3304      	adds	r3, #4
 800737e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2202      	movs	r2, #2
 800738a:	4619      	mov	r1, r3
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fc37 	bl	8007c00 <USBD_CtlSendData>
              break;
 8007392:	e06a      	b.n	800746a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007394:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007398:	2b00      	cmp	r3, #0
 800739a:	da11      	bge.n	80073c0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800739c:	7bbb      	ldrb	r3, [r7, #14]
 800739e:	f003 020f 	and.w	r2, r3, #15
 80073a2:	6879      	ldr	r1, [r7, #4]
 80073a4:	4613      	mov	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	440b      	add	r3, r1
 80073ae:	3324      	adds	r3, #36	; 0x24
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d117      	bne.n	80073e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073b6:	6839      	ldr	r1, [r7, #0]
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fbb0 	bl	8007b1e <USBD_CtlError>
                  break;
 80073be:	e054      	b.n	800746a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	f003 020f 	and.w	r2, r3, #15
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	4613      	mov	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d104      	bne.n	80073e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fb9d 	bl	8007b1e <USBD_CtlError>
                  break;
 80073e4:	e041      	b.n	800746a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	da0b      	bge.n	8007406 <USBD_StdEPReq+0x2b2>
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073f4:	4613      	mov	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	3310      	adds	r3, #16
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	4413      	add	r3, r2
 8007402:	3304      	adds	r3, #4
 8007404:	e00b      	b.n	800741e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800740c:	4613      	mov	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	4413      	add	r3, r2
 800741c:	3304      	adds	r3, #4
 800741e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007420:	7bbb      	ldrb	r3, [r7, #14]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <USBD_StdEPReq+0x2d8>
 8007426:	7bbb      	ldrb	r3, [r7, #14]
 8007428:	2b80      	cmp	r3, #128	; 0x80
 800742a:	d103      	bne.n	8007434 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	e00e      	b.n	8007452 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f001 f8bb 	bl	80085b4 <USBD_LL_IsStallEP>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2201      	movs	r2, #1
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	e002      	b.n	8007452 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2200      	movs	r2, #0
 8007450:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2202      	movs	r2, #2
 8007456:	4619      	mov	r1, r3
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fbd1 	bl	8007c00 <USBD_CtlSendData>
              break;
 800745e:	e004      	b.n	800746a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fb5b 	bl	8007b1e <USBD_CtlError>
              break;
 8007468:	bf00      	nop
          }
          break;
 800746a:	e004      	b.n	8007476 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fb55 	bl	8007b1e <USBD_CtlError>
          break;
 8007474:	bf00      	nop
      }
      break;
 8007476:	e005      	b.n	8007484 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fb4f 	bl	8007b1e <USBD_CtlError>
      break;
 8007480:	e000      	b.n	8007484 <USBD_StdEPReq+0x330>
      break;
 8007482:	bf00      	nop
  }

  return ret;
 8007484:	7bfb      	ldrb	r3, [r7, #15]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	885b      	ldrh	r3, [r3, #2]
 80074aa:	0a1b      	lsrs	r3, r3, #8
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	3b01      	subs	r3, #1
 80074b0:	2b06      	cmp	r3, #6
 80074b2:	f200 8128 	bhi.w	8007706 <USBD_GetDescriptor+0x276>
 80074b6:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <USBD_GetDescriptor+0x2c>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	080074d9 	.word	0x080074d9
 80074c0:	080074f1 	.word	0x080074f1
 80074c4:	08007531 	.word	0x08007531
 80074c8:	08007707 	.word	0x08007707
 80074cc:	08007707 	.word	0x08007707
 80074d0:	080076a7 	.word	0x080076a7
 80074d4:	080076d3 	.word	0x080076d3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	7c12      	ldrb	r2, [r2, #16]
 80074e4:	f107 0108 	add.w	r1, r7, #8
 80074e8:	4610      	mov	r0, r2
 80074ea:	4798      	blx	r3
 80074ec:	60f8      	str	r0, [r7, #12]
      break;
 80074ee:	e112      	b.n	8007716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	7c1b      	ldrb	r3, [r3, #16]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10d      	bne.n	8007514 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007500:	f107 0208 	add.w	r2, r7, #8
 8007504:	4610      	mov	r0, r2
 8007506:	4798      	blx	r3
 8007508:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3301      	adds	r3, #1
 800750e:	2202      	movs	r2, #2
 8007510:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007512:	e100      	b.n	8007716 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	f107 0208 	add.w	r2, r7, #8
 8007520:	4610      	mov	r0, r2
 8007522:	4798      	blx	r3
 8007524:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	3301      	adds	r3, #1
 800752a:	2202      	movs	r2, #2
 800752c:	701a      	strb	r2, [r3, #0]
      break;
 800752e:	e0f2      	b.n	8007716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	885b      	ldrh	r3, [r3, #2]
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b05      	cmp	r3, #5
 8007538:	f200 80ac 	bhi.w	8007694 <USBD_GetDescriptor+0x204>
 800753c:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <USBD_GetDescriptor+0xb4>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	0800755d 	.word	0x0800755d
 8007548:	08007591 	.word	0x08007591
 800754c:	080075c5 	.word	0x080075c5
 8007550:	080075f9 	.word	0x080075f9
 8007554:	0800762d 	.word	0x0800762d
 8007558:	08007661 	.word	0x08007661
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00b      	beq.n	8007580 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	7c12      	ldrb	r2, [r2, #16]
 8007574:	f107 0108 	add.w	r1, r7, #8
 8007578:	4610      	mov	r0, r2
 800757a:	4798      	blx	r3
 800757c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800757e:	e091      	b.n	80076a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 facb 	bl	8007b1e <USBD_CtlError>
            err++;
 8007588:	7afb      	ldrb	r3, [r7, #11]
 800758a:	3301      	adds	r3, #1
 800758c:	72fb      	strb	r3, [r7, #11]
          break;
 800758e:	e089      	b.n	80076a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00b      	beq.n	80075b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	7c12      	ldrb	r2, [r2, #16]
 80075a8:	f107 0108 	add.w	r1, r7, #8
 80075ac:	4610      	mov	r0, r2
 80075ae:	4798      	blx	r3
 80075b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075b2:	e077      	b.n	80076a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fab1 	bl	8007b1e <USBD_CtlError>
            err++;
 80075bc:	7afb      	ldrb	r3, [r7, #11]
 80075be:	3301      	adds	r3, #1
 80075c0:	72fb      	strb	r3, [r7, #11]
          break;
 80075c2:	e06f      	b.n	80076a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00b      	beq.n	80075e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	7c12      	ldrb	r2, [r2, #16]
 80075dc:	f107 0108 	add.w	r1, r7, #8
 80075e0:	4610      	mov	r0, r2
 80075e2:	4798      	blx	r3
 80075e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075e6:	e05d      	b.n	80076a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fa97 	bl	8007b1e <USBD_CtlError>
            err++;
 80075f0:	7afb      	ldrb	r3, [r7, #11]
 80075f2:	3301      	adds	r3, #1
 80075f4:	72fb      	strb	r3, [r7, #11]
          break;
 80075f6:	e055      	b.n	80076a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00b      	beq.n	800761c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	7c12      	ldrb	r2, [r2, #16]
 8007610:	f107 0108 	add.w	r1, r7, #8
 8007614:	4610      	mov	r0, r2
 8007616:	4798      	blx	r3
 8007618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800761a:	e043      	b.n	80076a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fa7d 	bl	8007b1e <USBD_CtlError>
            err++;
 8007624:	7afb      	ldrb	r3, [r7, #11]
 8007626:	3301      	adds	r3, #1
 8007628:	72fb      	strb	r3, [r7, #11]
          break;
 800762a:	e03b      	b.n	80076a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00b      	beq.n	8007650 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	7c12      	ldrb	r2, [r2, #16]
 8007644:	f107 0108 	add.w	r1, r7, #8
 8007648:	4610      	mov	r0, r2
 800764a:	4798      	blx	r3
 800764c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800764e:	e029      	b.n	80076a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007650:	6839      	ldr	r1, [r7, #0]
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fa63 	bl	8007b1e <USBD_CtlError>
            err++;
 8007658:	7afb      	ldrb	r3, [r7, #11]
 800765a:	3301      	adds	r3, #1
 800765c:	72fb      	strb	r3, [r7, #11]
          break;
 800765e:	e021      	b.n	80076a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	7c12      	ldrb	r2, [r2, #16]
 8007678:	f107 0108 	add.w	r1, r7, #8
 800767c:	4610      	mov	r0, r2
 800767e:	4798      	blx	r3
 8007680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007682:	e00f      	b.n	80076a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fa49 	bl	8007b1e <USBD_CtlError>
            err++;
 800768c:	7afb      	ldrb	r3, [r7, #11]
 800768e:	3301      	adds	r3, #1
 8007690:	72fb      	strb	r3, [r7, #11]
          break;
 8007692:	e007      	b.n	80076a4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fa41 	bl	8007b1e <USBD_CtlError>
          err++;
 800769c:	7afb      	ldrb	r3, [r7, #11]
 800769e:	3301      	adds	r3, #1
 80076a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80076a2:	bf00      	nop
      }
      break;
 80076a4:	e037      	b.n	8007716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	7c1b      	ldrb	r3, [r3, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d109      	bne.n	80076c2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b6:	f107 0208 	add.w	r2, r7, #8
 80076ba:	4610      	mov	r0, r2
 80076bc:	4798      	blx	r3
 80076be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076c0:	e029      	b.n	8007716 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fa2a 	bl	8007b1e <USBD_CtlError>
        err++;
 80076ca:	7afb      	ldrb	r3, [r7, #11]
 80076cc:	3301      	adds	r3, #1
 80076ce:	72fb      	strb	r3, [r7, #11]
      break;
 80076d0:	e021      	b.n	8007716 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	7c1b      	ldrb	r3, [r3, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10d      	bne.n	80076f6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e2:	f107 0208 	add.w	r2, r7, #8
 80076e6:	4610      	mov	r0, r2
 80076e8:	4798      	blx	r3
 80076ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	3301      	adds	r3, #1
 80076f0:	2207      	movs	r2, #7
 80076f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076f4:	e00f      	b.n	8007716 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fa10 	bl	8007b1e <USBD_CtlError>
        err++;
 80076fe:	7afb      	ldrb	r3, [r7, #11]
 8007700:	3301      	adds	r3, #1
 8007702:	72fb      	strb	r3, [r7, #11]
      break;
 8007704:	e007      	b.n	8007716 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fa08 	bl	8007b1e <USBD_CtlError>
      err++;
 800770e:	7afb      	ldrb	r3, [r7, #11]
 8007710:	3301      	adds	r3, #1
 8007712:	72fb      	strb	r3, [r7, #11]
      break;
 8007714:	bf00      	nop
  }

  if (err != 0U)
 8007716:	7afb      	ldrb	r3, [r7, #11]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d11e      	bne.n	800775a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	88db      	ldrh	r3, [r3, #6]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d016      	beq.n	8007752 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007724:	893b      	ldrh	r3, [r7, #8]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00e      	beq.n	8007748 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	88da      	ldrh	r2, [r3, #6]
 800772e:	893b      	ldrh	r3, [r7, #8]
 8007730:	4293      	cmp	r3, r2
 8007732:	bf28      	it	cs
 8007734:	4613      	movcs	r3, r2
 8007736:	b29b      	uxth	r3, r3
 8007738:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800773a:	893b      	ldrh	r3, [r7, #8]
 800773c:	461a      	mov	r2, r3
 800773e:	68f9      	ldr	r1, [r7, #12]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fa5d 	bl	8007c00 <USBD_CtlSendData>
 8007746:	e009      	b.n	800775c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007748:	6839      	ldr	r1, [r7, #0]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f9e7 	bl	8007b1e <USBD_CtlError>
 8007750:	e004      	b.n	800775c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 faae 	bl	8007cb4 <USBD_CtlSendStatus>
 8007758:	e000      	b.n	800775c <USBD_GetDescriptor+0x2cc>
    return;
 800775a:	bf00      	nop
  }
}
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop

08007764 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	889b      	ldrh	r3, [r3, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d131      	bne.n	80077da <USBD_SetAddress+0x76>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	88db      	ldrh	r3, [r3, #6]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d12d      	bne.n	80077da <USBD_SetAddress+0x76>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	885b      	ldrh	r3, [r3, #2]
 8007782:	2b7f      	cmp	r3, #127	; 0x7f
 8007784:	d829      	bhi.n	80077da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	885b      	ldrh	r3, [r3, #2]
 800778a:	b2db      	uxtb	r3, r3
 800778c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007790:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b03      	cmp	r3, #3
 800779c:	d104      	bne.n	80077a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f9bc 	bl	8007b1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a6:	e01d      	b.n	80077e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	7bfa      	ldrb	r2, [r7, #15]
 80077ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 ff29 	bl	800860c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fa7a 	bl	8007cb4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d004      	beq.n	80077d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2202      	movs	r2, #2
 80077ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ce:	e009      	b.n	80077e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d8:	e004      	b.n	80077e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f99e 	bl	8007b1e <USBD_CtlError>
  }
}
 80077e2:	bf00      	nop
 80077e4:	bf00      	nop
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	885b      	ldrh	r3, [r3, #2]
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	4b4e      	ldr	r3, [pc, #312]	; (800793c <USBD_SetConfig+0x150>)
 8007802:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007804:	4b4d      	ldr	r3, [pc, #308]	; (800793c <USBD_SetConfig+0x150>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d905      	bls.n	8007818 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f985 	bl	8007b1e <USBD_CtlError>
    return USBD_FAIL;
 8007814:	2303      	movs	r3, #3
 8007816:	e08c      	b.n	8007932 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d002      	beq.n	800782a <USBD_SetConfig+0x3e>
 8007824:	2b03      	cmp	r3, #3
 8007826:	d029      	beq.n	800787c <USBD_SetConfig+0x90>
 8007828:	e075      	b.n	8007916 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800782a:	4b44      	ldr	r3, [pc, #272]	; (800793c <USBD_SetConfig+0x150>)
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d020      	beq.n	8007874 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007832:	4b42      	ldr	r3, [pc, #264]	; (800793c <USBD_SetConfig+0x150>)
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800783c:	4b3f      	ldr	r3, [pc, #252]	; (800793c <USBD_SetConfig+0x150>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fe ffe7 	bl	8006816 <USBD_SetClassConfig>
 8007848:	4603      	mov	r3, r0
 800784a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d008      	beq.n	8007864 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f962 	bl	8007b1e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2202      	movs	r2, #2
 800785e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007862:	e065      	b.n	8007930 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fa25 	bl	8007cb4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2203      	movs	r2, #3
 800786e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007872:	e05d      	b.n	8007930 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fa1d 	bl	8007cb4 <USBD_CtlSendStatus>
      break;
 800787a:	e059      	b.n	8007930 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800787c:	4b2f      	ldr	r3, [pc, #188]	; (800793c <USBD_SetConfig+0x150>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d112      	bne.n	80078aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2202      	movs	r2, #2
 8007888:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800788c:	4b2b      	ldr	r3, [pc, #172]	; (800793c <USBD_SetConfig+0x150>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007896:	4b29      	ldr	r3, [pc, #164]	; (800793c <USBD_SetConfig+0x150>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7fe ffd6 	bl	800684e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fa06 	bl	8007cb4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078a8:	e042      	b.n	8007930 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80078aa:	4b24      	ldr	r3, [pc, #144]	; (800793c <USBD_SetConfig+0x150>)
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d02a      	beq.n	800790e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7fe ffc4 	bl	800684e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80078c6:	4b1d      	ldr	r3, [pc, #116]	; (800793c <USBD_SetConfig+0x150>)
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	461a      	mov	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078d0:	4b1a      	ldr	r3, [pc, #104]	; (800793c <USBD_SetConfig+0x150>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7fe ff9d 	bl	8006816 <USBD_SetClassConfig>
 80078dc:	4603      	mov	r3, r0
 80078de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00f      	beq.n	8007906 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f918 	bl	8007b1e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	4619      	mov	r1, r3
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7fe ffa9 	bl	800684e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2202      	movs	r2, #2
 8007900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007904:	e014      	b.n	8007930 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f9d4 	bl	8007cb4 <USBD_CtlSendStatus>
      break;
 800790c:	e010      	b.n	8007930 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f9d0 	bl	8007cb4 <USBD_CtlSendStatus>
      break;
 8007914:	e00c      	b.n	8007930 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f900 	bl	8007b1e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800791e:	4b07      	ldr	r3, [pc, #28]	; (800793c <USBD_SetConfig+0x150>)
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7fe ff92 	bl	800684e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800792a:	2303      	movs	r3, #3
 800792c:	73fb      	strb	r3, [r7, #15]
      break;
 800792e:	bf00      	nop
  }

  return ret;
 8007930:	7bfb      	ldrb	r3, [r7, #15]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20000788 	.word	0x20000788

08007940 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	88db      	ldrh	r3, [r3, #6]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d004      	beq.n	800795c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f8e2 	bl	8007b1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800795a:	e023      	b.n	80079a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b02      	cmp	r3, #2
 8007966:	dc02      	bgt.n	800796e <USBD_GetConfig+0x2e>
 8007968:	2b00      	cmp	r3, #0
 800796a:	dc03      	bgt.n	8007974 <USBD_GetConfig+0x34>
 800796c:	e015      	b.n	800799a <USBD_GetConfig+0x5a>
 800796e:	2b03      	cmp	r3, #3
 8007970:	d00b      	beq.n	800798a <USBD_GetConfig+0x4a>
 8007972:	e012      	b.n	800799a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	3308      	adds	r3, #8
 800797e:	2201      	movs	r2, #1
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f93c 	bl	8007c00 <USBD_CtlSendData>
        break;
 8007988:	e00c      	b.n	80079a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	3304      	adds	r3, #4
 800798e:	2201      	movs	r2, #1
 8007990:	4619      	mov	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f934 	bl	8007c00 <USBD_CtlSendData>
        break;
 8007998:	e004      	b.n	80079a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f8be 	bl	8007b1e <USBD_CtlError>
        break;
 80079a2:	bf00      	nop
}
 80079a4:	bf00      	nop
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	3b01      	subs	r3, #1
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d81e      	bhi.n	8007a02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	88db      	ldrh	r3, [r3, #6]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d004      	beq.n	80079d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f8a5 	bl	8007b1e <USBD_CtlError>
        break;
 80079d4:	e01a      	b.n	8007a0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d005      	beq.n	80079f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	f043 0202 	orr.w	r2, r3, #2
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	330c      	adds	r3, #12
 80079f6:	2202      	movs	r2, #2
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f900 	bl	8007c00 <USBD_CtlSendData>
      break;
 8007a00:	e004      	b.n	8007a0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a02:	6839      	ldr	r1, [r7, #0]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f88a 	bl	8007b1e <USBD_CtlError>
      break;
 8007a0a:	bf00      	nop
  }
}
 8007a0c:	bf00      	nop
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	885b      	ldrh	r3, [r3, #2]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d107      	bne.n	8007a36 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f940 	bl	8007cb4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a34:	e013      	b.n	8007a5e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	885b      	ldrh	r3, [r3, #2]
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d10b      	bne.n	8007a56 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	889b      	ldrh	r3, [r3, #4]
 8007a42:	0a1b      	lsrs	r3, r3, #8
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f930 	bl	8007cb4 <USBD_CtlSendStatus>
}
 8007a54:	e003      	b.n	8007a5e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f860 	bl	8007b1e <USBD_CtlError>
}
 8007a5e:	bf00      	nop
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b082      	sub	sp, #8
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d80b      	bhi.n	8007a96 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	885b      	ldrh	r3, [r3, #2]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d10c      	bne.n	8007aa0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f910 	bl	8007cb4 <USBD_CtlSendStatus>
      }
      break;
 8007a94:	e004      	b.n	8007aa0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f840 	bl	8007b1e <USBD_CtlError>
      break;
 8007a9e:	e000      	b.n	8007aa2 <USBD_ClrFeature+0x3c>
      break;
 8007aa0:	bf00      	nop
  }
}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	781a      	ldrb	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	781a      	ldrb	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f7ff fa41 	bl	8006f5c <SWAPBYTE>
 8007ada:	4603      	mov	r3, r0
 8007adc:	461a      	mov	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	3301      	adds	r3, #1
 8007aec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f7ff fa34 	bl	8006f5c <SWAPBYTE>
 8007af4:	4603      	mov	r3, r0
 8007af6:	461a      	mov	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3301      	adds	r3, #1
 8007b00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	3301      	adds	r3, #1
 8007b06:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f7ff fa27 	bl	8006f5c <SWAPBYTE>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	461a      	mov	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	80da      	strh	r2, [r3, #6]
}
 8007b16:	bf00      	nop
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b082      	sub	sp, #8
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b28:	2180      	movs	r1, #128	; 0x80
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fd04 	bl	8008538 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b30:	2100      	movs	r1, #0
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fd00 	bl	8008538 <USBD_LL_StallEP>
}
 8007b38:	bf00      	nop
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d036      	beq.n	8007bc4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b5a:	6938      	ldr	r0, [r7, #16]
 8007b5c:	f000 f836 	bl	8007bcc <USBD_GetLen>
 8007b60:	4603      	mov	r3, r0
 8007b62:	3301      	adds	r3, #1
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	4413      	add	r3, r2
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	7812      	ldrb	r2, [r2, #0]
 8007b78:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b80:	7dfb      	ldrb	r3, [r7, #23]
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	4413      	add	r3, r2
 8007b86:	2203      	movs	r2, #3
 8007b88:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b90:	e013      	b.n	8007bba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	4413      	add	r3, r2
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	7812      	ldrb	r2, [r2, #0]
 8007b9c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	613b      	str	r3, [r7, #16]
    idx++;
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007baa:	7dfb      	ldrb	r3, [r7, #23]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	4413      	add	r3, r2
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	701a      	strb	r2, [r3, #0]
    idx++;
 8007bb4:	7dfb      	ldrb	r3, [r7, #23]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1e7      	bne.n	8007b92 <USBD_GetString+0x52>
 8007bc2:	e000      	b.n	8007bc6 <USBD_GetString+0x86>
    return;
 8007bc4:	bf00      	nop
  }
}
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007bdc:	e005      	b.n	8007bea <USBD_GetLen+0x1e>
  {
    len++;
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
 8007be0:	3301      	adds	r3, #1
 8007be2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	3301      	adds	r3, #1
 8007be8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1f5      	bne.n	8007bde <USBD_GetLen+0x12>
  }

  return len;
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	2100      	movs	r1, #0
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 fd0f 	bl	800864a <USBD_LL_Transmit>

  return USBD_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	60b9      	str	r1, [r7, #8]
 8007c40:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	2100      	movs	r1, #0
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 fcfe 	bl	800864a <USBD_LL_Transmit>

  return USBD_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2203      	movs	r2, #3
 8007c68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	2100      	movs	r1, #0
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 fd02 	bl	800868c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3710      	adds	r7, #16
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b084      	sub	sp, #16
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	60f8      	str	r0, [r7, #12]
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 fcf1 	bl	800868c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2204      	movs	r2, #4
 8007cc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	2100      	movs	r1, #0
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 fcbd 	bl	800864a <USBD_LL_Transmit>

  return USBD_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2205      	movs	r2, #5
 8007ce6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cea:	2300      	movs	r3, #0
 8007cec:	2200      	movs	r2, #0
 8007cee:	2100      	movs	r1, #0
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fccb 	bl	800868c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d04:	2200      	movs	r2, #0
 8007d06:	4912      	ldr	r1, [pc, #72]	; (8007d50 <MX_USB_DEVICE_Init+0x50>)
 8007d08:	4812      	ldr	r0, [pc, #72]	; (8007d54 <MX_USB_DEVICE_Init+0x54>)
 8007d0a:	f7fe fd07 	bl	800671c <USBD_Init>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d14:	f7f8 ff92 	bl	8000c3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d18:	490f      	ldr	r1, [pc, #60]	; (8007d58 <MX_USB_DEVICE_Init+0x58>)
 8007d1a:	480e      	ldr	r0, [pc, #56]	; (8007d54 <MX_USB_DEVICE_Init+0x54>)
 8007d1c:	f7fe fd2e 	bl	800677c <USBD_RegisterClass>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d26:	f7f8 ff89 	bl	8000c3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d2a:	490c      	ldr	r1, [pc, #48]	; (8007d5c <MX_USB_DEVICE_Init+0x5c>)
 8007d2c:	4809      	ldr	r0, [pc, #36]	; (8007d54 <MX_USB_DEVICE_Init+0x54>)
 8007d2e:	f7fe fc1f 	bl	8006570 <USBD_CDC_RegisterInterface>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d38:	f7f8 ff80 	bl	8000c3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d3c:	4805      	ldr	r0, [pc, #20]	; (8007d54 <MX_USB_DEVICE_Init+0x54>)
 8007d3e:	f7fe fd53 	bl	80067e8 <USBD_Start>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d48:	f7f8 ff78 	bl	8000c3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d4c:	bf00      	nop
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	200000b0 	.word	0x200000b0
 8007d54:	2000078c 	.word	0x2000078c
 8007d58:	2000001c 	.word	0x2000001c
 8007d5c:	2000009c 	.word	0x2000009c

08007d60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007d64:	2200      	movs	r2, #0
 8007d66:	4905      	ldr	r1, [pc, #20]	; (8007d7c <CDC_Init_FS+0x1c>)
 8007d68:	4805      	ldr	r0, [pc, #20]	; (8007d80 <CDC_Init_FS+0x20>)
 8007d6a:	f7fe fc1b 	bl	80065a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007d6e:	4905      	ldr	r1, [pc, #20]	; (8007d84 <CDC_Init_FS+0x24>)
 8007d70:	4803      	ldr	r0, [pc, #12]	; (8007d80 <CDC_Init_FS+0x20>)
 8007d72:	f7fe fc39 	bl	80065e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	20001268 	.word	0x20001268
 8007d80:	2000078c 	.word	0x2000078c
 8007d84:	20000a68 	.word	0x20000a68

08007d88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007d8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	4603      	mov	r3, r0
 8007da0:	6039      	str	r1, [r7, #0]
 8007da2:	71fb      	strb	r3, [r7, #7]
 8007da4:	4613      	mov	r3, r2
 8007da6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007da8:	79fb      	ldrb	r3, [r7, #7]
 8007daa:	2b23      	cmp	r3, #35	; 0x23
 8007dac:	d84a      	bhi.n	8007e44 <CDC_Control_FS+0xac>
 8007dae:	a201      	add	r2, pc, #4	; (adr r2, 8007db4 <CDC_Control_FS+0x1c>)
 8007db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db4:	08007e45 	.word	0x08007e45
 8007db8:	08007e45 	.word	0x08007e45
 8007dbc:	08007e45 	.word	0x08007e45
 8007dc0:	08007e45 	.word	0x08007e45
 8007dc4:	08007e45 	.word	0x08007e45
 8007dc8:	08007e45 	.word	0x08007e45
 8007dcc:	08007e45 	.word	0x08007e45
 8007dd0:	08007e45 	.word	0x08007e45
 8007dd4:	08007e45 	.word	0x08007e45
 8007dd8:	08007e45 	.word	0x08007e45
 8007ddc:	08007e45 	.word	0x08007e45
 8007de0:	08007e45 	.word	0x08007e45
 8007de4:	08007e45 	.word	0x08007e45
 8007de8:	08007e45 	.word	0x08007e45
 8007dec:	08007e45 	.word	0x08007e45
 8007df0:	08007e45 	.word	0x08007e45
 8007df4:	08007e45 	.word	0x08007e45
 8007df8:	08007e45 	.word	0x08007e45
 8007dfc:	08007e45 	.word	0x08007e45
 8007e00:	08007e45 	.word	0x08007e45
 8007e04:	08007e45 	.word	0x08007e45
 8007e08:	08007e45 	.word	0x08007e45
 8007e0c:	08007e45 	.word	0x08007e45
 8007e10:	08007e45 	.word	0x08007e45
 8007e14:	08007e45 	.word	0x08007e45
 8007e18:	08007e45 	.word	0x08007e45
 8007e1c:	08007e45 	.word	0x08007e45
 8007e20:	08007e45 	.word	0x08007e45
 8007e24:	08007e45 	.word	0x08007e45
 8007e28:	08007e45 	.word	0x08007e45
 8007e2c:	08007e45 	.word	0x08007e45
 8007e30:	08007e45 	.word	0x08007e45
 8007e34:	08007e45 	.word	0x08007e45
 8007e38:	08007e45 	.word	0x08007e45
 8007e3c:	08007e45 	.word	0x08007e45
 8007e40:	08007e45 	.word	0x08007e45
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007e44:	bf00      	nop
  }

  return (USBD_OK);
 8007e46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  memset (RXbuffer, '\0', sizeof(RXbuffer));  // clear the buffer
 8007e5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e62:	2100      	movs	r1, #0
 8007e64:	480d      	ldr	r0, [pc, #52]	; (8007e9c <CDC_Receive_FS+0x48>)
 8007e66:	f000 fcc1 	bl	80087ec <memset>
  RXbufferStrLen = (uint8_t)*Len;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	b2da      	uxtb	r2, r3
 8007e70:	4b0b      	ldr	r3, [pc, #44]	; (8007ea0 <CDC_Receive_FS+0x4c>)
 8007e72:	701a      	strb	r2, [r3, #0]
  memcpy(RXbuffer, Buf, RXbufferStrLen);  // copy the data to the buffer
 8007e74:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <CDC_Receive_FS+0x4c>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6879      	ldr	r1, [r7, #4]
 8007e7e:	4807      	ldr	r0, [pc, #28]	; (8007e9c <CDC_Receive_FS+0x48>)
 8007e80:	f000 fca6 	bl	80087d0 <memcpy>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007e84:	6879      	ldr	r1, [r7, #4]
 8007e86:	4807      	ldr	r0, [pc, #28]	; (8007ea4 <CDC_Receive_FS+0x50>)
 8007e88:	f7fe fbae 	bl	80065e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007e8c:	4805      	ldr	r0, [pc, #20]	; (8007ea4 <CDC_Receive_FS+0x50>)
 8007e8e:	f7fe fc0f 	bl	80066b0 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 8007e92:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	20000320 	.word	0x20000320
 8007ea0:	20000420 	.word	0x20000420
 8007ea4:	2000078c 	.word	0x2000078c

08007ea8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007eb8:	4b0d      	ldr	r3, [pc, #52]	; (8007ef0 <CDC_Transmit_FS+0x48>)
 8007eba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ebe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e00b      	b.n	8007ee6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007ece:	887b      	ldrh	r3, [r7, #2]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	6879      	ldr	r1, [r7, #4]
 8007ed4:	4806      	ldr	r0, [pc, #24]	; (8007ef0 <CDC_Transmit_FS+0x48>)
 8007ed6:	f7fe fb65 	bl	80065a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007eda:	4805      	ldr	r0, [pc, #20]	; (8007ef0 <CDC_Transmit_FS+0x48>)
 8007edc:	f7fe fba2 	bl	8006624 <USBD_CDC_TransmitPacket>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	2000078c 	.word	0x2000078c

08007ef4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	4613      	mov	r3, r2
 8007f00:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007f06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	371c      	adds	r7, #28
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
	...

08007f18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	4603      	mov	r3, r0
 8007f20:	6039      	str	r1, [r7, #0]
 8007f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	2212      	movs	r2, #18
 8007f28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f2a:	4b03      	ldr	r3, [pc, #12]	; (8007f38 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	200000cc 	.word	0x200000cc

08007f3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	4603      	mov	r3, r0
 8007f44:	6039      	str	r1, [r7, #0]
 8007f46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2204      	movs	r2, #4
 8007f4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f4e:	4b03      	ldr	r3, [pc, #12]	; (8007f5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	200000e0 	.word	0x200000e0

08007f60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	4603      	mov	r3, r0
 8007f68:	6039      	str	r1, [r7, #0]
 8007f6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f6c:	79fb      	ldrb	r3, [r7, #7]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d105      	bne.n	8007f7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	4907      	ldr	r1, [pc, #28]	; (8007f94 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f76:	4808      	ldr	r0, [pc, #32]	; (8007f98 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f78:	f7ff fde2 	bl	8007b40 <USBD_GetString>
 8007f7c:	e004      	b.n	8007f88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	4904      	ldr	r1, [pc, #16]	; (8007f94 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f82:	4805      	ldr	r0, [pc, #20]	; (8007f98 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f84:	f7ff fddc 	bl	8007b40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f88:	4b02      	ldr	r3, [pc, #8]	; (8007f94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20001a68 	.word	0x20001a68
 8007f98:	08009140 	.word	0x08009140

08007f9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	6039      	str	r1, [r7, #0]
 8007fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	4904      	ldr	r1, [pc, #16]	; (8007fbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007fac:	4804      	ldr	r0, [pc, #16]	; (8007fc0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007fae:	f7ff fdc7 	bl	8007b40 <USBD_GetString>
  return USBD_StrDesc;
 8007fb2:	4b02      	ldr	r3, [pc, #8]	; (8007fbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	20001a68 	.word	0x20001a68
 8007fc0:	08009158 	.word	0x08009158

08007fc4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	4603      	mov	r3, r0
 8007fcc:	6039      	str	r1, [r7, #0]
 8007fce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	221a      	movs	r2, #26
 8007fd4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007fd6:	f000 f843 	bl	8008060 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007fda:	4b02      	ldr	r3, [pc, #8]	; (8007fe4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	200000e4 	.word	0x200000e4

08007fe8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	4603      	mov	r3, r0
 8007ff0:	6039      	str	r1, [r7, #0]
 8007ff2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ff4:	79fb      	ldrb	r3, [r7, #7]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d105      	bne.n	8008006 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	4907      	ldr	r1, [pc, #28]	; (800801c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ffe:	4808      	ldr	r0, [pc, #32]	; (8008020 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008000:	f7ff fd9e 	bl	8007b40 <USBD_GetString>
 8008004:	e004      	b.n	8008010 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	4904      	ldr	r1, [pc, #16]	; (800801c <USBD_FS_ConfigStrDescriptor+0x34>)
 800800a:	4805      	ldr	r0, [pc, #20]	; (8008020 <USBD_FS_ConfigStrDescriptor+0x38>)
 800800c:	f7ff fd98 	bl	8007b40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008010:	4b02      	ldr	r3, [pc, #8]	; (800801c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008012:	4618      	mov	r0, r3
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20001a68 	.word	0x20001a68
 8008020:	0800916c 	.word	0x0800916c

08008024 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	4603      	mov	r3, r0
 800802c:	6039      	str	r1, [r7, #0]
 800802e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d105      	bne.n	8008042 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	4907      	ldr	r1, [pc, #28]	; (8008058 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800803a:	4808      	ldr	r0, [pc, #32]	; (800805c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800803c:	f7ff fd80 	bl	8007b40 <USBD_GetString>
 8008040:	e004      	b.n	800804c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	4904      	ldr	r1, [pc, #16]	; (8008058 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008046:	4805      	ldr	r0, [pc, #20]	; (800805c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008048:	f7ff fd7a 	bl	8007b40 <USBD_GetString>
  }
  return USBD_StrDesc;
 800804c:	4b02      	ldr	r3, [pc, #8]	; (8008058 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800804e:	4618      	mov	r0, r3
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20001a68 	.word	0x20001a68
 800805c:	08009178 	.word	0x08009178

08008060 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008066:	4b0f      	ldr	r3, [pc, #60]	; (80080a4 <Get_SerialNum+0x44>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800806c:	4b0e      	ldr	r3, [pc, #56]	; (80080a8 <Get_SerialNum+0x48>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008072:	4b0e      	ldr	r3, [pc, #56]	; (80080ac <Get_SerialNum+0x4c>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4413      	add	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d009      	beq.n	800809a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008086:	2208      	movs	r2, #8
 8008088:	4909      	ldr	r1, [pc, #36]	; (80080b0 <Get_SerialNum+0x50>)
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f000 f814 	bl	80080b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008090:	2204      	movs	r2, #4
 8008092:	4908      	ldr	r1, [pc, #32]	; (80080b4 <Get_SerialNum+0x54>)
 8008094:	68b8      	ldr	r0, [r7, #8]
 8008096:	f000 f80f 	bl	80080b8 <IntToUnicode>
  }
}
 800809a:	bf00      	nop
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	1fff7a10 	.word	0x1fff7a10
 80080a8:	1fff7a14 	.word	0x1fff7a14
 80080ac:	1fff7a18 	.word	0x1fff7a18
 80080b0:	200000e6 	.word	0x200000e6
 80080b4:	200000f6 	.word	0x200000f6

080080b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b087      	sub	sp, #28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	4613      	mov	r3, r2
 80080c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80080c6:	2300      	movs	r3, #0
 80080c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80080ca:	2300      	movs	r3, #0
 80080cc:	75fb      	strb	r3, [r7, #23]
 80080ce:	e027      	b.n	8008120 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	0f1b      	lsrs	r3, r3, #28
 80080d4:	2b09      	cmp	r3, #9
 80080d6:	d80b      	bhi.n	80080f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	0f1b      	lsrs	r3, r3, #28
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	7dfb      	ldrb	r3, [r7, #23]
 80080e0:	005b      	lsls	r3, r3, #1
 80080e2:	4619      	mov	r1, r3
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	440b      	add	r3, r1
 80080e8:	3230      	adds	r2, #48	; 0x30
 80080ea:	b2d2      	uxtb	r2, r2
 80080ec:	701a      	strb	r2, [r3, #0]
 80080ee:	e00a      	b.n	8008106 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	0f1b      	lsrs	r3, r3, #28
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	7dfb      	ldrb	r3, [r7, #23]
 80080f8:	005b      	lsls	r3, r3, #1
 80080fa:	4619      	mov	r1, r3
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	440b      	add	r3, r1
 8008100:	3237      	adds	r2, #55	; 0x37
 8008102:	b2d2      	uxtb	r2, r2
 8008104:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	011b      	lsls	r3, r3, #4
 800810a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800810c:	7dfb      	ldrb	r3, [r7, #23]
 800810e:	005b      	lsls	r3, r3, #1
 8008110:	3301      	adds	r3, #1
 8008112:	68ba      	ldr	r2, [r7, #8]
 8008114:	4413      	add	r3, r2
 8008116:	2200      	movs	r2, #0
 8008118:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800811a:	7dfb      	ldrb	r3, [r7, #23]
 800811c:	3301      	adds	r3, #1
 800811e:	75fb      	strb	r3, [r7, #23]
 8008120:	7dfa      	ldrb	r2, [r7, #23]
 8008122:	79fb      	ldrb	r3, [r7, #7]
 8008124:	429a      	cmp	r2, r3
 8008126:	d3d3      	bcc.n	80080d0 <IntToUnicode+0x18>
  }
}
 8008128:	bf00      	nop
 800812a:	bf00      	nop
 800812c:	371c      	adds	r7, #28
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
	...

08008138 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08a      	sub	sp, #40	; 0x28
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008140:	f107 0314 	add.w	r3, r7, #20
 8008144:	2200      	movs	r2, #0
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	605a      	str	r2, [r3, #4]
 800814a:	609a      	str	r2, [r3, #8]
 800814c:	60da      	str	r2, [r3, #12]
 800814e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008158:	d147      	bne.n	80081ea <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800815a:	2300      	movs	r3, #0
 800815c:	613b      	str	r3, [r7, #16]
 800815e:	4b25      	ldr	r3, [pc, #148]	; (80081f4 <HAL_PCD_MspInit+0xbc>)
 8008160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008162:	4a24      	ldr	r2, [pc, #144]	; (80081f4 <HAL_PCD_MspInit+0xbc>)
 8008164:	f043 0301 	orr.w	r3, r3, #1
 8008168:	6313      	str	r3, [r2, #48]	; 0x30
 800816a:	4b22      	ldr	r3, [pc, #136]	; (80081f4 <HAL_PCD_MspInit+0xbc>)
 800816c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	613b      	str	r3, [r7, #16]
 8008174:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008176:	f44f 7300 	mov.w	r3, #512	; 0x200
 800817a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800817c:	2300      	movs	r3, #0
 800817e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008180:	2300      	movs	r3, #0
 8008182:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008184:	f107 0314 	add.w	r3, r7, #20
 8008188:	4619      	mov	r1, r3
 800818a:	481b      	ldr	r0, [pc, #108]	; (80081f8 <HAL_PCD_MspInit+0xc0>)
 800818c:	f7f9 f850 	bl	8001230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008190:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008196:	2302      	movs	r3, #2
 8008198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800819a:	2300      	movs	r3, #0
 800819c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800819e:	2300      	movs	r3, #0
 80081a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80081a2:	230a      	movs	r3, #10
 80081a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081a6:	f107 0314 	add.w	r3, r7, #20
 80081aa:	4619      	mov	r1, r3
 80081ac:	4812      	ldr	r0, [pc, #72]	; (80081f8 <HAL_PCD_MspInit+0xc0>)
 80081ae:	f7f9 f83f 	bl	8001230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80081b2:	4b10      	ldr	r3, [pc, #64]	; (80081f4 <HAL_PCD_MspInit+0xbc>)
 80081b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081b6:	4a0f      	ldr	r2, [pc, #60]	; (80081f4 <HAL_PCD_MspInit+0xbc>)
 80081b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081bc:	6353      	str	r3, [r2, #52]	; 0x34
 80081be:	2300      	movs	r3, #0
 80081c0:	60fb      	str	r3, [r7, #12]
 80081c2:	4b0c      	ldr	r3, [pc, #48]	; (80081f4 <HAL_PCD_MspInit+0xbc>)
 80081c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c6:	4a0b      	ldr	r2, [pc, #44]	; (80081f4 <HAL_PCD_MspInit+0xbc>)
 80081c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081cc:	6453      	str	r3, [r2, #68]	; 0x44
 80081ce:	4b09      	ldr	r3, [pc, #36]	; (80081f4 <HAL_PCD_MspInit+0xbc>)
 80081d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80081da:	2200      	movs	r2, #0
 80081dc:	2100      	movs	r1, #0
 80081de:	2043      	movs	r0, #67	; 0x43
 80081e0:	f7f8 ffef 	bl	80011c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80081e4:	2043      	movs	r0, #67	; 0x43
 80081e6:	f7f9 f808 	bl	80011fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80081ea:	bf00      	nop
 80081ec:	3728      	adds	r7, #40	; 0x28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	40023800 	.word	0x40023800
 80081f8:	40020000 	.word	0x40020000

080081fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008210:	4619      	mov	r1, r3
 8008212:	4610      	mov	r0, r2
 8008214:	f7fe fb35 	bl	8006882 <USBD_LL_SetupStage>
}
 8008218:	bf00      	nop
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	460b      	mov	r3, r1
 800822a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008232:	78fa      	ldrb	r2, [r7, #3]
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	4613      	mov	r3, r2
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	4413      	add	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	440b      	add	r3, r1
 8008240:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	78fb      	ldrb	r3, [r7, #3]
 8008248:	4619      	mov	r1, r3
 800824a:	f7fe fb6f 	bl	800692c <USBD_LL_DataOutStage>
}
 800824e:	bf00      	nop
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b082      	sub	sp, #8
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	460b      	mov	r3, r1
 8008260:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008268:	78fa      	ldrb	r2, [r7, #3]
 800826a:	6879      	ldr	r1, [r7, #4]
 800826c:	4613      	mov	r3, r2
 800826e:	00db      	lsls	r3, r3, #3
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	440b      	add	r3, r1
 8008276:	334c      	adds	r3, #76	; 0x4c
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	78fb      	ldrb	r3, [r7, #3]
 800827c:	4619      	mov	r1, r3
 800827e:	f7fe fc08 	bl	8006a92 <USBD_LL_DataInStage>
}
 8008282:	bf00      	nop
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b082      	sub	sp, #8
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008298:	4618      	mov	r0, r3
 800829a:	f7fe fd3c 	bl	8006d16 <USBD_LL_SOF>
}
 800829e:	bf00      	nop
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082ae:	2301      	movs	r3, #1
 80082b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d102      	bne.n	80082c0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80082ba:	2300      	movs	r3, #0
 80082bc:	73fb      	strb	r3, [r7, #15]
 80082be:	e008      	b.n	80082d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d102      	bne.n	80082ce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80082c8:	2301      	movs	r3, #1
 80082ca:	73fb      	strb	r3, [r7, #15]
 80082cc:	e001      	b.n	80082d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80082ce:	f7f8 fcb5 	bl	8000c3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082d8:	7bfa      	ldrb	r2, [r7, #15]
 80082da:	4611      	mov	r1, r2
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fe fcdc 	bl	8006c9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fe fc84 	bl	8006bf6 <USBD_LL_Reset>
}
 80082ee:	bf00      	nop
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
	...

080082f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008306:	4618      	mov	r0, r3
 8008308:	f7fe fcd7 	bl	8006cba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	6812      	ldr	r2, [r2, #0]
 800831a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800831e:	f043 0301 	orr.w	r3, r3, #1
 8008322:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d005      	beq.n	8008338 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800832c:	4b04      	ldr	r3, [pc, #16]	; (8008340 <HAL_PCD_SuspendCallback+0x48>)
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	4a03      	ldr	r2, [pc, #12]	; (8008340 <HAL_PCD_SuspendCallback+0x48>)
 8008332:	f043 0306 	orr.w	r3, r3, #6
 8008336:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008338:	bf00      	nop
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	e000ed00 	.word	0xe000ed00

08008344 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008352:	4618      	mov	r0, r3
 8008354:	f7fe fcc7 	bl	8006ce6 <USBD_LL_Resume>
}
 8008358:	bf00      	nop
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008372:	78fa      	ldrb	r2, [r7, #3]
 8008374:	4611      	mov	r1, r2
 8008376:	4618      	mov	r0, r3
 8008378:	f7fe fd1f 	bl	8006dba <USBD_LL_IsoOUTIncomplete>
}
 800837c:	bf00      	nop
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	460b      	mov	r3, r1
 800838e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008396:	78fa      	ldrb	r2, [r7, #3]
 8008398:	4611      	mov	r1, r2
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe fcdb 	bl	8006d56 <USBD_LL_IsoINIncomplete>
}
 80083a0:	bf00      	nop
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe fd31 	bl	8006e1e <USBD_LL_DevConnected>
}
 80083bc:	bf00      	nop
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7fe fd2e 	bl	8006e34 <USBD_LL_DevDisconnected>
}
 80083d8:	bf00      	nop
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d13c      	bne.n	800846a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80083f0:	4a20      	ldr	r2, [pc, #128]	; (8008474 <USBD_LL_Init+0x94>)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	4a1e      	ldr	r2, [pc, #120]	; (8008474 <USBD_LL_Init+0x94>)
 80083fc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008400:	4b1c      	ldr	r3, [pc, #112]	; (8008474 <USBD_LL_Init+0x94>)
 8008402:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008406:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008408:	4b1a      	ldr	r3, [pc, #104]	; (8008474 <USBD_LL_Init+0x94>)
 800840a:	2204      	movs	r2, #4
 800840c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800840e:	4b19      	ldr	r3, [pc, #100]	; (8008474 <USBD_LL_Init+0x94>)
 8008410:	2202      	movs	r2, #2
 8008412:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008414:	4b17      	ldr	r3, [pc, #92]	; (8008474 <USBD_LL_Init+0x94>)
 8008416:	2200      	movs	r2, #0
 8008418:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800841a:	4b16      	ldr	r3, [pc, #88]	; (8008474 <USBD_LL_Init+0x94>)
 800841c:	2202      	movs	r2, #2
 800841e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008420:	4b14      	ldr	r3, [pc, #80]	; (8008474 <USBD_LL_Init+0x94>)
 8008422:	2200      	movs	r2, #0
 8008424:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008426:	4b13      	ldr	r3, [pc, #76]	; (8008474 <USBD_LL_Init+0x94>)
 8008428:	2200      	movs	r2, #0
 800842a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800842c:	4b11      	ldr	r3, [pc, #68]	; (8008474 <USBD_LL_Init+0x94>)
 800842e:	2200      	movs	r2, #0
 8008430:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008432:	4b10      	ldr	r3, [pc, #64]	; (8008474 <USBD_LL_Init+0x94>)
 8008434:	2200      	movs	r2, #0
 8008436:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008438:	4b0e      	ldr	r3, [pc, #56]	; (8008474 <USBD_LL_Init+0x94>)
 800843a:	2200      	movs	r2, #0
 800843c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800843e:	480d      	ldr	r0, [pc, #52]	; (8008474 <USBD_LL_Init+0x94>)
 8008440:	f7f9 fec2 	bl	80021c8 <HAL_PCD_Init>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800844a:	f7f8 fbf7 	bl	8000c3c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800844e:	2180      	movs	r1, #128	; 0x80
 8008450:	4808      	ldr	r0, [pc, #32]	; (8008474 <USBD_LL_Init+0x94>)
 8008452:	f7fb f91a 	bl	800368a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008456:	2240      	movs	r2, #64	; 0x40
 8008458:	2100      	movs	r1, #0
 800845a:	4806      	ldr	r0, [pc, #24]	; (8008474 <USBD_LL_Init+0x94>)
 800845c:	f7fb f8ce 	bl	80035fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008460:	2280      	movs	r2, #128	; 0x80
 8008462:	2101      	movs	r1, #1
 8008464:	4803      	ldr	r0, [pc, #12]	; (8008474 <USBD_LL_Init+0x94>)
 8008466:	f7fb f8c9 	bl	80035fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	20001c68 	.word	0x20001c68

08008478 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800848e:	4618      	mov	r0, r3
 8008490:	f7f9 ffb7 	bl	8002402 <HAL_PCD_Start>
 8008494:	4603      	mov	r3, r0
 8008496:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008498:	7bfb      	ldrb	r3, [r7, #15]
 800849a:	4618      	mov	r0, r3
 800849c:	f000 f942 	bl	8008724 <USBD_Get_USB_Status>
 80084a0:	4603      	mov	r3, r0
 80084a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b084      	sub	sp, #16
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	4608      	mov	r0, r1
 80084b8:	4611      	mov	r1, r2
 80084ba:	461a      	mov	r2, r3
 80084bc:	4603      	mov	r3, r0
 80084be:	70fb      	strb	r3, [r7, #3]
 80084c0:	460b      	mov	r3, r1
 80084c2:	70bb      	strb	r3, [r7, #2]
 80084c4:	4613      	mov	r3, r2
 80084c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80084d6:	78bb      	ldrb	r3, [r7, #2]
 80084d8:	883a      	ldrh	r2, [r7, #0]
 80084da:	78f9      	ldrb	r1, [r7, #3]
 80084dc:	f7fa fc88 	bl	8002df0 <HAL_PCD_EP_Open>
 80084e0:	4603      	mov	r3, r0
 80084e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 f91c 	bl	8008724 <USBD_Get_USB_Status>
 80084ec:	4603      	mov	r3, r0
 80084ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}

080084fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	460b      	mov	r3, r1
 8008504:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008514:	78fa      	ldrb	r2, [r7, #3]
 8008516:	4611      	mov	r1, r2
 8008518:	4618      	mov	r0, r3
 800851a:	f7fa fcd1 	bl	8002ec0 <HAL_PCD_EP_Close>
 800851e:	4603      	mov	r3, r0
 8008520:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	4618      	mov	r0, r3
 8008526:	f000 f8fd 	bl	8008724 <USBD_Get_USB_Status>
 800852a:	4603      	mov	r3, r0
 800852c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800852e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008544:	2300      	movs	r3, #0
 8008546:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008552:	78fa      	ldrb	r2, [r7, #3]
 8008554:	4611      	mov	r1, r2
 8008556:	4618      	mov	r0, r3
 8008558:	f7fa fda9 	bl	80030ae <HAL_PCD_EP_SetStall>
 800855c:	4603      	mov	r3, r0
 800855e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008560:	7bfb      	ldrb	r3, [r7, #15]
 8008562:	4618      	mov	r0, r3
 8008564:	f000 f8de 	bl	8008724 <USBD_Get_USB_Status>
 8008568:	4603      	mov	r3, r0
 800856a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800856c:	7bbb      	ldrb	r3, [r7, #14]
}
 800856e:	4618      	mov	r0, r3
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b084      	sub	sp, #16
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	460b      	mov	r3, r1
 8008580:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008590:	78fa      	ldrb	r2, [r7, #3]
 8008592:	4611      	mov	r1, r2
 8008594:	4618      	mov	r0, r3
 8008596:	f7fa fdee 	bl	8003176 <HAL_PCD_EP_ClrStall>
 800859a:	4603      	mov	r3, r0
 800859c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800859e:	7bfb      	ldrb	r3, [r7, #15]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 f8bf 	bl	8008724 <USBD_Get_USB_Status>
 80085a6:	4603      	mov	r3, r0
 80085a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80085c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	da0b      	bge.n	80085e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085d6:	68f9      	ldr	r1, [r7, #12]
 80085d8:	4613      	mov	r3, r2
 80085da:	00db      	lsls	r3, r3, #3
 80085dc:	4413      	add	r3, r2
 80085de:	009b      	lsls	r3, r3, #2
 80085e0:	440b      	add	r3, r1
 80085e2:	333e      	adds	r3, #62	; 0x3e
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	e00b      	b.n	8008600 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085e8:	78fb      	ldrb	r3, [r7, #3]
 80085ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085ee:	68f9      	ldr	r1, [r7, #12]
 80085f0:	4613      	mov	r3, r2
 80085f2:	00db      	lsls	r3, r3, #3
 80085f4:	4413      	add	r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	440b      	add	r3, r1
 80085fa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80085fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008600:	4618      	mov	r0, r3
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008626:	78fa      	ldrb	r2, [r7, #3]
 8008628:	4611      	mov	r1, r2
 800862a:	4618      	mov	r0, r3
 800862c:	f7fa fbbb 	bl	8002da6 <HAL_PCD_SetAddress>
 8008630:	4603      	mov	r3, r0
 8008632:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	4618      	mov	r0, r3
 8008638:	f000 f874 	bl	8008724 <USBD_Get_USB_Status>
 800863c:	4603      	mov	r3, r0
 800863e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008640:	7bbb      	ldrb	r3, [r7, #14]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b086      	sub	sp, #24
 800864e:	af00      	add	r7, sp, #0
 8008650:	60f8      	str	r0, [r7, #12]
 8008652:	607a      	str	r2, [r7, #4]
 8008654:	603b      	str	r3, [r7, #0]
 8008656:	460b      	mov	r3, r1
 8008658:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008668:	7af9      	ldrb	r1, [r7, #11]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	f7fa fcd4 	bl	800301a <HAL_PCD_EP_Transmit>
 8008672:	4603      	mov	r3, r0
 8008674:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008676:	7dfb      	ldrb	r3, [r7, #23]
 8008678:	4618      	mov	r0, r3
 800867a:	f000 f853 	bl	8008724 <USBD_Get_USB_Status>
 800867e:	4603      	mov	r3, r0
 8008680:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008682:	7dbb      	ldrb	r3, [r7, #22]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3718      	adds	r7, #24
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	607a      	str	r2, [r7, #4]
 8008696:	603b      	str	r3, [r7, #0]
 8008698:	460b      	mov	r3, r1
 800869a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086a0:	2300      	movs	r3, #0
 80086a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80086aa:	7af9      	ldrb	r1, [r7, #11]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	f7fa fc50 	bl	8002f54 <HAL_PCD_EP_Receive>
 80086b4:	4603      	mov	r3, r0
 80086b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 f832 	bl	8008724 <USBD_Get_USB_Status>
 80086c0:	4603      	mov	r3, r0
 80086c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b082      	sub	sp, #8
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	460b      	mov	r3, r1
 80086d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086e0:	78fa      	ldrb	r2, [r7, #3]
 80086e2:	4611      	mov	r1, r2
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7fa fc80 	bl	8002fea <HAL_PCD_EP_GetRxCount>
 80086ea:	4603      	mov	r3, r0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086fc:	4b03      	ldr	r3, [pc, #12]	; (800870c <USBD_static_malloc+0x18>)
}
 80086fe:	4618      	mov	r0, r3
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	20002174 	.word	0x20002174

08008710 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]

}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	4603      	mov	r3, r0
 800872c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008732:	79fb      	ldrb	r3, [r7, #7]
 8008734:	2b03      	cmp	r3, #3
 8008736:	d817      	bhi.n	8008768 <USBD_Get_USB_Status+0x44>
 8008738:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <USBD_Get_USB_Status+0x1c>)
 800873a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873e:	bf00      	nop
 8008740:	08008751 	.word	0x08008751
 8008744:	08008757 	.word	0x08008757
 8008748:	0800875d 	.word	0x0800875d
 800874c:	08008763 	.word	0x08008763
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	73fb      	strb	r3, [r7, #15]
    break;
 8008754:	e00b      	b.n	800876e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008756:	2303      	movs	r3, #3
 8008758:	73fb      	strb	r3, [r7, #15]
    break;
 800875a:	e008      	b.n	800876e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800875c:	2301      	movs	r3, #1
 800875e:	73fb      	strb	r3, [r7, #15]
    break;
 8008760:	e005      	b.n	800876e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008762:	2303      	movs	r3, #3
 8008764:	73fb      	strb	r3, [r7, #15]
    break;
 8008766:	e002      	b.n	800876e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008768:	2303      	movs	r3, #3
 800876a:	73fb      	strb	r3, [r7, #15]
    break;
 800876c:	bf00      	nop
  }
  return usb_status;
 800876e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <__errno>:
 800877c:	4b01      	ldr	r3, [pc, #4]	; (8008784 <__errno+0x8>)
 800877e:	6818      	ldr	r0, [r3, #0]
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	20000100 	.word	0x20000100

08008788 <__libc_init_array>:
 8008788:	b570      	push	{r4, r5, r6, lr}
 800878a:	4d0d      	ldr	r5, [pc, #52]	; (80087c0 <__libc_init_array+0x38>)
 800878c:	4c0d      	ldr	r4, [pc, #52]	; (80087c4 <__libc_init_array+0x3c>)
 800878e:	1b64      	subs	r4, r4, r5
 8008790:	10a4      	asrs	r4, r4, #2
 8008792:	2600      	movs	r6, #0
 8008794:	42a6      	cmp	r6, r4
 8008796:	d109      	bne.n	80087ac <__libc_init_array+0x24>
 8008798:	4d0b      	ldr	r5, [pc, #44]	; (80087c8 <__libc_init_array+0x40>)
 800879a:	4c0c      	ldr	r4, [pc, #48]	; (80087cc <__libc_init_array+0x44>)
 800879c:	f000 fca2 	bl	80090e4 <_init>
 80087a0:	1b64      	subs	r4, r4, r5
 80087a2:	10a4      	asrs	r4, r4, #2
 80087a4:	2600      	movs	r6, #0
 80087a6:	42a6      	cmp	r6, r4
 80087a8:	d105      	bne.n	80087b6 <__libc_init_array+0x2e>
 80087aa:	bd70      	pop	{r4, r5, r6, pc}
 80087ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80087b0:	4798      	blx	r3
 80087b2:	3601      	adds	r6, #1
 80087b4:	e7ee      	b.n	8008794 <__libc_init_array+0xc>
 80087b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ba:	4798      	blx	r3
 80087bc:	3601      	adds	r6, #1
 80087be:	e7f2      	b.n	80087a6 <__libc_init_array+0x1e>
 80087c0:	080093dc 	.word	0x080093dc
 80087c4:	080093dc 	.word	0x080093dc
 80087c8:	080093dc 	.word	0x080093dc
 80087cc:	080093e0 	.word	0x080093e0

080087d0 <memcpy>:
 80087d0:	440a      	add	r2, r1
 80087d2:	4291      	cmp	r1, r2
 80087d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80087d8:	d100      	bne.n	80087dc <memcpy+0xc>
 80087da:	4770      	bx	lr
 80087dc:	b510      	push	{r4, lr}
 80087de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087e6:	4291      	cmp	r1, r2
 80087e8:	d1f9      	bne.n	80087de <memcpy+0xe>
 80087ea:	bd10      	pop	{r4, pc}

080087ec <memset>:
 80087ec:	4402      	add	r2, r0
 80087ee:	4603      	mov	r3, r0
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d100      	bne.n	80087f6 <memset+0xa>
 80087f4:	4770      	bx	lr
 80087f6:	f803 1b01 	strb.w	r1, [r3], #1
 80087fa:	e7f9      	b.n	80087f0 <memset+0x4>

080087fc <sniprintf>:
 80087fc:	b40c      	push	{r2, r3}
 80087fe:	b530      	push	{r4, r5, lr}
 8008800:	4b17      	ldr	r3, [pc, #92]	; (8008860 <sniprintf+0x64>)
 8008802:	1e0c      	subs	r4, r1, #0
 8008804:	681d      	ldr	r5, [r3, #0]
 8008806:	b09d      	sub	sp, #116	; 0x74
 8008808:	da08      	bge.n	800881c <sniprintf+0x20>
 800880a:	238b      	movs	r3, #139	; 0x8b
 800880c:	602b      	str	r3, [r5, #0]
 800880e:	f04f 30ff 	mov.w	r0, #4294967295
 8008812:	b01d      	add	sp, #116	; 0x74
 8008814:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008818:	b002      	add	sp, #8
 800881a:	4770      	bx	lr
 800881c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008820:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008824:	bf14      	ite	ne
 8008826:	f104 33ff 	addne.w	r3, r4, #4294967295
 800882a:	4623      	moveq	r3, r4
 800882c:	9304      	str	r3, [sp, #16]
 800882e:	9307      	str	r3, [sp, #28]
 8008830:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008834:	9002      	str	r0, [sp, #8]
 8008836:	9006      	str	r0, [sp, #24]
 8008838:	f8ad 3016 	strh.w	r3, [sp, #22]
 800883c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800883e:	ab21      	add	r3, sp, #132	; 0x84
 8008840:	a902      	add	r1, sp, #8
 8008842:	4628      	mov	r0, r5
 8008844:	9301      	str	r3, [sp, #4]
 8008846:	f000 f869 	bl	800891c <_svfiprintf_r>
 800884a:	1c43      	adds	r3, r0, #1
 800884c:	bfbc      	itt	lt
 800884e:	238b      	movlt	r3, #139	; 0x8b
 8008850:	602b      	strlt	r3, [r5, #0]
 8008852:	2c00      	cmp	r4, #0
 8008854:	d0dd      	beq.n	8008812 <sniprintf+0x16>
 8008856:	9b02      	ldr	r3, [sp, #8]
 8008858:	2200      	movs	r2, #0
 800885a:	701a      	strb	r2, [r3, #0]
 800885c:	e7d9      	b.n	8008812 <sniprintf+0x16>
 800885e:	bf00      	nop
 8008860:	20000100 	.word	0x20000100

08008864 <__ssputs_r>:
 8008864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008868:	688e      	ldr	r6, [r1, #8]
 800886a:	429e      	cmp	r6, r3
 800886c:	4682      	mov	sl, r0
 800886e:	460c      	mov	r4, r1
 8008870:	4690      	mov	r8, r2
 8008872:	461f      	mov	r7, r3
 8008874:	d838      	bhi.n	80088e8 <__ssputs_r+0x84>
 8008876:	898a      	ldrh	r2, [r1, #12]
 8008878:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800887c:	d032      	beq.n	80088e4 <__ssputs_r+0x80>
 800887e:	6825      	ldr	r5, [r4, #0]
 8008880:	6909      	ldr	r1, [r1, #16]
 8008882:	eba5 0901 	sub.w	r9, r5, r1
 8008886:	6965      	ldr	r5, [r4, #20]
 8008888:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800888c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008890:	3301      	adds	r3, #1
 8008892:	444b      	add	r3, r9
 8008894:	106d      	asrs	r5, r5, #1
 8008896:	429d      	cmp	r5, r3
 8008898:	bf38      	it	cc
 800889a:	461d      	movcc	r5, r3
 800889c:	0553      	lsls	r3, r2, #21
 800889e:	d531      	bpl.n	8008904 <__ssputs_r+0xa0>
 80088a0:	4629      	mov	r1, r5
 80088a2:	f000 fb55 	bl	8008f50 <_malloc_r>
 80088a6:	4606      	mov	r6, r0
 80088a8:	b950      	cbnz	r0, 80088c0 <__ssputs_r+0x5c>
 80088aa:	230c      	movs	r3, #12
 80088ac:	f8ca 3000 	str.w	r3, [sl]
 80088b0:	89a3      	ldrh	r3, [r4, #12]
 80088b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088b6:	81a3      	strh	r3, [r4, #12]
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295
 80088bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c0:	6921      	ldr	r1, [r4, #16]
 80088c2:	464a      	mov	r2, r9
 80088c4:	f7ff ff84 	bl	80087d0 <memcpy>
 80088c8:	89a3      	ldrh	r3, [r4, #12]
 80088ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088d2:	81a3      	strh	r3, [r4, #12]
 80088d4:	6126      	str	r6, [r4, #16]
 80088d6:	6165      	str	r5, [r4, #20]
 80088d8:	444e      	add	r6, r9
 80088da:	eba5 0509 	sub.w	r5, r5, r9
 80088de:	6026      	str	r6, [r4, #0]
 80088e0:	60a5      	str	r5, [r4, #8]
 80088e2:	463e      	mov	r6, r7
 80088e4:	42be      	cmp	r6, r7
 80088e6:	d900      	bls.n	80088ea <__ssputs_r+0x86>
 80088e8:	463e      	mov	r6, r7
 80088ea:	6820      	ldr	r0, [r4, #0]
 80088ec:	4632      	mov	r2, r6
 80088ee:	4641      	mov	r1, r8
 80088f0:	f000 faa8 	bl	8008e44 <memmove>
 80088f4:	68a3      	ldr	r3, [r4, #8]
 80088f6:	1b9b      	subs	r3, r3, r6
 80088f8:	60a3      	str	r3, [r4, #8]
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	4433      	add	r3, r6
 80088fe:	6023      	str	r3, [r4, #0]
 8008900:	2000      	movs	r0, #0
 8008902:	e7db      	b.n	80088bc <__ssputs_r+0x58>
 8008904:	462a      	mov	r2, r5
 8008906:	f000 fb97 	bl	8009038 <_realloc_r>
 800890a:	4606      	mov	r6, r0
 800890c:	2800      	cmp	r0, #0
 800890e:	d1e1      	bne.n	80088d4 <__ssputs_r+0x70>
 8008910:	6921      	ldr	r1, [r4, #16]
 8008912:	4650      	mov	r0, sl
 8008914:	f000 fab0 	bl	8008e78 <_free_r>
 8008918:	e7c7      	b.n	80088aa <__ssputs_r+0x46>
	...

0800891c <_svfiprintf_r>:
 800891c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008920:	4698      	mov	r8, r3
 8008922:	898b      	ldrh	r3, [r1, #12]
 8008924:	061b      	lsls	r3, r3, #24
 8008926:	b09d      	sub	sp, #116	; 0x74
 8008928:	4607      	mov	r7, r0
 800892a:	460d      	mov	r5, r1
 800892c:	4614      	mov	r4, r2
 800892e:	d50e      	bpl.n	800894e <_svfiprintf_r+0x32>
 8008930:	690b      	ldr	r3, [r1, #16]
 8008932:	b963      	cbnz	r3, 800894e <_svfiprintf_r+0x32>
 8008934:	2140      	movs	r1, #64	; 0x40
 8008936:	f000 fb0b 	bl	8008f50 <_malloc_r>
 800893a:	6028      	str	r0, [r5, #0]
 800893c:	6128      	str	r0, [r5, #16]
 800893e:	b920      	cbnz	r0, 800894a <_svfiprintf_r+0x2e>
 8008940:	230c      	movs	r3, #12
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	f04f 30ff 	mov.w	r0, #4294967295
 8008948:	e0d1      	b.n	8008aee <_svfiprintf_r+0x1d2>
 800894a:	2340      	movs	r3, #64	; 0x40
 800894c:	616b      	str	r3, [r5, #20]
 800894e:	2300      	movs	r3, #0
 8008950:	9309      	str	r3, [sp, #36]	; 0x24
 8008952:	2320      	movs	r3, #32
 8008954:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008958:	f8cd 800c 	str.w	r8, [sp, #12]
 800895c:	2330      	movs	r3, #48	; 0x30
 800895e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b08 <_svfiprintf_r+0x1ec>
 8008962:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008966:	f04f 0901 	mov.w	r9, #1
 800896a:	4623      	mov	r3, r4
 800896c:	469a      	mov	sl, r3
 800896e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008972:	b10a      	cbz	r2, 8008978 <_svfiprintf_r+0x5c>
 8008974:	2a25      	cmp	r2, #37	; 0x25
 8008976:	d1f9      	bne.n	800896c <_svfiprintf_r+0x50>
 8008978:	ebba 0b04 	subs.w	fp, sl, r4
 800897c:	d00b      	beq.n	8008996 <_svfiprintf_r+0x7a>
 800897e:	465b      	mov	r3, fp
 8008980:	4622      	mov	r2, r4
 8008982:	4629      	mov	r1, r5
 8008984:	4638      	mov	r0, r7
 8008986:	f7ff ff6d 	bl	8008864 <__ssputs_r>
 800898a:	3001      	adds	r0, #1
 800898c:	f000 80aa 	beq.w	8008ae4 <_svfiprintf_r+0x1c8>
 8008990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008992:	445a      	add	r2, fp
 8008994:	9209      	str	r2, [sp, #36]	; 0x24
 8008996:	f89a 3000 	ldrb.w	r3, [sl]
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 80a2 	beq.w	8008ae4 <_svfiprintf_r+0x1c8>
 80089a0:	2300      	movs	r3, #0
 80089a2:	f04f 32ff 	mov.w	r2, #4294967295
 80089a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089aa:	f10a 0a01 	add.w	sl, sl, #1
 80089ae:	9304      	str	r3, [sp, #16]
 80089b0:	9307      	str	r3, [sp, #28]
 80089b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089b6:	931a      	str	r3, [sp, #104]	; 0x68
 80089b8:	4654      	mov	r4, sl
 80089ba:	2205      	movs	r2, #5
 80089bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089c0:	4851      	ldr	r0, [pc, #324]	; (8008b08 <_svfiprintf_r+0x1ec>)
 80089c2:	f7f7 fc05 	bl	80001d0 <memchr>
 80089c6:	9a04      	ldr	r2, [sp, #16]
 80089c8:	b9d8      	cbnz	r0, 8008a02 <_svfiprintf_r+0xe6>
 80089ca:	06d0      	lsls	r0, r2, #27
 80089cc:	bf44      	itt	mi
 80089ce:	2320      	movmi	r3, #32
 80089d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089d4:	0711      	lsls	r1, r2, #28
 80089d6:	bf44      	itt	mi
 80089d8:	232b      	movmi	r3, #43	; 0x2b
 80089da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089de:	f89a 3000 	ldrb.w	r3, [sl]
 80089e2:	2b2a      	cmp	r3, #42	; 0x2a
 80089e4:	d015      	beq.n	8008a12 <_svfiprintf_r+0xf6>
 80089e6:	9a07      	ldr	r2, [sp, #28]
 80089e8:	4654      	mov	r4, sl
 80089ea:	2000      	movs	r0, #0
 80089ec:	f04f 0c0a 	mov.w	ip, #10
 80089f0:	4621      	mov	r1, r4
 80089f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089f6:	3b30      	subs	r3, #48	; 0x30
 80089f8:	2b09      	cmp	r3, #9
 80089fa:	d94e      	bls.n	8008a9a <_svfiprintf_r+0x17e>
 80089fc:	b1b0      	cbz	r0, 8008a2c <_svfiprintf_r+0x110>
 80089fe:	9207      	str	r2, [sp, #28]
 8008a00:	e014      	b.n	8008a2c <_svfiprintf_r+0x110>
 8008a02:	eba0 0308 	sub.w	r3, r0, r8
 8008a06:	fa09 f303 	lsl.w	r3, r9, r3
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	9304      	str	r3, [sp, #16]
 8008a0e:	46a2      	mov	sl, r4
 8008a10:	e7d2      	b.n	80089b8 <_svfiprintf_r+0x9c>
 8008a12:	9b03      	ldr	r3, [sp, #12]
 8008a14:	1d19      	adds	r1, r3, #4
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	9103      	str	r1, [sp, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	bfbb      	ittet	lt
 8008a1e:	425b      	neglt	r3, r3
 8008a20:	f042 0202 	orrlt.w	r2, r2, #2
 8008a24:	9307      	strge	r3, [sp, #28]
 8008a26:	9307      	strlt	r3, [sp, #28]
 8008a28:	bfb8      	it	lt
 8008a2a:	9204      	strlt	r2, [sp, #16]
 8008a2c:	7823      	ldrb	r3, [r4, #0]
 8008a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8008a30:	d10c      	bne.n	8008a4c <_svfiprintf_r+0x130>
 8008a32:	7863      	ldrb	r3, [r4, #1]
 8008a34:	2b2a      	cmp	r3, #42	; 0x2a
 8008a36:	d135      	bne.n	8008aa4 <_svfiprintf_r+0x188>
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	1d1a      	adds	r2, r3, #4
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	9203      	str	r2, [sp, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	bfb8      	it	lt
 8008a44:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a48:	3402      	adds	r4, #2
 8008a4a:	9305      	str	r3, [sp, #20]
 8008a4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b18 <_svfiprintf_r+0x1fc>
 8008a50:	7821      	ldrb	r1, [r4, #0]
 8008a52:	2203      	movs	r2, #3
 8008a54:	4650      	mov	r0, sl
 8008a56:	f7f7 fbbb 	bl	80001d0 <memchr>
 8008a5a:	b140      	cbz	r0, 8008a6e <_svfiprintf_r+0x152>
 8008a5c:	2340      	movs	r3, #64	; 0x40
 8008a5e:	eba0 000a 	sub.w	r0, r0, sl
 8008a62:	fa03 f000 	lsl.w	r0, r3, r0
 8008a66:	9b04      	ldr	r3, [sp, #16]
 8008a68:	4303      	orrs	r3, r0
 8008a6a:	3401      	adds	r4, #1
 8008a6c:	9304      	str	r3, [sp, #16]
 8008a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a72:	4826      	ldr	r0, [pc, #152]	; (8008b0c <_svfiprintf_r+0x1f0>)
 8008a74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a78:	2206      	movs	r2, #6
 8008a7a:	f7f7 fba9 	bl	80001d0 <memchr>
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d038      	beq.n	8008af4 <_svfiprintf_r+0x1d8>
 8008a82:	4b23      	ldr	r3, [pc, #140]	; (8008b10 <_svfiprintf_r+0x1f4>)
 8008a84:	bb1b      	cbnz	r3, 8008ace <_svfiprintf_r+0x1b2>
 8008a86:	9b03      	ldr	r3, [sp, #12]
 8008a88:	3307      	adds	r3, #7
 8008a8a:	f023 0307 	bic.w	r3, r3, #7
 8008a8e:	3308      	adds	r3, #8
 8008a90:	9303      	str	r3, [sp, #12]
 8008a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a94:	4433      	add	r3, r6
 8008a96:	9309      	str	r3, [sp, #36]	; 0x24
 8008a98:	e767      	b.n	800896a <_svfiprintf_r+0x4e>
 8008a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	2001      	movs	r0, #1
 8008aa2:	e7a5      	b.n	80089f0 <_svfiprintf_r+0xd4>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	3401      	adds	r4, #1
 8008aa8:	9305      	str	r3, [sp, #20]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	f04f 0c0a 	mov.w	ip, #10
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ab6:	3a30      	subs	r2, #48	; 0x30
 8008ab8:	2a09      	cmp	r2, #9
 8008aba:	d903      	bls.n	8008ac4 <_svfiprintf_r+0x1a8>
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d0c5      	beq.n	8008a4c <_svfiprintf_r+0x130>
 8008ac0:	9105      	str	r1, [sp, #20]
 8008ac2:	e7c3      	b.n	8008a4c <_svfiprintf_r+0x130>
 8008ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ac8:	4604      	mov	r4, r0
 8008aca:	2301      	movs	r3, #1
 8008acc:	e7f0      	b.n	8008ab0 <_svfiprintf_r+0x194>
 8008ace:	ab03      	add	r3, sp, #12
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	462a      	mov	r2, r5
 8008ad4:	4b0f      	ldr	r3, [pc, #60]	; (8008b14 <_svfiprintf_r+0x1f8>)
 8008ad6:	a904      	add	r1, sp, #16
 8008ad8:	4638      	mov	r0, r7
 8008ada:	f3af 8000 	nop.w
 8008ade:	1c42      	adds	r2, r0, #1
 8008ae0:	4606      	mov	r6, r0
 8008ae2:	d1d6      	bne.n	8008a92 <_svfiprintf_r+0x176>
 8008ae4:	89ab      	ldrh	r3, [r5, #12]
 8008ae6:	065b      	lsls	r3, r3, #25
 8008ae8:	f53f af2c 	bmi.w	8008944 <_svfiprintf_r+0x28>
 8008aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aee:	b01d      	add	sp, #116	; 0x74
 8008af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af4:	ab03      	add	r3, sp, #12
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	462a      	mov	r2, r5
 8008afa:	4b06      	ldr	r3, [pc, #24]	; (8008b14 <_svfiprintf_r+0x1f8>)
 8008afc:	a904      	add	r1, sp, #16
 8008afe:	4638      	mov	r0, r7
 8008b00:	f000 f87a 	bl	8008bf8 <_printf_i>
 8008b04:	e7eb      	b.n	8008ade <_svfiprintf_r+0x1c2>
 8008b06:	bf00      	nop
 8008b08:	080093a0 	.word	0x080093a0
 8008b0c:	080093aa 	.word	0x080093aa
 8008b10:	00000000 	.word	0x00000000
 8008b14:	08008865 	.word	0x08008865
 8008b18:	080093a6 	.word	0x080093a6

08008b1c <_printf_common>:
 8008b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b20:	4616      	mov	r6, r2
 8008b22:	4699      	mov	r9, r3
 8008b24:	688a      	ldr	r2, [r1, #8]
 8008b26:	690b      	ldr	r3, [r1, #16]
 8008b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	bfb8      	it	lt
 8008b30:	4613      	movlt	r3, r2
 8008b32:	6033      	str	r3, [r6, #0]
 8008b34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b38:	4607      	mov	r7, r0
 8008b3a:	460c      	mov	r4, r1
 8008b3c:	b10a      	cbz	r2, 8008b42 <_printf_common+0x26>
 8008b3e:	3301      	adds	r3, #1
 8008b40:	6033      	str	r3, [r6, #0]
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	0699      	lsls	r1, r3, #26
 8008b46:	bf42      	ittt	mi
 8008b48:	6833      	ldrmi	r3, [r6, #0]
 8008b4a:	3302      	addmi	r3, #2
 8008b4c:	6033      	strmi	r3, [r6, #0]
 8008b4e:	6825      	ldr	r5, [r4, #0]
 8008b50:	f015 0506 	ands.w	r5, r5, #6
 8008b54:	d106      	bne.n	8008b64 <_printf_common+0x48>
 8008b56:	f104 0a19 	add.w	sl, r4, #25
 8008b5a:	68e3      	ldr	r3, [r4, #12]
 8008b5c:	6832      	ldr	r2, [r6, #0]
 8008b5e:	1a9b      	subs	r3, r3, r2
 8008b60:	42ab      	cmp	r3, r5
 8008b62:	dc26      	bgt.n	8008bb2 <_printf_common+0x96>
 8008b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b68:	1e13      	subs	r3, r2, #0
 8008b6a:	6822      	ldr	r2, [r4, #0]
 8008b6c:	bf18      	it	ne
 8008b6e:	2301      	movne	r3, #1
 8008b70:	0692      	lsls	r2, r2, #26
 8008b72:	d42b      	bmi.n	8008bcc <_printf_common+0xb0>
 8008b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b78:	4649      	mov	r1, r9
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	47c0      	blx	r8
 8008b7e:	3001      	adds	r0, #1
 8008b80:	d01e      	beq.n	8008bc0 <_printf_common+0xa4>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	68e5      	ldr	r5, [r4, #12]
 8008b86:	6832      	ldr	r2, [r6, #0]
 8008b88:	f003 0306 	and.w	r3, r3, #6
 8008b8c:	2b04      	cmp	r3, #4
 8008b8e:	bf08      	it	eq
 8008b90:	1aad      	subeq	r5, r5, r2
 8008b92:	68a3      	ldr	r3, [r4, #8]
 8008b94:	6922      	ldr	r2, [r4, #16]
 8008b96:	bf0c      	ite	eq
 8008b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b9c:	2500      	movne	r5, #0
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	bfc4      	itt	gt
 8008ba2:	1a9b      	subgt	r3, r3, r2
 8008ba4:	18ed      	addgt	r5, r5, r3
 8008ba6:	2600      	movs	r6, #0
 8008ba8:	341a      	adds	r4, #26
 8008baa:	42b5      	cmp	r5, r6
 8008bac:	d11a      	bne.n	8008be4 <_printf_common+0xc8>
 8008bae:	2000      	movs	r0, #0
 8008bb0:	e008      	b.n	8008bc4 <_printf_common+0xa8>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	4652      	mov	r2, sl
 8008bb6:	4649      	mov	r1, r9
 8008bb8:	4638      	mov	r0, r7
 8008bba:	47c0      	blx	r8
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d103      	bne.n	8008bc8 <_printf_common+0xac>
 8008bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc8:	3501      	adds	r5, #1
 8008bca:	e7c6      	b.n	8008b5a <_printf_common+0x3e>
 8008bcc:	18e1      	adds	r1, r4, r3
 8008bce:	1c5a      	adds	r2, r3, #1
 8008bd0:	2030      	movs	r0, #48	; 0x30
 8008bd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bd6:	4422      	add	r2, r4
 8008bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008be0:	3302      	adds	r3, #2
 8008be2:	e7c7      	b.n	8008b74 <_printf_common+0x58>
 8008be4:	2301      	movs	r3, #1
 8008be6:	4622      	mov	r2, r4
 8008be8:	4649      	mov	r1, r9
 8008bea:	4638      	mov	r0, r7
 8008bec:	47c0      	blx	r8
 8008bee:	3001      	adds	r0, #1
 8008bf0:	d0e6      	beq.n	8008bc0 <_printf_common+0xa4>
 8008bf2:	3601      	adds	r6, #1
 8008bf4:	e7d9      	b.n	8008baa <_printf_common+0x8e>
	...

08008bf8 <_printf_i>:
 8008bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bfc:	7e0f      	ldrb	r7, [r1, #24]
 8008bfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c00:	2f78      	cmp	r7, #120	; 0x78
 8008c02:	4691      	mov	r9, r2
 8008c04:	4680      	mov	r8, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	469a      	mov	sl, r3
 8008c0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c0e:	d807      	bhi.n	8008c20 <_printf_i+0x28>
 8008c10:	2f62      	cmp	r7, #98	; 0x62
 8008c12:	d80a      	bhi.n	8008c2a <_printf_i+0x32>
 8008c14:	2f00      	cmp	r7, #0
 8008c16:	f000 80d8 	beq.w	8008dca <_printf_i+0x1d2>
 8008c1a:	2f58      	cmp	r7, #88	; 0x58
 8008c1c:	f000 80a3 	beq.w	8008d66 <_printf_i+0x16e>
 8008c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c28:	e03a      	b.n	8008ca0 <_printf_i+0xa8>
 8008c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c2e:	2b15      	cmp	r3, #21
 8008c30:	d8f6      	bhi.n	8008c20 <_printf_i+0x28>
 8008c32:	a101      	add	r1, pc, #4	; (adr r1, 8008c38 <_printf_i+0x40>)
 8008c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c38:	08008c91 	.word	0x08008c91
 8008c3c:	08008ca5 	.word	0x08008ca5
 8008c40:	08008c21 	.word	0x08008c21
 8008c44:	08008c21 	.word	0x08008c21
 8008c48:	08008c21 	.word	0x08008c21
 8008c4c:	08008c21 	.word	0x08008c21
 8008c50:	08008ca5 	.word	0x08008ca5
 8008c54:	08008c21 	.word	0x08008c21
 8008c58:	08008c21 	.word	0x08008c21
 8008c5c:	08008c21 	.word	0x08008c21
 8008c60:	08008c21 	.word	0x08008c21
 8008c64:	08008db1 	.word	0x08008db1
 8008c68:	08008cd5 	.word	0x08008cd5
 8008c6c:	08008d93 	.word	0x08008d93
 8008c70:	08008c21 	.word	0x08008c21
 8008c74:	08008c21 	.word	0x08008c21
 8008c78:	08008dd3 	.word	0x08008dd3
 8008c7c:	08008c21 	.word	0x08008c21
 8008c80:	08008cd5 	.word	0x08008cd5
 8008c84:	08008c21 	.word	0x08008c21
 8008c88:	08008c21 	.word	0x08008c21
 8008c8c:	08008d9b 	.word	0x08008d9b
 8008c90:	682b      	ldr	r3, [r5, #0]
 8008c92:	1d1a      	adds	r2, r3, #4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	602a      	str	r2, [r5, #0]
 8008c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e0a3      	b.n	8008dec <_printf_i+0x1f4>
 8008ca4:	6820      	ldr	r0, [r4, #0]
 8008ca6:	6829      	ldr	r1, [r5, #0]
 8008ca8:	0606      	lsls	r6, r0, #24
 8008caa:	f101 0304 	add.w	r3, r1, #4
 8008cae:	d50a      	bpl.n	8008cc6 <_printf_i+0xce>
 8008cb0:	680e      	ldr	r6, [r1, #0]
 8008cb2:	602b      	str	r3, [r5, #0]
 8008cb4:	2e00      	cmp	r6, #0
 8008cb6:	da03      	bge.n	8008cc0 <_printf_i+0xc8>
 8008cb8:	232d      	movs	r3, #45	; 0x2d
 8008cba:	4276      	negs	r6, r6
 8008cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cc0:	485e      	ldr	r0, [pc, #376]	; (8008e3c <_printf_i+0x244>)
 8008cc2:	230a      	movs	r3, #10
 8008cc4:	e019      	b.n	8008cfa <_printf_i+0x102>
 8008cc6:	680e      	ldr	r6, [r1, #0]
 8008cc8:	602b      	str	r3, [r5, #0]
 8008cca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cce:	bf18      	it	ne
 8008cd0:	b236      	sxthne	r6, r6
 8008cd2:	e7ef      	b.n	8008cb4 <_printf_i+0xbc>
 8008cd4:	682b      	ldr	r3, [r5, #0]
 8008cd6:	6820      	ldr	r0, [r4, #0]
 8008cd8:	1d19      	adds	r1, r3, #4
 8008cda:	6029      	str	r1, [r5, #0]
 8008cdc:	0601      	lsls	r1, r0, #24
 8008cde:	d501      	bpl.n	8008ce4 <_printf_i+0xec>
 8008ce0:	681e      	ldr	r6, [r3, #0]
 8008ce2:	e002      	b.n	8008cea <_printf_i+0xf2>
 8008ce4:	0646      	lsls	r6, r0, #25
 8008ce6:	d5fb      	bpl.n	8008ce0 <_printf_i+0xe8>
 8008ce8:	881e      	ldrh	r6, [r3, #0]
 8008cea:	4854      	ldr	r0, [pc, #336]	; (8008e3c <_printf_i+0x244>)
 8008cec:	2f6f      	cmp	r7, #111	; 0x6f
 8008cee:	bf0c      	ite	eq
 8008cf0:	2308      	moveq	r3, #8
 8008cf2:	230a      	movne	r3, #10
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cfa:	6865      	ldr	r5, [r4, #4]
 8008cfc:	60a5      	str	r5, [r4, #8]
 8008cfe:	2d00      	cmp	r5, #0
 8008d00:	bfa2      	ittt	ge
 8008d02:	6821      	ldrge	r1, [r4, #0]
 8008d04:	f021 0104 	bicge.w	r1, r1, #4
 8008d08:	6021      	strge	r1, [r4, #0]
 8008d0a:	b90e      	cbnz	r6, 8008d10 <_printf_i+0x118>
 8008d0c:	2d00      	cmp	r5, #0
 8008d0e:	d04d      	beq.n	8008dac <_printf_i+0x1b4>
 8008d10:	4615      	mov	r5, r2
 8008d12:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d16:	fb03 6711 	mls	r7, r3, r1, r6
 8008d1a:	5dc7      	ldrb	r7, [r0, r7]
 8008d1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d20:	4637      	mov	r7, r6
 8008d22:	42bb      	cmp	r3, r7
 8008d24:	460e      	mov	r6, r1
 8008d26:	d9f4      	bls.n	8008d12 <_printf_i+0x11a>
 8008d28:	2b08      	cmp	r3, #8
 8008d2a:	d10b      	bne.n	8008d44 <_printf_i+0x14c>
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	07de      	lsls	r6, r3, #31
 8008d30:	d508      	bpl.n	8008d44 <_printf_i+0x14c>
 8008d32:	6923      	ldr	r3, [r4, #16]
 8008d34:	6861      	ldr	r1, [r4, #4]
 8008d36:	4299      	cmp	r1, r3
 8008d38:	bfde      	ittt	le
 8008d3a:	2330      	movle	r3, #48	; 0x30
 8008d3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d44:	1b52      	subs	r2, r2, r5
 8008d46:	6122      	str	r2, [r4, #16]
 8008d48:	f8cd a000 	str.w	sl, [sp]
 8008d4c:	464b      	mov	r3, r9
 8008d4e:	aa03      	add	r2, sp, #12
 8008d50:	4621      	mov	r1, r4
 8008d52:	4640      	mov	r0, r8
 8008d54:	f7ff fee2 	bl	8008b1c <_printf_common>
 8008d58:	3001      	adds	r0, #1
 8008d5a:	d14c      	bne.n	8008df6 <_printf_i+0x1fe>
 8008d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d60:	b004      	add	sp, #16
 8008d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d66:	4835      	ldr	r0, [pc, #212]	; (8008e3c <_printf_i+0x244>)
 8008d68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d6c:	6829      	ldr	r1, [r5, #0]
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d74:	6029      	str	r1, [r5, #0]
 8008d76:	061d      	lsls	r5, r3, #24
 8008d78:	d514      	bpl.n	8008da4 <_printf_i+0x1ac>
 8008d7a:	07df      	lsls	r7, r3, #31
 8008d7c:	bf44      	itt	mi
 8008d7e:	f043 0320 	orrmi.w	r3, r3, #32
 8008d82:	6023      	strmi	r3, [r4, #0]
 8008d84:	b91e      	cbnz	r6, 8008d8e <_printf_i+0x196>
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	f023 0320 	bic.w	r3, r3, #32
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	2310      	movs	r3, #16
 8008d90:	e7b0      	b.n	8008cf4 <_printf_i+0xfc>
 8008d92:	6823      	ldr	r3, [r4, #0]
 8008d94:	f043 0320 	orr.w	r3, r3, #32
 8008d98:	6023      	str	r3, [r4, #0]
 8008d9a:	2378      	movs	r3, #120	; 0x78
 8008d9c:	4828      	ldr	r0, [pc, #160]	; (8008e40 <_printf_i+0x248>)
 8008d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008da2:	e7e3      	b.n	8008d6c <_printf_i+0x174>
 8008da4:	0659      	lsls	r1, r3, #25
 8008da6:	bf48      	it	mi
 8008da8:	b2b6      	uxthmi	r6, r6
 8008daa:	e7e6      	b.n	8008d7a <_printf_i+0x182>
 8008dac:	4615      	mov	r5, r2
 8008dae:	e7bb      	b.n	8008d28 <_printf_i+0x130>
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	6826      	ldr	r6, [r4, #0]
 8008db4:	6961      	ldr	r1, [r4, #20]
 8008db6:	1d18      	adds	r0, r3, #4
 8008db8:	6028      	str	r0, [r5, #0]
 8008dba:	0635      	lsls	r5, r6, #24
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	d501      	bpl.n	8008dc4 <_printf_i+0x1cc>
 8008dc0:	6019      	str	r1, [r3, #0]
 8008dc2:	e002      	b.n	8008dca <_printf_i+0x1d2>
 8008dc4:	0670      	lsls	r0, r6, #25
 8008dc6:	d5fb      	bpl.n	8008dc0 <_printf_i+0x1c8>
 8008dc8:	8019      	strh	r1, [r3, #0]
 8008dca:	2300      	movs	r3, #0
 8008dcc:	6123      	str	r3, [r4, #16]
 8008dce:	4615      	mov	r5, r2
 8008dd0:	e7ba      	b.n	8008d48 <_printf_i+0x150>
 8008dd2:	682b      	ldr	r3, [r5, #0]
 8008dd4:	1d1a      	adds	r2, r3, #4
 8008dd6:	602a      	str	r2, [r5, #0]
 8008dd8:	681d      	ldr	r5, [r3, #0]
 8008dda:	6862      	ldr	r2, [r4, #4]
 8008ddc:	2100      	movs	r1, #0
 8008dde:	4628      	mov	r0, r5
 8008de0:	f7f7 f9f6 	bl	80001d0 <memchr>
 8008de4:	b108      	cbz	r0, 8008dea <_printf_i+0x1f2>
 8008de6:	1b40      	subs	r0, r0, r5
 8008de8:	6060      	str	r0, [r4, #4]
 8008dea:	6863      	ldr	r3, [r4, #4]
 8008dec:	6123      	str	r3, [r4, #16]
 8008dee:	2300      	movs	r3, #0
 8008df0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008df4:	e7a8      	b.n	8008d48 <_printf_i+0x150>
 8008df6:	6923      	ldr	r3, [r4, #16]
 8008df8:	462a      	mov	r2, r5
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	4640      	mov	r0, r8
 8008dfe:	47d0      	blx	sl
 8008e00:	3001      	adds	r0, #1
 8008e02:	d0ab      	beq.n	8008d5c <_printf_i+0x164>
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	079b      	lsls	r3, r3, #30
 8008e08:	d413      	bmi.n	8008e32 <_printf_i+0x23a>
 8008e0a:	68e0      	ldr	r0, [r4, #12]
 8008e0c:	9b03      	ldr	r3, [sp, #12]
 8008e0e:	4298      	cmp	r0, r3
 8008e10:	bfb8      	it	lt
 8008e12:	4618      	movlt	r0, r3
 8008e14:	e7a4      	b.n	8008d60 <_printf_i+0x168>
 8008e16:	2301      	movs	r3, #1
 8008e18:	4632      	mov	r2, r6
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	4640      	mov	r0, r8
 8008e1e:	47d0      	blx	sl
 8008e20:	3001      	adds	r0, #1
 8008e22:	d09b      	beq.n	8008d5c <_printf_i+0x164>
 8008e24:	3501      	adds	r5, #1
 8008e26:	68e3      	ldr	r3, [r4, #12]
 8008e28:	9903      	ldr	r1, [sp, #12]
 8008e2a:	1a5b      	subs	r3, r3, r1
 8008e2c:	42ab      	cmp	r3, r5
 8008e2e:	dcf2      	bgt.n	8008e16 <_printf_i+0x21e>
 8008e30:	e7eb      	b.n	8008e0a <_printf_i+0x212>
 8008e32:	2500      	movs	r5, #0
 8008e34:	f104 0619 	add.w	r6, r4, #25
 8008e38:	e7f5      	b.n	8008e26 <_printf_i+0x22e>
 8008e3a:	bf00      	nop
 8008e3c:	080093b1 	.word	0x080093b1
 8008e40:	080093c2 	.word	0x080093c2

08008e44 <memmove>:
 8008e44:	4288      	cmp	r0, r1
 8008e46:	b510      	push	{r4, lr}
 8008e48:	eb01 0402 	add.w	r4, r1, r2
 8008e4c:	d902      	bls.n	8008e54 <memmove+0x10>
 8008e4e:	4284      	cmp	r4, r0
 8008e50:	4623      	mov	r3, r4
 8008e52:	d807      	bhi.n	8008e64 <memmove+0x20>
 8008e54:	1e43      	subs	r3, r0, #1
 8008e56:	42a1      	cmp	r1, r4
 8008e58:	d008      	beq.n	8008e6c <memmove+0x28>
 8008e5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e62:	e7f8      	b.n	8008e56 <memmove+0x12>
 8008e64:	4402      	add	r2, r0
 8008e66:	4601      	mov	r1, r0
 8008e68:	428a      	cmp	r2, r1
 8008e6a:	d100      	bne.n	8008e6e <memmove+0x2a>
 8008e6c:	bd10      	pop	{r4, pc}
 8008e6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e76:	e7f7      	b.n	8008e68 <memmove+0x24>

08008e78 <_free_r>:
 8008e78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e7a:	2900      	cmp	r1, #0
 8008e7c:	d044      	beq.n	8008f08 <_free_r+0x90>
 8008e7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e82:	9001      	str	r0, [sp, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f1a1 0404 	sub.w	r4, r1, #4
 8008e8a:	bfb8      	it	lt
 8008e8c:	18e4      	addlt	r4, r4, r3
 8008e8e:	f000 f913 	bl	80090b8 <__malloc_lock>
 8008e92:	4a1e      	ldr	r2, [pc, #120]	; (8008f0c <_free_r+0x94>)
 8008e94:	9801      	ldr	r0, [sp, #4]
 8008e96:	6813      	ldr	r3, [r2, #0]
 8008e98:	b933      	cbnz	r3, 8008ea8 <_free_r+0x30>
 8008e9a:	6063      	str	r3, [r4, #4]
 8008e9c:	6014      	str	r4, [r2, #0]
 8008e9e:	b003      	add	sp, #12
 8008ea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ea4:	f000 b90e 	b.w	80090c4 <__malloc_unlock>
 8008ea8:	42a3      	cmp	r3, r4
 8008eaa:	d908      	bls.n	8008ebe <_free_r+0x46>
 8008eac:	6825      	ldr	r5, [r4, #0]
 8008eae:	1961      	adds	r1, r4, r5
 8008eb0:	428b      	cmp	r3, r1
 8008eb2:	bf01      	itttt	eq
 8008eb4:	6819      	ldreq	r1, [r3, #0]
 8008eb6:	685b      	ldreq	r3, [r3, #4]
 8008eb8:	1949      	addeq	r1, r1, r5
 8008eba:	6021      	streq	r1, [r4, #0]
 8008ebc:	e7ed      	b.n	8008e9a <_free_r+0x22>
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	b10b      	cbz	r3, 8008ec8 <_free_r+0x50>
 8008ec4:	42a3      	cmp	r3, r4
 8008ec6:	d9fa      	bls.n	8008ebe <_free_r+0x46>
 8008ec8:	6811      	ldr	r1, [r2, #0]
 8008eca:	1855      	adds	r5, r2, r1
 8008ecc:	42a5      	cmp	r5, r4
 8008ece:	d10b      	bne.n	8008ee8 <_free_r+0x70>
 8008ed0:	6824      	ldr	r4, [r4, #0]
 8008ed2:	4421      	add	r1, r4
 8008ed4:	1854      	adds	r4, r2, r1
 8008ed6:	42a3      	cmp	r3, r4
 8008ed8:	6011      	str	r1, [r2, #0]
 8008eda:	d1e0      	bne.n	8008e9e <_free_r+0x26>
 8008edc:	681c      	ldr	r4, [r3, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	6053      	str	r3, [r2, #4]
 8008ee2:	4421      	add	r1, r4
 8008ee4:	6011      	str	r1, [r2, #0]
 8008ee6:	e7da      	b.n	8008e9e <_free_r+0x26>
 8008ee8:	d902      	bls.n	8008ef0 <_free_r+0x78>
 8008eea:	230c      	movs	r3, #12
 8008eec:	6003      	str	r3, [r0, #0]
 8008eee:	e7d6      	b.n	8008e9e <_free_r+0x26>
 8008ef0:	6825      	ldr	r5, [r4, #0]
 8008ef2:	1961      	adds	r1, r4, r5
 8008ef4:	428b      	cmp	r3, r1
 8008ef6:	bf04      	itt	eq
 8008ef8:	6819      	ldreq	r1, [r3, #0]
 8008efa:	685b      	ldreq	r3, [r3, #4]
 8008efc:	6063      	str	r3, [r4, #4]
 8008efe:	bf04      	itt	eq
 8008f00:	1949      	addeq	r1, r1, r5
 8008f02:	6021      	streq	r1, [r4, #0]
 8008f04:	6054      	str	r4, [r2, #4]
 8008f06:	e7ca      	b.n	8008e9e <_free_r+0x26>
 8008f08:	b003      	add	sp, #12
 8008f0a:	bd30      	pop	{r4, r5, pc}
 8008f0c:	20002394 	.word	0x20002394

08008f10 <sbrk_aligned>:
 8008f10:	b570      	push	{r4, r5, r6, lr}
 8008f12:	4e0e      	ldr	r6, [pc, #56]	; (8008f4c <sbrk_aligned+0x3c>)
 8008f14:	460c      	mov	r4, r1
 8008f16:	6831      	ldr	r1, [r6, #0]
 8008f18:	4605      	mov	r5, r0
 8008f1a:	b911      	cbnz	r1, 8008f22 <sbrk_aligned+0x12>
 8008f1c:	f000 f8bc 	bl	8009098 <_sbrk_r>
 8008f20:	6030      	str	r0, [r6, #0]
 8008f22:	4621      	mov	r1, r4
 8008f24:	4628      	mov	r0, r5
 8008f26:	f000 f8b7 	bl	8009098 <_sbrk_r>
 8008f2a:	1c43      	adds	r3, r0, #1
 8008f2c:	d00a      	beq.n	8008f44 <sbrk_aligned+0x34>
 8008f2e:	1cc4      	adds	r4, r0, #3
 8008f30:	f024 0403 	bic.w	r4, r4, #3
 8008f34:	42a0      	cmp	r0, r4
 8008f36:	d007      	beq.n	8008f48 <sbrk_aligned+0x38>
 8008f38:	1a21      	subs	r1, r4, r0
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	f000 f8ac 	bl	8009098 <_sbrk_r>
 8008f40:	3001      	adds	r0, #1
 8008f42:	d101      	bne.n	8008f48 <sbrk_aligned+0x38>
 8008f44:	f04f 34ff 	mov.w	r4, #4294967295
 8008f48:	4620      	mov	r0, r4
 8008f4a:	bd70      	pop	{r4, r5, r6, pc}
 8008f4c:	20002398 	.word	0x20002398

08008f50 <_malloc_r>:
 8008f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f54:	1ccd      	adds	r5, r1, #3
 8008f56:	f025 0503 	bic.w	r5, r5, #3
 8008f5a:	3508      	adds	r5, #8
 8008f5c:	2d0c      	cmp	r5, #12
 8008f5e:	bf38      	it	cc
 8008f60:	250c      	movcc	r5, #12
 8008f62:	2d00      	cmp	r5, #0
 8008f64:	4607      	mov	r7, r0
 8008f66:	db01      	blt.n	8008f6c <_malloc_r+0x1c>
 8008f68:	42a9      	cmp	r1, r5
 8008f6a:	d905      	bls.n	8008f78 <_malloc_r+0x28>
 8008f6c:	230c      	movs	r3, #12
 8008f6e:	603b      	str	r3, [r7, #0]
 8008f70:	2600      	movs	r6, #0
 8008f72:	4630      	mov	r0, r6
 8008f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f78:	4e2e      	ldr	r6, [pc, #184]	; (8009034 <_malloc_r+0xe4>)
 8008f7a:	f000 f89d 	bl	80090b8 <__malloc_lock>
 8008f7e:	6833      	ldr	r3, [r6, #0]
 8008f80:	461c      	mov	r4, r3
 8008f82:	bb34      	cbnz	r4, 8008fd2 <_malloc_r+0x82>
 8008f84:	4629      	mov	r1, r5
 8008f86:	4638      	mov	r0, r7
 8008f88:	f7ff ffc2 	bl	8008f10 <sbrk_aligned>
 8008f8c:	1c43      	adds	r3, r0, #1
 8008f8e:	4604      	mov	r4, r0
 8008f90:	d14d      	bne.n	800902e <_malloc_r+0xde>
 8008f92:	6834      	ldr	r4, [r6, #0]
 8008f94:	4626      	mov	r6, r4
 8008f96:	2e00      	cmp	r6, #0
 8008f98:	d140      	bne.n	800901c <_malloc_r+0xcc>
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	4631      	mov	r1, r6
 8008f9e:	4638      	mov	r0, r7
 8008fa0:	eb04 0803 	add.w	r8, r4, r3
 8008fa4:	f000 f878 	bl	8009098 <_sbrk_r>
 8008fa8:	4580      	cmp	r8, r0
 8008faa:	d13a      	bne.n	8009022 <_malloc_r+0xd2>
 8008fac:	6821      	ldr	r1, [r4, #0]
 8008fae:	3503      	adds	r5, #3
 8008fb0:	1a6d      	subs	r5, r5, r1
 8008fb2:	f025 0503 	bic.w	r5, r5, #3
 8008fb6:	3508      	adds	r5, #8
 8008fb8:	2d0c      	cmp	r5, #12
 8008fba:	bf38      	it	cc
 8008fbc:	250c      	movcc	r5, #12
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	4638      	mov	r0, r7
 8008fc2:	f7ff ffa5 	bl	8008f10 <sbrk_aligned>
 8008fc6:	3001      	adds	r0, #1
 8008fc8:	d02b      	beq.n	8009022 <_malloc_r+0xd2>
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	442b      	add	r3, r5
 8008fce:	6023      	str	r3, [r4, #0]
 8008fd0:	e00e      	b.n	8008ff0 <_malloc_r+0xa0>
 8008fd2:	6822      	ldr	r2, [r4, #0]
 8008fd4:	1b52      	subs	r2, r2, r5
 8008fd6:	d41e      	bmi.n	8009016 <_malloc_r+0xc6>
 8008fd8:	2a0b      	cmp	r2, #11
 8008fda:	d916      	bls.n	800900a <_malloc_r+0xba>
 8008fdc:	1961      	adds	r1, r4, r5
 8008fde:	42a3      	cmp	r3, r4
 8008fe0:	6025      	str	r5, [r4, #0]
 8008fe2:	bf18      	it	ne
 8008fe4:	6059      	strne	r1, [r3, #4]
 8008fe6:	6863      	ldr	r3, [r4, #4]
 8008fe8:	bf08      	it	eq
 8008fea:	6031      	streq	r1, [r6, #0]
 8008fec:	5162      	str	r2, [r4, r5]
 8008fee:	604b      	str	r3, [r1, #4]
 8008ff0:	4638      	mov	r0, r7
 8008ff2:	f104 060b 	add.w	r6, r4, #11
 8008ff6:	f000 f865 	bl	80090c4 <__malloc_unlock>
 8008ffa:	f026 0607 	bic.w	r6, r6, #7
 8008ffe:	1d23      	adds	r3, r4, #4
 8009000:	1af2      	subs	r2, r6, r3
 8009002:	d0b6      	beq.n	8008f72 <_malloc_r+0x22>
 8009004:	1b9b      	subs	r3, r3, r6
 8009006:	50a3      	str	r3, [r4, r2]
 8009008:	e7b3      	b.n	8008f72 <_malloc_r+0x22>
 800900a:	6862      	ldr	r2, [r4, #4]
 800900c:	42a3      	cmp	r3, r4
 800900e:	bf0c      	ite	eq
 8009010:	6032      	streq	r2, [r6, #0]
 8009012:	605a      	strne	r2, [r3, #4]
 8009014:	e7ec      	b.n	8008ff0 <_malloc_r+0xa0>
 8009016:	4623      	mov	r3, r4
 8009018:	6864      	ldr	r4, [r4, #4]
 800901a:	e7b2      	b.n	8008f82 <_malloc_r+0x32>
 800901c:	4634      	mov	r4, r6
 800901e:	6876      	ldr	r6, [r6, #4]
 8009020:	e7b9      	b.n	8008f96 <_malloc_r+0x46>
 8009022:	230c      	movs	r3, #12
 8009024:	603b      	str	r3, [r7, #0]
 8009026:	4638      	mov	r0, r7
 8009028:	f000 f84c 	bl	80090c4 <__malloc_unlock>
 800902c:	e7a1      	b.n	8008f72 <_malloc_r+0x22>
 800902e:	6025      	str	r5, [r4, #0]
 8009030:	e7de      	b.n	8008ff0 <_malloc_r+0xa0>
 8009032:	bf00      	nop
 8009034:	20002394 	.word	0x20002394

08009038 <_realloc_r>:
 8009038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800903c:	4680      	mov	r8, r0
 800903e:	4614      	mov	r4, r2
 8009040:	460e      	mov	r6, r1
 8009042:	b921      	cbnz	r1, 800904e <_realloc_r+0x16>
 8009044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009048:	4611      	mov	r1, r2
 800904a:	f7ff bf81 	b.w	8008f50 <_malloc_r>
 800904e:	b92a      	cbnz	r2, 800905c <_realloc_r+0x24>
 8009050:	f7ff ff12 	bl	8008e78 <_free_r>
 8009054:	4625      	mov	r5, r4
 8009056:	4628      	mov	r0, r5
 8009058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800905c:	f000 f838 	bl	80090d0 <_malloc_usable_size_r>
 8009060:	4284      	cmp	r4, r0
 8009062:	4607      	mov	r7, r0
 8009064:	d802      	bhi.n	800906c <_realloc_r+0x34>
 8009066:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800906a:	d812      	bhi.n	8009092 <_realloc_r+0x5a>
 800906c:	4621      	mov	r1, r4
 800906e:	4640      	mov	r0, r8
 8009070:	f7ff ff6e 	bl	8008f50 <_malloc_r>
 8009074:	4605      	mov	r5, r0
 8009076:	2800      	cmp	r0, #0
 8009078:	d0ed      	beq.n	8009056 <_realloc_r+0x1e>
 800907a:	42bc      	cmp	r4, r7
 800907c:	4622      	mov	r2, r4
 800907e:	4631      	mov	r1, r6
 8009080:	bf28      	it	cs
 8009082:	463a      	movcs	r2, r7
 8009084:	f7ff fba4 	bl	80087d0 <memcpy>
 8009088:	4631      	mov	r1, r6
 800908a:	4640      	mov	r0, r8
 800908c:	f7ff fef4 	bl	8008e78 <_free_r>
 8009090:	e7e1      	b.n	8009056 <_realloc_r+0x1e>
 8009092:	4635      	mov	r5, r6
 8009094:	e7df      	b.n	8009056 <_realloc_r+0x1e>
	...

08009098 <_sbrk_r>:
 8009098:	b538      	push	{r3, r4, r5, lr}
 800909a:	4d06      	ldr	r5, [pc, #24]	; (80090b4 <_sbrk_r+0x1c>)
 800909c:	2300      	movs	r3, #0
 800909e:	4604      	mov	r4, r0
 80090a0:	4608      	mov	r0, r1
 80090a2:	602b      	str	r3, [r5, #0]
 80090a4:	f7f7 feaa 	bl	8000dfc <_sbrk>
 80090a8:	1c43      	adds	r3, r0, #1
 80090aa:	d102      	bne.n	80090b2 <_sbrk_r+0x1a>
 80090ac:	682b      	ldr	r3, [r5, #0]
 80090ae:	b103      	cbz	r3, 80090b2 <_sbrk_r+0x1a>
 80090b0:	6023      	str	r3, [r4, #0]
 80090b2:	bd38      	pop	{r3, r4, r5, pc}
 80090b4:	2000239c 	.word	0x2000239c

080090b8 <__malloc_lock>:
 80090b8:	4801      	ldr	r0, [pc, #4]	; (80090c0 <__malloc_lock+0x8>)
 80090ba:	f000 b811 	b.w	80090e0 <__retarget_lock_acquire_recursive>
 80090be:	bf00      	nop
 80090c0:	200023a0 	.word	0x200023a0

080090c4 <__malloc_unlock>:
 80090c4:	4801      	ldr	r0, [pc, #4]	; (80090cc <__malloc_unlock+0x8>)
 80090c6:	f000 b80c 	b.w	80090e2 <__retarget_lock_release_recursive>
 80090ca:	bf00      	nop
 80090cc:	200023a0 	.word	0x200023a0

080090d0 <_malloc_usable_size_r>:
 80090d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090d4:	1f18      	subs	r0, r3, #4
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	bfbc      	itt	lt
 80090da:	580b      	ldrlt	r3, [r1, r0]
 80090dc:	18c0      	addlt	r0, r0, r3
 80090de:	4770      	bx	lr

080090e0 <__retarget_lock_acquire_recursive>:
 80090e0:	4770      	bx	lr

080090e2 <__retarget_lock_release_recursive>:
 80090e2:	4770      	bx	lr

080090e4 <_init>:
 80090e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e6:	bf00      	nop
 80090e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ea:	bc08      	pop	{r3}
 80090ec:	469e      	mov	lr, r3
 80090ee:	4770      	bx	lr

080090f0 <_fini>:
 80090f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f2:	bf00      	nop
 80090f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090f6:	bc08      	pop	{r3}
 80090f8:	469e      	mov	lr, r3
 80090fa:	4770      	bx	lr
