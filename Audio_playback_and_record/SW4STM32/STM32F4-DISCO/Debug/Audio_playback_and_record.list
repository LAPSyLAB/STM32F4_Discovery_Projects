
Audio_playback_and_record.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baf0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  0800bc78  0800bc78  0001bc78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c298  0800c298  0001c298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c2a0  0800c2a0  0001c2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c2a4  0800c2a4  0001c2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000554  20000000  0800c2a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020554  2**0
                  CONTENTS
  8 .bss          000046e8  20000554  20000554  00020554  2**2
                  ALLOC
  9 ._user_heap_stack 00004004  20004c3c  20004c3c  00020554  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020554  2**0
                  CONTENTS, READONLY
 11 .debug_line   000325ec  00000000  00000000  00020584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   0003ef9e  00000000  00000000  00052b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007c21  00000000  00000000  00091b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  00099730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000da232  00000000  00000000  0009b018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002628  00000000  00000000  00175250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0001ec3e  00000000  00000000  00177878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000285d1  00000000  00000000  001964b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  001bea87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe0  00000000  00000000  001beb5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000554 	.word	0x20000554
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bc60 	.word	0x0800bc60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000558 	.word	0x20000558
 80001c4:	0800bc60 	.word	0x0800bc60

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80004c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004c6:	e003      	b.n	80004d0 <LoopCopyDataInit>

080004c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004c8:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004ce:	3104      	adds	r1, #4

080004d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004d0:	480b      	ldr	r0, [pc, #44]	; (8000500 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004d8:	d3f6      	bcc.n	80004c8 <CopyDataInit>
  ldr  r2, =_sbss
 80004da:	4a0b      	ldr	r2, [pc, #44]	; (8000508 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004dc:	e002      	b.n	80004e4 <LoopFillZerobss>

080004de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004e0:	f842 3b04 	str.w	r3, [r2], #4

080004e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004e8:	d3f9      	bcc.n	80004de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004ea:	f001 ff43 	bl	8002374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ee:	f00a fe27 	bl	800b140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004f2:	f000 f82d 	bl	8000550 <main>
  bx  lr    
 80004f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80004f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80004fc:	0800c2a8 	.word	0x0800c2a8
  ldr  r0, =_sdata
 8000500:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000504:	20000554 	.word	0x20000554
  ldr  r2, =_sbss
 8000508:	20000554 	.word	0x20000554
  ldr  r3, = _ebss
 800050c:	20004c3c 	.word	0x20004c3c

08000510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000510:	e7fe      	b.n	8000510 <ADC_IRQHandler>
	...

08000514 <USBH_UserProcess>:
  * @param  id: Host Library user message ID
  * @retval None
  */
static void USBH_UserProcess (USBH_HandleTypeDef *pHost, uint8_t vId)
{  
  switch (vId)
 8000514:	2902      	cmp	r1, #2
{  
 8000516:	b508      	push	{r3, lr}
  switch (vId)
 8000518:	d00c      	beq.n	8000534 <USBH_UserProcess+0x20>
 800051a:	2905      	cmp	r1, #5
 800051c:	d10d      	bne.n	800053a <USBH_UserProcess+0x26>
  { 
  case HOST_USER_SELECT_CONFIGURATION:
    break;
    
  case HOST_USER_DISCONNECTION:
    WavePlayer_CallBack();
 800051e:	f000 fc07 	bl	8000d30 <WavePlayer_CallBack>
    AppliState = APPLICATION_IDLE;
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <USBH_UserProcess+0x28>)
    f_mount(NULL, (TCHAR const*)"", 0);          
 8000524:	4906      	ldr	r1, [pc, #24]	; (8000540 <USBH_UserProcess+0x2c>)
    AppliState = APPLICATION_IDLE;
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
    break;
    
  default:
    break; 
  }
}
 800052a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f_mount(NULL, (TCHAR const*)"", 0);          
 800052e:	4610      	mov	r0, r2
 8000530:	f006 be24 	b.w	800717c <f_mount>
    AppliState = APPLICATION_START;
 8000534:	4b01      	ldr	r3, [pc, #4]	; (800053c <USBH_UserProcess+0x28>)
 8000536:	2201      	movs	r2, #1
 8000538:	701a      	strb	r2, [r3, #0]
}
 800053a:	bd08      	pop	{r3, pc}
 800053c:	20000570 	.word	0x20000570
 8000540:	0800c270 	.word	0x0800c270

08000544 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8000544:	b508      	push	{r3, lr}
  /* Turn LED3 on */
  BSP_LED_On(LED3);
 8000546:	2001      	movs	r0, #1
 8000548:	f001 fa76 	bl	8001a38 <BSP_LED_On>
  while(1)
 800054c:	e7fe      	b.n	800054c <Error_Handler+0x8>
	...

08000550 <main>:
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 8000554:	f001 ff58 	bl	8002408 <HAL_Init>
  BSP_LED_Init(LED3);
 8000558:	2001      	movs	r0, #1
 800055a:	f001 fa15 	bl	8001988 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 800055e:	2000      	movs	r0, #0
 8000560:	f001 fa12 	bl	8001988 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8000564:	2002      	movs	r0, #2
 8000566:	f001 fa0f 	bl	8001988 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 800056a:	2003      	movs	r0, #3
 800056c:	f001 fa0c 	bl	8001988 <BSP_LED_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	4b6f      	ldr	r3, [pc, #444]	; (8000730 <main+0x1e0>)
 8000572:	2100      	movs	r1, #0
 8000574:	9100      	str	r1, [sp, #0]
 8000576:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000578:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800057c:	641a      	str	r2, [r3, #64]	; 0x40
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	4b6a      	ldr	r3, [pc, #424]	; (8000734 <main+0x1e4>)
 800058a:	9101      	str	r1, [sp, #4]
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059e:	f04f 0e01 	mov.w	lr, #1
 80005a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	e9cd e308 	strd	lr, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b0:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b4:	f04f 0808 	mov.w	r8, #8
 80005b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005bc:	e9cd 8310 	strd	r8, r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c2:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f004 f85a 	bl	8004680 <HAL_RCC_OscConfig>
 80005cc:	b108      	cbz	r0, 80005d2 <main+0x82>
    Error_Handler();
 80005ce:	f7ff ffb9 	bl	8000544 <Error_Handler>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80005d2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80005da:	f44f 5ca0 	mov.w	ip, #5120	; 0x1400
 80005de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e2:	2105      	movs	r1, #5
 80005e4:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80005e6:	e9cd c306 	strd	ip, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ea:	f004 fa23 	bl	8004a34 <HAL_RCC_ClockConfig>
 80005ee:	2800      	cmp	r0, #0
 80005f0:	d1ed      	bne.n	80005ce <main+0x7e>
  if (HAL_GetREVID() == 0x1001)
 80005f2:	f001 ff45 	bl	8002480 <HAL_GetREVID>
 80005f6:	f241 0301 	movw	r3, #4097	; 0x1001
 80005fa:	4298      	cmp	r0, r3
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	bf01      	itttt	eq
 80005fe:	4a4e      	ldreq	r2, [pc, #312]	; (8000738 <main+0x1e8>)
 8000600:	6813      	ldreq	r3, [r2, #0]
 8000602:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8000606:	6013      	streq	r3, [r2, #0]
  if(BSP_ACCELERO_Init() != ACCELERO_OK)
 8000608:	f001 fb84 	bl	8001d14 <BSP_ACCELERO_Init>
 800060c:	4606      	mov	r6, r0
 800060e:	2800      	cmp	r0, #0
 8000610:	d1dd      	bne.n	80005ce <main+0x7e>
  MemsID = BSP_ACCELERO_ReadID();
 8000612:	f001 fba3 	bl	8001d5c <BSP_ACCELERO_ReadID>
 8000616:	4c49      	ldr	r4, [pc, #292]	; (800073c <main+0x1ec>)
  hTimLed.Instance = TIM4;
 8000618:	4d49      	ldr	r5, [pc, #292]	; (8000740 <main+0x1f0>)
  MemsID = BSP_ACCELERO_ReadID();
 800061a:	7060      	strb	r0, [r4, #1]
  BSP_LED_On(LED4);
 800061c:	4630      	mov	r0, r6
 800061e:	f001 fa0b 	bl	8001a38 <BSP_LED_On>
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000622:	4b43      	ldr	r3, [pc, #268]	; (8000730 <main+0x1e0>)
 8000624:	9602      	str	r6, [sp, #8]
 8000626:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000628:	f042 0204 	orr.w	r2, r2, #4
 800062c:	641a      	str	r2, [r3, #64]	; 0x40
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 0304 	and.w	r3, r3, #4
  HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);  
 8000634:	4632      	mov	r2, r6
 8000636:	2106      	movs	r1, #6
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000638:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);  
 800063a:	201e      	movs	r0, #30
  __HAL_RCC_TIM4_CLK_ENABLE();
 800063c:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(TIM4_IRQn, 6, 0);  
 800063e:	f001 ff37 	bl	80024b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000642:	201e      	movs	r0, #30
 8000644:	f001 ff66 	bl	8002514 <HAL_NVIC_EnableIRQ>
  tmpvalue = HAL_RCC_GetPCLK1Freq();
 8000648:	f004 fa90 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
  hTimLed.Instance = TIM4;
 800064c:	4b3d      	ldr	r3, [pc, #244]	; (8000744 <main+0x1f4>)
 800064e:	602b      	str	r3, [r5, #0]
  hTimLed.Init.Period = 65535;
 8000650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000654:	60eb      	str	r3, [r5, #12]
  prescalervalue = (uint16_t) ((tmpvalue * 2) / 550000) - 1;
 8000656:	0043      	lsls	r3, r0, #1
 8000658:	483b      	ldr	r0, [pc, #236]	; (8000748 <main+0x1f8>)
 800065a:	fbb3 f3f0 	udiv	r3, r3, r0
 800065e:	3b01      	subs	r3, #1
  hTimLed.Init.Prescaler = prescalervalue;
 8000660:	b29b      	uxth	r3, r3
  if(HAL_TIM_OC_Init(&hTimLed) != HAL_OK)
 8000662:	4628      	mov	r0, r5
  hTimLed.Init.Prescaler = prescalervalue;
 8000664:	606b      	str	r3, [r5, #4]
  hTimLed.Init.ClockDivision = 0;
 8000666:	612e      	str	r6, [r5, #16]
  hTimLed.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000668:	60ae      	str	r6, [r5, #8]
  if(HAL_TIM_OC_Init(&hTimLed) != HAL_OK)
 800066a:	f004 ff61 	bl	8005530 <HAL_TIM_OC_Init>
 800066e:	4602      	mov	r2, r0
 8000670:	2800      	cmp	r0, #0
 8000672:	d1ac      	bne.n	80005ce <main+0x7e>
  sConfigLed.OCMode = TIM_OCMODE_TIMING;
 8000674:	4935      	ldr	r1, [pc, #212]	; (800074c <main+0x1fc>)
  sConfigLed.OCIdleState = TIM_OCIDLESTATE_SET;
 8000676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800067a:	614b      	str	r3, [r1, #20]
  sConfigLed.Pulse = CCR1Val;
 800067c:	4b34      	ldr	r3, [pc, #208]	; (8000750 <main+0x200>)
  sConfigLed.OCMode = TIM_OCMODE_TIMING;
 800067e:	6008      	str	r0, [r1, #0]
  sConfigLed.Pulse = CCR1Val;
 8000680:	881b      	ldrh	r3, [r3, #0]
  sConfigLed.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000682:	60c8      	str	r0, [r1, #12]
  sConfigLed.Pulse = CCR1Val;
 8000684:	b29b      	uxth	r3, r3
  sConfigLed.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000686:	e9c1 3001 	strd	r3, r0, [r1, #4]
  sConfigLed.OCFastMode = TIM_OCFAST_ENABLE;
 800068a:	2304      	movs	r3, #4
 800068c:	610b      	str	r3, [r1, #16]
  if(HAL_TIM_OC_ConfigChannel(&hTimLed, &sConfigLed, TIM_CHANNEL_1) != HAL_OK)
 800068e:	4628      	mov	r0, r5
  sConfigLed.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000694:	618b      	str	r3, [r1, #24]
  if(HAL_TIM_OC_ConfigChannel(&hTimLed, &sConfigLed, TIM_CHANNEL_1) != HAL_OK)
 8000696:	f004 ffad 	bl	80055f4 <HAL_TIM_OC_ConfigChannel>
 800069a:	4601      	mov	r1, r0
 800069c:	2800      	cmp	r0, #0
 800069e:	d196      	bne.n	80005ce <main+0x7e>
  if(HAL_TIM_OC_Start_IT(&hTimLed, TIM_CHANNEL_1) != HAL_OK)
 80006a0:	4628      	mov	r0, r5
 80006a2:	f004 ffdd 	bl	8005660 <HAL_TIM_OC_Start_IT>
 80006a6:	2800      	cmp	r0, #0
 80006a8:	d191      	bne.n	80005ce <main+0x7e>
  LEDsState = LEDS_OFF;
 80006aa:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <main+0x204>)
  RepeatState = REPEAT_ON;
 80006ac:	6060      	str	r0, [r4, #4]
  LEDsState = LEDS_OFF;
 80006ae:	2207      	movs	r2, #7
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80006b0:	2101      	movs	r1, #1
  LEDsState = LEDS_OFF;
 80006b2:	601a      	str	r2, [r3, #0]
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80006b4:	f001 f9ea 	bl	8001a8c <BSP_PB_Init>
  if(FATFS_LinkDriver(&USBH_Driver, USBDISKPath) == 0)
 80006b8:	4927      	ldr	r1, [pc, #156]	; (8000758 <main+0x208>)
 80006ba:	4828      	ldr	r0, [pc, #160]	; (800075c <main+0x20c>)
 80006bc:	f007 fa68 	bl	8007b90 <FATFS_LinkDriver>
 80006c0:	4602      	mov	r2, r0
 80006c2:	2800      	cmp	r0, #0
 80006c4:	d133      	bne.n	800072e <main+0x1de>
    USBH_Init(&hUSB_Host, USBH_UserProcess, 0);
 80006c6:	4926      	ldr	r1, [pc, #152]	; (8000760 <main+0x210>)
 80006c8:	4826      	ldr	r0, [pc, #152]	; (8000764 <main+0x214>)
    if (f_mount(&USBDISKFatFs, (TCHAR const*)USBDISKPath, 0 ) != FR_OK ) 
 80006ca:	4f23      	ldr	r7, [pc, #140]	; (8000758 <main+0x208>)
 80006cc:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800076c <main+0x21c>
      USBH_Process(&hUSB_Host);
 80006d0:	4e24      	ldr	r6, [pc, #144]	; (8000764 <main+0x214>)
    USBH_Init(&hUSB_Host, USBH_UserProcess, 0);
 80006d2:	f008 f8f3 	bl	80088bc <USBH_Init>
    USBH_RegisterClass(&hUSB_Host, USBH_MSC_CLASS);
 80006d6:	4924      	ldr	r1, [pc, #144]	; (8000768 <main+0x218>)
 80006d8:	4822      	ldr	r0, [pc, #136]	; (8000764 <main+0x214>)
 80006da:	f008 f90e 	bl	80088fa <USBH_RegisterClass>
    USBH_Start(&hUSB_Host);
 80006de:	4821      	ldr	r0, [pc, #132]	; (8000764 <main+0x214>)
 80006e0:	f008 f93e 	bl	8008960 <USBH_Start>
      switch(AppliState)
 80006e4:	7825      	ldrb	r5, [r4, #0]
 80006e6:	2d01      	cmp	r5, #1
 80006e8:	d109      	bne.n	80006fe <main+0x1ae>
  switch (USBH_USR_ApplicationState)
 80006ea:	7a22      	ldrb	r2, [r4, #8]
 80006ec:	b1b2      	cbz	r2, 800071c <main+0x1cc>
 80006ee:	2a01      	cmp	r2, #1
 80006f0:	d105      	bne.n	80006fe <main+0x1ae>
  switch (CmdIndex)
 80006f2:	68e3      	ldr	r3, [r4, #12]
 80006f4:	b13b      	cbz	r3, 8000706 <main+0x1b6>
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d00b      	beq.n	8000712 <main+0x1c2>
    USBH_USR_ApplicationState = USBH_USR_FS_INIT;
 80006fa:	2300      	movs	r3, #0
 80006fc:	7223      	strb	r3, [r4, #8]
      USBH_Process(&hUSB_Host);
 80006fe:	4630      	mov	r0, r6
 8000700:	f008 f938 	bl	8008974 <USBH_Process>
      switch(AppliState)
 8000704:	e7ee      	b.n	80006e4 <main+0x194>
    if (RepeatState == REPEAT_ON)
 8000706:	6863      	ldr	r3, [r4, #4]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1f6      	bne.n	80006fa <main+0x1aa>
      WavePlayerStart();
 800070c:	f000 fad2 	bl	8000cb4 <WavePlayerStart>
 8000710:	e7f3      	b.n	80006fa <main+0x1aa>
    RepeatState = REPEAT_ON;
 8000712:	2300      	movs	r3, #0
 8000714:	6063      	str	r3, [r4, #4]
    WaveRecorderProcess();
 8000716:	f000 fb3f 	bl	8000d98 <WaveRecorderProcess>
    break;
 800071a:	e7ee      	b.n	80006fa <main+0x1aa>
    if (f_mount(&USBDISKFatFs, (TCHAR const*)USBDISKPath, 0 ) != FR_OK ) 
 800071c:	4639      	mov	r1, r7
 800071e:	4640      	mov	r0, r8
 8000720:	f006 fd2c 	bl	800717c <f_mount>
 8000724:	2800      	cmp	r0, #0
 8000726:	f47f af52 	bne.w	80005ce <main+0x7e>
    USBH_USR_ApplicationState = USBH_USR_AUDIO;
 800072a:	7225      	strb	r5, [r4, #8]
    break;
 800072c:	e7e7      	b.n	80006fe <main+0x1ae>
  while (1)
 800072e:	e7fe      	b.n	800072e <main+0x1de>
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000
 8000738:	40023c00 	.word	0x40023c00
 800073c:	20000570 	.word	0x20000570
 8000740:	20000ad4 	.word	0x20000ad4
 8000744:	40000800 	.word	0x40000800
 8000748:	00086470 	.word	0x00086470
 800074c:	20000ab4 	.word	0x20000ab4
 8000750:	20000000 	.word	0x20000000
 8000754:	20002630 	.word	0x20002630
 8000758:	20000ad0 	.word	0x20000ad0
 800075c:	0800be14 	.word	0x0800be14
 8000760:	08000515 	.word	0x08000515
 8000764:	20000d50 	.word	0x20000d50
 8000768:	200000cc 	.word	0x200000cc
 800076c:	20000b1c 	.word	0x20000b1c

08000770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000770:	b538      	push	{r3, r4, r5, lr}
  uint32_t capture = 0; 
  
  /* Set click recognition only for L1S302DL*/
  if ((AudioPlayStart != 0x00) && (MemsID == I_AM_LIS302DL))
 8000772:	4b27      	ldr	r3, [pc, #156]	; (8000810 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 8000774:	681b      	ldr	r3, [r3, #0]
{
 8000776:	4604      	mov	r4, r0
  if ((AudioPlayStart != 0x00) && (MemsID == I_AM_LIS302DL))
 8000778:	b12b      	cbz	r3, 8000786 <HAL_TIM_OC_DelayElapsedCallback+0x16>
 800077a:	4b26      	ldr	r3, [pc, #152]	; (8000814 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 800077c:	785b      	ldrb	r3, [r3, #1]
 800077e:	2b3b      	cmp	r3, #59	; 0x3b
 8000780:	d101      	bne.n	8000786 <HAL_TIM_OC_DelayElapsedCallback+0x16>
  {
    /* Read click and status registers*/
    BSP_ACCELERO_Click_ITClear();  
 8000782:	f001 fafb 	bl	8001d7c <BSP_ACCELERO_Click_ITClear>
  }
  
  if (LEDsState == LED3_TOGGLE)
 8000786:	4b24      	ldr	r3, [pc, #144]	; (8000818 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000788:	681d      	ldr	r5, [r3, #0]
 800078a:	2d03      	cmp	r5, #3
 800078c:	d109      	bne.n	80007a2 <HAL_TIM_OC_DelayElapsedCallback+0x32>
  {
    /* Toggling LED3 */
    BSP_LED_Toggle(LED3);
 800078e:	2001      	movs	r0, #1
 8000790:	f001 f96e 	bl	8001a70 <BSP_LED_Toggle>
    BSP_LED_Off(LED6);
 8000794:	4628      	mov	r0, r5
 8000796:	f001 f95d 	bl	8001a54 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 800079a:	2000      	movs	r0, #0
  {
    /* Turn OFF all LEDs */
    BSP_LED_Off(LED3);
    BSP_LED_Off(LED4);
    BSP_LED_Off(LED5);
    BSP_LED_Off(LED6);
 800079c:	f001 f95a 	bl	8001a54 <BSP_LED_Off>
 80007a0:	e016      	b.n	80007d0 <HAL_TIM_OC_DelayElapsedCallback+0x60>
  else if (LEDsState == LED4_TOGGLE)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	2a04      	cmp	r2, #4
 80007a6:	d107      	bne.n	80007b8 <HAL_TIM_OC_DelayElapsedCallback+0x48>
    BSP_LED_Toggle(LED4);
 80007a8:	2000      	movs	r0, #0
 80007aa:	f001 f961 	bl	8001a70 <BSP_LED_Toggle>
    BSP_LED_Off(LED6);
 80007ae:	2003      	movs	r0, #3
 80007b0:	f001 f950 	bl	8001a54 <BSP_LED_Off>
    BSP_LED_Off(LED3);
 80007b4:	2001      	movs	r0, #1
 80007b6:	e7f1      	b.n	800079c <HAL_TIM_OC_DelayElapsedCallback+0x2c>
  else if (LEDsState == LED6_TOGGLE)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	2a06      	cmp	r2, #6
 80007bc:	d113      	bne.n	80007e6 <HAL_TIM_OC_DelayElapsedCallback+0x76>
    BSP_LED_Off(LED3);
 80007be:	2001      	movs	r0, #1
 80007c0:	f001 f948 	bl	8001a54 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f001 f945 	bl	8001a54 <BSP_LED_Off>
    BSP_LED_Toggle(LED6);
 80007ca:	2003      	movs	r0, #3
 80007cc:	f001 f950 	bl	8001a70 <BSP_LED_Toggle>
  }
  /* Get the TIM4 Input Capture 1 value */
  capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80007d0:	2100      	movs	r1, #0
 80007d2:	4620      	mov	r0, r4
 80007d4:	f004 fd89 	bl	80052ea <HAL_TIM_ReadCapturedValue>
  
  /* Set the TIM4 Capture Compare1 Register value */
  __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, (CCR1Val + capture));
 80007d8:	4b10      	ldr	r3, [pc, #64]	; (800081c <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 80007da:	6822      	ldr	r2, [r4, #0]
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	fa10 f083 	uxtah	r0, r0, r3
 80007e2:	6350      	str	r0, [r2, #52]	; 0x34
}
 80007e4:	bd38      	pop	{r3, r4, r5, pc}
  else if (LEDsState == STOP_TOGGLE)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	b91a      	cbnz	r2, 80007f2 <HAL_TIM_OC_DelayElapsedCallback+0x82>
    BSP_LED_On(LED6);
 80007ea:	2003      	movs	r0, #3
 80007ec:	f001 f924 	bl	8001a38 <BSP_LED_On>
 80007f0:	e7ee      	b.n	80007d0 <HAL_TIM_OC_DelayElapsedCallback+0x60>
  else if (LEDsState == LEDS_OFF)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b07      	cmp	r3, #7
 80007f6:	d1eb      	bne.n	80007d0 <HAL_TIM_OC_DelayElapsedCallback+0x60>
    BSP_LED_Off(LED3);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f001 f92b 	bl	8001a54 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 80007fe:	2000      	movs	r0, #0
 8000800:	f001 f928 	bl	8001a54 <BSP_LED_Off>
    BSP_LED_Off(LED5);
 8000804:	2002      	movs	r0, #2
 8000806:	f001 f925 	bl	8001a54 <BSP_LED_Off>
    BSP_LED_Off(LED6);
 800080a:	2003      	movs	r0, #3
 800080c:	e7c6      	b.n	800079c <HAL_TIM_OC_DelayElapsedCallback+0x2c>
 800080e:	bf00      	nop
 8000810:	2000058c 	.word	0x2000058c
 8000814:	20000570 	.word	0x20000570
 8000818:	20002630 	.word	0x20002630
 800081c:	20000000 	.word	0x20000000

08000820 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if(GPIO_Pin == GPIO_PIN_0) 
 8000820:	2801      	cmp	r0, #1
{
 8000822:	b570      	push	{r4, r5, r6, lr}
 8000824:	4605      	mov	r5, r0
  if(GPIO_Pin == GPIO_PIN_0) 
 8000826:	d116      	bne.n	8000856 <HAL_GPIO_EXTI_Callback+0x36>
  {
    if (PbPressCheck == 0)
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_GPIO_EXTI_Callback+0x54>)
 800082a:	691e      	ldr	r6, [r3, #16]
 800082c:	461c      	mov	r4, r3
 800082e:	b97e      	cbnz	r6, 8000850 <HAL_GPIO_EXTI_Callback+0x30>
    {
      HAL_Delay(10);
 8000830:	200a      	movs	r0, #10
 8000832:	f001 fe11 	bl	8002458 <HAL_Delay>
      /* Test on the command: Recording */
      if (CmdIndex == CMD_RECORD)
 8000836:	68e3      	ldr	r3, [r4, #12]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d102      	bne.n	8000842 <HAL_GPIO_EXTI_Callback+0x22>
        /* Switch to Record command */
        CmdIndex = CMD_RECORD;
      }
      else
      {
        RepeatState = REPEAT_ON;
 800083c:	6066      	str	r6, [r4, #4]
        /* Default Command Index: Play command */
        CmdIndex = CMD_PLAY; 
 800083e:	60e6      	str	r6, [r4, #12]
 8000840:	e003      	b.n	800084a <HAL_GPIO_EXTI_Callback+0x2a>
      else if (CmdIndex == CMD_PLAY)
 8000842:	68e3      	ldr	r3, [r4, #12]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d1f9      	bne.n	800083c <HAL_GPIO_EXTI_Callback+0x1c>
        CmdIndex = CMD_RECORD;
 8000848:	60e5      	str	r5, [r4, #12]
      }
      PbPressCheck = 1;
 800084a:	2301      	movs	r3, #1
 800084c:	6123      	str	r3, [r4, #16]
      /* Pause playing Wave status */
      PauseResumeStatus = PAUSE_STATUS;
      PressCount = 1;
    }
  }
} 
 800084e:	bd70      	pop	{r4, r5, r6, pc}
      PbPressCheck = 0;
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
 8000854:	e7fb      	b.n	800084e <HAL_GPIO_EXTI_Callback+0x2e>
  if(GPIO_Pin == GPIO_PIN_1) 
 8000856:	2802      	cmp	r0, #2
 8000858:	d1f9      	bne.n	800084e <HAL_GPIO_EXTI_Callback+0x2e>
    if (PressCount == 1)
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_GPIO_EXTI_Callback+0x54>)
 800085c:	4a06      	ldr	r2, [pc, #24]	; (8000878 <HAL_GPIO_EXTI_Callback+0x58>)
 800085e:	6958      	ldr	r0, [r3, #20]
 8000860:	2100      	movs	r1, #0
 8000862:	2801      	cmp	r0, #1
      PauseResumeStatus = PAUSE_STATUS;
 8000864:	bf1b      	ittet	ne
 8000866:	6051      	strne	r1, [r2, #4]
      PressCount = 1;
 8000868:	2201      	movne	r2, #1
      PauseResumeStatus = RESUME_STATUS;
 800086a:	6050      	streq	r0, [r2, #4]
      PressCount = 1;
 800086c:	615a      	strne	r2, [r3, #20]
      PressCount = 0;
 800086e:	bf08      	it	eq
 8000870:	6159      	streq	r1, [r3, #20]
} 
 8000872:	e7ec      	b.n	800084e <HAL_GPIO_EXTI_Callback+0x2e>
 8000874:	20000570 	.word	0x20000570
 8000878:	20000000 	.word	0x20000000

0800087c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800087c:	4770      	bx	lr

0800087e <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800087e:	e7fe      	b.n	800087e <HardFault_Handler>

08000880 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler>

08000882 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000882:	e7fe      	b.n	8000882 <BusFault_Handler>

08000884 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000884:	e7fe      	b.n	8000884 <UsageFault_Handler>

08000886 <SVC_Handler>:
 8000886:	4770      	bx	lr

08000888 <DebugMon_Handler>:
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:
 800088a:	4770      	bx	lr

0800088c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800088c:	b508      	push	{r3, lr}
  HAL_IncTick();
 800088e:	f001 fdd1 	bl	8002434 <HAL_IncTick>

  /* Test on the command: Recording */
  if (CmdIndex == CMD_RECORD)
 8000892:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <SysTick_Handler+0x18>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b01      	cmp	r3, #1
  {
    /* Increments the time recording base variable */
    TimeRecBase ++; 
 8000898:	bf01      	itttt	eq
 800089a:	4a03      	ldreq	r2, [pc, #12]	; (80008a8 <SysTick_Handler+0x1c>)
 800089c:	6813      	ldreq	r3, [r2, #0]
 800089e:	3301      	addeq	r3, #1
 80008a0:	6013      	streq	r3, [r2, #0]
  }
}
 80008a2:	bd08      	pop	{r3, pc}
 80008a4:	2000057c 	.word	0x2000057c
 80008a8:	20000588 	.word	0x20000588

080008ac <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80008ac:	2001      	movs	r0, #1
 80008ae:	f002 b939 	b.w	8002b24 <HAL_GPIO_EXTI_IRQHandler>

080008b2 <EXTI1_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80008b2:	2002      	movs	r0, #2
 80008b4:	f002 b936 	b.w	8002b24 <HAL_GPIO_EXTI_IRQHandler>

080008b8 <DMA1_Stream7_IRQHandler>:
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void I2S3_IRQHandler(void)
{ 
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 80008b8:	4b01      	ldr	r3, [pc, #4]	; (80008c0 <DMA1_Stream7_IRQHandler+0x8>)
 80008ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80008bc:	f001 bf8c 	b.w	80027d8 <HAL_DMA_IRQHandler>
 80008c0:	20004b98 	.word	0x20004b98

080008c4 <DMA1_Stream3_IRQHandler>:
  * @param  None
  * @retval None
  */
void I2S2_IRQHandler(void)
{
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 80008c4:	4b01      	ldr	r3, [pc, #4]	; (80008cc <DMA1_Stream3_IRQHandler+0x8>)
 80008c6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80008c8:	f001 bf86 	b.w	80027d8 <HAL_DMA_IRQHandler>
 80008cc:	20004be0 	.word	0x20004be0

080008d0 <TIM4_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&hTimLed);
 80008d0:	4801      	ldr	r0, [pc, #4]	; (80008d8 <TIM4_IRQHandler+0x8>)
 80008d2:	f004 bd24 	b.w	800531e <HAL_TIM_IRQHandler>
 80008d6:	bf00      	nop
 80008d8:	20000ad4 	.word	0x20000ad4

080008dc <OTG_FS_IRQHandler>:
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{
  HAL_HCD_IRQHandler(&hhcd);
 80008dc:	4801      	ldr	r0, [pc, #4]	; (80008e4 <OTG_FS_IRQHandler+0x8>)
 80008de:	f002 ba27 	b.w	8002d30 <HAL_HCD_IRQHandler>
 80008e2:	bf00      	nop
 80008e4:	200012f8 	.word	0x200012f8

080008e8 <HAL_HCD_MspInit>:
  * @brief  Initializes the HCD MSP.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef *hhcd)
{
 80008e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* Note: On STM32F4-Discovery board only USB OTG FS core is supported. */
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hhcd->Instance == USB_OTG_FS)
 80008ec:	6803      	ldr	r3, [r0, #0]
 80008ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80008f2:	b089      	sub	sp, #36	; 0x24
  if(hhcd->Instance == USB_OTG_FS)
 80008f4:	d153      	bne.n	800099e <HAL_HCD_MspInit+0xb6>
  {
    /* Configure USB FS GPIOs */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4c2b      	ldr	r4, [pc, #172]	; (80009a4 <HAL_HCD_MspInit+0xbc>)
    
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL ;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 80008f8:	482b      	ldr	r0, [pc, #172]	; (80009a8 <HAL_HCD_MspInit+0xc0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2500      	movs	r5, #0
 80008fc:	9500      	str	r5, [sp, #0]
 80008fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6323      	str	r3, [r4, #48]	; 0x30
 8000906:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	9b00      	ldr	r3, [sp, #0]
    HOST_POWERSW_CLK_ENABLE();
 8000910:	9501      	str	r5, [sp, #4]
 8000912:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6323      	str	r3, [r4, #48]	; 0x30
 800091a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800091c:	f003 0304 	and.w	r3, r3, #4
 8000920:	9301      	str	r3, [sp, #4]
 8000922:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000924:	f04f 0903 	mov.w	r9, #3
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000928:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800092e:	f04f 080a 	mov.w	r8, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 8000932:	a903      	add	r1, sp, #12
    
    /* This for ID line debug */
    GPIO_InitStruct.Pin =  GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP ;  
 8000934:	2601      	movs	r6, #1
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000936:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL ;
 8000938:	e9cd 7504 	strd	r7, r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800093c:	f8cd 9018 	str.w	r9, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000940:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 8000944:	f002 f806 	bl	8002954 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000948:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800094c:	2312      	movs	r3, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 800094e:	4816      	ldr	r0, [pc, #88]	; (80009a8 <HAL_HCD_MspInit+0xc0>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000950:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 8000954:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000956:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800095a:	e9cd 6905 	strd	r6, r9, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);  
 800095e:	f001 fff9 	bl	8002954 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HOST_POWERSW_VBUS;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;  
    
    HAL_GPIO_Init(HOST_POWERSW_PORT, &GPIO_InitStruct);
 8000962:	4812      	ldr	r0, [pc, #72]	; (80009ac <HAL_HCD_MspInit+0xc4>)
    GPIO_InitStruct.Pin = HOST_POWERSW_VBUS;
 8000964:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(HOST_POWERSW_PORT, &GPIO_InitStruct);
 8000966:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;  
 8000968:	e9cd 6504 	strd	r6, r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800096c:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(HOST_POWERSW_PORT, &GPIO_InitStruct);
 800096e:	f001 fff1 	bl	8002954 <HAL_GPIO_Init>
    
    /* Enable USB FS Clocks */ 
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000972:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000978:	6363      	str	r3, [r4, #52]	; 0x34
 800097a:	9502      	str	r5, [sp, #8]
 800097c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800097e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000982:	6463      	str	r3, [r4, #68]	; 0x44
 8000984:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	9302      	str	r3, [sp, #8]
    
    /* Set USBFS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 800098c:	2043      	movs	r0, #67	; 0x43
 800098e:	462a      	mov	r2, r5
 8000990:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000992:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8000994:	f001 fd8c 	bl	80024b0 <HAL_NVIC_SetPriority>
    
    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8000998:	2043      	movs	r0, #67	; 0x43
 800099a:	f001 fdbb 	bl	8002514 <HAL_NVIC_EnableIRQ>
  } 
}
 800099e:	b009      	add	sp, #36	; 0x24
 80009a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40020800 	.word	0x40020800

080009b0 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer (hhcd->pData);
 80009b0:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80009b4:	f008 b9c9 	b.w	8008d4a <USBH_LL_IncTimer>

080009b8 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 80009b8:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80009bc:	f008 b9db 	b.w	8008d76 <USBH_LL_Connect>

080009c0 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 80009c0:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80009c4:	f008 b9e1 	b.w	8008d8a <USBH_LL_Disconnect>

080009c8 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 80009c8:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80009cc:	f008 b9cb 	b.w	8008d66 <USBH_LL_PortEnabled>

080009d0 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 80009d0:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 80009d4:	f008 b9cb 	b.w	8008d6e <USBH_LL_PortDisabled>

080009d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
}
 80009d8:	4770      	bx	lr
	...

080009dc <USBH_LL_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Init (USBH_HandleTypeDef *phost)
{
  /* Change Systick prioity */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80009dc:	2200      	movs	r2, #0
{
 80009de:	b570      	push	{r4, r5, r6, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80009e0:	4611      	mov	r1, r2
  
  /*Set LL Driver parameters */
  hhcd.Instance = USB_OTG_FS;
 80009e2:	4c11      	ldr	r4, [pc, #68]	; (8000a28 <USBH_LL_Init+0x4c>)
{
 80009e4:	4605      	mov	r5, r0
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80009e6:	f04f 30ff 	mov.w	r0, #4294967295
 80009ea:	f001 fd61 	bl	80024b0 <HAL_NVIC_SetPriority>
  hhcd.Instance = USB_OTG_FS;
 80009ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80009f2:	6023      	str	r3, [r4, #0]
  hhcd.Init.Host_channels = 11; 
 80009f4:	230b      	movs	r3, #11
  hhcd.Init.dma_enable = 0;
 80009f6:	2600      	movs	r6, #0
  hhcd.Init.Host_channels = 11; 
 80009f8:	60a3      	str	r3, [r4, #8]
  hhcd.Init.low_power_enable = 0;
  hhcd.Init.phy_itface = HCD_PHY_EMBEDDED; 
 80009fa:	2302      	movs	r3, #2
  hhcd.Init.Sof_enable = 0;
 80009fc:	e9c4 3606 	strd	r3, r6, [r4, #24]
  hhcd.Init.speed = HCD_SPEED_FULL;
  /* Link The driver to the stack */
  hhcd.pData = phost;
  phost->pData = &hhcd;
 8000a00:	f8c5 45a0 	str.w	r4, [r5, #1440]	; 0x5a0
  hhcd.Init.speed = HCD_SPEED_FULL;
 8000a04:	2301      	movs	r3, #1
  /*Initialize LL Driver */
  HAL_HCD_Init(&hhcd);
 8000a06:	4620      	mov	r0, r4
  hhcd.Init.speed = HCD_SPEED_FULL;
 8000a08:	60e3      	str	r3, [r4, #12]
  hhcd.Init.dma_enable = 0;
 8000a0a:	6126      	str	r6, [r4, #16]
  hhcd.Init.low_power_enable = 0;
 8000a0c:	6226      	str	r6, [r4, #32]
  hhcd.pData = phost;
 8000a0e:	f8c4 5300 	str.w	r5, [r4, #768]	; 0x300
  HAL_HCD_Init(&hhcd);
 8000a12:	f002 f8db 	bl	8002bcc <HAL_HCD_Init>
 
  USBH_LL_SetTimer (phost, HAL_HCD_GetCurrentFrame(&hhcd));
 8000a16:	4620      	mov	r0, r4
 8000a18:	f002 fd03 	bl	8003422 <HAL_HCD_GetCurrentFrame>
 8000a1c:	4601      	mov	r1, r0
 8000a1e:	4628      	mov	r0, r5
 8000a20:	f008 f990 	bl	8008d44 <USBH_LL_SetTimer>
  
  return USBH_OK;
}
 8000a24:	4630      	mov	r0, r6
 8000a26:	bd70      	pop	{r4, r5, r6, pc}
 8000a28:	200012f8 	.word	0x200012f8

08000a2c <USBH_LL_Start>:
  *         Start the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8000a2c:	b508      	push	{r3, lr}
  HAL_HCD_Start(phost->pData);
 8000a2e:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 8000a32:	f002 fcc0 	bl	80033b6 <HAL_HCD_Start>
  return USBH_OK; 
}
 8000a36:	2000      	movs	r0, #0
 8000a38:	bd08      	pop	{r3, pc}

08000a3a <USBH_LL_Stop>:
  *         Stop the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_Stop (USBH_HandleTypeDef *phost)
{
 8000a3a:	b508      	push	{r3, lr}
  HAL_HCD_Stop(phost->pData);
 8000a3c:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 8000a40:	f002 fccf 	bl	80033e2 <HAL_HCD_Stop>
  return USBH_OK; 
}
 8000a44:	2000      	movs	r0, #0
 8000a46:	bd08      	pop	{r3, pc}

08000a48 <USBH_LL_GetSpeed>:
  *         Return the USB Host Speed from the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed  (USBH_HandleTypeDef *phost)
{
 8000a48:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
    
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8000a4a:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 8000a4e:	f002 fceb 	bl	8003428 <HAL_HCD_GetCurrentSpeed>
 8000a52:	2802      	cmp	r0, #2
 8000a54:	bf88      	it	hi
 8000a56:	2001      	movhi	r0, #1
  default:  
    speed = USBH_SPEED_FULL;    
    break; 
  }
  return  speed;
}
 8000a58:	b2c0      	uxtb	r0, r0
 8000a5a:	bd08      	pop	{r3, pc}

08000a5c <USBH_LL_ResetPort>:
  *         Reset the Host Port of the Low Level Driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ResetPort (USBH_HandleTypeDef *phost) 
{
 8000a5c:	b508      	push	{r3, lr}
  HAL_HCD_ResetPort(phost->pData);
 8000a5e:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 8000a62:	f002 fcd0 	bl	8003406 <HAL_HCD_ResetPort>
  return USBH_OK; 
}
 8000a66:	2000      	movs	r0, #0
 8000a68:	bd08      	pop	{r3, pc}

08000a6a <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index   
  * @retval Packet Size
  */
uint32_t USBH_LL_GetLastXferSize  (USBH_HandleTypeDef *phost, uint8_t pipe)  
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8000a6a:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 8000a6e:	f002 bcd3 	b.w	8003418 <HAL_HCD_HC_GetXferCount>

08000a72 <USBH_LL_OpenPipe>:
                                      uint8_t epnum,                                      
                                      uint8_t dev_address,
                                      uint8_t speed,
                                      uint8_t ep_type,
                                      uint16_t mps)
{
 8000a72:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_Init(phost->pData,
 8000a74:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8000a78:	9402      	str	r4, [sp, #8]
 8000a7a:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8000a7e:	9401      	str	r4, [sp, #4]
 8000a80:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8000a84:	9400      	str	r4, [sp, #0]
 8000a86:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 8000a8a:	f002 f857 	bl	8002b3c <HAL_HCD_HC_Init>
                  dev_address,
                  speed,
                  ep_type,
                  mps);
  return USBH_OK; 
}
 8000a8e:	2000      	movs	r0, #0
 8000a90:	b004      	add	sp, #16
 8000a92:	bd10      	pop	{r4, pc}

08000a94 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe_num: Pipe index               
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)   
{
 8000a94:	b508      	push	{r3, lr}
  HAL_HCD_HC_Halt(phost->pData, pipe); 
 8000a96:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 8000a9a:	f002 f885 	bl	8002ba8 <HAL_HCD_HC_Halt>
  return USBH_OK; 
}
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	bd08      	pop	{r3, pc}

08000aa2 <USBH_LL_SubmitURB>:
                                            uint8_t ep_type,  
                                            uint8_t token, 
                                            uint8_t* pbuff, 
                                            uint16_t length,
                                            uint8_t do_ping ) 
{
 8000aa2:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  HAL_HCD_HC_SubmitRequest (phost->pData,pipe, 
 8000aa4:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8000aa8:	9403      	str	r4, [sp, #12]
 8000aaa:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8000aae:	9402      	str	r4, [sp, #8]
 8000ab0:	9c07      	ldr	r4, [sp, #28]
 8000ab2:	9401      	str	r4, [sp, #4]
 8000ab4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8000ab8:	9400      	str	r4, [sp, #0]
 8000aba:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 8000abe:	f002 f8cf 	bl	8002c60 <HAL_HCD_HC_SubmitRequest>
                            token, 
                            pbuff, 
                            length,
                            do_ping);
  return USBH_OK;   
}
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	b004      	add	sp, #16
 8000ac6:	bd10      	pop	{r4, pc}

08000ac8 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR  
  *            @arg URB_STALL      
  */
USBH_URBStateTypeDef  USBH_LL_GetURBState (USBH_HandleTypeDef *phost, uint8_t pipe) 
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8000ac8:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 8000acc:	f002 bc9e 	b.w	800340c <HAL_HCD_HC_GetURBState>

08000ad0 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active 
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef  USBH_LL_DriverVBUS (USBH_HandleTypeDef *phost, uint8_t state)
{
 8000ad0:	b508      	push	{r3, lr}

  Bit 12 PPWR: Port power
  The application uses this field to control power to this port, and the core 
  clears this bit on an overcurrent condition.
  */
  if (0 == state)
 8000ad2:	b949      	cbnz	r1, 8000ae8 <USBH_LL_DriverVBUS+0x18>
  {
    /* DISABLE is needed on output of the Power Switch */
    HAL_GPIO_WritePin(HOST_POWERSW_PORT, HOST_POWERSW_VBUS, GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
  }
  else
  {
    /*ENABLE the Power Switch by driving the Enable LOW */
    HAL_GPIO_WritePin(HOST_POWERSW_PORT, HOST_POWERSW_VBUS, GPIO_PIN_RESET);
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <USBH_LL_DriverVBUS+0x1c>)
 8000ada:	f002 f815 	bl	8002b08 <HAL_GPIO_WritePin>
  }
  
  HAL_Delay(200);
 8000ade:	20c8      	movs	r0, #200	; 0xc8
 8000ae0:	f001 fcba 	bl	8002458 <HAL_Delay>
  return USBH_OK;  
}
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(HOST_POWERSW_PORT, HOST_POWERSW_VBUS, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	e7f4      	b.n	8000ad6 <USBH_LL_DriverVBUS+0x6>
 8000aec:	40020800 	.word	0x40020800

08000af0 <USBH_LL_SetToggle>:
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef   USBH_LL_SetToggle   (USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)   
{
  if(hhcd.hc[pipe].ep_is_in)
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <USBH_LL_SetToggle+0x1c>)
 8000af2:	202c      	movs	r0, #44	; 0x2c
 8000af4:	fb00 3101 	mla	r1, r0, r1, r3
 8000af8:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8000afc:	b11b      	cbz	r3, 8000b06 <USBH_LL_SetToggle+0x16>
  {
    hhcd.hc[pipe].toggle_in = toggle;
 8000afe:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  else
  {
    hhcd.hc[pipe].toggle_out = toggle;
  }
  return USBH_OK; 
}
 8000b02:	2000      	movs	r0, #0
 8000b04:	4770      	bx	lr
    hhcd.hc[pipe].toggle_out = toggle;
 8000b06:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
 8000b0a:	e7fa      	b.n	8000b02 <USBH_LL_SetToggle+0x12>
 8000b0c:	200012f8 	.word	0x200012f8

08000b10 <USBH_LL_GetToggle>:
  */
uint8_t  USBH_LL_GetToggle   (USBH_HandleTypeDef *phost, uint8_t pipe)   
{
  uint8_t toggle = 0;
  
  if(hhcd.hc[pipe].ep_is_in)
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <USBH_LL_GetToggle+0x1c>)
 8000b12:	222c      	movs	r2, #44	; 0x2c
 8000b14:	fb02 3101 	mla	r1, r2, r1, r3
 8000b18:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8000b1c:	b113      	cbz	r3, 8000b24 <USBH_LL_GetToggle+0x14>
  {
    toggle = hhcd.hc[pipe].toggle_in;
 8000b1e:	f891 0054 	ldrb.w	r0, [r1, #84]	; 0x54
 8000b22:	4770      	bx	lr
  }
  else
  {
    toggle = hhcd.hc[pipe].toggle_out;
 8000b24:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  }
  return toggle; 
}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	200012f8 	.word	0x200012f8

08000b30 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void  USBH_Delay (uint32_t Delay)
{
  HAL_Delay(Delay);  
 8000b30:	f001 bc92 	b.w	8002458 <HAL_Delay>

08000b34 <WavePlayerPauseResume>:
  * @param  state: Player state: Pause, Resume or Idle
  * @retval None
  */
void WavePlayerPauseResume(uint32_t wState)
{
  if(wState == PAUSE_STATUS)
 8000b34:	b908      	cbnz	r0, 8000b3a <WavePlayerPauseResume+0x6>
  {
    BSP_AUDIO_OUT_Pause();   
 8000b36:	f001 b96d 	b.w	8001e14 <BSP_AUDIO_OUT_Pause>
  }
  else
  {
    BSP_AUDIO_OUT_Resume();   
 8000b3a:	f001 b97f 	b.w	8001e3c <BSP_AUDIO_OUT_Resume>

08000b3e <WavePlayerStop>:
  * @param  None
  * @retval None
  */
void WavePlayerStop(void)
{ 
  BSP_AUDIO_OUT_Stop(CODEC_PDWN_HW);
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f001 b990 	b.w	8001e64 <BSP_AUDIO_OUT_Stop>

08000b44 <WavePlayerInit>:
* @brief  Initializes the Wave player.
* @param  AudioFreq: Audio sampling frequency
* @retval None
*/
int WavePlayerInit(uint32_t AudioFreq)
{ 
 8000b44:	b507      	push	{r0, r1, r2, lr}
 8000b46:	9001      	str	r0, [sp, #4]
  /* MEMS Accelerometer configure to manage PAUSE, RESUME operations */
  BSP_ACCELERO_Click_ITConfig();
 8000b48:	f001 f910 	bl	8001d6c <BSP_ACCELERO_Click_ITConfig>

  /* Initialize the Audio codec and all related peripherals (I2S, I2C, IOExpander, IOs...) */  
  return(BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_AUTO, Volume, AudioFreq));  
 8000b4c:	9a01      	ldr	r2, [sp, #4]
 8000b4e:	2146      	movs	r1, #70	; 0x46
 8000b50:	2004      	movs	r0, #4
 8000b52:	f001 fa5f 	bl	8002014 <BSP_AUDIO_OUT_Init>
}
 8000b56:	b003      	add	sp, #12
 8000b58:	f85d fb04 	ldr.w	pc, [sp], #4

08000b5c <WavePlayBack>:
{ 
 8000b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  AudioPlayStart = 1;
 8000b60:	4c40      	ldr	r4, [pc, #256]	; (8000c64 <WavePlayBack+0x108>)
  RepeatState = REPEAT_ON;
 8000b62:	4f41      	ldr	r7, [pc, #260]	; (8000c68 <WavePlayBack+0x10c>)
  UINT bytesread = 0;
 8000b64:	2300      	movs	r3, #0
  AudioPlayStart = 1;
 8000b66:	2201      	movs	r2, #1
 8000b68:	6022      	str	r2, [r4, #0]
  UINT bytesread = 0;
 8000b6a:	9301      	str	r3, [sp, #4]
  RepeatState = REPEAT_ON;
 8000b6c:	603b      	str	r3, [r7, #0]
  if(WavePlayerInit(AudioFreq) != 0)
 8000b6e:	f7ff ffe9 	bl	8000b44 <WavePlayerInit>
 8000b72:	b108      	cbz	r0, 8000b78 <WavePlayBack+0x1c>
    Error_Handler();
 8000b74:	f7ff fce6 	bl	8000544 <Error_Handler>
  f_lseek(&FileRead, 0);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	483c      	ldr	r0, [pc, #240]	; (8000c6c <WavePlayBack+0x110>)
  LEDsState = LED6_TOGGLE;
 8000b7c:	4e3c      	ldr	r6, [pc, #240]	; (8000c70 <WavePlayBack+0x114>)
  PauseResumeStatus = RESUME_STATUS;
 8000b7e:	4d3d      	ldr	r5, [pc, #244]	; (8000c74 <WavePlayBack+0x118>)
  while((AudioRemSize != 0) && (AppliState != APPLICATION_IDLE))
 8000b80:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8000c84 <WavePlayBack+0x128>
    if(CmdIndex == CMD_PLAY)
 8000b84:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8000c88 <WavePlayBack+0x12c>
        f_read(&FileRead, 
 8000b88:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8000c78 <WavePlayBack+0x11c>
  f_lseek(&FileRead, 0);
 8000b8c:	f006 fe16 	bl	80077bc <f_lseek>
  f_read (&FileRead, &Audio_Buffer[0], AUDIO_BUFFER_SIZE, &bytesread);
 8000b90:	4939      	ldr	r1, [pc, #228]	; (8000c78 <WavePlayBack+0x11c>)
 8000b92:	4836      	ldr	r0, [pc, #216]	; (8000c6c <WavePlayBack+0x110>)
 8000b94:	ab01      	add	r3, sp, #4
 8000b96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b9a:	f006 fc3b 	bl	8007414 <f_read>
  AudioRemSize = WaveDataLength - bytesread;
 8000b9e:	9a01      	ldr	r2, [sp, #4]
 8000ba0:	6863      	ldr	r3, [r4, #4]
  BSP_AUDIO_OUT_Play((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE);
 8000ba2:	4835      	ldr	r0, [pc, #212]	; (8000c78 <WavePlayBack+0x11c>)
  AudioRemSize = WaveDataLength - bytesread;
 8000ba4:	1a9b      	subs	r3, r3, r2
  BSP_AUDIO_OUT_Play((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE);
 8000ba6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  AudioRemSize = WaveDataLength - bytesread;
 8000baa:	60a3      	str	r3, [r4, #8]
  BSP_AUDIO_OUT_Play((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE);
 8000bac:	f001 f90c 	bl	8001dc8 <BSP_AUDIO_OUT_Play>
  LEDsState = LED6_TOGGLE;
 8000bb0:	2306      	movs	r3, #6
 8000bb2:	6033      	str	r3, [r6, #0]
  PauseResumeStatus = RESUME_STATUS;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	602b      	str	r3, [r5, #0]
  PressCount = 0;
 8000bb8:	4b30      	ldr	r3, [pc, #192]	; (8000c7c <WavePlayBack+0x120>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
  while((AudioRemSize != 0) && (AppliState != APPLICATION_IDLE))
 8000bbe:	68a3      	ldr	r3, [r4, #8]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d042      	beq.n	8000c4a <WavePlayBack+0xee>
 8000bc4:	f898 3000 	ldrb.w	r3, [r8]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d03e      	beq.n	8000c4a <WavePlayBack+0xee>
    if(CmdIndex == CMD_PLAY)
 8000bcc:	f8d9 3000 	ldr.w	r3, [r9]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d132      	bne.n	8000c3a <WavePlayBack+0xde>
      if(PauseResumeStatus == PAUSE_STATUS)
 8000bd4:	682b      	ldr	r3, [r5, #0]
 8000bd6:	bb5b      	cbnz	r3, 8000c30 <WavePlayBack+0xd4>
        LEDsState = LED6_TOGGLE;
 8000bd8:	6033      	str	r3, [r6, #0]
        WavePlayerPauseResume(PauseResumeStatus);
 8000bda:	6828      	ldr	r0, [r5, #0]
 8000bdc:	f7ff ffaa 	bl	8000b34 <WavePlayerPauseResume>
        PauseResumeStatus = IDLE_STATUS;
 8000be0:	2302      	movs	r3, #2
 8000be2:	602b      	str	r3, [r5, #0]
      if(buffer_offset == BUFFER_OFFSET_HALF)
 8000be4:	7b23      	ldrb	r3, [r4, #12]
      bytesread = 0;
 8000be6:	f04f 0b00 	mov.w	fp, #0
      if(buffer_offset == BUFFER_OFFSET_HALF)
 8000bea:	2b01      	cmp	r3, #1
      bytesread = 0;
 8000bec:	f8cd b004 	str.w	fp, [sp, #4]
      if(buffer_offset == BUFFER_OFFSET_HALF)
 8000bf0:	d108      	bne.n	8000c04 <WavePlayBack+0xa8>
        f_read(&FileRead, 
 8000bf2:	481e      	ldr	r0, [pc, #120]	; (8000c6c <WavePlayBack+0x110>)
 8000bf4:	ab01      	add	r3, sp, #4
 8000bf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bfa:	4651      	mov	r1, sl
 8000bfc:	f006 fc0a 	bl	8007414 <f_read>
          buffer_offset = BUFFER_OFFSET_NONE;
 8000c00:	f884 b00c 	strb.w	fp, [r4, #12]
      if(buffer_offset == BUFFER_OFFSET_FULL)
 8000c04:	7b23      	ldrb	r3, [r4, #12]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d108      	bne.n	8000c1c <WavePlayBack+0xc0>
        f_read(&FileRead, 
 8000c0a:	ab01      	add	r3, sp, #4
 8000c0c:	491c      	ldr	r1, [pc, #112]	; (8000c80 <WavePlayBack+0x124>)
 8000c0e:	4817      	ldr	r0, [pc, #92]	; (8000c6c <WavePlayBack+0x110>)
 8000c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c14:	f006 fbfe 	bl	8007414 <f_read>
          buffer_offset = BUFFER_OFFSET_NONE;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	7323      	strb	r3, [r4, #12]
      if(AudioRemSize > (AUDIO_BUFFER_SIZE / 2))
 8000c1c:	68a3      	ldr	r3, [r4, #8]
 8000c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
        AudioRemSize -= bytesread;
 8000c22:	bf85      	ittet	hi
 8000c24:	68a3      	ldrhi	r3, [r4, #8]
 8000c26:	9a01      	ldrhi	r2, [sp, #4]
        AudioRemSize = 0;
 8000c28:	2300      	movls	r3, #0
        AudioRemSize -= bytesread;
 8000c2a:	1a9b      	subhi	r3, r3, r2
        AudioRemSize = 0;
 8000c2c:	60a3      	str	r3, [r4, #8]
 8000c2e:	e7c6      	b.n	8000bbe <WavePlayBack+0x62>
      else if(PauseResumeStatus == RESUME_STATUS)
 8000c30:	682b      	ldr	r3, [r5, #0]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d1d6      	bne.n	8000be4 <WavePlayBack+0x88>
        LEDsState = LED6_TOGGLE;
 8000c36:	2306      	movs	r3, #6
 8000c38:	e7ce      	b.n	8000bd8 <WavePlayBack+0x7c>
      WavePlayerStop();
 8000c3a:	f7ff ff80 	bl	8000b3e <WavePlayerStop>
      f_close(&FileRead);
 8000c3e:	480b      	ldr	r0, [pc, #44]	; (8000c6c <WavePlayBack+0x110>)
 8000c40:	f006 fdab 	bl	800779a <f_close>
      AudioRemSize = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60a3      	str	r3, [r4, #8]
      RepeatState = REPEAT_ON;
 8000c48:	603b      	str	r3, [r7, #0]
  LEDsState = LEDS_OFF;
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	6033      	str	r3, [r6, #0]
  RepeatState = REPEAT_ON;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
  AudioPlayStart = 0;
 8000c52:	6023      	str	r3, [r4, #0]
  WavePlayerStop();
 8000c54:	f7ff ff73 	bl	8000b3e <WavePlayerStop>
  f_close(&FileRead);
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <WavePlayBack+0x110>)
 8000c5a:	f006 fd9e 	bl	800779a <f_close>
}
 8000c5e:	b003      	add	sp, #12
 8000c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c64:	2000058c 	.word	0x2000058c
 8000c68:	20000574 	.word	0x20000574
 8000c6c:	20002634 	.word	0x20002634
 8000c70:	20002630 	.word	0x20002630
 8000c74:	20000004 	.word	0x20000004
 8000c78:	200015fc 	.word	0x200015fc
 8000c7c:	20000584 	.word	0x20000584
 8000c80:	20001dfc 	.word	0x20001dfc
 8000c84:	20000570 	.word	0x20000570
 8000c88:	2000057c 	.word	0x2000057c

08000c8c <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
  buffer_offset = BUFFER_OFFSET_HALF;
 8000c8c:	4b01      	ldr	r3, [pc, #4]	; (8000c94 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x8>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	731a      	strb	r2, [r3, #12]
}
 8000c92:	4770      	bx	lr
 8000c94:	2000058c 	.word	0x2000058c

08000c98 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
* @param  None
* @retval None
*/
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
  buffer_offset = BUFFER_OFFSET_FULL;
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
  BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE / 2);
 8000c9a:	4804      	ldr	r0, [pc, #16]	; (8000cac <BSP_AUDIO_OUT_TransferComplete_CallBack+0x14>)
  buffer_offset = BUFFER_OFFSET_FULL;
 8000c9c:	2202      	movs	r2, #2
  BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE / 2);
 8000c9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer_offset = BUFFER_OFFSET_FULL;
 8000ca2:	731a      	strb	r2, [r3, #12]
  BSP_AUDIO_OUT_ChangeBuffer((uint16_t*)&Audio_Buffer[0], AUDIO_BUFFER_SIZE / 2);
 8000ca4:	f001 b8ae 	b.w	8001e04 <BSP_AUDIO_OUT_ChangeBuffer>
 8000ca8:	2000058c 	.word	0x2000058c
 8000cac:	200015fc 	.word	0x200015fc

08000cb0 <BSP_AUDIO_OUT_Error_CallBack>:
* @retval None
*/
void BSP_AUDIO_OUT_Error_CallBack(void)
{
  /* Stop the program with an infinite loop */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <BSP_AUDIO_OUT_Error_CallBack>
	...

08000cb4 <WavePlayerStart>:
  * @brief  Starts Wave player.
  * @param  None
  * @retval None
  */
void WavePlayerStart(void)
{
 8000cb4:	b500      	push	{lr}
  UINT bytesread = 0;
  char path[] = "0:/";
 8000cb6:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <WavePlayerStart+0x5c>)
  char* wavefilename = NULL;
  WAVE_FormatTypeDef waveformat;
  
  /* Get the read out protection status */
  if(f_opendir(&Directory, path) == FR_OK)
 8000cb8:	4816      	ldr	r0, [pc, #88]	; (8000d14 <WavePlayerStart+0x60>)
{
 8000cba:	b08f      	sub	sp, #60	; 0x3c
  char path[] = "0:/";
 8000cbc:	2200      	movs	r2, #0
  if(f_opendir(&Directory, path) == FR_OK)
 8000cbe:	a902      	add	r1, sp, #8
  char path[] = "0:/";
 8000cc0:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if(f_opendir(&Directory, path) == FR_OK)
 8000cc4:	f006 fe87 	bl	80079d6 <f_opendir>
 8000cc8:	b988      	cbnz	r0, 8000cee <WavePlayerStart+0x3a>
  {
    if(WaveRecStatus == 1)
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <WavePlayerStart+0x64>)
    else
    {
      wavefilename = WAVE_NAME; 
    }
    /* Open the Wave file to be played */
    if(f_open(&FileRead, wavefilename , FA_READ) != FR_OK)
 8000ccc:	4913      	ldr	r1, [pc, #76]	; (8000d1c <WavePlayerStart+0x68>)
    if(WaveRecStatus == 1)
 8000cce:	6818      	ldr	r0, [r3, #0]
    if(f_open(&FileRead, wavefilename , FA_READ) != FR_OK)
 8000cd0:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <WavePlayerStart+0x6c>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	bf18      	it	ne
 8000cd8:	4619      	movne	r1, r3
 8000cda:	4812      	ldr	r0, [pc, #72]	; (8000d24 <WavePlayerStart+0x70>)
 8000cdc:	f006 fa82 	bl	80071e4 <f_open>
 8000ce0:	b140      	cbz	r0, 8000cf4 <WavePlayerStart+0x40>
    {
      BSP_LED_On(LED5);
 8000ce2:	2002      	movs	r0, #2
 8000ce4:	f000 fea8 	bl	8001a38 <BSP_LED_On>
      CmdIndex = CMD_RECORD;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <WavePlayerStart+0x74>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]

      /* Play the Wave */
      WavePlayBack(waveformat.SampleRate);
    }    
  }
}
 8000cee:	b00f      	add	sp, #60	; 0x3c
 8000cf0:	f85d fb04 	ldr.w	pc, [sp], #4
      f_read (&FileRead, &waveformat, sizeof(waveformat), &bytesread);
 8000cf4:	ab01      	add	r3, sp, #4
 8000cf6:	222c      	movs	r2, #44	; 0x2c
 8000cf8:	a903      	add	r1, sp, #12
 8000cfa:	480a      	ldr	r0, [pc, #40]	; (8000d24 <WavePlayerStart+0x70>)
 8000cfc:	f006 fb8a 	bl	8007414 <f_read>
      WaveDataLength = waveformat.FileSize;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <WavePlayerStart+0x78>)
 8000d02:	9a04      	ldr	r2, [sp, #16]
      WavePlayBack(waveformat.SampleRate);
 8000d04:	9809      	ldr	r0, [sp, #36]	; 0x24
      WaveDataLength = waveformat.FileSize;
 8000d06:	605a      	str	r2, [r3, #4]
      WavePlayBack(waveformat.SampleRate);
 8000d08:	f7ff ff28 	bl	8000b5c <WavePlayBack>
}
 8000d0c:	e7ef      	b.n	8000cee <WavePlayerStart+0x3a>
 8000d0e:	bf00      	nop
 8000d10:	002f3a30 	.word	0x002f3a30
 8000d14:	200025fc 	.word	0x200025fc
 8000d18:	200005a0 	.word	0x200005a0
 8000d1c:	0800c210 	.word	0x0800c210
 8000d20:	0800c21a 	.word	0x0800c21a
 8000d24:	20002634 	.word	0x20002634
 8000d28:	2000057c 	.word	0x2000057c
 8000d2c:	2000058c 	.word	0x2000058c

08000d30 <WavePlayer_CallBack>:
  * @brief Wave player.
  * @param  None
  * @retval None
  */
void WavePlayer_CallBack(void)
{
 8000d30:	b508      	push	{r3, lr}
  if(AppliState != APPLICATION_IDLE)
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <WavePlayer_CallBack+0x48>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b1eb      	cbz	r3, 8000d74 <WavePlayer_CallBack+0x44>
  {
    /* Reset the Wave player variables */
    RepeatState = REPEAT_ON;
 8000d38:	4a10      	ldr	r2, [pc, #64]	; (8000d7c <WavePlayer_CallBack+0x4c>)
    AudioPlayStart = 0;
    LEDsState = LEDS_OFF;
 8000d3a:	4911      	ldr	r1, [pc, #68]	; (8000d80 <WavePlayer_CallBack+0x50>)
    RepeatState = REPEAT_ON;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	6013      	str	r3, [r2, #0]
    AudioPlayStart = 0;
 8000d40:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <WavePlayer_CallBack+0x54>)
    LEDsState = LEDS_OFF;
 8000d42:	2007      	movs	r0, #7
    AudioPlayStart = 0;
 8000d44:	6013      	str	r3, [r2, #0]
    PauseResumeStatus = RESUME_STATUS;
    WaveDataLength =0;
 8000d46:	6053      	str	r3, [r2, #4]
    LEDsState = LEDS_OFF;
 8000d48:	6008      	str	r0, [r1, #0]
    PressCount = 0;
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <WavePlayer_CallBack+0x58>)
    PauseResumeStatus = RESUME_STATUS;
 8000d4c:	490f      	ldr	r1, [pc, #60]	; (8000d8c <WavePlayer_CallBack+0x5c>)
 8000d4e:	2001      	movs	r0, #1
 8000d50:	6008      	str	r0, [r1, #0]
    PressCount = 0;
 8000d52:	6013      	str	r3, [r2, #0]
    
    /* Stop the Codec */
    if(BSP_AUDIO_OUT_Stop(CODEC_PDWN_HW) != AUDIO_OK)
 8000d54:	f001 f886 	bl	8001e64 <BSP_AUDIO_OUT_Stop>
 8000d58:	b108      	cbz	r0, 8000d5e <WavePlayer_CallBack+0x2e>
    {
      Error_Handler();
 8000d5a:	f7ff fbf3 	bl	8000544 <Error_Handler>
    }
    
    /* Turn OFF LED3, LED4 and LED6 */
    BSP_LED_Off(LED3);
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f000 fe78 	bl	8001a54 <BSP_LED_Off>
    BSP_LED_Off(LED4);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f000 fe75 	bl	8001a54 <BSP_LED_Off>
    BSP_LED_Off(LED6);
  }
} 
 8000d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    BSP_LED_Off(LED6);
 8000d6e:	2003      	movs	r0, #3
 8000d70:	f000 be70 	b.w	8001a54 <BSP_LED_Off>
} 
 8000d74:	bd08      	pop	{r3, pc}
 8000d76:	bf00      	nop
 8000d78:	20000570 	.word	0x20000570
 8000d7c:	20000574 	.word	0x20000574
 8000d80:	20002630 	.word	0x20002630
 8000d84:	2000058c 	.word	0x2000058c
 8000d88:	20000584 	.word	0x20000584
 8000d8c:	20000004 	.word	0x20000004

08000d90 <WaveRecorderStop>:
  * @brief  Stop Audio recording.
  * @param  None
  * @retval None
  */
uint32_t WaveRecorderStop(void)
{
 8000d90:	b508      	push	{r3, lr}
  return BSP_AUDIO_IN_Stop();
 8000d92:	f001 f999 	bl	80020c8 <BSP_AUDIO_IN_Stop>
}
 8000d96:	bd08      	pop	{r3, pc}

08000d98 <WaveRecorderProcess>:
  * @brief  Update the recorded data. 
  * @param  None
  * @retval None
  */
void WaveRecorderProcess(void)
{     
 8000d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Current size of the recorded buffer */
  uint32_t byteswritten = 0; 
  
  WaveCounter = 0;
 8000d9c:	4e8a      	ldr	r6, [pc, #552]	; (8000fc8 <WaveRecorderProcess+0x230>)
  LEDsState = LEDS_OFF;
 8000d9e:	4f8b      	ldr	r7, [pc, #556]	; (8000fcc <WaveRecorderProcess+0x234>)
  
  /* Remove Wave file if it exists on USB Flash Disk */
  f_unlink (REC_WAVE_NAME);
 8000da0:	488b      	ldr	r0, [pc, #556]	; (8000fd0 <WaveRecorderProcess+0x238>)
{     
 8000da2:	b085      	sub	sp, #20
  uint32_t byteswritten = 0; 
 8000da4:	2300      	movs	r3, #0
  WaveCounter = 0;
 8000da6:	6033      	str	r3, [r6, #0]
  uint32_t byteswritten = 0; 
 8000da8:	9303      	str	r3, [sp, #12]
  LEDsState = LEDS_OFF;
 8000daa:	2307      	movs	r3, #7
 8000dac:	603b      	str	r3, [r7, #0]
  f_unlink (REC_WAVE_NAME);
 8000dae:	f006 fe65 	bl	8007a7c <f_unlink>
  
  /* Open the file to write on it */
  if ((AppliState == APPLICATION_IDLE) || (f_open(&WavFile, REC_WAVE_NAME, FA_CREATE_ALWAYS | FA_WRITE) != FR_OK))
 8000db2:	4b88      	ldr	r3, [pc, #544]	; (8000fd4 <WaveRecorderProcess+0x23c>)
 8000db4:	9301      	str	r3, [sp, #4]
 8000db6:	781a      	ldrb	r2, [r3, #0]
 8000db8:	b132      	cbz	r2, 8000dc8 <WaveRecorderProcess+0x30>
 8000dba:	4985      	ldr	r1, [pc, #532]	; (8000fd0 <WaveRecorderProcess+0x238>)
 8000dbc:	4886      	ldr	r0, [pc, #536]	; (8000fd8 <WaveRecorderProcess+0x240>)
 8000dbe:	220a      	movs	r2, #10
 8000dc0:	f006 fa10 	bl	80071e4 <f_open>
 8000dc4:	4605      	mov	r5, r0
 8000dc6:	b118      	cbz	r0, 8000dd0 <WaveRecorderProcess+0x38>
  {   
    while(1)
    {
      /* Toggle LED5 in infinite loop to signal that: USB Flash Disk is not connected/removed
         or an issue has occurred when creating/opening Wave file */
      BSP_LED_Toggle(LED5); 
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f000 fe51 	bl	8001a70 <BSP_LED_Toggle>
    while(1)
 8000dce:	e7fb      	b.n	8000dc8 <WaveRecorderProcess+0x30>
  * @retval 0 if passed, !0 if failed.
  */
static uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 8000dd0:	4c82      	ldr	r4, [pc, #520]	; (8000fdc <WaveRecorderProcess+0x244>)
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 8000dd2:	4b83      	ldr	r3, [pc, #524]	; (8000fe0 <WaveRecorderProcess+0x248>)
 8000dd4:	4a83      	ldr	r2, [pc, #524]	; (8000fe4 <WaveRecorderProcess+0x24c>)
 8000dd6:	605a      	str	r2, [r3, #4]
  pHeader[5] = 0x4C;
  pHeader[6] = 0x1D;
  pHeader[7] = 0x00;
  
  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 8000dd8:	f04f 0c57 	mov.w	ip, #87	; 0x57
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8000ddc:	f44f 5b7a 	mov.w	fp, #16000	; 0x3e80
 8000de0:	f44f 417a 	mov.w	r1, #64000	; 0xfa00
  pHeader[8]  = 'W';
 8000de4:	f884 c008 	strb.w	ip, [r4, #8]
  pHeader[9]  = 'A';
 8000de8:	f04f 0c41 	mov.w	ip, #65	; 0x41
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 8000dec:	e9c3 b106 	strd	fp, r1, [r3, #24]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 8000df0:	222c      	movs	r2, #44	; 0x2c
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 8000df2:	2002      	movs	r0, #2
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 8000df4:	497c      	ldr	r1, [pc, #496]	; (8000fe8 <WaveRecorderProcess+0x250>)
  pHeader[9]  = 'A';
 8000df6:	f884 c009 	strb.w	ip, [r4, #9]
  pHeader[10] = 'V';
 8000dfa:	f04f 0c56 	mov.w	ip, #86	; 0x56
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 8000dfe:	611a      	str	r2, [r3, #16]
  WaveFormat.NbrChannels = 2;          /* Number of channels: 1:Mono or 2:Stereo */
 8000e00:	82d8      	strh	r0, [r3, #22]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 8000e02:	6219      	str	r1, [r3, #32]
  pHeader[10] = 'V';
 8000e04:	f884 c00a 	strb.w	ip, [r4, #10]
  pHeader[0] = 'R';
 8000e08:	2352      	movs	r3, #82	; 0x52
  pHeader[11] = 'E';
 8000e0a:	f04f 0c45 	mov.w	ip, #69	; 0x45
  pHeader[0] = 'R';
 8000e0e:	7023      	strb	r3, [r4, #0]
  pHeader[11] = 'E';
 8000e10:	f884 c00b 	strb.w	ip, [r4, #11]
  pHeader[1] = 'I';
 8000e14:	2349      	movs	r3, #73	; 0x49
  
  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 8000e16:	f04f 0c66 	mov.w	ip, #102	; 0x66
  pHeader[1] = 'I';
 8000e1a:	7063      	strb	r3, [r4, #1]
  pHeader[12]  = 'f';
 8000e1c:	f884 c00c 	strb.w	ip, [r4, #12]
  pHeader[2] = 'F';
 8000e20:	2346      	movs	r3, #70	; 0x46
  pHeader[13]  = 'm';
 8000e22:	f04f 0c6d 	mov.w	ip, #109	; 0x6d
    WaveRecStatus = 1;
 8000e26:	f04f 0901 	mov.w	r9, #1
  pHeader[14]  = 't';
  pHeader[15]  = ' ';
 8000e2a:	f04f 0e20 	mov.w	lr, #32
  
  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 8000e2e:	f04f 0810 	mov.w	r8, #16
  pHeader[5] = 0x4C;
 8000e32:	214c      	movs	r1, #76	; 0x4c
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
  pHeader[23]  = 0x00;
  
  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 8000e34:	f04f 0a80 	mov.w	sl, #128	; 0x80
  pHeader[2] = 'F';
 8000e38:	70a3      	strb	r3, [r4, #2]
  pHeader[3] = 'F';
 8000e3a:	70e3      	strb	r3, [r4, #3]
  pHeader[13]  = 'm';
 8000e3c:	f884 c00d 	strb.w	ip, [r4, #13]
  pHeader[6] = 0x1D;
 8000e40:	231d      	movs	r3, #29
  pHeader[14]  = 't';
 8000e42:	f04f 0c74 	mov.w	ip, #116	; 0x74
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 8000e46:	75a0      	strb	r0, [r4, #22]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 8000e48:	203e      	movs	r0, #62	; 0x3e
  pHeader[14]  = 't';
 8000e4a:	f884 c00e 	strb.w	ip, [r4, #14]
  pHeader[15]  = ' ';
 8000e4e:	f884 e00f 	strb.w	lr, [r4, #15]
    WaveRecStatus = 1;
 8000e52:	f8c6 9004 	str.w	r9, [r6, #4]
  pHeader[4] = 0x00;
 8000e56:	7125      	strb	r5, [r4, #4]
  pHeader[5] = 0x4C;
 8000e58:	7161      	strb	r1, [r4, #5]
  pHeader[6] = 0x1D;
 8000e5a:	71a3      	strb	r3, [r4, #6]
  pHeader[7] = 0x00;
 8000e5c:	71e5      	strb	r5, [r4, #7]
  pHeader[16]  = 0x10;
 8000e5e:	f884 8010 	strb.w	r8, [r4, #16]
  pHeader[17]  = 0x00;
 8000e62:	7465      	strb	r5, [r4, #17]
  pHeader[18]  = 0x00;
 8000e64:	74a5      	strb	r5, [r4, #18]
  pHeader[19]  = 0x00;
 8000e66:	74e5      	strb	r5, [r4, #19]
  pHeader[20]  = 0x01;
 8000e68:	f884 9014 	strb.w	r9, [r4, #20]
  pHeader[21]  = 0x00;
 8000e6c:	7565      	strb	r5, [r4, #21]
  pHeader[23]  = 0x00;
 8000e6e:	75e5      	strb	r5, [r4, #23]
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 8000e70:	f884 a018 	strb.w	sl, [r4, #24]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 8000e74:	7660      	strb	r0, [r4, #25]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
  
  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 8000e76:	20fa      	movs	r0, #250	; 0xfa
 8000e78:	7760      	strb	r0, [r4, #29]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
  
  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 8000e7a:	2004      	movs	r0, #4
 8000e7c:	f884 0020 	strb.w	r0, [r4, #32]
  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
  pHeader[35]  = 0x00;
  
  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 8000e80:	2064      	movs	r0, #100	; 0x64
 8000e82:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  pHeader[37]  = 'a';
 8000e86:	2061      	movs	r0, #97	; 0x61
 8000e88:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  pHeader[38]  = 't';
  pHeader[39]  = 'a';
 8000e8c:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
  
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  pHeader[40]  = 0x00;
  pHeader[41]  = 0x4C;
 8000e90:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
  pHeader[42]  = 0x1D;
 8000e94:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  f_write(&WavFile, pHeaderBuff, 44, (void *)&byteswritten);
 8000e98:	4621      	mov	r1, r4
 8000e9a:	ab03      	add	r3, sp, #12
 8000e9c:	484e      	ldr	r0, [pc, #312]	; (8000fd8 <WaveRecorderProcess+0x240>)
  pHeader[38]  = 't';
 8000e9e:	f884 c026 	strb.w	ip, [r4, #38]	; 0x26
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 8000ea2:	76a5      	strb	r5, [r4, #26]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 8000ea4:	76e5      	strb	r5, [r4, #27]
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 8000ea6:	7725      	strb	r5, [r4, #28]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 8000ea8:	77a5      	strb	r5, [r4, #30]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 8000eaa:	77e5      	strb	r5, [r4, #31]
  pHeader[33]  = 0x00;
 8000eac:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 8000eb0:	f884 8022 	strb.w	r8, [r4, #34]	; 0x22
  pHeader[35]  = 0x00;
 8000eb4:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  pHeader[40]  = 0x00;
 8000eb8:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
  pHeader[43]  = 0x00;
 8000ebc:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
  f_write(&WavFile, pHeaderBuff, 44, (void *)&byteswritten);
 8000ec0:	f006 fb5b 	bl	800757a <f_write>
  BufferCtl.fptr = byteswritten;
 8000ec4:	4b49      	ldr	r3, [pc, #292]	; (8000fec <WaveRecorderProcess+0x254>)
 8000ec6:	9a03      	ldr	r2, [sp, #12]
  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 8000ec8:	4641      	mov	r1, r8
  BufferCtl.offset = BUFFER_OFFSET_NONE;
 8000eca:	e9c3 5200 	strd	r5, r2, [r3]
  BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR);
 8000ece:	4658      	mov	r0, fp
 8000ed0:	464a      	mov	r2, r9
 8000ed2:	f001 f9c3 	bl	800225c <BSP_AUDIO_IN_Init>
  BSP_AUDIO_IN_Record((uint16_t*)&InternalBuffer[0], INTERNAL_BUFF_SIZE);
 8000ed6:	4651      	mov	r1, sl
 8000ed8:	f106 0008 	add.w	r0, r6, #8
 8000edc:	f001 f8ea 	bl	80020b4 <BSP_AUDIO_IN_Record>
  TimeRecBase = 0;
 8000ee0:	4a43      	ldr	r2, [pc, #268]	; (8000ff0 <WaveRecorderProcess+0x258>)
 8000ee2:	4b42      	ldr	r3, [pc, #264]	; (8000fec <WaveRecorderProcess+0x254>)
 8000ee4:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8000ff4 <WaveRecorderProcess+0x25c>
        if(f_write(&WavFile, (uint8_t*)(WrBuffer+AUDIOBuffOffset), WR_BUFFER_SIZE, (void*)&byteswritten) != FR_OK)
 8000ee8:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8000ff8 <WaveRecorderProcess+0x260>
 8000eec:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8000fd8 <WaveRecorderProcess+0x240>
  TimeRecBase = 0;
 8000ef0:	6015      	str	r5, [r2, #0]
  LEDsState = LED3_TOGGLE;
 8000ef2:	2103      	movs	r1, #3
  ITCounter = 0;
 8000ef4:	f8c6 5108 	str.w	r5, [r6, #264]	; 0x108
  LEDsState = LED3_TOGGLE;
 8000ef8:	4691      	mov	r9, r2
 8000efa:	6039      	str	r1, [r7, #0]
  while(AppliState != APPLICATION_IDLE)
 8000efc:	461d      	mov	r5, r3
 8000efe:	9b01      	ldr	r3, [sp, #4]
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b343      	cbz	r3, 8000f56 <WaveRecorderProcess+0x1be>
    if (TimeRecBase <= DEFAULT_TIME_REC)
 8000f04:	f8d9 2000 	ldr.w	r2, [r9]
 8000f08:	f247 5330 	movw	r3, #30000	; 0x7530
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d84f      	bhi.n	8000fb0 <WaveRecorderProcess+0x218>
      if(AUDIODataReady == 1)
 8000f10:	f8d6 310c 	ldr.w	r3, [r6, #268]	; 0x10c
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d113      	bne.n	8000f40 <WaveRecorderProcess+0x1a8>
        if(f_write(&WavFile, (uint8_t*)(WrBuffer+AUDIOBuffOffset), WR_BUFFER_SIZE, (void*)&byteswritten) != FR_OK)
 8000f18:	f8d6 1110 	ldr.w	r1, [r6, #272]	; 0x110
 8000f1c:	ab03      	add	r3, sp, #12
 8000f1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f22:	eb0a 0141 	add.w	r1, sl, r1, lsl #1
 8000f26:	4658      	mov	r0, fp
 8000f28:	f006 fb27 	bl	800757a <f_write>
 8000f2c:	b108      	cbz	r0, 8000f32 <WaveRecorderProcess+0x19a>
          Error_Handler();
 8000f2e:	f7ff fb09 	bl	8000544 <Error_Handler>
        BufferCtl.fptr += byteswritten;
 8000f32:	686b      	ldr	r3, [r5, #4]
 8000f34:	9a03      	ldr	r2, [sp, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	606b      	str	r3, [r5, #4]
        AUDIODataReady = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
      if (CmdIndex != CMD_RECORD)
 8000f40:	f8d8 3000 	ldr.w	r3, [r8]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d0da      	beq.n	8000efe <WaveRecorderProcess+0x166>
        WaveRecorderStop();
 8000f48:	f7ff ff22 	bl	8000d90 <WaveRecorderStop>
        CmdIndex = CMD_PLAY;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c8 3000 	str.w	r3, [r8]
        LEDsState = LED6_TOGGLE;
 8000f52:	2306      	movs	r3, #6
 8000f54:	603b      	str	r3, [r7, #0]
  f_lseek(&WavFile, 0);
 8000f56:	2100      	movs	r1, #0
 8000f58:	481f      	ldr	r0, [pc, #124]	; (8000fd8 <WaveRecorderProcess+0x240>)
 8000f5a:	f006 fc2f 	bl	80077bc <f_lseek>
static uint32_t WavProcess_HeaderUpdate(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct)
{
  /* Write the file length ----------------------------------------------------*/
  /* The sampling time: this value will be be written back at the end of the 
     recording opearation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */
  pHeader[4] = (uint8_t)(BufferCtl.fptr);
 8000f5e:	686b      	ldr	r3, [r5, #4]
 8000f60:	7123      	strb	r3, [r4, #4]
  pHeader[5] = (uint8_t)(BufferCtl.fptr >> 8);
 8000f62:	0a1a      	lsrs	r2, r3, #8
 8000f64:	7162      	strb	r2, [r4, #5]
  pHeader[6] = (uint8_t)(BufferCtl.fptr >> 16);
 8000f66:	0c1a      	lsrs	r2, r3, #16
 8000f68:	71a2      	strb	r2, [r4, #6]
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 8000f6a:	0e1a      	lsrs	r2, r3, #24
  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl.fptr -=44;
 8000f6c:	3b2c      	subs	r3, #44	; 0x2c
  pHeader[7] = (uint8_t)(BufferCtl.fptr >> 24);
 8000f6e:	71e2      	strb	r2, [r4, #7]
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 8000f70:	0a1a      	lsrs	r2, r3, #8
  BufferCtl.fptr -=44;
 8000f72:	606b      	str	r3, [r5, #4]
  pHeader[40] = (uint8_t)(BufferCtl.fptr); 
 8000f74:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  pHeader[41] = (uint8_t)(BufferCtl.fptr >> 8);
 8000f78:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 8000f7c:	0c1a      	lsrs	r2, r3, #16
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 8000f7e:	0e1b      	lsrs	r3, r3, #24
  f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten);
 8000f80:	4916      	ldr	r1, [pc, #88]	; (8000fdc <WaveRecorderProcess+0x244>)
  pHeader[42] = (uint8_t)(BufferCtl.fptr >> 16);
 8000f82:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  pHeader[43] = (uint8_t)(BufferCtl.fptr >> 24); 
 8000f86:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  f_write(&WavFile, pHeaderBuff, 44, (void*)&byteswritten);
 8000f8a:	222c      	movs	r2, #44	; 0x2c
 8000f8c:	ab03      	add	r3, sp, #12
 8000f8e:	4812      	ldr	r0, [pc, #72]	; (8000fd8 <WaveRecorderProcess+0x240>)
 8000f90:	f006 faf3 	bl	800757a <f_write>
  f_close (&WavFile);
 8000f94:	4810      	ldr	r0, [pc, #64]	; (8000fd8 <WaveRecorderProcess+0x240>)
 8000f96:	f006 fc00 	bl	800779a <f_close>
  f_mount(NULL, 0, 1);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	4608      	mov	r0, r1
 8000fa0:	f006 f8ec 	bl	800717c <f_mount>
  CmdIndex = CMD_PLAY;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c8 3000 	str.w	r3, [r8]
}
 8000faa:	b005      	add	sp, #20
 8000fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      WaveRecorderStop();
 8000fb0:	f7ff feee 	bl	8000d90 <WaveRecorderStop>
      CmdIndex = CMD_STOP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	f8c8 3000 	str.w	r3, [r8]
      LEDsState = LED4_TOGGLE;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	603b      	str	r3, [r7, #0]
      AUDIODataReady = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
      break;
 8000fc4:	e7c7      	b.n	8000f56 <WaveRecorderProcess+0x1be>
 8000fc6:	bf00      	nop
 8000fc8:	2000059c 	.word	0x2000059c
 8000fcc:	20002630 	.word	0x20002630
 8000fd0:	0800c210 	.word	0x0800c210
 8000fd4:	20000570 	.word	0x20000570
 8000fd8:	200048c4 	.word	0x200048c4
 8000fdc:	20002890 	.word	0x20002890
 8000fe0:	20002864 	.word	0x20002864
 8000fe4:	001d4c00 	.word	0x001d4c00
 8000fe8:	00100004 	.word	0x00100004
 8000fec:	200028bc 	.word	0x200028bc
 8000ff0:	20000588 	.word	0x20000588
 8000ff4:	2000057c 	.word	0x2000057c
 8000ff8:	200028c4 	.word	0x200028c4

08000ffc <BSP_AUDIO_IN_TransferComplete_CallBack>:
{
 8000ffc:	b510      	push	{r4, lr}
  BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[INTERNAL_BUFF_SIZE/2], (uint16_t*)&RecBuf[0]);
 8000ffe:	4c1c      	ldr	r4, [pc, #112]	; (8001070 <BSP_AUDIO_IN_TransferComplete_CallBack+0x74>)
 8001000:	f504 718a 	add.w	r1, r4, #276	; 0x114
 8001004:	f104 0088 	add.w	r0, r4, #136	; 0x88
 8001008:	f001 f866 	bl	80020d8 <BSP_AUDIO_IN_PDMToPCM>
  memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 800100c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001010:	4a18      	ldr	r2, [pc, #96]	; (8001074 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 8001012:	f504 718a 	add.w	r1, r4, #276	; 0x114
 8001016:	eb02 1283 	add.w	r2, r2, r3, lsl #6
 800101a:	f504 70aa 	add.w	r0, r4, #340	; 0x154
 800101e:	4623      	mov	r3, r4
 8001020:	f851 4b04 	ldr.w	r4, [r1], #4
 8001024:	f842 4b04 	str.w	r4, [r2], #4
 8001028:	4281      	cmp	r1, r0
 800102a:	d1f9      	bne.n	8001020 <BSP_AUDIO_IN_TransferComplete_CallBack+0x24>
  BufferCtl.offset = BUFFER_OFFSET_NONE;
 800102c:	4912      	ldr	r1, [pc, #72]	; (8001078 <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>)
 800102e:	2200      	movs	r2, #0
 8001030:	600a      	str	r2, [r1, #0]
  if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 8001032:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8001036:	293f      	cmp	r1, #63	; 0x3f
 8001038:	d10a      	bne.n	8001050 <BSP_AUDIO_IN_TransferComplete_CallBack+0x54>
    AUDIODataReady = 1;
 800103a:	2101      	movs	r1, #1
 800103c:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
    AUDIOBuffOffset = 0;
 8001040:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    ITCounter++;
 8001044:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001048:	440a      	add	r2, r1
    ITCounter++;
 800104a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 800104e:	bd10      	pop	{r4, pc}
  else if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*2))-1)
 8001050:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8001054:	297f      	cmp	r1, #127	; 0x7f
    AUDIODataReady = 1;
 8001056:	bf09      	itett	eq
 8001058:	2101      	moveq	r1, #1
    ITCounter++;
 800105a:	f8d3 2108 	ldrne.w	r2, [r3, #264]	; 0x108
    AUDIODataReady = 1;
 800105e:	f8c3 110c 	streq.w	r1, [r3, #268]	; 0x10c
    AUDIOBuffOffset = WR_BUFFER_SIZE/2;
 8001062:	f44f 6100 	moveq.w	r1, #2048	; 0x800
 8001066:	bf0c      	ite	eq
 8001068:	f8c3 1110 	streq.w	r1, [r3, #272]	; 0x110
    ITCounter++;
 800106c:	3201      	addne	r2, #1
 800106e:	e7ec      	b.n	800104a <BSP_AUDIO_IN_TransferComplete_CallBack+0x4e>
 8001070:	2000059c 	.word	0x2000059c
 8001074:	200028c4 	.word	0x200028c4
 8001078:	200028bc 	.word	0x200028bc

0800107c <BSP_AUDIO_IN_HalfTransfer_CallBack>:
{ 
 800107c:	b510      	push	{r4, lr}
  BSP_AUDIO_IN_PDMToPCM((uint16_t*)&InternalBuffer[0], (uint16_t*)&RecBuf[0]);
 800107e:	4c1c      	ldr	r4, [pc, #112]	; (80010f0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x74>)
 8001080:	f504 718a 	add.w	r1, r4, #276	; 0x114
 8001084:	f104 0008 	add.w	r0, r4, #8
 8001088:	f001 f826 	bl	80020d8 <BSP_AUDIO_IN_PDMToPCM>
  memcpy((uint16_t*)&WrBuffer[ITCounter * (PCM_OUT_SIZE*2)], RecBuf, PCM_OUT_SIZE*4);
 800108c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8001090:	4a18      	ldr	r2, [pc, #96]	; (80010f4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>)
 8001092:	f504 718a 	add.w	r1, r4, #276	; 0x114
 8001096:	eb02 1283 	add.w	r2, r2, r3, lsl #6
 800109a:	f504 70aa 	add.w	r0, r4, #340	; 0x154
 800109e:	4623      	mov	r3, r4
 80010a0:	f851 4b04 	ldr.w	r4, [r1], #4
 80010a4:	f842 4b04 	str.w	r4, [r2], #4
 80010a8:	4281      	cmp	r1, r0
 80010aa:	d1f9      	bne.n	80010a0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x24>
  BufferCtl.offset = BUFFER_OFFSET_NONE;
 80010ac:	4912      	ldr	r1, [pc, #72]	; (80010f8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x7c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	600a      	str	r2, [r1, #0]
  if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*4))-1)
 80010b2:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80010b6:	293f      	cmp	r1, #63	; 0x3f
 80010b8:	d10a      	bne.n	80010d0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x54>
    AUDIODataReady = 1;
 80010ba:	2101      	movs	r1, #1
 80010bc:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
    AUDIOBuffOffset = 0;
 80010c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    ITCounter++;
 80010c4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80010c8:	440a      	add	r2, r1
    ITCounter++;
 80010ca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 80010ce:	bd10      	pop	{r4, pc}
  else if(ITCounter == (WR_BUFFER_SIZE/(PCM_OUT_SIZE*2))-1)
 80010d0:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80010d4:	297f      	cmp	r1, #127	; 0x7f
    AUDIODataReady = 1;
 80010d6:	bf09      	itett	eq
 80010d8:	2101      	moveq	r1, #1
    ITCounter++;
 80010da:	f8d3 2108 	ldrne.w	r2, [r3, #264]	; 0x108
    AUDIODataReady = 1;
 80010de:	f8c3 110c 	streq.w	r1, [r3, #268]	; 0x10c
    AUDIOBuffOffset = WR_BUFFER_SIZE/2;
 80010e2:	f44f 6100 	moveq.w	r1, #2048	; 0x800
 80010e6:	bf0c      	ite	eq
 80010e8:	f8c3 1110 	streq.w	r1, [r3, #272]	; 0x110
    ITCounter++;
 80010ec:	3201      	addne	r2, #1
 80010ee:	e7ec      	b.n	80010ca <BSP_AUDIO_IN_HalfTransfer_CallBack+0x4e>
 80010f0:	2000059c 	.word	0x2000059c
 80010f4:	200028c4 	.word	0x200028c4
 80010f8:	200028bc 	.word	0x200028bc

080010fc <cs43l22_SetFrequency>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
  return 0;
}
 80010fc:	2000      	movs	r0, #0
 80010fe:	4770      	bx	lr

08001100 <cs43l22_Reset>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
  return 0;
}
 8001100:	2000      	movs	r0, #0
 8001102:	4770      	bx	lr

08001104 <cs43l22_SetVolume>:
{
 8001104:	b507      	push	{r0, r1, r2, lr}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001106:	2964      	cmp	r1, #100	; 0x64
 8001108:	bf9b      	ittet	ls
 800110a:	2264      	movls	r2, #100	; 0x64
 800110c:	ebc1 2101 	rsbls	r1, r1, r1, lsl #8
 8001110:	22ff      	movhi	r2, #255	; 0xff
 8001112:	fbb1 f2f2 	udivls	r2, r1, r2
 8001116:	bf98      	it	ls
 8001118:	b2d2      	uxtbls	r2, r2
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol - 0xE7); 
 800111a:	3219      	adds	r2, #25
 800111c:	b2c0      	uxtb	r0, r0
 800111e:	b2d2      	uxtb	r2, r2
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  uint32_t result = 0;
  
  AUDIO_IO_Write(Addr, Reg, Value);
 8001120:	2120      	movs	r1, #32
 8001122:	9201      	str	r2, [sp, #4]
 8001124:	9000      	str	r0, [sp, #0]
 8001126:	f000 fdb7 	bl	8001c98 <AUDIO_IO_Write>
 800112a:	9800      	ldr	r0, [sp, #0]
 800112c:	9a01      	ldr	r2, [sp, #4]
 800112e:	2121      	movs	r1, #33	; 0x21
 8001130:	f000 fdb2 	bl	8001c98 <AUDIO_IO_Write>
}
 8001134:	2000      	movs	r0, #0
 8001136:	b003      	add	sp, #12
 8001138:	f85d fb04 	ldr.w	pc, [sp], #4

0800113c <cs43l22_Init>:
{
 800113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113e:	4606      	mov	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 8001140:	b2f4      	uxtb	r4, r6
{
 8001142:	460d      	mov	r5, r1
 8001144:	4617      	mov	r7, r2
  AUDIO_IO_Init();     
 8001146:	f000 fd73 	bl	8001c30 <AUDIO_IO_Init>
  AUDIO_IO_Write(Addr, Reg, Value);
 800114a:	2201      	movs	r2, #1
 800114c:	2102      	movs	r1, #2
 800114e:	4620      	mov	r0, r4
 8001150:	f000 fda2 	bl	8001c98 <AUDIO_IO_Write>
  switch (OutputDevice)
 8001154:	1e6a      	subs	r2, r5, #1
 8001156:	4b2a      	ldr	r3, [pc, #168]	; (8001200 <cs43l22_Init+0xc4>)
 8001158:	2a03      	cmp	r2, #3
 800115a:	d84e      	bhi.n	80011fa <cs43l22_Init+0xbe>
 800115c:	e8df f002 	tbb	[pc, r2]
 8001160:	4d4b4902 	.word	0x4d4b4902
    OutputDev = 0xFA;
 8001164:	22fa      	movs	r2, #250	; 0xfa
    OutputDev = 0x05;
 8001166:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001168:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 800116a:	2104      	movs	r1, #4
 800116c:	4620      	mov	r0, r4
 800116e:	f000 fd93 	bl	8001c98 <AUDIO_IO_Write>
 8001172:	2281      	movs	r2, #129	; 0x81
 8001174:	2105      	movs	r1, #5
 8001176:	4620      	mov	r0, r4
 8001178:	f000 fd8e 	bl	8001c98 <AUDIO_IO_Write>
 800117c:	2204      	movs	r2, #4
 800117e:	2106      	movs	r1, #6
 8001180:	4620      	mov	r0, r4
 8001182:	f000 fd89 	bl	8001c98 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8001186:	4630      	mov	r0, r6
 8001188:	4639      	mov	r1, r7
 800118a:	f7ff ffbb 	bl	8001104 <cs43l22_SetVolume>
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 800118e:	2d02      	cmp	r5, #2
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8001190:	4606      	mov	r6, r0
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 8001192:	d00e      	beq.n	80011b2 <cs43l22_Init+0x76>
  AUDIO_IO_Write(Addr, Reg, Value);
 8001194:	2206      	movs	r2, #6
 8001196:	210f      	movs	r1, #15
 8001198:	4620      	mov	r0, r4
 800119a:	f000 fd7d 	bl	8001c98 <AUDIO_IO_Write>
 800119e:	2200      	movs	r2, #0
 80011a0:	2124      	movs	r1, #36	; 0x24
 80011a2:	4620      	mov	r0, r4
 80011a4:	f000 fd78 	bl	8001c98 <AUDIO_IO_Write>
 80011a8:	2200      	movs	r2, #0
 80011aa:	2125      	movs	r1, #37	; 0x25
 80011ac:	4620      	mov	r0, r4
 80011ae:	f000 fd73 	bl	8001c98 <AUDIO_IO_Write>
 80011b2:	4620      	mov	r0, r4
 80011b4:	2200      	movs	r2, #0
 80011b6:	210a      	movs	r1, #10
 80011b8:	f000 fd6e 	bl	8001c98 <AUDIO_IO_Write>
 80011bc:	4620      	mov	r0, r4
 80011be:	2204      	movs	r2, #4
 80011c0:	210e      	movs	r1, #14
 80011c2:	f000 fd69 	bl	8001c98 <AUDIO_IO_Write>
 80011c6:	4620      	mov	r0, r4
 80011c8:	2200      	movs	r2, #0
 80011ca:	2127      	movs	r1, #39	; 0x27
 80011cc:	f000 fd64 	bl	8001c98 <AUDIO_IO_Write>
 80011d0:	4620      	mov	r0, r4
 80011d2:	220f      	movs	r2, #15
 80011d4:	211f      	movs	r1, #31
 80011d6:	f000 fd5f 	bl	8001c98 <AUDIO_IO_Write>
 80011da:	4620      	mov	r0, r4
 80011dc:	220a      	movs	r2, #10
 80011de:	211a      	movs	r1, #26
 80011e0:	f000 fd5a 	bl	8001c98 <AUDIO_IO_Write>
 80011e4:	4620      	mov	r0, r4
 80011e6:	220a      	movs	r2, #10
 80011e8:	211b      	movs	r1, #27
 80011ea:	f000 fd55 	bl	8001c98 <AUDIO_IO_Write>
}
 80011ee:	4630      	mov	r0, r6
 80011f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OutputDev = 0xAF;
 80011f2:	22af      	movs	r2, #175	; 0xaf
 80011f4:	e7b7      	b.n	8001166 <cs43l22_Init+0x2a>
    OutputDev = 0xAA;
 80011f6:	22aa      	movs	r2, #170	; 0xaa
 80011f8:	e7b5      	b.n	8001166 <cs43l22_Init+0x2a>
    OutputDev = 0x05;
 80011fa:	2205      	movs	r2, #5
 80011fc:	e7b3      	b.n	8001166 <cs43l22_Init+0x2a>
 80011fe:	bf00      	nop
 8001200:	200006f0 	.word	0x200006f0

08001204 <cs43l22_DeInit>:
  AUDIO_IO_DeInit();
 8001204:	f000 bd46 	b.w	8001c94 <AUDIO_IO_DeInit>

08001208 <cs43l22_ReadID>:
{
 8001208:	b510      	push	{r4, lr}
 800120a:	4604      	mov	r4, r0
  AUDIO_IO_Init(); 
 800120c:	f000 fd10 	bl	8001c30 <AUDIO_IO_Init>
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 8001210:	2101      	movs	r1, #1
 8001212:	b2e0      	uxtb	r0, r4
 8001214:	f000 fd5e 	bl	8001cd4 <AUDIO_IO_Read>
}
 8001218:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800121c:	bd10      	pop	{r4, pc}

0800121e <cs43l22_SetMute.part.0>:
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
 800121e:	b507      	push	{r0, r1, r2, lr}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 8001220:	b2c0      	uxtb	r0, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8001222:	22ff      	movs	r2, #255	; 0xff
 8001224:	2104      	movs	r1, #4
 8001226:	9001      	str	r0, [sp, #4]
 8001228:	f000 fd36 	bl	8001c98 <AUDIO_IO_Write>
 800122c:	9801      	ldr	r0, [sp, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	2122      	movs	r1, #34	; 0x22
 8001232:	f000 fd31 	bl	8001c98 <AUDIO_IO_Write>
 8001236:	9801      	ldr	r0, [sp, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	2123      	movs	r1, #35	; 0x23
}
 800123c:	b003      	add	sp, #12
 800123e:	f85d eb04 	ldr.w	lr, [sp], #4
  AUDIO_IO_Write(Addr, Reg, Value);
 8001242:	f000 bd29 	b.w	8001c98 <AUDIO_IO_Write>
	...

08001248 <cs43l22_SetMute>:
  if(Cmd == AUDIO_MUTE_ON)
 8001248:	2901      	cmp	r1, #1
{
 800124a:	b507      	push	{r0, r1, r2, lr}
  if(Cmd == AUDIO_MUTE_ON)
 800124c:	d105      	bne.n	800125a <cs43l22_SetMute+0x12>
 800124e:	f7ff ffe6 	bl	800121e <cs43l22_SetMute.part.0>
}
 8001252:	2000      	movs	r0, #0
 8001254:	b003      	add	sp, #12
 8001256:	f85d fb04 	ldr.w	pc, [sp], #4
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800125a:	b2c0      	uxtb	r0, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 800125c:	2200      	movs	r2, #0
 800125e:	2122      	movs	r1, #34	; 0x22
 8001260:	9001      	str	r0, [sp, #4]
 8001262:	f000 fd19 	bl	8001c98 <AUDIO_IO_Write>
 8001266:	9801      	ldr	r0, [sp, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	2123      	movs	r1, #35	; 0x23
 800126c:	f000 fd14 	bl	8001c98 <AUDIO_IO_Write>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <cs43l22_SetMute+0x38>)
  AUDIO_IO_Write(Addr, Reg, Value);
 8001272:	9801      	ldr	r0, [sp, #4]
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8001274:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8001276:	2104      	movs	r1, #4
 8001278:	f000 fd0e 	bl	8001c98 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */  
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 800127c:	e7e9      	b.n	8001252 <cs43l22_SetMute+0xa>
 800127e:	bf00      	nop
 8001280:	200006f0 	.word	0x200006f0

08001284 <cs43l22_Resume>:
{
 8001284:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  volatile uint32_t index = 0x00;
 8001286:	2600      	movs	r6, #0
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001288:	4631      	mov	r1, r6
{
 800128a:	4604      	mov	r4, r0
  volatile uint32_t index = 0x00;
 800128c:	9603      	str	r6, [sp, #12]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800128e:	f7ff ffdb 	bl	8001248 <cs43l22_SetMute>
  for(index = 0x00; index < 0xFF; index++);
 8001292:	9603      	str	r6, [sp, #12]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001294:	4605      	mov	r5, r0
  for(index = 0x00; index < 0xFF; index++);
 8001296:	9b03      	ldr	r3, [sp, #12]
 8001298:	2bfe      	cmp	r3, #254	; 0xfe
 800129a:	d90e      	bls.n	80012ba <cs43l22_Resume+0x36>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <cs43l22_Resume+0x40>)
 800129e:	b2e0      	uxtb	r0, r4
 80012a0:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 80012a2:	9001      	str	r0, [sp, #4]
 80012a4:	2104      	movs	r1, #4
 80012a6:	f000 fcf7 	bl	8001c98 <AUDIO_IO_Write>
 80012aa:	9801      	ldr	r0, [sp, #4]
 80012ac:	229e      	movs	r2, #158	; 0x9e
 80012ae:	2102      	movs	r1, #2
 80012b0:	f000 fcf2 	bl	8001c98 <AUDIO_IO_Write>
}
 80012b4:	4628      	mov	r0, r5
 80012b6:	b004      	add	sp, #16
 80012b8:	bd70      	pop	{r4, r5, r6, pc}
  for(index = 0x00; index < 0xFF; index++);
 80012ba:	9b03      	ldr	r3, [sp, #12]
 80012bc:	3301      	adds	r3, #1
 80012be:	9303      	str	r3, [sp, #12]
 80012c0:	e7e9      	b.n	8001296 <cs43l22_Resume+0x12>
 80012c2:	bf00      	nop
 80012c4:	200006f0 	.word	0x200006f0

080012c8 <cs43l22_Pause>:
{  
 80012c8:	b510      	push	{r4, lr}
 80012ca:	4604      	mov	r4, r0
  if(Cmd == AUDIO_MUTE_ON)
 80012cc:	f7ff ffa7 	bl	800121e <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 80012d0:	b2e0      	uxtb	r0, r4
 80012d2:	2201      	movs	r2, #1
 80012d4:	2102      	movs	r1, #2
 80012d6:	f000 fcdf 	bl	8001c98 <AUDIO_IO_Write>
}
 80012da:	2000      	movs	r0, #0
 80012dc:	bd10      	pop	{r4, pc}
	...

080012e0 <cs43l22_Stop>:
{
 80012e0:	b513      	push	{r0, r1, r4, lr}
 80012e2:	4604      	mov	r4, r0
  if(Cmd == AUDIO_MUTE_ON)
 80012e4:	f7ff ff9b 	bl	800121e <cs43l22_SetMute.part.0>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80012e8:	b2e0      	uxtb	r0, r4
  AUDIO_IO_Write(Addr, Reg, Value);
 80012ea:	2204      	movs	r2, #4
 80012ec:	210e      	movs	r1, #14
 80012ee:	9001      	str	r0, [sp, #4]
 80012f0:	f000 fcd2 	bl	8001c98 <AUDIO_IO_Write>
 80012f4:	9801      	ldr	r0, [sp, #4]
 80012f6:	229f      	movs	r2, #159	; 0x9f
 80012f8:	2102      	movs	r1, #2
 80012fa:	f000 fccd 	bl	8001c98 <AUDIO_IO_Write>
  Is_cs43l22_Stop = 1;
 80012fe:	4b03      	ldr	r3, [pc, #12]	; (800130c <cs43l22_Stop+0x2c>)
 8001300:	2201      	movs	r2, #1
}
 8001302:	2000      	movs	r0, #0
  Is_cs43l22_Stop = 1;
 8001304:	701a      	strb	r2, [r3, #0]
}
 8001306:	b002      	add	sp, #8
 8001308:	bd10      	pop	{r4, pc}
 800130a:	bf00      	nop
 800130c:	20000008 	.word	0x20000008

08001310 <cs43l22_Play>:
{
 8001310:	b570      	push	{r4, r5, r6, lr}
  if(Is_cs43l22_Stop == 1)
 8001312:	4d0d      	ldr	r5, [pc, #52]	; (8001348 <cs43l22_Play+0x38>)
 8001314:	782b      	ldrb	r3, [r5, #0]
 8001316:	2b01      	cmp	r3, #1
{
 8001318:	4604      	mov	r4, r0
  if(Is_cs43l22_Stop == 1)
 800131a:	d113      	bne.n	8001344 <cs43l22_Play+0x34>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 800131c:	b2c6      	uxtb	r6, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 800131e:	2206      	movs	r2, #6
 8001320:	210e      	movs	r1, #14
 8001322:	4630      	mov	r0, r6
 8001324:	f000 fcb8 	bl	8001c98 <AUDIO_IO_Write>
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001328:	2100      	movs	r1, #0
 800132a:	4620      	mov	r0, r4
 800132c:	f7ff ff8c 	bl	8001248 <cs43l22_SetMute>
  AUDIO_IO_Write(Addr, Reg, Value);
 8001330:	229e      	movs	r2, #158	; 0x9e
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001332:	4604      	mov	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8001334:	2102      	movs	r1, #2
 8001336:	4630      	mov	r0, r6
 8001338:	f000 fcae 	bl	8001c98 <AUDIO_IO_Write>
    Is_cs43l22_Stop = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	702b      	strb	r3, [r5, #0]
}
 8001340:	4620      	mov	r0, r4
 8001342:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t counter = 0;
 8001344:	2400      	movs	r4, #0
  return counter;  
 8001346:	e7fb      	b.n	8001340 <cs43l22_Play+0x30>
 8001348:	20000008 	.word	0x20000008

0800134c <cs43l22_SetOutputMode>:
  switch (Output) 
 800134c:	3901      	subs	r1, #1
{
 800134e:	b510      	push	{r4, lr}
 8001350:	b2c0      	uxtb	r0, r0
 8001352:	4c10      	ldr	r4, [pc, #64]	; (8001394 <cs43l22_SetOutputMode+0x48>)
 8001354:	2903      	cmp	r1, #3
 8001356:	d817      	bhi.n	8001388 <cs43l22_SetOutputMode+0x3c>
 8001358:	e8df f001 	tbb	[pc, r1]
 800135c:	16100a02 	.word	0x16100a02
  AUDIO_IO_Write(Addr, Reg, Value);
 8001360:	22fa      	movs	r2, #250	; 0xfa
 8001362:	2104      	movs	r1, #4
 8001364:	f000 fc98 	bl	8001c98 <AUDIO_IO_Write>
      OutputDev = 0xFA;
 8001368:	23fa      	movs	r3, #250	; 0xfa
      OutputDev = 0x05;
 800136a:	7023      	strb	r3, [r4, #0]
}
 800136c:	2000      	movs	r0, #0
 800136e:	bd10      	pop	{r4, pc}
  AUDIO_IO_Write(Addr, Reg, Value);
 8001370:	22af      	movs	r2, #175	; 0xaf
 8001372:	2104      	movs	r1, #4
 8001374:	f000 fc90 	bl	8001c98 <AUDIO_IO_Write>
      OutputDev = 0xAF;
 8001378:	23af      	movs	r3, #175	; 0xaf
 800137a:	e7f6      	b.n	800136a <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 800137c:	22aa      	movs	r2, #170	; 0xaa
 800137e:	2104      	movs	r1, #4
 8001380:	f000 fc8a 	bl	8001c98 <AUDIO_IO_Write>
      OutputDev = 0xAA;
 8001384:	23aa      	movs	r3, #170	; 0xaa
 8001386:	e7f0      	b.n	800136a <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 8001388:	2205      	movs	r2, #5
 800138a:	2104      	movs	r1, #4
 800138c:	f000 fc84 	bl	8001c98 <AUDIO_IO_Write>
      OutputDev = 0x05;
 8001390:	2305      	movs	r3, #5
 8001392:	e7ea      	b.n	800136a <cs43l22_SetOutputMode+0x1e>
 8001394:	200006f0 	.word	0x200006f0

08001398 <LIS302DL_DeInit>:
  * @retval None.
  */
void LIS302DL_DeInit(void)
{
  
}
 8001398:	4770      	bx	lr

0800139a <LIS302DL_Init>:
{
 800139a:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 800139c:	2300      	movs	r3, #0
{
 800139e:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 80013a0:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Init();
 80013a4:	f000 fbb0 	bl	8001b08 <ACCELERO_IO_Init>
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2120      	movs	r1, #32
 80013ac:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t) InitStruct;
 80013b0:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80013b4:	f000 fbf6 	bl	8001ba4 <ACCELERO_IO_Write>
}
 80013b8:	b002      	add	sp, #8
 80013ba:	bd10      	pop	{r4, pc}

080013bc <LIS302DL_ReadID>:
  * @brief  Read LIS302DL device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS302DL_ReadID(void)
{
 80013bc:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80013c4:	f000 fba0 	bl	8001b08 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS302DL_WHO_AM_I_ADDR, 1);
 80013c8:	f10d 0007 	add.w	r0, sp, #7
 80013cc:	2201      	movs	r2, #1
 80013ce:	210f      	movs	r1, #15
 80013d0:	f000 fc0a 	bl	8001be8 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
}
 80013d4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80013d8:	b003      	add	sp, #12
 80013da:	f85d fb04 	ldr.w	pc, [sp], #4

080013de <LIS302DL_FilterConfig>:
  * @brief  Set LIS302DL Internal High Pass Filter configuration.
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LIS302DL_FilterConfig(uint8_t FilterStruct)
{
 80013de:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 80013e0:	2300      	movs	r3, #0
{
 80013e2:	4604      	mov	r4, r0
  
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80013e4:	2201      	movs	r2, #1
 80013e6:	f10d 0007 	add.w	r0, sp, #7
 80013ea:	2121      	movs	r1, #33	; 0x21
  uint8_t ctrl = 0x00;
 80013ec:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80013f0:	f000 fbfa 	bl	8001be8 <ACCELERO_IO_Read>

  /* Clear high pass filter cut-off level, interrupt and data selection bits */
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 80013f4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80013f8:	f020 002f 	bic.w	r0, r0, #47	; 0x2f
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);

  ctrl |= FilterStruct;
 80013fc:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80013fe:	2201      	movs	r2, #1
 8001400:	2121      	movs	r1, #33	; 0x21
 8001402:	f10d 0007 	add.w	r0, sp, #7
  ctrl |= FilterStruct;
 8001406:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 800140a:	f000 fbcb 	bl	8001ba4 <ACCELERO_IO_Write>
}
 800140e:	b002      	add	sp, #8
 8001410:	bd10      	pop	{r4, pc}

08001412 <LIS302DL_Click_IntClear>:
  * @brief  Clear LIS302DL click Interrupt 
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntClear(void)
{
 8001412:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t buffer[6], clickreg = 0;
 8001414:	2300      	movs	r3, #0

  /* Read click and status registers if the available MEMS Accelerometer is LIS302DL */
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 8001416:	f10d 0007 	add.w	r0, sp, #7
 800141a:	2201      	movs	r2, #1
 800141c:	2139      	movs	r1, #57	; 0x39
  uint8_t buffer[6], clickreg = 0;
 800141e:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 8001422:	f000 fbe1 	bl	8001be8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read(buffer, LIS302DL_STATUS_REG_ADDR, 6);
 8001426:	2206      	movs	r2, #6
 8001428:	2127      	movs	r1, #39	; 0x27
 800142a:	a802      	add	r0, sp, #8
 800142c:	f000 fbdc 	bl	8001be8 <ACCELERO_IO_Read>
}
 8001430:	b005      	add	sp, #20
 8001432:	f85d fb04 	ldr.w	pc, [sp], #4

08001436 <LIS302DL_RebootCmd>:
  * @brief  Reboot memory content of LIS302DL.
  * @param  None
  * @retval None
  */
void LIS302DL_RebootCmd(void)
{
 8001436:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8001438:	2201      	movs	r2, #1
 800143a:	f10d 0007 	add.w	r0, sp, #7
 800143e:	2121      	movs	r1, #33	; 0x21
 8001440:	f000 fbd2 	bl	8001be8 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 8001444:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8001448:	2201      	movs	r2, #1
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 800144a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 800144e:	2121      	movs	r1, #33	; 0x21
 8001450:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 8001454:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8001458:	f000 fba4 	bl	8001ba4 <ACCELERO_IO_Write>
}
 800145c:	b003      	add	sp, #12
 800145e:	f85d fb04 	ldr.w	pc, [sp], #4

08001462 <LIS302DL_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
  * @param  pfData: Data out pointer
  * @retval None
  */
void LIS302DL_ReadACC(int16_t *pData)
{
 8001462:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001464:	4604      	mov	r4, r0
  int8_t buffer[6];
  int16_t pnRawData[3];
  uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
  uint8_t crtl, i = 0x00;
  
  ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
 8001466:	2201      	movs	r2, #1
 8001468:	f10d 0007 	add.w	r0, sp, #7
 800146c:	2120      	movs	r1, #32
 800146e:	f000 fbbb 	bl	8001be8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)buffer, LIS302DL_OUT_X_ADDR, 6);
 8001472:	a802      	add	r0, sp, #8
 8001474:	2206      	movs	r2, #6
 8001476:	2129      	movs	r1, #41	; 0x29
 8001478:	f000 fbb6 	bl	8001be8 <ACCELERO_IO_Read>
  for(i=0; i<3; i++)
  {
    pnRawData[i] = buffer[2*i];
  }
  
  switch(crtl & LIS302DL_FULLSCALE_9_2) 
 800147c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    pnRawData[i] = buffer[2*i];
 8001480:	f99d 0008 	ldrsb.w	r0, [sp, #8]
 8001484:	f99d 100a 	ldrsb.w	r1, [sp, #10]
 8001488:	f99d 300c 	ldrsb.w	r3, [sp, #12]
  switch(crtl & LIS302DL_FULLSCALE_9_2) 
 800148c:	f012 0f20 	tst.w	r2, #32
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001490:	bf0c      	ite	eq
 8001492:	2212      	moveq	r2, #18
 8001494:	2248      	movne	r2, #72	; 0x48
 8001496:	fb10 f002 	smulbb	r0, r0, r2
 800149a:	fb11 f102 	smulbb	r1, r1, r2
 800149e:	fb13 f302 	smulbb	r3, r3, r2
 80014a2:	8020      	strh	r0, [r4, #0]
 80014a4:	8061      	strh	r1, [r4, #2]
 80014a6:	80a3      	strh	r3, [r4, #4]
  }
}
 80014a8:	b004      	add	sp, #16
 80014aa:	bd10      	pop	{r4, pc}

080014ac <LIS302DL_InterruptConfig>:
{
 80014ac:	b513      	push	{r0, r1, r4, lr}
 80014ae:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 80014b0:	2300      	movs	r3, #0
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80014b2:	f10d 0007 	add.w	r0, sp, #7
 80014b6:	2201      	movs	r2, #1
 80014b8:	2138      	movs	r1, #56	; 0x38
  uint8_t ctrl = 0x00;
 80014ba:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80014be:	f000 fb93 	bl	8001be8 <ACCELERO_IO_Read>
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 80014c2:	7862      	ldrb	r2, [r4, #1]
 80014c4:	7823      	ldrb	r3, [r4, #0]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	78a2      	ldrb	r2, [r4, #2]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80014ca:	2138      	movs	r1, #56	; 0x38
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 80014cc:	4313      	orrs	r3, r2
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80014ce:	f10d 0007 	add.w	r0, sp, #7
 80014d2:	2201      	movs	r2, #1
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 80014d4:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80014d8:	f000 fb64 	bl	8001ba4 <ACCELERO_IO_Write>
}
 80014dc:	b002      	add	sp, #8
 80014de:	bd10      	pop	{r4, pc}

080014e0 <LIS302DL_Click_IntConfig>:
{
 80014e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t ctrl = 0x00;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_ITConfig();
 80014e8:	f000 fb34 	bl	8001b54 <ACCELERO_IO_ITConfig>
  LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 80014ec:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80014f0:	f8ad 3004 	strh.w	r3, [sp, #4]
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 80014f4:	a801      	add	r0, sp, #4
  LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 80014f6:	2320      	movs	r3, #32
 80014f8:	f88d 3006 	strb.w	r3, [sp, #6]
  ctrl = 0x3F;
 80014fc:	243f      	movs	r4, #63	; 0x3f
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 80014fe:	f7ff ffd5 	bl	80014ac <LIS302DL_InterruptConfig>
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 8001502:	f10d 0003 	add.w	r0, sp, #3
 8001506:	2201      	movs	r2, #1
 8001508:	2122      	movs	r1, #34	; 0x22
  ctrl = 0x3F;
 800150a:	f88d 4003 	strb.w	r4, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 800150e:	f000 fb49 	bl	8001ba4 <ACCELERO_IO_Write>
  ctrl = 0x50;
 8001512:	2350      	movs	r3, #80	; 0x50
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8001514:	f10d 0003 	add.w	r0, sp, #3
 8001518:	2201      	movs	r2, #1
 800151a:	2138      	movs	r1, #56	; 0x38
  ctrl = 0x50;
 800151c:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8001520:	f000 fb40 	bl	8001ba4 <ACCELERO_IO_Write>
  ctrl = 0xAA;
 8001524:	23aa      	movs	r3, #170	; 0xaa
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 8001526:	f10d 0003 	add.w	r0, sp, #3
 800152a:	2201      	movs	r2, #1
 800152c:	213b      	movs	r1, #59	; 0x3b
  ctrl = 0xAA;
 800152e:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 8001532:	f000 fb37 	bl	8001ba4 <ACCELERO_IO_Write>
  ctrl = 0x0A;
 8001536:	230a      	movs	r3, #10
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 8001538:	f10d 0003 	add.w	r0, sp, #3
 800153c:	2201      	movs	r2, #1
 800153e:	213c      	movs	r1, #60	; 0x3c
  ctrl = 0x0A;
 8001540:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 8001544:	f000 fb2e 	bl	8001ba4 <ACCELERO_IO_Write>
  ctrl = 0x4C;
 8001548:	234c      	movs	r3, #76	; 0x4c
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 800154a:	f10d 0003 	add.w	r0, sp, #3
 800154e:	2201      	movs	r2, #1
 8001550:	2130      	movs	r1, #48	; 0x30
  ctrl = 0x4C;
 8001552:	f88d 3003 	strb.w	r3, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 8001556:	f000 fb25 	bl	8001ba4 <ACCELERO_IO_Write>
  ctrl = 0x03;
 800155a:	2303      	movs	r3, #3
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 800155c:	eb0d 0003 	add.w	r0, sp, r3
 8001560:	2201      	movs	r2, #1
 8001562:	213d      	movs	r1, #61	; 0x3d
  ctrl = 0x03;
 8001564:	f88d 3003 	strb.w	r3, [sp, #3]
  ctrl = 0x7F;
 8001568:	257f      	movs	r5, #127	; 0x7f
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 800156a:	f000 fb1b 	bl	8001ba4 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 800156e:	f10d 0003 	add.w	r0, sp, #3
 8001572:	2201      	movs	r2, #1
 8001574:	213e      	movs	r1, #62	; 0x3e
  ctrl = 0x7F;
 8001576:	f88d 5003 	strb.w	r5, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 800157a:	f000 fb13 	bl	8001ba4 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 800157e:	2201      	movs	r2, #1
 8001580:	4621      	mov	r1, r4
 8001582:	f10d 0003 	add.w	r0, sp, #3
  ctrl = 0x7F;
 8001586:	f88d 5003 	strb.w	r5, [sp, #3]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 800158a:	f000 fb0b 	bl	8001ba4 <ACCELERO_IO_Write>
}
 800158e:	b003      	add	sp, #12
 8001590:	bd30      	pop	{r4, r5, pc}

08001592 <LIS3DSH_DeInit>:
  * @retval None.
  */
void LIS3DSH_DeInit(void)
{
  
}
 8001592:	4770      	bx	lr

08001594 <LIS3DSH_Init>:
{
 8001594:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 8001596:	2300      	movs	r3, #0
{
 8001598:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 800159a:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Init();
 800159e:	f000 fab3 	bl	8001b08 <ACCELERO_IO_Init>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 80015a2:	f10d 0007 	add.w	r0, sp, #7
 80015a6:	2201      	movs	r2, #1
 80015a8:	2120      	movs	r1, #32
  ctrl = (uint8_t) (InitStruct);
 80015aa:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 80015ae:	f000 faf9 	bl	8001ba4 <ACCELERO_IO_Write>
  ctrl = (uint8_t) (InitStruct >> 8);
 80015b2:	0a24      	lsrs	r4, r4, #8
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2124      	movs	r1, #36	; 0x24
 80015b8:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t) (InitStruct >> 8);
 80015bc:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 80015c0:	f000 faf0 	bl	8001ba4 <ACCELERO_IO_Write>
}
 80015c4:	b002      	add	sp, #8
 80015c6:	bd10      	pop	{r4, pc}

080015c8 <LIS3DSH_ReadID>:
  * @brief  Read LIS3DSH device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS3DSH_ReadID(void)
{
 80015c8:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f88d 3007 	strb.w	r3, [sp, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80015d0:	f000 fa9a 	bl	8001b08 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 80015d4:	f10d 0007 	add.w	r0, sp, #7
 80015d8:	2201      	movs	r2, #1
 80015da:	210f      	movs	r1, #15
 80015dc:	f000 fb04 	bl	8001be8 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
}
 80015e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80015e4:	b003      	add	sp, #12
 80015e6:	f85d fb04 	ldr.w	pc, [sp], #4

080015ea <LIS3DSH_RebootCmd>:
  * @brief  Reboot memory content of LIS3DSH.
  * @param  None
  * @retval None
  */
void LIS3DSH_RebootCmd(void)
{
 80015ea:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  /* Read CTRL_REG6 register */
  ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 80015ec:	2201      	movs	r2, #1
 80015ee:	f10d 0007 	add.w	r0, sp, #7
 80015f2:	2125      	movs	r1, #37	; 0x25
 80015f4:	f000 faf8 	bl	8001be8 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS3DSH_BOOT_FORCED;
 80015f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG6 register */
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 80015fc:	2201      	movs	r2, #1
  tmpreg |= LIS3DSH_BOOT_FORCED;
 80015fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8001602:	2125      	movs	r1, #37	; 0x25
 8001604:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= LIS3DSH_BOOT_FORCED;
 8001608:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 800160c:	f000 faca 	bl	8001ba4 <ACCELERO_IO_Write>
}
 8001610:	b003      	add	sp, #12
 8001612:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001618 <LIS3DSH_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
  * @param  pointer on floating buffer.
  * @retval None
  */
void LIS3DSH_ReadACC(int16_t *pData)
{
 8001618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800161a:	4604      	mov	r4, r0
  int8_t buffer[6];
  uint8_t crtl, i = 0x00;
  float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
  float valueinfloat = 0;
  
  ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);  
 800161c:	2201      	movs	r2, #1
 800161e:	2124      	movs	r1, #36	; 0x24
 8001620:	f10d 0007 	add.w	r0, sp, #7
 8001624:	f000 fae0 	bl	8001be8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8001628:	2201      	movs	r2, #1
 800162a:	2128      	movs	r1, #40	; 0x28
 800162c:	a802      	add	r0, sp, #8
 800162e:	f000 fadb 	bl	8001be8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8001632:	2201      	movs	r2, #1
 8001634:	2129      	movs	r1, #41	; 0x29
 8001636:	f10d 0009 	add.w	r0, sp, #9
 800163a:	f000 fad5 	bl	8001be8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 800163e:	2201      	movs	r2, #1
 8001640:	212a      	movs	r1, #42	; 0x2a
 8001642:	f10d 000a 	add.w	r0, sp, #10
 8001646:	f000 facf 	bl	8001be8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 800164a:	2201      	movs	r2, #1
 800164c:	212b      	movs	r1, #43	; 0x2b
 800164e:	f10d 000b 	add.w	r0, sp, #11
 8001652:	f000 fac9 	bl	8001be8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 8001656:	2201      	movs	r2, #1
 8001658:	212c      	movs	r1, #44	; 0x2c
 800165a:	a803      	add	r0, sp, #12
 800165c:	f000 fac4 	bl	8001be8 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 8001660:	2201      	movs	r2, #1
 8001662:	212d      	movs	r1, #45	; 0x2d
 8001664:	f10d 000d 	add.w	r0, sp, #13
 8001668:	f000 fabe 	bl	8001be8 <ACCELERO_IO_Read>
  
  switch(crtl & LIS3DSH__FULLSCALE_SELECTION) 
 800166c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001670:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001674:	3b08      	subs	r3, #8
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b18      	cmp	r3, #24
 800167a:	bf97      	itett	ls
 800167c:	4a0f      	ldrls	r2, [pc, #60]	; (80016bc <LIS3DSH_ReadACC+0xa4>)
 800167e:	ed9f 7a10 	vldrhi	s14, [pc, #64]	; 80016c0 <LIS3DSH_ReadACC+0xa8>
 8001682:	eb02 0383 	addls.w	r3, r2, r3, lsl #2
 8001686:	ed93 7a00 	vldrls	s14, [r3]
  default:
    break;
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800168a:	1ea1      	subs	r1, r4, #2
 800168c:	aa02      	add	r2, sp, #8
 800168e:	3404      	adds	r4, #4
  {
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 8001690:	f992 0001 	ldrsb.w	r0, [r2, #1]
 8001694:	f912 3b02 	ldrsb.w	r3, [r2], #2
 8001698:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a4:	ee67 7a87 	vmul.f32	s15, s15, s14
    pData[i] = (int16_t)valueinfloat;
 80016a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ac:	ee17 3a90 	vmov	r3, s15
 80016b0:	f821 3f02 	strh.w	r3, [r1, #2]!
  for(i=0; i<3; i++)
 80016b4:	428c      	cmp	r4, r1
 80016b6:	d1eb      	bne.n	8001690 <LIS3DSH_ReadACC+0x78>
  }
}
 80016b8:	b004      	add	sp, #16
 80016ba:	bd10      	pop	{r4, pc}
 80016bc:	0800bc78 	.word	0x0800bc78
 80016c0:	3d75c28f 	.word	0x3d75c28f

080016c4 <LIS3DSH_InterruptConfig>:
{
 80016c4:	b513      	push	{r0, r1, r4, lr}
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80016c6:	7802      	ldrb	r2, [r0, #0]
 80016c8:	7843      	ldrb	r3, [r0, #1]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	7882      	ldrb	r2, [r0, #2]
{
 80016ce:	4604      	mov	r4, r0
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80016d0:	4313      	orrs	r3, r2
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 80016d2:	f10d 0007 	add.w	r0, sp, #7
 80016d6:	2201      	movs	r2, #1
 80016d8:	2123      	movs	r1, #35	; 0x23
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80016da:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 80016de:	f000 fa61 	bl	8001ba4 <ACCELERO_IO_Write>
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 80016e2:	7922      	ldrb	r2, [r4, #4]
 80016e4:	78e3      	ldrb	r3, [r4, #3]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 80016e6:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 80016ea:	4313      	orrs	r3, r2
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 80016ec:	2121      	movs	r1, #33	; 0x21
 80016ee:	2201      	movs	r2, #1
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 80016f0:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 80016f4:	f000 fa56 	bl	8001ba4 <ACCELERO_IO_Write>
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 80016f8:	79a2      	ldrb	r2, [r4, #6]
 80016fa:	7963      	ldrb	r3, [r4, #5]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 80016fc:	2122      	movs	r1, #34	; 0x22
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 80016fe:	4313      	orrs	r3, r2
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 8001700:	f10d 0007 	add.w	r0, sp, #7
 8001704:	2201      	movs	r2, #1
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 8001706:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 800170a:	f000 fa4b 	bl	8001ba4 <ACCELERO_IO_Write>
}
 800170e:	b002      	add	sp, #8
 8001710:	bd10      	pop	{r4, pc}

08001712 <LIS3DSH_Click_IntConfig>:
{
 8001712:	b530      	push	{r4, r5, lr}
 8001714:	b085      	sub	sp, #20
  uint8_t ctrl = 0x00;
 8001716:	2500      	movs	r5, #0
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 8001718:	2401      	movs	r4, #1
  uint8_t ctrl = 0x00;
 800171a:	f88d 5007 	strb.w	r5, [sp, #7]
  ACCELERO_IO_ITConfig();
 800171e:	f000 fa19 	bl	8001b54 <ACCELERO_IO_ITConfig>
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 8001722:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8001726:	a802      	add	r0, sp, #8
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 8001728:	9302      	str	r3, [sp, #8]
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 800172a:	f88d 400d 	strb.w	r4, [sp, #13]
  LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 800172e:	f88d 500e 	strb.w	r5, [sp, #14]
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8001732:	f7ff ffc7 	bl	80016c4 <LIS3DSH_InterruptConfig>
  ctrl=0x03; 
 8001736:	2303      	movs	r3, #3
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 8001738:	4622      	mov	r2, r4
 800173a:	f10d 0007 	add.w	r0, sp, #7
 800173e:	2152      	movs	r1, #82	; 0x52
  ctrl=0x03; 
 8001740:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 8001744:	f000 fa2e 	bl	8001ba4 <ACCELERO_IO_Write>
  ctrl=0xC8; 
 8001748:	23c8      	movs	r3, #200	; 0xc8
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 800174a:	4622      	mov	r2, r4
 800174c:	f10d 0007 	add.w	r0, sp, #7
 8001750:	2154      	movs	r1, #84	; 0x54
  ctrl=0xC8; 
 8001752:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 8001756:	f000 fa25 	bl	8001ba4 <ACCELERO_IO_Write>
  ctrl=0x45; 
 800175a:	2345      	movs	r3, #69	; 0x45
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 800175c:	4622      	mov	r2, r4
 800175e:	f10d 0007 	add.w	r0, sp, #7
 8001762:	2156      	movs	r1, #86	; 0x56
  ctrl=0x45; 
 8001764:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 8001768:	f000 fa1c 	bl	8001ba4 <ACCELERO_IO_Write>
  ctrl=0xFC; 
 800176c:	23fc      	movs	r3, #252	; 0xfc
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 800176e:	4622      	mov	r2, r4
 8001770:	f10d 0007 	add.w	r0, sp, #7
 8001774:	215a      	movs	r1, #90	; 0x5a
  ctrl=0xFC; 
 8001776:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 800177a:	f000 fa13 	bl	8001ba4 <ACCELERO_IO_Write>
  ctrl=0xA1; 
 800177e:	23a1      	movs	r3, #161	; 0xa1
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 8001780:	4622      	mov	r2, r4
 8001782:	f10d 0007 	add.w	r0, sp, #7
 8001786:	215b      	movs	r1, #91	; 0x5b
  ctrl=0xA1; 
 8001788:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 800178c:	f000 fa0a 	bl	8001ba4 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 8001790:	4622      	mov	r2, r4
 8001792:	f10d 0007 	add.w	r0, sp, #7
 8001796:	215c      	movs	r1, #92	; 0x5c
  ctrl=0x01; 
 8001798:	f88d 4007 	strb.w	r4, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 800179c:	f000 fa02 	bl	8001ba4 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR,1);
 80017a0:	4622      	mov	r2, r4
 80017a2:	f10d 0007 	add.w	r0, sp, #7
 80017a6:	217b      	movs	r1, #123	; 0x7b
 80017a8:	f000 f9fc 	bl	8001ba4 <ACCELERO_IO_Write>
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR,1);
 80017ac:	4622      	mov	r2, r4
 80017ae:	f10d 0007 	add.w	r0, sp, #7
 80017b2:	2160      	movs	r1, #96	; 0x60
 80017b4:	f000 f9f6 	bl	8001ba4 <ACCELERO_IO_Write>
  ctrl=0x06; 
 80017b8:	2306      	movs	r3, #6
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 80017ba:	4622      	mov	r2, r4
 80017bc:	f10d 0007 	add.w	r0, sp, #7
 80017c0:	2161      	movs	r1, #97	; 0x61
  ctrl=0x06; 
 80017c2:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 80017c6:	f000 f9ed 	bl	8001ba4 <ACCELERO_IO_Write>
  ctrl=0x28; 
 80017ca:	2328      	movs	r3, #40	; 0x28
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 80017cc:	4622      	mov	r2, r4
 80017ce:	f10d 0007 	add.w	r0, sp, #7
 80017d2:	2162      	movs	r1, #98	; 0x62
  ctrl=0x28; 
 80017d4:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 80017d8:	f000 f9e4 	bl	8001ba4 <ACCELERO_IO_Write>
  ctrl=0x11; 
 80017dc:	2311      	movs	r3, #17
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 80017de:	4622      	mov	r2, r4
 80017e0:	2163      	movs	r1, #99	; 0x63
 80017e2:	f10d 0007 	add.w	r0, sp, #7
  ctrl=0x11; 
 80017e6:	f88d 3007 	strb.w	r3, [sp, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 80017ea:	f000 f9db 	bl	8001ba4 <ACCELERO_IO_Write>
}
 80017ee:	b005      	add	sp, #20
 80017f0:	bd30      	pop	{r4, r5, pc}
	...

080017f4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80017f4:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80017f6:	4c20      	ldr	r4, [pc, #128]	; (8001878 <SPIx_Init+0x84>)
{
 80017f8:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80017fa:	4620      	mov	r0, r4
 80017fc:	f003 fce3 	bl	80051c6 <HAL_SPI_GetState>
 8001800:	2800      	cmp	r0, #0
 8001802:	d137      	bne.n	8001874 <SPIx_Init+0x80>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <SPIx_Init+0x88>)
 8001806:	6023      	str	r3, [r4, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001808:	2318      	movs	r3, #24
 800180a:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 800180c:	2307      	movs	r3, #7
 800180e:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001810:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001814:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001818:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800181a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800181e:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(void)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable the SPI peripheral */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <SPIx_Init+0x8c>)
 8001822:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8001824:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001826:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001828:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800182a:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 800182c:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 800182e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001830:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001834:	645a      	str	r2, [r3, #68]	; 0x44
 8001836:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001838:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800183c:	9201      	str	r2, [sp, #4]
 800183e:	9a01      	ldr	r2, [sp, #4]
  
  /* Enable SCK, MOSI and MISO GPIO clocks */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001840:	9002      	str	r0, [sp, #8]
 8001842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001844:	f042 0201 	orr.w	r2, r2, #1
 8001848:	631a      	str	r2, [r3, #48]	; 0x30
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	9302      	str	r3, [sp, #8]
 8001852:	9b02      	ldr	r3, [sp, #8]
  
  /* SPI SCK, MOSI, MISO pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN | DISCOVERY_SPIx_MOSI_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001854:	21e0      	movs	r1, #224	; 0xe0
 8001856:	2302      	movs	r3, #2
 8001858:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 800185c:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800185e:	2001      	movs	r0, #1
 8001860:	2305      	movs	r3, #5
 8001862:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001866:	a903      	add	r1, sp, #12
 8001868:	4806      	ldr	r0, [pc, #24]	; (8001884 <SPIx_Init+0x90>)
 800186a:	f001 f873 	bl	8002954 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 800186e:	4620      	mov	r0, r4
 8001870:	f003 faed 	bl	8004e4e <HAL_SPI_Init>
}
 8001874:	b008      	add	sp, #32
 8001876:	bd10      	pop	{r4, pc}
 8001878:	200006f4 	.word	0x200006f4
 800187c:	40013000 	.word	0x40013000
 8001880:	40023800 	.word	0x40023800
 8001884:	40020000 	.word	0x40020000

08001888 <SPIx_WriteRead>:
{
 8001888:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t receivedbyte = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	f88d 3017 	strb.w	r3, [sp, #23]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <SPIx_WriteRead+0x38>)
{
 8001892:	f88d 000f 	strb.w	r0, [sp, #15]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	480a      	ldr	r0, [pc, #40]	; (80018c4 <SPIx_WriteRead+0x3c>)
 800189c:	2301      	movs	r3, #1
 800189e:	f10d 0217 	add.w	r2, sp, #23
 80018a2:	f10d 010f 	add.w	r1, sp, #15
 80018a6:	f003 fb4a 	bl	8004f3e <HAL_SPI_TransmitReceive>
 80018aa:	b120      	cbz	r0, 80018b6 <SPIx_WriteRead+0x2e>
  HAL_SPI_DeInit(&SpiHandle);
 80018ac:	4805      	ldr	r0, [pc, #20]	; (80018c4 <SPIx_WriteRead+0x3c>)
 80018ae:	f003 fb30 	bl	8004f12 <HAL_SPI_DeInit>
  SPIx_Init();
 80018b2:	f7ff ff9f 	bl	80017f4 <SPIx_Init>
}
 80018b6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80018ba:	b007      	add	sp, #28
 80018bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80018c0:	200000a4 	.word	0x200000a4
 80018c4:	200006f4 	.word	0x200006f4

080018c8 <I2Cx_Init>:
/******************************* I2C Routines**********************************/
/**
  * @brief  Configures I2C interface.
  */
static void I2Cx_Init(void)
{
 80018c8:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80018ca:	4e2a      	ldr	r6, [pc, #168]	; (8001974 <I2Cx_Init+0xac>)
{
 80018cc:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80018ce:	f106 0058 	add.w	r0, r6, #88	; 0x58
 80018d2:	f002 f9e5 	bl	8003ca0 <HAL_I2C_GetState>
 80018d6:	4604      	mov	r4, r0
 80018d8:	2800      	cmp	r0, #0
 80018da:	d148      	bne.n	800196e <I2Cx_Init+0xa6>
  {
    /* DISCOVERY_I2Cx peripheral configuration */
    I2cHandle.Init.ClockSpeed = BSP_I2C_SPEED;
 80018dc:	4b26      	ldr	r3, [pc, #152]	; (8001978 <I2Cx_Init+0xb0>)
static void I2Cx_MspInit(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80018de:	4d27      	ldr	r5, [pc, #156]	; (800197c <I2Cx_Init+0xb4>)
 80018e0:	9001      	str	r0, [sp, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018e2:	e9c6 3017 	strd	r3, r0, [r6, #92]	; 0x5c
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018e6:	2233      	movs	r2, #51	; 0x33
 80018e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018ec:	e9c6 2319 	strd	r2, r3, [r6, #100]	; 0x64
    I2cHandle.Instance = DISCOVERY_I2Cx;
 80018f0:	4b23      	ldr	r3, [pc, #140]	; (8001980 <I2Cx_Init+0xb8>)
 80018f2:	65b3      	str	r3, [r6, #88]	; 0x58
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80018f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	632b      	str	r3, [r5, #48]	; 0x30
 80018fc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	9b01      	ldr	r3, [sp, #4]

  /* DISCOVERY_I2Cx SCL and SDA pins configuration ---------------------------*/
  GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001906:	f44f 7110 	mov.w	r1, #576	; 0x240
 800190a:	2312      	movs	r3, #18
 800190c:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001910:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001912:	e9cd 0305 	strd	r0, r3, [sp, #20]
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 8001916:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001918:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 800191a:	481a      	ldr	r0, [pc, #104]	; (8001984 <I2Cx_Init+0xbc>)
  GPIO_InitStruct.Alternate  = DISCOVERY_I2Cx_SCL_SDA_AF;
 800191c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &GPIO_InitStruct);     
 800191e:	f001 f819 	bl	8002954 <HAL_GPIO_Init>

  /* Enable the DISCOVERY_I2Cx peripheral clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001922:	9402      	str	r4, [sp, #8]
 8001924:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001926:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800192a:	642b      	str	r3, [r5, #64]	; 0x40
 800192c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800192e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001932:	9302      	str	r3, [sp, #8]
 8001934:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001936:	6a2b      	ldr	r3, [r5, #32]
 8001938:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800193c:	622b      	str	r3, [r5, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800193e:	6a2b      	ldr	r3, [r5, #32]
 8001940:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001944:	622b      	str	r3, [r5, #32]

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0, 0);
 8001946:	4622      	mov	r2, r4
 8001948:	4621      	mov	r1, r4
 800194a:	201f      	movs	r0, #31
 800194c:	f000 fdb0 	bl	80024b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001950:	201f      	movs	r0, #31
 8001952:	f000 fddf 	bl	8002514 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the highest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0, 0);
 8001956:	4622      	mov	r2, r4
 8001958:	4621      	mov	r1, r4
 800195a:	2020      	movs	r0, #32
 800195c:	f000 fda8 	bl	80024b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8001960:	2020      	movs	r0, #32
 8001962:	f000 fdd7 	bl	8002514 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 8001966:	f106 0058 	add.w	r0, r6, #88	; 0x58
 800196a:	f001 ff3f 	bl	80037ec <HAL_I2C_Init>
}
 800196e:	b008      	add	sp, #32
 8001970:	bd70      	pop	{r4, r5, r6, pc}
 8001972:	bf00      	nop
 8001974:	200006f4 	.word	0x200006f4
 8001978:	000186a0 	.word	0x000186a0
 800197c:	40023800 	.word	0x40023800
 8001980:	40005400 	.word	0x40005400
 8001984:	40020400 	.word	0x40020400

08001988 <BSP_LED_Init>:
{
 8001988:	b530      	push	{r4, r5, lr}
 800198a:	b08b      	sub	sp, #44	; 0x2c
  LEDx_GPIO_CLK_ENABLE(Led);
 800198c:	bb08      	cbnz	r0, 80019d2 <BSP_LED_Init+0x4a>
 800198e:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <BSP_LED_Init+0xa4>)
 8001990:	9001      	str	r0, [sp, #4]
 8001992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001994:	f042 0208 	orr.w	r2, r2, #8
 8001998:	631a      	str	r2, [r3, #48]	; 0x30
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80019a4:	4c22      	ldr	r4, [pc, #136]	; (8001a30 <BSP_LED_Init+0xa8>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80019a6:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <BSP_LED_Init+0xac>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80019a8:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80019ac:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80019b0:	6860      	ldr	r0, [r4, #4]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80019b2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b4:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b6:	e9cd 3306 	strd	r3, r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80019ba:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80019bc:	2302      	movs	r3, #2
 80019be:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80019c0:	f000 ffc8 	bl	8002954 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80019c4:	6860      	ldr	r0, [r4, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	4629      	mov	r1, r5
 80019ca:	f001 f89d 	bl	8002b08 <HAL_GPIO_WritePin>
}
 80019ce:	b00b      	add	sp, #44	; 0x2c
 80019d0:	bd30      	pop	{r4, r5, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 80019d2:	2801      	cmp	r0, #1
 80019d4:	d10c      	bne.n	80019f0 <BSP_LED_Init+0x68>
 80019d6:	2300      	movs	r3, #0
 80019d8:	9302      	str	r3, [sp, #8]
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <BSP_LED_Init+0xa4>)
 80019dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019de:	f042 0208 	orr.w	r2, r2, #8
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	9302      	str	r3, [sp, #8]
 80019ec:	9b02      	ldr	r3, [sp, #8]
 80019ee:	e7d9      	b.n	80019a4 <BSP_LED_Init+0x1c>
 80019f0:	2802      	cmp	r0, #2
 80019f2:	d10c      	bne.n	8001a0e <BSP_LED_Init+0x86>
 80019f4:	2300      	movs	r3, #0
 80019f6:	9303      	str	r3, [sp, #12]
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <BSP_LED_Init+0xa4>)
 80019fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019fc:	f042 0208 	orr.w	r2, r2, #8
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	9303      	str	r3, [sp, #12]
 8001a0a:	9b03      	ldr	r3, [sp, #12]
 8001a0c:	e7ca      	b.n	80019a4 <BSP_LED_Init+0x1c>
 8001a0e:	2803      	cmp	r0, #3
 8001a10:	d1c8      	bne.n	80019a4 <BSP_LED_Init+0x1c>
 8001a12:	2300      	movs	r3, #0
 8001a14:	9304      	str	r3, [sp, #16]
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <BSP_LED_Init+0xa4>)
 8001a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a1a:	f042 0208 	orr.w	r2, r2, #8
 8001a1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	9304      	str	r3, [sp, #16]
 8001a28:	9b04      	ldr	r3, [sp, #16]
 8001a2a:	e7bb      	b.n	80019a4 <BSP_LED_Init+0x1c>
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	200000a4 	.word	0x200000a4
 8001a34:	0800bcdc 	.word	0x0800bcdc

08001a38 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <BSP_LED_On+0x14>)
 8001a3a:	4905      	ldr	r1, [pc, #20]	; (8001a50 <BSP_LED_On+0x18>)
 8001a3c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001a40:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8001a44:	6858      	ldr	r0, [r3, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f001 b85e 	b.w	8002b08 <HAL_GPIO_WritePin>
 8001a4c:	200000a4 	.word	0x200000a4
 8001a50:	0800bcdc 	.word	0x0800bcdc

08001a54 <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <BSP_LED_Off+0x14>)
 8001a56:	4905      	ldr	r1, [pc, #20]	; (8001a6c <BSP_LED_Off+0x18>)
 8001a58:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001a5c:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8001a60:	6858      	ldr	r0, [r3, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f001 b850 	b.w	8002b08 <HAL_GPIO_WritePin>
 8001a68:	200000a4 	.word	0x200000a4
 8001a6c:	0800bcdc 	.word	0x0800bcdc

08001a70 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <BSP_LED_Toggle+0x14>)
 8001a72:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <BSP_LED_Toggle+0x18>)
 8001a74:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001a78:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8001a7c:	6858      	ldr	r0, [r3, #4]
 8001a7e:	f001 b848 	b.w	8002b12 <HAL_GPIO_TogglePin>
 8001a82:	bf00      	nop
 8001a84:	200000a4 	.word	0x200000a4
 8001a88:	0800bcdc 	.word	0x0800bcdc

08001a8c <BSP_PB_Init>:
{
 8001a8c:	b510      	push	{r4, lr}
 8001a8e:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001a90:	b950      	cbnz	r0, 8001aa8 <BSP_PB_Init+0x1c>
 8001a92:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <BSP_PB_Init+0x70>)
 8001a94:	9000      	str	r0, [sp, #0]
 8001a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a98:	f042 0201 	orr.w	r2, r2, #1
 8001a9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	9b00      	ldr	r3, [sp, #0]
  if (Mode == BUTTON_MODE_GPIO)
 8001aa8:	b971      	cbnz	r1, 8001ac8 <BSP_PB_Init+0x3c>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001aaa:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aac:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <BSP_PB_Init+0x74>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001ab8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001abc:	a901      	add	r1, sp, #4
 8001abe:	6940      	ldr	r0, [r0, #20]
 8001ac0:	f000 ff48 	bl	8002954 <HAL_GPIO_Init>
}
 8001ac4:	b006      	add	sp, #24
 8001ac6:	bd10      	pop	{r4, pc}
  if (Mode == BUTTON_MODE_EXTI)
 8001ac8:	2901      	cmp	r1, #1
 8001aca:	d1fb      	bne.n	8001ac4 <BSP_PB_Init+0x38>
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001acc:	2400      	movs	r4, #0
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e9cd 4303 	strd	r4, r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <BSP_PB_Init+0x78>)
 8001ad6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <BSP_PB_Init+0x74>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001ada:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001adc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001ae0:	a901      	add	r1, sp, #4
 8001ae2:	6940      	ldr	r0, [r0, #20]
 8001ae4:	f000 ff36 	bl	8002954 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
 8001ae8:	4622      	mov	r2, r4
 8001aea:	210f      	movs	r1, #15
 8001aec:	2006      	movs	r0, #6
 8001aee:	f000 fcdf 	bl	80024b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001af2:	2006      	movs	r0, #6
 8001af4:	f000 fd0e 	bl	8002514 <HAL_NVIC_EnableIRQ>
}
 8001af8:	e7e4      	b.n	8001ac4 <BSP_PB_Init+0x38>
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	200000a4 	.word	0x200000a4
 8001b04:	10110000 	.word	0x10110000

08001b08 <ACCELERO_IO_Init>:

/**
  * @brief  Configures the Accelerometer SPI interface.
  */
void ACCELERO_IO_Init(void)
{
 8001b08:	b530      	push	{r4, r5, lr}
 8001b0a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Accelerometer Control pins --------------------------------*/
  /* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */  
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <ACCELERO_IO_Init+0x44>)
  /* Configure GPIO PIN for LIS Chip select */
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001b0e:	4810      	ldr	r0, [pc, #64]	; (8001b50 <ACCELERO_IO_Init+0x48>)
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8001b10:	2100      	movs	r1, #0
 8001b12:	9100      	str	r1, [sp, #0]
 8001b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b16:	f042 0210 	orr.w	r2, r2, #16
 8001b1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2401      	movs	r4, #1
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8001b20:	f003 0310 	and.w	r3, r3, #16
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001b24:	e9cd 1403 	strd	r1, r4, [sp, #12]
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8001b28:	9300      	str	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2a:	2508      	movs	r5, #8
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001b2c:	a901      	add	r1, sp, #4
  ACCELERO_CS_GPIO_CLK_ENABLE();
 8001b2e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001b30:	e9cd 5401 	strd	r5, r4, [sp, #4]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001b34:	f000 ff0e 	bl	8002954 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  ACCELERO_CS_HIGH();
 8001b38:	4805      	ldr	r0, [pc, #20]	; (8001b50 <ACCELERO_IO_Init+0x48>)
 8001b3a:	4622      	mov	r2, r4
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	f000 ffe3 	bl	8002b08 <HAL_GPIO_WritePin>
  
  SPIx_Init();
 8001b42:	f7ff fe57 	bl	80017f4 <SPIx_Init>
}
 8001b46:	b007      	add	sp, #28
 8001b48:	bd30      	pop	{r4, r5, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40021000 	.word	0x40021000

08001b54 <ACCELERO_IO_ITConfig>:
/**
  * @brief  Configures the Accelerometer INT2.
  *         EXTI0 is already used by user button so INT1 is not configured here.
  */
void ACCELERO_IO_ITConfig(void)
{
 8001b54:	b510      	push	{r4, lr}
 8001b56:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001b58:	2400      	movs	r4, #0
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <ACCELERO_IO_ITConfig+0x44>)
 8001b5c:	9400      	str	r4, [sp, #0]
 8001b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
  GPIO_InitStructure.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001b60:	480e      	ldr	r0, [pc, #56]	; (8001b9c <ACCELERO_IO_ITConfig+0x48>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001b62:	f042 0210 	orr.w	r2, r2, #16
 8001b66:	631a      	str	r2, [r3, #48]	; 0x30
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8001b6a:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <ACCELERO_IO_ITConfig+0x4c>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001b74:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8001b76:	2302      	movs	r3, #2
 8001b78:	e9cd 3201 	strd	r3, r2, [sp, #4]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001b7c:	e9cd 4303 	strd	r4, r3, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001b80:	f000 fee8 	bl	8002954 <HAL_GPIO_Init>
  
  /* Enable and set Accelerometer INT2 to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 8001b84:	4622      	mov	r2, r4
 8001b86:	210f      	movs	r1, #15
 8001b88:	2007      	movs	r0, #7
 8001b8a:	f000 fc91 	bl	80024b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)ACCELERO_INT2_EXTI_IRQn);
 8001b8e:	2007      	movs	r0, #7
 8001b90:	f000 fcc0 	bl	8002514 <HAL_NVIC_EnableIRQ>
}
 8001b94:	b006      	add	sp, #24
 8001b96:	bd10      	pop	{r4, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	10110000 	.word	0x10110000

08001ba4 <ACCELERO_IO_Write>:
{
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8001ba4:	2a01      	cmp	r2, #1
{
 8001ba6:	b570      	push	{r4, r5, r6, lr}
 8001ba8:	460e      	mov	r6, r1
 8001baa:	4605      	mov	r5, r0
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001bac:	bf88      	it	hi
 8001bae:	f041 0640 	orrhi.w	r6, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8001bb2:	480c      	ldr	r0, [pc, #48]	; (8001be4 <ACCELERO_IO_Write+0x40>)
{
 8001bb4:	4614      	mov	r4, r2
  ACCELERO_CS_LOW();
 8001bb6:	2108      	movs	r1, #8
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f000 ffa5 	bl	8002b08 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001bbe:	4630      	mov	r0, r6
 8001bc0:	f7ff fe62 	bl	8001888 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001bc4:	442c      	add	r4, r5
 8001bc6:	42a5      	cmp	r5, r4
 8001bc8:	d106      	bne.n	8001bd8 <ACCELERO_IO_Write+0x34>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
}
 8001bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ACCELERO_CS_HIGH();
 8001bce:	4805      	ldr	r0, [pc, #20]	; (8001be4 <ACCELERO_IO_Write+0x40>)
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2108      	movs	r1, #8
 8001bd4:	f000 bf98 	b.w	8002b08 <HAL_GPIO_WritePin>
    SPIx_WriteRead(*pBuffer);
 8001bd8:	f815 0b01 	ldrb.w	r0, [r5], #1
 8001bdc:	f7ff fe54 	bl	8001888 <SPIx_WriteRead>
    pBuffer++;
 8001be0:	e7f1      	b.n	8001bc6 <ACCELERO_IO_Write+0x22>
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000

08001be8 <ACCELERO_IO_Read>:
  * @param  ReadAddr: Accelerometer's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the Accelerometer.
  */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 8001be8:	2a01      	cmp	r2, #1
{  
 8001bea:	b570      	push	{r4, r5, r6, lr}
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001bec:	bf8c      	ite	hi
 8001bee:	f041 04c0 	orrhi.w	r4, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001bf2:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
{  
 8001bf6:	4606      	mov	r6, r0
 8001bf8:	4615      	mov	r5, r2
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8001bfa:	480c      	ldr	r0, [pc, #48]	; (8001c2c <ACCELERO_IO_Read+0x44>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2108      	movs	r1, #8
 8001c00:	f000 ff82 	bl	8002b08 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001c04:	4620      	mov	r0, r4
 8001c06:	f7ff fe3f 	bl	8001888 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8001c0a:	4435      	add	r5, r6
 8001c0c:	42ae      	cmp	r6, r5
 8001c0e:	d106      	bne.n	8001c1e <ACCELERO_IO_Read+0x36>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
}
 8001c10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  ACCELERO_CS_HIGH();
 8001c14:	4805      	ldr	r0, [pc, #20]	; (8001c2c <ACCELERO_IO_Read+0x44>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	2108      	movs	r1, #8
 8001c1a:	f000 bf75 	b.w	8002b08 <HAL_GPIO_WritePin>
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f7ff fe32 	bl	8001888 <SPIx_WriteRead>
 8001c24:	f806 0b01 	strb.w	r0, [r6], #1
    pBuffer++;
 8001c28:	e7f0      	b.n	8001c0c <ACCELERO_IO_Read+0x24>
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000

08001c30 <AUDIO_IO_Init>:

/**
  * @brief  Initializes Audio low level.
  */
void AUDIO_IO_Init(void) 
{
 8001c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c32:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001c34:	2600      	movs	r6, #0
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <AUDIO_IO_Init+0x5c>)
 8001c38:	9600      	str	r6, [sp, #0]
 8001c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN; 
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8001c3c:	4c14      	ldr	r4, [pc, #80]	; (8001c90 <AUDIO_IO_Init+0x60>)
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001c3e:	f042 0208 	orr.w	r2, r2, #8
 8001c42:	631a      	str	r2, [r3, #48]	; 0x30
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4c:	2510      	movs	r5, #16
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8001c4e:	a901      	add	r1, sp, #4
 8001c50:	4620      	mov	r0, r4
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8001c52:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c54:	2701      	movs	r7, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001c56:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001c58:	e9cd 6303 	strd	r6, r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5c:	e9cd 5701 	strd	r5, r7, [sp, #4]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);    
 8001c60:	f000 fe78 	bl	8002954 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8001c64:	f7ff fe30 	bl	80018c8 <I2Cx_Init>
  
  /* Power Down the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8001c68:	4632      	mov	r2, r6
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f000 ff4b 	bl	8002b08 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8001c72:	2005      	movs	r0, #5
 8001c74:	f000 fbf0 	bl	8002458 <HAL_Delay>
  
  /* Power on the codec */
  HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_SET);
 8001c78:	463a      	mov	r2, r7
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	f000 ff43 	bl	8002b08 <HAL_GPIO_WritePin>
  
  /* Wait for a delay to insure registers erasing */
  HAL_Delay(5); 
 8001c82:	2005      	movs	r0, #5
 8001c84:	f000 fbe8 	bl	8002458 <HAL_Delay>
}
 8001c88:	b007      	add	sp, #28
 8001c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020c00 	.word	0x40020c00

08001c94 <AUDIO_IO_DeInit>:
  * @brief  DeInitializes Audio low level.
  */
void AUDIO_IO_DeInit(void)
{
  
}
 8001c94:	4770      	bx	lr
	...

08001c98 <AUDIO_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  */
void AUDIO_IO_Write (uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001c98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <AUDIO_IO_Write+0x34>)
 8001c9c:	f88d 2017 	strb.w	r2, [sp, #23]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	9302      	str	r3, [sp, #8]
 8001ca4:	f10d 0217 	add.w	r2, sp, #23
 8001ca8:	2301      	movs	r3, #1
 8001caa:	9200      	str	r2, [sp, #0]
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	460a      	mov	r2, r1
 8001cb0:	4601      	mov	r1, r0
 8001cb2:	4807      	ldr	r0, [pc, #28]	; (8001cd0 <AUDIO_IO_Write+0x38>)
 8001cb4:	f001 fe5c 	bl	8003970 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8001cb8:	b120      	cbz	r0, 8001cc4 <AUDIO_IO_Write+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 8001cba:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <AUDIO_IO_Write+0x38>)
 8001cbc:	f001 fe3f 	bl	800393e <HAL_I2C_DeInit>
  I2Cx_Init();
 8001cc0:	f7ff fe02 	bl	80018c8 <I2Cx_Init>
  I2Cx_WriteData(Addr, Reg, Value);
}
 8001cc4:	b007      	add	sp, #28
 8001cc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cca:	bf00      	nop
 8001ccc:	200000a4 	.word	0x200000a4
 8001cd0:	2000074c 	.word	0x2000074c

08001cd4 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001cd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &value, 1,I2cxTimeout);
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <AUDIO_IO_Read+0x38>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	9302      	str	r3, [sp, #8]
{
 8001ce2:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &value, 1,I2cxTimeout);
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	f10d 0117 	add.w	r1, sp, #23
 8001cea:	9100      	str	r1, [sp, #0]
 8001cec:	9301      	str	r3, [sp, #4]
 8001cee:	4601      	mov	r1, r0
 8001cf0:	4807      	ldr	r0, [pc, #28]	; (8001d10 <AUDIO_IO_Read+0x3c>)
 8001cf2:	f001 fecd 	bl	8003a90 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001cf6:	b120      	cbz	r0, 8001d02 <AUDIO_IO_Read+0x2e>
  HAL_I2C_DeInit(&I2cHandle);
 8001cf8:	4805      	ldr	r0, [pc, #20]	; (8001d10 <AUDIO_IO_Read+0x3c>)
 8001cfa:	f001 fe20 	bl	800393e <HAL_I2C_DeInit>
  I2Cx_Init();
 8001cfe:	f7ff fde3 	bl	80018c8 <I2Cx_Init>
  return I2Cx_ReadData(Addr, Reg);
}
 8001d02:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001d06:	b007      	add	sp, #28
 8001d08:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d0c:	200000a4 	.word	0x200000a4
 8001d10:	2000074c 	.word	0x2000074c

08001d14 <BSP_ACCELERO_Init>:
/**
  * @brief  Setx Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{ 
 8001d14:	b538      	push	{r3, r4, r5, lr}
  uint16_t ctrl = 0x0000;
  LIS302DL_InitTypeDef         lis302dl_initstruct;
  LIS302DL_FilterConfigTypeDef lis302dl_filter = {0,0,0};
  LIS3DSH_InitTypeDef          l1s3dsh_InitStruct;

  if(Lis302dlDrv.ReadID() == I_AM_LIS302DL)
 8001d16:	4c0e      	ldr	r4, [pc, #56]	; (8001d50 <BSP_ACCELERO_Init+0x3c>)
 8001d18:	68a3      	ldr	r3, [r4, #8]
 8001d1a:	4798      	blx	r3
 8001d1c:	283b      	cmp	r0, #59	; 0x3b
 8001d1e:	d10a      	bne.n	8001d36 <BSP_ACCELERO_Init+0x22>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis302dlDrv;
 8001d20:	4d0c      	ldr	r5, [pc, #48]	; (8001d54 <BSP_ACCELERO_Init+0x40>)
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
                       lis302dl_initstruct.Axes_Enable);
    
    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8001d22:	6823      	ldr	r3, [r4, #0]
    AcceleroDrv = &Lis302dlDrv;
 8001d24:	602c      	str	r4, [r5, #0]
    AcceleroDrv->Init(ctrl);
 8001d26:	2047      	movs	r0, #71	; 0x47
 8001d28:	4798      	blx	r3
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
                     lis302dl_filter.HighPassFilter_CutOff_Frequency | \
                     lis302dl_filter.HighPassFilter_Interrupt);

    /* Configure the accelerometer LPF main parameters */
    AcceleroDrv->FilterConfig(ctrl);
 8001d2a:	682b      	ldr	r3, [r5, #0]
 8001d2c:	202d      	movs	r0, #45	; 0x2d
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d30:	4798      	blx	r3
                         l1s3dsh_InitStruct.Filter_BW) << 8);

    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
    
    ret = ACCELERO_OK;
 8001d32:	2000      	movs	r0, #0
  else
  {
    ret = ACCELERO_ERROR;
  }
  return ret;
}
 8001d34:	bd38      	pop	{r3, r4, r5, pc}
  else if(Lis3dshDrv.ReadID() == I_AM_LIS3DSH)
 8001d36:	4c08      	ldr	r4, [pc, #32]	; (8001d58 <BSP_ACCELERO_Init+0x44>)
 8001d38:	68a3      	ldr	r3, [r4, #8]
 8001d3a:	4798      	blx	r3
 8001d3c:	283f      	cmp	r0, #63	; 0x3f
 8001d3e:	d105      	bne.n	8001d4c <BSP_ACCELERO_Init+0x38>
    AcceleroDrv = &Lis3dshDrv;
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <BSP_ACCELERO_Init+0x40>)
    AcceleroDrv->Init(ctrl);
 8001d42:	2067      	movs	r0, #103	; 0x67
    AcceleroDrv = &Lis3dshDrv;
 8001d44:	601c      	str	r4, [r3, #0]
    AcceleroDrv->Init(ctrl);
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	4798      	blx	r3
 8001d4a:	e7f2      	b.n	8001d32 <BSP_ACCELERO_Init+0x1e>
    ret = ACCELERO_ERROR;
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	e7f1      	b.n	8001d34 <BSP_ACCELERO_Init+0x20>
 8001d50:	2000003c 	.word	0x2000003c
 8001d54:	200007a0 	.word	0x200007a0
 8001d58:	20000070 	.word	0x20000070

08001d5c <BSP_ACCELERO_ReadID>:
  */
uint8_t BSP_ACCELERO_ReadID(void)
{
  uint8_t id = 0x00;

  if(AcceleroDrv->ReadID != NULL)
 8001d5c:	4b02      	ldr	r3, [pc, #8]	; (8001d68 <BSP_ACCELERO_ReadID+0xc>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6898      	ldr	r0, [r3, #8]
 8001d62:	b100      	cbz	r0, 8001d66 <BSP_ACCELERO_ReadID+0xa>
  {
    id = AcceleroDrv->ReadID();
 8001d64:	4700      	bx	r0
  }  
  return id;
}
 8001d66:	4770      	bx	lr
 8001d68:	200007a0 	.word	0x200007a0

08001d6c <BSP_ACCELERO_Click_ITConfig>:
/**
  * @brief  Configure Accelerometer click IT. 
  */
void BSP_ACCELERO_Click_ITConfig(void)
{
  if(AcceleroDrv->ConfigIT != NULL)
 8001d6c:	4b02      	ldr	r3, [pc, #8]	; (8001d78 <BSP_ACCELERO_Click_ITConfig+0xc>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	b103      	cbz	r3, 8001d76 <BSP_ACCELERO_Click_ITConfig+0xa>
  {
    AcceleroDrv->ConfigIT();
 8001d74:	4718      	bx	r3
  }
}
 8001d76:	4770      	bx	lr
 8001d78:	200007a0 	.word	0x200007a0

08001d7c <BSP_ACCELERO_Click_ITClear>:
/**
  * @brief  Clear Accelerometer click IT.
  */
void BSP_ACCELERO_Click_ITClear(void)
{
  if(AcceleroDrv->ClearIT != NULL)
 8001d7c:	4b02      	ldr	r3, [pc, #8]	; (8001d88 <BSP_ACCELERO_Click_ITClear+0xc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	b103      	cbz	r3, 8001d86 <BSP_ACCELERO_Click_ITClear+0xa>
  {
    AcceleroDrv->ClearIT();
 8001d84:	4718      	bx	r3
  }
}
 8001d86:	4770      	bx	lr
 8001d88:	200007a0 	.word	0x200007a0

08001d8c <I2S3_Init>:
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S3_Init(uint32_t AudioFreq)
{
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioOutI2s.Instance         = I2S3;
 8001d8c:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <I2S3_Init+0x34>)

 /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8001d8e:	69d1      	ldr	r1, [r2, #28]
{
 8001d90:	b508      	push	{r3, lr}
  hAudioOutI2s.Instance         = I2S3;
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <I2S3_Init+0x38>)
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8001d94:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
  hAudioOutI2s.Instance         = I2S3;
 8001d98:	601a      	str	r2, [r3, #0]
  __HAL_I2S_DISABLE(&hAudioOutI2s);
 8001d9a:	61d1      	str	r1, [r2, #28]
  
  /* I2S3 peripheral configuration */
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
  hAudioOutI2s.Init.ClockSource = I2S_CLOCK_PLL;
 8001d9c:	2200      	movs	r2, #0
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8001d9e:	f44f 7100 	mov.w	r1, #512	; 0x200
  hAudioOutI2s.Init.AudioFreq   = AudioFreq;
 8001da2:	6158      	str	r0, [r3, #20]
  hAudioOutI2s.Init.Mode        = I2S_MODE_MASTER_TX;
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8001da4:	4618      	mov	r0, r3
  hAudioOutI2s.Init.CPOL        = I2S_CPOL_LOW;
 8001da6:	e9c3 2206 	strd	r2, r2, [r3, #24]
  hAudioOutI2s.Init.Standard    = I2S_STANDARD;
 8001daa:	e9c3 1201 	strd	r1, r2, [r3, #4]
  hAudioOutI2s.Init.DataFormat  = I2S_DATAFORMAT_16B;
 8001dae:	60da      	str	r2, [r3, #12]
  hAudioOutI2s.Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8001db0:	6119      	str	r1, [r3, #16]
  if(HAL_I2S_Init(&hAudioOutI2s) != HAL_OK)
 8001db2:	f001 ff9f 	bl	8003cf4 <HAL_I2S_Init>
  }
  else
  {
    return AUDIO_OK;
  }
}
 8001db6:	3800      	subs	r0, #0
 8001db8:	bf18      	it	ne
 8001dba:	2001      	movne	r0, #1
 8001dbc:	bd08      	pop	{r3, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40003c00 	.word	0x40003c00
 8001dc4:	20004b98 	.word	0x20004b98

08001dc8 <BSP_AUDIO_OUT_Play>:
{
 8001dc8:	b538      	push	{r3, r4, r5, lr}
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <BSP_AUDIO_OUT_Play+0x34>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
{
 8001dce:	4605      	mov	r5, r0
 8001dd0:	460c      	mov	r4, r1
  if(pAudioDrv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8001dd2:	b28a      	uxth	r2, r1
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	4601      	mov	r1, r0
 8001dd8:	2094      	movs	r0, #148	; 0x94
 8001dda:	4798      	blx	r3
 8001ddc:	b960      	cbnz	r0, 8001df8 <BSP_AUDIO_OUT_Play+0x30>
    HAL_I2S_Transmit_DMA(&hAudioOutI2s, pBuffer, DMA_MAX(Size/AUDIODATA_SIZE)); 
 8001dde:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
 8001de2:	4807      	ldr	r0, [pc, #28]	; (8001e00 <BSP_AUDIO_OUT_Play+0x38>)
 8001de4:	bf34      	ite	cc
 8001de6:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 8001dea:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
 8001dee:	4629      	mov	r1, r5
 8001df0:	f002 f81a 	bl	8003e28 <HAL_I2S_Transmit_DMA>
    return AUDIO_OK;
 8001df4:	2000      	movs	r0, #0
}
 8001df6:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8001df8:	2001      	movs	r0, #1
 8001dfa:	e7fc      	b.n	8001df6 <BSP_AUDIO_OUT_Play+0x2e>
 8001dfc:	200007a4 	.word	0x200007a4
 8001e00:	20004b98 	.word	0x20004b98

08001e04 <BSP_AUDIO_OUT_ChangeBuffer>:
{
 8001e04:	460a      	mov	r2, r1
  HAL_I2S_Transmit_DMA(&hAudioOutI2s, pData, Size); 
 8001e06:	4601      	mov	r1, r0
 8001e08:	4801      	ldr	r0, [pc, #4]	; (8001e10 <BSP_AUDIO_OUT_ChangeBuffer+0xc>)
 8001e0a:	f002 b80d 	b.w	8003e28 <HAL_I2S_Transmit_DMA>
 8001e0e:	bf00      	nop
 8001e10:	20004b98 	.word	0x20004b98

08001e14 <BSP_AUDIO_OUT_Pause>:
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <BSP_AUDIO_OUT_Pause+0x20>)
 8001e16:	681b      	ldr	r3, [r3, #0]
{    
 8001e18:	b510      	push	{r4, lr}
  if(pAudioDrv->Pause(AUDIO_I2C_ADDRESS) != 0)
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	2094      	movs	r0, #148	; 0x94
 8001e1e:	4798      	blx	r3
 8001e20:	4604      	mov	r4, r0
 8001e22:	b920      	cbnz	r0, 8001e2e <BSP_AUDIO_OUT_Pause+0x1a>
    HAL_I2S_DMAPause(&hAudioOutI2s);
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <BSP_AUDIO_OUT_Pause+0x24>)
 8001e26:	f002 f8d3 	bl	8003fd0 <HAL_I2S_DMAPause>
    return AUDIO_OK;
 8001e2a:	4620      	mov	r0, r4
}
 8001e2c:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
 8001e2e:	2001      	movs	r0, #1
 8001e30:	e7fc      	b.n	8001e2c <BSP_AUDIO_OUT_Pause+0x18>
 8001e32:	bf00      	nop
 8001e34:	200007a4 	.word	0x200007a4
 8001e38:	20004b98 	.word	0x20004b98

08001e3c <BSP_AUDIO_OUT_Resume>:
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <BSP_AUDIO_OUT_Resume+0x20>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
{    
 8001e40:	b510      	push	{r4, lr}
  if(pAudioDrv->Resume(AUDIO_I2C_ADDRESS) != 0)
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	2094      	movs	r0, #148	; 0x94
 8001e46:	4798      	blx	r3
 8001e48:	4604      	mov	r4, r0
 8001e4a:	b920      	cbnz	r0, 8001e56 <BSP_AUDIO_OUT_Resume+0x1a>
    HAL_I2S_DMAResume(&hAudioOutI2s);
 8001e4c:	4804      	ldr	r0, [pc, #16]	; (8001e60 <BSP_AUDIO_OUT_Resume+0x24>)
 8001e4e:	f002 f8f7 	bl	8004040 <HAL_I2S_DMAResume>
    return AUDIO_OK;
 8001e52:	4620      	mov	r0, r4
}
 8001e54:	bd10      	pop	{r4, pc}
    return AUDIO_ERROR;
 8001e56:	2001      	movs	r0, #1
 8001e58:	e7fc      	b.n	8001e54 <BSP_AUDIO_OUT_Resume+0x18>
 8001e5a:	bf00      	nop
 8001e5c:	200007a4 	.word	0x200007a4
 8001e60:	20004b98 	.word	0x20004b98

08001e64 <BSP_AUDIO_OUT_Stop>:
{
 8001e64:	b538      	push	{r3, r4, r5, lr}
 8001e66:	4605      	mov	r5, r0
  HAL_I2S_DMAStop(&hAudioOutI2s);
 8001e68:	480c      	ldr	r0, [pc, #48]	; (8001e9c <BSP_AUDIO_OUT_Stop+0x38>)
 8001e6a:	f002 f92d 	bl	80040c8 <HAL_I2S_DMAStop>
  if(pAudioDrv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <BSP_AUDIO_OUT_Stop+0x3c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4629      	mov	r1, r5
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2094      	movs	r0, #148	; 0x94
 8001e78:	4798      	blx	r3
 8001e7a:	4604      	mov	r4, r0
 8001e7c:	b958      	cbnz	r0, 8001e96 <BSP_AUDIO_OUT_Stop+0x32>
    if(Option == CODEC_PDWN_HW)
 8001e7e:	2d01      	cmp	r5, #1
 8001e80:	d107      	bne.n	8001e92 <BSP_AUDIO_OUT_Stop+0x2e>
      HAL_Delay(1);
 8001e82:	4628      	mov	r0, r5
 8001e84:	f000 fae8 	bl	8002458 <HAL_Delay>
      HAL_GPIO_WritePin(AUDIO_RESET_GPIO, AUDIO_RESET_PIN, GPIO_PIN_RESET);
 8001e88:	4806      	ldr	r0, [pc, #24]	; (8001ea4 <BSP_AUDIO_OUT_Stop+0x40>)
 8001e8a:	4622      	mov	r2, r4
 8001e8c:	2110      	movs	r1, #16
 8001e8e:	f000 fe3b 	bl	8002b08 <HAL_GPIO_WritePin>
    return AUDIO_OK;
 8001e92:	4620      	mov	r0, r4
 8001e94:	e000      	b.n	8001e98 <BSP_AUDIO_OUT_Stop+0x34>
    return AUDIO_ERROR;
 8001e96:	2001      	movs	r0, #1
}
 8001e98:	bd38      	pop	{r3, r4, r5, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20004b98 	.word	0x20004b98
 8001ea0:	200007a4 	.word	0x200007a4
 8001ea4:	40020c00 	.word	0x40020c00

08001ea8 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8001ea8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <BSP_AUDIO_OUT_ClockConfig+0x4c>)
 8001eac:	2300      	movs	r3, #0
  uint8_t index = 0, freqindex = 0xFF;
 8001eae:	25ff      	movs	r5, #255	; 0xff
 8001eb0:	4614      	mov	r4, r2
    if(I2SFreq[index] == AudioFreq)
 8001eb2:	f852 6b04 	ldr.w	r6, [r2], #4
 8001eb6:	b2d8      	uxtb	r0, r3
 8001eb8:	3301      	adds	r3, #1
 8001eba:	428e      	cmp	r6, r1
 8001ebc:	bf08      	it	eq
 8001ebe:	4605      	moveq	r5, r0
  for(index = 0; index < 8; index++)
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d1f6      	bne.n	8001eb2 <BSP_AUDIO_OUT_ClockConfig+0xa>
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8001ec4:	4668      	mov	r0, sp
 8001ec6:	f002 fef9 	bl	8004cbc <HAL_RCCEx_GetPeriphCLKConfig>
  if ((freqindex & 0x7) == 0)
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f015 0f07 	tst.w	r5, #7
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001ed0:	9300      	str	r3, [sp, #0]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8001ed2:	bf0b      	itete	eq
 8001ed4:	eb04 0385 	addeq.w	r3, r4, r5, lsl #2
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8001ed8:	f44f 7381 	movne.w	r3, #258	; 0x102
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8001edc:	6a1a      	ldreq	r2, [r3, #32]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8001ede:	9301      	strne	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8001ee0:	bf06      	itte	eq
 8001ee2:	6c1b      	ldreq	r3, [r3, #64]	; 0x40
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8001ee4:	9201      	streq	r2, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8001ee6:	2303      	movne	r3, #3
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001ee8:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8001eea:	9302      	str	r3, [sp, #8]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8001eec:	f002 fe4e 	bl	8004b8c <HAL_RCCEx_PeriphCLKConfig>
}
 8001ef0:	b004      	add	sp, #16
 8001ef2:	bd70      	pop	{r4, r5, r6, pc}
 8001ef4:	0800bce8 	.word	0x0800bce8

08001ef8 <BSP_AUDIO_OUT_MspInit>:
{
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	b08a      	sub	sp, #40	; 0x28
  I2S3_CLK_ENABLE();
 8001efc:	4c3f      	ldr	r4, [pc, #252]	; (8001ffc <BSP_AUDIO_OUT_MspInit+0x104>)
 8001efe:	2500      	movs	r5, #0
 8001f00:	9500      	str	r5, [sp, #0]
 8001f02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f08:	6423      	str	r3, [r4, #64]	; 0x40
 8001f0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	9b00      	ldr	r3, [sp, #0]
  I2S3_SCK_SD_CLK_ENABLE();
 8001f14:	9501      	str	r5, [sp, #4]
 8001f16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f18:	f043 0304 	orr.w	r3, r3, #4
 8001f1c:	6323      	str	r3, [r4, #48]	; 0x30
 8001f1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	9301      	str	r3, [sp, #4]
 8001f26:	9b01      	ldr	r3, [sp, #4]
  I2S3_WS_CLK_ENABLE();
 8001f28:	9502      	str	r5, [sp, #8]
 8001f2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6323      	str	r3, [r4, #48]	; 0x30
 8001f32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8001f3a:	f44f 5ca0 	mov.w	ip, #5120	; 0x1400
  I2S3_WS_CLK_ENABLE();
 8001f3e:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode        = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	e9cd c305 	strd	ip, r3, [sp, #20]
  GPIO_InitStruct.Speed       = GPIO_SPEED_FAST;
 8001f46:	e9cd 5307 	strd	r5, r3, [sp, #28]
{
 8001f4a:	4606      	mov	r6, r0
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8001f4c:	2306      	movs	r3, #6
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8001f4e:	482c      	ldr	r0, [pc, #176]	; (8002000 <BSP_AUDIO_OUT_MspInit+0x108>)
  GPIO_InitStruct.Alternate   = I2S3_SCK_SD_WS_AF;
 8001f50:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S3_SCK_SD_GPIO_PORT, &GPIO_InitStruct);
 8001f52:	a905      	add	r1, sp, #20
 8001f54:	f000 fcfe 	bl	8002954 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8001f58:	2310      	movs	r3, #16
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8001f5a:	482a      	ldr	r0, [pc, #168]	; (8002004 <BSP_AUDIO_OUT_MspInit+0x10c>)
  GPIO_InitStruct.Pin         = I2S3_WS_PIN ;
 8001f5c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_WS_GPIO_PORT, &GPIO_InitStruct); 
 8001f5e:	a905      	add	r1, sp, #20
 8001f60:	f000 fcf8 	bl	8002954 <HAL_GPIO_Init>
  I2S3_MCK_CLK_ENABLE();
 8001f64:	9503      	str	r5, [sp, #12]
 8001f66:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8001f68:	4825      	ldr	r0, [pc, #148]	; (8002000 <BSP_AUDIO_OUT_MspInit+0x108>)
  I2S3_MCK_CLK_ENABLE();
 8001f6a:	f043 0304 	orr.w	r3, r3, #4
 8001f6e:	6323      	str	r3, [r4, #48]	; 0x30
 8001f70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	9303      	str	r3, [sp, #12]
 8001f78:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8001f7a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin         = I2S3_MCK_PIN; 
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S3_MCK_GPIO_PORT, &GPIO_InitStruct);   
 8001f80:	f000 fce8 	bl	8002954 <HAL_GPIO_Init>
  I2S3_DMAx_CLK_ENABLE(); 
 8001f84:	9504      	str	r5, [sp, #16]
 8001f86:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if(hi2s->Instance == I2S3)
 8001f88:	6832      	ldr	r2, [r6, #0]
  I2S3_DMAx_CLK_ENABLE(); 
 8001f8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f8e:	6323      	str	r3, [r4, #48]	; 0x30
 8001f90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f96:	9304      	str	r3, [sp, #16]
 8001f98:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S3)
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <BSP_AUDIO_OUT_MspInit+0x110>)
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d123      	bne.n	8001fe8 <BSP_AUDIO_OUT_MspInit+0xf0>
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8001fa0:	4b1a      	ldr	r3, [pc, #104]	; (800200c <BSP_AUDIO_OUT_MspInit+0x114>)
    hdma_i2sTx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001fa2:	2240      	movs	r2, #64	; 0x40
    hdma_i2sTx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001fa4:	e9c3 2503 	strd	r2, r5, [r3, #12]
    hdma_i2sTx.Init.PeriphDataAlignment = I2S3_DMAx_PERIPH_DATA_SIZE;
 8001fa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fb0:	e9c3 1205 	strd	r1, r2, [r3, #20]
    hdma_i2sTx.Init.MemDataAlignment    = I2S3_DMAx_MEM_DATA_SIZE;
 8001fb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_i2sTx.Init.Mode                = DMA_NORMAL;
 8001fb8:	e9c3 2507 	strd	r2, r5, [r3, #28]
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001fbc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001fc0:	2204      	movs	r2, #4
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8001fc2:	461c      	mov	r4, r3
    hdma_i2sTx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001fc4:	e9c3 0209 	strd	r0, r2, [r3, #36]	; 0x24
    hdma_i2sTx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001fc8:	2203      	movs	r2, #3
    hdma_i2sTx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001fca:	e9c3 250b 	strd	r2, r5, [r3, #44]	; 0x2c
    hdma_i2sTx.Instance                 = I2S3_DMAx_STREAM;
 8001fce:	4a10      	ldr	r2, [pc, #64]	; (8002010 <BSP_AUDIO_OUT_MspInit+0x118>)
 8001fd0:	f844 2f04 	str.w	r2, [r4, #4]!
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8001fd4:	63b4      	str	r4, [r6, #56]	; 0x38
    HAL_DMA_DeInit(&hdma_i2sTx);
 8001fd6:	4620      	mov	r0, r4
    hdma_i2sTx.Init.Channel             = I2S3_DMAx_CHANNEL;  
 8001fd8:	609d      	str	r5, [r3, #8]
    hdma_i2sTx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001fda:	635d      	str	r5, [r3, #52]	; 0x34
    __HAL_LINKDMA(hi2s, hdmatx, hdma_i2sTx);
 8001fdc:	63de      	str	r6, [r3, #60]	; 0x3c
    HAL_DMA_DeInit(&hdma_i2sTx);
 8001fde:	f000 fb53 	bl	8002688 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_i2sTx);
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f000 fad0 	bl	8002588 <HAL_DMA_Init>
  HAL_NVIC_SetPriority(I2S3_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	210e      	movs	r1, #14
 8001fec:	202f      	movs	r0, #47	; 0x2f
 8001fee:	f000 fa5f 	bl	80024b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S3_DMAx_IRQ); 
 8001ff2:	202f      	movs	r0, #47	; 0x2f
 8001ff4:	f000 fa8e 	bl	8002514 <HAL_NVIC_EnableIRQ>
}
 8001ff8:	b00a      	add	sp, #40	; 0x28
 8001ffa:	bd70      	pop	{r4, r5, r6, pc}
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020800 	.word	0x40020800
 8002004:	40020000 	.word	0x40020000
 8002008:	40003c00 	.word	0x40003c00
 800200c:	200007a4 	.word	0x200007a4
 8002010:	400260b8 	.word	0x400260b8

08002014 <BSP_AUDIO_OUT_Init>:
{    
 8002014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8002018:	4c18      	ldr	r4, [pc, #96]	; (800207c <BSP_AUDIO_OUT_Init+0x68>)
{    
 800201a:	4615      	mov	r5, r2
 800201c:	4606      	mov	r6, r0
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 800201e:	2200      	movs	r2, #0
 8002020:	4620      	mov	r0, r4
{    
 8002022:	460f      	mov	r7, r1
  BSP_AUDIO_OUT_ClockConfig(&hAudioOutI2s, AudioFreq, NULL);
 8002024:	4629      	mov	r1, r5
 8002026:	f7ff ff3f 	bl	8001ea8 <BSP_AUDIO_OUT_ClockConfig>
  hAudioOutI2s.Instance = I2S3;
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <BSP_AUDIO_OUT_Init+0x6c>)
 800202c:	6023      	str	r3, [r4, #0]
  if(HAL_I2S_GetState(&hAudioOutI2s) == HAL_I2S_STATE_RESET)
 800202e:	4620      	mov	r0, r4
 8002030:	f002 f9fd 	bl	800442e <HAL_I2S_GetState>
 8002034:	4601      	mov	r1, r0
 8002036:	b910      	cbnz	r0, 800203e <BSP_AUDIO_OUT_Init+0x2a>
    BSP_AUDIO_OUT_MspInit(&hAudioOutI2s, NULL);
 8002038:	4620      	mov	r0, r4
 800203a:	f7ff ff5d 	bl	8001ef8 <BSP_AUDIO_OUT_MspInit>
  if(I2S3_Init(AudioFreq) != AUDIO_OK)
 800203e:	4628      	mov	r0, r5
 8002040:	f7ff fea4 	bl	8001d8c <I2S3_Init>
 8002044:	4604      	mov	r4, r0
 8002046:	b118      	cbz	r0, 8002050 <BSP_AUDIO_OUT_Init+0x3c>
    ret = AUDIO_ERROR;
 8002048:	2401      	movs	r4, #1
}
 800204a:	4620      	mov	r0, r4
 800204c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS)) & CS43L22_ID_MASK) == CS43L22_ID)
 8002050:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8002088 <BSP_AUDIO_OUT_Init+0x74>
 8002054:	2094      	movs	r0, #148	; 0x94
 8002056:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800205a:	4798      	blx	r3
 800205c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8002060:	28e0      	cmp	r0, #224	; 0xe0
 8002062:	d1f1      	bne.n	8002048 <BSP_AUDIO_OUT_Init+0x34>
      pAudioDrv = &cs43l22_drv; 
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <BSP_AUDIO_OUT_Init+0x70>)
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8002066:	463a      	mov	r2, r7
      pAudioDrv = &cs43l22_drv; 
 8002068:	f8c3 8000 	str.w	r8, [r3]
    pAudioDrv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 800206c:	4631      	mov	r1, r6
 800206e:	f8d8 8000 	ldr.w	r8, [r8]
 8002072:	462b      	mov	r3, r5
 8002074:	2094      	movs	r0, #148	; 0x94
 8002076:	47c0      	blx	r8
 8002078:	e7e7      	b.n	800204a <BSP_AUDIO_OUT_Init+0x36>
 800207a:	bf00      	nop
 800207c:	20004b98 	.word	0x20004b98
 8002080:	40003c00 	.word	0x40003c00
 8002084:	200007a4 	.word	0x200007a4
 8002088:	2000000c 	.word	0x2000000c

0800208c <HAL_I2S_TxCpltCallback>:
{
 800208c:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 800208e:	6802      	ldr	r2, [r0, #0]
 8002090:	4b02      	ldr	r3, [pc, #8]	; (800209c <HAL_I2S_TxCpltCallback+0x10>)
 8002092:	429a      	cmp	r2, r3
 8002094:	d101      	bne.n	800209a <HAL_I2S_TxCpltCallback+0xe>
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8002096:	f7fe fdff 	bl	8000c98 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 800209a:	bd08      	pop	{r3, pc}
 800209c:	40003c00 	.word	0x40003c00

080020a0 <HAL_I2S_TxHalfCpltCallback>:
{
 80020a0:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 80020a2:	6802      	ldr	r2, [r0, #0]
 80020a4:	4b02      	ldr	r3, [pc, #8]	; (80020b0 <HAL_I2S_TxHalfCpltCallback+0x10>)
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d101      	bne.n	80020ae <HAL_I2S_TxHalfCpltCallback+0xe>
    BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80020aa:	f7fe fdef 	bl	8000c8c <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80020ae:	bd08      	pop	{r3, pc}
 80020b0:	40003c00 	.word	0x40003c00

080020b4 <BSP_AUDIO_IN_Record>:
  * @param  pbuf: Main buffer pointer for the recorded data storing  
  * @param  size: Current size of the recorded buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 80020b4:	b508      	push	{r3, lr}
  uint32_t ret = AUDIO_ERROR;
  
  /* Start the process receive DMA */
  HAL_I2S_Receive_DMA(&hAudioInI2s, pbuf, size);
 80020b6:	b28a      	uxth	r2, r1
 80020b8:	4601      	mov	r1, r0
 80020ba:	4802      	ldr	r0, [pc, #8]	; (80020c4 <BSP_AUDIO_IN_Record+0x10>)
 80020bc:	f001 ff18 	bl	8003ef0 <HAL_I2S_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
  
  return ret;
}
 80020c0:	2000      	movs	r0, #0
 80020c2:	bd08      	pop	{r3, pc}
 80020c4:	20004be0 	.word	0x20004be0

080020c8 <BSP_AUDIO_IN_Stop>:
/**
  * @brief  Stops audio recording.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Stop(void)
{
 80020c8:	b508      	push	{r3, lr}
  uint32_t ret = AUDIO_ERROR;
  
  /* Call the Media layer pause function */
  HAL_I2S_DMAStop(&hAudioInI2s);  
 80020ca:	4802      	ldr	r0, [pc, #8]	; (80020d4 <BSP_AUDIO_IN_Stop+0xc>)
 80020cc:	f001 fffc 	bl	80040c8 <HAL_I2S_DMAStop>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
  
  return ret;
}
 80020d0:	2000      	movs	r0, #0
 80020d2:	bd08      	pop	{r3, pc}
 80020d4:	20004be0 	.word	0x20004be0

080020d8 <BSP_AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf: Pointer to data PDM buffer
  * @param  PCMBuf: Pointer to data PCM buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_PDMToPCM(uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 80020d8:	b570      	push	{r4, r5, r6, lr}
 80020da:	b0a0      	sub	sp, #128	; 0x80
 80020dc:	460c      	mov	r4, r1
 80020de:	4669      	mov	r1, sp
 80020e0:	1e82      	subs	r2, r0, #2
 80020e2:	f100 037e 	add.w	r3, r0, #126	; 0x7e
 80020e6:	4608      	mov	r0, r1
  uint32_t index = 0; 
  
  /* PDM Demux */
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
  {
    AppPDM[index] = HTONS(PDMBuf[index]);
 80020e8:	f832 6f02 	ldrh.w	r6, [r2, #2]!
 80020ec:	0235      	lsls	r5, r6, #8
 80020ee:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 80020f2:	4293      	cmp	r3, r2
    AppPDM[index] = HTONS(PDMBuf[index]);
 80020f4:	f821 5b02 	strh.w	r5, [r1], #2
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 80020f8:	d1f6      	bne.n	80020e8 <BSP_AUDIO_IN_PDMToPCM+0x10>
  }
  
  for(index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++)
  {
    /* PDM to PCM filter */
	PDM_Filter((uint8_t*)&AppPDM[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 80020fa:	4a08      	ldr	r2, [pc, #32]	; (800211c <BSP_AUDIO_IN_PDMToPCM+0x44>)
 80020fc:	4621      	mov	r1, r4
 80020fe:	f008 ffc5 	bl	800b08c <PDM_Filter>
  }
  /* Duplicate samples since a single microphone in mounted on STM32F4-Discovery */
  for(index = 0; index < PCM_OUT_SIZE; index++)
 8002102:	2300      	movs	r3, #0
  {
    PCMBuf[(index<<1)+1] = PCMBuf[index<<1];
 8002104:	1ca2      	adds	r2, r4, #2
 8002106:	f834 1023 	ldrh.w	r1, [r4, r3, lsl #2]
 800210a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
  for(index = 0; index < PCM_OUT_SIZE; index++)
 800210e:	3301      	adds	r3, #1
 8002110:	2b10      	cmp	r3, #16
 8002112:	d1f8      	bne.n	8002106 <BSP_AUDIO_IN_PDMToPCM+0x2e>
  }
  
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK; 
}
 8002114:	2000      	movs	r0, #0
 8002116:	b020      	add	sp, #128	; 0x80
 8002118:	bd70      	pop	{r4, r5, r6, pc}
 800211a:	bf00      	nop
 800211c:	20004b00 	.word	0x20004b00

08002120 <BSP_AUDIO_IN_ClockConfig>:
  * @param  Params : pointer on additional configuration parameters, can be NULL.   
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  */
__weak void BSP_AUDIO_IN_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{
 8002120:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002122:	460c      	mov	r4, r1
  RCC_PeriphCLKInitTypeDef rccclkinit;

  /*Enable PLLI2S clock*/
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8002124:	4668      	mov	r0, sp
 8002126:	f002 fdc9 	bl	8004cbc <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((AudioFreq & 0x7) == 0)
 800212a:	2301      	movs	r3, #1
 800212c:	f014 0f07 	tst.w	r4, #7
  {
    /* Audio frequency multiple of 8 (8/16/32/48/96/192)*/
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 192 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 192/6 = 32 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002130:	9300      	str	r3, [sp, #0]
    rccclkinit.PLLI2S.PLLI2SN = 192;
 8002132:	bf0b      	itete	eq
 8002134:	23c0      	moveq	r3, #192	; 0xc0
  {
    /* Other Frequency (11.025/22.500/44.100) */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 290 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 290/2 = 145 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 290;
 8002136:	f44f 7391 	movne.w	r3, #290	; 0x122
    rccclkinit.PLLI2S.PLLI2SN = 192;
 800213a:	9301      	streq	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SN = 290;
 800213c:	9301      	strne	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = 6;
 800213e:	bf0c      	ite	eq
 8002140:	2306      	moveq	r3, #6
    rccclkinit.PLLI2S.PLLI2SR = 2;
 8002142:	2302      	movne	r3, #2
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8002144:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 2;
 8002146:	9302      	str	r3, [sp, #8]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8002148:	f002 fd20 	bl	8004b8c <HAL_RCCEx_PeriphCLKConfig>
  }
}
 800214c:	b004      	add	sp, #16
 800214e:	bd10      	pop	{r4, pc}

08002150 <BSP_AUDIO_IN_MspInit>:
  * @brief  BSP AUDIO IN MSP Init.
  * @param  hi2s: I2S handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8002150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002154:	b08a      	sub	sp, #40	; 0x28
  static DMA_HandleTypeDef hdma_i2sRx;
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the I2S2 peripheral clock */
  I2S2_CLK_ENABLE();
 8002156:	4c3b      	ldr	r4, [pc, #236]	; (8002244 <BSP_AUDIO_IN_MspInit+0xf4>)
 8002158:	2500      	movs	r5, #0
 800215a:	9501      	str	r5, [sp, #4]
 800215c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800215e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002162:	6423      	str	r3, [r4, #64]	; 0x40
 8002164:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	9b01      	ldr	r3, [sp, #4]

  /* Enable I2S GPIO clocks */
  I2S2_SCK_GPIO_CLK_ENABLE();
 800216e:	9502      	str	r5, [sp, #8]
 8002170:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002172:	f043 0302 	orr.w	r3, r3, #2
 8002176:	6323      	str	r3, [r4, #48]	; 0x30
 8002178:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	9302      	str	r3, [sp, #8]
 8002180:	9b02      	ldr	r3, [sp, #8]
  I2S2_MOSI_GPIO_CLK_ENABLE();
 8002182:	9503      	str	r5, [sp, #12]
 8002184:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002186:	f043 0304 	orr.w	r3, r3, #4
 800218a:	6323      	str	r3, [r4, #48]	; 0x30
 800218c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	9303      	str	r3, [sp, #12]
 8002194:	9b03      	ldr	r3, [sp, #12]
{
 8002196:	4606      	mov	r6, r0
  
  /* I2S2 pins configuration: SCK and MOSI pins ------------------------------*/
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;

  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 800219a:	482b      	ldr	r0, [pc, #172]	; (8002248 <BSP_AUDIO_IN_MspInit+0xf8>)
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 800219c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 800219e:	f04f 0805 	mov.w	r8, #5
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 80021a2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
 80021a4:	f44f 6780 	mov.w	r7, #1024	; 0x400
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80021a8:	e9cd 3506 	strd	r3, r5, [sp, #24]
  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
 80021ac:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 80021ae:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 80021b2:	f000 fbcf 	bl	8002954 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin       = I2S2_MOSI_PIN ;
 80021b6:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 80021b8:	4824      	ldr	r0, [pc, #144]	; (800224c <BSP_AUDIO_IN_MspInit+0xfc>)
  GPIO_InitStruct.Pin       = I2S2_MOSI_PIN ;
 80021ba:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 80021bc:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
 80021be:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 80021c2:	f000 fbc7 	bl	8002954 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  I2S2_DMAx_CLK_ENABLE();
 80021c6:	9504      	str	r5, [sp, #16]
 80021c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    
  if(hi2s->Instance == I2S2)
 80021ca:	6832      	ldr	r2, [r6, #0]
  I2S2_DMAx_CLK_ENABLE();
 80021cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021d0:	6323      	str	r3, [r4, #48]	; 0x30
 80021d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d8:	9304      	str	r3, [sp, #16]
 80021da:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S2)
 80021dc:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <BSP_AUDIO_IN_MspInit+0x100>)
 80021de:	429a      	cmp	r2, r3
 80021e0:	d124      	bne.n	800222c <BSP_AUDIO_IN_MspInit+0xdc>
  {
    /* Configure the hdma_i2sRx handle parameters */   
    hdma_i2sRx.Init.Channel             = I2S2_DMAx_CHANNEL;
 80021e2:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <BSP_AUDIO_IN_MspInit+0x104>)
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
    hdma_i2sRx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
    hdma_i2sRx.Init.PeriphDataAlignment = I2S2_DMAx_PERIPH_DATA_SIZE;
    hdma_i2sRx.Init.MemDataAlignment    = I2S2_DMAx_MEM_DATA_SIZE;
 80021e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ec:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
    hdma_i2sRx.Init.Mode                = DMA_CIRCULAR;
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 80021f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
    
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 80021f8:	461c      	mov	r4, r3
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 80021fa:	e9c3 0220 	strd	r0, r2, [r3, #128]	; 0x80
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80021fe:	2203      	movs	r2, #3
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002200:	e9c3 2523 	strd	r2, r5, [r3, #140]	; 0x8c
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <BSP_AUDIO_IN_MspInit+0x108>)
 8002206:	f844 2f64 	str.w	r2, [r4, #100]!
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 800220a:	63f4      	str	r4, [r6, #60]	; 0x3c
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sRx);
 800220c:	4620      	mov	r0, r4
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800220e:	e9c3 551a 	strd	r5, r5, [r3, #104]	; 0x68
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
 8002212:	e9c3 571c 	strd	r5, r7, [r3, #112]	; 0x70
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002216:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
 800221a:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 800221e:	f8c3 609c 	str.w	r6, [r3, #156]	; 0x9c
    HAL_DMA_DeInit(&hdma_i2sRx);
 8002222:	f000 fa31 	bl	8002688 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sRx);      
 8002226:	4620      	mov	r0, r4
 8002228:	f000 f9ae 	bl	8002588 <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S2_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	210f      	movs	r1, #15
 8002230:	200e      	movs	r0, #14
 8002232:	f000 f93d 	bl	80024b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S2_DMAx_IRQ); 
 8002236:	200e      	movs	r0, #14
 8002238:	f000 f96c 	bl	8002514 <HAL_NVIC_EnableIRQ>
}
 800223c:	b00a      	add	sp, #40	; 0x28
 800223e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800
 8002248:	40020400 	.word	0x40020400
 800224c:	40020800 	.word	0x40020800
 8002250:	40003800 	.word	0x40003800
 8002254:	200007a4 	.word	0x200007a4
 8002258:	40026058 	.word	0x40026058

0800225c <BSP_AUDIO_IN_Init>:
{
 800225c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002260:	4605      	mov	r5, r0
 8002262:	4691      	mov	r9, r2
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 8002264:	4601      	mov	r1, r0
 8002266:	2200      	movs	r2, #0
 8002268:	482d      	ldr	r0, [pc, #180]	; (8002320 <BSP_AUDIO_IN_Init+0xc4>)
 800226a:	4c2e      	ldr	r4, [pc, #184]	; (8002324 <BSP_AUDIO_IN_Init+0xc8>)
 800226c:	4e2e      	ldr	r6, [pc, #184]	; (8002328 <BSP_AUDIO_IN_Init+0xcc>)
 800226e:	f7ff ff57 	bl	8002120 <BSP_AUDIO_IN_ClockConfig>
static void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
  uint32_t index = 0;

  /* Enable CRC peripheral to unlock the PDM library */
  __HAL_RCC_CRC_CLK_ENABLE();
 8002272:	2700      	movs	r7, #0
 8002274:	4b2d      	ldr	r3, [pc, #180]	; (800232c <BSP_AUDIO_IN_Init+0xd0>)
 8002276:	9701      	str	r7, [sp, #4]
 8002278:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800227a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	9b01      	ldr	r3, [sp, #4]
  for(index = 0; index < ChnlNbrIn; index++)
  {
    /* Init PDM filters */
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 800228a:	4b29      	ldr	r3, [pc, #164]	; (8002330 <BSP_AUDIO_IN_Init+0xd4>)
 800228c:	f04f 0a4c 	mov.w	sl, #76	; 0x4c
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));

    /* PDM lib config phase */
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8002290:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8002294:	fb0a 4a09 	mla	sl, sl, r9, r4
 8002298:	fbb5 f8f8 	udiv	r8, r5, r8
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 800229c:	f04f 0b02 	mov.w	fp, #2
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 80022a0:	fa1f f888 	uxth.w	r8, r8
  for(index = 0; index < ChnlNbrIn; index++)
 80022a4:	4554      	cmp	r4, sl
 80022a6:	d123      	bne.n	80022f0 <BSP_AUDIO_IN_Init+0x94>
  hAudioInI2s.Instance = I2S2;
 80022a8:	4c1d      	ldr	r4, [pc, #116]	; (8002320 <BSP_AUDIO_IN_Init+0xc4>)
 80022aa:	4e22      	ldr	r6, [pc, #136]	; (8002334 <BSP_AUDIO_IN_Init+0xd8>)
 80022ac:	6026      	str	r6, [r4, #0]
  if(HAL_I2S_GetState(&hAudioInI2s) == HAL_I2S_STATE_RESET)
 80022ae:	4620      	mov	r0, r4
 80022b0:	f002 f8bd 	bl	800442e <HAL_I2S_GetState>
 80022b4:	4601      	mov	r1, r0
 80022b6:	b910      	cbnz	r0, 80022be <BSP_AUDIO_IN_Init+0x62>
    BSP_AUDIO_IN_MspInit(&hAudioInI2s, NULL);
 80022b8:	4620      	mov	r0, r4
 80022ba:	f7ff ff49 	bl	8002150 <BSP_AUDIO_IN_MspInit>
{
  /* Initialize the hAudioInI2s Instance parameter */
  hAudioInI2s.Instance          = I2S2;
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioInI2s);
 80022be:	69f3      	ldr	r3, [r6, #28]
  hAudioInI2s.Instance          = I2S2;
 80022c0:	6026      	str	r6, [r4, #0]
  __HAL_I2S_DISABLE(&hAudioInI2s);
 80022c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  
  /* I2S2 peripheral configuration */
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 80022c6:	006d      	lsls	r5, r5, #1
  __HAL_I2S_DISABLE(&hAudioInI2s);
 80022c8:	61f3      	str	r3, [r6, #28]
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 80022ca:	6165      	str	r5, [r4, #20]
  hAudioInI2s.Init.ClockSource  = I2S_CLOCK_PLL;
  hAudioInI2s.Init.CPOL         = I2S_CPOL_HIGH;
 80022cc:	2308      	movs	r3, #8
 80022ce:	2500      	movs	r5, #0
 80022d0:	e9c4 3506 	strd	r3, r5, [r4, #24]
  hAudioInI2s.Init.DataFormat   = I2S_DATAFORMAT_16B;
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
  hAudioInI2s.Init.Mode         = I2S_MODE_MASTER_RX;
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 80022d4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80022d8:	2320      	movs	r3, #32

  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 80022da:	4811      	ldr	r0, [pc, #68]	; (8002320 <BSP_AUDIO_IN_Init+0xc4>)
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
 80022dc:	e9c4 5503 	strd	r5, r5, [r4, #12]
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 80022e0:	e9c4 2301 	strd	r2, r3, [r4, #4]
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 80022e4:	f001 fd06 	bl	8003cf4 <HAL_I2S_Init>
}
 80022e8:	4628      	mov	r0, r5
 80022ea:	b003      	add	sp, #12
 80022ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 80022f0:	6063      	str	r3, [r4, #4]
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 80022f2:	8027      	strh	r7, [r4, #0]
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 80022f4:	8067      	strh	r7, [r4, #2]
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 80022f6:	f8a4 b00a 	strh.w	fp, [r4, #10]
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 80022fa:	f8a4 9008 	strh.w	r9, [r4, #8]
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 80022fe:	4620      	mov	r0, r4
 8002300:	f008 fd48 	bl	800ad94 <PDM_Filter_Init>
    PDM_FilterConfig[index].mic_gain = 24;
 8002304:	2218      	movs	r2, #24
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8002306:	f8a6 8002 	strh.w	r8, [r6, #2]
    PDM_FilterConfig[index].mic_gain = 24;
 800230a:	80b2      	strh	r2, [r6, #4]
    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800230c:	f8a6 b000 	strh.w	fp, [r6]
    PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8002310:	4631      	mov	r1, r6
 8002312:	4620      	mov	r0, r4
 8002314:	f008 fdc8 	bl	800aea8 <PDM_Filter_setConfig>
  for(index = 0; index < ChnlNbrIn; index++)
 8002318:	344c      	adds	r4, #76	; 0x4c
 800231a:	4b05      	ldr	r3, [pc, #20]	; (8002330 <BSP_AUDIO_IN_Init+0xd4>)
 800231c:	3606      	adds	r6, #6
 800231e:	e7c1      	b.n	80022a4 <BSP_AUDIO_IN_Init+0x48>
 8002320:	20004be0 	.word	0x20004be0
 8002324:	20004b00 	.word	0x20004b00
 8002328:	20004af4 	.word	0x20004af4
 800232c:	40023800 	.word	0x40023800
 8002330:	7e809d48 	.word	0x7e809d48
 8002334:	40003800 	.word	0x40003800

08002338 <HAL_I2S_RxCpltCallback>:
{
 8002338:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 800233a:	f7fe fe5f 	bl	8000ffc <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800233e:	bd08      	pop	{r3, pc}

08002340 <HAL_I2S_RxHalfCpltCallback>:
{
 8002340:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8002342:	f7fe fe9b 	bl	800107c <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8002346:	bd08      	pop	{r3, pc}

08002348 <BSP_AUDIO_IN_Error_Callback>:
 8002348:	4770      	bx	lr
	...

0800234c <HAL_I2S_ErrorCallback>:
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 800234c:	6802      	ldr	r2, [r0, #0]
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <HAL_I2S_ErrorCallback+0x20>)
 8002350:	429a      	cmp	r2, r3
{
 8002352:	b510      	push	{r4, lr}
 8002354:	4604      	mov	r4, r0
  if(hi2s->Instance == I2S3)
 8002356:	d101      	bne.n	800235c <HAL_I2S_ErrorCallback+0x10>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8002358:	f7fe fcaa 	bl	8000cb0 <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 800235c:	6822      	ldr	r2, [r4, #0]
 800235e:	4b04      	ldr	r3, [pc, #16]	; (8002370 <HAL_I2S_ErrorCallback+0x24>)
 8002360:	429a      	cmp	r2, r3
 8002362:	d101      	bne.n	8002368 <HAL_I2S_ErrorCallback+0x1c>
  {
    BSP_AUDIO_IN_Error_Callback();
 8002364:	f7ff fff0 	bl	8002348 <BSP_AUDIO_IN_Error_Callback>
  }
}
 8002368:	bd10      	pop	{r4, pc}
 800236a:	bf00      	nop
 800236c:	40003c00 	.word	0x40003c00
 8002370:	40003800 	.word	0x40003800

08002374 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002374:	490f      	ldr	r1, [pc, #60]	; (80023b4 <SystemInit+0x40>)
 8002376:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800237a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <SystemInit+0x44>)
 8002384:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002386:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800238e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002396:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800239a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800239c:	4a07      	ldr	r2, [pc, #28]	; (80023bc <SystemInit+0x48>)
 800239e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023a6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80023a8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80023ae:	608b      	str	r3, [r1, #8]
#endif
}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000ed00 	.word	0xe000ed00
 80023b8:	40023800 	.word	0x40023800
 80023bc:	24003010 	.word	0x24003010

080023c0 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80023c0:	4770      	bx	lr
	...

080023c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023c4:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023c6:	4a0e      	ldr	r2, [pc, #56]	; (8002400 <HAL_InitTick+0x3c>)
 80023c8:	4e0e      	ldr	r6, [pc, #56]	; (8002404 <HAL_InitTick+0x40>)
{
 80023ca:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d0:	7830      	ldrb	r0, [r6, #0]
 80023d2:	fbb3 f3f0 	udiv	r3, r3, r0
 80023d6:	6810      	ldr	r0, [r2, #0]
 80023d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80023dc:	f000 f8a8 	bl	8002530 <HAL_SYSTICK_Config>
 80023e0:	4604      	mov	r4, r0
 80023e2:	b950      	cbnz	r0, 80023fa <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e4:	2d0f      	cmp	r5, #15
 80023e6:	d808      	bhi.n	80023fa <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e8:	4602      	mov	r2, r0
 80023ea:	4629      	mov	r1, r5
 80023ec:	f04f 30ff 	mov.w	r0, #4294967295
 80023f0:	f000 f85e 	bl	80024b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023f4:	6075      	str	r5, [r6, #4]
 80023f6:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80023f8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80023fa:	2001      	movs	r0, #1
 80023fc:	e7fc      	b.n	80023f8 <HAL_InitTick+0x34>
 80023fe:	bf00      	nop
 8002400:	200000c0 	.word	0x200000c0
 8002404:	200000c4 	.word	0x200000c4

08002408 <HAL_Init>:
{
 8002408:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_Init+0x28>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002412:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800241a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800241c:	2003      	movs	r0, #3
 800241e:	f000 f835 	bl	800248c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002422:	200f      	movs	r0, #15
 8002424:	f7ff ffce 	bl	80023c4 <HAL_InitTick>
  HAL_MspInit();
 8002428:	f7ff ffca 	bl	80023c0 <HAL_MspInit>
}
 800242c:	2000      	movs	r0, #0
 800242e:	bd08      	pop	{r3, pc}
 8002430:	40023c00 	.word	0x40023c00

08002434 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002434:	4a03      	ldr	r2, [pc, #12]	; (8002444 <HAL_IncTick+0x10>)
 8002436:	4b04      	ldr	r3, [pc, #16]	; (8002448 <HAL_IncTick+0x14>)
 8002438:	6811      	ldr	r1, [r2, #0]
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	440b      	add	r3, r1
 800243e:	6013      	str	r3, [r2, #0]
}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20004c28 	.word	0x20004c28
 8002448:	200000c4 	.word	0x200000c4

0800244c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800244c:	4b01      	ldr	r3, [pc, #4]	; (8002454 <HAL_GetTick+0x8>)
 800244e:	6818      	ldr	r0, [r3, #0]
}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20004c28 	.word	0x20004c28

08002458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002458:	b538      	push	{r3, r4, r5, lr}
 800245a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff fff6 	bl	800244c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002460:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002462:	bf1c      	itt	ne
 8002464:	4b05      	ldrne	r3, [pc, #20]	; (800247c <HAL_Delay+0x24>)
 8002466:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002468:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800246a:	bf18      	it	ne
 800246c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800246e:	f7ff ffed 	bl	800244c <HAL_GetTick>
 8002472:	1b43      	subs	r3, r0, r5
 8002474:	42a3      	cmp	r3, r4
 8002476:	d3fa      	bcc.n	800246e <HAL_Delay+0x16>
  {
  }
}
 8002478:	bd38      	pop	{r3, r4, r5, pc}
 800247a:	bf00      	nop
 800247c:	200000c4 	.word	0x200000c4

08002480 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 8002480:	4b01      	ldr	r3, [pc, #4]	; (8002488 <HAL_GetREVID+0x8>)
 8002482:	6818      	ldr	r0, [r3, #0]
}
 8002484:	0c00      	lsrs	r0, r0, #16
 8002486:	4770      	bx	lr
 8002488:	e0042000 	.word	0xe0042000

0800248c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800248c:	4907      	ldr	r1, [pc, #28]	; (80024ac <HAL_NVIC_SetPriorityGrouping+0x20>)
 800248e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002490:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002494:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002496:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002498:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800249e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80024a8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b0:	4b16      	ldr	r3, [pc, #88]	; (800250c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024b2:	b530      	push	{r4, r5, lr}
 80024b4:	68dc      	ldr	r4, [r3, #12]
 80024b6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ba:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024be:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	2d04      	cmp	r5, #4
 80024c2:	bf28      	it	cs
 80024c4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024cc:	bf8c      	ite	hi
 80024ce:	3c03      	subhi	r4, #3
 80024d0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d2:	fa03 f505 	lsl.w	r5, r3, r5
 80024d6:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024da:	40a3      	lsls	r3, r4
 80024dc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80024e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e8:	bfac      	ite	ge
 80024ea:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ee:	4a08      	ldrlt	r2, [pc, #32]	; (8002510 <HAL_NVIC_SetPriority+0x60>)
 80024f0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80024f4:	bfb8      	it	lt
 80024f6:	f000 000f 	andlt.w	r0, r0, #15
 80024fa:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fc:	bfaa      	itet	ge
 80024fe:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002502:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002504:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002508:	bd30      	pop	{r4, r5, pc}
 800250a:	bf00      	nop
 800250c:	e000ed00 	.word	0xe000ed00
 8002510:	e000ed14 	.word	0xe000ed14

08002514 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002514:	2800      	cmp	r0, #0
 8002516:	db08      	blt.n	800252a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002518:	0942      	lsrs	r2, r0, #5
 800251a:	2301      	movs	r3, #1
 800251c:	f000 001f 	and.w	r0, r0, #31
 8002520:	fa03 f000 	lsl.w	r0, r3, r0
 8002524:	4b01      	ldr	r3, [pc, #4]	; (800252c <HAL_NVIC_EnableIRQ+0x18>)
 8002526:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800252a:	4770      	bx	lr
 800252c:	e000e100 	.word	0xe000e100

08002530 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002530:	3801      	subs	r0, #1
 8002532:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002536:	d20a      	bcs.n	800254e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253a:	4a07      	ldr	r2, [pc, #28]	; (8002558 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800253c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253e:	21f0      	movs	r1, #240	; 0xf0
 8002540:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002544:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002546:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002548:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800254c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800254e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	e000e010 	.word	0xe000e010
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800255c:	6803      	ldr	r3, [r0, #0]
{
 800255e:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002560:	4c08      	ldr	r4, [pc, #32]	; (8002584 <DMA_CalcBaseAndBitshift+0x28>)
{
 8002562:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002564:	b2d9      	uxtb	r1, r3
 8002566:	3910      	subs	r1, #16
 8002568:	2018      	movs	r0, #24
 800256a:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800256e:	5c20      	ldrb	r0, [r4, r0]
 8002570:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002572:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8002576:	f020 0003 	bic.w	r0, r0, #3
 800257a:	295f      	cmp	r1, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800257c:	bf88      	it	hi
 800257e:	3004      	addhi	r0, #4
 8002580:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002582:	bd10      	pop	{r4, pc}
 8002584:	0800bd60 	.word	0x0800bd60

08002588 <HAL_DMA_Init>:
{
 8002588:	b570      	push	{r4, r5, r6, lr}
 800258a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800258c:	f7ff ff5e 	bl	800244c <HAL_GetTick>
 8002590:	4605      	mov	r5, r0
  if(hdma == NULL)
 8002592:	2c00      	cmp	r4, #0
 8002594:	d073      	beq.n	800267e <HAL_DMA_Init+0xf6>
  __HAL_UNLOCK(hdma);
 8002596:	2300      	movs	r3, #0
 8002598:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800259c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800259e:	2302      	movs	r3, #2
 80025a0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80025a4:	6813      	ldr	r3, [r2, #0]
 80025a6:	f023 0301 	bic.w	r3, r3, #1
 80025aa:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ac:	6821      	ldr	r1, [r4, #0]
 80025ae:	680b      	ldr	r3, [r1, #0]
 80025b0:	07d8      	lsls	r0, r3, #31
 80025b2:	d42f      	bmi.n	8002614 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 80025b4:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025b6:	4d33      	ldr	r5, [pc, #204]	; (8002684 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b8:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025ba:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025bc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	68e2      	ldr	r2, [r4, #12]
 80025c4:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025c6:	6922      	ldr	r2, [r4, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	6962      	ldr	r2, [r4, #20]
 80025cc:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ce:	69e2      	ldr	r2, [r4, #28]
 80025d0:	4303      	orrs	r3, r0
 80025d2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80025d4:	6a22      	ldr	r2, [r4, #32]
 80025d6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025da:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025dc:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025e0:	bf02      	ittt	eq
 80025e2:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80025e6:	4335      	orreq	r5, r6
 80025e8:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80025ea:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80025ec:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025ee:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025f0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80025f4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025f8:	d133      	bne.n	8002662 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 80025fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025fc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80025fe:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002600:	b37d      	cbz	r5, 8002662 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002602:	b990      	cbnz	r0, 800262a <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8002604:	2a01      	cmp	r2, #1
 8002606:	d021      	beq.n	800264c <HAL_DMA_Init+0xc4>
 8002608:	f032 0202 	bics.w	r2, r2, #2
 800260c:	d129      	bne.n	8002662 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800260e:	01ea      	lsls	r2, r5, #7
 8002610:	d527      	bpl.n	8002662 <HAL_DMA_Init+0xda>
 8002612:	e01e      	b.n	8002652 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002614:	f7ff ff1a 	bl	800244c <HAL_GetTick>
 8002618:	1b40      	subs	r0, r0, r5
 800261a:	2805      	cmp	r0, #5
 800261c:	d9c6      	bls.n	80025ac <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800261e:	2320      	movs	r3, #32
 8002620:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002622:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8002624:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002628:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800262a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800262e:	d114      	bne.n	800265a <HAL_DMA_Init+0xd2>
    switch (tmp)
 8002630:	2a03      	cmp	r2, #3
 8002632:	d816      	bhi.n	8002662 <HAL_DMA_Init+0xda>
 8002634:	a001      	add	r0, pc, #4	; (adr r0, 800263c <HAL_DMA_Init+0xb4>)
 8002636:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800263a:	bf00      	nop
 800263c:	08002653 	.word	0x08002653
 8002640:	0800260f 	.word	0x0800260f
 8002644:	08002653 	.word	0x08002653
 8002648:	0800264d 	.word	0x0800264d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800264c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002650:	d107      	bne.n	8002662 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002652:	2340      	movs	r3, #64	; 0x40
 8002654:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002656:	2001      	movs	r0, #1
 8002658:	e7e4      	b.n	8002624 <HAL_DMA_Init+0x9c>
    switch (tmp)
 800265a:	2a02      	cmp	r2, #2
 800265c:	d9f9      	bls.n	8002652 <HAL_DMA_Init+0xca>
 800265e:	2a03      	cmp	r2, #3
 8002660:	d0d5      	beq.n	800260e <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8002662:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002664:	4620      	mov	r0, r4
 8002666:	f7ff ff79 	bl	800255c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800266a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800266c:	233f      	movs	r3, #63	; 0x3f
 800266e:	4093      	lsls	r3, r2
 8002670:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002672:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002674:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002676:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002678:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800267c:	e7d4      	b.n	8002628 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 800267e:	2001      	movs	r0, #1
 8002680:	e7d2      	b.n	8002628 <HAL_DMA_Init+0xa0>
 8002682:	bf00      	nop
 8002684:	f010803f 	.word	0xf010803f

08002688 <HAL_DMA_DeInit>:
{
 8002688:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 800268a:	4605      	mov	r5, r0
 800268c:	b320      	cbz	r0, 80026d8 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800268e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002692:	2b02      	cmp	r3, #2
 8002694:	b2dc      	uxtb	r4, r3
 8002696:	d01d      	beq.n	80026d4 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8002698:	6803      	ldr	r3, [r0, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 80026a0:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80026a2:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 80026a4:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80026a6:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80026a8:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80026aa:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80026ac:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80026ae:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 80026b0:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026b2:	f7ff ff53 	bl	800255c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80026b8:	233f      	movs	r3, #63	; 0x3f
 80026ba:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 80026bc:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80026c0:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 80026c4:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ca:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80026cc:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80026d0:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 80026d4:	4620      	mov	r0, r4
 80026d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80026d8:	2401      	movs	r4, #1
 80026da:	e7fb      	b.n	80026d4 <HAL_DMA_DeInit+0x4c>

080026dc <HAL_DMA_Start_IT>:
{
 80026dc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80026de:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026e2:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80026e4:	2c01      	cmp	r4, #1
 80026e6:	d031      	beq.n	800274c <HAL_DMA_Start_IT+0x70>
 80026e8:	2401      	movs	r4, #1
 80026ea:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80026ee:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80026f2:	2c01      	cmp	r4, #1
 80026f4:	f04f 0500 	mov.w	r5, #0
 80026f8:	f04f 0402 	mov.w	r4, #2
 80026fc:	d124      	bne.n	8002748 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80026fe:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002702:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002704:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002706:	6825      	ldr	r5, [r4, #0]
 8002708:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 800270c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800270e:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002710:	6883      	ldr	r3, [r0, #8]
 8002712:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8002714:	bf0e      	itee	eq
 8002716:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8002718:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800271a:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800271c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800271e:	bf08      	it	eq
 8002720:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002722:	233f      	movs	r3, #63	; 0x3f
 8002724:	4093      	lsls	r3, r2
 8002726:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	f043 0316 	orr.w	r3, r3, #22
 800272e:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002730:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002732:	b11b      	cbz	r3, 800273c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	f043 0308 	orr.w	r3, r3, #8
 800273a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800273c:	6823      	ldr	r3, [r4, #0]
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002744:	2000      	movs	r0, #0
}
 8002746:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8002748:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800274c:	2002      	movs	r0, #2
 800274e:	e7fa      	b.n	8002746 <HAL_DMA_Start_IT+0x6a>

08002750 <HAL_DMA_Abort>:
{
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002754:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8002756:	f7ff fe79 	bl	800244c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800275a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800275e:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8002760:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002762:	d006      	beq.n	8002772 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002768:	2300      	movs	r3, #0
 800276a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800276e:	2001      	movs	r0, #1
}
 8002770:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	f022 0216 	bic.w	r2, r2, #22
 800277a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002782:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002784:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002786:	b90a      	cbnz	r2, 800278c <HAL_DMA_Abort+0x3c>
 8002788:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800278a:	b11a      	cbz	r2, 8002794 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	f022 0208 	bic.w	r2, r2, #8
 8002792:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	f022 0201 	bic.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f013 0301 	ands.w	r3, r3, #1
 80027a4:	d10a      	bne.n	80027bc <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80027a8:	223f      	movs	r2, #63	; 0x3f
 80027aa:	408a      	lsls	r2, r1
 80027ac:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80027ae:	2201      	movs	r2, #1
    __HAL_UNLOCK(hdma);
 80027b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 80027b4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 80027b8:	4618      	mov	r0, r3
 80027ba:	e7d9      	b.n	8002770 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027bc:	f7ff fe46 	bl	800244c <HAL_GetTick>
 80027c0:	1b40      	subs	r0, r0, r5
 80027c2:	2805      	cmp	r0, #5
 80027c4:	d9ea      	bls.n	800279c <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027c6:	2320      	movs	r3, #32
 80027c8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ca:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 80027cc:	2300      	movs	r3, #0
 80027ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027d2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 80027d6:	e7cb      	b.n	8002770 <HAL_DMA_Abort+0x20>

080027d8 <HAL_DMA_IRQHandler>:
{
 80027d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027de:	4b5c      	ldr	r3, [pc, #368]	; (8002950 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027e0:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80027e2:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80027e6:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e8:	2208      	movs	r2, #8
 80027ea:	409a      	lsls	r2, r3
 80027ec:	4232      	tst	r2, r6
{
 80027ee:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027f0:	d00c      	beq.n	800280c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027f2:	6801      	ldr	r1, [r0, #0]
 80027f4:	6808      	ldr	r0, [r1, #0]
 80027f6:	0740      	lsls	r0, r0, #29
 80027f8:	d508      	bpl.n	800280c <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027fa:	6808      	ldr	r0, [r1, #0]
 80027fc:	f020 0004 	bic.w	r0, r0, #4
 8002800:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002802:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002804:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800280c:	2201      	movs	r2, #1
 800280e:	409a      	lsls	r2, r3
 8002810:	4232      	tst	r2, r6
 8002812:	d008      	beq.n	8002826 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002814:	6821      	ldr	r1, [r4, #0]
 8002816:	6949      	ldr	r1, [r1, #20]
 8002818:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800281a:	bf41      	itttt	mi
 800281c:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800281e:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8002820:	f042 0202 	orrmi.w	r2, r2, #2
 8002824:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002826:	2204      	movs	r2, #4
 8002828:	409a      	lsls	r2, r3
 800282a:	4232      	tst	r2, r6
 800282c:	d008      	beq.n	8002840 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800282e:	6821      	ldr	r1, [r4, #0]
 8002830:	6809      	ldr	r1, [r1, #0]
 8002832:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002834:	bf41      	itttt	mi
 8002836:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002838:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800283a:	f042 0204 	orrmi.w	r2, r2, #4
 800283e:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002840:	2210      	movs	r2, #16
 8002842:	409a      	lsls	r2, r3
 8002844:	4232      	tst	r2, r6
 8002846:	d010      	beq.n	800286a <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	6819      	ldr	r1, [r3, #0]
 800284c:	0709      	lsls	r1, r1, #28
 800284e:	d50c      	bpl.n	800286a <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002850:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	0350      	lsls	r0, r2, #13
 8002856:	d537      	bpl.n	80028c8 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	0319      	lsls	r1, r3, #12
 800285c:	d401      	bmi.n	8002862 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800285e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002860:	e000      	b.n	8002864 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002862:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8002864:	b10b      	cbz	r3, 800286a <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8002866:	4620      	mov	r0, r4
 8002868:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800286a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800286c:	2220      	movs	r2, #32
 800286e:	408a      	lsls	r2, r1
 8002870:	4232      	tst	r2, r6
 8002872:	d03a      	beq.n	80028ea <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002874:	6823      	ldr	r3, [r4, #0]
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	06c6      	lsls	r6, r0, #27
 800287a:	d536      	bpl.n	80028ea <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800287c:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800287e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002882:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002884:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002886:	d127      	bne.n	80028d8 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002888:	f022 0216 	bic.w	r2, r2, #22
 800288c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002894:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002896:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002898:	b90a      	cbnz	r2, 800289e <HAL_DMA_IRQHandler+0xc6>
 800289a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800289c:	b11a      	cbz	r2, 80028a6 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	f022 0208 	bic.w	r2, r2, #8
 80028a4:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a6:	233f      	movs	r3, #63	; 0x3f
 80028a8:	408b      	lsls	r3, r1
 80028aa:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 80028ac:	2300      	movs	r3, #0
 80028ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80028b8:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d045      	beq.n	800294a <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 80028be:	4620      	mov	r0, r4
}
 80028c0:	b003      	add	sp, #12
 80028c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80028c6:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028cc:	bf5e      	ittt	pl
 80028ce:	681a      	ldrpl	r2, [r3, #0]
 80028d0:	f022 0208 	bicpl.w	r2, r2, #8
 80028d4:	601a      	strpl	r2, [r3, #0]
 80028d6:	e7c2      	b.n	800285e <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028d8:	0350      	lsls	r0, r2, #13
 80028da:	d527      	bpl.n	800292c <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	0319      	lsls	r1, r3, #12
 80028e0:	d431      	bmi.n	8002946 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80028e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80028e4:	b10b      	cbz	r3, 80028ea <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80028e6:	4620      	mov	r0, r4
 80028e8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028ec:	b36b      	cbz	r3, 800294a <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028f0:	07da      	lsls	r2, r3, #31
 80028f2:	d519      	bpl.n	8002928 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 80028f4:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028f6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80028fa:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 80028fe:	2305      	movs	r3, #5
 8002900:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002904:	6813      	ldr	r3, [r2, #0]
 8002906:	f023 0301 	bic.w	r3, r3, #1
 800290a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800290c:	9b01      	ldr	r3, [sp, #4]
 800290e:	3301      	adds	r3, #1
 8002910:	42bb      	cmp	r3, r7
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	d802      	bhi.n	800291c <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002916:	6813      	ldr	r3, [r2, #0]
 8002918:	07db      	lsls	r3, r3, #31
 800291a:	d4f7      	bmi.n	800290c <HAL_DMA_IRQHandler+0x134>
      __HAL_UNLOCK(hdma);
 800291c:	2300      	movs	r3, #0
 800291e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002922:	2301      	movs	r3, #1
 8002924:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002928:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800292a:	e7c6      	b.n	80028ba <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8002932:	d108      	bne.n	8002946 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	f021 0110 	bic.w	r1, r1, #16
 800293a:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800293c:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 800293e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002942:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002946:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002948:	e7cc      	b.n	80028e4 <HAL_DMA_IRQHandler+0x10c>
}
 800294a:	b003      	add	sp, #12
 800294c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800294e:	bf00      	nop
 8002950:	200000c0 	.word	0x200000c0

08002954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002958:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8002b04 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800295c:	4a67      	ldr	r2, [pc, #412]	; (8002afc <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295e:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002960:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002962:	2401      	movs	r4, #1
 8002964:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002966:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800296a:	43ac      	bics	r4, r5
 800296c:	f040 80b0 	bne.w	8002ad0 <HAL_GPIO_Init+0x17c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002970:	684d      	ldr	r5, [r1, #4]
 8002972:	f005 0403 	and.w	r4, r5, #3
 8002976:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800297a:	2603      	movs	r6, #3
 800297c:	1e67      	subs	r7, r4, #1
 800297e:	fa06 f608 	lsl.w	r6, r6, r8
 8002982:	2f01      	cmp	r7, #1
 8002984:	ea6f 0606 	mvn.w	r6, r6
 8002988:	d834      	bhi.n	80029f4 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800298a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800298c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002990:	68cf      	ldr	r7, [r1, #12]
 8002992:	fa07 f708 	lsl.w	r7, r7, r8
 8002996:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800299a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800299c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800299e:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80029a2:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80029a6:	409f      	lsls	r7, r3
 80029a8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80029ac:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80029ae:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029b0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029b4:	688f      	ldr	r7, [r1, #8]
 80029b6:	fa07 f708 	lsl.w	r7, r7, r8
 80029ba:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029be:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80029c0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c2:	d119      	bne.n	80029f8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80029c4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80029c8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029cc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80029d0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029d4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80029d8:	f04f 0e0f 	mov.w	lr, #15
 80029dc:	fa0e fe0b 	lsl.w	lr, lr, fp
 80029e0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029e4:	690f      	ldr	r7, [r1, #16]
 80029e6:	fa07 f70b 	lsl.w	r7, r7, fp
 80029ea:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80029ee:	f8ca 7020 	str.w	r7, [sl, #32]
 80029f2:	e001      	b.n	80029f8 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f4:	2c03      	cmp	r4, #3
 80029f6:	d1da      	bne.n	80029ae <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80029f8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029fa:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029fe:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a00:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a02:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8002a04:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a06:	d563      	bpl.n	8002ad0 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a08:	f04f 0a00 	mov.w	sl, #0
 8002a0c:	f8cd a004 	str.w	sl, [sp, #4]
 8002a10:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a14:	4c3a      	ldr	r4, [pc, #232]	; (8002b00 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a16:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002a1a:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002a1e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002a22:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002a26:	9601      	str	r6, [sp, #4]
 8002a28:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002a2a:	f023 0603 	bic.w	r6, r3, #3
 8002a2e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002a32:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a36:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002a3a:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a3e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002a42:	270f      	movs	r7, #15
 8002a44:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a48:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a4a:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a4e:	d046      	beq.n	8002ade <HAL_GPIO_Init+0x18a>
 8002a50:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a54:	42a0      	cmp	r0, r4
 8002a56:	d044      	beq.n	8002ae2 <HAL_GPIO_Init+0x18e>
 8002a58:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a5c:	42a0      	cmp	r0, r4
 8002a5e:	d042      	beq.n	8002ae6 <HAL_GPIO_Init+0x192>
 8002a60:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a64:	42a0      	cmp	r0, r4
 8002a66:	d040      	beq.n	8002aea <HAL_GPIO_Init+0x196>
 8002a68:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a6c:	42a0      	cmp	r0, r4
 8002a6e:	d03e      	beq.n	8002aee <HAL_GPIO_Init+0x19a>
 8002a70:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a74:	42a0      	cmp	r0, r4
 8002a76:	d03c      	beq.n	8002af2 <HAL_GPIO_Init+0x19e>
 8002a78:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a7c:	42a0      	cmp	r0, r4
 8002a7e:	d03a      	beq.n	8002af6 <HAL_GPIO_Init+0x1a2>
 8002a80:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002a84:	42a0      	cmp	r0, r4
 8002a86:	bf0c      	ite	eq
 8002a88:	2407      	moveq	r4, #7
 8002a8a:	2408      	movne	r4, #8
 8002a8c:	fa04 f40e 	lsl.w	r4, r4, lr
 8002a90:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a92:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8002a94:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002a96:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a9a:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8002a9c:	bf54      	ite	pl
 8002a9e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002aa0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002aa4:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8002aa6:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aa8:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8002aaa:	bf54      	ite	pl
 8002aac:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002aae:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8002ab2:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ab4:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ab6:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8002ab8:	bf54      	ite	pl
 8002aba:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002abc:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8002ac0:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8002ac2:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ac4:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8002ac6:	bf54      	ite	pl
 8002ac8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002aca:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8002ace:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	f47f af44 	bne.w	8002960 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8002ad8:	b003      	add	sp, #12
 8002ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ade:	4654      	mov	r4, sl
 8002ae0:	e7d4      	b.n	8002a8c <HAL_GPIO_Init+0x138>
 8002ae2:	2401      	movs	r4, #1
 8002ae4:	e7d2      	b.n	8002a8c <HAL_GPIO_Init+0x138>
 8002ae6:	2402      	movs	r4, #2
 8002ae8:	e7d0      	b.n	8002a8c <HAL_GPIO_Init+0x138>
 8002aea:	2403      	movs	r4, #3
 8002aec:	e7ce      	b.n	8002a8c <HAL_GPIO_Init+0x138>
 8002aee:	2404      	movs	r4, #4
 8002af0:	e7cc      	b.n	8002a8c <HAL_GPIO_Init+0x138>
 8002af2:	2405      	movs	r4, #5
 8002af4:	e7ca      	b.n	8002a8c <HAL_GPIO_Init+0x138>
 8002af6:	2406      	movs	r4, #6
 8002af8:	e7c8      	b.n	8002a8c <HAL_GPIO_Init+0x138>
 8002afa:	bf00      	nop
 8002afc:	40013c00 	.word	0x40013c00
 8002b00:	40020000 	.word	0x40020000
 8002b04:	40023800 	.word	0x40023800

08002b08 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b08:	b10a      	cbz	r2, 8002b0e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b0a:	6181      	str	r1, [r0, #24]
  }
}
 8002b0c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b0e:	0409      	lsls	r1, r1, #16
 8002b10:	e7fb      	b.n	8002b0a <HAL_GPIO_WritePin+0x2>

08002b12 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b12:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b14:	ea01 0203 	and.w	r2, r1, r3
 8002b18:	ea21 0103 	bic.w	r1, r1, r3
 8002b1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002b20:	6181      	str	r1, [r0, #24]
}
 8002b22:	4770      	bx	lr

08002b24 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b24:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002b26:	6951      	ldr	r1, [r2, #20]
 8002b28:	4201      	tst	r1, r0
{
 8002b2a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b2c:	d002      	beq.n	8002b34 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b2e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b30:	f7fd fe76 	bl	8000820 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b34:	bd08      	pop	{r3, pc}
 8002b36:	bf00      	nop
 8002b38:	40013c00 	.word	0x40013c00

08002b3c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b40:	4605      	mov	r5, r0
 8002b42:	b085      	sub	sp, #20
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002b44:	f895 42f8 	ldrb.w	r4, [r5, #760]	; 0x2f8
{
 8002b48:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
 8002b4c:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
 8002b50:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8002b54:	2c01      	cmp	r4, #1
 8002b56:	d025      	beq.n	8002ba4 <HAL_HCD_HC_Init+0x68>
 8002b58:	2401      	movs	r4, #1
 8002b5a:	f885 42f8 	strb.w	r4, [r5, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002b5e:	242c      	movs	r4, #44	; 0x2c
 8002b60:	fb04 5401 	mla	r4, r4, r1, r5
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
 8002b64:	09d0      	lsrs	r0, r2, #7
  hhcd->hc[ch_num].do_ping = 0U;
 8002b66:	2700      	movs	r7, #0
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002b68:	f002 067f 	and.w	r6, r2, #127	; 0x7f
  hhcd->hc[ch_num].do_ping = 0U;
 8002b6c:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002b70:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b74:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8002b78:	f884 803f 	strb.w	r8, [r4, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002b7c:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
 8002b80:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8002b84:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8002b88:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 8002b8c:	6828      	ldr	r0, [r5, #0]
 8002b8e:	f8cd e000 	str.w	lr, [sp]
 8002b92:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8002b96:	f002 ff81 	bl	8005a9c <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002b9a:	f885 72f8 	strb.w	r7, [r5, #760]	; 0x2f8

  return status;
}
 8002b9e:	b005      	add	sp, #20
 8002ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hhcd);
 8002ba4:	2002      	movs	r0, #2
 8002ba6:	e7fa      	b.n	8002b9e <HAL_HCD_HC_Init+0x62>

08002ba8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ba8:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8002baa:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002bae:	2b01      	cmp	r3, #1
{
 8002bb0:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002bb2:	d009      	beq.n	8002bc8 <HAL_HCD_HC_Halt+0x20>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bba:	6800      	ldr	r0, [r0, #0]
 8002bbc:	f002 ffed 	bl	8005b9a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8

  return status;
}
 8002bc6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002bc8:	2002      	movs	r0, #2
 8002bca:	e7fc      	b.n	8002bc6 <HAL_HCD_HC_Halt+0x1e>

08002bcc <HAL_HCD_Init>:
{
 8002bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8002bd0:	4605      	mov	r5, r0
{
 8002bd2:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	d041      	beq.n	8002c5c <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002bd8:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
  USBx = hhcd->Instance;
 8002bdc:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002bde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002be2:	b91b      	cbnz	r3, 8002bec <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 8002be4:	f880 22f8 	strb.w	r2, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 8002be8:	f7fd fe7e 	bl	80008e8 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8002bec:	2303      	movs	r3, #3
 8002bee:	f885 32f9 	strb.w	r3, [r5, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bf2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 8002bf4:	462c      	mov	r4, r5
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bf6:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8002bfa:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8002bfe:	bf08      	it	eq
 8002c00:	612b      	streq	r3, [r5, #16]
  __HAL_HCD_DISABLE(hhcd);
 8002c02:	f002 fe07 	bl	8005814 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002c06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c08:	466e      	mov	r6, sp
 8002c0a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c0e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002c10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c14:	e886 0003 	stmia.w	r6, {r0, r1}
 8002c18:	f105 0804 	add.w	r8, r5, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002c1c:	462f      	mov	r7, r5
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002c1e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8002c22:	6828      	ldr	r0, [r5, #0]
 8002c24:	f002 fdb0 	bl	8005788 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002c28:	f857 0b10 	ldr.w	r0, [r7], #16
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	f002 fdf7 	bl	8005820 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002c32:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002c34:	466e      	mov	r6, sp
 8002c36:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002c38:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002c3a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002c3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c40:	e886 0003 	stmia.w	r6, {r0, r1}
 8002c44:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8002c48:	6828      	ldr	r0, [r5, #0]
 8002c4a:	f002 fea7 	bl	800599c <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f885 32f9 	strb.w	r3, [r5, #761]	; 0x2f9
  return HAL_OK;
 8002c54:	2000      	movs	r0, #0
}
 8002c56:	b00a      	add	sp, #40	; 0x28
 8002c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	e7fa      	b.n	8002c56 <HAL_HCD_Init+0x8a>

08002c60 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002c60:	b4f0      	push	{r4, r5, r6, r7}
  hhcd->hc[ch_num].ep_is_in = direction;
 8002c62:	262c      	movs	r6, #44	; 0x2c
 8002c64:	fb06 0601 	mla	r6, r6, r1, r0
{
 8002c68:	f89d 7010 	ldrb.w	r7, [sp, #16]
 8002c6c:	9d05      	ldr	r5, [sp, #20]
 8002c6e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8002c72:	f89d c01c 	ldrb.w	ip, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002c76:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002c7a:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f

  if (token == 0U)
 8002c7e:	b97f      	cbnz	r7, 8002ca0 <HAL_HCD_HC_SubmitRequest+0x40>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002c80:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002c82:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002c84:	f886 7042 	strb.w	r7, [r6, #66]	; 0x42
    hhcd->hc[ch_num].do_ping = do_ping;
 8002c88:	f886 c03d 	strb.w	ip, [r6, #61]	; 0x3d
  switch (ep_type)
 8002c8c:	d042      	beq.n	8002d14 <HAL_HCD_HC_SubmitRequest+0xb4>
 8002c8e:	42bb      	cmp	r3, r7
 8002c90:	d040      	beq.n	8002d14 <HAL_HCD_HC_SubmitRequest+0xb4>
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d12a      	bne.n	8002cec <HAL_HCD_HC_SubmitRequest+0x8c>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c96:	232c      	movs	r3, #44	; 0x2c
 8002c98:	fb03 0301 	mla	r3, r3, r1, r0
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	e023      	b.n	8002ce8 <HAL_HCD_HC_SubmitRequest+0x88>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ca0:	f04f 0c02 	mov.w	ip, #2
 8002ca4:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch (ep_type)
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d81f      	bhi.n	8002cec <HAL_HCD_HC_SubmitRequest+0x8c>
 8002cac:	a601      	add	r6, pc, #4	; (adr r6, 8002cb4 <HAL_HCD_HC_SubmitRequest+0x54>)
 8002cae:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 8002cb2:	bf00      	nop
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002c97 	.word	0x08002c97
 8002cbc:	08002d15 	.word	0x08002d15
 8002cc0:	08002d15 	.word	0x08002d15
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002cc4:	2f01      	cmp	r7, #1
 8002cc6:	d111      	bne.n	8002cec <HAL_HCD_HC_SubmitRequest+0x8c>
 8002cc8:	b982      	cbnz	r2, 8002cec <HAL_HCD_HC_SubmitRequest+0x8c>
        if (length == 0U)
 8002cca:	232c      	movs	r3, #44	; 0x2c
          hhcd->hc[ch_num].toggle_out = 1U;
 8002ccc:	fb03 0301 	mla	r3, r3, r1, r0
        if (length == 0U)
 8002cd0:	b934      	cbnz	r4, 8002ce0 <HAL_HCD_HC_SubmitRequest+0x80>
          hhcd->hc[ch_num].toggle_out = 1U;
 8002cd2:	f883 7055 	strb.w	r7, [r3, #85]	; 0x55
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cd6:	232c      	movs	r3, #44	; 0x2c
 8002cd8:	fb03 0301 	mla	r3, r3, r1, r0
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cdc:	2202      	movs	r2, #2
 8002cde:	e003      	b.n	8002ce8 <HAL_HCD_HC_SubmitRequest+0x88>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ce0:	f893 6055 	ldrb.w	r6, [r3, #85]	; 0x55
 8002ce4:	2e00      	cmp	r6, #0
 8002ce6:	d1f6      	bne.n	8002cd6 <HAL_HCD_HC_SubmitRequest+0x76>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002cec:	262c      	movs	r6, #44	; 0x2c
 8002cee:	fb06 0301 	mla	r3, r6, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002cf2:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 8002cf4:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002cf8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
  hhcd->hc[ch_num].state = HC_IDLE;
 8002cfc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002d00:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002d02:	645d      	str	r5, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8002d04:	64dc      	str	r4, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].xfer_count = 0U;
 8002d06:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002d08:	bcf0      	pop	{r4, r5, r6, r7}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002d0a:	7c02      	ldrb	r2, [r0, #16]
 8002d0c:	6800      	ldr	r0, [r0, #0]
 8002d0e:	3138      	adds	r1, #56	; 0x38
 8002d10:	f002 bfb4 	b.w	8005c7c <USB_HC_StartXfer>
      if (direction == 0U)
 8002d14:	232c      	movs	r3, #44	; 0x2c
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d16:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8002d1a:	b922      	cbnz	r2, 8002d26 <HAL_HCD_HC_SubmitRequest+0xc6>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d1c:	f893 6055 	ldrb.w	r6, [r3, #85]	; 0x55
 8002d20:	2e00      	cmp	r6, #0
 8002d22:	d1db      	bne.n	8002cdc <HAL_HCD_HC_SubmitRequest+0x7c>
 8002d24:	e7e0      	b.n	8002ce8 <HAL_HCD_HC_SubmitRequest+0x88>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d26:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8002d2a:	2a00      	cmp	r2, #0
 8002d2c:	d1d6      	bne.n	8002cdc <HAL_HCD_HC_SubmitRequest+0x7c>
 8002d2e:	e7db      	b.n	8002ce8 <HAL_HCD_HC_SubmitRequest+0x88>

08002d30 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d34:	f8d0 a000 	ldr.w	sl, [r0]
{
 8002d38:	b085      	sub	sp, #20
 8002d3a:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	f002 fdce 	bl	80058de <USB_GetMode>
 8002d42:	2801      	cmp	r0, #1
 8002d44:	f040 80ef 	bne.w	8002f26 <HAL_HCD_IRQHandler+0x1f6>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002d48:	6828      	ldr	r0, [r5, #0]
 8002d4a:	f002 fdc4 	bl	80058d6 <USB_ReadInterrupts>
 8002d4e:	2800      	cmp	r0, #0
 8002d50:	f000 80e9 	beq.w	8002f26 <HAL_HCD_IRQHandler+0x1f6>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d54:	6828      	ldr	r0, [r5, #0]
 8002d56:	f002 fdbe 	bl	80058d6 <USB_ReadInterrupts>
 8002d5a:	0281      	lsls	r1, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d5c:	bf48      	it	mi
 8002d5e:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d60:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d62:	bf44      	itt	mi
 8002d64:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8002d68:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d6a:	f002 fdb4 	bl	80058d6 <USB_ReadInterrupts>
 8002d6e:	02c2      	lsls	r2, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d70:	bf48      	it	mi
 8002d72:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002d74:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d76:	bf44      	itt	mi
 8002d78:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8002d7c:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002d7e:	f002 fdaa 	bl	80058d6 <USB_ReadInterrupts>
 8002d82:	0143      	lsls	r3, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002d84:	bf48      	it	mi
 8002d86:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002d88:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002d8a:	bf44      	itt	mi
 8002d8c:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 8002d90:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002d92:	f002 fda0 	bl	80058d6 <USB_ReadInterrupts>
 8002d96:	0787      	lsls	r7, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002d98:	bf48      	it	mi
 8002d9a:	682b      	ldrmi	r3, [r5, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002d9c:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002d9e:	bf44      	itt	mi
 8002da0:	2202      	movmi	r2, #2
 8002da2:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002da4:	f002 fd97 	bl	80058d6 <USB_ReadInterrupts>
 8002da8:	0086      	lsls	r6, r0, #2
 8002daa:	d50e      	bpl.n	8002dca <HAL_HCD_IRQHandler+0x9a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002dac:	682b      	ldr	r3, [r5, #0]
 8002dae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002db2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002db4:	f8da 3440 	ldr.w	r3, [sl, #1088]	; 0x440
 8002db8:	07dc      	lsls	r4, r3, #31
 8002dba:	d406      	bmi.n	8002dca <HAL_HCD_IRQHandler+0x9a>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002dbc:	4628      	mov	r0, r5
 8002dbe:	f7fd fdff 	bl	80009c0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002dc2:	6828      	ldr	r0, [r5, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	f002 fd8e 	bl	80058e6 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002dca:	6828      	ldr	r0, [r5, #0]
 8002dcc:	f002 fd83 	bl	80058d6 <USB_ReadInterrupts>
 8002dd0:	01c0      	lsls	r0, r0, #7
 8002dd2:	d53d      	bpl.n	8002e50 <HAL_HCD_IRQHandler+0x120>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dd4:	682c      	ldr	r4, [r5, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002dd6:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8002dda:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 8002ddc:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8002de0:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002de2:	9b03      	ldr	r3, [sp, #12]
 8002de4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002de8:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002dea:	9b02      	ldr	r3, [sp, #8]
 8002dec:	0799      	lsls	r1, r3, #30
 8002dee:	d509      	bpl.n	8002e04 <HAL_HCD_IRQHandler+0xd4>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002df0:	9b02      	ldr	r3, [sp, #8]
 8002df2:	07da      	lsls	r2, r3, #31
 8002df4:	d502      	bpl.n	8002dfc <HAL_HCD_IRQHandler+0xcc>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002df6:	4628      	mov	r0, r5
 8002df8:	f7fd fdde 	bl	80009b8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002dfc:	9b03      	ldr	r3, [sp, #12]
 8002dfe:	f043 0302 	orr.w	r3, r3, #2
 8002e02:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e04:	9b02      	ldr	r3, [sp, #8]
 8002e06:	071b      	lsls	r3, r3, #28
 8002e08:	d518      	bpl.n	8002e3c <HAL_HCD_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e0a:	9b03      	ldr	r3, [sp, #12]
 8002e0c:	f043 0308 	orr.w	r3, r3, #8
 8002e10:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e12:	9b02      	ldr	r3, [sp, #8]
 8002e14:	075f      	lsls	r7, r3, #29
 8002e16:	f140 8091 	bpl.w	8002f3c <HAL_HCD_IRQHandler+0x20c>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e1a:	69a9      	ldr	r1, [r5, #24]
 8002e1c:	2902      	cmp	r1, #2
 8002e1e:	f040 8085 	bne.w	8002f2c <HAL_HCD_IRQHandler+0x1fc>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e22:	9b02      	ldr	r3, [sp, #8]
 8002e24:	6828      	ldr	r0, [r5, #0]
 8002e26:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e2e:	bf18      	it	ne
 8002e30:	2101      	movne	r1, #1
 8002e32:	f002 fd58 	bl	80058e6 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e36:	4628      	mov	r0, r5
 8002e38:	f7fd fdc6 	bl	80009c8 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e3c:	9b02      	ldr	r3, [sp, #8]
 8002e3e:	069e      	lsls	r6, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e40:	bf42      	ittt	mi
 8002e42:	9b03      	ldrmi	r3, [sp, #12]
 8002e44:	f043 0320 	orrmi.w	r3, r3, #32
 8002e48:	9303      	strmi	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e4a:	9b03      	ldr	r3, [sp, #12]
 8002e4c:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002e50:	6828      	ldr	r0, [r5, #0]
 8002e52:	f002 fd40 	bl	80058d6 <USB_ReadInterrupts>
 8002e56:	0704      	lsls	r4, r0, #28
 8002e58:	d505      	bpl.n	8002e66 <HAL_HCD_IRQHandler+0x136>
      HAL_HCD_SOF_Callback(hhcd);
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	f7fd fda8 	bl	80009b0 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002e60:	682b      	ldr	r3, [r5, #0]
 8002e62:	2208      	movs	r2, #8
 8002e64:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002e66:	6828      	ldr	r0, [r5, #0]
 8002e68:	f002 fd35 	bl	80058d6 <USB_ReadInterrupts>
 8002e6c:	06c0      	lsls	r0, r0, #27
 8002e6e:	d542      	bpl.n	8002ef6 <HAL_HCD_IRQHandler+0x1c6>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e70:	682e      	ldr	r6, [r5, #0]
 8002e72:	69b3      	ldr	r3, [r6, #24]
 8002e74:	f023 0310 	bic.w	r3, r3, #16
 8002e78:	61b3      	str	r3, [r6, #24]
  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e7a:	6a37      	ldr	r7, [r6, #32]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e7c:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d133      	bne.n	8002eec <HAL_HCD_IRQHandler+0x1bc>
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e84:	f3c7 180a 	ubfx	r8, r7, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e88:	f1b8 0f00 	cmp.w	r8, #0
 8002e8c:	d02e      	beq.n	8002eec <HAL_HCD_IRQHandler+0x1bc>
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e8e:	f007 070f 	and.w	r7, r7, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e92:	242c      	movs	r4, #44	; 0x2c
 8002e94:	fb04 5407 	mla	r4, r4, r7, r5
 8002e98:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002e9a:	b339      	cbz	r1, 8002eec <HAL_HCD_IRQHandler+0x1bc>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e9c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002e9e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002ea0:	4443      	add	r3, r8
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d84e      	bhi.n	8002f44 <HAL_HCD_IRQHandler+0x214>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ea6:	4642      	mov	r2, r8
 8002ea8:	4630      	mov	r0, r6
 8002eaa:	f002 fd06 	bl	80058ba <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002eae:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002eb0:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002eb4:	4443      	add	r3, r8
 8002eb6:	6463      	str	r3, [r4, #68]	; 0x44
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002eb8:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ebc:	6d23      	ldr	r3, [r4, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ebe:	017a      	lsls	r2, r7, #5
 8002ec0:	eb06 1747 	add.w	r7, r6, r7, lsl #5
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ec4:	4443      	add	r3, r8
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ec6:	4588      	cmp	r8, r1
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ec8:	6523      	str	r3, [r4, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002eca:	693b      	ldr	r3, [r7, #16]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ecc:	d10e      	bne.n	8002eec <HAL_HCD_IRQHandler+0x1bc>
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ece:	f3c3 43c9 	ubfx	r3, r3, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ed2:	b15b      	cbz	r3, 8002eec <HAL_HCD_IRQHandler+0x1bc>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ed4:	5993      	ldr	r3, [r2, r6]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ed6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002eda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ede:	5193      	str	r3, [r2, r6]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ee0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8002ee4:	f083 0301 	eor.w	r3, r3, #1
 8002ee8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002eec:	682a      	ldr	r2, [r5, #0]
 8002eee:	6993      	ldr	r3, [r2, #24]
 8002ef0:	f043 0310 	orr.w	r3, r3, #16
 8002ef4:	6193      	str	r3, [r2, #24]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002ef6:	6828      	ldr	r0, [r5, #0]
 8002ef8:	f002 fced 	bl	80058d6 <USB_ReadInterrupts>
 8002efc:	0181      	lsls	r1, r0, #6
 8002efe:	d512      	bpl.n	8002f26 <HAL_HCD_IRQHandler+0x1f6>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002f00:	6828      	ldr	r0, [r5, #0]
 8002f02:	f002 fe45 	bl	8005b90 <USB_HC_ReadInterrupt>
 8002f06:	f50a 63a0 	add.w	r3, sl, #1280	; 0x500
 8002f0a:	9000      	str	r0, [sp, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f0c:	f04f 0900 	mov.w	r9, #0
 8002f10:	9301      	str	r3, [sp, #4]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f12:	272c      	movs	r7, #44	; 0x2c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f14:	f04f 0802 	mov.w	r8, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f18:	68ab      	ldr	r3, [r5, #8]
 8002f1a:	6828      	ldr	r0, [r5, #0]
 8002f1c:	454b      	cmp	r3, r9
 8002f1e:	d815      	bhi.n	8002f4c <HAL_HCD_IRQHandler+0x21c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002f20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f24:	6143      	str	r3, [r0, #20]
}
 8002f26:	b005      	add	sp, #20
 8002f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f2c:	68eb      	ldr	r3, [r5, #12]
 8002f2e:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 8002f30:	bf04      	itt	eq
 8002f32:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8002f36:	f8c4 2404 	streq.w	r2, [r4, #1028]	; 0x404
 8002f3a:	e77c      	b.n	8002e36 <HAL_HCD_IRQHandler+0x106>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f3c:	4628      	mov	r0, r5
 8002f3e:	f7fd fd47 	bl	80009d0 <HAL_HCD_PortDisabled_Callback>
 8002f42:	e77b      	b.n	8002e3c <HAL_HCD_IRQHandler+0x10c>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f44:	2304      	movs	r3, #4
 8002f46:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8002f4a:	e7cf      	b.n	8002eec <HAL_HCD_IRQHandler+0x1bc>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002f4c:	9a00      	ldr	r2, [sp, #0]
 8002f4e:	f009 030f 	and.w	r3, r9, #15
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	07da      	lsls	r2, r3, #31
 8002f58:	f140 80af 	bpl.w	80030ba <HAL_HCD_IRQHandler+0x38a>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002f5c:	9a01      	ldr	r2, [sp, #4]
 8002f5e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002f62:	fa5f f689 	uxtb.w	r6, r9
 8002f66:	5899      	ldr	r1, [r3, r2]
 8002f68:	f500 6ba0 	add.w	fp, r0, #1280	; 0x500
 8002f6c:	eb0b 1446 	add.w	r4, fp, r6, lsl #5
 8002f70:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8002f74:	ea4f 1a46 	mov.w	sl, r6, lsl #5
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f78:	68a1      	ldr	r1, [r4, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002f7a:	f000 811c 	beq.w	80031b6 <HAL_HCD_IRQHandler+0x486>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f7e:	074b      	lsls	r3, r1, #29
 8002f80:	d513      	bpl.n	8002faa <HAL_HCD_IRQHandler+0x27a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f82:	2104      	movs	r1, #4
 8002f84:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f86:	68e1      	ldr	r1, [r4, #12]
 8002f88:	f041 0102 	orr.w	r1, r1, #2
 8002f8c:	60e1      	str	r1, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f8e:	68a1      	ldr	r1, [r4, #8]
 8002f90:	058b      	lsls	r3, r1, #22
 8002f92:	d55a      	bpl.n	800304a <HAL_HCD_IRQHandler+0x31a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f94:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f96:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f98:	f043 0302 	orr.w	r3, r3, #2
 8002f9c:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f9e:	4631      	mov	r1, r6
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fa0:	f002 fdfb 	bl	8005b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fa8:	e0f8      	b.n	800319c <HAL_HCD_IRQHandler+0x46c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002faa:	68a1      	ldr	r1, [r4, #8]
 8002fac:	05c9      	lsls	r1, r1, #23
 8002fae:	d510      	bpl.n	8002fd2 <HAL_HCD_IRQHandler+0x2a2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fb4:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002fb6:	fb07 5106 	mla	r1, r7, r6, r5
 8002fba:	f04f 0c07 	mov.w	ip, #7
 8002fbe:	f881 c061 	strb.w	ip, [r1, #97]	; 0x61
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fc2:	68e1      	ldr	r1, [r4, #12]
 8002fc4:	f041 0102 	orr.w	r1, r1, #2
 8002fc8:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fca:	4631      	mov	r1, r6
 8002fcc:	f002 fde5 	bl	8005b9a <USB_HC_Halt>
 8002fd0:	e7dd      	b.n	8002f8e <HAL_HCD_IRQHandler+0x25e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002fd2:	68a1      	ldr	r1, [r4, #8]
 8002fd4:	068a      	lsls	r2, r1, #26
 8002fd6:	d502      	bpl.n	8002fde <HAL_HCD_IRQHandler+0x2ae>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002fd8:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002fda:	60a1      	str	r1, [r4, #8]
 8002fdc:	e7d7      	b.n	8002f8e <HAL_HCD_IRQHandler+0x25e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002fde:	68a1      	ldr	r1, [r4, #8]
 8002fe0:	070b      	lsls	r3, r1, #28
 8002fe2:	d50e      	bpl.n	8003002 <HAL_HCD_IRQHandler+0x2d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fe4:	68e1      	ldr	r1, [r4, #12]
 8002fe6:	f041 0102 	orr.w	r1, r1, #2
 8002fea:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002fec:	fb07 5106 	mla	r1, r7, r6, r5
 8002ff0:	f04f 0c05 	mov.w	ip, #5
 8002ff4:	f881 c061 	strb.w	ip, [r1, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ff8:	2110      	movs	r1, #16
 8002ffa:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ffc:	2108      	movs	r1, #8
 8002ffe:	60a1      	str	r1, [r4, #8]
 8003000:	e7e3      	b.n	8002fca <HAL_HCD_IRQHandler+0x29a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003002:	68a1      	ldr	r1, [r4, #8]
 8003004:	0549      	lsls	r1, r1, #21
 8003006:	d50e      	bpl.n	8003026 <HAL_HCD_IRQHandler+0x2f6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003008:	68e1      	ldr	r1, [r4, #12]
 800300a:	f041 0102 	orr.w	r1, r1, #2
 800300e:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003010:	fb07 5106 	mla	r1, r7, r6, r5
 8003014:	f04f 0c08 	mov.w	ip, #8
 8003018:	f881 c061 	strb.w	ip, [r1, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800301c:	2110      	movs	r1, #16
 800301e:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003024:	e7eb      	b.n	8002ffe <HAL_HCD_IRQHandler+0x2ce>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003026:	68a1      	ldr	r1, [r4, #8]
 8003028:	060a      	lsls	r2, r1, #24
 800302a:	d5b0      	bpl.n	8002f8e <HAL_HCD_IRQHandler+0x25e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800302c:	68e1      	ldr	r1, [r4, #12]
 800302e:	f041 0102 	orr.w	r1, r1, #2
 8003032:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003034:	fb07 5106 	mla	r1, r7, r6, r5
 8003038:	f04f 0c06 	mov.w	ip, #6
 800303c:	f881 c061 	strb.w	ip, [r1, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003040:	4631      	mov	r1, r6
 8003042:	f002 fdaa 	bl	8005b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	e7c7      	b.n	8002fda <HAL_HCD_IRQHandler+0x2aa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800304a:	68a1      	ldr	r1, [r4, #8]
 800304c:	07c8      	lsls	r0, r1, #31
 800304e:	d552      	bpl.n	80030f6 <HAL_HCD_IRQHandler+0x3c6>
    if (hhcd->Init.dma_enable != 0U)
 8003050:	6929      	ldr	r1, [r5, #16]
 8003052:	b149      	cbz	r1, 8003068 <HAL_HCD_IRQHandler+0x338>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003054:	fb07 5c06 	mla	ip, r7, r6, r5
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003058:	6920      	ldr	r0, [r4, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800305a:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800305e:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003062:	1a09      	subs	r1, r1, r0
 8003064:	f8cc 1050 	str.w	r1, [ip, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 8003068:	fb07 5106 	mla	r1, r7, r6, r5
 800306c:	2301      	movs	r3, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 800306e:	2000      	movs	r0, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 8003070:	f881 3061 	strb.w	r3, [r1, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003074:	65c8      	str	r0, [r1, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003076:	60a3      	str	r3, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003078:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 800307c:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 8003080:	d11e      	bne.n	80030c0 <HAL_HCD_IRQHandler+0x390>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003082:	68e3      	ldr	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003084:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003086:	f043 0302 	orr.w	r3, r3, #2
 800308a:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800308c:	4631      	mov	r1, r6
 800308e:	f002 fd84 	bl	8005b9a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003092:	2310      	movs	r3, #16
 8003094:	60a3      	str	r3, [r4, #8]
    if (hhcd->Init.dma_enable == 1U)
 8003096:	692b      	ldr	r3, [r5, #16]
 8003098:	2b01      	cmp	r3, #1
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800309a:	fb07 5606 	mla	r6, r7, r6, r5
    if (hhcd->Init.dma_enable == 1U)
 800309e:	d106      	bne.n	80030ae <HAL_HCD_IRQHandler+0x37e>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80030a0:	f8b6 2040 	ldrh.w	r2, [r6, #64]	; 0x40
 80030a4:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80030a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80030aa:	07d9      	lsls	r1, r3, #31
 80030ac:	d505      	bpl.n	80030ba <HAL_HCD_IRQHandler+0x38a>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80030ae:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
 80030b2:	f083 0301 	eor.w	r3, r3, #1
 80030b6:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030ba:	f109 0901 	add.w	r9, r9, #1
 80030be:	e72b      	b.n	8002f18 <HAL_HCD_IRQHandler+0x1e8>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80030c0:	2a03      	cmp	r2, #3
 80030c2:	d10d      	bne.n	80030e0 <HAL_HCD_IRQHandler+0x3b0>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80030c4:	f85a 000b 	ldr.w	r0, [sl, fp]
 80030c8:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 80030cc:	f84a 000b 	str.w	r0, [sl, fp]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030d0:	461a      	mov	r2, r3
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030d2:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030d6:	4631      	mov	r1, r6
 80030d8:	4628      	mov	r0, r5
 80030da:	f7fd fc7d 	bl	80009d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030de:	e7da      	b.n	8003096 <HAL_HCD_IRQHandler+0x366>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80030e0:	2a01      	cmp	r2, #1
 80030e2:	d1d8      	bne.n	8003096 <HAL_HCD_IRQHandler+0x366>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80030e4:	f891 3054 	ldrb.w	r3, [r1, #84]	; 0x54
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030e8:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80030ec:	f083 0301 	eor.w	r3, r3, #1
 80030f0:	f881 3054 	strb.w	r3, [r1, #84]	; 0x54
 80030f4:	e7ef      	b.n	80030d6 <HAL_HCD_IRQHandler+0x3a6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80030f6:	68a1      	ldr	r1, [r4, #8]
 80030f8:	f011 0102 	ands.w	r1, r1, #2
 80030fc:	d03b      	beq.n	8003176 <HAL_HCD_IRQHandler+0x446>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80030fe:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003100:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003104:	f021 0102 	bic.w	r1, r1, #2
 8003108:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800310a:	f890 1061 	ldrb.w	r1, [r0, #97]	; 0x61
 800310e:	2901      	cmp	r1, #1
 8003110:	d10c      	bne.n	800312c <HAL_HCD_IRQHandler+0x3fc>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003112:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003116:	fb07 5306 	mla	r3, r7, r6, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800311a:	f8c4 8008 	str.w	r8, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800311e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8003122:	4631      	mov	r1, r6
 8003124:	4628      	mov	r0, r5
 8003126:	f7fd fc57 	bl	80009d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800312a:	e7c6      	b.n	80030ba <HAL_HCD_IRQHandler+0x38a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800312c:	2905      	cmp	r1, #5
 800312e:	d0f0      	beq.n	8003112 <HAL_HCD_IRQHandler+0x3e2>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003130:	2906      	cmp	r1, #6
 8003132:	d001      	beq.n	8003138 <HAL_HCD_IRQHandler+0x408>
 8003134:	2908      	cmp	r1, #8
 8003136:	d108      	bne.n	800314a <HAL_HCD_IRQHandler+0x41a>
      hhcd->hc[ch_num].ErrCnt++;
 8003138:	fb07 5006 	mla	r0, r7, r6, r5
 800313c:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800313e:	3101      	adds	r1, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003140:	2902      	cmp	r1, #2
      hhcd->hc[ch_num].ErrCnt++;
 8003142:	65c1      	str	r1, [r0, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003144:	d903      	bls.n	800314e <HAL_HCD_IRQHandler+0x41e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	e010      	b.n	800316c <HAL_HCD_IRQHandler+0x43c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800314a:	2903      	cmp	r1, #3
 800314c:	d10a      	bne.n	8003164 <HAL_HCD_IRQHandler+0x434>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800314e:	f880 8060 	strb.w	r8, [r0, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003152:	f85a 100b 	ldr.w	r1, [sl, fp]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003156:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800315a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800315e:	f84a 100b 	str.w	r1, [sl, fp]
 8003162:	e7d8      	b.n	8003116 <HAL_HCD_IRQHandler+0x3e6>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003164:	2907      	cmp	r1, #7
 8003166:	d1d6      	bne.n	8003116 <HAL_HCD_IRQHandler+0x3e6>
      hhcd->hc[ch_num].ErrCnt++;
 8003168:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800316a:	3301      	adds	r3, #1
 800316c:	65c3      	str	r3, [r0, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800316e:	2304      	movs	r3, #4
 8003170:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003174:	e7cf      	b.n	8003116 <HAL_HCD_IRQHandler+0x3e6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003176:	68a3      	ldr	r3, [r4, #8]
 8003178:	06da      	lsls	r2, r3, #27
 800317a:	d59e      	bpl.n	80030ba <HAL_HCD_IRQHandler+0x38a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800317c:	fb07 5206 	mla	r2, r7, r6, r5
 8003180:	6828      	ldr	r0, [r5, #0]
 8003182:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8003186:	2b03      	cmp	r3, #3
 8003188:	d10a      	bne.n	80031a0 <HAL_HCD_IRQHandler+0x470>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800318a:	65d1      	str	r1, [r2, #92]	; 0x5c
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800318c:	68e3      	ldr	r3, [r4, #12]
 800318e:	f043 0302 	orr.w	r3, r3, #2
 8003192:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003194:	4631      	mov	r1, r6
 8003196:	f002 fd00 	bl	8005b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800319a:	2310      	movs	r3, #16
 800319c:	60a3      	str	r3, [r4, #8]
 800319e:	e78c      	b.n	80030ba <HAL_HCD_IRQHandler+0x38a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031a0:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 80031a4:	d1f9      	bne.n	800319a <HAL_HCD_IRQHandler+0x46a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80031a6:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 80031a8:	692b      	ldr	r3, [r5, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f5      	bne.n	800319a <HAL_HCD_IRQHandler+0x46a>
        hhcd->hc[ch_num].state = HC_NAK;
 80031ae:	2303      	movs	r3, #3
 80031b0:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
 80031b4:	e7ea      	b.n	800318c <HAL_HCD_IRQHandler+0x45c>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031b6:	f011 0104 	ands.w	r1, r1, #4
 80031ba:	d006      	beq.n	80031ca <HAL_HCD_IRQHandler+0x49a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80031bc:	2304      	movs	r3, #4
 80031be:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031c0:	68e3      	ldr	r3, [r4, #12]
 80031c2:	f043 0302 	orr.w	r3, r3, #2
 80031c6:	60e3      	str	r3, [r4, #12]
 80031c8:	e777      	b.n	80030ba <HAL_HCD_IRQHandler+0x38a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031ca:	68a3      	ldr	r3, [r4, #8]
 80031cc:	069b      	lsls	r3, r3, #26
 80031ce:	d514      	bpl.n	80031fa <HAL_HCD_IRQHandler+0x4ca>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80031d0:	2320      	movs	r3, #32
 80031d2:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80031d4:	fb07 5306 	mla	r3, r7, r6, r5
 80031d8:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80031dc:	2a01      	cmp	r2, #1
 80031de:	f47f af6c 	bne.w	80030ba <HAL_HCD_IRQHandler+0x38a>
      hhcd->hc[ch_num].do_ping = 0U;
 80031e2:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031e6:	f883 8060 	strb.w	r8, [r3, #96]	; 0x60
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031ea:	68e3      	ldr	r3, [r4, #12]
 80031ec:	f043 0302 	orr.w	r3, r3, #2
 80031f0:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031f2:	4631      	mov	r1, r6
 80031f4:	f002 fcd1 	bl	8005b9a <USB_HC_Halt>
 80031f8:	e75f      	b.n	80030ba <HAL_HCD_IRQHandler+0x38a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80031fa:	68a2      	ldr	r2, [r4, #8]
 80031fc:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8003200:	d005      	beq.n	800320e <HAL_HCD_IRQHandler+0x4de>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003202:	68e3      	ldr	r3, [r4, #12]
 8003204:	f043 0302 	orr.w	r3, r3, #2
 8003208:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800320a:	4631      	mov	r1, r6
 800320c:	e6c8      	b.n	8002fa0 <HAL_HCD_IRQHandler+0x270>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800320e:	68a1      	ldr	r1, [r4, #8]
 8003210:	f011 0101 	ands.w	r1, r1, #1
 8003214:	d018      	beq.n	8003248 <HAL_HCD_IRQHandler+0x518>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003216:	fb07 5306 	mla	r3, r7, r6, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800321a:	4631      	mov	r1, r6
    hhcd->hc[ch_num].ErrCnt = 0U;
 800321c:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800321e:	68a2      	ldr	r2, [r4, #8]
 8003220:	0652      	lsls	r2, r2, #25
      hhcd->hc[ch_num].do_ping = 1U;
 8003222:	bf41      	itttt	mi
 8003224:	2201      	movmi	r2, #1
 8003226:	f883 203d 	strbmi.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800322a:	2340      	movmi	r3, #64	; 0x40
 800322c:	60a3      	strmi	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800322e:	68e3      	ldr	r3, [r4, #12]
 8003230:	f043 0302 	orr.w	r3, r3, #2
 8003234:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003236:	f002 fcb0 	bl	8005b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800323a:	2301      	movs	r3, #1
 800323c:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800323e:	fb07 5606 	mla	r6, r7, r6, r5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003242:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
 8003246:	e738      	b.n	80030ba <HAL_HCD_IRQHandler+0x38a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003248:	68a3      	ldr	r3, [r4, #8]
 800324a:	065b      	lsls	r3, r3, #25
 800324c:	d511      	bpl.n	8003272 <HAL_HCD_IRQHandler+0x542>
    hhcd->hc[ch_num].state = HC_NYET;
 800324e:	fb07 5306 	mla	r3, r7, r6, r5
 8003252:	2204      	movs	r2, #4
 8003254:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 800325e:	65d9      	str	r1, [r3, #92]	; 0x5c
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003260:	68e3      	ldr	r3, [r4, #12]
 8003262:	f043 0302 	orr.w	r3, r3, #2
 8003266:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003268:	4631      	mov	r1, r6
 800326a:	f002 fc96 	bl	8005b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800326e:	2340      	movs	r3, #64	; 0x40
 8003270:	e794      	b.n	800319c <HAL_HCD_IRQHandler+0x46c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003272:	68a1      	ldr	r1, [r4, #8]
 8003274:	0709      	lsls	r1, r1, #28
 8003276:	d50c      	bpl.n	8003292 <HAL_HCD_IRQHandler+0x562>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003278:	2308      	movs	r3, #8
 800327a:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800327c:	68e3      	ldr	r3, [r4, #12]
 800327e:	f043 0302 	orr.w	r3, r3, #2
 8003282:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003284:	4631      	mov	r1, r6
 8003286:	f002 fc88 	bl	8005b9a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800328a:	fb07 5606 	mla	r6, r7, r6, r5
 800328e:	2305      	movs	r3, #5
 8003290:	e7d7      	b.n	8003242 <HAL_HCD_IRQHandler+0x512>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003292:	68a1      	ldr	r1, [r4, #8]
 8003294:	06ca      	lsls	r2, r1, #27
 8003296:	d514      	bpl.n	80032c2 <HAL_HCD_IRQHandler+0x592>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003298:	fb07 5306 	mla	r3, r7, r6, r5
 800329c:	2200      	movs	r2, #0
 800329e:	65da      	str	r2, [r3, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 80032a0:	2203      	movs	r2, #3
 80032a2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 80032a6:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80032aa:	2a00      	cmp	r2, #0
 80032ac:	f47f af6e 	bne.w	800318c <HAL_HCD_IRQHandler+0x45c>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80032b0:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80032b4:	2a00      	cmp	r2, #0
 80032b6:	f47f af69 	bne.w	800318c <HAL_HCD_IRQHandler+0x45c>
        hhcd->hc[ch_num].do_ping = 1U;
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032c0:	e764      	b.n	800318c <HAL_HCD_IRQHandler+0x45c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032c2:	68a1      	ldr	r1, [r4, #8]
 80032c4:	060b      	lsls	r3, r1, #24
 80032c6:	d523      	bpl.n	8003310 <HAL_HCD_IRQHandler+0x5e0>
    if (hhcd->Init.dma_enable == 0U)
 80032c8:	692b      	ldr	r3, [r5, #16]
 80032ca:	b96b      	cbnz	r3, 80032e8 <HAL_HCD_IRQHandler+0x5b8>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80032cc:	fb07 5306 	mla	r3, r7, r6, r5
 80032d0:	2206      	movs	r2, #6
 80032d2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032d6:	68e3      	ldr	r3, [r4, #12]
 80032d8:	f043 0302 	orr.w	r3, r3, #2
 80032dc:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032de:	4631      	mov	r1, r6
 80032e0:	f002 fc5b 	bl	8005b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	e759      	b.n	800319c <HAL_HCD_IRQHandler+0x46c>
      hhcd->hc[ch_num].ErrCnt++;
 80032e8:	fb07 5306 	mla	r3, r7, r6, r5
 80032ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032ee:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032f0:	2a02      	cmp	r2, #2
      hhcd->hc[ch_num].ErrCnt++;
 80032f2:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032f4:	d909      	bls.n	800330a <HAL_HCD_IRQHandler+0x5da>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032f6:	2200      	movs	r2, #0
 80032f8:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032fa:	2204      	movs	r2, #4
 80032fc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003300:	4631      	mov	r1, r6
 8003302:	4628      	mov	r0, r5
 8003304:	f7fd fb68 	bl	80009d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003308:	e7ec      	b.n	80032e4 <HAL_HCD_IRQHandler+0x5b4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800330a:	f883 8060 	strb.w	r8, [r3, #96]	; 0x60
 800330e:	e7e9      	b.n	80032e4 <HAL_HCD_IRQHandler+0x5b4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003310:	68a1      	ldr	r1, [r4, #8]
 8003312:	0549      	lsls	r1, r1, #21
 8003314:	d50f      	bpl.n	8003336 <HAL_HCD_IRQHandler+0x606>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003316:	68e3      	ldr	r3, [r4, #12]
 8003318:	f043 0302 	orr.w	r3, r3, #2
 800331c:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800331e:	4631      	mov	r1, r6
 8003320:	f002 fc3b 	bl	8005b9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003324:	2310      	movs	r3, #16
 8003326:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003328:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800332c:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800332e:	fb07 5606 	mla	r6, r7, r6, r5
 8003332:	2308      	movs	r3, #8
 8003334:	e785      	b.n	8003242 <HAL_HCD_IRQHandler+0x512>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003336:	68a1      	ldr	r1, [r4, #8]
 8003338:	078a      	lsls	r2, r1, #30
 800333a:	f57f aebe 	bpl.w	80030ba <HAL_HCD_IRQHandler+0x38a>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800333e:	68e1      	ldr	r1, [r4, #12]
 8003340:	f021 0102 	bic.w	r1, r1, #2
 8003344:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003346:	fb07 5106 	mla	r1, r7, r6, r5
 800334a:	f891 0061 	ldrb.w	r0, [r1, #97]	; 0x61
 800334e:	2801      	cmp	r0, #1
 8003350:	d11e      	bne.n	8003390 <HAL_HCD_IRQHandler+0x660>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003352:	f891 303f 	ldrb.w	r3, [r1, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003356:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800335a:	3b02      	subs	r3, #2
 800335c:	2b01      	cmp	r3, #1
 800335e:	f63f aeda 	bhi.w	8003116 <HAL_HCD_IRQHandler+0x3e6>
        if (hhcd->Init.dma_enable == 1U)
 8003362:	692b      	ldr	r3, [r5, #16]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d10c      	bne.n	8003382 <HAL_HCD_IRQHandler+0x652>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8003368:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 800336a:	2b00      	cmp	r3, #0
 800336c:	f43f aed3 	beq.w	8003116 <HAL_HCD_IRQHandler+0x3e6>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003370:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 8003374:	3b01      	subs	r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	fbb3 f3f2 	udiv	r3, r3, r2
            if ((num_packets & 1U) != 0U)
 800337c:	07db      	lsls	r3, r3, #31
 800337e:	f57f aeca 	bpl.w	8003116 <HAL_HCD_IRQHandler+0x3e6>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003382:	f891 3055 	ldrb.w	r3, [r1, #85]	; 0x55
 8003386:	f083 0301 	eor.w	r3, r3, #1
 800338a:	f881 3055 	strb.w	r3, [r1, #85]	; 0x55
 800338e:	e6c2      	b.n	8003116 <HAL_HCD_IRQHandler+0x3e6>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003390:	2803      	cmp	r0, #3
 8003392:	d102      	bne.n	800339a <HAL_HCD_IRQHandler+0x66a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003394:	f881 8060 	strb.w	r8, [r1, #96]	; 0x60
 8003398:	e6bd      	b.n	8003116 <HAL_HCD_IRQHandler+0x3e6>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800339a:	2804      	cmp	r0, #4
 800339c:	d0fa      	beq.n	8003394 <HAL_HCD_IRQHandler+0x664>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800339e:	2805      	cmp	r0, #5
 80033a0:	d102      	bne.n	80033a8 <HAL_HCD_IRQHandler+0x678>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80033a2:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
 80033a6:	e6b6      	b.n	8003116 <HAL_HCD_IRQHandler+0x3e6>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80033a8:	2806      	cmp	r0, #6
 80033aa:	f43f aec5 	beq.w	8003138 <HAL_HCD_IRQHandler+0x408>
 80033ae:	2808      	cmp	r0, #8
 80033b0:	f47f aeb1 	bne.w	8003116 <HAL_HCD_IRQHandler+0x3e6>
 80033b4:	e6c0      	b.n	8003138 <HAL_HCD_IRQHandler+0x408>

080033b6 <HAL_HCD_Start>:
{
 80033b6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 80033b8:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 80033bc:	2b01      	cmp	r3, #1
{
 80033be:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80033c0:	d00d      	beq.n	80033de <HAL_HCD_Start+0x28>
 80033c2:	2501      	movs	r5, #1
 80033c4:	f880 52f8 	strb.w	r5, [r0, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80033c8:	6800      	ldr	r0, [r0, #0]
 80033ca:	f002 fa1d 	bl	8005808 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80033ce:	6820      	ldr	r0, [r4, #0]
 80033d0:	4629      	mov	r1, r5
 80033d2:	f002 fac2 	bl	800595a <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80033d6:	2000      	movs	r0, #0
 80033d8:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 80033dc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 80033de:	2002      	movs	r0, #2
 80033e0:	e7fc      	b.n	80033dc <HAL_HCD_Start+0x26>

080033e2 <HAL_HCD_Stop>:
{
 80033e2:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 80033e4:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 80033e8:	2b01      	cmp	r3, #1
{
 80033ea:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80033ec:	d009      	beq.n	8003402 <HAL_HCD_Stop+0x20>
 80033ee:	2301      	movs	r3, #1
 80033f0:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80033f4:	6800      	ldr	r0, [r0, #0]
 80033f6:	f002 fce8 	bl	8005dca <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80033fa:	2000      	movs	r0, #0
 80033fc:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8003400:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8003402:	2002      	movs	r0, #2
 8003404:	e7fc      	b.n	8003400 <HAL_HCD_Stop+0x1e>

08003406 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8003406:	6800      	ldr	r0, [r0, #0]
 8003408:	f002 ba89 	b.w	800591e <USB_ResetPort>

0800340c <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800340c:	232c      	movs	r3, #44	; 0x2c
 800340e:	fb03 0001 	mla	r0, r3, r1, r0
}
 8003412:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 8003416:	4770      	bx	lr

08003418 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8003418:	232c      	movs	r3, #44	; 0x2c
 800341a:	fb03 0001 	mla	r0, r3, r1, r0
}
 800341e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8003420:	4770      	bx	lr

08003422 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003422:	6800      	ldr	r0, [r0, #0]
 8003424:	f002 bb35 	b.w	8005a92 <USB_GetCurrentFrame>

08003428 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8003428:	6800      	ldr	r0, [r0, #0]
 800342a:	f002 bb27 	b.w	8005a7c <USB_GetHostSpeed>

0800342e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800342e:	6801      	ldr	r1, [r0, #0]
 8003430:	694b      	ldr	r3, [r1, #20]
 8003432:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	d010      	beq.n	800345e <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800343c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8003440:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8003442:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003444:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003446:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800344a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800344e:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003450:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003454:	f043 0304 	orr.w	r3, r3, #4
 8003458:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 800345a:	2001      	movs	r0, #1
 800345c:	4770      	bx	lr
  }
  return HAL_OK;
 800345e:	4618      	mov	r0, r3
}
 8003460:	4770      	bx	lr

08003462 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003466:	4604      	mov	r4, r0
 8003468:	460f      	mov	r7, r1
 800346a:	4616      	mov	r6, r2
 800346c:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800346e:	6825      	ldr	r5, [r4, #0]
 8003470:	6968      	ldr	r0, [r5, #20]
 8003472:	ea27 0000 	bic.w	r0, r7, r0
 8003476:	b280      	uxth	r0, r0
 8003478:	b1b8      	cbz	r0, 80034aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800347a:	696b      	ldr	r3, [r5, #20]
 800347c:	055a      	lsls	r2, r3, #21
 800347e:	d516      	bpl.n	80034ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003480:	682b      	ldr	r3, [r5, #0]
 8003482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003486:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003488:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800348c:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800348e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003490:	2300      	movs	r3, #0
 8003492:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003494:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003498:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800349c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800349e:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034a2:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80034a4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80034a8:	2001      	movs	r0, #1
}
 80034aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80034ae:	1c73      	adds	r3, r6, #1
 80034b0:	d0de      	beq.n	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b2:	f7fe ffcb 	bl	800244c <HAL_GetTick>
 80034b6:	eba0 0008 	sub.w	r0, r0, r8
 80034ba:	42b0      	cmp	r0, r6
 80034bc:	d801      	bhi.n	80034c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 80034be:	2e00      	cmp	r6, #0
 80034c0:	d1d5      	bne.n	800346e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034c2:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80034c4:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034c6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034c8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80034d2:	f042 0220 	orr.w	r2, r2, #32
 80034d6:	e7e4      	b.n	80034a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

080034d8 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	4604      	mov	r4, r0
 80034dc:	460d      	mov	r5, r1
 80034de:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	075b      	lsls	r3, r3, #29
 80034e6:	d501      	bpl.n	80034ec <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80034e8:	2000      	movs	r0, #0
}
 80034ea:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ec:	4620      	mov	r0, r4
 80034ee:	f7ff ff9e 	bl	800342e <I2C_IsAcknowledgeFailed>
 80034f2:	b9a8      	cbnz	r0, 8003520 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80034f4:	1c6a      	adds	r2, r5, #1
 80034f6:	d0f3      	beq.n	80034e0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f8:	f7fe ffa8 	bl	800244c <HAL_GetTick>
 80034fc:	1b80      	subs	r0, r0, r6
 80034fe:	42a8      	cmp	r0, r5
 8003500:	d801      	bhi.n	8003506 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003502:	2d00      	cmp	r5, #0
 8003504:	d1ec      	bne.n	80034e0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003506:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003508:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800350a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800350c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003510:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003514:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003516:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800351a:	f042 0220 	orr.w	r2, r2, #32
 800351e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003520:	2001      	movs	r0, #1
 8003522:	e7e2      	b.n	80034ea <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08003524 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003524:	b570      	push	{r4, r5, r6, lr}
 8003526:	4604      	mov	r4, r0
 8003528:	460d      	mov	r5, r1
 800352a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800352c:	6821      	ldr	r1, [r4, #0]
 800352e:	694b      	ldr	r3, [r1, #20]
 8003530:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003534:	d001      	beq.n	800353a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8003536:	2000      	movs	r0, #0
 8003538:	e010      	b.n	800355c <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800353a:	694a      	ldr	r2, [r1, #20]
 800353c:	06d2      	lsls	r2, r2, #27
 800353e:	d50e      	bpl.n	800355e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003540:	f06f 0210 	mvn.w	r2, #16
 8003544:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003546:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003548:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800354a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003552:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003554:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003556:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800355a:	2001      	movs	r0, #1
}
 800355c:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355e:	f7fe ff75 	bl	800244c <HAL_GetTick>
 8003562:	1b80      	subs	r0, r0, r6
 8003564:	42a8      	cmp	r0, r5
 8003566:	d801      	bhi.n	800356c <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8003568:	2d00      	cmp	r5, #0
 800356a:	d1df      	bne.n	800352c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800356c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800356e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003570:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003572:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003576:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800357a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800357c:	f042 0220 	orr.w	r2, r2, #32
 8003580:	e7e8      	b.n	8003554 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08003582 <I2C_WaitOnFlagUntilTimeout>:
{
 8003582:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8003586:	4606      	mov	r6, r0
 8003588:	460f      	mov	r7, r1
 800358a:	4691      	mov	r9, r2
 800358c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800358e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003592:	6833      	ldr	r3, [r6, #0]
 8003594:	f1ba 0f01 	cmp.w	sl, #1
 8003598:	bf0c      	ite	eq
 800359a:	695c      	ldreq	r4, [r3, #20]
 800359c:	699c      	ldrne	r4, [r3, #24]
 800359e:	ea27 0404 	bic.w	r4, r7, r4
 80035a2:	b2a4      	uxth	r4, r4
 80035a4:	fab4 f484 	clz	r4, r4
 80035a8:	0964      	lsrs	r4, r4, #5
 80035aa:	45a1      	cmp	r9, r4
 80035ac:	d001      	beq.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80035ae:	2000      	movs	r0, #0
 80035b0:	e017      	b.n	80035e2 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 80035b2:	1c6a      	adds	r2, r5, #1
 80035b4:	d0ee      	beq.n	8003594 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b6:	f7fe ff49 	bl	800244c <HAL_GetTick>
 80035ba:	9b08      	ldr	r3, [sp, #32]
 80035bc:	1ac0      	subs	r0, r0, r3
 80035be:	42a8      	cmp	r0, r5
 80035c0:	d801      	bhi.n	80035c6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80035c2:	2d00      	cmp	r5, #0
 80035c4:	d1e5      	bne.n	8003592 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035c6:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80035c8:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035ca:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035cc:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035d0:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035d4:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80035d6:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035da:	f042 0220 	orr.w	r2, r2, #32
 80035de:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80035e0:	2001      	movs	r0, #1
}
 80035e2:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

080035e6 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80035e6:	b570      	push	{r4, r5, r6, lr}
 80035e8:	4604      	mov	r4, r0
 80035ea:	460d      	mov	r5, r1
 80035ec:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	061b      	lsls	r3, r3, #24
 80035f4:	d501      	bpl.n	80035fa <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80035f6:	2000      	movs	r0, #0
}
 80035f8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035fa:	4620      	mov	r0, r4
 80035fc:	f7ff ff17 	bl	800342e <I2C_IsAcknowledgeFailed>
 8003600:	b9a8      	cbnz	r0, 800362e <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8003602:	1c6a      	adds	r2, r5, #1
 8003604:	d0f3      	beq.n	80035ee <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003606:	f7fe ff21 	bl	800244c <HAL_GetTick>
 800360a:	1b80      	subs	r0, r0, r6
 800360c:	42a8      	cmp	r0, r5
 800360e:	d801      	bhi.n	8003614 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003610:	2d00      	cmp	r5, #0
 8003612:	d1ec      	bne.n	80035ee <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003614:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003616:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003618:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800361a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800361e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003622:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003624:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003628:	f042 0220 	orr.w	r2, r2, #32
 800362c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800362e:	2001      	movs	r0, #1
 8003630:	e7e2      	b.n	80035f8 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08003634 <I2C_RequestMemoryWrite>:
{
 8003634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003638:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363a:	6802      	ldr	r2, [r0, #0]
{
 800363c:	b085      	sub	sp, #20
 800363e:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8003642:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003644:	6813      	ldr	r3, [r2, #0]
 8003646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364a:	6013      	str	r3, [r2, #0]
{
 800364c:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800364e:	463b      	mov	r3, r7
 8003650:	f8cd 8000 	str.w	r8, [sp]
 8003654:	2200      	movs	r2, #0
 8003656:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 800365a:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800365c:	f7ff ff91 	bl	8003582 <I2C_WaitOnFlagUntilTimeout>
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	b138      	cbz	r0, 8003674 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	05db      	lsls	r3, r3, #23
 8003668:	d502      	bpl.n	8003670 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800366a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800366e:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003670:	2003      	movs	r0, #3
 8003672:	e00a      	b.n	800368a <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003674:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8003678:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800367a:	4919      	ldr	r1, [pc, #100]	; (80036e0 <I2C_RequestMemoryWrite+0xac>)
 800367c:	4643      	mov	r3, r8
 800367e:	463a      	mov	r2, r7
 8003680:	4620      	mov	r0, r4
 8003682:	f7ff feee 	bl	8003462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003686:	b118      	cbz	r0, 8003690 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 8003688:	2001      	movs	r0, #1
}
 800368a:	b005      	add	sp, #20
 800368c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	9003      	str	r0, [sp, #12]
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	9203      	str	r2, [sp, #12]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800369c:	4642      	mov	r2, r8
 800369e:	4639      	mov	r1, r7
 80036a0:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a4:	f7ff ff9f 	bl	80035e6 <I2C_WaitOnTXEFlagUntilTimeout>
 80036a8:	b140      	cbz	r0, 80036bc <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036ac:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ae:	bf01      	itttt	eq
 80036b0:	6822      	ldreq	r2, [r4, #0]
 80036b2:	6813      	ldreq	r3, [r2, #0]
 80036b4:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80036b8:	6013      	streq	r3, [r2, #0]
 80036ba:	e7e5      	b.n	8003688 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036bc:	f1b9 0f01 	cmp.w	r9, #1
 80036c0:	6823      	ldr	r3, [r4, #0]
 80036c2:	d102      	bne.n	80036ca <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036c4:	b2ed      	uxtb	r5, r5
 80036c6:	611d      	str	r5, [r3, #16]
 80036c8:	e7df      	b.n	800368a <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036ca:	0a2a      	lsrs	r2, r5, #8
 80036cc:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ce:	4639      	mov	r1, r7
 80036d0:	4642      	mov	r2, r8
 80036d2:	4620      	mov	r0, r4
 80036d4:	f7ff ff87 	bl	80035e6 <I2C_WaitOnTXEFlagUntilTimeout>
 80036d8:	2800      	cmp	r0, #0
 80036da:	d1e6      	bne.n	80036aa <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	e7f1      	b.n	80036c4 <I2C_RequestMemoryWrite+0x90>
 80036e0:	00010002 	.word	0x00010002

080036e4 <I2C_RequestMemoryRead>:
{
 80036e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036e8:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ea:	6803      	ldr	r3, [r0, #0]
{
 80036ec:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036f4:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036f6:	681a      	ldr	r2, [r3, #0]
{
 80036f8:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003700:	601a      	str	r2, [r3, #0]
{
 8003702:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003704:	463b      	mov	r3, r7
 8003706:	f8cd 8000 	str.w	r8, [sp]
 800370a:	2200      	movs	r2, #0
 800370c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8003710:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003712:	f7ff ff36 	bl	8003582 <I2C_WaitOnFlagUntilTimeout>
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	b148      	cbz	r0, 800372e <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800371a:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800371c:	05db      	lsls	r3, r3, #23
 800371e:	d502      	bpl.n	8003726 <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003724:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003726:	2003      	movs	r0, #3
}
 8003728:	b004      	add	sp, #16
 800372a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800372e:	fa5f f986 	uxtb.w	r9, r6
 8003732:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8003736:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003738:	492a      	ldr	r1, [pc, #168]	; (80037e4 <I2C_RequestMemoryRead+0x100>)
 800373a:	4643      	mov	r3, r8
 800373c:	463a      	mov	r2, r7
 800373e:	4620      	mov	r0, r4
 8003740:	f7ff fe8f 	bl	8003462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003744:	b108      	cbz	r0, 800374a <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 8003746:	2001      	movs	r0, #1
 8003748:	e7ee      	b.n	8003728 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	9003      	str	r0, [sp, #12]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	9203      	str	r2, [sp, #12]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003756:	4642      	mov	r2, r8
 8003758:	4639      	mov	r1, r7
 800375a:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800375e:	f7ff ff42 	bl	80035e6 <I2C_WaitOnTXEFlagUntilTimeout>
 8003762:	b140      	cbz	r0, 8003776 <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003764:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003766:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003768:	bf01      	itttt	eq
 800376a:	6822      	ldreq	r2, [r4, #0]
 800376c:	6813      	ldreq	r3, [r2, #0]
 800376e:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003772:	6013      	streq	r3, [r2, #0]
 8003774:	e7e7      	b.n	8003746 <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003776:	f1ba 0f01 	cmp.w	sl, #1
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	d11a      	bne.n	80037b4 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800377e:	b2ed      	uxtb	r5, r5
 8003780:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003782:	4642      	mov	r2, r8
 8003784:	4639      	mov	r1, r7
 8003786:	4620      	mov	r0, r4
 8003788:	f7ff ff2d 	bl	80035e6 <I2C_WaitOnTXEFlagUntilTimeout>
 800378c:	2800      	cmp	r0, #0
 800378e:	d1e9      	bne.n	8003764 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003790:	6822      	ldr	r2, [r4, #0]
 8003792:	6813      	ldr	r3, [r2, #0]
 8003794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003798:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800379a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800379e:	4602      	mov	r2, r0
 80037a0:	f8cd 8000 	str.w	r8, [sp]
 80037a4:	463b      	mov	r3, r7
 80037a6:	4620      	mov	r0, r4
 80037a8:	f7ff feeb 	bl	8003582 <I2C_WaitOnFlagUntilTimeout>
 80037ac:	6822      	ldr	r2, [r4, #0]
 80037ae:	b160      	cbz	r0, 80037ca <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037b0:	6813      	ldr	r3, [r2, #0]
 80037b2:	e7b3      	b.n	800371c <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037b4:	0a2a      	lsrs	r2, r5, #8
 80037b6:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037b8:	4639      	mov	r1, r7
 80037ba:	4642      	mov	r2, r8
 80037bc:	4620      	mov	r0, r4
 80037be:	f7ff ff12 	bl	80035e6 <I2C_WaitOnTXEFlagUntilTimeout>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	d1ce      	bne.n	8003764 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	e7d9      	b.n	800377e <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037ca:	f049 0301 	orr.w	r3, r9, #1
 80037ce:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037d0:	4904      	ldr	r1, [pc, #16]	; (80037e4 <I2C_RequestMemoryRead+0x100>)
 80037d2:	4643      	mov	r3, r8
 80037d4:	463a      	mov	r2, r7
 80037d6:	4620      	mov	r0, r4
 80037d8:	f7ff fe43 	bl	8003462 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 80037dc:	3800      	subs	r0, #0
 80037de:	bf18      	it	ne
 80037e0:	2001      	movne	r0, #1
 80037e2:	e7a1      	b.n	8003728 <I2C_RequestMemoryRead+0x44>
 80037e4:	00010002 	.word	0x00010002

080037e8 <HAL_I2C_MspInit>:
}
 80037e8:	4770      	bx	lr
	...

080037ec <HAL_I2C_Init>:
{
 80037ec:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80037ee:	4604      	mov	r4, r0
 80037f0:	b908      	cbnz	r0, 80037f6 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80037f2:	2001      	movs	r0, #1
}
 80037f4:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80037fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80037fe:	b91b      	cbnz	r3, 8003808 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8003800:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003804:	f7ff fff0 	bl	80037e8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003808:	2324      	movs	r3, #36	; 0x24
 800380a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	f022 0201 	bic.w	r2, r2, #1
 8003816:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800381e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003826:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003828:	f001 f9a0 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800382c:	4a3f      	ldr	r2, [pc, #252]	; (800392c <HAL_I2C_Init+0x140>)
 800382e:	6863      	ldr	r3, [r4, #4]
 8003830:	4293      	cmp	r3, r2
 8003832:	bf94      	ite	ls
 8003834:	4a3e      	ldrls	r2, [pc, #248]	; (8003930 <HAL_I2C_Init+0x144>)
 8003836:	4a3f      	ldrhi	r2, [pc, #252]	; (8003934 <HAL_I2C_Init+0x148>)
 8003838:	4290      	cmp	r0, r2
 800383a:	bf8c      	ite	hi
 800383c:	2200      	movhi	r2, #0
 800383e:	2201      	movls	r2, #1
 8003840:	2a00      	cmp	r2, #0
 8003842:	d1d6      	bne.n	80037f2 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003844:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8003846:	4e3c      	ldr	r6, [pc, #240]	; (8003938 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003848:	684a      	ldr	r2, [r1, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800384a:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800384e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003852:	4332      	orrs	r2, r6
 8003854:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003856:	4a35      	ldr	r2, [pc, #212]	; (800392c <HAL_I2C_Init+0x140>)
 8003858:	6a0d      	ldr	r5, [r1, #32]
 800385a:	4293      	cmp	r3, r2
 800385c:	bf84      	itt	hi
 800385e:	f44f 7296 	movhi.w	r2, #300	; 0x12c
 8003862:	4372      	mulhi	r2, r6
 8003864:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003868:	bf91      	iteee	ls
 800386a:	1c72      	addls	r2, r6, #1
 800386c:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8003870:	fbb2 f2f6 	udivhi	r2, r2, r6
 8003874:	3201      	addhi	r2, #1
 8003876:	432a      	orrs	r2, r5
 8003878:	620a      	str	r2, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800387a:	69cd      	ldr	r5, [r1, #28]
 800387c:	1e42      	subs	r2, r0, #1
 800387e:	482b      	ldr	r0, [pc, #172]	; (800392c <HAL_I2C_Init+0x140>)
 8003880:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8003884:	4283      	cmp	r3, r0
 8003886:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800388a:	d832      	bhi.n	80038f2 <HAL_I2C_Init+0x106>
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003892:	f640 72fc 	movw	r2, #4092	; 0xffc
 8003896:	3301      	adds	r3, #1
 8003898:	4213      	tst	r3, r2
 800389a:	d042      	beq.n	8003922 <HAL_I2C_Init+0x136>
 800389c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a0:	432b      	orrs	r3, r5
 80038a2:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038a4:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80038a8:	680a      	ldr	r2, [r1, #0]
 80038aa:	4303      	orrs	r3, r0
 80038ac:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80038b0:	4313      	orrs	r3, r2
 80038b2:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038b4:	688a      	ldr	r2, [r1, #8]
 80038b6:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80038ba:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 80038be:	4303      	orrs	r3, r0
 80038c0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038c4:	4313      	orrs	r3, r2
 80038c6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038c8:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80038cc:	68ca      	ldr	r2, [r1, #12]
 80038ce:	4303      	orrs	r3, r0
 80038d0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80038d8:	680b      	ldr	r3, [r1, #0]
 80038da:	f043 0301 	orr.w	r3, r3, #1
 80038de:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e0:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80038e2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038e4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ea:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ec:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80038f0:	e780      	b.n	80037f4 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038f2:	68a0      	ldr	r0, [r4, #8]
 80038f4:	b950      	cbnz	r0, 800390c <HAL_I2C_Init+0x120>
 80038f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80038fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fe:	3301      	adds	r3, #1
 8003900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003904:	b17b      	cbz	r3, 8003926 <HAL_I2C_Init+0x13a>
 8003906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800390a:	e7c9      	b.n	80038a0 <HAL_I2C_Init+0xb4>
 800390c:	2019      	movs	r0, #25
 800390e:	4343      	muls	r3, r0
 8003910:	fbb2 f3f3 	udiv	r3, r2, r3
 8003914:	3301      	adds	r3, #1
 8003916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391a:	b123      	cbz	r3, 8003926 <HAL_I2C_Init+0x13a>
 800391c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003920:	e7be      	b.n	80038a0 <HAL_I2C_Init+0xb4>
 8003922:	2304      	movs	r3, #4
 8003924:	e7bc      	b.n	80038a0 <HAL_I2C_Init+0xb4>
 8003926:	2301      	movs	r3, #1
 8003928:	e7ba      	b.n	80038a0 <HAL_I2C_Init+0xb4>
 800392a:	bf00      	nop
 800392c:	000186a0 	.word	0x000186a0
 8003930:	001e847f 	.word	0x001e847f
 8003934:	003d08ff 	.word	0x003d08ff
 8003938:	000f4240 	.word	0x000f4240

0800393c <HAL_I2C_MspDeInit>:
 800393c:	4770      	bx	lr

0800393e <HAL_I2C_DeInit>:
{
 800393e:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8003940:	4604      	mov	r4, r0
 8003942:	b198      	cbz	r0, 800396c <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8003944:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003946:	2324      	movs	r3, #36	; 0x24
 8003948:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800394c:	6813      	ldr	r3, [r2, #0]
 800394e:	f023 0301 	bic.w	r3, r3, #1
 8003952:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8003954:	f7ff fff2 	bl	800393c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003958:	2000      	movs	r0, #0
 800395a:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 800395c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003960:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003964:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003966:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 800396a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800396c:	2001      	movs	r0, #1
 800396e:	e7fc      	b.n	800396a <HAL_I2C_DeInit+0x2c>

08003970 <HAL_I2C_Mem_Write>:
{
 8003970:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003974:	4604      	mov	r4, r0
 8003976:	4699      	mov	r9, r3
 8003978:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800397a:	460f      	mov	r7, r1
 800397c:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800397e:	f7fe fd65 	bl	800244c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003982:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003986:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8003988:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800398a:	d003      	beq.n	8003994 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 800398c:	2002      	movs	r0, #2
}
 800398e:	b003      	add	sp, #12
 8003990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003994:	9000      	str	r0, [sp, #0]
 8003996:	493c      	ldr	r1, [pc, #240]	; (8003a88 <HAL_I2C_Mem_Write+0x118>)
 8003998:	2319      	movs	r3, #25
 800399a:	2201      	movs	r2, #1
 800399c:	4620      	mov	r0, r4
 800399e:	f7ff fdf0 	bl	8003582 <I2C_WaitOnFlagUntilTimeout>
 80039a2:	2800      	cmp	r0, #0
 80039a4:	d1f2      	bne.n	800398c <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80039a6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d0ee      	beq.n	800398c <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039ae:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80039b0:	2301      	movs	r3, #1
 80039b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039b6:	6803      	ldr	r3, [r0, #0]
 80039b8:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80039ba:	bf5e      	ittt	pl
 80039bc:	6803      	ldrpl	r3, [r0, #0]
 80039be:	f043 0301 	orrpl.w	r3, r3, #1
 80039c2:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039c4:	6803      	ldr	r3, [r0, #0]
 80039c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039ca:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039cc:	2321      	movs	r3, #33	; 0x21
 80039ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039d2:	2340      	movs	r3, #64	; 0x40
 80039d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d8:	2300      	movs	r3, #0
 80039da:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80039dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039de:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039e0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80039e4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039e6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80039e8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039ea:	4b28      	ldr	r3, [pc, #160]	; (8003a8c <HAL_I2C_Mem_Write+0x11c>)
 80039ec:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039ee:	e9cd 6500 	strd	r6, r5, [sp]
 80039f2:	464b      	mov	r3, r9
 80039f4:	4642      	mov	r2, r8
 80039f6:	4639      	mov	r1, r7
 80039f8:	4620      	mov	r0, r4
 80039fa:	f7ff fe1b 	bl	8003634 <I2C_RequestMemoryWrite>
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d02a      	beq.n	8003a58 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8003a02:	2001      	movs	r0, #1
 8003a04:	e7c3      	b.n	800398e <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a06:	f7ff fdee 	bl	80035e6 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a0a:	b140      	cbz	r0, 8003a1e <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a0e:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a10:	bf01      	itttt	eq
 8003a12:	6822      	ldreq	r2, [r4, #0]
 8003a14:	6813      	ldreq	r3, [r2, #0]
 8003a16:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003a1a:	6013      	streq	r3, [r2, #0]
 8003a1c:	e7f1      	b.n	8003a02 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a20:	6827      	ldr	r7, [r4, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003a28:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8003a2a:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003a2c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003a2e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003a30:	3a01      	subs	r2, #1
 8003a32:	b292      	uxth	r2, r2
 8003a34:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a36:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8003a38:	1e48      	subs	r0, r1, #1
 8003a3a:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a3c:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8003a3e:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a40:	d50a      	bpl.n	8003a58 <HAL_I2C_Mem_Write+0xe8>
 8003a42:	b148      	cbz	r0, 8003a58 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a44:	785a      	ldrb	r2, [r3, #1]
 8003a46:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8003a48:	3302      	adds	r3, #2
 8003a4a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003a4c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a4e:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8003a50:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8003a52:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8003a54:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003a56:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a58:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a5a:	462a      	mov	r2, r5
 8003a5c:	4631      	mov	r1, r6
 8003a5e:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1d0      	bne.n	8003a06 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a64:	f7ff fd38 	bl	80034d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	d1cf      	bne.n	8003a0c <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6c:	6822      	ldr	r2, [r4, #0]
 8003a6e:	6813      	ldr	r3, [r2, #0]
 8003a70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a74:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003a76:	2320      	movs	r3, #32
 8003a78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003a7c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a80:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8003a84:	e783      	b.n	800398e <HAL_I2C_Mem_Write+0x1e>
 8003a86:	bf00      	nop
 8003a88:	00100002 	.word	0x00100002
 8003a8c:	ffff0000 	.word	0xffff0000

08003a90 <HAL_I2C_Mem_Read>:
{
 8003a90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a94:	4604      	mov	r4, r0
 8003a96:	b087      	sub	sp, #28
 8003a98:	4699      	mov	r9, r3
 8003a9a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8003a9c:	460d      	mov	r5, r1
 8003a9e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8003aa0:	f7fe fcd4 	bl	800244c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003aa8:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8003aaa:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aac:	d004      	beq.n	8003ab8 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8003aae:	2502      	movs	r5, #2
}
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	b007      	add	sp, #28
 8003ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ab8:	9000      	str	r0, [sp, #0]
 8003aba:	4976      	ldr	r1, [pc, #472]	; (8003c94 <HAL_I2C_Mem_Read+0x204>)
 8003abc:	2319      	movs	r3, #25
 8003abe:	2201      	movs	r2, #1
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f7ff fd5e 	bl	8003582 <I2C_WaitOnFlagUntilTimeout>
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d1f1      	bne.n	8003aae <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8003aca:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d0ed      	beq.n	8003aae <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ad2:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ada:	6803      	ldr	r3, [r0, #0]
 8003adc:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8003ade:	bf5e      	ittt	pl
 8003ae0:	6803      	ldrpl	r3, [r0, #0]
 8003ae2:	f043 0301 	orrpl.w	r3, r3, #1
 8003ae6:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ae8:	6803      	ldr	r3, [r0, #0]
 8003aea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003aee:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003af0:	2322      	movs	r3, #34	; 0x22
 8003af2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003af6:	2340      	movs	r3, #64	; 0x40
 8003af8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003afc:	2300      	movs	r3, #0
 8003afe:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003b00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b02:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b04:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8003b08:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b0c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b0e:	4b62      	ldr	r3, [pc, #392]	; (8003c98 <HAL_I2C_Mem_Read+0x208>)
 8003b10:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b12:	4629      	mov	r1, r5
 8003b14:	e9cd 7600 	strd	r7, r6, [sp]
 8003b18:	464b      	mov	r3, r9
 8003b1a:	4642      	mov	r2, r8
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f7ff fde1 	bl	80036e4 <I2C_RequestMemoryRead>
 8003b22:	4605      	mov	r5, r0
 8003b24:	b108      	cbz	r0, 8003b2a <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8003b26:	2501      	movs	r5, #1
 8003b28:	e7c2      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8003b2a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	b9b2      	cbnz	r2, 8003b5e <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b30:	9002      	str	r0, [sp, #8]
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	9202      	str	r2, [sp, #8]
 8003b36:	699a      	ldr	r2, [r3, #24]
 8003b38:	9202      	str	r2, [sp, #8]
 8003b3a:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b42:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b44:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8003c9c <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 8003b48:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d12c      	bne.n	8003ba8 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003b54:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b58:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8003b5c:	e7a8      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8003b5e:	2a01      	cmp	r2, #1
 8003b60:	d10a      	bne.n	8003b78 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b68:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6a:	9003      	str	r0, [sp, #12]
 8003b6c:	695a      	ldr	r2, [r3, #20]
 8003b6e:	9203      	str	r2, [sp, #12]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	9203      	str	r2, [sp, #12]
 8003b74:	9a03      	ldr	r2, [sp, #12]
 8003b76:	e7e1      	b.n	8003b3c <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 8003b78:	2a02      	cmp	r2, #2
 8003b7a:	d10e      	bne.n	8003b9a <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b82:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b8a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8c:	9004      	str	r0, [sp, #16]
 8003b8e:	695a      	ldr	r2, [r3, #20]
 8003b90:	9204      	str	r2, [sp, #16]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	9304      	str	r3, [sp, #16]
 8003b96:	9b04      	ldr	r3, [sp, #16]
 8003b98:	e7d4      	b.n	8003b44 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b9a:	9005      	str	r0, [sp, #20]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	9205      	str	r2, [sp, #20]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	9305      	str	r3, [sp, #20]
 8003ba4:	9b05      	ldr	r3, [sp, #20]
 8003ba6:	e7cd      	b.n	8003b44 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d856      	bhi.n	8003c5a <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d115      	bne.n	8003bdc <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb0:	4632      	mov	r2, r6
 8003bb2:	4639      	mov	r1, r7
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f7ff fcb5 	bl	8003524 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d1b3      	bne.n	8003b26 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bc4:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bc8:	3301      	adds	r3, #1
 8003bca:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003bcc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003bd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003bda:	e7b5      	b.n	8003b48 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 8003bdc:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bde:	9600      	str	r6, [sp, #0]
 8003be0:	463b      	mov	r3, r7
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	4641      	mov	r1, r8
 8003be8:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8003bea:	d119      	bne.n	8003c20 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bec:	f7ff fcc9 	bl	8003582 <I2C_WaitOnFlagUntilTimeout>
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d198      	bne.n	8003b26 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bfc:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c02:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003c04:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003c06:	1c53      	adds	r3, r2, #1
 8003c08:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003c0a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003c10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c18:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	7053      	strb	r3, [r2, #1]
 8003c1e:	e7d2      	b.n	8003bc6 <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c20:	f7ff fcaf 	bl	8003582 <I2C_WaitOnFlagUntilTimeout>
 8003c24:	2800      	cmp	r0, #0
 8003c26:	f47f af7e 	bne.w	8003b26 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c32:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c38:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c3c:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8003c3e:	3301      	adds	r3, #1
 8003c40:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003c42:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c44:	3b01      	subs	r3, #1
 8003c46:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003c48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c50:	4602      	mov	r2, r0
 8003c52:	463b      	mov	r3, r7
 8003c54:	4641      	mov	r1, r8
 8003c56:	4620      	mov	r0, r4
 8003c58:	e7c8      	b.n	8003bec <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c5a:	4632      	mov	r2, r6
 8003c5c:	4639      	mov	r1, r7
 8003c5e:	4620      	mov	r0, r4
 8003c60:	f7ff fc60 	bl	8003524 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c64:	2800      	cmp	r0, #0
 8003c66:	f47f af5e 	bne.w	8003b26 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c70:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003c72:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003c74:	1c53      	adds	r3, r2, #1
 8003c76:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8003c78:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8003c7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	6959      	ldr	r1, [r3, #20]
 8003c8a:	0749      	lsls	r1, r1, #29
 8003c8c:	f57f af5c 	bpl.w	8003b48 <HAL_I2C_Mem_Read+0xb8>
 8003c90:	e7c3      	b.n	8003c1a <HAL_I2C_Mem_Read+0x18a>
 8003c92:	bf00      	nop
 8003c94:	00100002 	.word	0x00100002
 8003c98:	ffff0000 	.word	0xffff0000
 8003c9c:	00010004 	.word	0x00010004

08003ca0 <HAL_I2C_GetState>:
  return hi2c->State;
 8003ca0:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8003ca4:	4770      	bx	lr

08003ca6 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8003ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003caa:	4604      	mov	r4, r0
 8003cac:	460f      	mov	r7, r1
 8003cae:	4616      	mov	r6, r2
 8003cb0:	461d      	mov	r5, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cb2:	f7fe fbcb 	bl	800244c <HAL_GetTick>
 8003cb6:	4680      	mov	r8, r0

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8003cb8:	6822      	ldr	r2, [r4, #0]
 8003cba:	6893      	ldr	r3, [r2, #8]
 8003cbc:	ea37 0303 	bics.w	r3, r7, r3
 8003cc0:	bf0c      	ite	eq
 8003cc2:	2301      	moveq	r3, #1
 8003cc4:	2300      	movne	r3, #0
 8003cc6:	42b3      	cmp	r3, r6
 8003cc8:	d101      	bne.n	8003cce <I2S_WaitFlagStateUntilTimeout+0x28>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003cca:	2000      	movs	r0, #0
 8003ccc:	e00e      	b.n	8003cec <I2S_WaitFlagStateUntilTimeout+0x46>
    if (Timeout != HAL_MAX_DELAY)
 8003cce:	1c6b      	adds	r3, r5, #1
 8003cd0:	d0f3      	beq.n	8003cba <I2S_WaitFlagStateUntilTimeout+0x14>
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8003cd2:	f7fe fbbb 	bl	800244c <HAL_GetTick>
 8003cd6:	eba0 0008 	sub.w	r0, r0, r8
 8003cda:	42a8      	cmp	r0, r5
 8003cdc:	d3ec      	bcc.n	8003cb8 <I2S_WaitFlagStateUntilTimeout+0x12>
        hi2s->State = HAL_I2S_STATE_READY;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2s);
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8003cea:	2003      	movs	r0, #3
}
 8003cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003cf0 <HAL_I2S_MspInit>:
}
 8003cf0:	4770      	bx	lr
	...

08003cf4 <HAL_I2S_Init>:
{
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2s == NULL)
 8003cf6:	4604      	mov	r4, r0
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	f000 8087 	beq.w	8003e0c <HAL_I2S_Init+0x118>
  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003cfe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003d02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d06:	b92b      	cbnz	r3, 8003d14 <HAL_I2S_Init+0x20>
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d08:	4b42      	ldr	r3, [pc, #264]	; (8003e14 <HAL_I2S_Init+0x120>)
    hi2s->Lock = HAL_UNLOCKED;
 8003d0a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003d0e:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8003d10:	f7ff ffee 	bl	8003cf0 <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d14:	6822      	ldr	r2, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8003d16:	2102      	movs	r1, #2
 8003d18:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d1c:	69d3      	ldr	r3, [r2, #28]
 8003d1e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d22:	f023 030f 	bic.w	r3, r3, #15
 8003d26:	61d3      	str	r3, [r2, #28]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003d28:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8003d2a:	6211      	str	r1, [r2, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003d2c:	428b      	cmp	r3, r1
 8003d2e:	d06f      	beq.n	8003e10 <HAL_I2S_Init+0x11c>
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003d30:	68e3      	ldr	r3, [r4, #12]
      packetlength = 32U;
 8003d32:	2b00      	cmp	r3, #0
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d34:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 8003d36:	bf0c      	ite	eq
 8003d38:	2510      	moveq	r5, #16
 8003d3a:	2520      	movne	r5, #32
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d3c:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003d3e:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8003d40:	bf98      	it	ls
 8003d42:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003d44:	f000 ffd2 	bl	8004cec <HAL_RCCEx_GetPeriphCLKFreq>
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003d48:	6923      	ldr	r3, [r4, #16]
 8003d4a:	6961      	ldr	r1, [r4, #20]
 8003d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d50:	d153      	bne.n	8003dfa <HAL_I2S_Init+0x106>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003d52:	68e3      	ldr	r3, [r4, #12]
 8003d54:	220a      	movs	r2, #10
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d04d      	beq.n	8003df6 <HAL_I2S_Init+0x102>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d5a:	00ab      	lsls	r3, r5, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d60:	4353      	muls	r3, r2
    tmp = tmp / 10U;
 8003d62:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003d64:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d68:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8003d6a:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003d6e:	f003 0201 	and.w	r2, r3, #1
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003d72:	085b      	lsrs	r3, r3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003d74:	1e99      	subs	r1, r3, #2
 8003d76:	29fd      	cmp	r1, #253	; 0xfd
 8003d78:	d844      	bhi.n	8003e04 <HAL_I2S_Init+0x110>
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003d7a:	0212      	lsls	r2, r2, #8
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	6922      	ldr	r2, [r4, #16]
 8003d80:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003d82:	4f25      	ldr	r7, [pc, #148]	; (8003e18 <HAL_I2S_Init+0x124>)
 8003d84:	68e5      	ldr	r5, [r4, #12]
 8003d86:	69a0      	ldr	r0, [r4, #24]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003d8c:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
 8003d90:	69ca      	ldr	r2, [r1, #28]
 8003d92:	ea46 0c03 	orr.w	ip, r6, r3
 8003d96:	403a      	ands	r2, r7
 8003d98:	ea42 020c 	orr.w	r2, r2, ip
 8003d9c:	432a      	orrs	r2, r5
 8003d9e:	4302      	orrs	r2, r0
 8003da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003da4:	61ca      	str	r2, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003da6:	6a22      	ldr	r2, [r4, #32]
 8003da8:	2a01      	cmp	r2, #1
 8003daa:	d11e      	bne.n	8003dea <HAL_I2S_Init+0xf6>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003dac:	4a1b      	ldr	r2, [pc, #108]	; (8003e1c <HAL_I2S_Init+0x128>)
 8003dae:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003db0:	f8df c070 	ldr.w	ip, [pc, #112]	; 8003e24 <HAL_I2S_Init+0x130>
 8003db4:	4a1a      	ldr	r2, [pc, #104]	; (8003e20 <HAL_I2S_Init+0x12c>)
 8003db6:	4561      	cmp	r1, ip
 8003db8:	bf18      	it	ne
 8003dba:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      tmp = I2S_MODE_SLAVE_TX;
 8003dbe:	f436 7600 	bics.w	r6, r6, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003dc2:	69d1      	ldr	r1, [r2, #28]
 8003dc4:	ea01 0107 	and.w	r1, r1, r7
 8003dc8:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003dca:	f04f 0102 	mov.w	r1, #2
 8003dce:	6211      	str	r1, [r2, #32]
      tmp = I2S_MODE_SLAVE_TX;
 8003dd0:	bf0c      	ite	eq
 8003dd2:	f44f 7680 	moveq.w	r6, #256	; 0x100
 8003dd6:	2600      	movne	r6, #0
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003dd8:	432b      	orrs	r3, r5
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003dda:	69d1      	ldr	r1, [r2, #28]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ddc:	4333      	orrs	r3, r6
 8003dde:	4303      	orrs	r3, r0
 8003de0:	430b      	orrs	r3, r1
 8003de2:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003de4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003de8:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003dea:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8003dec:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003dee:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003df0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8003df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003df6:	00eb      	lsls	r3, r5, #3
 8003df8:	e7b0      	b.n	8003d5c <HAL_I2S_Init+0x68>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003dfa:	230a      	movs	r3, #10
 8003dfc:	fbb0 f0f5 	udiv	r0, r0, r5
 8003e00:	4343      	muls	r3, r0
 8003e02:	e7ae      	b.n	8003d62 <HAL_I2S_Init+0x6e>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003e04:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e06:	f043 0310 	orr.w	r3, r3, #16
 8003e0a:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8003e0c:	2001      	movs	r0, #1
 8003e0e:	e7f1      	b.n	8003df4 <HAL_I2S_Init+0x100>
    i2sodd = 0U;
 8003e10:	2200      	movs	r2, #0
 8003e12:	e7b3      	b.n	8003d7c <HAL_I2S_Init+0x88>
 8003e14:	0800430d 	.word	0x0800430d
 8003e18:	fffff040 	.word	0xfffff040
 8003e1c:	08004439 	.word	0x08004439
 8003e20:	40003400 	.word	0x40003400
 8003e24:	40003800 	.word	0x40003800

08003e28 <HAL_I2S_Transmit_DMA>:
{
 8003e28:	b570      	push	{r4, r5, r6, lr}
 8003e2a:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8003e2c:	2900      	cmp	r1, #0
 8003e2e:	d056      	beq.n	8003ede <HAL_I2S_Transmit_DMA+0xb6>
 8003e30:	2a00      	cmp	r2, #0
 8003e32:	d054      	beq.n	8003ede <HAL_I2S_Transmit_DMA+0xb6>
  __HAL_LOCK(hi2s);
 8003e34:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d00b      	beq.n	8003e54 <HAL_I2S_Transmit_DMA+0x2c>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State != HAL_I2S_STATE_READY)
 8003e42:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	b2dd      	uxtb	r5, r3
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_I2S_Transmit_DMA+0x30>
    __HAL_UNLOCK(hi2s);
 8003e50:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 8003e54:	2502      	movs	r5, #2
 8003e56:	e028      	b.n	8003eaa <HAL_I2S_Transmit_DMA+0x82>
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003e58:	2003      	movs	r0, #3
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003e5a:	6826      	ldr	r6, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003e5c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e60:	6463      	str	r3, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003e62:	69f3      	ldr	r3, [r6, #28]
  hi2s->pTxBuffPtr = pData;
 8003e64:	6261      	str	r1, [r4, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003e66:	f003 0307 	and.w	r3, r3, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003e6a:	4283      	cmp	r3, r0
 8003e6c:	d001      	beq.n	8003e72 <HAL_I2S_Transmit_DMA+0x4a>
 8003e6e:	2b05      	cmp	r3, #5
 8003e70:	d11d      	bne.n	8003eae <HAL_I2S_Transmit_DMA+0x86>
    hi2s->TxXferSize = (Size << 1U);
 8003e72:	0053      	lsls	r3, r2, #1
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003e78:	8563      	strh	r3, [r4, #42]	; 0x2a
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003e7a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003e7c:	4b19      	ldr	r3, [pc, #100]	; (8003ee4 <HAL_I2S_Transmit_DMA+0xbc>)
 8003e7e:	6403      	str	r3, [r0, #64]	; 0x40
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003e80:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <HAL_I2S_Transmit_DMA+0xc0>)
 8003e82:	63c3      	str	r3, [r0, #60]	; 0x3c
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003e84:	4b19      	ldr	r3, [pc, #100]	; (8003eec <HAL_I2S_Transmit_DMA+0xc4>)
 8003e86:	64c3      	str	r3, [r0, #76]	; 0x4c
                                 hi2s->TxXferSize))
 8003e88:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003e8a:	f106 020c 	add.w	r2, r6, #12
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	f7fe fc24 	bl	80026dc <HAL_DMA_Start_IT>
 8003e94:	b170      	cbz	r0, 8003eb4 <HAL_I2S_Transmit_DMA+0x8c>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003e96:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003e98:	f043 0308 	orr.w	r3, r3, #8
 8003e9c:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003eaa:	4628      	mov	r0, r5
 8003eac:	bd70      	pop	{r4, r5, r6, pc}
    hi2s->TxXferSize = Size;
 8003eae:	8522      	strh	r2, [r4, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003eb0:	8562      	strh	r2, [r4, #42]	; 0x2a
 8003eb2:	e7e2      	b.n	8003e7a <HAL_I2S_Transmit_DMA+0x52>
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003eb4:	6823      	ldr	r3, [r4, #0]
 8003eb6:	69da      	ldr	r2, [r3, #28]
 8003eb8:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8003eba:	bf5e      	ittt	pl
 8003ebc:	69da      	ldrpl	r2, [r3, #28]
 8003ebe:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8003ec2:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	0792      	lsls	r2, r2, #30
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ec8:	bf58      	it	pl
 8003eca:	685a      	ldrpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8003ecc:	f04f 0500 	mov.w	r5, #0
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ed0:	bf5c      	itt	pl
 8003ed2:	f042 0202 	orrpl.w	r2, r2, #2
 8003ed6:	605a      	strpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8003ed8:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  return HAL_OK;
 8003edc:	e7e5      	b.n	8003eaa <HAL_I2S_Transmit_DMA+0x82>
    return  HAL_ERROR;
 8003ede:	2501      	movs	r5, #1
 8003ee0:	e7e3      	b.n	8003eaa <HAL_I2S_Transmit_DMA+0x82>
 8003ee2:	bf00      	nop
 8003ee4:	080042b5 	.word	0x080042b5
 8003ee8:	080042bf 	.word	0x080042bf
 8003eec:	08004407 	.word	0x08004407

08003ef0 <HAL_I2S_Receive_DMA>:
{
 8003ef0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0U))
 8003ef6:	2900      	cmp	r1, #0
 8003ef8:	d062      	beq.n	8003fc0 <HAL_I2S_Receive_DMA+0xd0>
 8003efa:	2a00      	cmp	r2, #0
 8003efc:	d060      	beq.n	8003fc0 <HAL_I2S_Receive_DMA+0xd0>
  __HAL_LOCK(hi2s);
 8003efe:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8003f02:	2a01      	cmp	r2, #1
 8003f04:	d00b      	beq.n	8003f1e <HAL_I2S_Receive_DMA+0x2e>
 8003f06:	2201      	movs	r2, #1
 8003f08:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (hi2s->State != HAL_I2S_STATE_READY)
 8003f0c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003f10:	2a01      	cmp	r2, #1
 8003f12:	b2d5      	uxtb	r5, r2
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_I2S_Receive_DMA+0x32>
    __HAL_UNLOCK(hi2s);
 8003f1a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  __HAL_LOCK(hi2s);
 8003f1e:	2502      	movs	r5, #2
 8003f20:	e036      	b.n	8003f90 <HAL_I2S_Receive_DMA+0xa0>
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003f22:	6826      	ldr	r6, [r4, #0]
  hi2s->pRxBuffPtr = pData;
 8003f24:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8003f26:	2004      	movs	r0, #4
 8003f28:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003f2c:	6462      	str	r2, [r4, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003f2e:	69f2      	ldr	r2, [r6, #28]
 8003f30:	f002 0207 	and.w	r2, r2, #7
  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003f34:	2a03      	cmp	r2, #3
 8003f36:	d001      	beq.n	8003f3c <HAL_I2S_Receive_DMA+0x4c>
 8003f38:	2a05      	cmp	r2, #5
 8003f3a:	d101      	bne.n	8003f40 <HAL_I2S_Receive_DMA+0x50>
    hi2s->RxXferSize = (Size << 1U);
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	b29b      	uxth	r3, r3
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003f40:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2s->RxXferSize = Size;
 8003f42:	8623      	strh	r3, [r4, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8003f44:	8663      	strh	r3, [r4, #50]	; 0x32
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8003f46:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <HAL_I2S_Receive_DMA+0xd4>)
 8003f48:	6403      	str	r3, [r0, #64]	; 0x40
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8003f4a:	4b1f      	ldr	r3, [pc, #124]	; (8003fc8 <HAL_I2S_Receive_DMA+0xd8>)
 8003f4c:	63c3      	str	r3, [r0, #60]	; 0x3c
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8003f4e:	4b1f      	ldr	r3, [pc, #124]	; (8003fcc <HAL_I2S_Receive_DMA+0xdc>)
 8003f50:	64c3      	str	r3, [r0, #76]	; 0x4c
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003f52:	69f3      	ldr	r3, [r6, #28]
 8003f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f5c:	d106      	bne.n	8003f6c <HAL_I2S_Receive_DMA+0x7c>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f5e:	2300      	movs	r3, #0
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	68f3      	ldr	r3, [r6, #12]
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	68b3      	ldr	r3, [r6, #8]
 8003f68:	9301      	str	r3, [sp, #4]
 8003f6a:	9b01      	ldr	r3, [sp, #4]
                                 hi2s->RxXferSize))
 8003f6c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003f6e:	460a      	mov	r2, r1
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	f106 010c 	add.w	r1, r6, #12
 8003f76:	f7fe fbb1 	bl	80026dc <HAL_DMA_Start_IT>
 8003f7a:	b160      	cbz	r0, 8003f96 <HAL_I2S_Receive_DMA+0xa6>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003f7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003f7e:	f043 0308 	orr.w	r3, r3, #8
 8003f82:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003f84:	2301      	movs	r3, #1
 8003f86:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8003f90:	4628      	mov	r0, r5
 8003f92:	b002      	add	sp, #8
 8003f94:	bd70      	pop	{r4, r5, r6, pc}
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003f96:	6823      	ldr	r3, [r4, #0]
 8003f98:	69da      	ldr	r2, [r3, #28]
 8003f9a:	0551      	lsls	r1, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8003f9c:	bf5e      	ittt	pl
 8003f9e:	69da      	ldrpl	r2, [r3, #28]
 8003fa0:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8003fa4:	61da      	strpl	r2, [r3, #28]
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	07d2      	lsls	r2, r2, #31
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003faa:	bf58      	it	pl
 8003fac:	685a      	ldrpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8003fae:	f04f 0500 	mov.w	r5, #0
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003fb2:	bf5c      	itt	pl
 8003fb4:	f042 0201 	orrpl.w	r2, r2, #1
 8003fb8:	605a      	strpl	r2, [r3, #4]
  __HAL_UNLOCK(hi2s);
 8003fba:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  return HAL_OK;
 8003fbe:	e7e7      	b.n	8003f90 <HAL_I2S_Receive_DMA+0xa0>
    return  HAL_ERROR;
 8003fc0:	2501      	movs	r5, #1
 8003fc2:	e7e5      	b.n	8003f90 <HAL_I2S_Receive_DMA+0xa0>
 8003fc4:	080042e1 	.word	0x080042e1
 8003fc8:	080042eb 	.word	0x080042eb
 8003fcc:	08004407 	.word	0x08004407

08003fd0 <HAL_I2S_DMAPause>:
  __HAL_LOCK(hi2s);
 8003fd0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d02d      	beq.n	8004034 <HAL_I2S_DMAPause+0x64>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003fde:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d109      	bne.n	8003ffa <HAL_I2S_DMAPause+0x2a>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003fe6:	6802      	ldr	r2, [r0, #0]
 8003fe8:	6853      	ldr	r3, [r2, #4]
 8003fea:	f023 0302 	bic.w	r3, r3, #2
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003fee:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hi2s);
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	4770      	bx	lr
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003ffa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d104      	bne.n	800400c <HAL_I2S_DMAPause+0x3c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004002:	6802      	ldr	r2, [r0, #0]
 8004004:	6853      	ldr	r3, [r2, #4]
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	e7f0      	b.n	8003fee <HAL_I2S_DMAPause+0x1e>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800400c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004010:	2b05      	cmp	r3, #5
 8004012:	d1ed      	bne.n	8003ff0 <HAL_I2S_DMAPause+0x20>
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004014:	6802      	ldr	r2, [r0, #0]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004016:	4908      	ldr	r1, [pc, #32]	; (8004038 <HAL_I2S_DMAPause+0x68>)
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004018:	6853      	ldr	r3, [r2, #4]
 800401a:	f023 0303 	bic.w	r3, r3, #3
 800401e:	6053      	str	r3, [r2, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <HAL_I2S_DMAPause+0x6c>)
 8004022:	428a      	cmp	r2, r1
 8004024:	bf18      	it	ne
 8004026:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	f022 0203 	bic.w	r2, r2, #3
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	e7dd      	b.n	8003ff0 <HAL_I2S_DMAPause+0x20>
  __HAL_LOCK(hi2s);
 8004034:	2002      	movs	r0, #2
}
 8004036:	4770      	bx	lr
 8004038:	40003800 	.word	0x40003800
 800403c:	40003400 	.word	0x40003400

08004040 <HAL_I2S_DMAResume>:
  __HAL_LOCK(hi2s);
 8004040:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004044:	2b01      	cmp	r3, #1
 8004046:	d039      	beq.n	80040bc <HAL_I2S_DMAResume+0x7c>
 8004048:	2301      	movs	r3, #1
 800404a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800404e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004052:	6803      	ldr	r3, [r0, #0]
 8004054:	2a03      	cmp	r2, #3
 8004056:	d10f      	bne.n	8004078 <HAL_I2S_DMAResume+0x38>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	f042 0202 	orr.w	r2, r2, #2
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800405e:	605a      	str	r2, [r3, #4]
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004060:	69da      	ldr	r2, [r3, #28]
 8004062:	0552      	lsls	r2, r2, #21
    __HAL_I2S_ENABLE(hi2s);
 8004064:	bf5e      	ittt	pl
 8004066:	69da      	ldrpl	r2, [r3, #28]
 8004068:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 800406c:	61da      	strpl	r2, [r3, #28]
  __HAL_UNLOCK(hi2s);
 800406e:	2300      	movs	r3, #0
 8004070:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  return HAL_OK;
 8004074:	4618      	mov	r0, r3
 8004076:	4770      	bx	lr
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004078:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800407c:	2a04      	cmp	r2, #4
 800407e:	d103      	bne.n	8004088 <HAL_I2S_DMAResume+0x48>
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	e7ea      	b.n	800405e <HAL_I2S_DMAResume+0x1e>
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004088:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800408c:	2a05      	cmp	r2, #5
 800408e:	d1e7      	bne.n	8004060 <HAL_I2S_DMAResume+0x20>
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004090:	685a      	ldr	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004092:	490b      	ldr	r1, [pc, #44]	; (80040c0 <HAL_I2S_DMAResume+0x80>)
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004094:	f042 0203 	orr.w	r2, r2, #3
 8004098:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800409a:	4a0a      	ldr	r2, [pc, #40]	; (80040c4 <HAL_I2S_DMAResume+0x84>)
 800409c:	428b      	cmp	r3, r1
 800409e:	bf18      	it	ne
 80040a0:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80040a4:	6851      	ldr	r1, [r2, #4]
 80040a6:	f041 0103 	orr.w	r1, r1, #3
 80040aa:	6051      	str	r1, [r2, #4]
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 80040ac:	69d1      	ldr	r1, [r2, #28]
 80040ae:	0549      	lsls	r1, r1, #21
      __HAL_I2SEXT_ENABLE(hi2s);
 80040b0:	bf5e      	ittt	pl
 80040b2:	69d1      	ldrpl	r1, [r2, #28]
 80040b4:	f441 6180 	orrpl.w	r1, r1, #1024	; 0x400
 80040b8:	61d1      	strpl	r1, [r2, #28]
 80040ba:	e7d1      	b.n	8004060 <HAL_I2S_DMAResume+0x20>
  __HAL_LOCK(hi2s);
 80040bc:	2002      	movs	r0, #2
}
 80040be:	4770      	bx	lr
 80040c0:	40003800 	.word	0x40003800
 80040c4:	40003400 	.word	0x40003400

080040c8 <HAL_I2S_DMAStop>:
{
 80040c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80040cc:	6843      	ldr	r3, [r0, #4]
 80040ce:	f433 7300 	bics.w	r3, r3, #512	; 0x200
{
 80040d2:	b085      	sub	sp, #20
 80040d4:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80040d6:	d16c      	bne.n	80041b2 <HAL_I2S_DMAStop+0xea>
    if (hi2s->hdmatx != NULL)
 80040d8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80040da:	2800      	cmp	r0, #0
 80040dc:	d15f      	bne.n	800419e <HAL_I2S_DMAStop+0xd6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040de:	2500      	movs	r5, #0
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80040e0:	2364      	movs	r3, #100	; 0x64
 80040e2:	2201      	movs	r2, #1
 80040e4:	2102      	movs	r1, #2
 80040e6:	4620      	mov	r0, r4
 80040e8:	f7ff fddd 	bl	8003ca6 <I2S_WaitFlagStateUntilTimeout>
 80040ec:	b130      	cbz	r0, 80040fc <HAL_I2S_DMAStop+0x34>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80040ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80040f0:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80040f8:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80040fc:	2364      	movs	r3, #100	; 0x64
 80040fe:	2200      	movs	r2, #0
 8004100:	2180      	movs	r1, #128	; 0x80
 8004102:	4620      	mov	r0, r4
 8004104:	f7ff fdcf 	bl	8003ca6 <I2S_WaitFlagStateUntilTimeout>
 8004108:	b130      	cbz	r0, 8004118 <HAL_I2S_DMAStop+0x50>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800410a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800410c:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800410e:	f043 0301 	orr.w	r3, r3, #1
 8004112:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004114:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_I2S_DISABLE(hi2s);
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004120:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004122:	2200      	movs	r2, #0
 8004124:	9200      	str	r2, [sp, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	9200      	str	r2, [sp, #0]
 800412a:	9a00      	ldr	r2, [sp, #0]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	f022 0202 	bic.w	r2, r2, #2
 8004132:	605a      	str	r2, [r3, #4]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8004134:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004138:	2b05      	cmp	r3, #5
 800413a:	d129      	bne.n	8004190 <HAL_I2S_DMAStop+0xc8>
      if (hi2s->hdmarx != NULL)
 800413c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800413e:	b138      	cbz	r0, 8004150 <HAL_I2S_DMAStop+0x88>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004140:	f7fe fb06 	bl	8002750 <HAL_DMA_Abort>
 8004144:	b120      	cbz	r0, 8004150 <HAL_I2S_DMAStop+0x88>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004146:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004148:	f043 0308 	orr.w	r3, r3, #8
 800414c:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 800414e:	2501      	movs	r5, #1
      __HAL_I2SEXT_DISABLE(hi2s);
 8004150:	6821      	ldr	r1, [r4, #0]
 8004152:	4a56      	ldr	r2, [pc, #344]	; (80042ac <HAL_I2S_DMAStop+0x1e4>)
 8004154:	4b56      	ldr	r3, [pc, #344]	; (80042b0 <HAL_I2S_DMAStop+0x1e8>)
 8004156:	4291      	cmp	r1, r2
 8004158:	bf18      	it	ne
 800415a:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 800415e:	69da      	ldr	r2, [r3, #28]
 8004160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004164:	61da      	str	r2, [r3, #28]
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8004166:	2200      	movs	r2, #0
 8004168:	9201      	str	r2, [sp, #4]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	9201      	str	r2, [sp, #4]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	9201      	str	r2, [sp, #4]
 8004172:	9a01      	ldr	r2, [sp, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	f022 0201 	bic.w	r2, r2, #1
 800417a:	605a      	str	r2, [r3, #4]
      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800417c:	6862      	ldr	r2, [r4, #4]
 800417e:	2a00      	cmp	r2, #0
 8004180:	d16c      	bne.n	800425c <HAL_I2S_DMAStop+0x194>
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8004182:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8004184:	2501      	movs	r5, #1
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8004186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800418a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800418c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2s->State = HAL_I2S_STATE_READY;
 8004190:	2301      	movs	r3, #1
}
 8004192:	4628      	mov	r0, r5
  hi2s->State = HAL_I2S_STATE_READY;
 8004194:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8004198:	b005      	add	sp, #20
 800419a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800419e:	f7fe fad7 	bl	8002750 <HAL_DMA_Abort>
 80041a2:	2800      	cmp	r0, #0
 80041a4:	d09b      	beq.n	80040de <HAL_I2S_DMAStop+0x16>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80041a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80041a8:	f043 0308 	orr.w	r3, r3, #8
 80041ac:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 80041ae:	2501      	movs	r5, #1
 80041b0:	e796      	b.n	80040e0 <HAL_I2S_DMAStop+0x18>
  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80041b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b6:	d177      	bne.n	80042a8 <HAL_I2S_DMAStop+0x1e0>
    if (hi2s->hdmarx != NULL)
 80041b8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80041ba:	2800      	cmp	r0, #0
 80041bc:	d150      	bne.n	8004260 <HAL_I2S_DMAStop+0x198>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041be:	2500      	movs	r5, #0
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80041c0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80041c4:	2b05      	cmp	r3, #5
 80041c6:	d135      	bne.n	8004234 <HAL_I2S_DMAStop+0x16c>
      if (hi2s->hdmatx != NULL)
 80041c8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80041ca:	b138      	cbz	r0, 80041dc <HAL_I2S_DMAStop+0x114>
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80041cc:	f7fe fac0 	bl	8002750 <HAL_DMA_Abort>
 80041d0:	b120      	cbz	r0, 80041dc <HAL_I2S_DMAStop+0x114>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80041d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80041d4:	f043 0308 	orr.w	r3, r3, #8
 80041d8:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode = HAL_ERROR;
 80041da:	2501      	movs	r5, #1
      tickstart = HAL_GetTick();
 80041dc:	f7fe f936 	bl	800244c <HAL_GetTick>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80041e0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80042ac <HAL_I2S_DMAStop+0x1e4>
 80041e4:	4f32      	ldr	r7, [pc, #200]	; (80042b0 <HAL_I2S_DMAStop+0x1e8>)
      tickstart = HAL_GetTick();
 80041e6:	4606      	mov	r6, r0
          hi2s->State = HAL_I2S_STATE_READY;
 80041e8:	f04f 0901 	mov.w	r9, #1
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	4543      	cmp	r3, r8
 80041f0:	bf0c      	ite	eq
 80041f2:	463b      	moveq	r3, r7
 80041f4:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	079b      	lsls	r3, r3, #30
 80041fc:	d53a      	bpl.n	8004274 <HAL_I2S_DMAStop+0x1ac>
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80041fe:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80042ac <HAL_I2S_DMAStop+0x1e4>
 8004202:	4f2b      	ldr	r7, [pc, #172]	; (80042b0 <HAL_I2S_DMAStop+0x1e8>)
          hi2s->State = HAL_I2S_STATE_READY;
 8004204:	f04f 0901 	mov.w	r9, #1
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	4543      	cmp	r3, r8
 800420c:	bf0c      	ite	eq
 800420e:	463b      	moveq	r3, r7
 8004210:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	f012 0280 	ands.w	r2, r2, #128	; 0x80
 800421a:	d138      	bne.n	800428e <HAL_I2S_DMAStop+0x1c6>
      __HAL_I2SEXT_DISABLE(hi2s);
 800421c:	69d9      	ldr	r1, [r3, #28]
 800421e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004222:	61d9      	str	r1, [r3, #28]
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8004224:	9202      	str	r2, [sp, #8]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	9202      	str	r2, [sp, #8]
 800422a:	9a02      	ldr	r2, [sp, #8]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	f022 0202 	bic.w	r2, r2, #2
 8004232:	605a      	str	r2, [r3, #4]
    __HAL_I2S_DISABLE(hi2s);
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800423c:	61da      	str	r2, [r3, #28]
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800423e:	2200      	movs	r2, #0
 8004240:	9203      	str	r2, [sp, #12]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	9203      	str	r2, [sp, #12]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	9203      	str	r2, [sp, #12]
 800424a:	9a03      	ldr	r2, [sp, #12]
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	f022 0201 	bic.w	r2, r2, #1
 8004252:	605a      	str	r2, [r3, #4]
    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8004254:	6862      	ldr	r2, [r4, #4]
 8004256:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800425a:	d092      	beq.n	8004182 <HAL_I2S_DMAStop+0xba>
      READ_REG((hi2s->Instance)->DR);
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	e797      	b.n	8004190 <HAL_I2S_DMAStop+0xc8>
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8004260:	f7fe fa76 	bl	8002750 <HAL_DMA_Abort>
 8004264:	2800      	cmp	r0, #0
 8004266:	d0aa      	beq.n	80041be <HAL_I2S_DMAStop+0xf6>
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004268:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800426a:	f043 0308 	orr.w	r3, r3, #8
 800426e:	6463      	str	r3, [r4, #68]	; 0x44
        errorcode = HAL_ERROR;
 8004270:	2501      	movs	r5, #1
 8004272:	e7a5      	b.n	80041c0 <HAL_I2S_DMAStop+0xf8>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8004274:	f7fe f8ea 	bl	800244c <HAL_GetTick>
 8004278:	1b80      	subs	r0, r0, r6
 800427a:	2864      	cmp	r0, #100	; 0x64
 800427c:	d9b6      	bls.n	80041ec <HAL_I2S_DMAStop+0x124>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800427e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 8004286:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 8004288:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
          errorcode   = HAL_ERROR;
 800428c:	e7ae      	b.n	80041ec <HAL_I2S_DMAStop+0x124>
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800428e:	f7fe f8dd 	bl	800244c <HAL_GetTick>
 8004292:	1b80      	subs	r0, r0, r6
 8004294:	2864      	cmp	r0, #100	; 0x64
 8004296:	d9b7      	bls.n	8004208 <HAL_I2S_DMAStop+0x140>
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8004298:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6463      	str	r3, [r4, #68]	; 0x44
          errorcode   = HAL_ERROR;
 80042a0:	2501      	movs	r5, #1
          hi2s->State = HAL_I2S_STATE_READY;
 80042a2:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80042a6:	e7af      	b.n	8004208 <HAL_I2S_DMAStop+0x140>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042a8:	2500      	movs	r5, #0
 80042aa:	e771      	b.n	8004190 <HAL_I2S_DMAStop+0xc8>
 80042ac:	40003800 	.word	0x40003800
 80042b0:	40003400 	.word	0x40003400

080042b4 <I2S_DMATxHalfCplt>:
{
 80042b4:	b508      	push	{r3, lr}
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80042b6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80042b8:	f7fd fef2 	bl	80020a0 <HAL_I2S_TxHalfCpltCallback>
}
 80042bc:	bd08      	pop	{r3, pc}

080042be <I2S_DMATxCplt>:
{
 80042be:	b508      	push	{r3, lr}
 80042c0:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80042c2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 80042c4:	69da      	ldr	r2, [r3, #28]
 80042c6:	b942      	cbnz	r2, 80042da <I2S_DMATxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80042c8:	6801      	ldr	r1, [r0, #0]
 80042ca:	684b      	ldr	r3, [r1, #4]
 80042cc:	f023 0302 	bic.w	r3, r3, #2
 80042d0:	604b      	str	r3, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80042d2:	2301      	movs	r3, #1
    hi2s->TxXferCount = 0U;
 80042d4:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80042d6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 80042da:	f7fd fed7 	bl	800208c <HAL_I2S_TxCpltCallback>
}
 80042de:	bd08      	pop	{r3, pc}

080042e0 <I2S_DMARxHalfCplt>:
{
 80042e0:	b508      	push	{r3, lr}
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80042e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80042e4:	f7fe f82c 	bl	8002340 <HAL_I2S_RxHalfCpltCallback>
}
 80042e8:	bd08      	pop	{r3, pc}

080042ea <I2S_DMARxCplt>:
{
 80042ea:	b508      	push	{r3, lr}
 80042ec:	4603      	mov	r3, r0
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80042ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 80042f0:	69da      	ldr	r2, [r3, #28]
 80042f2:	b942      	cbnz	r2, 8004306 <I2S_DMARxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80042f4:	6801      	ldr	r1, [r0, #0]
 80042f6:	684b      	ldr	r3, [r1, #4]
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	604b      	str	r3, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80042fe:	2301      	movs	r3, #1
    hi2s->RxXferCount = 0U;
 8004300:	8642      	strh	r2, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8004302:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 8004306:	f7fe f817 	bl	8002338 <HAL_I2S_RxCpltCallback>
}
 800430a:	bd08      	pop	{r3, pc}

0800430c <I2S_IRQHandler>:
{
 800430c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800430e:	6803      	ldr	r3, [r0, #0]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	9201      	str	r2, [sp, #4]
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004314:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004318:	2a04      	cmp	r2, #4
{
 800431a:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800431c:	d136      	bne.n	800438c <I2S_IRQHandler+0x80>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800431e:	9a01      	ldr	r2, [sp, #4]
 8004320:	07d1      	lsls	r1, r2, #31
 8004322:	d517      	bpl.n	8004354 <I2S_IRQHandler+0x48>
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	0652      	lsls	r2, r2, #25
 8004328:	d514      	bpl.n	8004354 <I2S_IRQHandler+0x48>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800432a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800432c:	68d9      	ldr	r1, [r3, #12]
 800432e:	f822 1b02 	strh.w	r1, [r2], #2
  hi2s->pRxBuffPtr++;
 8004332:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004334:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8004336:	3a01      	subs	r2, #1
 8004338:	b292      	uxth	r2, r2
 800433a:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 800433c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800433e:	b292      	uxth	r2, r2
 8004340:	b942      	cbnz	r2, 8004354 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004348:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800434a:	2301      	movs	r3, #1
 800434c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8004350:	f7fd fff2 	bl	8002338 <HAL_I2S_RxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004354:	9b01      	ldr	r3, [sp, #4]
 8004356:	0659      	lsls	r1, r3, #25
 8004358:	d518      	bpl.n	800438c <I2S_IRQHandler+0x80>
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	0692      	lsls	r2, r2, #26
 8004360:	d514      	bpl.n	800438c <I2S_IRQHandler+0x80>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004368:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800436a:	2200      	movs	r2, #0
 800436c:	9202      	str	r2, [sp, #8]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	9202      	str	r2, [sp, #8]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	9302      	str	r3, [sp, #8]
 8004376:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8004378:	2301      	movs	r3, #1
 800437a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800437e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004380:	f043 0302 	orr.w	r3, r3, #2
 8004384:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8004386:	4620      	mov	r0, r4
 8004388:	f7fd ffe0 	bl	800234c <HAL_I2S_ErrorCallback>
  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800438c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004390:	2b03      	cmp	r3, #3
 8004392:	d136      	bne.n	8004402 <I2S_IRQHandler+0xf6>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004394:	9b01      	ldr	r3, [sp, #4]
 8004396:	079b      	lsls	r3, r3, #30
 8004398:	d519      	bpl.n	80043ce <I2S_IRQHandler+0xc2>
 800439a:	6822      	ldr	r2, [r4, #0]
 800439c:	6853      	ldr	r3, [r2, #4]
 800439e:	0618      	lsls	r0, r3, #24
 80043a0:	d515      	bpl.n	80043ce <I2S_IRQHandler+0xc2>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80043a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043a4:	f833 1b02 	ldrh.w	r1, [r3], #2
 80043a8:	60d1      	str	r1, [r2, #12]
  hi2s->pTxBuffPtr++;
 80043aa:	6263      	str	r3, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 80043ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80043b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	b94b      	cbnz	r3, 80043ce <I2S_IRQHandler+0xc2>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043ba:	6853      	ldr	r3, [r2, #4]
 80043bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043c0:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80043c2:	2301      	movs	r3, #1
 80043c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 80043c8:	4620      	mov	r0, r4
 80043ca:	f7fd fe5f 	bl	800208c <HAL_I2S_TxCpltCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80043ce:	9b01      	ldr	r3, [sp, #4]
 80043d0:	0719      	lsls	r1, r3, #28
 80043d2:	d516      	bpl.n	8004402 <I2S_IRQHandler+0xf6>
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	0692      	lsls	r2, r2, #26
 80043da:	d512      	bpl.n	8004402 <I2S_IRQHandler+0xf6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043e2:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80043e4:	2200      	movs	r2, #0
 80043e6:	9203      	str	r2, [sp, #12]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	9303      	str	r3, [sp, #12]
 80043ec:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 80043ee:	2301      	movs	r3, #1
 80043f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80043f6:	f043 0304 	orr.w	r3, r3, #4
 80043fa:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80043fc:	4620      	mov	r0, r4
 80043fe:	f7fd ffa5 	bl	800234c <HAL_I2S_ErrorCallback>
}
 8004402:	b004      	add	sp, #16
 8004404:	bd10      	pop	{r4, pc}

08004406 <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004406:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8004408:	6802      	ldr	r2, [r0, #0]
{
 800440a:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800440c:	6853      	ldr	r3, [r2, #4]
 800440e:	f023 0303 	bic.w	r3, r3, #3
 8004412:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8004418:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 800441a:	2301      	movs	r3, #1
 800441c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004420:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004422:	f043 0308 	orr.w	r3, r3, #8
 8004426:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8004428:	f7fd ff90 	bl	800234c <HAL_I2S_ErrorCallback>
}
 800442c:	bd08      	pop	{r3, pc}

0800442e <HAL_I2S_GetState>:
  return hi2s->State;
 800442e:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8004432:	4770      	bx	lr

08004434 <HAL_I2SEx_TxRxCpltCallback>:
 8004434:	4770      	bx	lr
	...

08004438 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004438:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800443a:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800443c:	498e      	ldr	r1, [pc, #568]	; (8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800443e:	6893      	ldr	r3, [r2, #8]
{
 8004440:	b086      	sub	sp, #24
 8004442:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004444:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004446:	4b8d      	ldr	r3, [pc, #564]	; (800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8004448:	428a      	cmp	r2, r1
 800444a:	bf18      	it	ne
 800444c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8004450:	6899      	ldr	r1, [r3, #8]
 8004452:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004454:	6851      	ldr	r1, [r2, #4]
 8004456:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004458:	6859      	ldr	r1, [r3, #4]
 800445a:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800445c:	6841      	ldr	r1, [r0, #4]
 800445e:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8004462:	f040 8093 	bne.w	800458c <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004466:	9b00      	ldr	r3, [sp, #0]
 8004468:	0799      	lsls	r1, r3, #30
 800446a:	d51a      	bpl.n	80044a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
 800446c:	9b02      	ldr	r3, [sp, #8]
 800446e:	061b      	lsls	r3, r3, #24
 8004470:	d517      	bpl.n	80044a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004472:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004474:	1c99      	adds	r1, r3, #2
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	6241      	str	r1, [r0, #36]	; 0x24
 800447a:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 800447c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800447e:	3b01      	subs	r3, #1
 8004480:	b29b      	uxth	r3, r3
 8004482:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004484:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	b95b      	cbnz	r3, 80044a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800448a:	6853      	ldr	r3, [r2, #4]
 800448c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004490:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8004492:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8004494:	b29b      	uxth	r3, r3
 8004496:	b923      	cbnz	r3, 80044a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004498:	2301      	movs	r3, #1
 800449a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800449e:	f7ff ffc9 	bl	8004434 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80044a2:	9b01      	ldr	r3, [sp, #4]
 80044a4:	07d8      	lsls	r0, r3, #31
 80044a6:	d522      	bpl.n	80044ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 80044a8:	9b03      	ldr	r3, [sp, #12]
 80044aa:	0659      	lsls	r1, r3, #25
 80044ac:	d51f      	bpl.n	80044ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80044ae:	6821      	ldr	r1, [r4, #0]
 80044b0:	4a71      	ldr	r2, [pc, #452]	; (8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 80044b2:	4b72      	ldr	r3, [pc, #456]	; (800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 80044b4:	4291      	cmp	r1, r2
 80044b6:	bf18      	it	ne
 80044b8:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80044bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80044be:	68d9      	ldr	r1, [r3, #12]
 80044c0:	1c90      	adds	r0, r2, #2
 80044c2:	62e0      	str	r0, [r4, #44]	; 0x2c
 80044c4:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 80044c6:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80044c8:	3a01      	subs	r2, #1
 80044ca:	b292      	uxth	r2, r2
 80044cc:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80044ce:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80044d0:	b292      	uxth	r2, r2
 80044d2:	b962      	cbnz	r2, 80044ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044da:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80044dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	b92b      	cbnz	r3, 80044ee <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044e2:	2301      	movs	r3, #1
 80044e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044e8:	4620      	mov	r0, r4
 80044ea:	f7ff ffa3 	bl	8004434 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80044ee:	9b01      	ldr	r3, [sp, #4]
 80044f0:	065a      	lsls	r2, r3, #25
 80044f2:	d522      	bpl.n	800453a <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
 80044f4:	9b03      	ldr	r3, [sp, #12]
 80044f6:	069b      	lsls	r3, r3, #26
 80044f8:	d51f      	bpl.n	800453a <HAL_I2SEx_FullDuplex_IRQHandler+0x102>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	495e      	ldr	r1, [pc, #376]	; (8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 80044fe:	4a5f      	ldr	r2, [pc, #380]	; (800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8004500:	428b      	cmp	r3, r1
 8004502:	bf18      	it	ne
 8004504:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8004508:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800450a:	6851      	ldr	r1, [r2, #4]
 800450c:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8004510:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004518:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800451a:	2200      	movs	r2, #0
 800451c:	9204      	str	r2, [sp, #16]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	9204      	str	r2, [sp, #16]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	9304      	str	r3, [sp, #16]
 8004526:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8004528:	2301      	movs	r3, #1
 800452a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800452e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004530:	f043 0302 	orr.w	r3, r3, #2
 8004534:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8004536:	f7fd ff09 	bl	800234c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800453a:	9b00      	ldr	r3, [sp, #0]
 800453c:	0718      	lsls	r0, r3, #28
 800453e:	f140 8098 	bpl.w	8004672 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 8004542:	9b02      	ldr	r3, [sp, #8]
 8004544:	0699      	lsls	r1, r3, #26
 8004546:	f140 8094 	bpl.w	8004672 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800454a:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800454c:	494a      	ldr	r1, [pc, #296]	; (8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004554:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004556:	4a49      	ldr	r2, [pc, #292]	; (800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8004558:	428b      	cmp	r3, r1
 800455a:	bf18      	it	ne
 800455c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8004560:	6851      	ldr	r1, [r2, #4]
 8004562:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8004566:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004568:	2200      	movs	r2, #0
 800456a:	9205      	str	r2, [sp, #20]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	9305      	str	r3, [sp, #20]
 8004570:	9b05      	ldr	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8004572:	2301      	movs	r3, #1
 8004574:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004578:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800457a:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800457c:	f043 0304 	orr.w	r3, r3, #4
 8004580:	6463      	str	r3, [r4, #68]	; 0x44
}
 8004582:	b006      	add	sp, #24
 8004584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8004588:	f7fd bee0 	b.w	800234c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800458c:	9a01      	ldr	r2, [sp, #4]
 800458e:	0792      	lsls	r2, r2, #30
 8004590:	d51a      	bpl.n	80045c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
 8004592:	9a03      	ldr	r2, [sp, #12]
 8004594:	0611      	lsls	r1, r2, #24
 8004596:	d517      	bpl.n	80045c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004598:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800459a:	1c91      	adds	r1, r2, #2
 800459c:	8812      	ldrh	r2, [r2, #0]
 800459e:	6241      	str	r1, [r0, #36]	; 0x24
 80045a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80045a2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80045a4:	3a01      	subs	r2, #1
 80045a6:	b292      	uxth	r2, r2
 80045a8:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80045aa:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80045ac:	b292      	uxth	r2, r2
 80045ae:	b95a      	cbnz	r2, 80045c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045b6:	605a      	str	r2, [r3, #4]
    if (hi2s->RxXferCount == 0U)
 80045b8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	b923      	cbnz	r3, 80045c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x190>
      hi2s->State = HAL_I2S_STATE_READY;
 80045be:	2301      	movs	r3, #1
 80045c0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80045c4:	f7ff ff36 	bl	8004434 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80045c8:	9b00      	ldr	r3, [sp, #0]
 80045ca:	07da      	lsls	r2, r3, #31
 80045cc:	d51c      	bpl.n	8004608 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 80045ce:	9b02      	ldr	r3, [sp, #8]
 80045d0:	065b      	lsls	r3, r3, #25
 80045d2:	d519      	bpl.n	8004608 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80045d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80045d6:	6822      	ldr	r2, [r4, #0]
 80045d8:	1c98      	adds	r0, r3, #2
 80045da:	68d1      	ldr	r1, [r2, #12]
 80045dc:	62e0      	str	r0, [r4, #44]	; 0x2c
 80045de:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 80045e0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	8663      	strh	r3, [r4, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80045e8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	b963      	cbnz	r3, 8004608 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045ee:	6853      	ldr	r3, [r2, #4]
 80045f0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80045f4:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 80045f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	b92b      	cbnz	r3, 8004608 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      hi2s->State = HAL_I2S_STATE_READY;
 80045fc:	2301      	movs	r3, #1
 80045fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004602:	4620      	mov	r0, r4
 8004604:	f7ff ff16 	bl	8004434 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004608:	9b00      	ldr	r3, [sp, #0]
 800460a:	0658      	lsls	r0, r3, #25
 800460c:	d51b      	bpl.n	8004646 <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
 800460e:	9b02      	ldr	r3, [sp, #8]
 8004610:	0699      	lsls	r1, r3, #26
 8004612:	d518      	bpl.n	8004646 <HAL_I2SEx_FullDuplex_IRQHandler+0x20e>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004614:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004616:	4918      	ldr	r1, [pc, #96]	; (8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004618:	6853      	ldr	r3, [r2, #4]
 800461a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800461e:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004620:	4b16      	ldr	r3, [pc, #88]	; (800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8004622:	428a      	cmp	r2, r1
 8004624:	bf18      	it	ne
 8004626:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 800462a:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004632:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8004634:	2301      	movs	r3, #1
 8004636:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800463a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800463c:	f043 0302 	orr.w	r3, r3, #2
 8004640:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8004642:	f7fd fe83 	bl	800234c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004646:	9b01      	ldr	r3, [sp, #4]
 8004648:	071a      	lsls	r2, r3, #28
 800464a:	d512      	bpl.n	8004672 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
 800464c:	9b03      	ldr	r3, [sp, #12]
 800464e:	069b      	lsls	r3, r3, #26
 8004650:	d50f      	bpl.n	8004672 <HAL_I2SEx_FullDuplex_IRQHandler+0x23a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004652:	6822      	ldr	r2, [r4, #0]
 8004654:	4908      	ldr	r1, [pc, #32]	; (8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x240>)
 8004656:	4b09      	ldr	r3, [pc, #36]	; (800467c <HAL_I2SEx_FullDuplex_IRQHandler+0x244>)
 8004658:	428a      	cmp	r2, r1
 800465a:	bf18      	it	ne
 800465c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8004660:	6859      	ldr	r1, [r3, #4]
 8004662:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8004666:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004668:	6853      	ldr	r3, [r2, #4]
 800466a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800466e:	6053      	str	r3, [r2, #4]
 8004670:	e77f      	b.n	8004572 <HAL_I2SEx_FullDuplex_IRQHandler+0x13a>
}
 8004672:	b006      	add	sp, #24
 8004674:	bd10      	pop	{r4, pc}
 8004676:	bf00      	nop
 8004678:	40003800 	.word	0x40003800
 800467c:	40003400 	.word	0x40003400

08004680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004680:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004684:	4604      	mov	r4, r0
 8004686:	b340      	cbz	r0, 80046da <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004688:	6803      	ldr	r3, [r0, #0]
 800468a:	07dd      	lsls	r5, r3, #31
 800468c:	d410      	bmi.n	80046b0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	0798      	lsls	r0, r3, #30
 8004692:	d45e      	bmi.n	8004752 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	071a      	lsls	r2, r3, #28
 8004698:	f100 80a0 	bmi.w	80047dc <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	075b      	lsls	r3, r3, #29
 80046a0:	f100 80be 	bmi.w	8004820 <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046a4:	69a0      	ldr	r0, [r4, #24]
 80046a6:	2800      	cmp	r0, #0
 80046a8:	f040 811f 	bne.w	80048ea <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80046ac:	2000      	movs	r0, #0
 80046ae:	e02b      	b.n	8004708 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046b0:	4ba6      	ldr	r3, [pc, #664]	; (800494c <HAL_RCC_OscConfig+0x2cc>)
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	f002 020c 	and.w	r2, r2, #12
 80046b8:	2a04      	cmp	r2, #4
 80046ba:	d007      	beq.n	80046cc <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046c2:	2a08      	cmp	r2, #8
 80046c4:	d10b      	bne.n	80046de <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	0251      	lsls	r1, r2, #9
 80046ca:	d508      	bpl.n	80046de <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046cc:	4b9f      	ldr	r3, [pc, #636]	; (800494c <HAL_RCC_OscConfig+0x2cc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	039a      	lsls	r2, r3, #14
 80046d2:	d5dc      	bpl.n	800468e <HAL_RCC_OscConfig+0xe>
 80046d4:	6863      	ldr	r3, [r4, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1d9      	bne.n	800468e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80046da:	2001      	movs	r0, #1
 80046dc:	e014      	b.n	8004708 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046de:	6862      	ldr	r2, [r4, #4]
 80046e0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80046e4:	d113      	bne.n	800470e <HAL_RCC_OscConfig+0x8e>
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80046ec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80046ee:	f7fd fead 	bl	800244c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f2:	4e96      	ldr	r6, [pc, #600]	; (800494c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80046f4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f6:	6833      	ldr	r3, [r6, #0]
 80046f8:	039b      	lsls	r3, r3, #14
 80046fa:	d4c8      	bmi.n	800468e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046fc:	f7fd fea6 	bl	800244c <HAL_GetTick>
 8004700:	1b40      	subs	r0, r0, r5
 8004702:	2864      	cmp	r0, #100	; 0x64
 8004704:	d9f7      	bls.n	80046f6 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8004706:	2003      	movs	r0, #3
}
 8004708:	b002      	add	sp, #8
 800470a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800470e:	4d8f      	ldr	r5, [pc, #572]	; (800494c <HAL_RCC_OscConfig+0x2cc>)
 8004710:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8004714:	682b      	ldr	r3, [r5, #0]
 8004716:	d107      	bne.n	8004728 <HAL_RCC_OscConfig+0xa8>
 8004718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800471c:	602b      	str	r3, [r5, #0]
 800471e:	682b      	ldr	r3, [r5, #0]
 8004720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004724:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004726:	e7e2      	b.n	80046ee <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800472c:	602b      	str	r3, [r5, #0]
 800472e:	682b      	ldr	r3, [r5, #0]
 8004730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004734:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004736:	2a00      	cmp	r2, #0
 8004738:	d1d9      	bne.n	80046ee <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800473a:	f7fd fe87 	bl	800244c <HAL_GetTick>
 800473e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	039f      	lsls	r7, r3, #14
 8004744:	d5a3      	bpl.n	800468e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004746:	f7fd fe81 	bl	800244c <HAL_GetTick>
 800474a:	1b80      	subs	r0, r0, r6
 800474c:	2864      	cmp	r0, #100	; 0x64
 800474e:	d9f7      	bls.n	8004740 <HAL_RCC_OscConfig+0xc0>
 8004750:	e7d9      	b.n	8004706 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004752:	4b7e      	ldr	r3, [pc, #504]	; (800494c <HAL_RCC_OscConfig+0x2cc>)
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	f012 0f0c 	tst.w	r2, #12
 800475a:	d007      	beq.n	800476c <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004762:	2a08      	cmp	r2, #8
 8004764:	d111      	bne.n	800478a <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	025e      	lsls	r6, r3, #9
 800476a:	d40e      	bmi.n	800478a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800476c:	4b77      	ldr	r3, [pc, #476]	; (800494c <HAL_RCC_OscConfig+0x2cc>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	0795      	lsls	r5, r2, #30
 8004772:	d502      	bpl.n	800477a <HAL_RCC_OscConfig+0xfa>
 8004774:	68e2      	ldr	r2, [r4, #12]
 8004776:	2a01      	cmp	r2, #1
 8004778:	d1af      	bne.n	80046da <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	6921      	ldr	r1, [r4, #16]
 800477e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004782:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8004786:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004788:	e784      	b.n	8004694 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800478a:	68e2      	ldr	r2, [r4, #12]
 800478c:	4b70      	ldr	r3, [pc, #448]	; (8004950 <HAL_RCC_OscConfig+0x2d0>)
 800478e:	b1b2      	cbz	r2, 80047be <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8004790:	2201      	movs	r2, #1
 8004792:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004794:	f7fd fe5a 	bl	800244c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004798:	4d6c      	ldr	r5, [pc, #432]	; (800494c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800479a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	0798      	lsls	r0, r3, #30
 80047a0:	d507      	bpl.n	80047b2 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a2:	682b      	ldr	r3, [r5, #0]
 80047a4:	6922      	ldr	r2, [r4, #16]
 80047a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80047aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80047ae:	602b      	str	r3, [r5, #0]
 80047b0:	e770      	b.n	8004694 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b2:	f7fd fe4b 	bl	800244c <HAL_GetTick>
 80047b6:	1b80      	subs	r0, r0, r6
 80047b8:	2802      	cmp	r0, #2
 80047ba:	d9ef      	bls.n	800479c <HAL_RCC_OscConfig+0x11c>
 80047bc:	e7a3      	b.n	8004706 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80047be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80047c0:	f7fd fe44 	bl	800244c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047c4:	4e61      	ldr	r6, [pc, #388]	; (800494c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80047c6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047c8:	6833      	ldr	r3, [r6, #0]
 80047ca:	0799      	lsls	r1, r3, #30
 80047cc:	f57f af62 	bpl.w	8004694 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047d0:	f7fd fe3c 	bl	800244c <HAL_GetTick>
 80047d4:	1b40      	subs	r0, r0, r5
 80047d6:	2802      	cmp	r0, #2
 80047d8:	d9f6      	bls.n	80047c8 <HAL_RCC_OscConfig+0x148>
 80047da:	e794      	b.n	8004706 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047dc:	6962      	ldr	r2, [r4, #20]
 80047de:	4b5d      	ldr	r3, [pc, #372]	; (8004954 <HAL_RCC_OscConfig+0x2d4>)
 80047e0:	b17a      	cbz	r2, 8004802 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80047e6:	f7fd fe31 	bl	800244c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ea:	4e58      	ldr	r6, [pc, #352]	; (800494c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80047ec:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ee:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80047f0:	079f      	lsls	r7, r3, #30
 80047f2:	f53f af53 	bmi.w	800469c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f6:	f7fd fe29 	bl	800244c <HAL_GetTick>
 80047fa:	1b40      	subs	r0, r0, r5
 80047fc:	2802      	cmp	r0, #2
 80047fe:	d9f6      	bls.n	80047ee <HAL_RCC_OscConfig+0x16e>
 8004800:	e781      	b.n	8004706 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8004802:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004804:	f7fd fe22 	bl	800244c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004808:	4e50      	ldr	r6, [pc, #320]	; (800494c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 800480a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800480c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800480e:	0798      	lsls	r0, r3, #30
 8004810:	f57f af44 	bpl.w	800469c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004814:	f7fd fe1a 	bl	800244c <HAL_GetTick>
 8004818:	1b40      	subs	r0, r0, r5
 800481a:	2802      	cmp	r0, #2
 800481c:	d9f6      	bls.n	800480c <HAL_RCC_OscConfig+0x18c>
 800481e:	e772      	b.n	8004706 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004820:	4b4a      	ldr	r3, [pc, #296]	; (800494c <HAL_RCC_OscConfig+0x2cc>)
 8004822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004824:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8004828:	d128      	bne.n	800487c <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 800482a:	9201      	str	r2, [sp, #4]
 800482c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800482e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004832:	641a      	str	r2, [r3, #64]	; 0x40
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800483e:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004840:	4d45      	ldr	r5, [pc, #276]	; (8004958 <HAL_RCC_OscConfig+0x2d8>)
 8004842:	682b      	ldr	r3, [r5, #0]
 8004844:	05d9      	lsls	r1, r3, #23
 8004846:	d51b      	bpl.n	8004880 <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004848:	68a3      	ldr	r3, [r4, #8]
 800484a:	4d40      	ldr	r5, [pc, #256]	; (800494c <HAL_RCC_OscConfig+0x2cc>)
 800484c:	2b01      	cmp	r3, #1
 800484e:	d127      	bne.n	80048a0 <HAL_RCC_OscConfig+0x220>
 8004850:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004858:	f7fd fdf8 	bl	800244c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485c:	4e3b      	ldr	r6, [pc, #236]	; (800494c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 800485e:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004860:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004864:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004866:	079b      	lsls	r3, r3, #30
 8004868:	d539      	bpl.n	80048de <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 800486a:	2f00      	cmp	r7, #0
 800486c:	f43f af1a 	beq.w	80046a4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004870:	4a36      	ldr	r2, [pc, #216]	; (800494c <HAL_RCC_OscConfig+0x2cc>)
 8004872:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004878:	6413      	str	r3, [r2, #64]	; 0x40
 800487a:	e713      	b.n	80046a4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800487c:	2700      	movs	r7, #0
 800487e:	e7df      	b.n	8004840 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004886:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004888:	f7fd fde0 	bl	800244c <HAL_GetTick>
 800488c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488e:	682b      	ldr	r3, [r5, #0]
 8004890:	05da      	lsls	r2, r3, #23
 8004892:	d4d9      	bmi.n	8004848 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004894:	f7fd fdda 	bl	800244c <HAL_GetTick>
 8004898:	1b80      	subs	r0, r0, r6
 800489a:	2802      	cmp	r0, #2
 800489c:	d9f7      	bls.n	800488e <HAL_RCC_OscConfig+0x20e>
 800489e:	e732      	b.n	8004706 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a0:	2b05      	cmp	r3, #5
 80048a2:	d104      	bne.n	80048ae <HAL_RCC_OscConfig+0x22e>
 80048a4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80048a6:	f043 0304 	orr.w	r3, r3, #4
 80048aa:	672b      	str	r3, [r5, #112]	; 0x70
 80048ac:	e7d0      	b.n	8004850 <HAL_RCC_OscConfig+0x1d0>
 80048ae:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80048b0:	f022 0201 	bic.w	r2, r2, #1
 80048b4:	672a      	str	r2, [r5, #112]	; 0x70
 80048b6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80048b8:	f022 0204 	bic.w	r2, r2, #4
 80048bc:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1ca      	bne.n	8004858 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 80048c2:	f7fd fdc3 	bl	800244c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80048ca:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80048ce:	0798      	lsls	r0, r3, #30
 80048d0:	d5cb      	bpl.n	800486a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048d2:	f7fd fdbb 	bl	800244c <HAL_GetTick>
 80048d6:	1b80      	subs	r0, r0, r6
 80048d8:	4540      	cmp	r0, r8
 80048da:	d9f7      	bls.n	80048cc <HAL_RCC_OscConfig+0x24c>
 80048dc:	e713      	b.n	8004706 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048de:	f7fd fdb5 	bl	800244c <HAL_GetTick>
 80048e2:	1b40      	subs	r0, r0, r5
 80048e4:	4540      	cmp	r0, r8
 80048e6:	d9bd      	bls.n	8004864 <HAL_RCC_OscConfig+0x1e4>
 80048e8:	e70d      	b.n	8004706 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048ea:	4d18      	ldr	r5, [pc, #96]	; (800494c <HAL_RCC_OscConfig+0x2cc>)
 80048ec:	68ab      	ldr	r3, [r5, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d047      	beq.n	8004986 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048f6:	4e19      	ldr	r6, [pc, #100]	; (800495c <HAL_RCC_OscConfig+0x2dc>)
 80048f8:	2300      	movs	r3, #0
 80048fa:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80048fc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048fe:	d135      	bne.n	800496c <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8004900:	f7fd fda4 	bl	800244c <HAL_GetTick>
 8004904:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004906:	682b      	ldr	r3, [r5, #0]
 8004908:	0199      	lsls	r1, r3, #6
 800490a:	d429      	bmi.n	8004960 <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800490c:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8004910:	4313      	orrs	r3, r2
 8004912:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004914:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004918:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800491a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800491e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004920:	0852      	lsrs	r2, r2, #1
 8004922:	3a01      	subs	r2, #1
 8004924:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004928:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800492a:	2301      	movs	r3, #1
 800492c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800492e:	f7fd fd8d 	bl	800244c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004932:	4d06      	ldr	r5, [pc, #24]	; (800494c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8004934:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004936:	682b      	ldr	r3, [r5, #0]
 8004938:	019a      	lsls	r2, r3, #6
 800493a:	f53f aeb7 	bmi.w	80046ac <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800493e:	f7fd fd85 	bl	800244c <HAL_GetTick>
 8004942:	1b00      	subs	r0, r0, r4
 8004944:	2802      	cmp	r0, #2
 8004946:	d9f6      	bls.n	8004936 <HAL_RCC_OscConfig+0x2b6>
 8004948:	e6dd      	b.n	8004706 <HAL_RCC_OscConfig+0x86>
 800494a:	bf00      	nop
 800494c:	40023800 	.word	0x40023800
 8004950:	42470000 	.word	0x42470000
 8004954:	42470e80 	.word	0x42470e80
 8004958:	40007000 	.word	0x40007000
 800495c:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004960:	f7fd fd74 	bl	800244c <HAL_GetTick>
 8004964:	1bc0      	subs	r0, r0, r7
 8004966:	2802      	cmp	r0, #2
 8004968:	d9cd      	bls.n	8004906 <HAL_RCC_OscConfig+0x286>
 800496a:	e6cc      	b.n	8004706 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800496c:	f7fd fd6e 	bl	800244c <HAL_GetTick>
 8004970:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004972:	682b      	ldr	r3, [r5, #0]
 8004974:	019b      	lsls	r3, r3, #6
 8004976:	f57f ae99 	bpl.w	80046ac <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800497a:	f7fd fd67 	bl	800244c <HAL_GetTick>
 800497e:	1b00      	subs	r0, r0, r4
 8004980:	2802      	cmp	r0, #2
 8004982:	d9f6      	bls.n	8004972 <HAL_RCC_OscConfig+0x2f2>
 8004984:	e6bf      	b.n	8004706 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004986:	2801      	cmp	r0, #1
 8004988:	f43f aebe 	beq.w	8004708 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 800498c:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800498e:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004990:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004994:	4291      	cmp	r1, r2
 8004996:	f47f aea0 	bne.w	80046da <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800499a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800499c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a0:	428a      	cmp	r2, r1
 80049a2:	f47f ae9a 	bne.w	80046da <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049a8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80049ac:	401a      	ands	r2, r3
 80049ae:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80049b2:	f47f ae92 	bne.w	80046da <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80049b8:	0852      	lsrs	r2, r2, #1
 80049ba:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80049be:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049c0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80049c4:	f47f ae89 	bne.w	80046da <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80049ca:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049ce:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80049d2:	f43f ae6b 	beq.w	80046ac <HAL_RCC_OscConfig+0x2c>
 80049d6:	e680      	b.n	80046da <HAL_RCC_OscConfig+0x5a>

080049d8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049d8:	4913      	ldr	r1, [pc, #76]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80049da:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049dc:	688b      	ldr	r3, [r1, #8]
 80049de:	f003 030c 	and.w	r3, r3, #12
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d01c      	beq.n	8004a20 <HAL_RCC_GetSysClockFreq+0x48>
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d11c      	bne.n	8004a24 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049ea:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ec:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ee:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049f0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f4:	bf14      	ite	ne
 80049f6:	480d      	ldrne	r0, [pc, #52]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f8:	480d      	ldreq	r0, [pc, #52]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049fa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80049fe:	bf18      	it	ne
 8004a00:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a02:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a06:	fba1 0100 	umull	r0, r1, r1, r0
 8004a0a:	f7fb fbdd 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x50>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004a16:	3301      	adds	r3, #1
 8004a18:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004a1a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004a1e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a20:	4802      	ldr	r0, [pc, #8]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x54>)
 8004a22:	e7fc      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8004a24:	4802      	ldr	r0, [pc, #8]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8004a26:	e7fa      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x46>
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	007a1200 	.word	0x007a1200
 8004a30:	00f42400 	.word	0x00f42400

08004a34 <HAL_RCC_ClockConfig>:
{
 8004a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a38:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	b910      	cbnz	r0, 8004a44 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004a3e:	2001      	movs	r0, #1
}
 8004a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a44:	4b44      	ldr	r3, [pc, #272]	; (8004b58 <HAL_RCC_ClockConfig+0x124>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	f002 0207 	and.w	r2, r2, #7
 8004a4c:	428a      	cmp	r2, r1
 8004a4e:	d328      	bcc.n	8004aa2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a50:	6822      	ldr	r2, [r4, #0]
 8004a52:	0797      	lsls	r7, r2, #30
 8004a54:	d42d      	bmi.n	8004ab2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a56:	07d0      	lsls	r0, r2, #31
 8004a58:	d441      	bmi.n	8004ade <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a5a:	4b3f      	ldr	r3, [pc, #252]	; (8004b58 <HAL_RCC_ClockConfig+0x124>)
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	f002 0207 	and.w	r2, r2, #7
 8004a62:	42aa      	cmp	r2, r5
 8004a64:	d866      	bhi.n	8004b34 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a66:	6822      	ldr	r2, [r4, #0]
 8004a68:	0751      	lsls	r1, r2, #29
 8004a6a:	d46c      	bmi.n	8004b46 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a6c:	0713      	lsls	r3, r2, #28
 8004a6e:	d507      	bpl.n	8004a80 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a70:	4a3a      	ldr	r2, [pc, #232]	; (8004b5c <HAL_RCC_ClockConfig+0x128>)
 8004a72:	6921      	ldr	r1, [r4, #16]
 8004a74:	6893      	ldr	r3, [r2, #8]
 8004a76:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004a7a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004a7e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a80:	f7ff ffaa 	bl	80049d8 <HAL_RCC_GetSysClockFreq>
 8004a84:	4b35      	ldr	r3, [pc, #212]	; (8004b5c <HAL_RCC_ClockConfig+0x128>)
 8004a86:	4a36      	ldr	r2, [pc, #216]	; (8004b60 <HAL_RCC_ClockConfig+0x12c>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004a8e:	5cd3      	ldrb	r3, [r2, r3]
 8004a90:	40d8      	lsrs	r0, r3
 8004a92:	4b34      	ldr	r3, [pc, #208]	; (8004b64 <HAL_RCC_ClockConfig+0x130>)
 8004a94:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8004a96:	4b34      	ldr	r3, [pc, #208]	; (8004b68 <HAL_RCC_ClockConfig+0x134>)
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	f7fd fc93 	bl	80023c4 <HAL_InitTick>
  return HAL_OK;
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	e7ce      	b.n	8004a40 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa2:	b2ca      	uxtb	r2, r1
 8004aa4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	428b      	cmp	r3, r1
 8004aae:	d1c6      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xa>
 8004ab0:	e7ce      	b.n	8004a50 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab2:	4b2a      	ldr	r3, [pc, #168]	; (8004b5c <HAL_RCC_ClockConfig+0x128>)
 8004ab4:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ab8:	bf1e      	ittt	ne
 8004aba:	6899      	ldrne	r1, [r3, #8]
 8004abc:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8004ac0:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac2:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ac4:	bf42      	ittt	mi
 8004ac6:	6899      	ldrmi	r1, [r3, #8]
 8004ac8:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8004acc:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ace:	4923      	ldr	r1, [pc, #140]	; (8004b5c <HAL_RCC_ClockConfig+0x128>)
 8004ad0:	68a0      	ldr	r0, [r4, #8]
 8004ad2:	688b      	ldr	r3, [r1, #8]
 8004ad4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ad8:	4303      	orrs	r3, r0
 8004ada:	608b      	str	r3, [r1, #8]
 8004adc:	e7bb      	b.n	8004a56 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ade:	6862      	ldr	r2, [r4, #4]
 8004ae0:	4b1e      	ldr	r3, [pc, #120]	; (8004b5c <HAL_RCC_ClockConfig+0x128>)
 8004ae2:	2a01      	cmp	r2, #1
 8004ae4:	d11c      	bne.n	8004b20 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aec:	d0a7      	beq.n	8004a3e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aee:	4e1b      	ldr	r6, [pc, #108]	; (8004b5c <HAL_RCC_ClockConfig+0x128>)
 8004af0:	68b3      	ldr	r3, [r6, #8]
 8004af2:	f023 0303 	bic.w	r3, r3, #3
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004afa:	f7fd fca7 	bl	800244c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afe:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004b02:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b04:	68b3      	ldr	r3, [r6, #8]
 8004b06:	6862      	ldr	r2, [r4, #4]
 8004b08:	f003 030c 	and.w	r3, r3, #12
 8004b0c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004b10:	d0a3      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b12:	f7fd fc9b 	bl	800244c <HAL_GetTick>
 8004b16:	1bc0      	subs	r0, r0, r7
 8004b18:	4540      	cmp	r0, r8
 8004b1a:	d9f3      	bls.n	8004b04 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8004b1c:	2003      	movs	r0, #3
 8004b1e:	e78f      	b.n	8004a40 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b20:	1e91      	subs	r1, r2, #2
 8004b22:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b24:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b26:	d802      	bhi.n	8004b2e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b28:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004b2c:	e7de      	b.n	8004aec <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2e:	f013 0f02 	tst.w	r3, #2
 8004b32:	e7db      	b.n	8004aec <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b34:	b2ea      	uxtb	r2, r5
 8004b36:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	42ab      	cmp	r3, r5
 8004b40:	f47f af7d 	bne.w	8004a3e <HAL_RCC_ClockConfig+0xa>
 8004b44:	e78f      	b.n	8004a66 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b46:	4905      	ldr	r1, [pc, #20]	; (8004b5c <HAL_RCC_ClockConfig+0x128>)
 8004b48:	68e0      	ldr	r0, [r4, #12]
 8004b4a:	688b      	ldr	r3, [r1, #8]
 8004b4c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004b50:	4303      	orrs	r3, r0
 8004b52:	608b      	str	r3, [r1, #8]
 8004b54:	e78a      	b.n	8004a6c <HAL_RCC_ClockConfig+0x38>
 8004b56:	bf00      	nop
 8004b58:	40023c00 	.word	0x40023c00
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	0800bd48 	.word	0x0800bd48
 8004b64:	200000c0 	.word	0x200000c0
 8004b68:	200000c8 	.word	0x200000c8

08004b6c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b6c:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004b6e:	4a05      	ldr	r2, [pc, #20]	; (8004b84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004b76:	5cd3      	ldrb	r3, [r2, r3]
 8004b78:	4a03      	ldr	r2, [pc, #12]	; (8004b88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004b7a:	6810      	ldr	r0, [r2, #0]
}
 8004b7c:	40d8      	lsrs	r0, r3
 8004b7e:	4770      	bx	lr
 8004b80:	40023800 	.word	0x40023800
 8004b84:	0800bd58 	.word	0x0800bd58
 8004b88:	200000c0 	.word	0x200000c0

08004b8c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b8c:	6803      	ldr	r3, [r0, #0]
 8004b8e:	f013 0f05 	tst.w	r3, #5
{
 8004b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b94:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b96:	d105      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	f013 0302 	ands.w	r3, r3, #2
 8004b9e:	d129      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	e025      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    __HAL_RCC_PLLI2S_DISABLE();
 8004ba4:	4f41      	ldr	r7, [pc, #260]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ba6:	4e42      	ldr	r6, [pc, #264]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8004ba8:	2300      	movs	r3, #0
 8004baa:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004bac:	f7fd fc4e 	bl	800244c <HAL_GetTick>
 8004bb0:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bb2:	6833      	ldr	r3, [r6, #0]
 8004bb4:	011b      	lsls	r3, r3, #4
 8004bb6:	d415      	bmi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004bb8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8004bbc:	071b      	lsls	r3, r3, #28
 8004bbe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004bc2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004bca:	f7fd fc3f 	bl	800244c <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bce:	4e38      	ldr	r6, [pc, #224]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8004bd0:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bd2:	6833      	ldr	r3, [r6, #0]
 8004bd4:	0118      	lsls	r0, r3, #4
 8004bd6:	d4df      	bmi.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bd8:	f7fd fc38 	bl	800244c <HAL_GetTick>
 8004bdc:	1b40      	subs	r0, r0, r5
 8004bde:	2802      	cmp	r0, #2
 8004be0:	d9f7      	bls.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8004be2:	e004      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004be4:	f7fd fc32 	bl	800244c <HAL_GetTick>
 8004be8:	1b40      	subs	r0, r0, r5
 8004bea:	2802      	cmp	r0, #2
 8004bec:	d9e1      	bls.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8004bee:	2003      	movs	r0, #3
}
 8004bf0:	b003      	add	sp, #12
 8004bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	9301      	str	r3, [sp, #4]
 8004bf8:	4b2d      	ldr	r3, [pc, #180]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8004bfa:	4d2e      	ldr	r5, [pc, #184]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bfe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c02:	641a      	str	r2, [r3, #64]	; 0x40
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c0a:	9301      	str	r3, [sp, #4]
 8004c0c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004c0e:	682b      	ldr	r3, [r5, #0]
 8004c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c14:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004c16:	f7fd fc19 	bl	800244c <HAL_GetTick>
 8004c1a:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	05d9      	lsls	r1, r3, #23
 8004c20:	d51a      	bpl.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c22:	4d23      	ldr	r5, [pc, #140]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8004c24:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c26:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004c2a:	d11b      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c2c:	68e3      	ldr	r3, [r4, #12]
 8004c2e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004c32:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004c36:	4a1e      	ldr	r2, [pc, #120]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8004c38:	d133      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004c3a:	6891      	ldr	r1, [r2, #8]
 8004c3c:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8004c40:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004c44:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004c48:	4301      	orrs	r1, r0
 8004c4a:	6091      	str	r1, [r2, #8]
 8004c4c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c52:	430b      	orrs	r3, r1
 8004c54:	6713      	str	r3, [r2, #112]	; 0x70
 8004c56:	e7a3      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c58:	f7fd fbf8 	bl	800244c <HAL_GetTick>
 8004c5c:	1b80      	subs	r0, r0, r6
 8004c5e:	2802      	cmp	r0, #2
 8004c60:	d9dc      	bls.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004c62:	e7c4      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c64:	68e2      	ldr	r2, [r4, #12]
 8004c66:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d0de      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c6e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c70:	4a11      	ldr	r2, [pc, #68]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8004c72:	2101      	movs	r1, #1
 8004c74:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8004c7e:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c80:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004c82:	07da      	lsls	r2, r3, #31
 8004c84:	d5d2      	bpl.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
        tickstart = HAL_GetTick();
 8004c86:	f7fd fbe1 	bl	800244c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c8a:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004c8e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c90:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004c92:	079b      	lsls	r3, r3, #30
 8004c94:	d4ca      	bmi.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c96:	f7fd fbd9 	bl	800244c <HAL_GetTick>
 8004c9a:	1b80      	subs	r0, r0, r6
 8004c9c:	42b8      	cmp	r0, r7
 8004c9e:	d9f7      	bls.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004ca0:	e7a5      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ca2:	6891      	ldr	r1, [r2, #8]
 8004ca4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004ca8:	e7cf      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004caa:	bf00      	nop
 8004cac:	42470068 	.word	0x42470068
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	40007000 	.word	0x40007000
 8004cb8:	42470e40 	.word	0x42470e40

08004cbc <HAL_RCCEx_GetPeriphCLKConfig>:

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8004cbc:	4a0a      	ldr	r2, [pc, #40]	; (8004ce8 <HAL_RCCEx_GetPeriphCLKConfig+0x2c>)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	6003      	str	r3, [r0, #0]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8004cc2:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8004cc6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004cca:	6043      	str	r3, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ccc:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8004cd0:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8004cd4:	6083      	str	r3, [r0, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8004cd6:	6891      	ldr	r1, [r2, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8004cd8:	6f13      	ldr	r3, [r2, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8004cda:	f401 12f8 	and.w	r2, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8004cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60c3      	str	r3, [r0, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8004ce6:	4770      	bx	lr
 8004ce8:	40023800 	.word	0x40023800

08004cec <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8004cec:	2801      	cmp	r0, #1
 8004cee:	d11a      	bne.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004cf0:	4b0e      	ldr	r3, [pc, #56]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8004cf2:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8004cf4:	0212      	lsls	r2, r2, #8
 8004cf6:	d416      	bmi.n	8004d26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004cf8:	685a      	ldr	r2, [r3, #4]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004cfa:	490c      	ldr	r1, [pc, #48]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004cfc:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004cfe:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d00:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d04:	bf4c      	ite	mi
 8004d06:	4b0a      	ldrmi	r3, [pc, #40]	; (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x44>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d08:	4b0a      	ldrpl	r3, [pc, #40]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x48>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d0a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d0e:	fbb3 f3f0 	udiv	r3, r3, r0
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d12:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d16:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8004d1a:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d1c:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8004d20:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8004d24:	4770      	bx	lr
 8004d26:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40023800 	.word	0x40023800
 8004d30:	007a1200 	.word	0x007a1200
 8004d34:	00f42400 	.word	0x00f42400

08004d38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3c:	461f      	mov	r7, r3
 8004d3e:	4689      	mov	r9, r1
 8004d40:	4690      	mov	r8, r2
 8004d42:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d44:	f7fd fb82 	bl	800244c <HAL_GetTick>
 8004d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d4a:	443b      	add	r3, r7
 8004d4c:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8004d4e:	f7fd fb7d 	bl	800244c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d52:	4b26      	ldr	r3, [pc, #152]	; (8004dec <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8004d54:	681e      	ldr	r6, [r3, #0]
 8004d56:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8004d5a:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8004d5c:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d5e:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d60:	6822      	ldr	r2, [r4, #0]
 8004d62:	6893      	ldr	r3, [r2, #8]
 8004d64:	ea39 0303 	bics.w	r3, r9, r3
 8004d68:	bf0c      	ite	eq
 8004d6a:	2301      	moveq	r3, #1
 8004d6c:	2300      	movne	r3, #0
 8004d6e:	4543      	cmp	r3, r8
 8004d70:	d101      	bne.n	8004d76 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 8004d72:	2000      	movs	r0, #0
 8004d74:	e02e      	b.n	8004dd4 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8004d76:	1c7b      	adds	r3, r7, #1
 8004d78:	d0f3      	beq.n	8004d62 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d7a:	f7fd fb67 	bl	800244c <HAL_GetTick>
 8004d7e:	eba0 000a 	sub.w	r0, r0, sl
 8004d82:	42a8      	cmp	r0, r5
 8004d84:	d329      	bcc.n	8004dda <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d8e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d90:	6862      	ldr	r2, [r4, #4]
 8004d92:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004d96:	d10a      	bne.n	8004dae <SPI_WaitFlagStateUntilTimeout+0x76>
 8004d98:	68a2      	ldr	r2, [r4, #8]
 8004d9a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004d9e:	d002      	beq.n	8004da6 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004da0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004da4:	d103      	bne.n	8004dae <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dac:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004db0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004db4:	d107      	bne.n	8004dc6 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dc4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8004dd2:	2003      	movs	r0, #3
}
 8004dd4:	b002      	add	sp, #8
 8004dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 8004dda:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004ddc:	2b00      	cmp	r3, #0
      count--;
 8004dde:	9b01      	ldr	r3, [sp, #4]
 8004de0:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8004de4:	bf08      	it	eq
 8004de6:	2500      	moveq	r5, #0
      count--;
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	e7b9      	b.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0x28>
 8004dec:	200000c0 	.word	0x200000c0

08004df0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004df0:	b530      	push	{r4, r5, lr}
 8004df2:	460b      	mov	r3, r1
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004df4:	4913      	ldr	r1, [pc, #76]	; (8004e44 <SPI_EndRxTxTransaction+0x54>)
 8004df6:	4d14      	ldr	r5, [pc, #80]	; (8004e48 <SPI_EndRxTxTransaction+0x58>)
 8004df8:	6809      	ldr	r1, [r1, #0]
 8004dfa:	fbb1 f5f5 	udiv	r5, r1, r5
{
 8004dfe:	b085      	sub	sp, #20
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e04:	4369      	muls	r1, r5
 8004e06:	9103      	str	r1, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e08:	6841      	ldr	r1, [r0, #4]
 8004e0a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 8004e0e:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e10:	d10c      	bne.n	8004e2c <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e12:	9200      	str	r2, [sp, #0]
 8004e14:	2180      	movs	r1, #128	; 0x80
 8004e16:	2200      	movs	r2, #0
 8004e18:	f7ff ff8e 	bl	8004d38 <SPI_WaitFlagStateUntilTimeout>
 8004e1c:	b178      	cbz	r0, 8004e3e <SPI_EndRxTxTransaction+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e20:	f043 0320 	orr.w	r3, r3, #32
 8004e24:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e26:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8004e28:	b005      	add	sp, #20
 8004e2a:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8004e2c:	9b03      	ldr	r3, [sp, #12]
 8004e2e:	b133      	cbz	r3, 8004e3e <SPI_EndRxTxTransaction+0x4e>
      count--;
 8004e30:	9b03      	ldr	r3, [sp, #12]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	061b      	lsls	r3, r3, #24
 8004e3c:	d4f6      	bmi.n	8004e2c <SPI_EndRxTxTransaction+0x3c>
  return HAL_OK;
 8004e3e:	2000      	movs	r0, #0
 8004e40:	e7f2      	b.n	8004e28 <SPI_EndRxTxTransaction+0x38>
 8004e42:	bf00      	nop
 8004e44:	200000c0 	.word	0x200000c0
 8004e48:	016e3600 	.word	0x016e3600

08004e4c <HAL_SPI_MspInit>:
}
 8004e4c:	4770      	bx	lr

08004e4e <HAL_SPI_Init>:
{
 8004e4e:	b538      	push	{r3, r4, r5, lr}
  if (hspi == NULL)
 8004e50:	4604      	mov	r4, r0
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d05a      	beq.n	8004f0c <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e56:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d153      	bne.n	8004f04 <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e5c:	6842      	ldr	r2, [r0, #4]
 8004e5e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004e62:	d000      	beq.n	8004e66 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e64:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e66:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004e6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e6e:	b923      	cbnz	r3, 8004e7a <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8004e70:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004e74:	4620      	mov	r0, r4
 8004e76:	f7ff ffe9 	bl	8004e4c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8004e7a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e7c:	68a5      	ldr	r5, [r4, #8]
 8004e7e:	69a2      	ldr	r2, [r4, #24]
 8004e80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hspi->State = HAL_SPI_STATE_BUSY;
 8004e82:	2302      	movs	r3, #2
 8004e84:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004e88:	680b      	ldr	r3, [r1, #0]
 8004e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e8e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e90:	6863      	ldr	r3, [r4, #4]
 8004e92:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 8004e96:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004e9a:	432b      	orrs	r3, r5
 8004e9c:	68e5      	ldr	r5, [r4, #12]
 8004e9e:	f405 6500 	and.w	r5, r5, #2048	; 0x800
 8004ea2:	432b      	orrs	r3, r5
 8004ea4:	6925      	ldr	r5, [r4, #16]
 8004ea6:	f005 0502 	and.w	r5, r5, #2
 8004eaa:	432b      	orrs	r3, r5
 8004eac:	6965      	ldr	r5, [r4, #20]
 8004eae:	f005 0501 	and.w	r5, r5, #1
 8004eb2:	432b      	orrs	r3, r5
 8004eb4:	f402 7500 	and.w	r5, r2, #512	; 0x200
 8004eb8:	432b      	orrs	r3, r5
 8004eba:	69e5      	ldr	r5, [r4, #28]
 8004ebc:	f005 0538 	and.w	r5, r5, #56	; 0x38
 8004ec0:	432b      	orrs	r3, r5
 8004ec2:	6a25      	ldr	r5, [r4, #32]
 8004ec4:	f005 0580 	and.w	r5, r5, #128	; 0x80
 8004ec8:	432b      	orrs	r3, r5
 8004eca:	f400 5500 	and.w	r5, r0, #8192	; 0x2000
 8004ece:	432b      	orrs	r3, r5
 8004ed0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ed4:	0c12      	lsrs	r2, r2, #16
 8004ed6:	f003 0310 	and.w	r3, r3, #16
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004eda:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ede:	f002 0204 	and.w	r2, r2, #4
 8004ee2:	ea42 0203 	orr.w	r2, r2, r3
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8004ee6:	bf08      	it	eq
 8004ee8:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004eea:	604a      	str	r2, [r1, #4]
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8004eec:	bf08      	it	eq
 8004eee:	610b      	streq	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ef0:	69cb      	ldr	r3, [r1, #28]
 8004ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ef6:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ef8:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8004efa:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004efc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004efe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8004f02:	bd38      	pop	{r3, r4, r5, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f04:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f0a:	e7ac      	b.n	8004e66 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	e7f8      	b.n	8004f02 <HAL_SPI_Init+0xb4>

08004f10 <HAL_SPI_MspDeInit>:
 8004f10:	4770      	bx	lr

08004f12 <HAL_SPI_DeInit>:
{
 8004f12:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8004f14:	4604      	mov	r4, r0
 8004f16:	b180      	cbz	r0, 8004f3a <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8004f18:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004f20:	6813      	ldr	r3, [r2, #0]
 8004f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f26:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8004f28:	f7ff fff2 	bl	8004f10 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8004f30:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 8004f34:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 8004f38:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	e7fc      	b.n	8004f38 <HAL_SPI_DeInit+0x26>

08004f3e <HAL_SPI_TransmitReceive>:
{
 8004f3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f42:	b085      	sub	sp, #20
 8004f44:	4698      	mov	r8, r3
  __IO uint32_t tmpreg = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hspi);
 8004f4a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8004f4e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8004f50:	2b01      	cmp	r3, #1
{
 8004f52:	4604      	mov	r4, r0
 8004f54:	460d      	mov	r5, r1
 8004f56:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8004f58:	f000 8133 	beq.w	80051c2 <HAL_SPI_TransmitReceive+0x284>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004f62:	f7fd fa73 	bl	800244c <HAL_GetTick>
  tmp_state           = hspi->State;
 8004f66:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8004f6a:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f6c:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8004f6e:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8004f70:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f72:	d00a      	beq.n	8004f8a <HAL_SPI_TransmitReceive+0x4c>
 8004f74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f78:	f040 8121 	bne.w	80051be <HAL_SPI_TransmitReceive+0x280>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f7c:	68a2      	ldr	r2, [r4, #8]
 8004f7e:	2a00      	cmp	r2, #0
 8004f80:	f040 811d 	bne.w	80051be <HAL_SPI_TransmitReceive+0x280>
 8004f84:	2904      	cmp	r1, #4
 8004f86:	f040 811a 	bne.w	80051be <HAL_SPI_TransmitReceive+0x280>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f8a:	2d00      	cmp	r5, #0
 8004f8c:	f000 8109 	beq.w	80051a2 <HAL_SPI_TransmitReceive+0x264>
 8004f90:	f1b9 0f00 	cmp.w	r9, #0
 8004f94:	f000 8105 	beq.w	80051a2 <HAL_SPI_TransmitReceive+0x264>
 8004f98:	f1b8 0f00 	cmp.w	r8, #0
 8004f9c:	f000 8101 	beq.w	80051a2 <HAL_SPI_TransmitReceive+0x264>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fa0:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fa4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fa6:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004faa:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fac:	bf1c      	itt	ne
 8004fae:	2205      	movne	r2, #5
 8004fb0:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fb4:	2200      	movs	r2, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fb6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fba:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8004fbc:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004fc0:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004fc4:	6822      	ldr	r2, [r4, #0]
 8004fc6:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fca:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004fcc:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004fd0:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fd4:	d107      	bne.n	8004fe6 <HAL_SPI_TransmitReceive+0xa8>
    SPI_RESET_CRC(hspi);
 8004fd6:	6811      	ldr	r1, [r2, #0]
 8004fd8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8004fdc:	6011      	str	r1, [r2, #0]
 8004fde:	6811      	ldr	r1, [r2, #0]
 8004fe0:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8004fe4:	6011      	str	r1, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fe6:	6811      	ldr	r1, [r2, #0]
 8004fe8:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8004fea:	bf5e      	ittt	pl
 8004fec:	6811      	ldrpl	r1, [r2, #0]
 8004fee:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
 8004ff2:	6011      	strpl	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ff4:	68e1      	ldr	r1, [r4, #12]
 8004ff6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004ffa:	d168      	bne.n	80050ce <HAL_SPI_TransmitReceive+0x190>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ffc:	b113      	cbz	r3, 8005004 <HAL_SPI_TransmitReceive+0xc6>
 8004ffe:	f1b8 0f01 	cmp.w	r8, #1
 8005002:	d107      	bne.n	8005014 <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005004:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005008:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 800500a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800500c:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800500e:	3b01      	subs	r3, #1
 8005010:	b29b      	uxth	r3, r3
 8005012:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8005014:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005016:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005018:	b29b      	uxth	r3, r3
 800501a:	b9b3      	cbnz	r3, 800504a <HAL_SPI_TransmitReceive+0x10c>
 800501c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800501e:	b29b      	uxth	r3, r3
 8005020:	b99b      	cbnz	r3, 800504a <HAL_SPI_TransmitReceive+0x10c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005022:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005028:	f040 80a6 	bne.w	8005178 <HAL_SPI_TransmitReceive+0x23a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800502c:	2201      	movs	r2, #1
 800502e:	9700      	str	r7, [sp, #0]
 8005030:	4633      	mov	r3, r6
 8005032:	4611      	mov	r1, r2
 8005034:	4620      	mov	r0, r4
 8005036:	f7ff fe7f 	bl	8004d38 <SPI_WaitFlagStateUntilTimeout>
 800503a:	2800      	cmp	r0, #0
 800503c:	f000 8098 	beq.w	8005170 <HAL_SPI_TransmitReceive+0x232>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005040:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005042:	f043 0302 	orr.w	r3, r3, #2
 8005046:	6563      	str	r3, [r4, #84]	; 0x54
 8005048:	e020      	b.n	800508c <HAL_SPI_TransmitReceive+0x14e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800504a:	6822      	ldr	r2, [r4, #0]
 800504c:	6893      	ldr	r3, [r2, #8]
 800504e:	079b      	lsls	r3, r3, #30
 8005050:	d504      	bpl.n	800505c <HAL_SPI_TransmitReceive+0x11e>
 8005052:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005054:	b29b      	uxth	r3, r3
 8005056:	b10b      	cbz	r3, 800505c <HAL_SPI_TransmitReceive+0x11e>
 8005058:	bb1d      	cbnz	r5, 80050a2 <HAL_SPI_TransmitReceive+0x164>
{
 800505a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800505c:	6891      	ldr	r1, [r2, #8]
 800505e:	f011 0101 	ands.w	r1, r1, #1
 8005062:	d00c      	beq.n	800507e <HAL_SPI_TransmitReceive+0x140>
 8005064:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005066:	b29b      	uxth	r3, r3
 8005068:	b14b      	cbz	r3, 800507e <HAL_SPI_TransmitReceive+0x140>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800506a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800506c:	68d2      	ldr	r2, [r2, #12]
 800506e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005072:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005074:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005076:	3b01      	subs	r3, #1
 8005078:	b29b      	uxth	r3, r3
 800507a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800507c:	460d      	mov	r5, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800507e:	f7fd f9e5 	bl	800244c <HAL_GetTick>
 8005082:	1bc0      	subs	r0, r0, r7
 8005084:	42b0      	cmp	r0, r6
 8005086:	d3c6      	bcc.n	8005016 <HAL_SPI_TransmitReceive+0xd8>
 8005088:	1c70      	adds	r0, r6, #1
 800508a:	d0c4      	beq.n	8005016 <HAL_SPI_TransmitReceive+0xd8>
      errorcode = HAL_TIMEOUT;
 800508c:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 800508e:	2301      	movs	r3, #1
 8005090:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005094:	2300      	movs	r3, #0
 8005096:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800509a:	4628      	mov	r0, r5
 800509c:	b005      	add	sp, #20
 800509e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050a4:	f833 1b02 	ldrh.w	r1, [r3], #2
 80050a8:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050aa:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80050ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80050b4:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80050b6:	b2ad      	uxth	r5, r5
 80050b8:	2d00      	cmp	r5, #0
 80050ba:	d1ce      	bne.n	800505a <HAL_SPI_TransmitReceive+0x11c>
 80050bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80050be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c2:	d1ca      	bne.n	800505a <HAL_SPI_TransmitReceive+0x11c>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80050c4:	6813      	ldr	r3, [r2, #0]
 80050c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050ca:	6013      	str	r3, [r2, #0]
 80050cc:	e7c6      	b.n	800505c <HAL_SPI_TransmitReceive+0x11e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050ce:	b113      	cbz	r3, 80050d6 <HAL_SPI_TransmitReceive+0x198>
 80050d0:	f1b8 0f01 	cmp.w	r8, #1
 80050d4:	d108      	bne.n	80050e8 <HAL_SPI_TransmitReceive+0x1aa>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050d6:	782b      	ldrb	r3, [r5, #0]
 80050d8:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050dc:	3301      	adds	r3, #1
 80050de:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80050e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80050e8:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	b91b      	cbnz	r3, 80050f8 <HAL_SPI_TransmitReceive+0x1ba>
 80050f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d094      	beq.n	8005022 <HAL_SPI_TransmitReceive+0xe4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050f8:	6822      	ldr	r2, [r4, #0]
 80050fa:	6893      	ldr	r3, [r2, #8]
 80050fc:	0799      	lsls	r1, r3, #30
 80050fe:	d504      	bpl.n	800510a <HAL_SPI_TransmitReceive+0x1cc>
 8005100:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005102:	b29b      	uxth	r3, r3
 8005104:	b10b      	cbz	r3, 800510a <HAL_SPI_TransmitReceive+0x1cc>
 8005106:	b9dd      	cbnz	r5, 8005140 <HAL_SPI_TransmitReceive+0x202>
        txallowed = 1U;
 8005108:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	6891      	ldr	r1, [r2, #8]
 800510e:	f011 0101 	ands.w	r1, r1, #1
 8005112:	d00d      	beq.n	8005130 <HAL_SPI_TransmitReceive+0x1f2>
 8005114:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005116:	b29b      	uxth	r3, r3
 8005118:	b153      	cbz	r3, 8005130 <HAL_SPI_TransmitReceive+0x1f2>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800511a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800511c:	68d2      	ldr	r2, [r2, #12]
 800511e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005120:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005122:	3301      	adds	r3, #1
 8005124:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005126:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005128:	3b01      	subs	r3, #1
 800512a:	b29b      	uxth	r3, r3
 800512c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800512e:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005130:	f7fd f98c 	bl	800244c <HAL_GetTick>
 8005134:	1bc0      	subs	r0, r0, r7
 8005136:	42b0      	cmp	r0, r6
 8005138:	d3d7      	bcc.n	80050ea <HAL_SPI_TransmitReceive+0x1ac>
 800513a:	1c73      	adds	r3, r6, #1
 800513c:	d0d5      	beq.n	80050ea <HAL_SPI_TransmitReceive+0x1ac>
 800513e:	e7a5      	b.n	800508c <HAL_SPI_TransmitReceive+0x14e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005140:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8005146:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005148:	3301      	adds	r3, #1
 800514a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800514c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800514e:	3b01      	subs	r3, #1
 8005150:	b29b      	uxth	r3, r3
 8005152:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005154:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8005156:	b2ad      	uxth	r5, r5
 8005158:	2d00      	cmp	r5, #0
 800515a:	d1d5      	bne.n	8005108 <HAL_SPI_TransmitReceive+0x1ca>
 800515c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800515e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005162:	d1d1      	bne.n	8005108 <HAL_SPI_TransmitReceive+0x1ca>
 8005164:	6822      	ldr	r2, [r4, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005166:	6813      	ldr	r3, [r2, #0]
 8005168:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	e7cc      	b.n	800510a <HAL_SPI_TransmitReceive+0x1cc>
    tmpreg = READ_REG(hspi->Instance->DR);
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	9302      	str	r3, [sp, #8]
    UNUSED(tmpreg);
 8005176:	9b02      	ldr	r3, [sp, #8]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005178:	6822      	ldr	r2, [r4, #0]
 800517a:	6895      	ldr	r5, [r2, #8]
 800517c:	f015 0510 	ands.w	r5, r5, #16
 8005180:	d007      	beq.n	8005192 <HAL_SPI_TransmitReceive+0x254>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005182:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005184:	f043 0302 	orr.w	r3, r3, #2
 8005188:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800518a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800518e:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8005190:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005192:	463a      	mov	r2, r7
 8005194:	4631      	mov	r1, r6
 8005196:	4620      	mov	r0, r4
 8005198:	f7ff fe2a 	bl	8004df0 <SPI_EndRxTxTransaction>
 800519c:	b118      	cbz	r0, 80051a6 <HAL_SPI_TransmitReceive+0x268>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800519e:	2320      	movs	r3, #32
 80051a0:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80051a2:	2501      	movs	r5, #1
 80051a4:	e773      	b.n	800508e <HAL_SPI_TransmitReceive+0x150>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051a6:	68a3      	ldr	r3, [r4, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f47f af70 	bne.w	800508e <HAL_SPI_TransmitReceive+0x150>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051ae:	9303      	str	r3, [sp, #12]
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	9203      	str	r2, [sp, #12]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	9303      	str	r3, [sp, #12]
 80051ba:	9b03      	ldr	r3, [sp, #12]
 80051bc:	e767      	b.n	800508e <HAL_SPI_TransmitReceive+0x150>
    errorcode = HAL_BUSY;
 80051be:	2502      	movs	r5, #2
 80051c0:	e765      	b.n	800508e <HAL_SPI_TransmitReceive+0x150>
  __HAL_LOCK(hspi);
 80051c2:	2502      	movs	r5, #2
 80051c4:	e769      	b.n	800509a <HAL_SPI_TransmitReceive+0x15c>

080051c6 <HAL_SPI_GetState>:
  return hspi->State;
 80051c6:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 80051ca:	4770      	bx	lr

080051cc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051cc:	6a03      	ldr	r3, [r0, #32]
 80051ce:	f023 0301 	bic.w	r3, r3, #1
 80051d2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051d4:	6a03      	ldr	r3, [r0, #32]
{
 80051d6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051da:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051dc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051de:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80051e2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051e4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80051e6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80051ea:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051ec:	4d0e      	ldr	r5, [pc, #56]	; (8005228 <TIM_OC1_SetConfig+0x5c>)
 80051ee:	42a8      	cmp	r0, r5
 80051f0:	d002      	beq.n	80051f8 <TIM_OC1_SetConfig+0x2c>
 80051f2:	4e0e      	ldr	r6, [pc, #56]	; (800522c <TIM_OC1_SetConfig+0x60>)
 80051f4:	42b0      	cmp	r0, r6
 80051f6:	d110      	bne.n	800521a <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051f8:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80051fa:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80051fe:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005200:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005202:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005206:	d002      	beq.n	800520e <TIM_OC1_SetConfig+0x42>
 8005208:	4d08      	ldr	r5, [pc, #32]	; (800522c <TIM_OC1_SetConfig+0x60>)
 800520a:	42a8      	cmp	r0, r5
 800520c:	d105      	bne.n	800521a <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800520e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005212:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005216:	4335      	orrs	r5, r6
 8005218:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800521c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800521e:	684a      	ldr	r2, [r1, #4]
 8005220:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005222:	6203      	str	r3, [r0, #32]
}
 8005224:	bd70      	pop	{r4, r5, r6, pc}
 8005226:	bf00      	nop
 8005228:	40010000 	.word	0x40010000
 800522c:	40010400 	.word	0x40010400

08005230 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005230:	6a03      	ldr	r3, [r0, #32]
 8005232:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005236:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005238:	6a03      	ldr	r3, [r0, #32]
{
 800523a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800523c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800523e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005240:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005242:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005246:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005248:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800524a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800524e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005252:	4d11      	ldr	r5, [pc, #68]	; (8005298 <TIM_OC3_SetConfig+0x68>)
 8005254:	42a8      	cmp	r0, r5
 8005256:	d003      	beq.n	8005260 <TIM_OC3_SetConfig+0x30>
 8005258:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800525c:	42a8      	cmp	r0, r5
 800525e:	d114      	bne.n	800528a <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005260:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005266:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526a:	4d0b      	ldr	r5, [pc, #44]	; (8005298 <TIM_OC3_SetConfig+0x68>)
 800526c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800526e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005272:	d003      	beq.n	800527c <TIM_OC3_SetConfig+0x4c>
 8005274:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005278:	42a8      	cmp	r0, r5
 800527a:	d106      	bne.n	800528a <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800527c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005280:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005284:	4335      	orrs	r5, r6
 8005286:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800528c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800528e:	684a      	ldr	r2, [r1, #4]
 8005290:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005292:	6203      	str	r3, [r0, #32]
}
 8005294:	bd70      	pop	{r4, r5, r6, pc}
 8005296:	bf00      	nop
 8005298:	40010000 	.word	0x40010000

0800529c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800529c:	6a03      	ldr	r3, [r0, #32]
 800529e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052a2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a4:	6a03      	ldr	r3, [r0, #32]
{
 80052a6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052aa:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052ae:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052b6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80052b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052bc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c0:	4d08      	ldr	r5, [pc, #32]	; (80052e4 <TIM_OC4_SetConfig+0x48>)
 80052c2:	42a8      	cmp	r0, r5
 80052c4:	d003      	beq.n	80052ce <TIM_OC4_SetConfig+0x32>
 80052c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80052ca:	42a8      	cmp	r0, r5
 80052cc:	d104      	bne.n	80052d8 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052ce:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052d0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052d4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052da:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052dc:	684a      	ldr	r2, [r1, #4]
 80052de:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e0:	6203      	str	r3, [r0, #32]
}
 80052e2:	bd30      	pop	{r4, r5, pc}
 80052e4:	40010000 	.word	0x40010000

080052e8 <HAL_TIM_OC_MspInit>:
 80052e8:	4770      	bx	lr

080052ea <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 80052ea:	2908      	cmp	r1, #8
 80052ec:	d010      	beq.n	8005310 <HAL_TIM_ReadCapturedValue+0x26>
 80052ee:	d804      	bhi.n	80052fa <HAL_TIM_ReadCapturedValue+0x10>
 80052f0:	b141      	cbz	r1, 8005304 <HAL_TIM_ReadCapturedValue+0x1a>
 80052f2:	2904      	cmp	r1, #4
 80052f4:	d009      	beq.n	800530a <HAL_TIM_ReadCapturedValue+0x20>
 80052f6:	2000      	movs	r0, #0
 80052f8:	4770      	bx	lr
 80052fa:	290c      	cmp	r1, #12
 80052fc:	d1fb      	bne.n	80052f6 <HAL_TIM_ReadCapturedValue+0xc>
      tmpreg =   htim->Instance->CCR4;
 80052fe:	6803      	ldr	r3, [r0, #0]
 8005300:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8005302:	4770      	bx	lr
      tmpreg =  htim->Instance->CCR1;
 8005304:	6803      	ldr	r3, [r0, #0]
 8005306:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 8005308:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 800530a:	6803      	ldr	r3, [r0, #0]
 800530c:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 800530e:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8005310:	6803      	ldr	r3, [r0, #0]
 8005312:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 8005314:	4770      	bx	lr

08005316 <HAL_TIM_PeriodElapsedCallback>:
 8005316:	4770      	bx	lr

08005318 <HAL_TIM_IC_CaptureCallback>:
 8005318:	4770      	bx	lr

0800531a <HAL_TIM_PWM_PulseFinishedCallback>:
 800531a:	4770      	bx	lr

0800531c <HAL_TIM_TriggerCallback>:
 800531c:	4770      	bx	lr

0800531e <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800531e:	6803      	ldr	r3, [r0, #0]
 8005320:	691a      	ldr	r2, [r3, #16]
 8005322:	0791      	lsls	r1, r2, #30
{
 8005324:	b510      	push	{r4, lr}
 8005326:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005328:	d50e      	bpl.n	8005348 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	0792      	lsls	r2, r2, #30
 800532e:	d50b      	bpl.n	8005348 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005330:	f06f 0202 	mvn.w	r2, #2
 8005334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005336:	2201      	movs	r2, #1
 8005338:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	079b      	lsls	r3, r3, #30
 800533e:	d077      	beq.n	8005430 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8005340:	f7ff ffea 	bl	8005318 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005344:	2300      	movs	r3, #0
 8005346:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	0750      	lsls	r0, r2, #29
 800534e:	d510      	bpl.n	8005372 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	0751      	lsls	r1, r2, #29
 8005354:	d50d      	bpl.n	8005372 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005356:	f06f 0204 	mvn.w	r2, #4
 800535a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800535c:	2202      	movs	r2, #2
 800535e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8005366:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005368:	d068      	beq.n	800543c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800536a:	f7ff ffd5 	bl	8005318 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536e:	2300      	movs	r3, #0
 8005370:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	0712      	lsls	r2, r2, #28
 8005378:	d50f      	bpl.n	800539a <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	0710      	lsls	r0, r2, #28
 800537e:	d50c      	bpl.n	800539a <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005380:	f06f 0208 	mvn.w	r2, #8
 8005384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005386:	2204      	movs	r2, #4
 8005388:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800538e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005390:	d05a      	beq.n	8005448 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005392:	f7ff ffc1 	bl	8005318 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005396:	2300      	movs	r3, #0
 8005398:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	06d2      	lsls	r2, r2, #27
 80053a0:	d510      	bpl.n	80053c4 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053a2:	68da      	ldr	r2, [r3, #12]
 80053a4:	06d0      	lsls	r0, r2, #27
 80053a6:	d50d      	bpl.n	80053c4 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053a8:	f06f 0210 	mvn.w	r2, #16
 80053ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ae:	2208      	movs	r2, #8
 80053b0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80053b8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053ba:	d04b      	beq.n	8005454 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80053bc:	f7ff ffac 	bl	8005318 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c0:	2300      	movs	r3, #0
 80053c2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	07d1      	lsls	r1, r2, #31
 80053ca:	d508      	bpl.n	80053de <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	07d2      	lsls	r2, r2, #31
 80053d0:	d505      	bpl.n	80053de <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053d2:	f06f 0201 	mvn.w	r2, #1
 80053d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80053d8:	4620      	mov	r0, r4
 80053da:	f7ff ff9c 	bl	8005316 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	0610      	lsls	r0, r2, #24
 80053e4:	d508      	bpl.n	80053f8 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	0611      	lsls	r1, r2, #24
 80053ea:	d505      	bpl.n	80053f8 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80053f2:	4620      	mov	r0, r4
 80053f4:	f000 f9af 	bl	8005756 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	0652      	lsls	r2, r2, #25
 80053fe:	d508      	bpl.n	8005412 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	0650      	lsls	r0, r2, #25
 8005404:	d505      	bpl.n	8005412 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005406:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800540a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800540c:	4620      	mov	r0, r4
 800540e:	f7ff ff85 	bl	800531c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	691a      	ldr	r2, [r3, #16]
 8005416:	0691      	lsls	r1, r2, #26
 8005418:	d522      	bpl.n	8005460 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800541a:	68da      	ldr	r2, [r3, #12]
 800541c:	0692      	lsls	r2, r2, #26
 800541e:	d51f      	bpl.n	8005460 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005420:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005424:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005426:	611a      	str	r2, [r3, #16]
}
 8005428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800542c:	f000 b992 	b.w	8005754 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005430:	f7fb f99e 	bl	8000770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005434:	4620      	mov	r0, r4
 8005436:	f7ff ff70 	bl	800531a <HAL_TIM_PWM_PulseFinishedCallback>
 800543a:	e783      	b.n	8005344 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543c:	f7fb f998 	bl	8000770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	4620      	mov	r0, r4
 8005442:	f7ff ff6a 	bl	800531a <HAL_TIM_PWM_PulseFinishedCallback>
 8005446:	e792      	b.n	800536e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005448:	f7fb f992 	bl	8000770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800544c:	4620      	mov	r0, r4
 800544e:	f7ff ff64 	bl	800531a <HAL_TIM_PWM_PulseFinishedCallback>
 8005452:	e7a0      	b.n	8005396 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005454:	f7fb f98c 	bl	8000770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005458:	4620      	mov	r0, r4
 800545a:	f7ff ff5e 	bl	800531a <HAL_TIM_PWM_PulseFinishedCallback>
 800545e:	e7af      	b.n	80053c0 <HAL_TIM_IRQHandler+0xa2>
}
 8005460:	bd10      	pop	{r4, pc}
	...

08005464 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005464:	4a30      	ldr	r2, [pc, #192]	; (8005528 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005466:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005468:	4290      	cmp	r0, r2
 800546a:	d012      	beq.n	8005492 <TIM_Base_SetConfig+0x2e>
 800546c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005470:	d00f      	beq.n	8005492 <TIM_Base_SetConfig+0x2e>
 8005472:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005476:	4290      	cmp	r0, r2
 8005478:	d00b      	beq.n	8005492 <TIM_Base_SetConfig+0x2e>
 800547a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800547e:	4290      	cmp	r0, r2
 8005480:	d007      	beq.n	8005492 <TIM_Base_SetConfig+0x2e>
 8005482:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005486:	4290      	cmp	r0, r2
 8005488:	d003      	beq.n	8005492 <TIM_Base_SetConfig+0x2e>
 800548a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800548e:	4290      	cmp	r0, r2
 8005490:	d119      	bne.n	80054c6 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8005492:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005498:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800549a:	4a23      	ldr	r2, [pc, #140]	; (8005528 <TIM_Base_SetConfig+0xc4>)
 800549c:	4290      	cmp	r0, r2
 800549e:	d029      	beq.n	80054f4 <TIM_Base_SetConfig+0x90>
 80054a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80054a4:	d026      	beq.n	80054f4 <TIM_Base_SetConfig+0x90>
 80054a6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80054aa:	4290      	cmp	r0, r2
 80054ac:	d022      	beq.n	80054f4 <TIM_Base_SetConfig+0x90>
 80054ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054b2:	4290      	cmp	r0, r2
 80054b4:	d01e      	beq.n	80054f4 <TIM_Base_SetConfig+0x90>
 80054b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054ba:	4290      	cmp	r0, r2
 80054bc:	d01a      	beq.n	80054f4 <TIM_Base_SetConfig+0x90>
 80054be:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80054c2:	4290      	cmp	r0, r2
 80054c4:	d016      	beq.n	80054f4 <TIM_Base_SetConfig+0x90>
 80054c6:	4a19      	ldr	r2, [pc, #100]	; (800552c <TIM_Base_SetConfig+0xc8>)
 80054c8:	4290      	cmp	r0, r2
 80054ca:	d013      	beq.n	80054f4 <TIM_Base_SetConfig+0x90>
 80054cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054d0:	4290      	cmp	r0, r2
 80054d2:	d00f      	beq.n	80054f4 <TIM_Base_SetConfig+0x90>
 80054d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054d8:	4290      	cmp	r0, r2
 80054da:	d00b      	beq.n	80054f4 <TIM_Base_SetConfig+0x90>
 80054dc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80054e0:	4290      	cmp	r0, r2
 80054e2:	d007      	beq.n	80054f4 <TIM_Base_SetConfig+0x90>
 80054e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054e8:	4290      	cmp	r0, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_Base_SetConfig+0x90>
 80054ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054f0:	4290      	cmp	r0, r2
 80054f2:	d103      	bne.n	80054fc <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054f4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80054f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054fa:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054fc:	694a      	ldr	r2, [r1, #20]
 80054fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005502:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005504:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005506:	688b      	ldr	r3, [r1, #8]
 8005508:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800550a:	680b      	ldr	r3, [r1, #0]
 800550c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800550e:	4b06      	ldr	r3, [pc, #24]	; (8005528 <TIM_Base_SetConfig+0xc4>)
 8005510:	4298      	cmp	r0, r3
 8005512:	d003      	beq.n	800551c <TIM_Base_SetConfig+0xb8>
 8005514:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005518:	4298      	cmp	r0, r3
 800551a:	d101      	bne.n	8005520 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800551c:	690b      	ldr	r3, [r1, #16]
 800551e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005520:	2301      	movs	r3, #1
 8005522:	6143      	str	r3, [r0, #20]
}
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	40010000 	.word	0x40010000
 800552c:	40014000 	.word	0x40014000

08005530 <HAL_TIM_OC_Init>:
{
 8005530:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005532:	4604      	mov	r4, r0
 8005534:	b330      	cbz	r0, 8005584 <HAL_TIM_OC_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005536:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800553a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800553e:	b91b      	cbnz	r3, 8005548 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005540:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8005544:	f7ff fed0 	bl	80052e8 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005548:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800554a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800554c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005550:	1d21      	adds	r1, r4, #4
 8005552:	f7ff ff87 	bl	8005464 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005556:	2301      	movs	r3, #1
 8005558:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 800555c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800555e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005562:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005566:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800556a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800556e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005576:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800557a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800557e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005582:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005584:	2001      	movs	r0, #1
 8005586:	e7fc      	b.n	8005582 <HAL_TIM_OC_Init+0x52>

08005588 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005588:	6a03      	ldr	r3, [r0, #32]
 800558a:	f023 0310 	bic.w	r3, r3, #16
 800558e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005590:	6a03      	ldr	r3, [r0, #32]
{
 8005592:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8005594:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005596:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005598:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800559a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800559e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055a2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80055a4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055a8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055ac:	4d10      	ldr	r5, [pc, #64]	; (80055f0 <TIM_OC2_SetConfig+0x68>)
 80055ae:	42a8      	cmp	r0, r5
 80055b0:	d003      	beq.n	80055ba <TIM_OC2_SetConfig+0x32>
 80055b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80055b6:	42a8      	cmp	r0, r5
 80055b8:	d114      	bne.n	80055e4 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055ba:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80055bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c4:	4d0a      	ldr	r5, [pc, #40]	; (80055f0 <TIM_OC2_SetConfig+0x68>)
 80055c6:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80055c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055cc:	d003      	beq.n	80055d6 <TIM_OC2_SetConfig+0x4e>
 80055ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80055d2:	42a8      	cmp	r0, r5
 80055d4:	d106      	bne.n	80055e4 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055d6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055da:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055de:	4335      	orrs	r5, r6
 80055e0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80055e4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80055e6:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80055e8:	684a      	ldr	r2, [r1, #4]
 80055ea:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80055ec:	6203      	str	r3, [r0, #32]
}
 80055ee:	bd70      	pop	{r4, r5, r6, pc}
 80055f0:	40010000 	.word	0x40010000

080055f4 <HAL_TIM_OC_ConfigChannel>:
{
 80055f4:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80055f6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80055fa:	2b01      	cmp	r3, #1
{
 80055fc:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80055fe:	d01e      	beq.n	800563e <HAL_TIM_OC_ConfigChannel+0x4a>
 8005600:	2301      	movs	r3, #1
  switch (Channel)
 8005602:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8005604:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005608:	d015      	beq.n	8005636 <HAL_TIM_OC_ConfigChannel+0x42>
 800560a:	d806      	bhi.n	800561a <HAL_TIM_OC_ConfigChannel+0x26>
 800560c:	b15a      	cbz	r2, 8005626 <HAL_TIM_OC_ConfigChannel+0x32>
 800560e:	2a04      	cmp	r2, #4
 8005610:	d00d      	beq.n	800562e <HAL_TIM_OC_ConfigChannel+0x3a>
  __HAL_UNLOCK(htim);
 8005612:	2000      	movs	r0, #0
 8005614:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005618:	bd10      	pop	{r4, pc}
  switch (Channel)
 800561a:	2a0c      	cmp	r2, #12
 800561c:	d1f9      	bne.n	8005612 <HAL_TIM_OC_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800561e:	6800      	ldr	r0, [r0, #0]
 8005620:	f7ff fe3c 	bl	800529c <TIM_OC4_SetConfig>
      break;
 8005624:	e7f5      	b.n	8005612 <HAL_TIM_OC_ConfigChannel+0x1e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005626:	6800      	ldr	r0, [r0, #0]
 8005628:	f7ff fdd0 	bl	80051cc <TIM_OC1_SetConfig>
      break;
 800562c:	e7f1      	b.n	8005612 <HAL_TIM_OC_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800562e:	6800      	ldr	r0, [r0, #0]
 8005630:	f7ff ffaa 	bl	8005588 <TIM_OC2_SetConfig>
      break;
 8005634:	e7ed      	b.n	8005612 <HAL_TIM_OC_ConfigChannel+0x1e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005636:	6800      	ldr	r0, [r0, #0]
 8005638:	f7ff fdfa 	bl	8005230 <TIM_OC3_SetConfig>
      break;
 800563c:	e7e9      	b.n	8005612 <HAL_TIM_OC_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 800563e:	2002      	movs	r0, #2
 8005640:	e7ea      	b.n	8005618 <HAL_TIM_OC_ConfigChannel+0x24>

08005642 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005642:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005644:	f001 011f 	and.w	r1, r1, #31
{
 8005648:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800564a:	2401      	movs	r4, #1
 800564c:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800564e:	ea23 0304 	bic.w	r3, r3, r4
 8005652:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005654:	6a03      	ldr	r3, [r0, #32]
 8005656:	408a      	lsls	r2, r1
 8005658:	431a      	orrs	r2, r3
 800565a:	6202      	str	r2, [r0, #32]
}
 800565c:	bd10      	pop	{r4, pc}
	...

08005660 <HAL_TIM_OC_Start_IT>:
{
 8005660:	b510      	push	{r4, lr}
 8005662:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005664:	b929      	cbnz	r1, 8005672 <HAL_TIM_OC_Start_IT+0x12>
 8005666:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800566a:	2b01      	cmp	r3, #1
 800566c:	d02b      	beq.n	80056c6 <HAL_TIM_OC_Start_IT+0x66>
    return HAL_ERROR;
 800566e:	2001      	movs	r0, #1
 8005670:	e045      	b.n	80056fe <HAL_TIM_OC_Start_IT+0x9e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005672:	2904      	cmp	r1, #4
 8005674:	d10b      	bne.n	800568e <HAL_TIM_OC_Start_IT+0x2e>
 8005676:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800567a:	2b01      	cmp	r3, #1
 800567c:	d1f7      	bne.n	800566e <HAL_TIM_OC_Start_IT+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800567e:	2302      	movs	r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005680:	6802      	ldr	r2, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005682:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005686:	68d3      	ldr	r3, [r2, #12]
 8005688:	f043 0304 	orr.w	r3, r3, #4
 800568c:	e022      	b.n	80056d4 <HAL_TIM_OC_Start_IT+0x74>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800568e:	2908      	cmp	r1, #8
 8005690:	d10b      	bne.n	80056aa <HAL_TIM_OC_Start_IT+0x4a>
 8005692:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005696:	2b01      	cmp	r3, #1
 8005698:	d1e9      	bne.n	800566e <HAL_TIM_OC_Start_IT+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800569a:	2302      	movs	r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800569c:	6802      	ldr	r2, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800569e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80056a2:	68d3      	ldr	r3, [r2, #12]
 80056a4:	f043 0308 	orr.w	r3, r3, #8
 80056a8:	e014      	b.n	80056d4 <HAL_TIM_OC_Start_IT+0x74>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056aa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d1dd      	bne.n	800566e <HAL_TIM_OC_Start_IT+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056b2:	2302      	movs	r3, #2
  switch (Channel)
 80056b4:	290c      	cmp	r1, #12
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056b6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  switch (Channel)
 80056ba:	d10c      	bne.n	80056d6 <HAL_TIM_OC_Start_IT+0x76>
 80056bc:	6802      	ldr	r2, [r0, #0]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80056be:	68d3      	ldr	r3, [r2, #12]
 80056c0:	f043 0310 	orr.w	r3, r3, #16
 80056c4:	e006      	b.n	80056d4 <HAL_TIM_OC_Start_IT+0x74>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c6:	2302      	movs	r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80056c8:	6802      	ldr	r2, [r0, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ca:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80056ce:	68d3      	ldr	r3, [r2, #12]
 80056d0:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80056d4:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056d6:	2201      	movs	r2, #1
 80056d8:	6820      	ldr	r0, [r4, #0]
 80056da:	f7ff ffb2 	bl	8005642 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	4a19      	ldr	r2, [pc, #100]	; (8005748 <HAL_TIM_OC_Start_IT+0xe8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d00c      	beq.n	8005700 <HAL_TIM_OC_Start_IT+0xa0>
 80056e6:	4919      	ldr	r1, [pc, #100]	; (800574c <HAL_TIM_OC_Start_IT+0xec>)
 80056e8:	428b      	cmp	r3, r1
 80056ea:	d009      	beq.n	8005700 <HAL_TIM_OC_Start_IT+0xa0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f0:	d10d      	bne.n	800570e <HAL_TIM_OC_Start_IT+0xae>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f8:	2a06      	cmp	r2, #6
 80056fa:	d11f      	bne.n	800573c <HAL_TIM_OC_Start_IT+0xdc>
  return HAL_OK;
 80056fc:	2000      	movs	r0, #0
}
 80056fe:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8005700:	6c59      	ldr	r1, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005702:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8005704:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005708:	6459      	str	r1, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570a:	d0f2      	beq.n	80056f2 <HAL_TIM_OC_Start_IT+0x92>
 800570c:	e7ee      	b.n	80056ec <HAL_TIM_OC_Start_IT+0x8c>
 800570e:	4a10      	ldr	r2, [pc, #64]	; (8005750 <HAL_TIM_OC_Start_IT+0xf0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d0ee      	beq.n	80056f2 <HAL_TIM_OC_Start_IT+0x92>
 8005714:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005718:	4293      	cmp	r3, r2
 800571a:	d0ea      	beq.n	80056f2 <HAL_TIM_OC_Start_IT+0x92>
 800571c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005720:	4293      	cmp	r3, r2
 8005722:	d0e6      	beq.n	80056f2 <HAL_TIM_OC_Start_IT+0x92>
 8005724:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005728:	4293      	cmp	r3, r2
 800572a:	d0e2      	beq.n	80056f2 <HAL_TIM_OC_Start_IT+0x92>
 800572c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005730:	4293      	cmp	r3, r2
 8005732:	d0de      	beq.n	80056f2 <HAL_TIM_OC_Start_IT+0x92>
 8005734:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005738:	4293      	cmp	r3, r2
 800573a:	d0da      	beq.n	80056f2 <HAL_TIM_OC_Start_IT+0x92>
    __HAL_TIM_ENABLE(htim);
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	e7da      	b.n	80056fc <HAL_TIM_OC_Start_IT+0x9c>
 8005746:	bf00      	nop
 8005748:	40010000 	.word	0x40010000
 800574c:	40010400 	.word	0x40010400
 8005750:	40000400 	.word	0x40000400

08005754 <HAL_TIMEx_CommutCallback>:
 8005754:	4770      	bx	lr

08005756 <HAL_TIMEx_BreakCallback>:
 8005756:	4770      	bx	lr

08005758 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005758:	4b0a      	ldr	r3, [pc, #40]	; (8005784 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800575a:	3b01      	subs	r3, #1
 800575c:	d00f      	beq.n	800577e <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800575e:	6902      	ldr	r2, [r0, #16]
 8005760:	2a00      	cmp	r2, #0
 8005762:	dafa      	bge.n	800575a <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005764:	6903      	ldr	r3, [r0, #16]
 8005766:	4a07      	ldr	r2, [pc, #28]	; (8005784 <USB_CoreReset+0x2c>)
 8005768:	f043 0301 	orr.w	r3, r3, #1
 800576c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800576e:	3a01      	subs	r2, #1
 8005770:	d005      	beq.n	800577e <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005772:	6903      	ldr	r3, [r0, #16]
 8005774:	f013 0301 	ands.w	r3, r3, #1
 8005778:	d1f9      	bne.n	800576e <USB_CoreReset+0x16>

  return HAL_OK;
 800577a:	4618      	mov	r0, r3
 800577c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800577e:	2003      	movs	r0, #3
}
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	00030d41 	.word	0x00030d41

08005788 <USB_CoreInit>:
{
 8005788:	b084      	sub	sp, #16
 800578a:	b538      	push	{r3, r4, r5, lr}
 800578c:	ad05      	add	r5, sp, #20
 800578e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005794:	2b01      	cmp	r3, #1
{
 8005796:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005798:	d125      	bne.n	80057e6 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800579a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800579c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057a0:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057a2:	68c3      	ldr	r3, [r0, #12]
 80057a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ac:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057ae:	68c3      	ldr	r3, [r0, #12]
 80057b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80057b4:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80057b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057b8:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057ba:	bf02      	ittt	eq
 80057bc:	68c3      	ldreq	r3, [r0, #12]
 80057be:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 80057c2:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80057c4:	f7ff ffc8 	bl	8005758 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80057c8:	9b08      	ldr	r3, [sp, #32]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d107      	bne.n	80057de <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057ce:	68a3      	ldr	r3, [r4, #8]
 80057d0:	f043 0306 	orr.w	r3, r3, #6
 80057d4:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057d6:	68a3      	ldr	r3, [r4, #8]
 80057d8:	f043 0320 	orr.w	r3, r3, #32
 80057dc:	60a3      	str	r3, [r4, #8]
}
 80057de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057e2:	b004      	add	sp, #16
 80057e4:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057e6:	68c3      	ldr	r3, [r0, #12]
 80057e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057ec:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80057ee:	f7ff ffb3 	bl	8005758 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80057f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057f4:	b923      	cbnz	r3, 8005800 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80057fe:	e7e3      	b.n	80057c8 <USB_CoreInit+0x40>
 8005800:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005806:	e7f9      	b.n	80057fc <USB_CoreInit+0x74>

08005808 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005808:	6883      	ldr	r3, [r0, #8]
 800580a:	f043 0301 	orr.w	r3, r3, #1
 800580e:	6083      	str	r3, [r0, #8]
}
 8005810:	2000      	movs	r0, #0
 8005812:	4770      	bx	lr

08005814 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005814:	6883      	ldr	r3, [r0, #8]
 8005816:	f023 0301 	bic.w	r3, r3, #1
 800581a:	6083      	str	r3, [r0, #8]
}
 800581c:	2000      	movs	r0, #0
 800581e:	4770      	bx	lr

08005820 <USB_SetCurrentMode>:
{
 8005820:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005822:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8005824:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005826:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800582a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800582c:	d108      	bne.n	8005840 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800582e:	68c3      	ldr	r3, [r0, #12]
 8005830:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005834:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8005836:	2032      	movs	r0, #50	; 0x32
 8005838:	f7fc fe0e 	bl	8002458 <HAL_Delay>
  return HAL_OK;
 800583c:	2000      	movs	r0, #0
}
 800583e:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8005840:	b919      	cbnz	r1, 800584a <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005842:	68c3      	ldr	r3, [r0, #12]
 8005844:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005848:	e7f4      	b.n	8005834 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800584a:	2001      	movs	r0, #1
 800584c:	e7f7      	b.n	800583e <USB_SetCurrentMode+0x1e>
	...

08005850 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005850:	0189      	lsls	r1, r1, #6
 8005852:	f041 0120 	orr.w	r1, r1, #32
 8005856:	4a06      	ldr	r2, [pc, #24]	; (8005870 <USB_FlushTxFifo+0x20>)
 8005858:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800585a:	3a01      	subs	r2, #1
 800585c:	d005      	beq.n	800586a <USB_FlushTxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800585e:	6903      	ldr	r3, [r0, #16]
 8005860:	f013 0320 	ands.w	r3, r3, #32
 8005864:	d1f9      	bne.n	800585a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8005866:	4618      	mov	r0, r3
 8005868:	4770      	bx	lr
      return HAL_TIMEOUT;
 800586a:	2003      	movs	r0, #3
}
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	00030d41 	.word	0x00030d41

08005874 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005874:	2310      	movs	r3, #16
 8005876:	4a06      	ldr	r2, [pc, #24]	; (8005890 <USB_FlushRxFifo+0x1c>)
 8005878:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800587a:	3a01      	subs	r2, #1
 800587c:	d005      	beq.n	800588a <USB_FlushRxFifo+0x16>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800587e:	6903      	ldr	r3, [r0, #16]
 8005880:	f013 0310 	ands.w	r3, r3, #16
 8005884:	d1f9      	bne.n	800587a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8005886:	4618      	mov	r0, r3
 8005888:	4770      	bx	lr
      return HAL_TIMEOUT;
 800588a:	2003      	movs	r0, #3
}
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	00030d41 	.word	0x00030d41

08005894 <USB_WritePacket>:
{
 8005894:	b510      	push	{r4, lr}
 8005896:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800589a:	b944      	cbnz	r4, 80058ae <USB_WritePacket+0x1a>
    count32b = ((uint32_t)len + 3U) / 4U;
 800589c:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800589e:	3201      	adds	r2, #1
    count32b = ((uint32_t)len + 3U) / 4U;
 80058a0:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058a2:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 80058a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 80058aa:	428b      	cmp	r3, r1
 80058ac:	d101      	bne.n	80058b2 <USB_WritePacket+0x1e>
}
 80058ae:	2000      	movs	r0, #0
 80058b0:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058b2:	f851 2b04 	ldr.w	r2, [r1], #4
 80058b6:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 80058b8:	e7f7      	b.n	80058aa <USB_WritePacket+0x16>

080058ba <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80058ba:	3203      	adds	r2, #3
 80058bc:	0892      	lsrs	r2, r2, #2
 80058be:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058c2:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 80058c6:	4291      	cmp	r1, r2
 80058c8:	d101      	bne.n	80058ce <USB_ReadPacket+0x14>
}
 80058ca:	4608      	mov	r0, r1
 80058cc:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058ce:	6803      	ldr	r3, [r0, #0]
 80058d0:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 80058d4:	e7f7      	b.n	80058c6 <USB_ReadPacket+0xc>

080058d6 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80058d6:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80058d8:	6980      	ldr	r0, [r0, #24]
}
 80058da:	4010      	ands	r0, r2
 80058dc:	4770      	bx	lr

080058de <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80058de:	6940      	ldr	r0, [r0, #20]
}
 80058e0:	f000 0001 	and.w	r0, r0, #1
 80058e4:	4770      	bx	lr

080058e6 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80058e6:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80058ea:	f023 0303 	bic.w	r3, r3, #3
{
 80058ee:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80058f0:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80058f4:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 80058f8:	f001 0303 	and.w	r3, r1, #3
 80058fc:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 80058fe:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005900:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005904:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8005908:	d104      	bne.n	8005914 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 800590a:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 800590e:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8005910:	2000      	movs	r0, #0
 8005912:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8005914:	2902      	cmp	r1, #2
 8005916:	d1fb      	bne.n	8005910 <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 8005918:	f241 7370 	movw	r3, #6000	; 0x1770
 800591c:	e7f7      	b.n	800590e <USB_InitFSLSPClkSel+0x28>

0800591e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800591e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8005920:	2500      	movs	r5, #0
 8005922:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8005924:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8005928:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800592a:	9b01      	ldr	r3, [sp, #4]
 800592c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005930:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005932:	9b01      	ldr	r3, [sp, #4]
 8005934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8005938:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800593a:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 800593e:	2064      	movs	r0, #100	; 0x64
 8005940:	f7fc fd8a 	bl	8002458 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005944:	9b01      	ldr	r3, [sp, #4]
 8005946:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800594a:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 800594e:	200a      	movs	r0, #10
 8005950:	f7fc fd82 	bl	8002458 <HAL_Delay>

  return HAL_OK;
}
 8005954:	4628      	mov	r0, r5
 8005956:	b003      	add	sp, #12
 8005958:	bd30      	pop	{r4, r5, pc}

0800595a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800595a:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8005960:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8005964:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005966:	9b01      	ldr	r3, [sp, #4]
 8005968:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800596c:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800596e:	9b01      	ldr	r3, [sp, #4]
 8005970:	04da      	lsls	r2, r3, #19
 8005972:	d406      	bmi.n	8005982 <USB_DriveVbus+0x28>
 8005974:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005976:	bf02      	ittt	eq
 8005978:	9b01      	ldreq	r3, [sp, #4]
 800597a:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800597e:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005982:	9b01      	ldr	r3, [sp, #4]
 8005984:	04db      	lsls	r3, r3, #19
 8005986:	d505      	bpl.n	8005994 <USB_DriveVbus+0x3a>
 8005988:	b921      	cbnz	r1, 8005994 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800598a:	9b01      	ldr	r3, [sp, #4]
 800598c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005990:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8005994:	2000      	movs	r0, #0
 8005996:	b002      	add	sp, #8
 8005998:	4770      	bx	lr
	...

0800599c <USB_HostInit>:
{
 800599c:	b084      	sub	sp, #16
 800599e:	b538      	push	{r3, r4, r5, lr}
 80059a0:	4604      	mov	r4, r0
 80059a2:	a805      	add	r0, sp, #20
 80059a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059b4:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059b8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80059bc:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059c4:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 80059c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059c8:	05da      	lsls	r2, r3, #23
 80059ca:	d53f      	bpl.n	8005a4c <USB_HostInit+0xb0>
    if (cfg.speed == USBH_FSLS_SPEED)
 80059cc:	9b07      	ldr	r3, [sp, #28]
 80059ce:	2b01      	cmp	r3, #1
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80059d0:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
 80059d4:	d13c      	bne.n	8005a50 <USB_HostInit+0xb4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80059d6:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059da:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80059de:	2110      	movs	r1, #16
 80059e0:	4620      	mov	r0, r4
 80059e2:	f7ff ff35 	bl	8005850 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80059e6:	4620      	mov	r0, r4
 80059e8:	f7ff ff44 	bl	8005874 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 80059ec:	2300      	movs	r3, #0
 80059ee:	9906      	ldr	r1, [sp, #24]
 80059f0:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80059f4:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0U;
 80059f8:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 80059fa:	4299      	cmp	r1, r3
 80059fc:	d12b      	bne.n	8005a56 <USB_HostInit+0xba>
  (void)USB_DriveVbus(USBx, 1U);
 80059fe:	2101      	movs	r1, #1
 8005a00:	4620      	mov	r0, r4
 8005a02:	f7ff ffaa 	bl	800595a <USB_DriveVbus>
  HAL_Delay(200U);
 8005a06:	20c8      	movs	r0, #200	; 0xc8
 8005a08:	f7fc fd26 	bl	8002458 <HAL_Delay>
  USBx->GINTMSK = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005a10:	f04f 33ff 	mov.w	r3, #4294967295
 8005a14:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a18:	05db      	lsls	r3, r3, #23
 8005a1a:	d521      	bpl.n	8005a60 <USB_HostInit+0xc4>
    USBx->GRXFSIZ  = 0x200U;
 8005a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a20:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005a22:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8005a26:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005a28:	4b11      	ldr	r3, [pc, #68]	; (8005a70 <USB_HostInit+0xd4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005a2a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8005a2e:	9b08      	ldr	r3, [sp, #32]
 8005a30:	b91b      	cbnz	r3, 8005a3a <USB_HostInit+0x9e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a32:	69a3      	ldr	r3, [r4, #24]
 8005a34:	f043 0310 	orr.w	r3, r3, #16
 8005a38:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005a3a:	69a2      	ldr	r2, [r4, #24]
 8005a3c:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <USB_HostInit+0xd8>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61a3      	str	r3, [r4, #24]
}
 8005a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a46:	2000      	movs	r0, #0
 8005a48:	b004      	add	sp, #16
 8005a4a:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a4c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8005a50:	f023 0304 	bic.w	r3, r3, #4
 8005a54:	e7c1      	b.n	80059da <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005a56:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a58:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8005a5a:	60d5      	str	r5, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a5c:	3220      	adds	r2, #32
 8005a5e:	e7cc      	b.n	80059fa <USB_HostInit+0x5e>
    USBx->GRXFSIZ  = 0x80U;
 8005a60:	2380      	movs	r3, #128	; 0x80
 8005a62:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005a64:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8005a68:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005a6a:	4b03      	ldr	r3, [pc, #12]	; (8005a78 <USB_HostInit+0xdc>)
 8005a6c:	e7dd      	b.n	8005a2a <USB_HostInit+0x8e>
 8005a6e:	bf00      	nop
 8005a70:	00e00300 	.word	0x00e00300
 8005a74:	a3200008 	.word	0xa3200008
 8005a78:	004000e0 	.word	0x004000e0

08005a7c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a7c:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8005a82:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8005a86:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005a88:	9801      	ldr	r0, [sp, #4]
}
 8005a8a:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8005a8e:	b002      	add	sp, #8
 8005a90:	4770      	bx	lr

08005a92 <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005a92:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005a96:	6880      	ldr	r0, [r0, #8]
}
 8005a98:	b280      	uxth	r0, r0
 8005a9a:	4770      	bx	lr

08005a9c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005aa0:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 8005aa4:	f506 65a0 	add.w	r5, r6, #1280	; 0x500
{
 8005aa8:	f89d 701c 	ldrb.w	r7, [sp, #28]
 8005aac:	461c      	mov	r4, r3
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005aae:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab2:	60ab      	str	r3, [r5, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005ab4:	fa4f fc82 	sxtb.w	ip, r2
 8005ab8:	2f03      	cmp	r7, #3
 8005aba:	d865      	bhi.n	8005b88 <USB_HC_Init+0xec>
 8005abc:	e8df f007 	tbb	[pc, r7]
 8005ac0:	53025a02 	.word	0x53025a02
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ac4:	f240 439d 	movw	r3, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ac8:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005acc:	60eb      	str	r3, [r5, #12]
      if ((epnum & 0x80U) == 0x80U)
 8005ace:	da03      	bge.n	8005ad8 <USB_HC_Init+0x3c>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ad0:	68eb      	ldr	r3, [r5, #12]
 8005ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ad6:	e044      	b.n	8005b62 <USB_HC_Init+0xc6>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ad8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005ada:	05db      	lsls	r3, r3, #23
 8005adc:	d43e      	bmi.n	8005b5c <USB_HC_Init+0xc0>
  HAL_StatusTypeDef ret = HAL_OK;
 8005ade:	2500      	movs	r5, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ae0:	f8d0 8418 	ldr.w	r8, [r0, #1048]	; 0x418
 8005ae4:	f001 030f 	and.w	r3, r1, #15
 8005ae8:	2101      	movs	r1, #1
 8005aea:	4099      	lsls	r1, r3
 8005aec:	ea41 0108 	orr.w	r1, r1, r8
 8005af0:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005af4:	6983      	ldr	r3, [r0, #24]
 8005af6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8005afa:	f1bc 0f00 	cmp.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005afe:	6183      	str	r3, [r0, #24]
    HCcharEpDir = 0U;
 8005b00:	bfb4      	ite	lt
 8005b02:	f44f 4100 	movlt.w	r1, #32768	; 0x8000
 8005b06:	2100      	movge	r1, #0
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005b08:	f7ff ffb8 	bl	8005a7c <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005b0c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d13b      	bne.n	8005b8c <USB_HC_Init+0xf0>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005b14:	2802      	cmp	r0, #2
 8005b16:	bf0c      	ite	eq
 8005b18:	2000      	moveq	r0, #0
 8005b1a:	f44f 3000 	movne.w	r0, #131072	; 0x20000
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b1e:	05a3      	lsls	r3, r4, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b20:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b24:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b28:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b2c:	02d2      	lsls	r2, r2, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b2e:	4323      	orrs	r3, r4
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b30:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b34:	4313      	orrs	r3, r2
 8005b36:	04ba      	lsls	r2, r7, #18
 8005b38:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8005b3c:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b3e:	430b      	orrs	r3, r1
 8005b40:	4303      	orrs	r3, r0
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b42:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500

  if (ep_type == EP_TYPE_INTR)
 8005b46:	2f03      	cmp	r7, #3
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005b48:	bf02      	ittt	eq
 8005b4a:	f8d6 3500 	ldreq.w	r3, [r6, #1280]	; 0x500
 8005b4e:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8005b52:	f8c6 3500 	streq.w	r3, [r6, #1280]	; 0x500
  }

  return ret;
}
 8005b56:	4628      	mov	r0, r5
 8005b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005b5c:	68eb      	ldr	r3, [r5, #12]
 8005b5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005b62:	60eb      	str	r3, [r5, #12]
 8005b64:	e7bb      	b.n	8005ade <USB_HC_Init+0x42>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b66:	f240 639d 	movw	r3, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8005b6a:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b6e:	60eb      	str	r3, [r5, #12]
      if ((epnum & 0x80U) == 0x80U)
 8005b70:	dab5      	bge.n	8005ade <USB_HC_Init+0x42>
 8005b72:	e7ad      	b.n	8005ad0 <USB_HC_Init+0x34>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b74:	f240 2325 	movw	r3, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8005b78:	f1bc 0f00 	cmp.w	ip, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b7c:	60eb      	str	r3, [r5, #12]
      if ((epnum & 0x80U) == 0x80U)
 8005b7e:	daae      	bge.n	8005ade <USB_HC_Init+0x42>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005b80:	68eb      	ldr	r3, [r5, #12]
 8005b82:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005b86:	e7ec      	b.n	8005b62 <USB_HC_Init+0xc6>
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005b88:	2501      	movs	r5, #1
 8005b8a:	e7a9      	b.n	8005ae0 <USB_HC_Init+0x44>
    HCcharLowSpeed = 0U;
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	e7c6      	b.n	8005b1e <USB_HC_Init+0x82>

08005b90 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005b90:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005b94:	6940      	ldr	r0, [r0, #20]
}
 8005b96:	b280      	uxth	r0, r0
 8005b98:	4770      	bx	lr

08005b9a <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005b9a:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
 8005b9e:	b530      	push	{r4, r5, lr}
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005ba0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005ba4:	f8d1 4500 	ldr.w	r4, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005ba8:	6885      	ldr	r5, [r0, #8]
 8005baa:	06ad      	lsls	r5, r5, #26
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005bac:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 8005bb0:	ea4f 4393 	mov.w	r3, r3, lsr #18
  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005bb4:	d501      	bpl.n	8005bba <USB_HC_Halt+0x20>
 8005bb6:	2c00      	cmp	r4, #0
 8005bb8:	da28      	bge.n	8005c0c <USB_HC_Halt+0x72>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005bba:	f013 0f01 	tst.w	r3, #1
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005bbe:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005bc2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bc6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005bca:	d121      	bne.n	8005c10 <USB_HC_Halt+0x76>

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bcc:	6883      	ldr	r3, [r0, #8]
 8005bce:	069b      	lsls	r3, r3, #26
 8005bd0:	d41c      	bmi.n	8005c0c <USB_HC_Halt+0x72>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005bd2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005bd4:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005bd8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005bdc:	d137      	bne.n	8005c4e <USB_HC_Halt+0xb4>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005bde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005be2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005be6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bee:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005bf2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005bf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bfa:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8005bfe:	f240 33e9 	movw	r3, #1001	; 0x3e9
        do
        {
          if (++count > 1000U)
 8005c02:	3b01      	subs	r3, #1
 8005c04:	d002      	beq.n	8005c0c <USB_HC_Halt+0x72>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c06:	6811      	ldr	r1, [r2, #0]
 8005c08:	2900      	cmp	r1, #0
 8005c0a:	dbfa      	blt.n	8005c02 <USB_HC_Halt+0x68>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	bd30      	pop	{r4, r5, pc}
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005c10:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8005c14:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c18:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005c1c:	d117      	bne.n	8005c4e <USB_HC_Halt+0xb4>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c22:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c26:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005c2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c2e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005c32:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005c36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c3a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8005c3e:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8005c42:	3b01      	subs	r3, #1
 8005c44:	d0e2      	beq.n	8005c0c <USB_HC_Halt+0x72>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c46:	6811      	ldr	r1, [r2, #0]
 8005c48:	2900      	cmp	r1, #0
 8005c4a:	dbfa      	blt.n	8005c42 <USB_HC_Halt+0xa8>
 8005c4c:	e7de      	b.n	8005c0c <USB_HC_Halt+0x72>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c52:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8005c56:	e7d9      	b.n	8005c0c <USB_HC_Halt+0x72>

08005c58 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c58:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8005c5c:	4a06      	ldr	r2, [pc, #24]	; (8005c78 <USB_DoPing+0x20>)
 8005c5e:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c62:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c6e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 8005c72:	2000      	movs	r0, #0
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	80080000 	.word	0x80080000

08005c7c <USB_HC_StartXfer>:
{
 8005c7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005c80:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005c82:	05db      	lsls	r3, r3, #23
{
 8005c84:	4615      	mov	r5, r2
 8005c86:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005c88:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005c8a:	d50f      	bpl.n	8005cac <USB_HC_StartXfer+0x30>
 8005c8c:	790b      	ldrb	r3, [r1, #4]
 8005c8e:	b96b      	cbnz	r3, 8005cac <USB_HC_StartXfer+0x30>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005c90:	2d01      	cmp	r5, #1
 8005c92:	d168      	bne.n	8005d66 <USB_HC_StartXfer+0xea>
 8005c94:	79cb      	ldrb	r3, [r1, #7]
 8005c96:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8005c9a:	d107      	bne.n	8005cac <USB_HC_StartXfer+0x30>
 8005c9c:	eb00 1342 	add.w	r3, r0, r2, lsl #5
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005ca0:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8005ca4:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 8005ca8:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
  if (hc->xfer_len > 0U)
 8005cac:	694b      	ldr	r3, [r1, #20]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d065      	beq.n	8005d7e <USB_HC_StartXfer+0x102>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005cb2:	890e      	ldrh	r6, [r1, #8]
 8005cb4:	1e58      	subs	r0, r3, #1
 8005cb6:	4430      	add	r0, r6
 8005cb8:	fbb0 f0f6 	udiv	r0, r0, r6
 8005cbc:	b280      	uxth	r0, r0
 8005cbe:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005cc2:	bf28      	it	cs
 8005cc4:	f44f 7080 	movcs.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 8005cc8:	78cf      	ldrb	r7, [r1, #3]
 8005cca:	2f00      	cmp	r7, #0
 8005ccc:	d059      	beq.n	8005d82 <USB_HC_StartXfer+0x106>
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005cce:	f8b1 8008 	ldrh.w	r8, [r1, #8]
 8005cd2:	fb00 f808 	mul.w	r8, r0, r8
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005cd6:	f891 c00a 	ldrb.w	ip, [r1, #10]
 8005cda:	f8c1 8010 	str.w	r8, [r1, #16]
 8005cde:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 8005ce2:	f00c 4cc0 	and.w	ip, ip, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ce6:	eb04 1642 	add.w	r6, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cea:	ea4c 40c0 	orr.w	r0, ip, r0, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cee:	f3c8 0812 	ubfx	r8, r8, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cf2:	ea40 0008 	orr.w	r0, r0, r8
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cf6:	f8c6 0510 	str.w	r0, [r6, #1296]	; 0x510
  if (dma != 0U)
 8005cfa:	b115      	cbz	r5, 8005d02 <USB_HC_StartXfer+0x86>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005cfc:	68c8      	ldr	r0, [r1, #12]
 8005cfe:	f8c6 0514 	str.w	r0, [r6, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005d02:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005d06:	f8d6 e500 	ldr.w	lr, [r6, #1280]	; 0x500
 8005d0a:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
 8005d0e:	f8c6 e500 	str.w	lr, [r6, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005d12:	43c0      	mvns	r0, r0
 8005d14:	f8d6 e500 	ldr.w	lr, [r6, #1280]	; 0x500
 8005d18:	0740      	lsls	r0, r0, #29
 8005d1a:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8005d1e:	ea40 000e 	orr.w	r0, r0, lr
 8005d22:	f8c6 0500 	str.w	r0, [r6, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d26:	f8d6 0500 	ldr.w	r0, [r6, #1280]	; 0x500
 8005d2a:	9003      	str	r0, [sp, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d2c:	9803      	ldr	r0, [sp, #12]
 8005d2e:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
 8005d32:	9003      	str	r0, [sp, #12]
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005d34:	f504 6c80 	add.w	ip, r4, #1024	; 0x400
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d38:	9803      	ldr	r0, [sp, #12]
  if (hc->ep_is_in != 0U)
 8005d3a:	b327      	cbz	r7, 8005d86 <USB_HC_StartXfer+0x10a>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d3c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005d40:	9003      	str	r0, [sp, #12]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d42:	9803      	ldr	r0, [sp, #12]
 8005d44:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005d48:	9003      	str	r0, [sp, #12]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d4a:	9803      	ldr	r0, [sp, #12]
 8005d4c:	f8c6 0500 	str.w	r0, [r6, #1280]	; 0x500
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005d50:	ea57 0005 	orrs.w	r0, r7, r5
 8005d54:	d10f      	bne.n	8005d76 <USB_HC_StartXfer+0xfa>
 8005d56:	b173      	cbz	r3, 8005d76 <USB_HC_StartXfer+0xfa>
    switch (hc->ep_type)
 8005d58:	79c8      	ldrb	r0, [r1, #7]
 8005d5a:	2803      	cmp	r0, #3
 8005d5c:	d821      	bhi.n	8005da2 <USB_HC_StartXfer+0x126>
 8005d5e:	e8df f000 	tbb	[pc, r0]
 8005d62:	2815      	.short	0x2815
 8005d64:	2815      	.short	0x2815
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005d66:	2d00      	cmp	r5, #0
 8005d68:	d1a0      	bne.n	8005cac <USB_HC_StartXfer+0x30>
 8005d6a:	794b      	ldrb	r3, [r1, #5]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d19d      	bne.n	8005cac <USB_HC_StartXfer+0x30>
      (void)USB_DoPing(USBx, hc->ch_num);
 8005d70:	4611      	mov	r1, r2
 8005d72:	f7ff ff71 	bl	8005c58 <USB_DoPing>
}
 8005d76:	2000      	movs	r0, #0
 8005d78:	b004      	add	sp, #16
 8005d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    num_packets = 1U;
 8005d7e:	2001      	movs	r0, #1
 8005d80:	e7a2      	b.n	8005cc8 <USB_HC_StartXfer+0x4c>
  if (hc->xfer_len > 0U)
 8005d82:	4698      	mov	r8, r3
 8005d84:	e7a7      	b.n	8005cd6 <USB_HC_StartXfer+0x5a>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005d86:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8005d8a:	e7d9      	b.n	8005d40 <USB_HC_StartXfer+0xc4>
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005d8c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005d8e:	1cd8      	adds	r0, r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005d90:	b2ad      	uxth	r5, r5
 8005d92:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8005d96:	4285      	cmp	r5, r0
 8005d98:	d203      	bcs.n	8005da2 <USB_HC_StartXfer+0x126>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005d9a:	69a0      	ldr	r0, [r4, #24]
 8005d9c:	f040 0020 	orr.w	r0, r0, #32
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005da0:	61a0      	str	r0, [r4, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005da2:	2000      	movs	r0, #0
 8005da4:	9000      	str	r0, [sp, #0]
 8005da6:	68c9      	ldr	r1, [r1, #12]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	4620      	mov	r0, r4
 8005dac:	f7ff fd72 	bl	8005894 <USB_WritePacket>
 8005db0:	e7e1      	b.n	8005d76 <USB_HC_StartXfer+0xfa>
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005db2:	f8dc 5010 	ldr.w	r5, [ip, #16]
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005db6:	1cd8      	adds	r0, r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005db8:	b2ad      	uxth	r5, r5
 8005dba:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8005dbe:	4285      	cmp	r5, r0
 8005dc0:	d2ef      	bcs.n	8005da2 <USB_HC_StartXfer+0x126>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005dc2:	69a0      	ldr	r0, [r4, #24]
 8005dc4:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8005dc8:	e7ea      	b.n	8005da0 <USB_HC_StartXfer+0x124>

08005dca <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005dca:	6883      	ldr	r3, [r0, #8]
 8005dcc:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd0:	b510      	push	{r4, lr}
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005dd2:	2110      	movs	r1, #16
{
 8005dd4:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005dd6:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005dd8:	f7ff fd3a 	bl	8005850 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f7ff fd49 	bl	8005874 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005de2:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8005de6:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
  (void)USB_FlushRxFifo(USBx);
 8005dea:	4619      	mov	r1, r3
  {
    value = USBx_HC(i)->HCCHAR;
 8005dec:	680a      	ldr	r2, [r1, #0]
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005dee:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8005df2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8005df6:	f841 2b20 	str.w	r2, [r1], #32
  for (i = 0U; i <= 15U; i++)
 8005dfa:	4281      	cmp	r1, r0
 8005dfc:	d1f6      	bne.n	8005dec <USB_StopHost+0x22>
  uint32_t count = 0U;
 8005dfe:	2100      	movs	r1, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8005e00:	681a      	ldr	r2, [r3, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005e02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e06:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8005e0a:	601a      	str	r2, [r3, #0]

    do
    {
      if (++count > 1000U)
 8005e0c:	3101      	adds	r1, #1
 8005e0e:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8005e12:	d802      	bhi.n	8005e1a <USB_StopHost+0x50>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	2a00      	cmp	r2, #0
 8005e18:	dbf8      	blt.n	8005e0c <USB_StopHost+0x42>
  for (i = 0U; i <= 15U; i++)
 8005e1a:	3320      	adds	r3, #32
 8005e1c:	4283      	cmp	r3, r0
 8005e1e:	d1ef      	bne.n	8005e00 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005e20:	f04f 33ff 	mov.w	r3, #4294967295
 8005e24:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005e28:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005e2a:	68a3      	ldr	r3, [r4, #8]
 8005e2c:	f043 0301 	orr.w	r3, r3, #1
 8005e30:	60a3      	str	r3, [r4, #8]

  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8005e32:	2000      	movs	r0, #0
 8005e34:	bd10      	pop	{r4, pc}
	...

08005e38 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005e38:	4b03      	ldr	r3, [pc, #12]	; (8005e48 <disk_status+0x10>)
 8005e3a:	181a      	adds	r2, r3, r0
 8005e3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005e40:	6843      	ldr	r3, [r0, #4]
 8005e42:	7b10      	ldrb	r0, [r2, #12]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	4718      	bx	r3
 8005e48:	20000894 	.word	0x20000894

08005e4c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8005e4c:	4b06      	ldr	r3, [pc, #24]	; (8005e68 <disk_initialize+0x1c>)
 8005e4e:	5c1a      	ldrb	r2, [r3, r0]
 8005e50:	b942      	cbnz	r2, 8005e64 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 8005e52:	2201      	movs	r2, #1
 8005e54:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005e56:	181a      	adds	r2, r3, r0
 8005e58:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8005e5c:	7b10      	ldrb	r0, [r2, #12]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4718      	bx	r3
  }
  return stat;
}
 8005e64:	2000      	movs	r0, #0
 8005e66:	4770      	bx	lr
 8005e68:	20000894 	.word	0x20000894

08005e6c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005e6c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005e6e:	4c05      	ldr	r4, [pc, #20]	; (8005e84 <disk_read+0x18>)
 8005e70:	1825      	adds	r5, r4, r0
 8005e72:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8005e76:	6840      	ldr	r0, [r0, #4]
 8005e78:	6884      	ldr	r4, [r0, #8]
 8005e7a:	7b28      	ldrb	r0, [r5, #12]
 8005e7c:	46a4      	mov	ip, r4
  return res;
}
 8005e7e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005e80:	4760      	bx	ip
 8005e82:	bf00      	nop
 8005e84:	20000894 	.word	0x20000894

08005e88 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005e88:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005e8a:	4c05      	ldr	r4, [pc, #20]	; (8005ea0 <disk_write+0x18>)
 8005e8c:	1825      	adds	r5, r4, r0
 8005e8e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8005e92:	6840      	ldr	r0, [r0, #4]
 8005e94:	68c4      	ldr	r4, [r0, #12]
 8005e96:	7b28      	ldrb	r0, [r5, #12]
 8005e98:	46a4      	mov	ip, r4
  return res;
}
 8005e9a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005e9c:	4760      	bx	ip
 8005e9e:	bf00      	nop
 8005ea0:	20000894 	.word	0x20000894

08005ea4 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005ea4:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <disk_ioctl+0x18>)
{
 8005ea6:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005ea8:	181c      	adds	r4, r3, r0
 8005eaa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005eae:	6843      	ldr	r3, [r0, #4]
 8005eb0:	7b20      	ldrb	r0, [r4, #12]
 8005eb2:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8005eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005eb8:	4718      	bx	r3
 8005eba:	bf00      	nop
 8005ebc:	20000894 	.word	0x20000894

08005ec0 <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	4770      	bx	lr

08005ec4 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8005ec4:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8005ec6:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8005ec8:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8005eca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8005ece:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005ed2:	4770      	bx	lr

08005ed4 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8005ed4:	0a0b      	lsrs	r3, r1, #8
 8005ed6:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ed8:	7043      	strb	r3, [r0, #1]
 8005eda:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8005edc:	0e09      	lsrs	r1, r1, #24
 8005ede:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8005ee0:	70c1      	strb	r1, [r0, #3]
}
 8005ee2:	4770      	bx	lr

08005ee4 <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8005ee4:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 8005ee6:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8005eea:	4290      	cmp	r0, r2
 8005eec:	d1fb      	bne.n	8005ee6 <mem_set+0x2>
}
 8005eee:	4770      	bx	lr

08005ef0 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8005ef0:	4a1b      	ldr	r2, [pc, #108]	; (8005f60 <chk_lock+0x70>)
 8005ef2:	6813      	ldr	r3, [r2, #0]
{
 8005ef4:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 8005ef6:	b163      	cbz	r3, 8005f12 <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ef8:	6804      	ldr	r4, [r0, #0]
 8005efa:	429c      	cmp	r4, r3
 8005efc:	d107      	bne.n	8005f0e <chk_lock+0x1e>
 8005efe:	6854      	ldr	r4, [r2, #4]
 8005f00:	6883      	ldr	r3, [r0, #8]
 8005f02:	429c      	cmp	r4, r3
 8005f04:	d103      	bne.n	8005f0e <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 8005f06:	6894      	ldr	r4, [r2, #8]
 8005f08:	6943      	ldr	r3, [r0, #20]
 8005f0a:	429c      	cmp	r4, r3
 8005f0c:	d020      	beq.n	8005f50 <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f0e:	2400      	movs	r4, #0
 8005f10:	e000      	b.n	8005f14 <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8005f12:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 8005f14:	6913      	ldr	r3, [r2, #16]
 8005f16:	b1cb      	cbz	r3, 8005f4c <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005f18:	6805      	ldr	r5, [r0, #0]
 8005f1a:	42ab      	cmp	r3, r5
 8005f1c:	d107      	bne.n	8005f2e <chk_lock+0x3e>
 8005f1e:	6955      	ldr	r5, [r2, #20]
 8005f20:	6883      	ldr	r3, [r0, #8]
 8005f22:	429d      	cmp	r5, r3
 8005f24:	d103      	bne.n	8005f2e <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 8005f26:	6995      	ldr	r5, [r2, #24]
 8005f28:	6943      	ldr	r3, [r0, #20]
 8005f2a:	429d      	cmp	r5, r3
 8005f2c:	d015      	beq.n	8005f5a <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005f2e:	b96c      	cbnz	r4, 8005f4c <chk_lock+0x5c>
 8005f30:	2902      	cmp	r1, #2
 8005f32:	bf0c      	ite	eq
 8005f34:	2000      	moveq	r0, #0
 8005f36:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8005f38:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005f3a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8005f3e:	8993      	ldrh	r3, [r2, #12]
 8005f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f44:	bf14      	ite	ne
 8005f46:	2000      	movne	r0, #0
 8005f48:	2010      	moveq	r0, #16
 8005f4a:	e7f5      	b.n	8005f38 <chk_lock+0x48>
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	e7f3      	b.n	8005f38 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f50:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005f52:	2900      	cmp	r1, #0
 8005f54:	d0f1      	beq.n	8005f3a <chk_lock+0x4a>
 8005f56:	2010      	movs	r0, #16
 8005f58:	e7ee      	b.n	8005f38 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e7f9      	b.n	8005f52 <chk_lock+0x62>
 8005f5e:	bf00      	nop
 8005f60:	20000868 	.word	0x20000868

08005f64 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8005f64:	4a1f      	ldr	r2, [pc, #124]	; (8005fe4 <inc_lock+0x80>)
{
 8005f66:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 8005f68:	6813      	ldr	r3, [r2, #0]
 8005f6a:	6806      	ldr	r6, [r0, #0]
 8005f6c:	429e      	cmp	r6, r3
 8005f6e:	d107      	bne.n	8005f80 <inc_lock+0x1c>
 8005f70:	6855      	ldr	r5, [r2, #4]
 8005f72:	6884      	ldr	r4, [r0, #8]
 8005f74:	42a5      	cmp	r5, r4
 8005f76:	d103      	bne.n	8005f80 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 8005f78:	6945      	ldr	r5, [r0, #20]
 8005f7a:	6894      	ldr	r4, [r2, #8]
 8005f7c:	42a5      	cmp	r5, r4
 8005f7e:	d01b      	beq.n	8005fb8 <inc_lock+0x54>
		if (Files[i].fs == dp->obj.fs &&
 8005f80:	6914      	ldr	r4, [r2, #16]
 8005f82:	42b4      	cmp	r4, r6
 8005f84:	d107      	bne.n	8005f96 <inc_lock+0x32>
 8005f86:	6957      	ldr	r7, [r2, #20]
 8005f88:	6885      	ldr	r5, [r0, #8]
 8005f8a:	42af      	cmp	r7, r5
 8005f8c:	d103      	bne.n	8005f96 <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 8005f8e:	6997      	ldr	r7, [r2, #24]
 8005f90:	6945      	ldr	r5, [r0, #20]
 8005f92:	42af      	cmp	r7, r5
 8005f94:	d019      	beq.n	8005fca <inc_lock+0x66>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f96:	b10b      	cbz	r3, 8005f9c <inc_lock+0x38>
 8005f98:	b9ac      	cbnz	r4, 8005fc6 <inc_lock+0x62>
 8005f9a:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8005f9c:	011d      	lsls	r5, r3, #4
 8005f9e:	eb02 1403 	add.w	r4, r2, r3, lsl #4
 8005fa2:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
 8005fa4:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 8005fa6:	6940      	ldr	r0, [r0, #20]
 8005fa8:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 8005faa:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8005fac:	6065      	str	r5, [r4, #4]
		Files[i].ctr = 0;
 8005fae:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005fb0:	b169      	cbz	r1, 8005fce <inc_lock+0x6a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005fb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fb6:	e00f      	b.n	8005fd8 <inc_lock+0x74>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005fb8:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005fba:	b141      	cbz	r1, 8005fce <inc_lock+0x6a>
 8005fbc:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8005fc0:	8989      	ldrh	r1, [r1, #12]
 8005fc2:	2900      	cmp	r1, #0
 8005fc4:	d0f5      	beq.n	8005fb2 <inc_lock+0x4e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	e00a      	b.n	8005fe0 <inc_lock+0x7c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e7f5      	b.n	8005fba <inc_lock+0x56>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005fce:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8005fd2:	8989      	ldrh	r1, [r1, #12]
 8005fd4:	3101      	adds	r1, #1
 8005fd6:	b289      	uxth	r1, r1
 8005fd8:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 8005fdc:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005fde:	8191      	strh	r1, [r2, #12]
}
 8005fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000868 	.word	0x20000868

08005fe8 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005fe8:	3801      	subs	r0, #1
 8005fea:	2801      	cmp	r0, #1
 8005fec:	d815      	bhi.n	800601a <dec_lock+0x32>
		n = Files[i].ctr;
 8005fee:	4a0c      	ldr	r2, [pc, #48]	; (8006020 <dec_lock+0x38>)
 8005ff0:	0101      	lsls	r1, r0, #4
 8005ff2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8005ff6:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ffc:	d104      	bne.n	8006008 <dec_lock+0x20>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 8005ffe:	2300      	movs	r3, #0
 8006000:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006002:	2000      	movs	r0, #0
 8006004:	5050      	str	r0, [r2, r1]
 8006006:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 8006008:	2b00      	cmp	r3, #0
 800600a:	d0fa      	beq.n	8006002 <dec_lock+0x1a>
 800600c:	3b01      	subs	r3, #1
 800600e:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8006010:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0f5      	beq.n	8006002 <dec_lock+0x1a>
		res = FR_OK;
 8006016:	2000      	movs	r0, #0
 8006018:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800601a:	2002      	movs	r0, #2
	}
	return res;
}
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	20000868 	.word	0x20000868

08006024 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006024:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 8006026:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006028:	3b02      	subs	r3, #2
 800602a:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 800602c:	bf83      	ittte	hi
 800602e:	8943      	ldrhhi	r3, [r0, #10]
 8006030:	6ac0      	ldrhi	r0, [r0, #44]	; 0x2c
 8006032:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006036:	2000      	movls	r0, #0
}
 8006038:	4770      	bx	lr

0800603a <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800603a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800603c:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800603e:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006040:	8952      	ldrh	r2, [r2, #10]
 8006042:	0a49      	lsrs	r1, r1, #9
 8006044:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006048:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800604a:	b130      	cbz	r0, 800605a <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 800604c:	4281      	cmp	r1, r0
 800604e:	d302      	bcc.n	8006056 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8006050:	1a09      	subs	r1, r1, r0
 8006052:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006054:	e7f8      	b.n	8006048 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8006056:	6858      	ldr	r0, [r3, #4]
 8006058:	4408      	add	r0, r1
}
 800605a:	4770      	bx	lr

0800605c <sum_sfn>:
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
	BYTE sum = 0;
	UINT n = 11;
 800605c:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8006060:	2200      	movs	r2, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006062:	01d3      	lsls	r3, r2, #7
 8006064:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8006068:	f810 2b01 	ldrb.w	r2, [r0], #1
 800606c:	fa52 f383 	uxtab	r3, r2, r3
	} while (--n);
 8006070:	4288      	cmp	r0, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006072:	b2da      	uxtb	r2, r3
	} while (--n);
 8006074:	d1f5      	bne.n	8006062 <sum_sfn+0x6>
	return sum;
}
 8006076:	4610      	mov	r0, r2
 8006078:	4770      	bx	lr

0800607a <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800607a:	6803      	ldr	r3, [r0, #0]
{
 800607c:	b510      	push	{r4, lr}
 800607e:	4601      	mov	r1, r0
	if (*path) {	/* If the pointer is not a null */
 8006080:	b153      	cbz	r3, 8006098 <get_ldnumber+0x1e>
 8006082:	4618      	mov	r0, r3
 8006084:	4602      	mov	r2, r0
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006086:	f810 4b01 	ldrb.w	r4, [r0], #1
 800608a:	2c1f      	cmp	r4, #31
 800608c:	d910      	bls.n	80060b0 <get_ldnumber+0x36>
 800608e:	2c3a      	cmp	r4, #58	; 0x3a
 8006090:	d1f8      	bne.n	8006084 <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8006092:	1c58      	adds	r0, r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006094:	4282      	cmp	r2, r0
 8006096:	d002      	beq.n	800609e <get_ldnumber+0x24>
	int vol = -1;
 8006098:	f04f 30ff 	mov.w	r0, #4294967295
 800609c:	e007      	b.n	80060ae <get_ldnumber+0x34>
			i = *tp++ - '0';
 800609e:	781b      	ldrb	r3, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80060a0:	3b30      	subs	r3, #48	; 0x30
 80060a2:	b2d8      	uxtb	r0, r3
 80060a4:	2801      	cmp	r0, #1
 80060a6:	d8f7      	bhi.n	8006098 <get_ldnumber+0x1e>
					vol = (int)i;
					*path = ++tt;
 80060a8:	3201      	adds	r2, #1
			i = *tp++ - '0';
 80060aa:	4618      	mov	r0, r3
					*path = ++tt;
 80060ac:	600a      	str	r2, [r1, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 80060ae:	bd10      	pop	{r4, pc}
		vol = 0;		/* Drive 0 */
 80060b0:	2000      	movs	r0, #0
 80060b2:	e7fc      	b.n	80060ae <get_ldnumber+0x34>

080060b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80060b8:	4604      	mov	r4, r0
 80060ba:	b918      	cbnz	r0, 80060c4 <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 80060bc:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80060be:	2300      	movs	r3, #0
 80060c0:	602b      	str	r3, [r5, #0]
	return res;
}
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80060c4:	6803      	ldr	r3, [r0, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0f8      	beq.n	80060bc <validate+0x8>
 80060ca:	781a      	ldrb	r2, [r3, #0]
 80060cc:	2a00      	cmp	r2, #0
 80060ce:	d0f5      	beq.n	80060bc <validate+0x8>
 80060d0:	8881      	ldrh	r1, [r0, #4]
 80060d2:	88da      	ldrh	r2, [r3, #6]
 80060d4:	4291      	cmp	r1, r2
 80060d6:	d1f1      	bne.n	80060bc <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80060d8:	7858      	ldrb	r0, [r3, #1]
 80060da:	f7ff fead 	bl	8005e38 <disk_status>
 80060de:	f010 0001 	ands.w	r0, r0, #1
 80060e2:	d1eb      	bne.n	80060bc <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	e7eb      	b.n	80060c0 <validate+0xc>

080060e8 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80060e8:	3801      	subs	r0, #1
 80060ea:	440a      	add	r2, r1
			*d++ = *s++;
 80060ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060f0:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 80060f4:	4291      	cmp	r1, r2
 80060f6:	d1f9      	bne.n	80060ec <mem_cpy.part.0+0x4>
}
 80060f8:	4770      	bx	lr

080060fa <ld_clust.isra.0>:
	rv = rv << 8 | ptr[0];
 80060fa:	7eca      	ldrb	r2, [r1, #27]
 80060fc:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 80060fe:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8006100:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8006104:	bf01      	itttt	eq
 8006106:	7d48      	ldrbeq	r0, [r1, #21]
 8006108:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800610a:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 800610e:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8006112:	4618      	mov	r0, r3
 8006114:	4770      	bx	lr

08006116 <st_clust.isra.0>:
	*ptr++ = (BYTE)val; val >>= 8;
 8006116:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800611a:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 800611c:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 800611e:	7803      	ldrb	r3, [r0, #0]
 8006120:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006122:	bf01      	itttt	eq
 8006124:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8006126:	750a      	strbeq	r2, [r1, #20]
 8006128:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800612a:	754a      	strbeq	r2, [r1, #21]
}
 800612c:	4770      	bx	lr

0800612e <sync_window.part.0>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800612e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
 8006132:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006134:	f100 0834 	add.w	r8, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8006138:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800613a:	2301      	movs	r3, #1
 800613c:	7840      	ldrb	r0, [r0, #1]
 800613e:	4632      	mov	r2, r6
 8006140:	4641      	mov	r1, r8
 8006142:	f7ff fea1 	bl	8005e88 <disk_write>
 8006146:	4605      	mov	r5, r0
 8006148:	b9a8      	cbnz	r0, 8006176 <sync_window.part.0+0x48>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800614a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800614c:	69e2      	ldr	r2, [r4, #28]
			fs->wflag = 0;
 800614e:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006150:	1af3      	subs	r3, r6, r3
 8006152:	4293      	cmp	r3, r2
 8006154:	d202      	bcs.n	800615c <sync_window.part.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006156:	78a7      	ldrb	r7, [r4, #2]
 8006158:	2f01      	cmp	r7, #1
 800615a:	d802      	bhi.n	8006162 <sync_window.part.0+0x34>
}
 800615c:	4628      	mov	r0, r5
 800615e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					wsect += fs->fsize;
 8006162:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006164:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8006166:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8006168:	4632      	mov	r2, r6
 800616a:	2301      	movs	r3, #1
 800616c:	4641      	mov	r1, r8
 800616e:	f7ff fe8b 	bl	8005e88 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006172:	3f01      	subs	r7, #1
 8006174:	e7f0      	b.n	8006158 <sync_window.part.0+0x2a>
			res = FR_DISK_ERR;
 8006176:	2501      	movs	r5, #1
 8006178:	e7f0      	b.n	800615c <sync_window.part.0+0x2e>

0800617a <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800617a:	78c3      	ldrb	r3, [r0, #3]
 800617c:	b10b      	cbz	r3, 8006182 <sync_window+0x8>
 800617e:	f7ff bfd6 	b.w	800612e <sync_window.part.0>
}
 8006182:	4618      	mov	r0, r3
 8006184:	4770      	bx	lr

08006186 <move_window>:
{
 8006186:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006188:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800618a:	428b      	cmp	r3, r1
{
 800618c:	4605      	mov	r5, r0
 800618e:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006190:	d010      	beq.n	80061b4 <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
 8006192:	f7ff fff2 	bl	800617a <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006196:	b960      	cbnz	r0, 80061b2 <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006198:	4622      	mov	r2, r4
 800619a:	7868      	ldrb	r0, [r5, #1]
 800619c:	2301      	movs	r3, #1
 800619e:	f105 0134 	add.w	r1, r5, #52	; 0x34
 80061a2:	f7ff fe63 	bl	8005e6c <disk_read>
				res = FR_DISK_ERR;
 80061a6:	2800      	cmp	r0, #0
 80061a8:	bf1c      	itt	ne
 80061aa:	f04f 34ff 	movne.w	r4, #4294967295
 80061ae:	2001      	movne	r0, #1
			fs->winsect = sector;
 80061b0:	632c      	str	r4, [r5, #48]	; 0x30
}
 80061b2:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 80061b4:	2000      	movs	r0, #0
 80061b6:	e7fc      	b.n	80061b2 <move_window+0x2c>

080061b8 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80061b8:	2300      	movs	r3, #0
{
 80061ba:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80061bc:	70c3      	strb	r3, [r0, #3]
 80061be:	f04f 33ff 	mov.w	r3, #4294967295
 80061c2:	6303      	str	r3, [r0, #48]	; 0x30
{
 80061c4:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80061c6:	f7ff ffde 	bl	8006186 <move_window>
 80061ca:	4601      	mov	r1, r0
 80061cc:	bb30      	cbnz	r0, 800621c <check_fs+0x64>
	rv = rv << 8 | ptr[0];
 80061ce:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 80061d2:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 80061d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80061da:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80061de:	4293      	cmp	r3, r2
 80061e0:	d11e      	bne.n	8006220 <check_fs+0x68>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80061e2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80061e6:	2be9      	cmp	r3, #233	; 0xe9
 80061e8:	d005      	beq.n	80061f6 <check_fs+0x3e>
 80061ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061ec:	4a0e      	ldr	r2, [pc, #56]	; (8006228 <check_fs+0x70>)
 80061ee:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d116      	bne.n	8006224 <check_fs+0x6c>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80061f6:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 80061fa:	f7ff fe63 	bl	8005ec4 <ld_dword>
 80061fe:	4b0b      	ldr	r3, [pc, #44]	; (800622c <check_fs+0x74>)
 8006200:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006204:	4298      	cmp	r0, r3
 8006206:	d007      	beq.n	8006218 <check_fs+0x60>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006208:	f104 0086 	add.w	r0, r4, #134	; 0x86
 800620c:	f7ff fe5a 	bl	8005ec4 <ld_dword>
	return 2;
 8006210:	4b07      	ldr	r3, [pc, #28]	; (8006230 <check_fs+0x78>)
 8006212:	4298      	cmp	r0, r3
 8006214:	bf18      	it	ne
 8006216:	2102      	movne	r1, #2
}
 8006218:	4608      	mov	r0, r1
 800621a:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800621c:	2104      	movs	r1, #4
 800621e:	e7fb      	b.n	8006218 <check_fs+0x60>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006220:	2103      	movs	r1, #3
 8006222:	e7f9      	b.n	8006218 <check_fs+0x60>
	return 2;
 8006224:	2102      	movs	r1, #2
 8006226:	e7f7      	b.n	8006218 <check_fs+0x60>
 8006228:	009000eb 	.word	0x009000eb
 800622c:	00544146 	.word	0x00544146
 8006230:	33544146 	.word	0x33544146

08006234 <find_volume>:
{
 8006234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 8006238:	2300      	movs	r3, #0
{
 800623a:	b085      	sub	sp, #20
	*rfs = 0;
 800623c:	600b      	str	r3, [r1, #0]
{
 800623e:	460d      	mov	r5, r1
 8006240:	4617      	mov	r7, r2
	vol = get_ldnumber(path);
 8006242:	f7ff ff1a 	bl	800607a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006246:	1e06      	subs	r6, r0, #0
 8006248:	f2c0 8151 	blt.w	80064ee <find_volume+0x2ba>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800624c:	4bac      	ldr	r3, [pc, #688]	; (8006500 <find_volume+0x2cc>)
 800624e:	eb03 0286 	add.w	r2, r3, r6, lsl #2
 8006252:	4698      	mov	r8, r3
 8006254:	6a14      	ldr	r4, [r2, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006256:	2c00      	cmp	r4, #0
 8006258:	f000 814b 	beq.w	80064f2 <find_volume+0x2be>
	*rfs = fs;							/* Return pointer to the file system object */
 800625c:	602c      	str	r4, [r5, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800625e:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006260:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006264:	b17b      	cbz	r3, 8006286 <find_volume+0x52>
		stat = disk_status(fs->drv);
 8006266:	7860      	ldrb	r0, [r4, #1]
 8006268:	f7ff fde6 	bl	8005e38 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800626c:	07c1      	lsls	r1, r0, #31
 800626e:	d40a      	bmi.n	8006286 <find_volume+0x52>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006270:	2f00      	cmp	r7, #0
 8006272:	f000 8140 	beq.w	80064f6 <find_volume+0x2c2>
 8006276:	f010 0504 	ands.w	r5, r0, #4
 800627a:	d000      	beq.n	800627e <find_volume+0x4a>
				return FR_WRITE_PROTECTED;
 800627c:	250a      	movs	r5, #10
}
 800627e:	4628      	mov	r0, r5
 8006280:	b005      	add	sp, #20
 8006282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8006286:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006288:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 800628a:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800628c:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800628e:	f7ff fddd 	bl	8005e4c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006292:	f010 0501 	ands.w	r5, r0, #1
 8006296:	f040 8130 	bne.w	80064fa <find_volume+0x2c6>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800629a:	b10f      	cbz	r7, 80062a0 <find_volume+0x6c>
 800629c:	0742      	lsls	r2, r0, #29
 800629e:	d4ed      	bmi.n	800627c <find_volume+0x48>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80062a0:	2100      	movs	r1, #0
 80062a2:	4620      	mov	r0, r4
 80062a4:	f7ff ff88 	bl	80061b8 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80062a8:	2802      	cmp	r0, #2
 80062aa:	f040 8104 	bne.w	80064b6 <find_volume+0x282>
 80062ae:	466e      	mov	r6, sp
 80062b0:	f504 71fd 	add.w	r1, r4, #506	; 0x1fa
 80062b4:	f204 293a 	addw	r9, r4, #570	; 0x23a
 80062b8:	4637      	mov	r7, r6
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80062ba:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 80062be:	b110      	cbz	r0, 80062c6 <find_volume+0x92>
 80062c0:	4608      	mov	r0, r1
 80062c2:	f7ff fdff 	bl	8005ec4 <ld_dword>
 80062c6:	3110      	adds	r1, #16
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80062c8:	4589      	cmp	r9, r1
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80062ca:	f847 0b04 	str.w	r0, [r7], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80062ce:	d1f4      	bne.n	80062ba <find_volume+0x86>
 80062d0:	2700      	movs	r7, #0
			bsect = br[i];
 80062d2:	f856 ab04 	ldr.w	sl, [r6], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80062d6:	f1ba 0f00 	cmp.w	sl, #0
 80062da:	f000 80e3 	beq.w	80064a4 <find_volume+0x270>
 80062de:	4651      	mov	r1, sl
 80062e0:	4620      	mov	r0, r4
 80062e2:	f7ff ff69 	bl	80061b8 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80062e6:	2801      	cmp	r0, #1
 80062e8:	f200 80dd 	bhi.w	80064a6 <find_volume+0x272>
	rv = rv << 8 | ptr[0];
 80062ec:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80062f0:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80062f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80062f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062fc:	f040 80df 	bne.w	80064be <find_volume+0x28a>
	rv = rv << 8 | ptr[0];
 8006300:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
 8006304:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006308:	ea56 2600 	orrs.w	r6, r6, r0, lsl #8
 800630c:	d104      	bne.n	8006318 <find_volume+0xe4>
 800630e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006312:	f7ff fdd7 	bl	8005ec4 <ld_dword>
 8006316:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006318:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
		fs->fsize = fasize;
 800631c:	61e6      	str	r6, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800631e:	1e7b      	subs	r3, r7, #1
 8006320:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006322:	70a7      	strb	r7, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006324:	f200 80cb 	bhi.w	80064be <find_volume+0x28a>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006328:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
 800632c:	f8a4 900a 	strh.w	r9, [r4, #10]
 8006330:	464b      	mov	r3, r9
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 80c3 	beq.w	80064be <find_volume+0x28a>
 8006338:	f109 33ff 	add.w	r3, r9, #4294967295
 800633c:	ea13 0f09 	tst.w	r3, r9
 8006340:	f040 80bd 	bne.w	80064be <find_volume+0x28a>
	rv = rv << 8 | ptr[0];
 8006344:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006348:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800634c:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006350:	070b      	lsls	r3, r1, #28
	rv = rv << 8 | ptr[0];
 8006352:	fa0f fb81 	sxth.w	fp, r1
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006356:	8121      	strh	r1, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006358:	f040 80b1 	bne.w	80064be <find_volume+0x28a>
	rv = rv << 8 | ptr[0];
 800635c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8006360:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006364:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 8006368:	d103      	bne.n	8006372 <find_volume+0x13e>
 800636a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800636e:	f7ff fda9 	bl	8005ec4 <ld_dword>
	rv = rv << 8 | ptr[0];
 8006372:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006376:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800637a:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800637e:	f000 809e 	beq.w	80064be <find_volume+0x28a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006382:	fb06 fc07 	mul.w	ip, r6, r7
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006386:	eb03 1211 	add.w	r2, r3, r1, lsr #4
 800638a:	4462      	add	r2, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800638c:	4290      	cmp	r0, r2
 800638e:	f0c0 8096 	bcc.w	80064be <find_volume+0x28a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006392:	1a80      	subs	r0, r0, r2
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006394:	4548      	cmp	r0, r9
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006396:	fbb0 f7f9 	udiv	r7, r0, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800639a:	f0c0 8090 	bcc.w	80064be <find_volume+0x28a>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800639e:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 80063a2:	4287      	cmp	r7, r0
 80063a4:	f200 8090 	bhi.w	80064c8 <find_volume+0x294>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80063a8:	f640 79f5 	movw	r9, #4085	; 0xff5
 80063ac:	454f      	cmp	r7, r9
 80063ae:	bf8c      	ite	hi
 80063b0:	f04f 0902 	movhi.w	r9, #2
 80063b4:	f04f 0901 	movls.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80063b8:	3702      	adds	r7, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80063ba:	4453      	add	r3, sl
		fs->database = bsect + sysect;					/* Data start sector */
 80063bc:	4452      	add	r2, sl
		if (fmt == FS_FAT32) {
 80063be:	f1b9 0f03 	cmp.w	r9, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80063c2:	61a7      	str	r7, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80063c4:	f8c4 a020 	str.w	sl, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80063c8:	6263      	str	r3, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80063ca:	62e2      	str	r2, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80063cc:	d17f      	bne.n	80064ce <find_volume+0x29a>
	rv = rv << 8 | ptr[0];
 80063ce:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 80063d2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 80063d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80063da:	ea4b 0b03 	orr.w	fp, fp, r3
 80063de:	fa0f f38b 	sxth.w	r3, fp
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d16b      	bne.n	80064be <find_volume+0x28a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80063e6:	f104 0060 	add.w	r0, r4, #96	; 0x60
 80063ea:	f7ff fd6b 	bl	8005ec4 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80063ee:	00bf      	lsls	r7, r7, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80063f0:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80063f2:	f207 17ff 	addw	r7, r7, #511	; 0x1ff
 80063f6:	ebb6 2f57 	cmp.w	r6, r7, lsr #9
 80063fa:	d360      	bcc.n	80064be <find_volume+0x28a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80063fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006400:	e9c4 3304 	strd	r3, r3, [r4, #16]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006404:	f1b9 0f03 	cmp.w	r9, #3
		fs->fsi_flag = 0x80;
 8006408:	f04f 0380 	mov.w	r3, #128	; 0x80
 800640c:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800640e:	d130      	bne.n	8006472 <find_volume+0x23e>
	rv = rv << 8 | ptr[0];
 8006410:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 8006414:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8006418:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800641c:	2b01      	cmp	r3, #1
 800641e:	d128      	bne.n	8006472 <find_volume+0x23e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006420:	f10a 0101 	add.w	r1, sl, #1
 8006424:	4620      	mov	r0, r4
 8006426:	f7ff feae 	bl	8006186 <move_window>
 800642a:	bb10      	cbnz	r0, 8006472 <find_volume+0x23e>
	rv = rv << 8 | ptr[0];
 800642c:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8006430:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 8006434:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8006436:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800643a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800643e:	4293      	cmp	r3, r2
 8006440:	d117      	bne.n	8006472 <find_volume+0x23e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006442:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8006446:	f7ff fd3d 	bl	8005ec4 <ld_dword>
 800644a:	4b2e      	ldr	r3, [pc, #184]	; (8006504 <find_volume+0x2d0>)
 800644c:	4298      	cmp	r0, r3
 800644e:	d110      	bne.n	8006472 <find_volume+0x23e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006450:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8006454:	f7ff fd36 	bl	8005ec4 <ld_dword>
 8006458:	4b2b      	ldr	r3, [pc, #172]	; (8006508 <find_volume+0x2d4>)
 800645a:	4298      	cmp	r0, r3
 800645c:	d109      	bne.n	8006472 <find_volume+0x23e>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800645e:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8006462:	f7ff fd2f 	bl	8005ec4 <ld_dword>
 8006466:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006468:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800646c:	f7ff fd2a 	bl	8005ec4 <ld_dword>
 8006470:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 8006472:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
	fs->fs_type = fmt;		/* FAT sub-type */
 8006476:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 800647a:	3301      	adds	r3, #1
 800647c:	b29b      	uxth	r3, r3
 800647e:	f8a8 3028 	strh.w	r3, [r8, #40]	; 0x28
 8006482:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006484:	f8d8 3000 	ldr.w	r3, [r8]
 8006488:	429c      	cmp	r4, r3
 800648a:	bf04      	itt	eq
 800648c:	2300      	moveq	r3, #0
 800648e:	f8c8 3000 	streq.w	r3, [r8]
 8006492:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006496:	429c      	cmp	r4, r3
 8006498:	f47f aef1 	bne.w	800627e <find_volume+0x4a>
 800649c:	2300      	movs	r3, #0
 800649e:	f8c8 3010 	str.w	r3, [r8, #16]
 80064a2:	e6ec      	b.n	800627e <find_volume+0x4a>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80064a4:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80064a6:	3701      	adds	r7, #1
 80064a8:	2f04      	cmp	r7, #4
 80064aa:	f47f af12 	bne.w	80062d2 <find_volume+0x9e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80064ae:	2804      	cmp	r0, #4
 80064b0:	d105      	bne.n	80064be <find_volume+0x28a>
 80064b2:	2501      	movs	r5, #1
 80064b4:	e6e3      	b.n	800627e <find_volume+0x4a>
 80064b6:	2804      	cmp	r0, #4
 80064b8:	d0fb      	beq.n	80064b2 <find_volume+0x27e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80064ba:	2801      	cmp	r0, #1
 80064bc:	d901      	bls.n	80064c2 <find_volume+0x28e>
 80064be:	250d      	movs	r5, #13
 80064c0:	e6dd      	b.n	800627e <find_volume+0x4a>
	bsect = 0;
 80064c2:	f04f 0a00 	mov.w	sl, #0
 80064c6:	e711      	b.n	80062ec <find_volume+0xb8>
		fmt = FS_FAT32;
 80064c8:	f04f 0903 	mov.w	r9, #3
 80064cc:	e774      	b.n	80063b8 <find_volume+0x184>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80064ce:	2900      	cmp	r1, #0
 80064d0:	d0f5      	beq.n	80064be <find_volume+0x28a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80064d2:	4463      	add	r3, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80064d4:	f1b9 0f02 	cmp.w	r9, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80064d8:	62a3      	str	r3, [r4, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80064da:	ea4f 0347 	mov.w	r3, r7, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80064de:	bf1b      	ittet	ne
 80064e0:	19db      	addne	r3, r3, r7
 80064e2:	f007 0701 	andne.w	r7, r7, #1
 80064e6:	461f      	moveq	r7, r3
 80064e8:	eb07 0753 	addne.w	r7, r7, r3, lsr #1
 80064ec:	e781      	b.n	80063f2 <find_volume+0x1be>
	if (vol < 0) return FR_INVALID_DRIVE;
 80064ee:	250b      	movs	r5, #11
 80064f0:	e6c5      	b.n	800627e <find_volume+0x4a>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80064f2:	250c      	movs	r5, #12
 80064f4:	e6c3      	b.n	800627e <find_volume+0x4a>
			return FR_OK;				/* The file system object is valid */
 80064f6:	463d      	mov	r5, r7
 80064f8:	e6c1      	b.n	800627e <find_volume+0x4a>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80064fa:	2503      	movs	r5, #3
 80064fc:	e6bf      	b.n	800627e <find_volume+0x4a>
 80064fe:	bf00      	nop
 8006500:	20000868 	.word	0x20000868
 8006504:	41615252 	.word	0x41615252
 8006508:	61417272 	.word	0x61417272

0800650c <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800650c:	2901      	cmp	r1, #1
{
 800650e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006512:	4606      	mov	r6, r0
 8006514:	460c      	mov	r4, r1
 8006516:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006518:	d973      	bls.n	8006602 <put_fat+0xf6>
 800651a:	6983      	ldr	r3, [r0, #24]
 800651c:	428b      	cmp	r3, r1
 800651e:	d970      	bls.n	8006602 <put_fat+0xf6>
		switch (fs->fs_type) {
 8006520:	7803      	ldrb	r3, [r0, #0]
 8006522:	2b02      	cmp	r3, #2
 8006524:	d03f      	beq.n	80065a6 <put_fat+0x9a>
 8006526:	2b03      	cmp	r3, #3
 8006528:	d050      	beq.n	80065cc <put_fat+0xc0>
 800652a:	2b01      	cmp	r3, #1
 800652c:	d169      	bne.n	8006602 <put_fat+0xf6>
			bc = (UINT)clst; bc += bc / 2;
 800652e:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006532:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8006534:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8006538:	f7ff fe25 	bl	8006186 <move_window>
 800653c:	4605      	mov	r5, r0
			if (res != FR_OK) break;
 800653e:	bb38      	cbnz	r0, 8006590 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 8006540:	f106 0934 	add.w	r9, r6, #52	; 0x34
 8006544:	f108 0a01 	add.w	sl, r8, #1
 8006548:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800654c:	f014 0401 	ands.w	r4, r4, #1
 8006550:	bf1f      	itttt	ne
 8006552:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8006556:	f003 020f 	andne.w	r2, r3, #15
 800655a:	013b      	lslne	r3, r7, #4
 800655c:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8006560:	bf14      	ite	ne
 8006562:	4313      	orrne	r3, r2
 8006564:	b2fb      	uxtbeq	r3, r7
 8006566:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800656a:	6a71      	ldr	r1, [r6, #36]	; 0x24
			fs->wflag = 1;
 800656c:	2301      	movs	r3, #1
 800656e:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006570:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8006574:	4630      	mov	r0, r6
 8006576:	f7ff fe06 	bl	8006186 <move_window>
			if (res != FR_OK) break;
 800657a:	4605      	mov	r5, r0
 800657c:	b940      	cbnz	r0, 8006590 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 800657e:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006582:	b144      	cbz	r4, 8006596 <put_fat+0x8a>
 8006584:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8006588:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 800658c:	2301      	movs	r3, #1
 800658e:	70f3      	strb	r3, [r6, #3]
}
 8006590:	4628      	mov	r0, r5
 8006592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006596:	f819 300a 	ldrb.w	r3, [r9, sl]
 800659a:	f3c7 2703 	ubfx	r7, r7, #8, #4
 800659e:	f023 030f 	bic.w	r3, r3, #15
 80065a2:	431f      	orrs	r7, r3
 80065a4:	e7f0      	b.n	8006588 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80065a6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80065a8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80065ac:	f7ff fdeb 	bl	8006186 <move_window>
			if (res != FR_OK) break;
 80065b0:	4605      	mov	r5, r0
 80065b2:	2800      	cmp	r0, #0
 80065b4:	d1ec      	bne.n	8006590 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80065b6:	0064      	lsls	r4, r4, #1
 80065b8:	f106 0334 	add.w	r3, r6, #52	; 0x34
 80065bc:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80065c0:	1918      	adds	r0, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80065c2:	551f      	strb	r7, [r3, r4]
 80065c4:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 80065c8:	7047      	strb	r7, [r0, #1]
			fs->wflag = 1;
 80065ca:	e7df      	b.n	800658c <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80065cc:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80065ce:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80065d2:	f7ff fdd8 	bl	8006186 <move_window>
			if (res != FR_OK) break;
 80065d6:	4605      	mov	r5, r0
 80065d8:	2800      	cmp	r0, #0
 80065da:	d1d9      	bne.n	8006590 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80065dc:	00a4      	lsls	r4, r4, #2
 80065de:	f106 0334 	add.w	r3, r6, #52	; 0x34
 80065e2:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80065e6:	441c      	add	r4, r3
 80065e8:	4620      	mov	r0, r4
 80065ea:	f7ff fc6b 	bl	8005ec4 <ld_dword>
 80065ee:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 80065f2:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80065f6:	ea47 0100 	orr.w	r1, r7, r0
 80065fa:	4620      	mov	r0, r4
 80065fc:	f7ff fc6a 	bl	8005ed4 <st_dword>
 8006600:	e7c4      	b.n	800658c <put_fat+0x80>
		switch (fs->fs_type) {
 8006602:	2502      	movs	r5, #2
 8006604:	e7c4      	b.n	8006590 <put_fat+0x84>

08006606 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006606:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	4605      	mov	r5, r0
 800660c:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800660e:	d952      	bls.n	80066b6 <get_fat.isra.0+0xb0>
 8006610:	6983      	ldr	r3, [r0, #24]
 8006612:	4299      	cmp	r1, r3
 8006614:	d24f      	bcs.n	80066b6 <get_fat.isra.0+0xb0>
		switch (fs->fs_type) {
 8006616:	7803      	ldrb	r3, [r0, #0]
 8006618:	2b02      	cmp	r3, #2
 800661a:	d029      	beq.n	8006670 <get_fat.isra.0+0x6a>
 800661c:	2b03      	cmp	r3, #3
 800661e:	d038      	beq.n	8006692 <get_fat.isra.0+0x8c>
 8006620:	2b01      	cmp	r3, #1
 8006622:	d148      	bne.n	80066b6 <get_fat.isra.0+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 8006624:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006628:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800662a:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800662e:	f7ff fdaa 	bl	8006186 <move_window>
 8006632:	b110      	cbz	r0, 800663a <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006634:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800663a:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800663c:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800663e:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8006642:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006644:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8006648:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800664a:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800664e:	f7ff fd9a 	bl	8006186 <move_window>
 8006652:	2800      	cmp	r0, #0
 8006654:	d1ee      	bne.n	8006634 <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006656:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800665a:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800665c:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800665e:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8006662:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006666:	bf4c      	ite	mi
 8006668:	0900      	lsrmi	r0, r0, #4
 800666a:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 800666e:	e7e3      	b.n	8006638 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006670:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8006672:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8006676:	f7ff fd86 	bl	8006186 <move_window>
 800667a:	2800      	cmp	r0, #0
 800667c:	d1da      	bne.n	8006634 <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800667e:	0064      	lsls	r4, r4, #1
 8006680:	3534      	adds	r5, #52	; 0x34
 8006682:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8006686:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 8006688:	5d28      	ldrb	r0, [r5, r4]
 800668a:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800668c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
 8006690:	e7d2      	b.n	8006638 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006692:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8006694:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8006698:	f7ff fd75 	bl	8006186 <move_window>
 800669c:	2800      	cmp	r0, #0
 800669e:	d1c9      	bne.n	8006634 <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80066a0:	00a4      	lsls	r4, r4, #2
 80066a2:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80066a6:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80066aa:	4420      	add	r0, r4
 80066ac:	f7ff fc0a 	bl	8005ec4 <ld_dword>
 80066b0:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 80066b4:	e7c0      	b.n	8006638 <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
 80066b6:	2001      	movs	r0, #1
	return val;
 80066b8:	e7be      	b.n	8006638 <get_fat.isra.0+0x32>

080066ba <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80066ba:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 80066be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c0:	4606      	mov	r6, r0
 80066c2:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80066c4:	d301      	bcc.n	80066ca <dir_sdi+0x10>
		return FR_INT_ERR;
 80066c6:	2002      	movs	r0, #2
}
 80066c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80066ca:	06ca      	lsls	r2, r1, #27
 80066cc:	d1fb      	bne.n	80066c6 <dir_sdi+0xc>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80066ce:	6882      	ldr	r2, [r0, #8]
	FATFS *fs = dp->obj.fs;
 80066d0:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 80066d2:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80066d4:	b9ca      	cbnz	r2, 800670a <dir_sdi+0x50>
 80066d6:	782b      	ldrb	r3, [r5, #0]
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d901      	bls.n	80066e0 <dir_sdi+0x26>
		clst = fs->dirbase;
 80066dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80066de:	b99b      	cbnz	r3, 8006708 <dir_sdi+0x4e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80066e0:	892b      	ldrh	r3, [r5, #8]
 80066e2:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 80066e6:	d9ee      	bls.n	80066c6 <dir_sdi+0xc>
		dp->sect = fs->dirbase;
 80066e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80066ea:	61f3      	str	r3, [r6, #28]
	if (!dp->sect) return FR_INT_ERR;
 80066ec:	69f3      	ldr	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 80066ee:	61b2      	str	r2, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0e8      	beq.n	80066c6 <dir_sdi+0xc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80066f4:	eb03 2354 	add.w	r3, r3, r4, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80066f8:	3534      	adds	r5, #52	; 0x34
 80066fa:	f3c4 0408 	ubfx	r4, r4, #0, #9
 80066fe:	442c      	add	r4, r5
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006700:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006702:	6234      	str	r4, [r6, #32]
	return FR_OK;
 8006704:	2000      	movs	r0, #0
 8006706:	e7df      	b.n	80066c8 <dir_sdi+0xe>
 8006708:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800670a:	896f      	ldrh	r7, [r5, #10]
 800670c:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800670e:	42bc      	cmp	r4, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006710:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 8006712:	d204      	bcs.n	800671e <dir_sdi+0x64>
		dp->sect = clust2sect(fs, clst);
 8006714:	4628      	mov	r0, r5
 8006716:	f7ff fc85 	bl	8006024 <clust2sect>
 800671a:	61f0      	str	r0, [r6, #28]
 800671c:	e7e6      	b.n	80066ec <dir_sdi+0x32>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800671e:	6830      	ldr	r0, [r6, #0]
 8006720:	f7ff ff71 	bl	8006606 <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006724:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006726:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006728:	d006      	beq.n	8006738 <dir_sdi+0x7e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800672a:	2801      	cmp	r0, #1
 800672c:	d9cb      	bls.n	80066c6 <dir_sdi+0xc>
 800672e:	69ab      	ldr	r3, [r5, #24]
 8006730:	4283      	cmp	r3, r0
 8006732:	d9c8      	bls.n	80066c6 <dir_sdi+0xc>
			ofs -= csz;
 8006734:	1be4      	subs	r4, r4, r7
 8006736:	e7ea      	b.n	800670e <dir_sdi+0x54>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006738:	2001      	movs	r0, #1
 800673a:	e7c5      	b.n	80066c8 <dir_sdi+0xe>

0800673c <create_chain>:
{
 800673c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = obj->fs;
 8006740:	6805      	ldr	r5, [r0, #0]
{
 8006742:	4680      	mov	r8, r0
	if (clst == 0) {	/* Create a new chain */
 8006744:	460f      	mov	r7, r1
 8006746:	b971      	cbnz	r1, 8006766 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006748:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800674a:	b1ee      	cbz	r6, 8006788 <create_chain+0x4c>
 800674c:	69ab      	ldr	r3, [r5, #24]
 800674e:	42b3      	cmp	r3, r6
 8006750:	bf98      	it	ls
 8006752:	2601      	movls	r6, #1
		ncl = scl;	/* Start cluster */
 8006754:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006756:	69ab      	ldr	r3, [r5, #24]
			ncl++;							/* Next cluster */
 8006758:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800675a:	42a3      	cmp	r3, r4
 800675c:	d817      	bhi.n	800678e <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
 800675e:	2e01      	cmp	r6, #1
 8006760:	d814      	bhi.n	800678c <create_chain+0x50>
 8006762:	2400      	movs	r4, #0
 8006764:	e006      	b.n	8006774 <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006766:	4628      	mov	r0, r5
 8006768:	f7ff ff4d 	bl	8006606 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800676c:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800676e:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006770:	d803      	bhi.n	800677a <create_chain+0x3e>
 8006772:	2401      	movs	r4, #1
}
 8006774:	4620      	mov	r0, r4
 8006776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800677a:	1c43      	adds	r3, r0, #1
 800677c:	d030      	beq.n	80067e0 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800677e:	69ab      	ldr	r3, [r5, #24]
 8006780:	4283      	cmp	r3, r0
 8006782:	d8f7      	bhi.n	8006774 <create_chain+0x38>
 8006784:	463e      	mov	r6, r7
 8006786:	e7e5      	b.n	8006754 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006788:	2601      	movs	r6, #1
 800678a:	e7e3      	b.n	8006754 <create_chain+0x18>
				ncl = 2;
 800678c:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800678e:	f8d8 0000 	ldr.w	r0, [r8]
 8006792:	4621      	mov	r1, r4
 8006794:	f7ff ff37 	bl	8006606 <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
 8006798:	b130      	cbz	r0, 80067a8 <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800679a:	2801      	cmp	r0, #1
 800679c:	d0e9      	beq.n	8006772 <create_chain+0x36>
 800679e:	3001      	adds	r0, #1
 80067a0:	d01e      	beq.n	80067e0 <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
 80067a2:	42b4      	cmp	r4, r6
 80067a4:	d1d7      	bne.n	8006756 <create_chain+0x1a>
 80067a6:	e7dc      	b.n	8006762 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80067a8:	f04f 32ff 	mov.w	r2, #4294967295
 80067ac:	4621      	mov	r1, r4
 80067ae:	4628      	mov	r0, r5
 80067b0:	f7ff feac 	bl	800650c <put_fat>
		if (res == FR_OK && clst != 0) {
 80067b4:	b990      	cbnz	r0, 80067dc <create_chain+0xa0>
 80067b6:	b957      	cbnz	r7, 80067ce <create_chain+0x92>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80067b8:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 80067bc:	3a02      	subs	r2, #2
 80067be:	4293      	cmp	r3, r2
		fs->last_clst = ncl;
 80067c0:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80067c2:	d910      	bls.n	80067e6 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 80067c4:	792b      	ldrb	r3, [r5, #4]
 80067c6:	f043 0301 	orr.w	r3, r3, #1
 80067ca:	712b      	strb	r3, [r5, #4]
 80067cc:	e7d2      	b.n	8006774 <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80067ce:	4622      	mov	r2, r4
 80067d0:	4639      	mov	r1, r7
 80067d2:	4628      	mov	r0, r5
 80067d4:	f7ff fe9a 	bl	800650c <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80067d8:	2800      	cmp	r0, #0
 80067da:	d0ed      	beq.n	80067b8 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80067dc:	2801      	cmp	r0, #1
 80067de:	d1c8      	bne.n	8006772 <create_chain+0x36>
 80067e0:	f04f 34ff 	mov.w	r4, #4294967295
 80067e4:	e7c6      	b.n	8006774 <create_chain+0x38>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80067e6:	3b01      	subs	r3, #1
 80067e8:	616b      	str	r3, [r5, #20]
 80067ea:	e7eb      	b.n	80067c4 <create_chain+0x88>

080067ec <remove_chain>:
{
 80067ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067ee:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80067f0:	2c01      	cmp	r4, #1
	FATFS *fs = obj->fs;
 80067f2:	6805      	ldr	r5, [r0, #0]
{
 80067f4:	4606      	mov	r6, r0
 80067f6:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80067f8:	d92c      	bls.n	8006854 <remove_chain+0x68>
 80067fa:	69ab      	ldr	r3, [r5, #24]
 80067fc:	42a3      	cmp	r3, r4
 80067fe:	d929      	bls.n	8006854 <remove_chain+0x68>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006800:	b12a      	cbz	r2, 800680e <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006802:	f04f 32ff 	mov.w	r2, #4294967295
 8006806:	4628      	mov	r0, r5
 8006808:	f7ff fe80 	bl	800650c <put_fat>
		if (res != FR_OK) return res;
 800680c:	b940      	cbnz	r0, 8006820 <remove_chain+0x34>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800680e:	4621      	mov	r1, r4
 8006810:	6830      	ldr	r0, [r6, #0]
 8006812:	9401      	str	r4, [sp, #4]
 8006814:	f7ff fef7 	bl	8006606 <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006818:	9901      	ldr	r1, [sp, #4]
 800681a:	4604      	mov	r4, r0
 800681c:	b910      	cbnz	r0, 8006824 <remove_chain+0x38>
	return FR_OK;
 800681e:	2000      	movs	r0, #0
}
 8006820:	b002      	add	sp, #8
 8006822:	bd70      	pop	{r4, r5, r6, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006824:	2801      	cmp	r0, #1
 8006826:	d015      	beq.n	8006854 <remove_chain+0x68>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006828:	1c43      	adds	r3, r0, #1
 800682a:	d015      	beq.n	8006858 <remove_chain+0x6c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800682c:	2200      	movs	r2, #0
 800682e:	4628      	mov	r0, r5
 8006830:	f7ff fe6c 	bl	800650c <put_fat>
			if (res != FR_OK) return res;
 8006834:	2800      	cmp	r0, #0
 8006836:	d1f3      	bne.n	8006820 <remove_chain+0x34>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006838:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 800683c:	1e91      	subs	r1, r2, #2
 800683e:	428b      	cmp	r3, r1
 8006840:	d205      	bcs.n	800684e <remove_chain+0x62>
			fs->free_clst++;
 8006842:	3301      	adds	r3, #1
 8006844:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8006846:	792b      	ldrb	r3, [r5, #4]
 8006848:	f043 0301 	orr.w	r3, r3, #1
 800684c:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800684e:	42a2      	cmp	r2, r4
 8006850:	d8dd      	bhi.n	800680e <remove_chain+0x22>
 8006852:	e7e4      	b.n	800681e <remove_chain+0x32>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006854:	2002      	movs	r0, #2
 8006856:	e7e3      	b.n	8006820 <remove_chain+0x34>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006858:	2001      	movs	r0, #1
 800685a:	e7e1      	b.n	8006820 <remove_chain+0x34>

0800685c <sync_fs>:
{
 800685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685e:	4604      	mov	r4, r0
	res = sync_window(fs);
 8006860:	f7ff fc8b 	bl	800617a <sync_window>
 8006864:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8006866:	2800      	cmp	r0, #0
 8006868:	d142      	bne.n	80068f0 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800686a:	7823      	ldrb	r3, [r4, #0]
 800686c:	2b03      	cmp	r3, #3
 800686e:	d137      	bne.n	80068e0 <sync_fs+0x84>
 8006870:	7927      	ldrb	r7, [r4, #4]
 8006872:	2f01      	cmp	r7, #1
 8006874:	d134      	bne.n	80068e0 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 8006876:	f104 0634 	add.w	r6, r4, #52	; 0x34
 800687a:	4601      	mov	r1, r0
 800687c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006880:	4630      	mov	r0, r6
 8006882:	f7ff fb2f 	bl	8005ee4 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8006886:	2355      	movs	r3, #85	; 0x55
 8006888:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 800688c:	23aa      	movs	r3, #170	; 0xaa
 800688e:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 8006892:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8006894:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8006896:	2172      	movs	r1, #114	; 0x72
 8006898:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800689c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 80068a0:	2361      	movs	r3, #97	; 0x61
 80068a2:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 80068a6:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 80068aa:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val;
 80068ae:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 80068b2:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 80068b6:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80068ba:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80068be:	6961      	ldr	r1, [r4, #20]
 80068c0:	f7ff fb08 	bl	8005ed4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80068c4:	6921      	ldr	r1, [r4, #16]
 80068c6:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80068ca:	f7ff fb03 	bl	8005ed4 <st_dword>
			fs->winsect = fs->volbase + 1;
 80068ce:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80068d0:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 80068d2:	3201      	adds	r2, #1
 80068d4:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80068d6:	463b      	mov	r3, r7
 80068d8:	4631      	mov	r1, r6
 80068da:	f7ff fad5 	bl	8005e88 <disk_write>
			fs->fsi_flag = 0;
 80068de:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80068e0:	2200      	movs	r2, #0
 80068e2:	7860      	ldrb	r0, [r4, #1]
 80068e4:	4611      	mov	r1, r2
 80068e6:	f7ff fadd 	bl	8005ea4 <disk_ioctl>
	res = sync_window(fs);
 80068ea:	3800      	subs	r0, #0
 80068ec:	bf18      	it	ne
 80068ee:	2001      	movne	r0, #1
}
 80068f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080068f2 <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80068f2:	6943      	ldr	r3, [r0, #20]
{
 80068f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80068f8:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80068fc:	69c3      	ldr	r3, [r0, #28]
{
 80068fe:	4605      	mov	r5, r0
 8006900:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006902:	b193      	cbz	r3, 800692a <dir_next+0x38>
 8006904:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8006908:	d20f      	bcs.n	800692a <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800690a:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 800690e:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006910:	f1b9 0f00 	cmp.w	r9, #0
 8006914:	d14d      	bne.n	80069b2 <dir_next+0xc0>
		if (!dp->clust) {		/* Static table */
 8006916:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8006918:	3301      	adds	r3, #1
 800691a:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800691c:	b939      	cbnz	r1, 800692e <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800691e:	8923      	ldrh	r3, [r4, #8]
 8006920:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8006924:	d845      	bhi.n	80069b2 <dir_next+0xc0>
				dp->sect = 0; return FR_NO_FILE;
 8006926:	2300      	movs	r3, #0
 8006928:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800692a:	2004      	movs	r0, #4
 800692c:	e00b      	b.n	8006946 <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800692e:	8967      	ldrh	r7, [r4, #10]
 8006930:	3f01      	subs	r7, #1
 8006932:	ea17 2758 	ands.w	r7, r7, r8, lsr #9
 8006936:	d13c      	bne.n	80069b2 <dir_next+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006938:	4620      	mov	r0, r4
 800693a:	f7ff fe64 	bl	8006606 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800693e:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006940:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006942:	d802      	bhi.n	800694a <dir_next+0x58>
 8006944:	2002      	movs	r0, #2
}
 8006946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800694a:	1c42      	adds	r2, r0, #1
 800694c:	d101      	bne.n	8006952 <dir_next+0x60>
 800694e:	2001      	movs	r0, #1
 8006950:	e7f9      	b.n	8006946 <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006952:	69a3      	ldr	r3, [r4, #24]
 8006954:	4283      	cmp	r3, r0
 8006956:	d826      	bhi.n	80069a6 <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 8006958:	f1ba 0f00 	cmp.w	sl, #0
 800695c:	d0e3      	beq.n	8006926 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800695e:	69a9      	ldr	r1, [r5, #24]
 8006960:	4628      	mov	r0, r5
 8006962:	f7ff feeb 	bl	800673c <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006966:	4606      	mov	r6, r0
 8006968:	2800      	cmp	r0, #0
 800696a:	d035      	beq.n	80069d8 <dir_next+0xe6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800696c:	2801      	cmp	r0, #1
 800696e:	d0e9      	beq.n	8006944 <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	d0ec      	beq.n	800694e <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006974:	4620      	mov	r0, r4
 8006976:	f7ff fc00 	bl	800617a <sync_window>
 800697a:	4601      	mov	r1, r0
 800697c:	2800      	cmp	r0, #0
 800697e:	d1e6      	bne.n	800694e <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006984:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8006988:	f7ff faac 	bl	8005ee4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800698c:	4631      	mov	r1, r6
 800698e:	4620      	mov	r0, r4
 8006990:	f7ff fb48 	bl	8006024 <clust2sect>
						fs->wflag = 1;
 8006994:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006998:	6320      	str	r0, [r4, #48]	; 0x30
 800699a:	8963      	ldrh	r3, [r4, #10]
 800699c:	429f      	cmp	r7, r3
 800699e:	d30f      	bcc.n	80069c0 <dir_next+0xce>
					fs->winsect -= n;							/* Restore window offset */
 80069a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80069a2:	1bdf      	subs	r7, r3, r7
 80069a4:	6327      	str	r7, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 80069a6:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 80069a8:	4631      	mov	r1, r6
 80069aa:	4620      	mov	r0, r4
 80069ac:	f7ff fb3a 	bl	8006024 <clust2sect>
 80069b0:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80069b2:	3434      	adds	r4, #52	; 0x34
 80069b4:	444c      	add	r4, r9
	dp->dptr = ofs;						/* Current entry */
 80069b6:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80069ba:	622c      	str	r4, [r5, #32]
	return FR_OK;
 80069bc:	2000      	movs	r0, #0
 80069be:	e7c2      	b.n	8006946 <dir_next+0x54>
						fs->wflag = 1;
 80069c0:	f884 a003 	strb.w	sl, [r4, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80069c4:	4620      	mov	r0, r4
 80069c6:	f7ff fbb2 	bl	800612e <sync_window.part.0>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80069ca:	2800      	cmp	r0, #0
 80069cc:	d1bf      	bne.n	800694e <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80069ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80069d0:	3301      	adds	r3, #1
 80069d2:	3701      	adds	r7, #1
 80069d4:	6323      	str	r3, [r4, #48]	; 0x30
 80069d6:	e7e0      	b.n	800699a <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80069d8:	2007      	movs	r0, #7
 80069da:	e7b4      	b.n	8006946 <dir_next+0x54>

080069dc <dir_remove>:
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80069dc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80069de:	1c4b      	adds	r3, r1, #1
{
 80069e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 80069e4:	6805      	ldr	r5, [r0, #0]
	DWORD last = dp->dptr;
 80069e6:	6946      	ldr	r6, [r0, #20]
{
 80069e8:	4604      	mov	r4, r0
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80069ea:	d118      	bne.n	8006a1e <dir_remove+0x42>
				dp->dir[DIR_Name] = DDEM;
 80069ec:	27e5      	movs	r7, #229	; 0xe5
			fs->wflag = 1;
 80069ee:	f04f 0801 	mov.w	r8, #1
			res = move_window(fs, dp->sect);
 80069f2:	69e1      	ldr	r1, [r4, #28]
 80069f4:	4628      	mov	r0, r5
 80069f6:	f7ff fbc6 	bl	8006186 <move_window>
			if (res != FR_OK) break;
 80069fa:	b960      	cbnz	r0, 8006a16 <dir_remove+0x3a>
				dp->dir[DIR_Name] = DDEM;
 80069fc:	6a23      	ldr	r3, [r4, #32]
 80069fe:	701f      	strb	r7, [r3, #0]
			fs->wflag = 1;
 8006a00:	f885 8003 	strb.w	r8, [r5, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8006a04:	6963      	ldr	r3, [r4, #20]
 8006a06:	42b3      	cmp	r3, r6
 8006a08:	d20d      	bcs.n	8006a26 <dir_remove+0x4a>
			res = dir_next(dp, 0);	/* Next entry */
 8006a0a:	4601      	mov	r1, r0
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f7ff ff70 	bl	80068f2 <dir_next>
		} while (res == FR_OK);
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d0ed      	beq.n	80069f2 <dir_remove+0x16>
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8006a16:	2804      	cmp	r0, #4
 8006a18:	bf08      	it	eq
 8006a1a:	2002      	moveq	r0, #2
 8006a1c:	e003      	b.n	8006a26 <dir_remove+0x4a>
	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8006a1e:	f7ff fe4c 	bl	80066ba <dir_sdi>
	if (res == FR_OK) {
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d0e2      	beq.n	80069ec <dir_remove+0x10>
}
 8006a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006a2c <dir_find>:
{
 8006a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006a30:	2100      	movs	r1, #0
{
 8006a32:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 8006a34:	f8d0 a000 	ldr.w	sl, [r0]
{
 8006a38:	4604      	mov	r4, r0
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006a3a:	f7ff fe3e 	bl	80066ba <dir_sdi>
	if (res != FR_OK) return res;
 8006a3e:	4607      	mov	r7, r0
 8006a40:	2800      	cmp	r0, #0
 8006a42:	f040 809b 	bne.w	8006b7c <dir_find+0x150>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006a46:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4a:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8006a4e:	6323      	str	r3, [r4, #48]	; 0x30
 8006a50:	46c8      	mov	r8, r9
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006a52:	9300      	str	r3, [sp, #0]
		res = move_window(fs, dp->sect);
 8006a54:	69e1      	ldr	r1, [r4, #28]
 8006a56:	4650      	mov	r0, sl
 8006a58:	f7ff fb95 	bl	8006186 <move_window>
		if (res != FR_OK) break;
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	f040 808c 	bne.w	8006b7c <dir_find+0x150>
		c = dp->dir[DIR_Name];
 8006a64:	6a25      	ldr	r5, [r4, #32]
 8006a66:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006a68:	2e00      	cmp	r6, #0
 8006a6a:	f000 808b 	beq.w	8006b84 <dir_find+0x158>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006a6e:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006a70:	2ee5      	cmp	r6, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006a72:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8006a76:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006a78:	d003      	beq.n	8006a82 <dir_find+0x56>
 8006a7a:	0710      	lsls	r0, r2, #28
 8006a7c:	d504      	bpl.n	8006a88 <dir_find+0x5c>
 8006a7e:	2b0f      	cmp	r3, #15
 8006a80:	d004      	beq.n	8006a8c <dir_find+0x60>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006a82:	9b00      	ldr	r3, [sp, #0]
 8006a84:	6323      	str	r3, [r4, #48]	; 0x30
 8006a86:	e053      	b.n	8006b30 <dir_find+0x104>
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006a88:	2b0f      	cmp	r3, #15
 8006a8a:	d159      	bne.n	8006b40 <dir_find+0x114>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006a8c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8006a90:	0659      	lsls	r1, r3, #25
 8006a92:	d443      	bmi.n	8006b1c <dir_find+0xf0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006a94:	0672      	lsls	r2, r6, #25
 8006a96:	d549      	bpl.n	8006b2c <dir_find+0x100>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006a98:	6963      	ldr	r3, [r4, #20]
						sum = dp->dir[LDIR_Chksum];
 8006a9a:	f895 900d 	ldrb.w	r9, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006a9e:	6323      	str	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006aa0:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006aa4:	7b6b      	ldrb	r3, [r5, #13]
 8006aa6:	454b      	cmp	r3, r9
 8006aa8:	d142      	bne.n	8006b30 <dir_find+0x104>
	rv = rv << 8 | ptr[0];
 8006aaa:	7eea      	ldrb	r2, [r5, #27]
 8006aac:	7eab      	ldrb	r3, [r5, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006aae:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8006ab2:	d13d      	bne.n	8006b30 <dir_find+0x104>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006ab4:	782f      	ldrb	r7, [r5, #0]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006ab6:	f8da b00c 	ldr.w	fp, [sl, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006aba:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 8006abe:	1e7b      	subs	r3, r7, #1
 8006ac0:	270d      	movs	r7, #13
 8006ac2:	435f      	muls	r7, r3
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006ac4:	4b30      	ldr	r3, [pc, #192]	; (8006b88 <dir_find+0x15c>)
 8006ac6:	2201      	movs	r2, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006ac8:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006acc:	1868      	adds	r0, r5, r1
	rv = rv << 8 | ptr[0];
 8006ace:	f815 8001 	ldrb.w	r8, [r5, r1]
 8006ad2:	7840      	ldrb	r0, [r0, #1]
 8006ad4:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
		if (wc) {
 8006ad8:	b36a      	cbz	r2, 8006b36 <dir_find+0x10a>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006ada:	2ffe      	cmp	r7, #254	; 0xfe
 8006adc:	9303      	str	r3, [sp, #12]
 8006ade:	d827      	bhi.n	8006b30 <dir_find+0x104>
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	f001 f955 	bl	8007d90 <ff_wtoupper>
 8006ae6:	1c79      	adds	r1, r7, #1
 8006ae8:	9002      	str	r0, [sp, #8]
 8006aea:	f83b 0017 	ldrh.w	r0, [fp, r7, lsl #1]
 8006aee:	9101      	str	r1, [sp, #4]
 8006af0:	f001 f94e 	bl	8007d90 <ff_wtoupper>
 8006af4:	9a02      	ldr	r2, [sp, #8]
 8006af6:	4282      	cmp	r2, r0
 8006af8:	d11a      	bne.n	8006b30 <dir_find+0x104>
 8006afa:	9901      	ldr	r1, [sp, #4]
 8006afc:	9b03      	ldr	r3, [sp, #12]
	rv = rv << 8 | ptr[0];
 8006afe:	4642      	mov	r2, r8
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006b00:	460f      	mov	r7, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006b02:	4922      	ldr	r1, [pc, #136]	; (8006b8c <dir_find+0x160>)
 8006b04:	4299      	cmp	r1, r3
 8006b06:	d1df      	bne.n	8006ac8 <dir_find+0x9c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006b08:	782b      	ldrb	r3, [r5, #0]
 8006b0a:	065b      	lsls	r3, r3, #25
 8006b0c:	d503      	bpl.n	8006b16 <dir_find+0xea>
 8006b0e:	b112      	cbz	r2, 8006b16 <dir_find+0xea>
 8006b10:	f83b 3017 	ldrh.w	r3, [fp, r7, lsl #1]
 8006b14:	b963      	cbnz	r3, 8006b30 <dir_find+0x104>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006b16:	3e01      	subs	r6, #1
 8006b18:	fa5f f886 	uxtb.w	r8, r6
		res = dir_next(dp, 0);	/* Next entry */
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f7ff fee7 	bl	80068f2 <dir_next>
	} while (res == FR_OK);
 8006b24:	4607      	mov	r7, r0
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d094      	beq.n	8006a54 <dir_find+0x28>
 8006b2a:	e027      	b.n	8006b7c <dir_find+0x150>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006b2c:	45b0      	cmp	r8, r6
 8006b2e:	d0b9      	beq.n	8006aa4 <dir_find+0x78>
 8006b30:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8006b34:	e7f2      	b.n	8006b1c <dir_find+0xf0>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006b36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006b3a:	4588      	cmp	r8, r1
 8006b3c:	d0e1      	beq.n	8006b02 <dir_find+0xd6>
 8006b3e:	e7f7      	b.n	8006b30 <dir_find+0x104>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006b40:	f1b8 0f00 	cmp.w	r8, #0
 8006b44:	d104      	bne.n	8006b50 <dir_find+0x124>
 8006b46:	4628      	mov	r0, r5
 8006b48:	f7ff fa88 	bl	800605c <sum_sfn>
 8006b4c:	4548      	cmp	r0, r9
 8006b4e:	d015      	beq.n	8006b7c <dir_find+0x150>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006b50:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
 8006b54:	f017 0701 	ands.w	r7, r7, #1
 8006b58:	d193      	bne.n	8006a82 <dir_find+0x56>
 8006b5a:	f104 0224 	add.w	r2, r4, #36	; 0x24
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006b5e:	f105 010b 	add.w	r1, r5, #11
		r = *d++ - *s++;
 8006b62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b66:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
 8006b6a:	428d      	cmp	r5, r1
		r = *d++ - *s++;
 8006b6c:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 8006b70:	d002      	beq.n	8006b78 <dir_find+0x14c>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0f5      	beq.n	8006b62 <dir_find+0x136>
 8006b76:	e784      	b.n	8006a82 <dir_find+0x56>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d182      	bne.n	8006a82 <dir_find+0x56>
}
 8006b7c:	4638      	mov	r0, r7
 8006b7e:	b005      	add	sp, #20
 8006b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006b84:	2704      	movs	r7, #4
 8006b86:	e7f9      	b.n	8006b7c <dir_find+0x150>
 8006b88:	0800bd68 	.word	0x0800bd68
 8006b8c:	0800bd75 	.word	0x0800bd75

08006b90 <dir_register>:
{
 8006b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006b94:	f890 502f 	ldrb.w	r5, [r0, #47]	; 0x2f
 8006b98:	f015 05a0 	ands.w	r5, r5, #160	; 0xa0
{
 8006b9c:	b089      	sub	sp, #36	; 0x24
 8006b9e:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006ba0:	f040 808f 	bne.w	8006cc2 <dir_register+0x132>
	FATFS *fs = dp->obj.fs;
 8006ba4:	6806      	ldr	r6, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006ba6:	68f2      	ldr	r2, [r6, #12]
 8006ba8:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d166      	bne.n	8006c7e <dir_register+0xee>
	mem_cpy(sn, dp->fn, 12);
 8006bb0:	f104 0724 	add.w	r7, r4, #36	; 0x24
	if (cnt) {
 8006bb4:	220c      	movs	r2, #12
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	a805      	add	r0, sp, #20
 8006bba:	f7ff fa95 	bl	80060e8 <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006bbe:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8006bc2:	07db      	lsls	r3, r3, #31
 8006bc4:	f140 8086 	bpl.w	8006cd4 <dir_register+0x144>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006bc8:	2340      	movs	r3, #64	; 0x40
				if (sr & 0x10000) sr ^= 0x11021;
 8006bca:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8006e08 <dir_register+0x278>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006bce:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006bd2:	f04f 0a01 	mov.w	sl, #1
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006bd6:	220b      	movs	r2, #11
 8006bd8:	a905      	add	r1, sp, #20
 8006bda:	4638      	mov	r0, r7
 8006bdc:	f8d6 900c 	ldr.w	r9, [r6, #12]
	if (cnt) {
 8006be0:	f7ff fa82 	bl	80060e8 <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006be4:	f1ba 0f05 	cmp.w	sl, #5
 8006be8:	d95a      	bls.n	8006ca0 <dir_register+0x110>
 8006bea:	f1a9 0102 	sub.w	r1, r9, #2
 8006bee:	4653      	mov	r3, sl
		while (*lfn) {	/* Create a CRC */
 8006bf0:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8006bf4:	2a00      	cmp	r2, #0
 8006bf6:	d144      	bne.n	8006c82 <dir_register+0xf2>
 8006bf8:	f10d 0013 	add.w	r0, sp, #19
 8006bfc:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 8006bfe:	f003 0c0f 	and.w	ip, r3, #15
 8006c02:	f10c 0130 	add.w	r1, ip, #48	; 0x30
		if (c > '9') c += 7;
 8006c06:	2939      	cmp	r1, #57	; 0x39
 8006c08:	bf88      	it	hi
 8006c0a:	f10c 0137 	addhi.w	r1, ip, #55	; 0x37
	} while (seq);
 8006c0e:	2b0f      	cmp	r3, #15
		ns[i--] = c;
 8006c10:	f800 1901 	strb.w	r1, [r0], #-1
 8006c14:	f102 32ff 	add.w	r2, r2, #4294967295
		seq /= 16;
 8006c18:	ea4f 1113 	mov.w	r1, r3, lsr #4
	} while (seq);
 8006c1c:	d842      	bhi.n	8006ca4 <dir_register+0x114>
	ns[i] = '~';
 8006c1e:	ab08      	add	r3, sp, #32
 8006c20:	4413      	add	r3, r2
 8006c22:	217e      	movs	r1, #126	; 0x7e
 8006c24:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006c28:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8006c2c:	4608      	mov	r0, r1
 8006c2e:	2300      	movs	r3, #0
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d006      	beq.n	8006c42 <dir_register+0xb2>
 8006c34:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 8006c38:	f1bc 0f20 	cmp.w	ip, #32
 8006c3c:	f103 0e01 	add.w	lr, r3, #1
 8006c40:	d132      	bne.n	8006ca8 <dir_register+0x118>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006c42:	2a07      	cmp	r2, #7
 8006c44:	bf9c      	itt	ls
 8006c46:	a808      	addls	r0, sp, #32
 8006c48:	1880      	addls	r0, r0, r2
 8006c4a:	f103 0301 	add.w	r3, r3, #1
 8006c4e:	bf96      	itet	ls
 8006c50:	f810 0c14 	ldrbls.w	r0, [r0, #-20]
 8006c54:	2020      	movhi	r0, #32
 8006c56:	3201      	addls	r2, #1
	} while (j < 8);
 8006c58:	2b07      	cmp	r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006c5a:	54c8      	strb	r0, [r1, r3]
	} while (j < 8);
 8006c5c:	d9f1      	bls.n	8006c42 <dir_register+0xb2>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f7ff fee4 	bl	8006a2c <dir_find>
 8006c64:	4681      	mov	r9, r0
			if (res != FR_OK) break;
 8006c66:	bb78      	cbnz	r0, 8006cc8 <dir_register+0x138>
		for (n = 1; n < 100; n++) {
 8006c68:	f10a 0a01 	add.w	sl, sl, #1
 8006c6c:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8006c70:	d1b1      	bne.n	8006bd6 <dir_register+0x46>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006c72:	f04f 0907 	mov.w	r9, #7
}
 8006c76:	4648      	mov	r0, r9
 8006c78:	b009      	add	sp, #36	; 0x24
 8006c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006c7e:	3501      	adds	r5, #1
 8006c80:	e792      	b.n	8006ba8 <dir_register+0x18>
 8006c82:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
 8006c84:	f002 0c01 	and.w	ip, r2, #1
 8006c88:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8006c8c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006c90:	bf18      	it	ne
 8006c92:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 8006c96:	3801      	subs	r0, #1
				wc >>= 1;
 8006c98:	ea4f 0252 	mov.w	r2, r2, lsr #1
			for (i = 0; i < 16; i++) {
 8006c9c:	d1f2      	bne.n	8006c84 <dir_register+0xf4>
 8006c9e:	e7a7      	b.n	8006bf0 <dir_register+0x60>
 8006ca0:	4653      	mov	r3, sl
 8006ca2:	e7a9      	b.n	8006bf8 <dir_register+0x68>
		seq /= 16;
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	e7aa      	b.n	8006bfe <dir_register+0x6e>
 8006ca8:	4673      	mov	r3, lr
 8006caa:	e7c1      	b.n	8006c30 <dir_register+0xa0>
				n = 0;					/* Not a blank entry. Restart to search */
 8006cac:	4680      	mov	r8, r0
			res = dir_next(dp, 1);
 8006cae:	2101      	movs	r1, #1
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f7ff fe1e 	bl	80068f2 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006cb6:	4681      	mov	r9, r0
 8006cb8:	b310      	cbz	r0, 8006d00 <dir_register+0x170>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006cba:	f1b9 0f04 	cmp.w	r9, #4
 8006cbe:	d0d8      	beq.n	8006c72 <dir_register+0xe2>
 8006cc0:	e7d9      	b.n	8006c76 <dir_register+0xe6>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006cc2:	f04f 0906 	mov.w	r9, #6
 8006cc6:	e7d6      	b.n	8006c76 <dir_register+0xe6>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006cc8:	2804      	cmp	r0, #4
 8006cca:	d1d4      	bne.n	8006c76 <dir_register+0xe6>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006ccc:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8006cd0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006cd4:	f89d 301f 	ldrb.w	r3, [sp, #31]
	FATFS *fs = dp->obj.fs;
 8006cd8:	f8d4 a000 	ldr.w	sl, [r4]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006cdc:	079b      	lsls	r3, r3, #30
 8006cde:	bf48      	it	mi
 8006ce0:	350c      	addmi	r5, #12
	res = dir_sdi(dp, 0);
 8006ce2:	f04f 0100 	mov.w	r1, #0
 8006ce6:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006ce8:	bf49      	itett	mi
 8006cea:	230d      	movmi	r3, #13
 8006cec:	2501      	movpl	r5, #1
 8006cee:	fbb5 f5f3 	udivmi	r5, r5, r3
 8006cf2:	3501      	addmi	r5, #1
	res = dir_sdi(dp, 0);
 8006cf4:	f7ff fce1 	bl	80066ba <dir_sdi>
	if (res == FR_OK) {
 8006cf8:	4681      	mov	r9, r0
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d1dd      	bne.n	8006cba <dir_register+0x12a>
		n = 0;
 8006cfe:	4680      	mov	r8, r0
			res = move_window(fs, dp->sect);
 8006d00:	69e1      	ldr	r1, [r4, #28]
 8006d02:	4650      	mov	r0, sl
 8006d04:	f7ff fa3f 	bl	8006186 <move_window>
			if (res != FR_OK) break;
 8006d08:	4681      	mov	r9, r0
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	d1d5      	bne.n	8006cba <dir_register+0x12a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006d0e:	6a23      	ldr	r3, [r4, #32]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	2be5      	cmp	r3, #229	; 0xe5
 8006d14:	d001      	beq.n	8006d1a <dir_register+0x18a>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1c8      	bne.n	8006cac <dir_register+0x11c>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006d1a:	f108 0801 	add.w	r8, r8, #1
 8006d1e:	4545      	cmp	r5, r8
 8006d20:	d1c5      	bne.n	8006cae <dir_register+0x11e>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006d22:	3d01      	subs	r5, #1
 8006d24:	d055      	beq.n	8006dd2 <dir_register+0x242>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006d26:	6961      	ldr	r1, [r4, #20]
 8006d28:	4620      	mov	r0, r4
 8006d2a:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 8006d2e:	f7ff fcc4 	bl	80066ba <dir_sdi>
		if (res == FR_OK) {
 8006d32:	4681      	mov	r9, r0
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d19e      	bne.n	8006c76 <dir_register+0xe6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006d38:	4638      	mov	r0, r7
 8006d3a:	f7ff f98f 	bl	800605c <sum_sfn>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006d3e:	f64f 78ff 	movw	r8, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006d42:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
 8006d44:	69e1      	ldr	r1, [r4, #28]
 8006d46:	4630      	mov	r0, r6
 8006d48:	f7ff fa1d 	bl	8006186 <move_window>
 8006d4c:	4681      	mov	r9, r0
				if (res != FR_OK) break;
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	d191      	bne.n	8006c76 <dir_register+0xe6>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006d52:	6a23      	ldr	r3, [r4, #32]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006d54:	9a01      	ldr	r2, [sp, #4]
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006d56:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006d5a:	735a      	strb	r2, [r3, #13]
 8006d5c:	b2e9      	uxtb	r1, r5
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006d5e:	f04f 020f 	mov.w	r2, #15
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006d62:	f04f 0c0d 	mov.w	ip, #13
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006d66:	72da      	strb	r2, [r3, #11]
	dir[LDIR_Type] = 0;
 8006d68:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8006e0c <dir_register+0x27c>
 8006d6c:	7318      	strb	r0, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006d6e:	1e4a      	subs	r2, r1, #1
 8006d70:	fb0c f202 	mul.w	r2, ip, r2
	*ptr++ = (BYTE)val; val >>= 8;
 8006d74:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 8006d76:	76d8      	strb	r0, [r3, #27]
	s = wc = 0;
 8006d78:	4684      	mov	ip, r0
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006d7a:	f81a 9b01 	ldrb.w	r9, [sl], #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006d7e:	4540      	cmp	r0, r8
 8006d80:	bf18      	it	ne
 8006d82:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d86:	f803 0009 	strb.w	r0, [r3, r9]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006d8a:	eb03 0b09 	add.w	fp, r3, r9
	} while (++s < 13);
 8006d8e:	f10c 0c01 	add.w	ip, ip, #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006d92:	bf18      	it	ne
 8006d94:	3201      	addne	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8006d96:	ea4f 2910 	mov.w	r9, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	bf08      	it	eq
 8006d9e:	4640      	moveq	r0, r8
	} while (++s < 13);
 8006da0:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 8006da4:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++s < 13);
 8006da8:	d1e7      	bne.n	8006d7a <dir_register+0x1ea>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006daa:	4540      	cmp	r0, r8
 8006dac:	d002      	beq.n	8006db4 <dir_register+0x224>
 8006dae:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8006db2:	b90a      	cbnz	r2, 8006db8 <dir_register+0x228>
 8006db4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006db8:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f7ff fd96 	bl	80068f2 <dir_next>
			} while (res == FR_OK && --nent);
 8006dc6:	4681      	mov	r9, r0
 8006dc8:	2800      	cmp	r0, #0
 8006dca:	f47f af54 	bne.w	8006c76 <dir_register+0xe6>
 8006dce:	3d01      	subs	r5, #1
 8006dd0:	d1b8      	bne.n	8006d44 <dir_register+0x1b4>
		res = move_window(fs, dp->sect);
 8006dd2:	69e1      	ldr	r1, [r4, #28]
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	f7ff f9d6 	bl	8006186 <move_window>
		if (res == FR_OK) {
 8006dda:	4681      	mov	r9, r0
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	f47f af4a 	bne.w	8006c76 <dir_register+0xe6>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006de2:	4601      	mov	r1, r0
 8006de4:	2220      	movs	r2, #32
 8006de6:	6a20      	ldr	r0, [r4, #32]
 8006de8:	f7ff f87c 	bl	8005ee4 <mem_set>
	if (cnt) {
 8006dec:	220b      	movs	r2, #11
 8006dee:	6a20      	ldr	r0, [r4, #32]
 8006df0:	4639      	mov	r1, r7
 8006df2:	f7ff f979 	bl	80060e8 <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006df6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8006dfa:	6a22      	ldr	r2, [r4, #32]
 8006dfc:	f003 0318 	and.w	r3, r3, #24
 8006e00:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8006e02:	2301      	movs	r3, #1
 8006e04:	70f3      	strb	r3, [r6, #3]
 8006e06:	e736      	b.n	8006c76 <dir_register+0xe6>
 8006e08:	00011021 	.word	0x00011021
 8006e0c:	0800bd68 	.word	0x0800bd68

08006e10 <dir_read.constprop.0>:
FRESULT dir_read (
 8006e10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BYTE ord = 0xFF, sum = 0xFF;
 8006e14:	27ff      	movs	r7, #255	; 0xff
	FATFS *fs = dp->obj.fs;
 8006e16:	f8d0 8000 	ldr.w	r8, [r0]
FRESULT dir_read (
 8006e1a:	4606      	mov	r6, r0
	BYTE ord = 0xFF, sum = 0xFF;
 8006e1c:	463c      	mov	r4, r7
	FRESULT res = FR_NO_FILE;
 8006e1e:	2504      	movs	r5, #4
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006e20:	f64f 79ff 	movw	r9, #65535	; 0xffff
	while (dp->sect) {
 8006e24:	69f1      	ldr	r1, [r6, #28]
 8006e26:	b911      	cbnz	r1, 8006e2e <dir_read.constprop.0+0x1e>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006e28:	2d00      	cmp	r5, #0
 8006e2a:	d06a      	beq.n	8006f02 <dir_read.constprop.0+0xf2>
 8006e2c:	e05a      	b.n	8006ee4 <dir_read.constprop.0+0xd4>
		res = move_window(fs, dp->sect);
 8006e2e:	4640      	mov	r0, r8
 8006e30:	f7ff f9a9 	bl	8006186 <move_window>
		if (res != FR_OK) break;
 8006e34:	4605      	mov	r5, r0
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d154      	bne.n	8006ee4 <dir_read.constprop.0+0xd4>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006e3a:	6a30      	ldr	r0, [r6, #32]
 8006e3c:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) {
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d067      	beq.n	8006f12 <dir_read.constprop.0+0x102>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006e42:	7ac2      	ldrb	r2, [r0, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8006e44:	2be5      	cmp	r3, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006e46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006e4a:	71b2      	strb	r2, [r6, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8006e4c:	d04f      	beq.n	8006eee <dir_read.constprop.0+0xde>
 8006e4e:	2b2e      	cmp	r3, #46	; 0x2e
 8006e50:	d04d      	beq.n	8006eee <dir_read.constprop.0+0xde>
 8006e52:	f022 0120 	bic.w	r1, r2, #32
 8006e56:	2908      	cmp	r1, #8
 8006e58:	d049      	beq.n	8006eee <dir_read.constprop.0+0xde>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8006e5a:	2a0f      	cmp	r2, #15
 8006e5c:	d14c      	bne.n	8006ef8 <dir_read.constprop.0+0xe8>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8006e5e:	0659      	lsls	r1, r3, #25
 8006e60:	d543      	bpl.n	8006eea <dir_read.constprop.0+0xda>
						c &= (BYTE)~LLEF; ord = c;
 8006e62:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 8006e66:	6973      	ldr	r3, [r6, #20]
						sum = dp->dir[LDIR_Chksum];
 8006e68:	7b47      	ldrb	r7, [r0, #13]
						dp->blk_ofs = dp->dptr;
 8006e6a:	6333      	str	r3, [r6, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006e6c:	7b43      	ldrb	r3, [r0, #13]
 8006e6e:	42bb      	cmp	r3, r7
 8006e70:	d13d      	bne.n	8006eee <dir_read.constprop.0+0xde>
	rv = rv << 8 | ptr[0];
 8006e72:	7ec2      	ldrb	r2, [r0, #27]
 8006e74:	7e83      	ldrb	r3, [r0, #26]
 8006e76:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8006e7a:	b219      	sxth	r1, r3
 8006e7c:	bbbb      	cbnz	r3, 8006eee <dir_read.constprop.0+0xde>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8006e7e:	7803      	ldrb	r3, [r0, #0]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006e80:	f8d8 500c 	ldr.w	r5, [r8, #12]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8006e84:	f8df c090 	ldr.w	ip, [pc, #144]	; 8006f18 <dir_read.constprop.0+0x108>
 8006e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	220d      	movs	r2, #13
 8006e90:	4353      	muls	r3, r2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006e92:	f04f 0e01 	mov.w	lr, #1
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006e96:	f81c ab01 	ldrb.w	sl, [ip], #1
 8006e9a:	eb00 020a 	add.w	r2, r0, sl
	rv = rv << 8 | ptr[0];
 8006e9e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8006ea2:	f810 200a 	ldrb.w	r2, [r0, sl]
 8006ea6:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
		if (wc) {
 8006eaa:	f1be 0f00 	cmp.w	lr, #0
 8006eae:	d020      	beq.n	8006ef2 <dir_read.constprop.0+0xe2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006eb0:	2bfe      	cmp	r3, #254	; 0xfe
 8006eb2:	d81c      	bhi.n	8006eee <dir_read.constprop.0+0xde>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006eb4:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
	rv = rv << 8 | ptr[0];
 8006eb8:	4696      	mov	lr, r2
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006eba:	3301      	adds	r3, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006ebc:	3101      	adds	r1, #1
 8006ebe:	290d      	cmp	r1, #13
 8006ec0:	d1e9      	bne.n	8006e96 <dir_read.constprop.0+0x86>
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8006ec2:	7802      	ldrb	r2, [r0, #0]
 8006ec4:	0652      	lsls	r2, r2, #25
 8006ec6:	d504      	bpl.n	8006ed2 <dir_read.constprop.0+0xc2>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8006ec8:	2bfe      	cmp	r3, #254	; 0xfe
 8006eca:	d810      	bhi.n	8006eee <dir_read.constprop.0+0xde>
		lfnbuf[i] = 0;
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006ed2:	3c01      	subs	r4, #1
 8006ed4:	b2e4      	uxtb	r4, r4
		res = dir_next(dp, 0);		/* Next entry */
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f7ff fd0a 	bl	80068f2 <dir_next>
		if (res != FR_OK) break;
 8006ede:	4605      	mov	r5, r0
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d09f      	beq.n	8006e24 <dir_read.constprop.0+0x14>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	61f3      	str	r3, [r6, #28]
 8006ee8:	e00c      	b.n	8006f04 <dir_read.constprop.0+0xf4>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006eea:	42a3      	cmp	r3, r4
 8006eec:	d0be      	beq.n	8006e6c <dir_read.constprop.0+0x5c>
 8006eee:	24ff      	movs	r4, #255	; 0xff
 8006ef0:	e7f1      	b.n	8006ed6 <dir_read.constprop.0+0xc6>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006ef2:	454a      	cmp	r2, r9
 8006ef4:	d0e2      	beq.n	8006ebc <dir_read.constprop.0+0xac>
 8006ef6:	e7fa      	b.n	8006eee <dir_read.constprop.0+0xde>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8006ef8:	b93c      	cbnz	r4, 8006f0a <dir_read.constprop.0+0xfa>
 8006efa:	f7ff f8af 	bl	800605c <sum_sfn>
 8006efe:	42b8      	cmp	r0, r7
 8006f00:	d103      	bne.n	8006f0a <dir_read.constprop.0+0xfa>
		res = move_window(fs, dp->sect);
 8006f02:	2500      	movs	r5, #0
}
 8006f04:	4628      	mov	r0, r5
 8006f06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0e:	6333      	str	r3, [r6, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006f10:	e7f8      	b.n	8006f04 <dir_read.constprop.0+0xf4>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006f12:	2504      	movs	r5, #4
 8006f14:	e7e6      	b.n	8006ee4 <dir_read.constprop.0+0xd4>
 8006f16:	bf00      	nop
 8006f18:	0800bd68 	.word	0x0800bd68

08006f1c <follow_path>:
{
 8006f1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = obj->fs;
 8006f20:	f8d0 b000 	ldr.w	fp, [r0]
{
 8006f24:	4606      	mov	r6, r0
 8006f26:	4689      	mov	r9, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f2c:	2b2f      	cmp	r3, #47	; 0x2f
 8006f2e:	d0fa      	beq.n	8006f26 <follow_path+0xa>
 8006f30:	2b5c      	cmp	r3, #92	; 0x5c
 8006f32:	d0f8      	beq.n	8006f26 <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 8006f34:	2100      	movs	r1, #0
 8006f36:	60b1      	str	r1, [r6, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006f38:	f899 3000 	ldrb.w	r3, [r9]
 8006f3c:	2b1f      	cmp	r3, #31
 8006f3e:	f200 80bc 	bhi.w	80070ba <follow_path+0x19e>
		dp->fn[NSFLAG] = NS_NONAME;
 8006f42:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8006f44:	4630      	mov	r0, r6
		dp->fn[NSFLAG] = NS_NONAME;
 8006f46:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
}
 8006f4a:	b003      	add	sp, #12
 8006f4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8006f50:	f7ff bbb3 	b.w	80066ba <dir_sdi>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006f54:	3401      	adds	r4, #1
 8006f56:	e0c4      	b.n	80070e2 <follow_path+0x1c6>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006f58:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	d00c      	beq.n	8006f7a <follow_path+0x5e>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006f60:	2101      	movs	r1, #1
 8006f62:	f000 fef7 	bl	8007d54 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006f66:	b140      	cbz	r0, 8006f7a <follow_path+0x5e>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006f68:	287f      	cmp	r0, #127	; 0x7f
 8006f6a:	9b00      	ldr	r3, [sp, #0]
 8006f6c:	d807      	bhi.n	8006f7e <follow_path+0x62>
 8006f6e:	4980      	ldr	r1, [pc, #512]	; (8007170 <follow_path+0x254>)
	while (*str && *str != chr) str++;
 8006f70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f74:	b11a      	cbz	r2, 8006f7e <follow_path+0x62>
 8006f76:	4290      	cmp	r0, r2
 8006f78:	d1fa      	bne.n	8006f70 <follow_path+0x54>
				cf |= NS_LOSS | NS_LFN; break;
 8006f7a:	2006      	movs	r0, #6
 8006f7c:	e04e      	b.n	800701c <follow_path+0x100>
		lfn[di++] = w;					/* Store the Unicode character */
 8006f7e:	f828 0f02 	strh.w	r0, [r8, #2]!
		w = p[si++];					/* Get a character */
 8006f82:	4627      	mov	r7, r4
 8006f84:	e0a2      	b.n	80070cc <follow_path+0x1b0>
		w = lfn[di - 1];
 8006f86:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
		if (w != ' ' && w != '.') break;
 8006f8a:	2b20      	cmp	r3, #32
 8006f8c:	d002      	beq.n	8006f94 <follow_path+0x78>
 8006f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8006f90:	f040 80b7 	bne.w	8007102 <follow_path+0x1e6>
		di--;
 8006f94:	3f01      	subs	r7, #1
 8006f96:	e0b1      	b.n	80070fc <follow_path+0x1e0>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006f98:	3101      	adds	r1, #1
 8006f9a:	e0bf      	b.n	800711c <follow_path+0x200>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006f9c:	4543      	cmp	r3, r8
 8006f9e:	d205      	bcs.n	8006fac <follow_path+0x90>
 8006fa0:	42ba      	cmp	r2, r7
 8006fa2:	d14a      	bne.n	800703a <follow_path+0x11e>
			if (ni == 11) {				/* Long extension */
 8006fa4:	f1b8 0f0b 	cmp.w	r8, #11
 8006fa8:	d140      	bne.n	800702c <follow_path+0x110>
 8006faa:	e002      	b.n	8006fb2 <follow_path+0x96>
 8006fac:	f1b8 0f0b 	cmp.w	r8, #11
 8006fb0:	d137      	bne.n	8007022 <follow_path+0x106>
				cf |= NS_LOSS | NS_LFN; break;
 8006fb2:	f044 0403 	orr.w	r4, r4, #3
 8006fb6:	f04f 080b 	mov.w	r8, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006fba:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8006fbe:	2be5      	cmp	r3, #229	; 0xe5
 8006fc0:	bf04      	itt	eq
 8006fc2:	2305      	moveq	r3, #5
 8006fc4:	f886 3024 	strbeq.w	r3, [r6, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8006fc8:	f1b8 0f08 	cmp.w	r8, #8
 8006fcc:	bf04      	itt	eq
 8006fce:	00ad      	lsleq	r5, r5, #2
 8006fd0:	b2ed      	uxtbeq	r5, r5
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006fd2:	f005 030c 	and.w	r3, r5, #12
 8006fd6:	2b0c      	cmp	r3, #12
 8006fd8:	d003      	beq.n	8006fe2 <follow_path+0xc6>
 8006fda:	f005 0203 	and.w	r2, r5, #3
 8006fde:	2a03      	cmp	r2, #3
 8006fe0:	d101      	bne.n	8006fe6 <follow_path+0xca>
 8006fe2:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006fe6:	07a1      	lsls	r1, r4, #30
 8006fe8:	d409      	bmi.n	8006ffe <follow_path+0xe2>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006fea:	f005 0503 	and.w	r5, r5, #3
 8006fee:	2d01      	cmp	r5, #1
 8006ff0:	bf08      	it	eq
 8006ff2:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006ff6:	2b04      	cmp	r3, #4
 8006ff8:	bf08      	it	eq
 8006ffa:	f044 0408 	orreq.w	r4, r4, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006ffe:	f886 402f 	strb.w	r4, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8007002:	4630      	mov	r0, r6
 8007004:	f7ff fd12 	bl	8006a2c <dir_find>
			ns = dp->fn[NSFLAG];
 8007008:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800700c:	2800      	cmp	r0, #0
 800700e:	d044      	beq.n	800709a <follow_path+0x17e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007010:	2804      	cmp	r0, #4
 8007012:	d103      	bne.n	800701c <follow_path+0x100>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007014:	f013 0f04 	tst.w	r3, #4
 8007018:	bf08      	it	eq
 800701a:	2005      	moveq	r0, #5
}
 800701c:	b003      	add	sp, #12
 800701e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007022:	42ba      	cmp	r2, r7
 8007024:	d002      	beq.n	800702c <follow_path+0x110>
 8007026:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 800702a:	d8c6      	bhi.n	8006fba <follow_path+0x9e>
			b <<= 2; continue;
 800702c:	00ad      	lsls	r5, r5, #2
 800702e:	b2ed      	uxtb	r5, r5
 8007030:	463a      	mov	r2, r7
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007032:	f04f 080b 	mov.w	r8, #11
 8007036:	2308      	movs	r3, #8
			b <<= 2; continue;
 8007038:	e095      	b.n	8007166 <follow_path+0x24a>
		if (w >= 0x80) {				/* Non ASCII character */
 800703a:	287f      	cmp	r0, #127	; 0x7f
 800703c:	d90e      	bls.n	800705c <follow_path+0x140>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800703e:	2100      	movs	r1, #0
 8007040:	e9cd 2300 	strd	r2, r3, [sp]
 8007044:	f000 fe86 	bl	8007d54 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007048:	f044 0402 	orr.w	r4, r4, #2
 800704c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007050:	b158      	cbz	r0, 800706a <follow_path+0x14e>
 8007052:	4948      	ldr	r1, [pc, #288]	; (8007174 <follow_path+0x258>)
 8007054:	4408      	add	r0, r1
 8007056:	f810 0c73 	ldrb.w	r0, [r0, #-115]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800705a:	b130      	cbz	r0, 800706a <follow_path+0x14e>
	while (*str && *str != chr) str++;
 800705c:	f8df c118 	ldr.w	ip, [pc, #280]	; 8007178 <follow_path+0x25c>
 8007060:	f81c 1b01 	ldrb.w	r1, [ip], #1
 8007064:	b149      	cbz	r1, 800707a <follow_path+0x15e>
 8007066:	4281      	cmp	r1, r0
 8007068:	d1fa      	bne.n	8007060 <follow_path+0x144>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800706a:	f044 0403 	orr.w	r4, r4, #3
 800706e:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8007070:	18f1      	adds	r1, r6, r3
 8007072:	3301      	adds	r3, #1
 8007074:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 8007078:	e075      	b.n	8007166 <follow_path+0x24a>
				if (IsUpper(w)) {		/* ASCII large capital */
 800707a:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800707e:	2919      	cmp	r1, #25
 8007080:	d802      	bhi.n	8007088 <follow_path+0x16c>
					b |= 2;
 8007082:	f045 0502 	orr.w	r5, r5, #2
 8007086:	e7f3      	b.n	8007070 <follow_path+0x154>
					if (IsLower(w)) {	/* ASCII small capital */
 8007088:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 800708c:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 800708e:	bf9e      	ittt	ls
 8007090:	3820      	subls	r0, #32
 8007092:	f045 0501 	orrls.w	r5, r5, #1
 8007096:	b280      	uxthls	r0, r0
 8007098:	e7ea      	b.n	8007070 <follow_path+0x154>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800709a:	075a      	lsls	r2, r3, #29
 800709c:	d4be      	bmi.n	800701c <follow_path+0x100>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800709e:	79b3      	ldrb	r3, [r6, #6]
 80070a0:	06db      	lsls	r3, r3, #27
 80070a2:	d562      	bpl.n	800716a <follow_path+0x24e>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80070a4:	6973      	ldr	r3, [r6, #20]
 80070a6:	f89b 0000 	ldrb.w	r0, [fp]
 80070aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ae:	f10b 0134 	add.w	r1, fp, #52	; 0x34
 80070b2:	4419      	add	r1, r3
 80070b4:	f7ff f821 	bl	80060fa <ld_clust.isra.0>
 80070b8:	60b0      	str	r0, [r6, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80070ba:	6833      	ldr	r3, [r6, #0]
 80070bc:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 80070c0:	f1aa 0502 	sub.w	r5, sl, #2
 80070c4:	f109 33ff 	add.w	r3, r9, #4294967295
 80070c8:	46a8      	mov	r8, r5
 80070ca:	2700      	movs	r7, #0
		w = p[si++];					/* Get a character */
 80070cc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 80070d0:	281f      	cmp	r0, #31
		w = p[si++];					/* Get a character */
 80070d2:	f107 0401 	add.w	r4, r7, #1
		if (w < ' ') break;				/* Break if end of the path name */
 80070d6:	d90c      	bls.n	80070f2 <follow_path+0x1d6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80070d8:	282f      	cmp	r0, #47	; 0x2f
 80070da:	d002      	beq.n	80070e2 <follow_path+0x1c6>
 80070dc:	285c      	cmp	r0, #92	; 0x5c
 80070de:	f47f af3b 	bne.w	8006f58 <follow_path+0x3c>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80070e2:	f819 3004 	ldrb.w	r3, [r9, r4]
 80070e6:	2b2f      	cmp	r3, #47	; 0x2f
 80070e8:	f43f af34 	beq.w	8006f54 <follow_path+0x38>
 80070ec:	2b5c      	cmp	r3, #92	; 0x5c
 80070ee:	f43f af31 	beq.w	8006f54 <follow_path+0x38>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80070f2:	2820      	cmp	r0, #32
	*path = &p[si];						/* Return pointer to the next segment */
 80070f4:	44a1      	add	r9, r4
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80070f6:	bf34      	ite	cc
 80070f8:	2404      	movcc	r4, #4
 80070fa:	2400      	movcs	r4, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80070fc:	2f00      	cmp	r7, #0
 80070fe:	f47f af42 	bne.w	8006f86 <follow_path+0x6a>
	lfn[di] = 0;						/* LFN is created */
 8007102:	2300      	movs	r3, #0
 8007104:	f82a 3017 	strh.w	r3, [sl, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007108:	2f00      	cmp	r7, #0
 800710a:	f43f af36 	beq.w	8006f7a <follow_path+0x5e>
	mem_set(dp->fn, ' ', 11);
 800710e:	2120      	movs	r1, #32
 8007110:	220b      	movs	r2, #11
 8007112:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8007116:	f7fe fee5 	bl	8005ee4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800711a:	4619      	mov	r1, r3
 800711c:	f83a 3011 	ldrh.w	r3, [sl, r1, lsl #1]
 8007120:	2b20      	cmp	r3, #32
 8007122:	f43f af39 	beq.w	8006f98 <follow_path+0x7c>
 8007126:	2b2e      	cmp	r3, #46	; 0x2e
 8007128:	f43f af36 	beq.w	8006f98 <follow_path+0x7c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800712c:	b109      	cbz	r1, 8007132 <follow_path+0x216>
 800712e:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007132:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
 8007136:	2b2e      	cmp	r3, #46	; 0x2e
 8007138:	d001      	beq.n	800713e <follow_path+0x222>
 800713a:	3f01      	subs	r7, #1
 800713c:	d1f9      	bne.n	8007132 <follow_path+0x216>
		dp->fn[i++] = (BYTE)w;
 800713e:	2300      	movs	r3, #0
 8007140:	f04f 0808 	mov.w	r8, #8
 8007144:	461d      	mov	r5, r3
		w = lfn[si++];					/* Get an LFN character */
 8007146:	f83a 0011 	ldrh.w	r0, [sl, r1, lsl #1]
 800714a:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 800714c:	2800      	cmp	r0, #0
 800714e:	f43f af34 	beq.w	8006fba <follow_path+0x9e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007152:	2820      	cmp	r0, #32
 8007154:	d005      	beq.n	8007162 <follow_path+0x246>
 8007156:	282e      	cmp	r0, #46	; 0x2e
 8007158:	f47f af20 	bne.w	8006f9c <follow_path+0x80>
 800715c:	42ba      	cmp	r2, r7
 800715e:	f43f af21 	beq.w	8006fa4 <follow_path+0x88>
			cf |= NS_LOSS | NS_LFN; continue;
 8007162:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 8007166:	4611      	mov	r1, r2
 8007168:	e7ed      	b.n	8007146 <follow_path+0x22a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800716a:	2005      	movs	r0, #5
	return res;
 800716c:	e756      	b.n	800701c <follow_path+0x100>
 800716e:	bf00      	nop
 8007170:	0800c22d 	.word	0x0800c22d
 8007174:	0800bd68 	.word	0x0800bd68
 8007178:	0800c236 	.word	0x0800c236

0800717c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800717c:	b530      	push	{r4, r5, lr}
 800717e:	b085      	sub	sp, #20
 8007180:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007184:	a803      	add	r0, sp, #12
{
 8007186:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 8007188:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 800718a:	f7fe ff76 	bl	800607a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800718e:	2800      	cmp	r0, #0
 8007190:	db21      	blt.n	80071d6 <f_mount+0x5a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007192:	4b13      	ldr	r3, [pc, #76]	; (80071e0 <f_mount+0x64>)
 8007194:	0085      	lsls	r5, r0, #2
 8007196:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800719a:	6a01      	ldr	r1, [r0, #32]

	if (cfs) {
 800719c:	b159      	cbz	r1, 80071b6 <f_mount+0x3a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	4291      	cmp	r1, r2
 80071a2:	bf04      	itt	eq
 80071a4:	2200      	moveq	r2, #0
 80071a6:	601a      	streq	r2, [r3, #0]
 80071a8:	691a      	ldr	r2, [r3, #16]
 80071aa:	4291      	cmp	r1, r2
 80071ac:	f04f 0200 	mov.w	r2, #0
 80071b0:	bf08      	it	eq
 80071b2:	611a      	streq	r2, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80071b4:	700a      	strb	r2, [r1, #0]
	}

	if (fs) {
 80071b6:	9801      	ldr	r0, [sp, #4]
 80071b8:	b108      	cbz	r0, 80071be <f_mount+0x42>
		fs->fs_type = 0;				/* Clear new fs object */
 80071ba:	2200      	movs	r2, #0
 80071bc:	7002      	strb	r2, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80071be:	442b      	add	r3, r5
 80071c0:	6218      	str	r0, [r3, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80071c2:	b130      	cbz	r0, 80071d2 <f_mount+0x56>
 80071c4:	2c01      	cmp	r4, #1
 80071c6:	d108      	bne.n	80071da <f_mount+0x5e>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80071c8:	2200      	movs	r2, #0
 80071ca:	a901      	add	r1, sp, #4
 80071cc:	4668      	mov	r0, sp
 80071ce:	f7ff f831 	bl	8006234 <find_volume>
	LEAVE_FF(fs, res);
}
 80071d2:	b005      	add	sp, #20
 80071d4:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80071d6:	200b      	movs	r0, #11
 80071d8:	e7fb      	b.n	80071d2 <f_mount+0x56>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80071da:	2000      	movs	r0, #0
 80071dc:	e7f9      	b.n	80071d2 <f_mount+0x56>
 80071de:	bf00      	nop
 80071e0:	20000868 	.word	0x20000868

080071e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80071e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071e8:	b091      	sub	sp, #68	; 0x44
 80071ea:	4690      	mov	r8, r2
 80071ec:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80071ee:	4605      	mov	r5, r0
 80071f0:	2800      	cmp	r0, #0
 80071f2:	f000 8109 	beq.w	8007408 <f_open+0x224>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80071f6:	f002 063f 	and.w	r6, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80071fa:	4632      	mov	r2, r6
 80071fc:	a902      	add	r1, sp, #8
 80071fe:	a801      	add	r0, sp, #4
 8007200:	f7ff f818 	bl	8006234 <find_volume>
	if (res == FR_OK) {
 8007204:	2800      	cmp	r0, #0
 8007206:	f040 80fd 	bne.w	8007404 <f_open+0x220>
		dj.obj.fs = fs;
 800720a:	9b02      	ldr	r3, [sp, #8]
 800720c:	9303      	str	r3, [sp, #12]
		INIT_NAMBUF(fs);
 800720e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007212:	f000 fd9b 	bl	8007d4c <ff_memalloc>
 8007216:	4607      	mov	r7, r0
 8007218:	2800      	cmp	r0, #0
 800721a:	f000 80f7 	beq.w	800740c <f_open+0x228>
 800721e:	9b02      	ldr	r3, [sp, #8]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007220:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 8007222:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8007224:	a803      	add	r0, sp, #12
 8007226:	f7ff fe79 	bl	8006f1c <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800722a:	4604      	mov	r4, r0
 800722c:	b960      	cbnz	r0, 8007248 <f_open+0x64>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800722e:	f99d 303b 	ldrsb.w	r3, [sp, #59]	; 0x3b
 8007232:	2b00      	cmp	r3, #0
 8007234:	db60      	blt.n	80072f8 <f_open+0x114>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007236:	f016 0f3e 	tst.w	r6, #62	; 0x3e
 800723a:	bf14      	ite	ne
 800723c:	2101      	movne	r1, #1
 800723e:	2100      	moveq	r1, #0
 8007240:	a803      	add	r0, sp, #12
 8007242:	f7fe fe55 	bl	8005ef0 <chk_lock>
 8007246:	4604      	mov	r4, r0
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007248:	f018 0f1c 	tst.w	r8, #28
 800724c:	d076      	beq.n	800733c <f_open+0x158>
			if (res != FR_OK) {					/* No file, create new */
 800724e:	2c00      	cmp	r4, #0
 8007250:	d054      	beq.n	80072fc <f_open+0x118>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007252:	2c04      	cmp	r4, #4
 8007254:	d146      	bne.n	80072e4 <f_open+0x100>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007256:	4b6e      	ldr	r3, [pc, #440]	; (8007410 <f_open+0x22c>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	b11a      	cbz	r2, 8007264 <f_open+0x80>
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	f040 80ca 	bne.w	80073f8 <f_open+0x214>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007264:	a803      	add	r0, sp, #12
 8007266:	f7ff fc93 	bl	8006b90 <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800726a:	4604      	mov	r4, r0
 800726c:	2800      	cmp	r0, #0
 800726e:	d139      	bne.n	80072e4 <f_open+0x100>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007270:	f046 0608 	orr.w	r6, r6, #8
				dw = GET_FATTIME();
 8007274:	f7fe fe24 	bl	8005ec0 <get_fattime>
 8007278:	4601      	mov	r1, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800727a:	9000      	str	r0, [sp, #0]
 800727c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800727e:	300e      	adds	r0, #14
 8007280:	f7fe fe28 	bl	8005ed4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007284:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007286:	9900      	ldr	r1, [sp, #0]
 8007288:	3016      	adds	r0, #22
 800728a:	f7fe fe23 	bl	8005ed4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800728e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007290:	9c02      	ldr	r4, [sp, #8]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007292:	2220      	movs	r2, #32
 8007294:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007296:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007298:	7820      	ldrb	r0, [r4, #0]
 800729a:	f7fe ff2e 	bl	80060fa <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800729e:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80072a0:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80072a2:	4620      	mov	r0, r4
 80072a4:	f7fe ff37 	bl	8006116 <st_clust.isra.0>
					st_dword(dj.dir + DIR_FileSize, 0);
 80072a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 80072aa:	2200      	movs	r2, #0
 80072ac:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80072ae:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80072b0:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 80072b2:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 80072b4:	9b02      	ldr	r3, [sp, #8]
 80072b6:	2101      	movs	r1, #1
 80072b8:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80072ba:	f1b8 0f00 	cmp.w	r8, #0
 80072be:	d028      	beq.n	8007312 <f_open+0x12e>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 80072c0:	4641      	mov	r1, r8
 80072c2:	a803      	add	r0, sp, #12
						dw = fs->winsect;
 80072c4:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 80072c8:	f7ff fa90 	bl	80067ec <remove_chain>
						if (res == FR_OK) {
 80072cc:	4604      	mov	r4, r0
 80072ce:	b948      	cbnz	r0, 80072e4 <f_open+0x100>
							res = move_window(fs, dw);
 80072d0:	9802      	ldr	r0, [sp, #8]
 80072d2:	4649      	mov	r1, r9
 80072d4:	f7fe ff57 	bl	8006186 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80072d8:	9a02      	ldr	r2, [sp, #8]
 80072da:	f108 33ff 	add.w	r3, r8, #4294967295
 80072de:	6113      	str	r3, [r2, #16]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 80072e0:	4604      	mov	r4, r0
 80072e2:	b1b0      	cbz	r0, 8007312 <f_open+0x12e>
				}
			}
#endif
		}

		FREE_NAMBUF();
 80072e4:	4638      	mov	r0, r7
 80072e6:	f000 fd33 	bl	8007d50 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80072ea:	b10c      	cbz	r4, 80072f0 <f_open+0x10c>
 80072ec:	2300      	movs	r3, #0
 80072ee:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 80072f0:	4620      	mov	r0, r4
 80072f2:	b011      	add	sp, #68	; 0x44
 80072f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				res = FR_INVALID_NAME;
 80072f8:	2406      	movs	r4, #6
 80072fa:	e7a5      	b.n	8007248 <f_open+0x64>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80072fc:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8007300:	f013 0f11 	tst.w	r3, #17
 8007304:	d125      	bne.n	8007352 <f_open+0x16e>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007306:	f018 0f04 	tst.w	r8, #4
 800730a:	d177      	bne.n	80073fc <f_open+0x218>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800730c:	f018 0f08 	tst.w	r8, #8
 8007310:	d1b0      	bne.n	8007274 <f_open+0x90>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007312:	9b02      	ldr	r3, [sp, #8]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007314:	0730      	lsls	r0, r6, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007318:	626b      	str	r3, [r5, #36]	; 0x24
				mode |= FA_MODIFIED;
 800731a:	bf48      	it	mi
 800731c:	f046 0640 	orrmi.w	r6, r6, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007320:	f016 0ffe 	tst.w	r6, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8007324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007326:	62ab      	str	r3, [r5, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007328:	bf14      	ite	ne
 800732a:	2101      	movne	r1, #1
 800732c:	2100      	moveq	r1, #0
 800732e:	a803      	add	r0, sp, #12
 8007330:	f7fe fe18 	bl	8005f64 <inc_lock>
 8007334:	6128      	str	r0, [r5, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007336:	b970      	cbnz	r0, 8007356 <f_open+0x172>
 8007338:	2402      	movs	r4, #2
 800733a:	e7d3      	b.n	80072e4 <f_open+0x100>
			if (res == FR_OK) {					/* Following succeeded */
 800733c:	2c00      	cmp	r4, #0
 800733e:	d1d1      	bne.n	80072e4 <f_open+0x100>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007340:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8007344:	06da      	lsls	r2, r3, #27
 8007346:	d45b      	bmi.n	8007400 <f_open+0x21c>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007348:	f018 0f02 	tst.w	r8, #2
 800734c:	d0e1      	beq.n	8007312 <f_open+0x12e>
 800734e:	07dc      	lsls	r4, r3, #31
 8007350:	d5df      	bpl.n	8007312 <f_open+0x12e>
					res = FR_DENIED;
 8007352:	2407      	movs	r4, #7
 8007354:	e7c6      	b.n	80072e4 <f_open+0x100>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007356:	9c02      	ldr	r4, [sp, #8]
 8007358:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800735a:	7820      	ldrb	r0, [r4, #0]
 800735c:	f7fe fecd 	bl	80060fa <ld_clust.isra.0>
 8007360:	60a8      	str	r0, [r5, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007362:	f101 001c 	add.w	r0, r1, #28
 8007366:	f7fe fdad 	bl	8005ec4 <ld_dword>
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800736a:	f105 0830 	add.w	r8, r5, #48	; 0x30
			fp->obj.id = fs->id;
 800736e:	88e3      	ldrh	r3, [r4, #6]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007370:	60e8      	str	r0, [r5, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007372:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007374:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007378:	62e9      	str	r1, [r5, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 800737a:	602c      	str	r4, [r5, #0]
			fp->obj.id = fs->id;
 800737c:	80ab      	strh	r3, [r5, #4]
			fp->flag = mode;		/* Set file access mode */
 800737e:	752e      	strb	r6, [r5, #20]
			fp->err = 0;			/* Clear error flag */
 8007380:	7569      	strb	r1, [r5, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007382:	6229      	str	r1, [r5, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007384:	61a9      	str	r1, [r5, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007386:	4640      	mov	r0, r8
 8007388:	f7fe fdac 	bl	8005ee4 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800738c:	06b2      	lsls	r2, r6, #26
 800738e:	d401      	bmi.n	8007394 <f_open+0x1b0>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007390:	2400      	movs	r4, #0
 8007392:	e7a7      	b.n	80072e4 <f_open+0x100>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007394:	68ee      	ldr	r6, [r5, #12]
 8007396:	2e00      	cmp	r6, #0
 8007398:	d0fa      	beq.n	8007390 <f_open+0x1ac>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800739a:	9b02      	ldr	r3, [sp, #8]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800739c:	68a9      	ldr	r1, [r5, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800739e:	895c      	ldrh	r4, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80073a0:	61ae      	str	r6, [r5, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80073a2:	0264      	lsls	r4, r4, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80073a4:	42b4      	cmp	r4, r6
 80073a6:	d319      	bcc.n	80073dc <f_open+0x1f8>
 80073a8:	2400      	movs	r4, #0
				fp->clust = clst;
 80073aa:	61e9      	str	r1, [r5, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80073ac:	2c00      	cmp	r4, #0
 80073ae:	d199      	bne.n	80072e4 <f_open+0x100>
 80073b0:	f3c6 0308 	ubfx	r3, r6, #0, #9
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d0eb      	beq.n	8007390 <f_open+0x1ac>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80073b8:	9c02      	ldr	r4, [sp, #8]
 80073ba:	4620      	mov	r0, r4
 80073bc:	f7fe fe32 	bl	8006024 <clust2sect>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d0b9      	beq.n	8007338 <f_open+0x154>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80073c4:	eb00 2256 	add.w	r2, r0, r6, lsr #9
 80073c8:	622a      	str	r2, [r5, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80073ca:	7860      	ldrb	r0, [r4, #1]
 80073cc:	2301      	movs	r3, #1
 80073ce:	4641      	mov	r1, r8
 80073d0:	f7fe fd4c 	bl	8005e6c <disk_read>
						res = FR_DENIED;
 80073d4:	1e04      	subs	r4, r0, #0
 80073d6:	bf18      	it	ne
 80073d8:	2401      	movne	r4, #1
 80073da:	e783      	b.n	80072e4 <f_open+0x100>
					clst = get_fat(&fp->obj, clst);
 80073dc:	6828      	ldr	r0, [r5, #0]
 80073de:	f7ff f912 	bl	8006606 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 80073e2:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 80073e4:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80073e6:	eba6 0604 	sub.w	r6, r6, r4
 80073ea:	d903      	bls.n	80073f4 <f_open+0x210>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80073ec:	1c43      	adds	r3, r0, #1
 80073ee:	d1d9      	bne.n	80073a4 <f_open+0x1c0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80073f0:	2401      	movs	r4, #1
 80073f2:	e7da      	b.n	80073aa <f_open+0x1c6>
					if (clst <= 1) res = FR_INT_ERR;
 80073f4:	2402      	movs	r4, #2
 80073f6:	e7d8      	b.n	80073aa <f_open+0x1c6>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80073f8:	2412      	movs	r4, #18
 80073fa:	e773      	b.n	80072e4 <f_open+0x100>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80073fc:	2408      	movs	r4, #8
 80073fe:	e771      	b.n	80072e4 <f_open+0x100>
					res = FR_NO_FILE;
 8007400:	2404      	movs	r4, #4
 8007402:	e76f      	b.n	80072e4 <f_open+0x100>
 8007404:	4604      	mov	r4, r0
 8007406:	e771      	b.n	80072ec <f_open+0x108>
	if (!fp) return FR_INVALID_OBJECT;
 8007408:	2409      	movs	r4, #9
 800740a:	e771      	b.n	80072f0 <f_open+0x10c>
		INIT_NAMBUF(fs);
 800740c:	2411      	movs	r4, #17
 800740e:	e76f      	b.n	80072f0 <f_open+0x10c>
 8007410:	20000868 	.word	0x20000868

08007414 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	b087      	sub	sp, #28
 800741a:	4616      	mov	r6, r2
 800741c:	9301      	str	r3, [sp, #4]
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800741e:	9a01      	ldr	r2, [sp, #4]
 8007420:	2300      	movs	r3, #0
{
 8007422:	4689      	mov	r9, r1
	*br = 0;	/* Clear read byte counter */
 8007424:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007426:	a905      	add	r1, sp, #20
{
 8007428:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800742a:	f7fe fe43 	bl	80060b4 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800742e:	4605      	mov	r5, r0
 8007430:	bb18      	cbnz	r0, 800747a <f_read+0x66>
 8007432:	7d65      	ldrb	r5, [r4, #21]
 8007434:	bb0d      	cbnz	r5, 800747a <f_read+0x66>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007436:	7d23      	ldrb	r3, [r4, #20]
 8007438:	f013 0301 	ands.w	r3, r3, #1
 800743c:	9302      	str	r3, [sp, #8]
 800743e:	f000 809a 	beq.w	8007576 <f_read+0x162>
	remain = fp->obj.objsize - fp->fptr;
 8007442:	68e2      	ldr	r2, [r4, #12]
 8007444:	69a3      	ldr	r3, [r4, #24]
 8007446:	1ad2      	subs	r2, r2, r3
 8007448:	4296      	cmp	r6, r2
 800744a:	bf28      	it	cs
 800744c:	4616      	movcs	r6, r2
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800744e:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btr;								/* Repeat until all data read */
 8007452:	b196      	cbz	r6, 800747a <f_read+0x66>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007454:	69a1      	ldr	r1, [r4, #24]
 8007456:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800745a:	2b00      	cmp	r3, #0
 800745c:	d17d      	bne.n	800755a <f_read+0x146>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800745e:	9b05      	ldr	r3, [sp, #20]
 8007460:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 8007464:	f108 38ff 	add.w	r8, r8, #4294967295
			if (csect == 0) {					/* On the cluster boundary? */
 8007468:	ea18 2851 	ands.w	r8, r8, r1, lsr #9
 800746c:	d11b      	bne.n	80074a6 <f_read+0x92>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800746e:	b941      	cbnz	r1, 8007482 <f_read+0x6e>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007470:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007472:	2801      	cmp	r0, #1
 8007474:	d810      	bhi.n	8007498 <f_read+0x84>
 8007476:	2502      	movs	r5, #2
 8007478:	7565      	strb	r5, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800747a:	4628      	mov	r0, r5
 800747c:	b007      	add	sp, #28
 800747e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (fp->cltbl) {
 8007482:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007484:	b11b      	cbz	r3, 800748e <f_read+0x7a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007486:	4620      	mov	r0, r4
 8007488:	f7fe fdd7 	bl	800603a <clmt_clust>
 800748c:	e7f1      	b.n	8007472 <f_read+0x5e>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800748e:	69e1      	ldr	r1, [r4, #28]
 8007490:	6820      	ldr	r0, [r4, #0]
 8007492:	f7ff f8b8 	bl	8006606 <get_fat.isra.0>
 8007496:	e7ec      	b.n	8007472 <f_read+0x5e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	d103      	bne.n	80074a4 <f_read+0x90>
 800749c:	2301      	movs	r3, #1
 800749e:	9d02      	ldr	r5, [sp, #8]
 80074a0:	7563      	strb	r3, [r4, #21]
 80074a2:	e7ea      	b.n	800747a <f_read+0x66>
				fp->clust = clst;				/* Update current cluster */
 80074a4:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80074a6:	f8dd b014 	ldr.w	fp, [sp, #20]
 80074aa:	69e1      	ldr	r1, [r4, #28]
 80074ac:	4658      	mov	r0, fp
 80074ae:	f7fe fdb9 	bl	8006024 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d0df      	beq.n	8007476 <f_read+0x62>
			if (cc) {							/* Read maximum contiguous sectors directly */
 80074b6:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 80074ba:	eb08 0700 	add.w	r7, r8, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 80074be:	d32f      	bcc.n	8007520 <f_read+0x10c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80074c0:	f8bb 200a 	ldrh.w	r2, [fp, #10]
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80074c4:	f89b 0001 	ldrb.w	r0, [fp, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80074c8:	eb08 2156 	add.w	r1, r8, r6, lsr #9
 80074cc:	4291      	cmp	r1, r2
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80074ce:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80074d2:	4649      	mov	r1, r9
					cc = fs->csize - csect;
 80074d4:	bf88      	it	hi
 80074d6:	eba2 0308 	subhi.w	r3, r2, r8
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80074da:	463a      	mov	r2, r7
 80074dc:	9303      	str	r3, [sp, #12]
 80074de:	f7fe fcc5 	bl	8005e6c <disk_read>
 80074e2:	2800      	cmp	r0, #0
 80074e4:	d1da      	bne.n	800749c <f_read+0x88>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80074e6:	f994 2014 	ldrsb.w	r2, [r4, #20]
 80074ea:	9b03      	ldr	r3, [sp, #12]
 80074ec:	2a00      	cmp	r2, #0
 80074ee:	da0b      	bge.n	8007508 <f_read+0xf4>
 80074f0:	6a20      	ldr	r0, [r4, #32]
 80074f2:	1bc0      	subs	r0, r0, r7
 80074f4:	4298      	cmp	r0, r3
 80074f6:	d207      	bcs.n	8007508 <f_read+0xf4>
	if (cnt) {
 80074f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074fc:	4651      	mov	r1, sl
 80074fe:	eb09 2040 	add.w	r0, r9, r0, lsl #9
 8007502:	f7fe fdf1 	bl	80060e8 <mem_cpy.part.0>
 8007506:	9b03      	ldr	r3, [sp, #12]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007508:	025f      	lsls	r7, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800750a:	69a3      	ldr	r3, [r4, #24]
 800750c:	9a01      	ldr	r2, [sp, #4]
 800750e:	443b      	add	r3, r7
 8007510:	61a3      	str	r3, [r4, #24]
 8007512:	9b01      	ldr	r3, [sp, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	443b      	add	r3, r7
 8007518:	44b9      	add	r9, r7
 800751a:	6013      	str	r3, [r2, #0]
 800751c:	1bf6      	subs	r6, r6, r7
 800751e:	e798      	b.n	8007452 <f_read+0x3e>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007520:	6a22      	ldr	r2, [r4, #32]
 8007522:	42ba      	cmp	r2, r7
 8007524:	d018      	beq.n	8007558 <f_read+0x144>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007526:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800752a:	2b00      	cmp	r3, #0
 800752c:	da0b      	bge.n	8007546 <f_read+0x132>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800752e:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8007532:	2301      	movs	r3, #1
 8007534:	4651      	mov	r1, sl
 8007536:	f7fe fca7 	bl	8005e88 <disk_write>
 800753a:	2800      	cmp	r0, #0
 800753c:	d1ae      	bne.n	800749c <f_read+0x88>
					fp->flag &= (BYTE)~FA_DIRTY;
 800753e:	7d23      	ldrb	r3, [r4, #20]
 8007540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007544:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007546:	9805      	ldr	r0, [sp, #20]
 8007548:	2301      	movs	r3, #1
 800754a:	7840      	ldrb	r0, [r0, #1]
 800754c:	463a      	mov	r2, r7
 800754e:	4651      	mov	r1, sl
 8007550:	f7fe fc8c 	bl	8005e6c <disk_read>
 8007554:	2800      	cmp	r0, #0
 8007556:	d1a1      	bne.n	800749c <f_read+0x88>
			fp->sect = sect;
 8007558:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800755a:	69a1      	ldr	r1, [r4, #24]
 800755c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007560:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007564:	42b7      	cmp	r7, r6
 8007566:	bf28      	it	cs
 8007568:	4637      	movcs	r7, r6
	if (cnt) {
 800756a:	463a      	mov	r2, r7
 800756c:	4451      	add	r1, sl
 800756e:	4648      	mov	r0, r9
 8007570:	f7fe fdba 	bl	80060e8 <mem_cpy.part.0>
}
 8007574:	e7c9      	b.n	800750a <f_read+0xf6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007576:	2507      	movs	r5, #7
 8007578:	e77f      	b.n	800747a <f_read+0x66>

0800757a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800757a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757e:	4699      	mov	r9, r3
 8007580:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8007582:	2300      	movs	r3, #0
{
 8007584:	4688      	mov	r8, r1
	*bw = 0;	/* Clear write byte counter */
 8007586:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800758a:	a903      	add	r1, sp, #12
{
 800758c:	4604      	mov	r4, r0
 800758e:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007590:	f7fe fd90 	bl	80060b4 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007594:	4605      	mov	r5, r0
 8007596:	bb50      	cbnz	r0, 80075ee <f_write+0x74>
 8007598:	7d65      	ldrb	r5, [r4, #21]
 800759a:	bb45      	cbnz	r5, 80075ee <f_write+0x74>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800759c:	7d23      	ldrb	r3, [r4, #20]
 800759e:	079a      	lsls	r2, r3, #30
 80075a0:	f140 80b0 	bpl.w	8007704 <f_write+0x18a>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80075a4:	69a3      	ldr	r3, [r4, #24]
 80075a6:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80075a8:	bf28      	it	cs
 80075aa:	43de      	mvncs	r6, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80075ac:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btw;							/* Repeat until all data written */
 80075b0:	b1ce      	cbz	r6, 80075e6 <f_write+0x6c>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80075b2:	69a1      	ldr	r1, [r4, #24]
 80075b4:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f040 8091 	bne.w	80076e0 <f_write+0x166>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80075be:	9b03      	ldr	r3, [sp, #12]
 80075c0:	895f      	ldrh	r7, [r3, #10]
 80075c2:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 80075c4:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 80075c8:	d124      	bne.n	8007614 <f_write+0x9a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80075ca:	b931      	cbnz	r1, 80075da <f_write+0x60>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80075cc:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80075ce:	b9a0      	cbnz	r0, 80075fa <f_write+0x80>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80075d0:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80075d2:	4620      	mov	r0, r4
 80075d4:	f7ff f8b2 	bl	800673c <create_chain>
 80075d8:	e004      	b.n	80075e4 <f_write+0x6a>
					if (fp->cltbl) {
 80075da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80075dc:	b15b      	cbz	r3, 80075f6 <f_write+0x7c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80075de:	4620      	mov	r0, r4
 80075e0:	f7fe fd2b 	bl	800603a <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80075e4:	b948      	cbnz	r0, 80075fa <f_write+0x80>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80075e6:	7d23      	ldrb	r3, [r4, #20]
 80075e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ec:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 80075ee:	4628      	mov	r0, r5
 80075f0:	b005      	add	sp, #20
 80075f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80075f6:	69e1      	ldr	r1, [r4, #28]
 80075f8:	e7eb      	b.n	80075d2 <f_write+0x58>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80075fa:	2801      	cmp	r0, #1
 80075fc:	d102      	bne.n	8007604 <f_write+0x8a>
 80075fe:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007600:	7565      	strb	r5, [r4, #21]
 8007602:	e7f4      	b.n	80075ee <f_write+0x74>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d101      	bne.n	800760c <f_write+0x92>
 8007608:	2501      	movs	r5, #1
 800760a:	e7f9      	b.n	8007600 <f_write+0x86>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800760c:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800760e:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007610:	b903      	cbnz	r3, 8007614 <f_write+0x9a>
 8007612:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007614:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8007618:	2b00      	cmp	r3, #0
 800761a:	da0c      	bge.n	8007636 <f_write+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800761c:	9803      	ldr	r0, [sp, #12]
 800761e:	6a22      	ldr	r2, [r4, #32]
 8007620:	7840      	ldrb	r0, [r0, #1]
 8007622:	2301      	movs	r3, #1
 8007624:	4651      	mov	r1, sl
 8007626:	f7fe fc2f 	bl	8005e88 <disk_write>
 800762a:	2800      	cmp	r0, #0
 800762c:	d1ec      	bne.n	8007608 <f_write+0x8e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800762e:	7d23      	ldrb	r3, [r4, #20]
 8007630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007634:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007636:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800763a:	69e1      	ldr	r1, [r4, #28]
 800763c:	4658      	mov	r0, fp
 800763e:	f7fe fcf1 	bl	8006024 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007642:	2800      	cmp	r0, #0
 8007644:	d0db      	beq.n	80075fe <f_write+0x84>
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007646:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 800764a:	eb07 0200 	add.w	r2, r7, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 800764e:	d335      	bcc.n	80076bc <f_write+0x142>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007650:	f8bb 100a 	ldrh.w	r1, [fp, #10]
 8007654:	eb07 2056 	add.w	r0, r7, r6, lsr #9
 8007658:	4288      	cmp	r0, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800765a:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800765e:	f89b 0001 	ldrb.w	r0, [fp, #1]
					cc = fs->csize - csect;
 8007662:	bf88      	it	hi
 8007664:	1bcb      	subhi	r3, r1, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007666:	4641      	mov	r1, r8
 8007668:	e9cd 2300 	strd	r2, r3, [sp]
 800766c:	f7fe fc0c 	bl	8005e88 <disk_write>
 8007670:	2800      	cmp	r0, #0
 8007672:	d1c9      	bne.n	8007608 <f_write+0x8e>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007674:	6a21      	ldr	r1, [r4, #32]
 8007676:	9a00      	ldr	r2, [sp, #0]
 8007678:	9b01      	ldr	r3, [sp, #4]
 800767a:	1a89      	subs	r1, r1, r2
 800767c:	4299      	cmp	r1, r3
 800767e:	d20c      	bcs.n	800769a <f_write+0x120>
 8007680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007684:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 8007688:	4650      	mov	r0, sl
 800768a:	9300      	str	r3, [sp, #0]
	if (cnt) {
 800768c:	f7fe fd2c 	bl	80060e8 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007690:	7d22      	ldrb	r2, [r4, #20]
 8007692:	9b00      	ldr	r3, [sp, #0]
 8007694:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007698:	7522      	strb	r2, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800769a:	025f      	lsls	r7, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800769c:	69a3      	ldr	r3, [r4, #24]
 800769e:	68e2      	ldr	r2, [r4, #12]
 80076a0:	443b      	add	r3, r7
 80076a2:	61a3      	str	r3, [r4, #24]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	bf2c      	ite	cs
 80076a8:	60e2      	strcs	r2, [r4, #12]
 80076aa:	60e3      	strcc	r3, [r4, #12]
 80076ac:	f8d9 3000 	ldr.w	r3, [r9]
 80076b0:	443b      	add	r3, r7
 80076b2:	44b8      	add	r8, r7
 80076b4:	f8c9 3000 	str.w	r3, [r9]
 80076b8:	1bf6      	subs	r6, r6, r7
 80076ba:	e779      	b.n	80075b0 <f_write+0x36>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80076bc:	6a23      	ldr	r3, [r4, #32]
 80076be:	4293      	cmp	r3, r2
 80076c0:	d00d      	beq.n	80076de <f_write+0x164>
 80076c2:	68e1      	ldr	r1, [r4, #12]
 80076c4:	69a3      	ldr	r3, [r4, #24]
 80076c6:	4299      	cmp	r1, r3
 80076c8:	d909      	bls.n	80076de <f_write+0x164>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80076ca:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80076ce:	9200      	str	r2, [sp, #0]
 80076d0:	2301      	movs	r3, #1
 80076d2:	4651      	mov	r1, sl
 80076d4:	f7fe fbca 	bl	8005e6c <disk_read>
				fp->fptr < fp->obj.objsize &&
 80076d8:	9a00      	ldr	r2, [sp, #0]
 80076da:	2800      	cmp	r0, #0
 80076dc:	d194      	bne.n	8007608 <f_write+0x8e>
			fp->sect = sect;
 80076de:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80076e0:	69a0      	ldr	r0, [r4, #24]
 80076e2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80076e6:	f5c0 7700 	rsb	r7, r0, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80076ea:	42b7      	cmp	r7, r6
 80076ec:	bf28      	it	cs
 80076ee:	4637      	movcs	r7, r6
	if (cnt) {
 80076f0:	463a      	mov	r2, r7
 80076f2:	4641      	mov	r1, r8
 80076f4:	4450      	add	r0, sl
 80076f6:	f7fe fcf7 	bl	80060e8 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 80076fa:	7d23      	ldrb	r3, [r4, #20]
 80076fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007700:	7523      	strb	r3, [r4, #20]
 8007702:	e7cb      	b.n	800769c <f_write+0x122>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007704:	2507      	movs	r5, #7
 8007706:	e772      	b.n	80075ee <f_write+0x74>

08007708 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800770a:	a901      	add	r1, sp, #4
{
 800770c:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800770e:	f7fe fcd1 	bl	80060b4 <validate>
	if (res == FR_OK) {
 8007712:	4604      	mov	r4, r0
 8007714:	2800      	cmp	r0, #0
 8007716:	d13b      	bne.n	8007790 <f_sync+0x88>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007718:	7d2b      	ldrb	r3, [r5, #20]
 800771a:	f013 0440 	ands.w	r4, r3, #64	; 0x40
 800771e:	d037      	beq.n	8007790 <f_sync+0x88>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007720:	061b      	lsls	r3, r3, #24
 8007722:	d50c      	bpl.n	800773e <f_sync+0x36>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007724:	9801      	ldr	r0, [sp, #4]
 8007726:	6a2a      	ldr	r2, [r5, #32]
 8007728:	7840      	ldrb	r0, [r0, #1]
 800772a:	2301      	movs	r3, #1
 800772c:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8007730:	f7fe fbaa 	bl	8005e88 <disk_write>
 8007734:	bb78      	cbnz	r0, 8007796 <f_sync+0x8e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007736:	7d2b      	ldrb	r3, [r5, #20]
 8007738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800773c:	752b      	strb	r3, [r5, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800773e:	f7fe fbbf 	bl	8005ec0 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007742:	6a69      	ldr	r1, [r5, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8007744:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8007746:	9801      	ldr	r0, [sp, #4]
 8007748:	f7fe fd1d 	bl	8006186 <move_window>
				if (res == FR_OK) {
 800774c:	4604      	mov	r4, r0
 800774e:	b9f8      	cbnz	r0, 8007790 <f_sync+0x88>
					dir = fp->dir_ptr;
 8007750:	6aae      	ldr	r6, [r5, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007752:	7af3      	ldrb	r3, [r6, #11]
 8007754:	f043 0320 	orr.w	r3, r3, #32
 8007758:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800775a:	68aa      	ldr	r2, [r5, #8]
 800775c:	6828      	ldr	r0, [r5, #0]
 800775e:	4631      	mov	r1, r6
 8007760:	f7fe fcd9 	bl	8006116 <st_clust.isra.0>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007764:	68e9      	ldr	r1, [r5, #12]
 8007766:	f106 001c 	add.w	r0, r6, #28
 800776a:	f7fe fbb3 	bl	8005ed4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800776e:	4639      	mov	r1, r7
 8007770:	f106 0016 	add.w	r0, r6, #22
 8007774:	f7fe fbae 	bl	8005ed4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8007778:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800777a:	74b4      	strb	r4, [r6, #18]
					fs->wflag = 1;
 800777c:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 800777e:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 8007780:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007782:	f7ff f86b 	bl	800685c <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007786:	7d2b      	ldrb	r3, [r5, #20]
 8007788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 800778c:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800778e:	752b      	strb	r3, [r5, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8007790:	4620      	mov	r0, r4
 8007792:	b003      	add	sp, #12
 8007794:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007796:	2401      	movs	r4, #1
 8007798:	e7fa      	b.n	8007790 <f_sync+0x88>

0800779a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800779a:	b513      	push	{r0, r1, r4, lr}
 800779c:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800779e:	f7ff ffb3 	bl	8007708 <f_sync>
	if (res == FR_OK)
 80077a2:	b948      	cbnz	r0, 80077b8 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80077a4:	a901      	add	r1, sp, #4
 80077a6:	4620      	mov	r0, r4
 80077a8:	f7fe fc84 	bl	80060b4 <validate>
		if (res == FR_OK) {
 80077ac:	b920      	cbnz	r0, 80077b8 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80077ae:	6920      	ldr	r0, [r4, #16]
 80077b0:	f7fe fc1a 	bl	8005fe8 <dec_lock>
			if (res == FR_OK)
 80077b4:	b900      	cbnz	r0, 80077b8 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80077b6:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 80077b8:	b002      	add	sp, #8
 80077ba:	bd10      	pop	{r4, pc}

080077bc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80077bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c0:	b085      	sub	sp, #20
 80077c2:	460d      	mov	r5, r1
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80077c4:	a903      	add	r1, sp, #12
{
 80077c6:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80077c8:	f7fe fc74 	bl	80060b4 <validate>
	if (res == FR_OK) res = (FRESULT)fp->err;
 80077cc:	4606      	mov	r6, r0
 80077ce:	b9e8      	cbnz	r0, 800780c <f_lseek+0x50>
 80077d0:	7d66      	ldrb	r6, [r4, #21]
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80077d2:	b9de      	cbnz	r6, 800780c <f_lseek+0x50>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80077d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d07b      	beq.n	80078d2 <f_lseek+0x116>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80077da:	1c6a      	adds	r2, r5, #1
 80077dc:	d139      	bne.n	8007852 <f_lseek+0x96>
			tbl = fp->cltbl;
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80077de:	461d      	mov	r5, r3
			cl = fp->obj.sclust;		/* Origin of the chain */
 80077e0:	f8d4 8008 	ldr.w	r8, [r4, #8]
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80077e4:	f855 bb04 	ldr.w	fp, [r5], #4
 80077e8:	2702      	movs	r7, #2
			if (cl) {
 80077ea:	f1b8 0f00 	cmp.w	r8, #0
 80077ee:	d028      	beq.n	8007842 <f_lseek+0x86>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80077f0:	4640      	mov	r0, r8
 80077f2:	f04f 0a00 	mov.w	sl, #0
					do {
						pcl = cl; ncl++;
						cl = get_fat(&fp->obj, cl);
 80077f6:	4601      	mov	r1, r0
 80077f8:	4681      	mov	r9, r0
 80077fa:	6820      	ldr	r0, [r4, #0]
 80077fc:	f7fe ff03 	bl	8006606 <get_fat.isra.0>
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007800:	2801      	cmp	r0, #1
						pcl = cl; ncl++;
 8007802:	f10a 0a01 	add.w	sl, sl, #1
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007806:	d807      	bhi.n	8007818 <f_lseek+0x5c>
 8007808:	2602      	movs	r6, #2
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800780a:	7566      	strb	r6, [r4, #21]
			fp->sect = nsect;
		}
	}

	LEAVE_FF(fs, res);
}
 800780c:	4630      	mov	r0, r6
 800780e:	b005      	add	sp, #20
 8007810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007814:	4680      	mov	r8, r0
 8007816:	e7eb      	b.n	80077f0 <f_lseek+0x34>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d101      	bne.n	8007820 <f_lseek+0x64>
 800781c:	2601      	movs	r6, #1
 800781e:	e7f4      	b.n	800780a <f_lseek+0x4e>
					} while (cl == pcl + 1);
 8007820:	f109 0901 	add.w	r9, r9, #1
 8007824:	4581      	cmp	r9, r0
 8007826:	d0e6      	beq.n	80077f6 <f_lseek+0x3a>
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007828:	3702      	adds	r7, #2
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800782a:	45bb      	cmp	fp, r7
						*tbl++ = ncl; *tbl++ = tcl;
 800782c:	bf21      	itttt	cs
 800782e:	462b      	movcs	r3, r5
 8007830:	f843 ab08 	strcs.w	sl, [r3], #8
 8007834:	f8c5 8004 	strcs.w	r8, [r5, #4]
 8007838:	461d      	movcs	r5, r3
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800783a:	9b03      	ldr	r3, [sp, #12]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	4283      	cmp	r3, r0
 8007840:	d8e8      	bhi.n	8007814 <f_lseek+0x58>
			*fp->cltbl = ulen;	/* Number of items used */
 8007842:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if (ulen <= tlen) {
 8007844:	455f      	cmp	r7, fp
			*fp->cltbl = ulen;	/* Number of items used */
 8007846:	601f      	str	r7, [r3, #0]
			if (ulen <= tlen) {
 8007848:	f200 80c3 	bhi.w	80079d2 <f_lseek+0x216>
				*tbl = 0;		/* Terminate table */
 800784c:	2300      	movs	r3, #0
 800784e:	602b      	str	r3, [r5, #0]
 8007850:	e7dc      	b.n	800780c <f_lseek+0x50>
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8007852:	68e7      	ldr	r7, [r4, #12]
 8007854:	42af      	cmp	r7, r5
 8007856:	bf28      	it	cs
 8007858:	462f      	movcs	r7, r5
			fp->fptr = ofs;				/* Set file pointer */
 800785a:	61a7      	str	r7, [r4, #24]
			if (ofs) {
 800785c:	2f00      	cmp	r7, #0
 800785e:	d0d5      	beq.n	800780c <f_lseek+0x50>
				fp->clust = clmt_clust(fp, ofs - 1);
 8007860:	1e7d      	subs	r5, r7, #1
 8007862:	4629      	mov	r1, r5
 8007864:	4620      	mov	r0, r4
 8007866:	f7fe fbe8 	bl	800603a <clmt_clust>
				dsc = clust2sect(fs, fp->clust);
 800786a:	f8dd 800c 	ldr.w	r8, [sp, #12]
				fp->clust = clmt_clust(fp, ofs - 1);
 800786e:	61e0      	str	r0, [r4, #28]
 8007870:	4601      	mov	r1, r0
				dsc = clust2sect(fs, fp->clust);
 8007872:	4640      	mov	r0, r8
 8007874:	f7fe fbd6 	bl	8006024 <clust2sect>
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8007878:	2800      	cmp	r0, #0
 800787a:	d0c5      	beq.n	8007808 <f_lseek+0x4c>
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800787c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8007880:	2f00      	cmp	r7, #0
 8007882:	d0c3      	beq.n	800780c <f_lseek+0x50>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8007884:	f8b8 100a 	ldrh.w	r1, [r8, #10]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007888:	6a22      	ldr	r2, [r4, #32]
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800788a:	3901      	subs	r1, #1
 800788c:	ea01 2155 	and.w	r1, r1, r5, lsr #9
 8007890:	180d      	adds	r5, r1, r0
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007892:	42aa      	cmp	r2, r5
 8007894:	d0ba      	beq.n	800780c <f_lseek+0x50>
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007896:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800789a:	2b00      	cmp	r3, #0
 800789c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80078a0:	da0c      	bge.n	80078bc <f_lseek+0x100>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80078a2:	f898 0001 	ldrb.w	r0, [r8, #1]
 80078a6:	9101      	str	r1, [sp, #4]
 80078a8:	2301      	movs	r3, #1
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80078aa:	f7fe faed 	bl	8005e88 <disk_write>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d1b4      	bne.n	800781c <f_lseek+0x60>
				fp->flag &= (BYTE)~FA_DIRTY;
 80078b2:	7d23      	ldrb	r3, [r4, #20]
 80078b4:	9901      	ldr	r1, [sp, #4]
 80078b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ba:	7523      	strb	r3, [r4, #20]
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80078bc:	9803      	ldr	r0, [sp, #12]
 80078be:	2301      	movs	r3, #1
 80078c0:	7840      	ldrb	r0, [r0, #1]
 80078c2:	462a      	mov	r2, r5
 80078c4:	f7fe fad2 	bl	8005e6c <disk_read>
 80078c8:	4606      	mov	r6, r0
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d1a6      	bne.n	800781c <f_lseek+0x60>
			fp->sect = nsect;
 80078ce:	6225      	str	r5, [r4, #32]
 80078d0:	e79c      	b.n	800780c <f_lseek+0x50>
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80078d2:	68e3      	ldr	r3, [r4, #12]
 80078d4:	42ab      	cmp	r3, r5
 80078d6:	d204      	bcs.n	80078e2 <f_lseek+0x126>
 80078d8:	7d22      	ldrb	r2, [r4, #20]
 80078da:	f012 0f02 	tst.w	r2, #2
 80078de:	bf08      	it	eq
 80078e0:	461d      	moveq	r5, r3
		fp->fptr = nsect = 0;
 80078e2:	2200      	movs	r2, #0
		ifptr = fp->fptr;
 80078e4:	69a3      	ldr	r3, [r4, #24]
		fp->fptr = nsect = 0;
 80078e6:	61a2      	str	r2, [r4, #24]
		if (ofs) {
 80078e8:	b9ed      	cbnz	r5, 8007926 <f_lseek+0x16a>
		fp->fptr = nsect = 0;
 80078ea:	2500      	movs	r5, #0
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80078ec:	68e2      	ldr	r2, [r4, #12]
 80078ee:	69a3      	ldr	r3, [r4, #24]
 80078f0:	4293      	cmp	r3, r2
			fp->flag |= FA_MODIFIED;
 80078f2:	bf82      	ittt	hi
 80078f4:	7d22      	ldrbhi	r2, [r4, #20]
			fp->obj.objsize = fp->fptr;
 80078f6:	60e3      	strhi	r3, [r4, #12]
			fp->flag |= FA_MODIFIED;
 80078f8:	f042 0240 	orrhi.w	r2, r2, #64	; 0x40
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80078fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->flag |= FA_MODIFIED;
 8007900:	bf88      	it	hi
 8007902:	7522      	strbhi	r2, [r4, #20]
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007904:	2b00      	cmp	r3, #0
 8007906:	d081      	beq.n	800780c <f_lseek+0x50>
 8007908:	6a22      	ldr	r2, [r4, #32]
 800790a:	42aa      	cmp	r2, r5
 800790c:	f43f af7e 	beq.w	800780c <f_lseek+0x50>
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007910:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8007914:	2b00      	cmp	r3, #0
 8007916:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800791a:	dacf      	bge.n	80078bc <f_lseek+0x100>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800791c:	9803      	ldr	r0, [sp, #12]
 800791e:	9101      	str	r1, [sp, #4]
 8007920:	7840      	ldrb	r0, [r0, #1]
 8007922:	2301      	movs	r3, #1
 8007924:	e7c1      	b.n	80078aa <f_lseek+0xee>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007926:	9a03      	ldr	r2, [sp, #12]
 8007928:	8957      	ldrh	r7, [r2, #10]
 800792a:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
 800792c:	b30b      	cbz	r3, 8007972 <f_lseek+0x1b6>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800792e:	3b01      	subs	r3, #1
 8007930:	1e6a      	subs	r2, r5, #1
 8007932:	fbb3 f1f7 	udiv	r1, r3, r7
 8007936:	fbb2 f2f7 	udiv	r2, r2, r7
			if (ifptr > 0 &&
 800793a:	428a      	cmp	r2, r1
 800793c:	d319      	bcc.n	8007972 <f_lseek+0x1b6>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800793e:	427a      	negs	r2, r7
 8007940:	4013      	ands	r3, r2
				clst = fp->clust;
 8007942:	69e1      	ldr	r1, [r4, #28]
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007944:	61a3      	str	r3, [r4, #24]
				ofs -= fp->fptr;
 8007946:	1aed      	subs	r5, r5, r3
			if (clst != 0) {
 8007948:	2900      	cmp	r1, #0
 800794a:	d0ce      	beq.n	80078ea <f_lseek+0x12e>
				while (ofs > bcs) {						/* Cluster following loop */
 800794c:	42bd      	cmp	r5, r7
 800794e:	69a3      	ldr	r3, [r4, #24]
 8007950:	d81e      	bhi.n	8007990 <f_lseek+0x1d4>
				fp->fptr += ofs;
 8007952:	69a3      	ldr	r3, [r4, #24]
 8007954:	442b      	add	r3, r5
 8007956:	61a3      	str	r3, [r4, #24]
				if (ofs % SS(fs)) {
 8007958:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0c4      	beq.n	80078ea <f_lseek+0x12e>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007960:	9803      	ldr	r0, [sp, #12]
 8007962:	f7fe fb5f 	bl	8006024 <clust2sect>
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007966:	2800      	cmp	r0, #0
 8007968:	f43f af4e 	beq.w	8007808 <f_lseek+0x4c>
					nsect += (DWORD)(ofs / SS(fs));
 800796c:	eb00 2555 	add.w	r5, r0, r5, lsr #9
 8007970:	e7bc      	b.n	80078ec <f_lseek+0x130>
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007972:	68a1      	ldr	r1, [r4, #8]
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007974:	b951      	cbnz	r1, 800798c <f_lseek+0x1d0>
					clst = create_chain(&fp->obj, 0);
 8007976:	4620      	mov	r0, r4
 8007978:	f7fe fee0 	bl	800673c <create_chain>
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800797c:	2801      	cmp	r0, #1
					clst = create_chain(&fp->obj, 0);
 800797e:	4601      	mov	r1, r0
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007980:	f43f af42 	beq.w	8007808 <f_lseek+0x4c>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007984:	1c48      	adds	r0, r1, #1
 8007986:	f43f af49 	beq.w	800781c <f_lseek+0x60>
					fp->obj.sclust = clst;
 800798a:	60a1      	str	r1, [r4, #8]
				fp->clust = clst;
 800798c:	61e1      	str	r1, [r4, #28]
 800798e:	e7db      	b.n	8007948 <f_lseek+0x18c>
					ofs -= bcs; fp->fptr += bcs;
 8007990:	443b      	add	r3, r7
 8007992:	61a3      	str	r3, [r4, #24]
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007994:	7d23      	ldrb	r3, [r4, #20]
 8007996:	079a      	lsls	r2, r3, #30
					ofs -= bcs; fp->fptr += bcs;
 8007998:	eba5 0807 	sub.w	r8, r5, r7
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800799c:	d506      	bpl.n	80079ac <f_lseek+0x1f0>
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800799e:	4620      	mov	r0, r4
 80079a0:	f7fe fecc 	bl	800673c <create_chain>
						if (clst == 0) {				/* Clip file size in case of disk full */
 80079a4:	4605      	mov	r5, r0
 80079a6:	b928      	cbnz	r0, 80079b4 <f_lseek+0x1f8>
 80079a8:	4601      	mov	r1, r0
 80079aa:	e7d2      	b.n	8007952 <f_lseek+0x196>
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80079ac:	6820      	ldr	r0, [r4, #0]
 80079ae:	f7fe fe2a 	bl	8006606 <get_fat.isra.0>
 80079b2:	4605      	mov	r5, r0
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80079b4:	1c6b      	adds	r3, r5, #1
 80079b6:	f43f af31 	beq.w	800781c <f_lseek+0x60>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80079ba:	2d01      	cmp	r5, #1
 80079bc:	f67f af24 	bls.w	8007808 <f_lseek+0x4c>
 80079c0:	9b03      	ldr	r3, [sp, #12]
 80079c2:	699b      	ldr	r3, [r3, #24]
 80079c4:	42ab      	cmp	r3, r5
 80079c6:	f67f af1f 	bls.w	8007808 <f_lseek+0x4c>
					fp->clust = clst;
 80079ca:	61e5      	str	r5, [r4, #28]
 80079cc:	4629      	mov	r1, r5
					ofs -= bcs; fp->fptr += bcs;
 80079ce:	4645      	mov	r5, r8
 80079d0:	e7bc      	b.n	800794c <f_lseek+0x190>
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80079d2:	2611      	movs	r6, #17
 80079d4:	e71a      	b.n	800780c <f_lseek+0x50>

080079d6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80079d6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80079d8:	4605      	mov	r5, r0
{
 80079da:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 80079dc:	2800      	cmp	r0, #0
 80079de:	d049      	beq.n	8007a74 <f_opendir+0x9e>

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 80079e0:	2200      	movs	r2, #0
 80079e2:	a903      	add	r1, sp, #12
 80079e4:	a801      	add	r0, sp, #4
 80079e6:	f7fe fc25 	bl	8006234 <find_volume>
	if (res == FR_OK) {
 80079ea:	4604      	mov	r4, r0
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d136      	bne.n	8007a5e <f_opendir+0x88>
		obj->fs = fs;
 80079f0:	9b03      	ldr	r3, [sp, #12]
 80079f2:	602b      	str	r3, [r5, #0]
		INIT_NAMBUF(fs);
 80079f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80079f8:	f000 f9a8 	bl	8007d4c <ff_memalloc>
 80079fc:	4606      	mov	r6, r0
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d03a      	beq.n	8007a78 <f_opendir+0xa2>
 8007a02:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007a04:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 8007a06:	60d8      	str	r0, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f7ff fa87 	bl	8006f1c <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8007a0e:	4604      	mov	r4, r0
 8007a10:	b9f8      	cbnz	r0, 8007a52 <f_opendir+0x7c>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007a12:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	db08      	blt.n	8007a2c <f_opendir+0x56>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8007a1a:	79ab      	ldrb	r3, [r5, #6]
 8007a1c:	06db      	lsls	r3, r3, #27
 8007a1e:	d525      	bpl.n	8007a6c <f_opendir+0x96>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007a20:	9b03      	ldr	r3, [sp, #12]
 8007a22:	6a29      	ldr	r1, [r5, #32]
 8007a24:	7818      	ldrb	r0, [r3, #0]
 8007a26:	f7fe fb68 	bl	80060fa <ld_clust.isra.0>
 8007a2a:	60a8      	str	r0, [r5, #8]
				} else {						/* This object is a file */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				obj->id = fs->id;
 8007a2c:	9b03      	ldr	r3, [sp, #12]
 8007a2e:	88db      	ldrh	r3, [r3, #6]
 8007a30:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007a32:	2100      	movs	r1, #0
 8007a34:	4628      	mov	r0, r5
 8007a36:	f7fe fe40 	bl	80066ba <dir_sdi>
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	b948      	cbnz	r0, 8007a52 <f_opendir+0x7c>
					if (obj->sclust) {
 8007a3e:	68ab      	ldr	r3, [r5, #8]
 8007a40:	b193      	cbz	r3, 8007a68 <f_opendir+0x92>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007a42:	4601      	mov	r1, r0
 8007a44:	4628      	mov	r0, r5
 8007a46:	f7fe fa8d 	bl	8005f64 <inc_lock>
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007a4a:	2800      	cmp	r0, #0
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007a4c:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007a4e:	bf08      	it	eq
 8007a50:	2412      	moveq	r4, #18
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 8007a52:	4630      	mov	r0, r6
 8007a54:	f000 f97c 	bl	8007d50 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007a58:	2c04      	cmp	r4, #4
 8007a5a:	d009      	beq.n	8007a70 <f_opendir+0x9a>
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007a5c:	b10c      	cbz	r4, 8007a62 <f_opendir+0x8c>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 8007a62:	4620      	mov	r0, r4
 8007a64:	b004      	add	sp, #16
 8007a66:	bd70      	pop	{r4, r5, r6, pc}
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007a68:	6128      	str	r0, [r5, #16]
 8007a6a:	e7f2      	b.n	8007a52 <f_opendir+0x7c>
					res = FR_NO_PATH;
 8007a6c:	2405      	movs	r4, #5
 8007a6e:	e7f0      	b.n	8007a52 <f_opendir+0x7c>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007a70:	2405      	movs	r4, #5
 8007a72:	e7f4      	b.n	8007a5e <f_opendir+0x88>
	if (!dp) return FR_INVALID_OBJECT;
 8007a74:	2409      	movs	r4, #9
 8007a76:	e7f4      	b.n	8007a62 <f_opendir+0x8c>
		INIT_NAMBUF(fs);
 8007a78:	2411      	movs	r4, #17
 8007a7a:	e7f2      	b.n	8007a62 <f_opendir+0x8c>

08007a7c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8007a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a80:	b09e      	sub	sp, #120	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8007a82:	2202      	movs	r2, #2
{
 8007a84:	9001      	str	r0, [sp, #4]
	res = find_volume(&path, &fs, FA_WRITE);
 8007a86:	a903      	add	r1, sp, #12
 8007a88:	a801      	add	r0, sp, #4
 8007a8a:	f7fe fbd3 	bl	8006234 <find_volume>
	dj.obj.fs = fs;
 8007a8e:	9b03      	ldr	r3, [sp, #12]
 8007a90:	9304      	str	r3, [sp, #16]
	if (res == FR_OK) {
 8007a92:	4604      	mov	r4, r0
 8007a94:	bb08      	cbnz	r0, 8007ada <f_unlink+0x5e>
		INIT_NAMBUF(fs);
 8007a96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007a9a:	f000 f957 	bl	8007d4c <ff_memalloc>
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	d050      	beq.n	8007b46 <f_unlink+0xca>
 8007aa4:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 8007aa6:	9901      	ldr	r1, [sp, #4]
		INIT_NAMBUF(fs);
 8007aa8:	60d8      	str	r0, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 8007aaa:	a804      	add	r0, sp, #16
 8007aac:	f7ff fa36 	bl	8006f1c <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	b978      	cbnz	r0, 8007ad4 <f_unlink+0x58>
 8007ab4:	2102      	movs	r1, #2
 8007ab6:	a804      	add	r0, sp, #16
 8007ab8:	f7fe fa1a 	bl	8005ef0 <chk_lock>
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8007abc:	4604      	mov	r4, r0
 8007abe:	b948      	cbnz	r0, 8007ad4 <f_unlink+0x58>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8007ac0:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	db3c      	blt.n	8007b42 <f_unlink+0xc6>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
 8007ac8:	f89d 8016 	ldrb.w	r8, [sp, #22]
 8007acc:	f018 0f01 	tst.w	r8, #1
 8007ad0:	d007      	beq.n	8007ae2 <f_unlink+0x66>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8007ad2:	2407      	movs	r4, #7
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	f000 f93b 	bl	8007d50 <ff_memfree>
	}

	LEAVE_FF(fs, res);
}
 8007ada:	4620      	mov	r0, r4
 8007adc:	b01e      	add	sp, #120	; 0x78
 8007ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					dclst = ld_clust(fs, dj.dir);
 8007ae2:	9f03      	ldr	r7, [sp, #12]
 8007ae4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007ae6:	7838      	ldrb	r0, [r7, #0]
 8007ae8:	f7fe fb07 	bl	80060fa <ld_clust.isra.0>
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8007aec:	f018 0f10 	tst.w	r8, #16
					dclst = ld_clust(fs, dj.dir);
 8007af0:	4606      	mov	r6, r0
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8007af2:	d10b      	bne.n	8007b0c <f_unlink+0x90>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8007af4:	a804      	add	r0, sp, #16
 8007af6:	f7fe ff71 	bl	80069dc <dir_remove>
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8007afa:	4604      	mov	r4, r0
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d1e9      	bne.n	8007ad4 <f_unlink+0x58>
 8007b00:	b9b6      	cbnz	r6, 8007b30 <f_unlink+0xb4>
				if (res == FR_OK) res = sync_fs(fs);
 8007b02:	9803      	ldr	r0, [sp, #12]
 8007b04:	f7fe feaa 	bl	800685c <sync_fs>
 8007b08:	4604      	mov	r4, r0
 8007b0a:	e7e3      	b.n	8007ad4 <f_unlink+0x58>
						sdj.obj.sclust = dclst;
 8007b0c:	9013      	str	r0, [sp, #76]	; 0x4c
						res = dir_sdi(&sdj, 0);
 8007b0e:	4621      	mov	r1, r4
 8007b10:	a811      	add	r0, sp, #68	; 0x44
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8007b12:	9711      	str	r7, [sp, #68]	; 0x44
						res = dir_sdi(&sdj, 0);
 8007b14:	f7fe fdd1 	bl	80066ba <dir_sdi>
						if (res == FR_OK) {
 8007b18:	4604      	mov	r4, r0
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d1da      	bne.n	8007ad4 <f_unlink+0x58>
							res = dir_read(&sdj, 0);			/* Read an item */
 8007b1e:	a811      	add	r0, sp, #68	; 0x44
 8007b20:	f7ff f976 	bl	8006e10 <dir_read.constprop.0>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8007b24:	4604      	mov	r4, r0
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d0d3      	beq.n	8007ad2 <f_unlink+0x56>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8007b2a:	2804      	cmp	r0, #4
 8007b2c:	d1d2      	bne.n	8007ad4 <f_unlink+0x58>
 8007b2e:	e7e1      	b.n	8007af4 <f_unlink+0x78>
					res = remove_chain(&dj.obj, dclst, 0);
 8007b30:	4602      	mov	r2, r0
 8007b32:	4631      	mov	r1, r6
 8007b34:	a804      	add	r0, sp, #16
 8007b36:	f7fe fe59 	bl	80067ec <remove_chain>
				if (res == FR_OK) res = sync_fs(fs);
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d1c9      	bne.n	8007ad4 <f_unlink+0x58>
 8007b40:	e7df      	b.n	8007b02 <f_unlink+0x86>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8007b42:	2406      	movs	r4, #6
 8007b44:	e7c6      	b.n	8007ad4 <f_unlink+0x58>
		INIT_NAMBUF(fs);
 8007b46:	2411      	movs	r4, #17
 8007b48:	e7c7      	b.n	8007ada <f_unlink+0x5e>
	...

08007b4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007b4c:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8007b4e:	4b0f      	ldr	r3, [pc, #60]	; (8007b8c <FATFS_LinkDriverEx+0x40>)
 8007b50:	7b9c      	ldrb	r4, [r3, #14]
 8007b52:	2c01      	cmp	r4, #1
 8007b54:	d817      	bhi.n	8007b86 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007b56:	7b9d      	ldrb	r5, [r3, #14]
 8007b58:	b2ed      	uxtb	r5, r5
 8007b5a:	2400      	movs	r4, #0
 8007b5c:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8007b5e:	7b9d      	ldrb	r5, [r3, #14]
 8007b60:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8007b64:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8007b66:	7b98      	ldrb	r0, [r3, #14]
 8007b68:	4418      	add	r0, r3
 8007b6a:	7302      	strb	r2, [r0, #12]
    DiskNum = disk.nbr++;
 8007b6c:	7b9a      	ldrb	r2, [r3, #14]
 8007b6e:	1c50      	adds	r0, r2, #1
 8007b70:	b2c0      	uxtb	r0, r0
 8007b72:	7398      	strb	r0, [r3, #14]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8007b74:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8007b76:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8007b78:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8007b7a:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8007b7c:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8007b7e:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8007b80:	70cc      	strb	r4, [r1, #3]
 8007b82:	4620      	mov	r0, r4
    ret = 0;
  }

  return ret;
}
 8007b84:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8007b86:	2001      	movs	r0, #1
 8007b88:	e7fc      	b.n	8007b84 <FATFS_LinkDriverEx+0x38>
 8007b8a:	bf00      	nop
 8007b8c:	20000894 	.word	0x20000894

08007b90 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8007b90:	2200      	movs	r2, #0
 8007b92:	f7ff bfdb 	b.w	8007b4c <FATFS_LinkDriverEx>

08007b96 <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 8007b96:	2000      	movs	r0, #0
 8007b98:	4770      	bx	lr
	...

08007b9c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8007b9c:	4601      	mov	r1, r0
 8007b9e:	b508      	push	{r3, lr}
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8007ba0:	4803      	ldr	r0, [pc, #12]	; (8007bb0 <USBH_status+0x14>)
 8007ba2:	f000 fb2d 	bl	8008200 <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
 8007ba6:	fab0 f080 	clz	r0, r0
 8007baa:	0940      	lsrs	r0, r0, #5
 8007bac:	bd08      	pop	{r3, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000d50 	.word	0x20000d50

08007bb4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb8:	4617      	mov	r7, r2
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 8007bba:	078a      	lsls	r2, r1, #30
{
 8007bbc:	b090      	sub	sp, #64	; 0x40
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	460e      	mov	r6, r1
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 8007bc2:	d032      	beq.n	8007c2a <USBH_read+0x76>
 8007bc4:	481f      	ldr	r0, [pc, #124]	; (8007c44 <USBH_read+0x90>)
 8007bc6:	f8d0 25a0 	ldr.w	r2, [r0, #1440]	; 0x5a0
 8007bca:	6912      	ldr	r2, [r2, #16]
 8007bcc:	b36a      	cbz	r2, 8007c2a <USBH_read+0x76>
  {
    while ((count--)&&(status == USBH_OK))
    {
      status = USBH_MSC_Read(&hUSB_Host, lun, sector + count, (uint8_t *)scratch, 1);
 8007bce:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8007c48 <USBH_read+0x94>
 8007bd2:	1e5c      	subs	r4, r3, #1
 8007bd4:	f04f 0a01 	mov.w	sl, #1
 8007bd8:	4680      	mov	r8, r0
    while ((count--)&&(status == USBH_OK))
 8007bda:	1c63      	adds	r3, r4, #1
 8007bdc:	d101      	bne.n	8007be2 <USBH_read+0x2e>
    status = USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count);
  }

  if(status == USBH_OK)
  {
    res = RES_OK;
 8007bde:	2000      	movs	r0, #0
 8007be0:	e017      	b.n	8007c12 <USBH_read+0x5e>
      status = USBH_MSC_Read(&hUSB_Host, lun, sector + count, (uint8_t *)scratch, 1);
 8007be2:	f8cd a000 	str.w	sl, [sp]
 8007be6:	464b      	mov	r3, r9
 8007be8:	193a      	adds	r2, r7, r4
 8007bea:	4629      	mov	r1, r5
 8007bec:	4640      	mov	r0, r8
 8007bee:	f000 fb30 	bl	8008252 <USBH_MSC_Read>
      if(status == USBH_OK)
 8007bf2:	b188      	cbz	r0, 8007c18 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007bf4:	4813      	ldr	r0, [pc, #76]	; (8007c44 <USBH_read+0x90>)
 8007bf6:	aa03      	add	r2, sp, #12
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	f000 fb12 	bl	8008222 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007bfe:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8007c02:	2b28      	cmp	r3, #40	; 0x28
 8007c04:	d01b      	beq.n	8007c3e <USBH_read+0x8a>
 8007c06:	2b3a      	cmp	r3, #58	; 0x3a
 8007c08:	d019      	beq.n	8007c3e <USBH_read+0x8a>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	bf14      	ite	ne
 8007c0e:	2001      	movne	r0, #1
 8007c10:	2003      	moveq	r0, #3
      break;
    }
  }

  return res;
}
 8007c12:	b010      	add	sp, #64	; 0x40
 8007c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memcpy (&buff[count * _MAX_SS] ,scratch, _MAX_SS);
 8007c18:	eb06 2044 	add.w	r0, r6, r4, lsl #9
 8007c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c20:	4649      	mov	r1, r9
 8007c22:	f003 fac1 	bl	800b1a8 <memcpy>
 8007c26:	3c01      	subs	r4, #1
 8007c28:	e7d7      	b.n	8007bda <USBH_read+0x26>
    status = USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count);
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	4805      	ldr	r0, [pc, #20]	; (8007c44 <USBH_read+0x90>)
 8007c2e:	4633      	mov	r3, r6
 8007c30:	463a      	mov	r2, r7
 8007c32:	4629      	mov	r1, r5
 8007c34:	f000 fb0d 	bl	8008252 <USBH_MSC_Read>
  if(status == USBH_OK)
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d0d0      	beq.n	8007bde <USBH_read+0x2a>
 8007c3c:	e7da      	b.n	8007bf4 <USBH_read+0x40>
      res = RES_NOTRDY;
 8007c3e:	2003      	movs	r0, #3
 8007c40:	e7e7      	b.n	8007c12 <USBH_read+0x5e>
 8007c42:	bf00      	nop
 8007c44:	20000d50 	.word	0x20000d50
 8007c48:	200008a4 	.word	0x200008a4

08007c4c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007c4c:	b510      	push	{r4, lr}
 8007c4e:	4603      	mov	r3, r0
 8007c50:	b08e      	sub	sp, #56	; 0x38
 8007c52:	4608      	mov	r0, r1
 8007c54:	4614      	mov	r4, r2
 8007c56:	2903      	cmp	r1, #3
 8007c58:	d803      	bhi.n	8007c62 <USBH_ioctl+0x16>
 8007c5a:	e8df f001 	tbb	[pc, r1]
 8007c5e:	0503      	.short	0x0503
 8007c60:	1a10      	.short	0x1a10
      *(DWORD*)buff = info.capacity.block_nbr;
      res = RES_OK;
    }
    else
    {
      res = RES_ERROR;
 8007c62:	2004      	movs	r0, #4
  default:
    res = RES_PARERR;
  }

  return res;
}
 8007c64:	b00e      	add	sp, #56	; 0x38
 8007c66:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007c68:	480f      	ldr	r0, [pc, #60]	; (8007ca8 <USBH_ioctl+0x5c>)
 8007c6a:	aa01      	add	r2, sp, #4
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	f000 fad8 	bl	8008222 <USBH_MSC_GetLUNInfo>
 8007c72:	b108      	cbz	r0, 8007c78 <USBH_ioctl+0x2c>
      res = RES_ERROR;
 8007c74:	2001      	movs	r0, #1
  return res;
 8007c76:	e7f5      	b.n	8007c64 <USBH_ioctl+0x18>
      *(DWORD*)buff = info.capacity.block_nbr;
 8007c78:	9b02      	ldr	r3, [sp, #8]
      *(DWORD*)buff = info.capacity.block_size;
 8007c7a:	6023      	str	r3, [r4, #0]
      res = RES_OK;
 8007c7c:	e7f2      	b.n	8007c64 <USBH_ioctl+0x18>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007c7e:	480a      	ldr	r0, [pc, #40]	; (8007ca8 <USBH_ioctl+0x5c>)
 8007c80:	aa01      	add	r2, sp, #4
 8007c82:	4619      	mov	r1, r3
 8007c84:	f000 facd 	bl	8008222 <USBH_MSC_GetLUNInfo>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	d1f3      	bne.n	8007c74 <USBH_ioctl+0x28>
      *(DWORD*)buff = info.capacity.block_size;
 8007c8c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007c90:	e7f3      	b.n	8007c7a <USBH_ioctl+0x2e>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007c92:	4805      	ldr	r0, [pc, #20]	; (8007ca8 <USBH_ioctl+0x5c>)
 8007c94:	aa01      	add	r2, sp, #4
 8007c96:	4619      	mov	r1, r3
 8007c98:	f000 fac3 	bl	8008222 <USBH_MSC_GetLUNInfo>
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	d1e9      	bne.n	8007c74 <USBH_ioctl+0x28>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8007ca0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007ca4:	0a5b      	lsrs	r3, r3, #9
 8007ca6:	e7e8      	b.n	8007c7a <USBH_ioctl+0x2e>
 8007ca8:	20000d50 	.word	0x20000d50

08007cac <USBH_write>:
{
 8007cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cb0:	4617      	mov	r7, r2
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 8007cb2:	078a      	lsls	r2, r1, #30
{
 8007cb4:	b091      	sub	sp, #68	; 0x44
 8007cb6:	4605      	mov	r5, r0
 8007cb8:	460e      	mov	r6, r1
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSB_Host.pData)->Init.dma_enable))
 8007cba:	d004      	beq.n	8007cc6 <USBH_write+0x1a>
 8007cbc:	4a21      	ldr	r2, [pc, #132]	; (8007d44 <USBH_write+0x98>)
 8007cbe:	f8d2 15a0 	ldr.w	r1, [r2, #1440]	; 0x5a0
 8007cc2:	6909      	ldr	r1, [r1, #16]
 8007cc4:	bb79      	cbnz	r1, 8007d26 <USBH_write+0x7a>
    status = USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count);
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	463a      	mov	r2, r7
 8007cca:	4633      	mov	r3, r6
 8007ccc:	4629      	mov	r1, r5
 8007cce:	481d      	ldr	r0, [pc, #116]	; (8007d44 <USBH_write+0x98>)
 8007cd0:	f000 fb02 	bl	80082d8 <USBH_MSC_Write>
 8007cd4:	e02e      	b.n	8007d34 <USBH_write+0x88>
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 8007cd6:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 8007cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cde:	4648      	mov	r0, r9
 8007ce0:	f003 fa62 	bl	800b1a8 <memcpy>
      status = USBH_MSC_Write(&hUSB_Host, lun, sector + count, (BYTE *)scratch, 1) ;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	193a      	adds	r2, r7, r4
 8007cea:	464b      	mov	r3, r9
 8007cec:	4629      	mov	r1, r5
 8007cee:	4640      	mov	r0, r8
 8007cf0:	f000 faf2 	bl	80082d8 <USBH_MSC_Write>
      if(status == USBH_FAIL)
 8007cf4:	2802      	cmp	r0, #2
 8007cf6:	f104 34ff 	add.w	r4, r4, #4294967295
 8007cfa:	d119      	bne.n	8007d30 <USBH_write+0x84>
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007cfc:	4811      	ldr	r0, [pc, #68]	; (8007d44 <USBH_write+0x98>)
 8007cfe:	aa03      	add	r2, sp, #12
 8007d00:	4629      	mov	r1, r5
 8007d02:	f000 fa8e 	bl	8008222 <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8007d06:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8007d0a:	2b27      	cmp	r3, #39	; 0x27
 8007d0c:	d015      	beq.n	8007d3a <USBH_write+0x8e>
 8007d0e:	d806      	bhi.n	8007d1e <USBH_write+0x72>
 8007d10:	2b04      	cmp	r3, #4
 8007d12:	bf14      	ite	ne
 8007d14:	2001      	movne	r0, #1
 8007d16:	2003      	moveq	r0, #3
}
 8007d18:	b011      	add	sp, #68	; 0x44
 8007d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch (info.sense.asc)
 8007d1e:	2b28      	cmp	r3, #40	; 0x28
 8007d20:	d00d      	beq.n	8007d3e <USBH_write+0x92>
 8007d22:	2b3a      	cmp	r3, #58	; 0x3a
 8007d24:	e7f5      	b.n	8007d12 <USBH_write+0x66>
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 8007d26:	f8df 9020 	ldr.w	r9, [pc, #32]	; 8007d48 <USBH_write+0x9c>
 8007d2a:	1e5c      	subs	r4, r3, #1
  USBH_StatusTypeDef  status = USBH_OK;
 8007d2c:	2000      	movs	r0, #0
      status = USBH_MSC_Write(&hUSB_Host, lun, sector + count, (BYTE *)scratch, 1) ;
 8007d2e:	4690      	mov	r8, r2
    while (count--)
 8007d30:	1c63      	adds	r3, r4, #1
 8007d32:	d1d0      	bne.n	8007cd6 <USBH_write+0x2a>
  if(status == USBH_OK)
 8007d34:	2800      	cmp	r0, #0
 8007d36:	d0ef      	beq.n	8007d18 <USBH_write+0x6c>
 8007d38:	e7e0      	b.n	8007cfc <USBH_write+0x50>
      res = RES_WRPRT;
 8007d3a:	2002      	movs	r0, #2
 8007d3c:	e7ec      	b.n	8007d18 <USBH_write+0x6c>
    switch (info.sense.asc)
 8007d3e:	2003      	movs	r0, #3
 8007d40:	e7ea      	b.n	8007d18 <USBH_write+0x6c>
 8007d42:	bf00      	nop
 8007d44:	20000d50 	.word	0x20000d50
 8007d48:	200008a4 	.word	0x200008a4

08007d4c <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8007d4c:	f003 ba1c 	b.w	800b188 <malloc>

08007d50 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8007d50:	f003 ba22 	b.w	800b198 <free>

08007d54 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007d54:	287f      	cmp	r0, #127	; 0x7f
{
 8007d56:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
 8007d58:	d906      	bls.n	8007d68 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007d5a:	b131      	cbz	r1, 8007d6a <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007d5c:	28ff      	cmp	r0, #255	; 0xff
 8007d5e:	d812      	bhi.n	8007d86 <ff_convert+0x32>
 8007d60:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <ff_convert+0x38>)
 8007d62:	3880      	subs	r0, #128	; 0x80
 8007d64:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 8007d68:	bd10      	pop	{r4, pc}
 8007d6a:	4a08      	ldr	r2, [pc, #32]	; (8007d8c <ff_convert+0x38>)
				if (chr == Tbl[c]) break;
 8007d6c:	f832 4b02 	ldrh.w	r4, [r2], #2
 8007d70:	4284      	cmp	r4, r0
 8007d72:	b28b      	uxth	r3, r1
 8007d74:	d003      	beq.n	8007d7e <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 8007d76:	3101      	adds	r1, #1
 8007d78:	2980      	cmp	r1, #128	; 0x80
 8007d7a:	d1f7      	bne.n	8007d6c <ff_convert+0x18>
 8007d7c:	460b      	mov	r3, r1
			c = (c + 0x80) & 0xFF;
 8007d7e:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8007d82:	b2c0      	uxtb	r0, r0
 8007d84:	e7f0      	b.n	8007d68 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007d86:	2000      	movs	r0, #0
 8007d88:	e7ee      	b.n	8007d68 <ff_convert+0x14>
 8007d8a:	bf00      	nop
 8007d8c:	0800be28 	.word	0x0800be28

08007d90 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007d90:	b570      	push	{r4, r5, r6, lr}
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007d92:	4b1f      	ldr	r3, [pc, #124]	; (8007e10 <ff_wtoupper+0x80>)
 8007d94:	f503 72f9 	add.w	r2, r3, #498	; 0x1f2
 8007d98:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8007d9c:	bf28      	it	cs
 8007d9e:	4613      	movcs	r3, r2
 8007da0:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
 8007da2:	f831 3c04 	ldrh.w	r3, [r1, #-4]
		if (!bc || chr < bc) break;
 8007da6:	460a      	mov	r2, r1
 8007da8:	b1ab      	cbz	r3, 8007dd6 <ff_wtoupper+0x46>
 8007daa:	4298      	cmp	r0, r3
 8007dac:	d313      	bcc.n	8007dd6 <ff_wtoupper+0x46>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007dae:	f831 4c02 	ldrh.w	r4, [r1, #-2]
 8007db2:	0a25      	lsrs	r5, r4, #8
 8007db4:	b2e6      	uxtb	r6, r4
		if (chr < bc + nc) {	/* In the block? */
 8007db6:	fa53 f484 	uxtab	r4, r3, r4
 8007dba:	42a0      	cmp	r0, r4
 8007dbc:	da21      	bge.n	8007e02 <ff_wtoupper+0x72>
			switch (cmd) {
 8007dbe:	2d08      	cmp	r5, #8
 8007dc0:	d809      	bhi.n	8007dd6 <ff_wtoupper+0x46>
 8007dc2:	e8df f005 	tbb	[pc, r5]
 8007dc6:	0905      	.short	0x0905
 8007dc8:	1513110f 	.word	0x1513110f
 8007dcc:	1917      	.short	0x1917
 8007dce:	1b          	.byte	0x1b
 8007dcf:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007dd0:	1ac0      	subs	r0, r0, r3
 8007dd2:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
		}
		if (!cmd) p += nc;
	}

	return chr;
}
 8007dd6:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007dd8:	1ac3      	subs	r3, r0, r3
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	1ac0      	subs	r0, r0, r3
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007de0:	b280      	uxth	r0, r0
 8007de2:	e7f8      	b.n	8007dd6 <ff_wtoupper+0x46>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007de4:	3810      	subs	r0, #16
 8007de6:	e7fb      	b.n	8007de0 <ff_wtoupper+0x50>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007de8:	3820      	subs	r0, #32
 8007dea:	e7f9      	b.n	8007de0 <ff_wtoupper+0x50>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007dec:	3830      	subs	r0, #48	; 0x30
 8007dee:	e7f7      	b.n	8007de0 <ff_wtoupper+0x50>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007df0:	381a      	subs	r0, #26
 8007df2:	e7f5      	b.n	8007de0 <ff_wtoupper+0x50>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007df4:	3008      	adds	r0, #8
 8007df6:	e7f3      	b.n	8007de0 <ff_wtoupper+0x50>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007df8:	3850      	subs	r0, #80	; 0x50
 8007dfa:	e7f1      	b.n	8007de0 <ff_wtoupper+0x50>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007dfc:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8007e00:	e7ee      	b.n	8007de0 <ff_wtoupper+0x50>
		if (!cmd) p += nc;
 8007e02:	3104      	adds	r1, #4
 8007e04:	2d00      	cmp	r5, #0
 8007e06:	d1cc      	bne.n	8007da2 <ff_wtoupper+0x12>
 8007e08:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 8007e0c:	e7c8      	b.n	8007da0 <ff_wtoupper+0x10>
 8007e0e:	bf00      	nop
 8007e10:	0800bf28 	.word	0x0800bf28

08007e14 <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 8007e14:	2000      	movs	r0, #0
 8007e16:	4770      	bx	lr

08007e18 <USBH_MSC_Process>:
{
 8007e18:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e1a:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
 8007e1e:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->state)
 8007e20:	7b23      	ldrb	r3, [r4, #12]
{
 8007e22:	4606      	mov	r6, r0
  switch (MSC_Handle->state)
 8007e24:	b123      	cbz	r3, 8007e30 <USBH_MSC_Process+0x18>
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	f000 80d1 	beq.w	8007fce <USBH_MSC_Process+0x1b6>
  USBH_StatusTypeDef error = USBH_BUSY;
 8007e2c:	2001      	movs	r0, #1
}
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8007e30:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 8007e34:	7822      	ldrb	r2, [r4, #0]
 8007e36:	428a      	cmp	r2, r1
 8007e38:	f04f 0501 	mov.w	r5, #1
 8007e3c:	f240 80bf 	bls.w	8007fbe <USBH_MSC_Process+0x1a6>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007e40:	2234      	movs	r2, #52	; 0x34
 8007e42:	fb02 4301 	mla	r3, r2, r1, r4
 8007e46:	f883 5091 	strb.w	r5, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8007e4a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007e4e:	4615      	mov	r5, r2
 8007e50:	2b08      	cmp	r3, #8
 8007e52:	d8eb      	bhi.n	8007e2c <USBH_MSC_Process+0x14>
 8007e54:	a201      	add	r2, pc, #4	; (adr r2, 8007e5c <USBH_MSC_Process+0x44>)
 8007e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5a:	bf00      	nop
 8007e5c:	08007e81 	.word	0x08007e81
 8007e60:	08007e2d 	.word	0x08007e2d
 8007e64:	08007ec3 	.word	0x08007ec3
 8007e68:	08007f29 	.word	0x08007f29
 8007e6c:	08007e95 	.word	0x08007e95
 8007e70:	08007f5f 	.word	0x08007f5f
 8007e74:	08007e2d 	.word	0x08007e2d
 8007e78:	08007e2d 	.word	0x08007e2d
 8007e7c:	08007fb7 	.word	0x08007fb7
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007e80:	fb05 4101 	mla	r1, r5, r1, r4
 8007e84:	2304      	movs	r3, #4
 8007e86:	f881 3090 	strb.w	r3, [r1, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
 8007e8a:	f8d0 3594 	ldr.w	r3, [r0, #1428]	; 0x594
 8007e8e:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
            break;
 8007e92:	e7cb      	b.n	8007e2c <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007e94:	fb05 4201 	mla	r2, r5, r1, r4
 8007e98:	329f      	adds	r2, #159	; 0x9f
 8007e9a:	b2c9      	uxtb	r1, r1
 8007e9c:	f000 fbc0 	bl	8008620 <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 8007ea0:	b938      	cbnz	r0, 8007eb2 <USBH_MSC_Process+0x9a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007ea2:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	fb05 4401 	mla	r4, r5, r1, r4
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007eac:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 8007eb0:	e7bc      	b.n	8007e2c <USBH_MSC_Process+0x14>
            if (scsi_status == USBH_FAIL)
 8007eb2:	2802      	cmp	r0, #2
 8007eb4:	d14b      	bne.n	8007f4e <USBH_MSC_Process+0x136>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007eb6:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 8007eba:	2305      	movs	r3, #5
 8007ebc:	fb05 4401 	mla	r4, r5, r1, r4
 8007ec0:	e7f4      	b.n	8007eac <USBH_MSC_Process+0x94>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8007ec2:	b2c9      	uxtb	r1, r1
 8007ec4:	f000 fb54 	bl	8008570 <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 8007ec8:	b988      	cbnz	r0, 8007eee <USBH_MSC_Process+0xd6>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007eca:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8007ece:	2234      	movs	r2, #52	; 0x34
 8007ed0:	fb02 4403 	mla	r4, r2, r3, r4
 8007ed4:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 8007ed8:	3b00      	subs	r3, #0
 8007eda:	bf18      	it	ne
 8007edc:	2301      	movne	r3, #1
 8007ede:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007ee2:	2303      	movs	r3, #3
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007ee4:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007ee8:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
 8007eec:	e79e      	b.n	8007e2c <USBH_MSC_Process+0x14>
            if (ready_status == USBH_FAIL)
 8007eee:	2802      	cmp	r0, #2
 8007ef0:	d10e      	bne.n	8007f10 <USBH_MSC_Process+0xf8>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007ef2:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8007ef6:	2234      	movs	r2, #52	; 0x34
 8007ef8:	fb02 4403 	mla	r4, r2, r3, r4
 8007efc:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 8007f00:	3b02      	subs	r3, #2
 8007f02:	bf18      	it	ne
 8007f04:	2301      	movne	r3, #1
 8007f06:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007f0a:	f240 1305 	movw	r3, #261	; 0x105
 8007f0e:	e7e9      	b.n	8007ee4 <USBH_MSC_Process+0xcc>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8007f10:	2804      	cmp	r0, #4
 8007f12:	d18b      	bne.n	8007e2c <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007f14:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8007f18:	2234      	movs	r2, #52	; 0x34
 8007f1a:	fb02 4403 	mla	r4, r2, r3, r4
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007f1e:	f240 2301 	movw	r3, #513	; 0x201
 8007f22:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
 8007f26:	e781      	b.n	8007e2c <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8007f28:	fb05 4201 	mla	r2, r5, r1, r4
 8007f2c:	3294      	adds	r2, #148	; 0x94
 8007f2e:	b2c9      	uxtb	r1, r1
 8007f30:	f000 fb41 	bl	80085b6 <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 8007f34:	2800      	cmp	r0, #0
 8007f36:	d1bc      	bne.n	8007eb2 <USBH_MSC_Process+0x9a>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 8007f38:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007f3c:	fb05 4503 	mla	r5, r5, r3, r4
 8007f40:	2001      	movs	r0, #1
 8007f42:	f8a5 0090 	strh.w	r0, [r5, #144]	; 0x90
              MSC_Handle->current_lun++;
 8007f46:	4403      	add	r3, r0
 8007f48:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007f4c:	e76f      	b.n	8007e2e <USBH_MSC_Process+0x16>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007f4e:	2804      	cmp	r0, #4
 8007f50:	f47f af6c 	bne.w	8007e2c <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007f54:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 8007f58:	fb05 4401 	mla	r4, r5, r1, r4
 8007f5c:	e7df      	b.n	8007f1e <USBH_MSC_Process+0x106>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007f5e:	fb05 4201 	mla	r2, r5, r1, r4
 8007f62:	329c      	adds	r2, #156	; 0x9c
 8007f64:	b2c9      	uxtb	r1, r1
 8007f66:	f000 fbc1 	bl	80086ec <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 8007f6a:	b9e0      	cbnz	r0, 8007fa6 <USBH_MSC_Process+0x18e>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007f6c:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8007f70:	fb05 4503 	mla	r5, r5, r3, r4
 8007f74:	f895 209c 	ldrb.w	r2, [r5, #156]	; 0x9c
 8007f78:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8007f7c:	2a02      	cmp	r2, #2
 8007f7e:	d10b      	bne.n	8007f98 <USBH_MSC_Process+0x180>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8007f80:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
 8007f84:	f8d6 0594 	ldr.w	r0, [r6, #1428]	; 0x594
 8007f88:	1a40      	subs	r0, r0, r1
 8007f8a:	f242 710f 	movw	r1, #9999	; 0x270f
 8007f8e:	4288      	cmp	r0, r1
 8007f90:	d802      	bhi.n	8007f98 <USBH_MSC_Process+0x180>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007f92:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
                  break;
 8007f96:	e749      	b.n	8007e2c <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007f98:	2234      	movs	r2, #52	; 0x34
 8007f9a:	fb02 4203 	mla	r2, r2, r3, r4
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
 8007fa4:	e7cf      	b.n	8007f46 <USBH_MSC_Process+0x12e>
            if (scsi_status == USBH_FAIL)
 8007fa6:	2802      	cmp	r0, #2
 8007fa8:	d1d1      	bne.n	8007f4e <USBH_MSC_Process+0x136>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007faa:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 8007fae:	2308      	movs	r3, #8
 8007fb0:	fb05 4401 	mla	r4, r5, r1, r4
 8007fb4:	e77a      	b.n	8007eac <USBH_MSC_Process+0x94>
            MSC_Handle->current_lun++;
 8007fb6:	3101      	adds	r1, #1
 8007fb8:	f8a4 10f8 	strh.w	r1, [r4, #248]	; 0xf8
            break;
 8007fbc:	e736      	b.n	8007e2c <USBH_MSC_Process+0x14>
        MSC_Handle->state = MSC_IDLE;
 8007fbe:	7325      	strb	r5, [r4, #12]
        MSC_Handle->current_lun = 0U;
 8007fc0:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007fc4:	2102      	movs	r1, #2
 8007fc6:	f8d0 35a4 	ldr.w	r3, [r0, #1444]	; 0x5a4
 8007fca:	4798      	blx	r3
 8007fcc:	e72e      	b.n	8007e2c <USBH_MSC_Process+0x14>
  switch (MSC_Handle->state)
 8007fce:	2000      	movs	r0, #0
 8007fd0:	e72d      	b.n	8007e2e <USBH_MSC_Process+0x16>
 8007fd2:	bf00      	nop

08007fd4 <USBH_MSC_ClassRequest>:
{
 8007fd4:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fd6:	f8d0 254c 	ldr.w	r2, [r0, #1356]	; 0x54c
 8007fda:	69d4      	ldr	r4, [r2, #28]
  switch (MSC_Handle->req_state)
 8007fdc:	7ba2      	ldrb	r2, [r4, #14]
 8007fde:	2a02      	cmp	r2, #2
{
 8007fe0:	4603      	mov	r3, r0
  switch (MSC_Handle->req_state)
 8007fe2:	d002      	beq.n	8007fea <USBH_MSC_ClassRequest+0x16>
 8007fe4:	2a03      	cmp	r2, #3
 8007fe6:	d021      	beq.n	800802c <USBH_MSC_ClassRequest+0x58>
 8007fe8:	bb32      	cbnz	r2, 8008038 <USBH_MSC_ClassRequest+0x64>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8007fea:	4621      	mov	r1, r4
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 f9be 	bl	800836e <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 8007ff2:	2803      	cmp	r0, #3
 8007ff4:	d117      	bne.n	8008026 <USBH_MSC_ClassRequest+0x52>
        MSC_Handle->max_lun = 0U;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	7023      	strb	r3, [r4, #0]
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8007ffa:	7823      	ldrb	r3, [r4, #0]
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	bf98      	it	ls
 8008000:	3301      	addls	r3, #1
 8008002:	f04f 0202 	mov.w	r2, #2
 8008006:	bf94      	ite	ls
 8008008:	b2db      	uxtbls	r3, r3
 800800a:	4613      	movhi	r3, r2
          MSC_Handle->unit[i].state_changed = 0U;
 800800c:	2000      	movs	r0, #0
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800800e:	2b01      	cmp	r3, #1
 8008010:	7023      	strb	r3, [r4, #0]
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008012:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 8008016:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800801a:	d006      	beq.n	800802a <USBH_MSC_ClassRequest+0x56>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800801c:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
          MSC_Handle->unit[i].state_changed = 0U;
 8008020:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008024:	e001      	b.n	800802a <USBH_MSC_ClassRequest+0x56>
      if (status == USBH_OK)
 8008026:	2800      	cmp	r0, #0
 8008028:	d0e7      	beq.n	8007ffa <USBH_MSC_ClassRequest+0x26>
}
 800802a:	bd10      	pop	{r4, pc}
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800802c:	2100      	movs	r1, #0
 800802e:	f001 f8bc 	bl	80091aa <USBH_ClrFeature>
 8008032:	b908      	cbnz	r0, 8008038 <USBH_MSC_ClassRequest+0x64>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008034:	7be3      	ldrb	r3, [r4, #15]
 8008036:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008038:	2001      	movs	r0, #1
 800803a:	e7f6      	b.n	800802a <USBH_MSC_ClassRequest+0x56>

0800803c <USBH_MSC_InterfaceDeInit>:
{
 800803c:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800803e:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
 8008042:	69dd      	ldr	r5, [r3, #28]
  if (MSC_Handle->OutPipe)
 8008044:	7969      	ldrb	r1, [r5, #5]
{
 8008046:	4604      	mov	r4, r0
  if (MSC_Handle->OutPipe)
 8008048:	b139      	cbz	r1, 800805a <USBH_MSC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800804a:	f001 f928 	bl	800929e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800804e:	7969      	ldrb	r1, [r5, #5]
 8008050:	4620      	mov	r0, r4
 8008052:	f001 f941 	bl	80092d8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008056:	2300      	movs	r3, #0
 8008058:	716b      	strb	r3, [r5, #5]
  if (MSC_Handle->InPipe)
 800805a:	7929      	ldrb	r1, [r5, #4]
 800805c:	b141      	cbz	r1, 8008070 <USBH_MSC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800805e:	4620      	mov	r0, r4
 8008060:	f001 f91d 	bl	800929e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008064:	7929      	ldrb	r1, [r5, #4]
 8008066:	4620      	mov	r0, r4
 8008068:	f001 f936 	bl	80092d8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800806c:	2300      	movs	r3, #0
 800806e:	712b      	strb	r3, [r5, #4]
  if (phost->pActiveClass->pData)
 8008070:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 8008074:	69d8      	ldr	r0, [r3, #28]
 8008076:	b128      	cbz	r0, 8008084 <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free(phost->pActiveClass->pData);
 8008078:	f003 f88e 	bl	800b198 <free>
    phost->pActiveClass->pData = 0U;
 800807c:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 8008080:	2200      	movs	r2, #0
 8008082:	61da      	str	r2, [r3, #28]
}
 8008084:	2000      	movs	r0, #0
 8008086:	bd38      	pop	{r3, r4, r5, pc}

08008088 <USBH_MSC_InterfaceInit>:
{
 8008088:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800808c:	f8d0 154c 	ldr.w	r1, [r0, #1356]	; 0x54c
 8008090:	2350      	movs	r3, #80	; 0x50
 8008092:	7909      	ldrb	r1, [r1, #4]
 8008094:	2206      	movs	r2, #6
{
 8008096:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008098:	f000 fc45 	bl	8008926 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800809c:	2809      	cmp	r0, #9
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800809e:	4606      	mov	r6, r0
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80080a0:	d904      	bls.n	80080ac <USBH_MSC_InterfaceInit+0x24>
    return USBH_FAIL;
 80080a2:	2702      	movs	r7, #2
}
 80080a4:	4638      	mov	r0, r7
 80080a6:	b004      	add	sp, #16
 80080a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = USBH_SelectInterface(phost, interface);
 80080ac:	4601      	mov	r1, r0
 80080ae:	4628      	mov	r0, r5
 80080b0:	f000 fc30 	bl	8008914 <USBH_SelectInterface>
  if (status != USBH_OK)
 80080b4:	4607      	mov	r7, r0
 80080b6:	2800      	cmp	r0, #0
 80080b8:	d1f3      	bne.n	80080a2 <USBH_MSC_InterfaceInit+0x1a>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80080ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80080be:	f8d5 854c 	ldr.w	r8, [r5, #1356]	; 0x54c
 80080c2:	f003 f861 	bl	800b188 <malloc>
 80080c6:	4604      	mov	r4, r0
 80080c8:	f8c8 001c 	str.w	r0, [r8, #28]
  if (MSC_Handle == NULL)
 80080cc:	2800      	cmp	r0, #0
 80080ce:	d0e8      	beq.n	80080a2 <USBH_MSC_InterfaceInit+0x1a>
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80080d0:	4639      	mov	r1, r7
 80080d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80080d6:	f003 f875 	bl	800b1c4 <memset>
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80080da:	201a      	movs	r0, #26
 80080dc:	fb00 5306 	mla	r3, r0, r6, r5
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80080e0:	fb00 5606 	mla	r6, r0, r6, r5
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80080e4:	f893 144e 	ldrb.w	r1, [r3, #1102]	; 0x44e
 80080e8:	f8b3 2450 	ldrh.w	r2, [r3, #1104]	; 0x450
 80080ec:	f993 344e 	ldrsb.w	r3, [r3, #1102]	; 0x44e
 80080f0:	2b00      	cmp	r3, #0
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80080f2:	bfac      	ite	ge
 80080f4:	71a1      	strbge	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80080f6:	71e1      	strblt	r1, [r4, #7]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80080f8:	f996 1456 	ldrsb.w	r1, [r6, #1110]	; 0x456
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80080fc:	bfb4      	ite	lt
 80080fe:	8162      	strhlt	r2, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008100:	8122      	strhge	r2, [r4, #8]
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008102:	2900      	cmp	r1, #0
 8008104:	f896 2456 	ldrb.w	r2, [r6, #1110]	; 0x456
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008108:	bfa8      	it	ge
 800810a:	71a2      	strbge	r2, [r4, #6]
 800810c:	f8b6 3458 	ldrh.w	r3, [r6, #1112]	; 0x458
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008110:	79a1      	ldrb	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008112:	bfb8      	it	lt
 8008114:	71e2      	strblt	r2, [r4, #7]
  MSC_Handle->state = MSC_INIT;
 8008116:	f04f 0600 	mov.w	r6, #0
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800811a:	4628      	mov	r0, r5
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800811c:	bfb4      	ite	lt
 800811e:	8163      	strhlt	r3, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008120:	8123      	strhge	r3, [r4, #8]
  MSC_Handle->state = MSC_INIT;
 8008122:	81a6      	strh	r6, [r4, #12]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008124:	73a6      	strb	r6, [r4, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008126:	f001 f8bf 	bl	80092a8 <USBH_AllocPipe>
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800812a:	79e1      	ldrb	r1, [r4, #7]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800812c:	7160      	strb	r0, [r4, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800812e:	4628      	mov	r0, r5
 8008130:	f001 f8ba 	bl	80092a8 <USBH_AllocPipe>
 8008134:	7120      	strb	r0, [r4, #4]
  USBH_MSC_BOT_Init(phost);
 8008136:	4628      	mov	r0, r5
 8008138:	f000 f922 	bl	8008380 <USBH_MSC_BOT_Init>
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800813c:	8923      	ldrh	r3, [r4, #8]
 800813e:	9302      	str	r3, [sp, #8]
 8008140:	f04f 0802 	mov.w	r8, #2
 8008144:	f895 341d 	ldrb.w	r3, [r5, #1053]	; 0x41d
 8008148:	79a2      	ldrb	r2, [r4, #6]
 800814a:	7961      	ldrb	r1, [r4, #5]
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	f8cd 8004 	str.w	r8, [sp, #4]
 8008152:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
 8008156:	4628      	mov	r0, r5
 8008158:	f001 f892 	bl	8009280 <USBH_OpenPipe>
  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800815c:	8963      	ldrh	r3, [r4, #10]
 800815e:	79e2      	ldrb	r2, [r4, #7]
 8008160:	7921      	ldrb	r1, [r4, #4]
 8008162:	e9cd 8301 	strd	r8, r3, [sp, #4]
 8008166:	f895 341d 	ldrb.w	r3, [r5, #1053]	; 0x41d
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	4628      	mov	r0, r5
 800816e:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
 8008172:	f001 f885 	bl	8009280 <USBH_OpenPipe>
  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008176:	7921      	ldrb	r1, [r4, #4]
 8008178:	4632      	mov	r2, r6
 800817a:	4628      	mov	r0, r5
 800817c:	f7f8 fcb8 	bl	8000af0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008180:	7961      	ldrb	r1, [r4, #5]
 8008182:	4632      	mov	r2, r6
 8008184:	4628      	mov	r0, r5
 8008186:	f7f8 fcb3 	bl	8000af0 <USBH_LL_SetToggle>
  return USBH_OK;
 800818a:	e78b      	b.n	80080a4 <USBH_MSC_InterfaceInit+0x1c>

0800818c <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800818c:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 8008190:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008192:	69dd      	ldr	r5, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008194:	2634      	movs	r6, #52	; 0x34
 8008196:	fb06 5401 	mla	r4, r6, r1, r5
 800819a:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800819e:	2b06      	cmp	r3, #6
 80081a0:	d005      	beq.n	80081ae <USBH_MSC_RdWrProcess+0x22>
 80081a2:	2b07      	cmp	r3, #7
 80081a4:	d00e      	beq.n	80081c4 <USBH_MSC_RdWrProcess+0x38>
 80081a6:	2b05      	cmp	r3, #5
 80081a8:	d018      	beq.n	80081dc <USBH_MSC_RdWrProcess+0x50>
  USBH_StatusTypeDef error = USBH_BUSY ;
 80081aa:	2001      	movs	r0, #1
 80081ac:	e008      	b.n	80081c0 <USBH_MSC_RdWrProcess+0x34>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80081ae:	2300      	movs	r3, #0
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	f000 fb21 	bl	80087fa <USBH_MSC_SCSI_Read>
      break;

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);

      if (scsi_status == USBH_OK)
 80081b8:	b950      	cbnz	r0, 80081d0 <USBH_MSC_RdWrProcess+0x44>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80081ba:	2301      	movs	r3, #1
 80081bc:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    default:
      break;

  }
  return error;
}
 80081c0:	b002      	add	sp, #8
 80081c2:	bd70      	pop	{r4, r5, r6, pc}
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80081c4:	2300      	movs	r3, #0
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	461a      	mov	r2, r3
 80081ca:	f000 fad7 	bl	800877c <USBH_MSC_SCSI_Write>
 80081ce:	e7f3      	b.n	80081b8 <USBH_MSC_RdWrProcess+0x2c>
      else if (scsi_status == USBH_FAIL)
 80081d0:	2802      	cmp	r0, #2
 80081d2:	d10f      	bne.n	80081f4 <USBH_MSC_RdWrProcess+0x68>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80081d4:	2305      	movs	r3, #5
 80081d6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 80081da:	e7e6      	b.n	80081aa <USBH_MSC_RdWrProcess+0x1e>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80081dc:	fb06 5201 	mla	r2, r6, r1, r5
 80081e0:	329c      	adds	r2, #156	; 0x9c
 80081e2:	f000 fa83 	bl	80086ec <USBH_MSC_SCSI_RequestSense>
      if (scsi_status == USBH_OK)
 80081e6:	b928      	cbnz	r0, 80081f4 <USBH_MSC_RdWrProcess+0x68>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80081e8:	f240 2301 	movw	r3, #513	; 0x201
 80081ec:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 80081f0:	2002      	movs	r0, #2
 80081f2:	e7e5      	b.n	80081c0 <USBH_MSC_RdWrProcess+0x34>
      if (scsi_status == USBH_FAIL)
 80081f4:	2804      	cmp	r0, #4
 80081f6:	d1d8      	bne.n	80081aa <USBH_MSC_RdWrProcess+0x1e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80081f8:	2308      	movs	r3, #8
 80081fa:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 80081fe:	e7f7      	b.n	80081f0 <USBH_MSC_RdWrProcess+0x64>

08008200 <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008200:	7803      	ldrb	r3, [r0, #0]
 8008202:	2b0b      	cmp	r3, #11
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008204:	bf01      	itttt	eq
 8008206:	f8d0 354c 	ldreq.w	r3, [r0, #1356]	; 0x54c
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800820a:	69db      	ldreq	r3, [r3, #28]
 800820c:	2234      	moveq	r2, #52	; 0x34
 800820e:	fb02 3101 	mlaeq	r1, r2, r1, r3
 8008212:	bf03      	ittte	eq
 8008214:	f891 0091 	ldrbeq.w	r0, [r1, #145]	; 0x91
  {
    res = 1U;
  }
  else
  {
    res = 0U;
 8008218:	fab0 f080 	clzeq	r0, r0
 800821c:	0940      	lsreq	r0, r0, #5
 800821e:	2000      	movne	r0, #0
  }

  return res;
}
 8008220:	4770      	bx	lr

08008222 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008222:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if (phost->gState == HOST_CLASS)
 8008224:	7803      	ldrb	r3, [r0, #0]
 8008226:	2b0b      	cmp	r3, #11
 8008228:	d111      	bne.n	800824e <USBH_MSC_GetLUNInfo+0x2c>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800822a:	f8d0 054c 	ldr.w	r0, [r0, #1356]	; 0x54c
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800822e:	2334      	movs	r3, #52	; 0x34
 8008230:	2490      	movs	r4, #144	; 0x90
 8008232:	fb13 4101 	smlabb	r1, r3, r1, r4
 8008236:	69c3      	ldr	r3, [r0, #28]
 8008238:	4419      	add	r1, r3
 800823a:	f101 0334 	add.w	r3, r1, #52	; 0x34
 800823e:	f851 0b04 	ldr.w	r0, [r1], #4
 8008242:	f842 0b04 	str.w	r0, [r2], #4
 8008246:	4299      	cmp	r1, r3
 8008248:	d1f9      	bne.n	800823e <USBH_MSC_GetLUNInfo+0x1c>
    return USBH_OK;
 800824a:	2000      	movs	r0, #0
  }
  else
  {
    return USBH_FAIL;
  }
}
 800824c:	bd10      	pop	{r4, pc}
    return USBH_FAIL;
 800824e:	2002      	movs	r0, #2
 8008250:	e7fc      	b.n	800824c <USBH_MSC_GetLUNInfo+0x2a>

08008252 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008252:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 8008256:	f890 5420 	ldrb.w	r5, [r0, #1056]	; 0x420
{
 800825a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800825e:	4604      	mov	r4, r0
 8008260:	460e      	mov	r6, r1
  if ((phost->device.is_connected == 0U) ||
 8008262:	b3bd      	cbz	r5, 80082d4 <USBH_MSC_Read+0x82>
      (phost->gState != HOST_CLASS) ||
 8008264:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 8008266:	2d0b      	cmp	r5, #11
 8008268:	d134      	bne.n	80082d4 <USBH_MSC_Read+0x82>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800826a:	f8d0 554c 	ldr.w	r5, [r0, #1356]	; 0x54c
 800826e:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8008270:	2734      	movs	r7, #52	; 0x34
 8008272:	fb07 5701 	mla	r7, r7, r1, r5
      (phost->gState != HOST_CLASS) ||
 8008276:	f897 c090 	ldrb.w	ip, [r7, #144]	; 0x90
 800827a:	f1bc 0f01 	cmp.w	ip, #1
 800827e:	d129      	bne.n	80082d4 <USBH_MSC_Read+0x82>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_READ;
 8008280:	f04f 0c06 	mov.w	ip, #6
 8008284:	f885 c00c 	strb.w	ip, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8008288:	f887 c090 	strb.w	ip, [r7, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 800828c:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8008290:	f8cd 8000 	str.w	r8, [sp]
 8008294:	f000 fab1 	bl	80087fa <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008298:	f242 7710 	movw	r7, #10000	; 0x2710
  timeout = phost->Timer;
 800829c:	f8d4 9594 	ldr.w	r9, [r4, #1428]	; 0x594
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80082a0:	fb07 f708 	mul.w	r7, r7, r8
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80082a4:	4631      	mov	r1, r6
 80082a6:	4620      	mov	r0, r4
 80082a8:	f7ff ff70 	bl	800818c <USBH_MSC_RdWrProcess>
 80082ac:	2801      	cmp	r0, #1
 80082ae:	d005      	beq.n	80082bc <USBH_MSC_Read+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80082b0:	2301      	movs	r3, #1
 80082b2:	732b      	strb	r3, [r5, #12]

  return USBH_OK;
 80082b4:	2000      	movs	r0, #0
}
 80082b6:	b003      	add	sp, #12
 80082b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80082bc:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
 80082c0:	eba3 0309 	sub.w	r3, r3, r9
 80082c4:	42bb      	cmp	r3, r7
 80082c6:	d803      	bhi.n	80082d0 <USBH_MSC_Read+0x7e>
 80082c8:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1e9      	bne.n	80082a4 <USBH_MSC_Read+0x52>
      MSC_Handle->state = MSC_IDLE;
 80082d0:	2301      	movs	r3, #1
 80082d2:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 80082d4:	2002      	movs	r0, #2
 80082d6:	e7ee      	b.n	80082b6 <USBH_MSC_Read+0x64>

080082d8 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80082d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 80082dc:	f890 5420 	ldrb.w	r5, [r0, #1056]	; 0x420
{
 80082e0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80082e4:	4604      	mov	r4, r0
 80082e6:	460e      	mov	r6, r1
  if ((phost->device.is_connected == 0U) ||
 80082e8:	b3bd      	cbz	r5, 800835a <USBH_MSC_Write+0x82>
      (phost->gState != HOST_CLASS) ||
 80082ea:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 80082ec:	2d0b      	cmp	r5, #11
 80082ee:	d134      	bne.n	800835a <USBH_MSC_Write+0x82>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80082f0:	f8d0 554c 	ldr.w	r5, [r0, #1356]	; 0x54c
 80082f4:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80082f6:	2734      	movs	r7, #52	; 0x34
 80082f8:	fb07 5701 	mla	r7, r7, r1, r5
      (phost->gState != HOST_CLASS) ||
 80082fc:	f897 c090 	ldrb.w	ip, [r7, #144]	; 0x90
 8008300:	f1bc 0f01 	cmp.w	ip, #1
 8008304:	d129      	bne.n	800835a <USBH_MSC_Write+0x82>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_WRITE;
 8008306:	f04f 0c07 	mov.w	ip, #7
 800830a:	f885 c00c 	strb.w	ip, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800830e:	f887 c090 	strb.w	ip, [r7, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8008312:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8008316:	f8cd 8000 	str.w	r8, [sp]
 800831a:	f000 fa2f 	bl	800877c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800831e:	f242 7710 	movw	r7, #10000	; 0x2710
  timeout = phost->Timer;
 8008322:	f8d4 9594 	ldr.w	r9, [r4, #1428]	; 0x594
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008326:	fb07 f708 	mul.w	r7, r7, r8
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800832a:	4631      	mov	r1, r6
 800832c:	4620      	mov	r0, r4
 800832e:	f7ff ff2d 	bl	800818c <USBH_MSC_RdWrProcess>
 8008332:	2801      	cmp	r0, #1
 8008334:	d005      	beq.n	8008342 <USBH_MSC_Write+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008336:	2301      	movs	r3, #1
 8008338:	732b      	strb	r3, [r5, #12]
  return USBH_OK;
 800833a:	2000      	movs	r0, #0
}
 800833c:	b003      	add	sp, #12
 800833e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008342:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
 8008346:	eba3 0309 	sub.w	r3, r3, r9
 800834a:	42bb      	cmp	r3, r7
 800834c:	d803      	bhi.n	8008356 <USBH_MSC_Write+0x7e>
 800834e:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1e9      	bne.n	800832a <USBH_MSC_Write+0x52>
      MSC_Handle->state = MSC_IDLE;
 8008356:	2301      	movs	r3, #1
 8008358:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 800835a:	2002      	movs	r0, #2
 800835c:	e7ee      	b.n	800833c <USBH_MSC_Write+0x64>

0800835e <USBH_MSC_BOT_REQ_Reset>:
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
 800835e:	f64f 7121 	movw	r1, #65313	; 0xff21
 8008362:	2200      	movs	r2, #0
 8008364:	e9c0 1204 	strd	r1, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, 0U, 0U);
 8008368:	4611      	mov	r1, r2
 800836a:	f000 bd24 	b.w	8008db6 <USBH_CtlReq>

0800836e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
 800836e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008372:	f64f 6ca1 	movw	ip, #65185	; 0xfea1
 8008376:	e9c0 c204 	strd	ip, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
 800837a:	2201      	movs	r2, #1
 800837c:	f000 bd1b 	b.w	8008db6 <USBH_CtlReq>

08008380 <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008380:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008384:	4905      	ldr	r1, [pc, #20]	; (800839c <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008386:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008388:	4a05      	ldr	r2, [pc, #20]	; (80083a0 <USBH_MSC_BOT_Init+0x20>)
 800838a:	e9c3 1215 	strd	r1, r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008394:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
}
 8008398:	2000      	movs	r0, #0
 800839a:	4770      	bx	lr
 800839c:	43425355 	.word	0x43425355
 80083a0:	20304050 	.word	0x20304050

080083a4 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80083a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80083a6:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
 80083aa:	69dc      	ldr	r4, [r3, #28]
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 80083ac:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
 80083b0:	1e6b      	subs	r3, r5, #1
{
 80083b2:	4606      	mov	r6, r0
  switch (MSC_Handle->hbot.state)
 80083b4:	2b0a      	cmp	r3, #10
 80083b6:	d82c      	bhi.n	8008412 <USBH_MSC_BOT_Process+0x6e>
 80083b8:	e8df f003 	tbb	[pc, r3]
 80083bc:	372f1506 	.word	0x372f1506
 80083c0:	89815e54 	.word	0x89815e54
 80083c4:	b6ab      	.short	0xb6ab
 80083c6:	ce          	.byte	0xce
 80083c7:	00          	.byte	0x00
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80083c8:	2302      	movs	r3, #2
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80083ca:	2201      	movs	r2, #1
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80083cc:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80083d0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80083d4:	f104 0154 	add.w	r1, r4, #84	; 0x54
 80083d8:	7963      	ldrb	r3, [r4, #5]
 80083da:	9200      	str	r2, [sp, #0]
 80083dc:	221f      	movs	r2, #31
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80083de:	4630      	mov	r0, r6
 80083e0:	f000 ff27 	bl	8009232 <USBH_BulkSendData>
 80083e4:	e016      	b.n	8008414 <USBH_MSC_BOT_Process+0x70>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80083e6:	7961      	ldrb	r1, [r4, #5]
 80083e8:	f7f8 fb6e 	bl	8000ac8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80083ec:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80083ee:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 80083f0:	d10a      	bne.n	8008408 <USBH_MSC_BOT_Process+0x64>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80083f2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80083f4:	b35b      	cbz	r3, 800844e <USBH_MSC_BOT_Process+0xaa>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80083f6:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 80083fa:	2b00      	cmp	r3, #0
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80083fc:	bfb4      	ite	lt
 80083fe:	2303      	movlt	r3, #3
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008400:	2305      	movge	r3, #5

    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
      if (status == USBH_OK)
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008402:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8008406:	e005      	b.n	8008414 <USBH_MSC_BOT_Process+0x70>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008408:	2802      	cmp	r0, #2
 800840a:	d152      	bne.n	80084b2 <USBH_MSC_BOT_Process+0x10e>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800840c:	2001      	movs	r0, #1
 800840e:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008412:	2501      	movs	r5, #1

    default:
      break;
  }
  return status;
}
 8008414:	4628      	mov	r0, r5
 8008416:	b002      	add	sp, #8
 8008418:	bd70      	pop	{r4, r5, r6, pc}
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800841a:	7923      	ldrb	r3, [r4, #4]
 800841c:	8962      	ldrh	r2, [r4, #10]
 800841e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8008422:	f000 ff1d 	bl	8009260 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8008426:	2304      	movs	r3, #4
 8008428:	e046      	b.n	80084b8 <USBH_MSC_BOT_Process+0x114>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800842a:	7921      	ldrb	r1, [r4, #4]
 800842c:	f7f8 fb4c 	bl	8000ac8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8008430:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008432:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8008434:	d112      	bne.n	800845c <USBH_MSC_BOT_Process+0xb8>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8008436:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008438:	8962      	ldrh	r2, [r4, #10]
 800843a:	4293      	cmp	r3, r2
 800843c:	d932      	bls.n	80084a4 <USBH_MSC_BOT_Process+0x100>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800843e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8008442:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008444:	4411      	add	r1, r2
 8008446:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800844a:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800844c:	b90b      	cbnz	r3, 8008452 <USBH_MSC_BOT_Process+0xae>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800844e:	2307      	movs	r3, #7
 8008450:	e7d7      	b.n	8008402 <USBH_MSC_BOT_Process+0x5e>
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008452:	7923      	ldrb	r3, [r4, #4]
 8008454:	4630      	mov	r0, r6
 8008456:	f000 ff03 	bl	8009260 <USBH_BulkReceiveData>
 800845a:	e7db      	b.n	8008414 <USBH_MSC_BOT_Process+0x70>
      else if (URB_Status == USBH_URB_STALL)
 800845c:	2805      	cmp	r0, #5
      else if (URB_Status == USBH_URB_STALL)
 800845e:	d1d8      	bne.n	8008412 <USBH_MSC_BOT_Process+0x6e>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008460:	2309      	movs	r3, #9
 8008462:	e029      	b.n	80084b8 <USBH_MSC_BOT_Process+0x114>
      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008464:	2501      	movs	r5, #1
 8008466:	7963      	ldrb	r3, [r4, #5]
 8008468:	8922      	ldrh	r2, [r4, #8]
 800846a:	9500      	str	r5, [sp, #0]
 800846c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8008470:	f000 fedf 	bl	8009232 <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008474:	2306      	movs	r3, #6
 8008476:	e7c4      	b.n	8008402 <USBH_MSC_BOT_Process+0x5e>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008478:	7961      	ldrb	r1, [r4, #5]
 800847a:	f7f8 fb25 	bl	8000ac8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800847e:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008480:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8008482:	d112      	bne.n	80084aa <USBH_MSC_BOT_Process+0x106>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008484:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008486:	8922      	ldrh	r2, [r4, #8]
 8008488:	4293      	cmp	r3, r2
 800848a:	d90b      	bls.n	80084a4 <USBH_MSC_BOT_Process+0x100>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800848c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008490:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008492:	4411      	add	r1, r2
 8008494:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008498:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0d7      	beq.n	800844e <USBH_MSC_BOT_Process+0xaa>
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800849e:	7963      	ldrb	r3, [r4, #5]
 80084a0:	9000      	str	r0, [sp, #0]
 80084a2:	e79c      	b.n	80083de <USBH_MSC_BOT_Process+0x3a>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80084a8:	e7d1      	b.n	800844e <USBH_MSC_BOT_Process+0xaa>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084aa:	2802      	cmp	r0, #2
 80084ac:	d101      	bne.n	80084b2 <USBH_MSC_BOT_Process+0x10e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80084ae:	2305      	movs	r3, #5
 80084b0:	e002      	b.n	80084b8 <USBH_MSC_BOT_Process+0x114>
      else if (URB_Status == USBH_URB_STALL)
 80084b2:	2d05      	cmp	r5, #5
 80084b4:	d1ad      	bne.n	8008412 <USBH_MSC_BOT_Process+0x6e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80084b6:	230a      	movs	r3, #10
 80084b8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80084bc:	e7a9      	b.n	8008412 <USBH_MSC_BOT_Process+0x6e>
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80084be:	7923      	ldrb	r3, [r4, #4]
 80084c0:	220d      	movs	r2, #13
 80084c2:	f104 0178 	add.w	r1, r4, #120	; 0x78
 80084c6:	f000 fecb 	bl	8009260 <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80084ca:	2308      	movs	r3, #8
 80084cc:	e7f4      	b.n	80084b8 <USBH_MSC_BOT_Process+0x114>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80084ce:	7921      	ldrb	r1, [r4, #4]
 80084d0:	f7f8 fafa 	bl	8000ac8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80084d4:	2801      	cmp	r0, #1
 80084d6:	d11a      	bne.n	800850e <USBH_MSC_BOT_Process+0x16a>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80084d8:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80084dc:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80084e0:	f8d6 354c 	ldr.w	r3, [r6, #1356]	; 0x54c
 80084e4:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80084e6:	4630      	mov	r0, r6
 80084e8:	7921      	ldrb	r1, [r4, #4]
 80084ea:	f7f8 fabe 	bl	8000a6a <USBH_LL_GetLastXferSize>
 80084ee:	280d      	cmp	r0, #13
 80084f0:	d13a      	bne.n	8008568 <USBH_MSC_BOT_Process+0x1c4>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 80084f2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80084f4:	4b1d      	ldr	r3, [pc, #116]	; (800856c <USBH_MSC_BOT_Process+0x1c8>)
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d136      	bne.n	8008568 <USBH_MSC_BOT_Process+0x1c4>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 80084fa:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80084fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084fe:	429a      	cmp	r2, r3
 8008500:	d132      	bne.n	8008568 <USBH_MSC_BOT_Process+0x1c4>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008502:	f894 5084 	ldrb.w	r5, [r4, #132]	; 0x84
          status = USBH_FAIL;
 8008506:	2d00      	cmp	r5, #0
 8008508:	bf18      	it	ne
 800850a:	2502      	movne	r5, #2
 800850c:	e782      	b.n	8008414 <USBH_MSC_BOT_Process+0x70>
      else if (URB_Status == USBH_URB_STALL)
 800850e:	2805      	cmp	r0, #5
 8008510:	e7a5      	b.n	800845e <USBH_MSC_BOT_Process+0xba>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008512:	79e1      	ldrb	r1, [r4, #7]
 8008514:	f000 fe49 	bl	80091aa <USBH_ClrFeature>
      if (error == USBH_OK)
 8008518:	b908      	cbnz	r0, 800851e <USBH_MSC_BOT_Process+0x17a>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800851a:	2307      	movs	r3, #7
 800851c:	e7cc      	b.n	80084b8 <USBH_MSC_BOT_Process+0x114>
      else if (error == USBH_UNRECOVERED_ERROR)
 800851e:	2804      	cmp	r0, #4
        if (error == USBH_UNRECOVERED_ERROR)
 8008520:	f47f af77 	bne.w	8008412 <USBH_MSC_BOT_Process+0x6e>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008524:	230b      	movs	r3, #11
 8008526:	e7c7      	b.n	80084b8 <USBH_MSC_BOT_Process+0x114>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008528:	79a1      	ldrb	r1, [r4, #6]
 800852a:	f000 fe3e 	bl	80091aa <USBH_ClrFeature>
      if (error == USBH_OK)
 800852e:	4605      	mov	r5, r0
 8008530:	b980      	cbnz	r0, 8008554 <USBH_MSC_BOT_Process+0x1b0>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8008532:	7961      	ldrb	r1, [r4, #5]
 8008534:	4630      	mov	r0, r6
 8008536:	f7f8 faeb 	bl	8000b10 <USBH_LL_GetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800853a:	f1c0 0001 	rsb	r0, r0, #1
 800853e:	7961      	ldrb	r1, [r4, #5]
 8008540:	b2c2      	uxtb	r2, r0
 8008542:	4630      	mov	r0, r6
 8008544:	f7f8 fad4 	bl	8000af0 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008548:	7921      	ldrb	r1, [r4, #4]
 800854a:	462a      	mov	r2, r5
 800854c:	4630      	mov	r0, r6
 800854e:	f7f8 facf 	bl	8000af0 <USBH_LL_SetToggle>
 8008552:	e785      	b.n	8008460 <USBH_MSC_BOT_Process+0xbc>
        if (error == USBH_UNRECOVERED_ERROR)
 8008554:	2804      	cmp	r0, #4
 8008556:	e7e3      	b.n	8008520 <USBH_MSC_BOT_Process+0x17c>
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8008558:	f7ff ff01 	bl	800835e <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
 800855c:	4605      	mov	r5, r0
 800855e:	2800      	cmp	r0, #0
 8008560:	f47f af58 	bne.w	8008414 <USBH_MSC_BOT_Process+0x70>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008564:	2301      	movs	r3, #1
 8008566:	e74c      	b.n	8008402 <USBH_MSC_BOT_Process+0x5e>
          status = USBH_FAIL;
 8008568:	2502      	movs	r5, #2
 800856a:	e753      	b.n	8008414 <USBH_MSC_BOT_Process+0x70>
 800856c:	53425355 	.word	0x53425355

08008570 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8008570:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008572:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
 8008576:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8008578:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800857c:	2d01      	cmp	r5, #1
 800857e:	d004      	beq.n	800858a <USBH_MSC_SCSI_TestUnitReady+0x1a>
 8008580:	2d02      	cmp	r5, #2
 8008582:	d014      	beq.n	80085ae <USBH_MSC_SCSI_TestUnitReady+0x3e>
 8008584:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 8008586:	4628      	mov	r0, r5
 8008588:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800858a:	2100      	movs	r1, #0
 800858c:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800858e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008592:	2210      	movs	r2, #16
 8008594:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8008598:	f002 fe14 	bl	800b1c4 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800859c:	230a      	movs	r3, #10
 800859e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80085a2:	2302      	movs	r3, #2
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80085a4:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80085a8:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      break;
 80085ac:	e7eb      	b.n	8008586 <USBH_MSC_SCSI_TestUnitReady+0x16>
}
 80085ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 80085b2:	f7ff bef7 	b.w	80083a4 <USBH_MSC_BOT_Process>

080085b6 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80085b6:	b570      	push	{r4, r5, r6, lr}
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80085b8:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
 80085bc:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80085be:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 80085c2:	2d01      	cmp	r5, #1
{
 80085c4:	4616      	mov	r6, r2
  switch (MSC_Handle->hbot.cmd_state)
 80085c6:	d004      	beq.n	80085d2 <USBH_MSC_SCSI_ReadCapacity+0x1c>
 80085c8:	2d02      	cmp	r5, #2
 80085ca:	d01b      	beq.n	8008604 <USBH_MSC_SCSI_ReadCapacity+0x4e>
 80085cc:	2501      	movs	r5, #1
    default:
      break;
  }

  return error;
}
 80085ce:	4628      	mov	r0, r5
 80085d0:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 80085d2:	2308      	movs	r3, #8
 80085d4:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80085d6:	2380      	movs	r3, #128	; 0x80
 80085d8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80085dc:	2210      	movs	r2, #16
 80085de:	2100      	movs	r1, #0
 80085e0:	f104 0063 	add.w	r0, r4, #99	; 0x63
 80085e4:	f002 fdee 	bl	800b1c4 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80085e8:	f242 530a 	movw	r3, #9482	; 0x250a
 80085ec:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80085f0:	2302      	movs	r3, #2
 80085f2:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80085f6:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80085fa:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80085fe:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8008602:	e7e4      	b.n	80085ce <USBH_MSC_SCSI_ReadCapacity+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008604:	f7ff fece 	bl	80083a4 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8008608:	4605      	mov	r5, r0
 800860a:	2800      	cmp	r0, #0
 800860c:	d1df      	bne.n	80085ce <USBH_MSC_SCSI_ReadCapacity+0x18>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800860e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008612:	6813      	ldr	r3, [r2, #0]
 8008614:	ba1b      	rev	r3, r3
 8008616:	6033      	str	r3, [r6, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8008618:	88d3      	ldrh	r3, [r2, #6]
 800861a:	ba5b      	rev16	r3, r3
 800861c:	80b3      	strh	r3, [r6, #4]
 800861e:	e7d6      	b.n	80085ce <USBH_MSC_SCSI_ReadCapacity+0x18>

08008620 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008620:	b570      	push	{r4, r5, r6, lr}
 8008622:	4616      	mov	r6, r2
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008624:	f8d0 254c 	ldr.w	r2, [r0, #1356]	; 0x54c
 8008628:	69d4      	ldr	r4, [r2, #28]

  switch (MSC_Handle->hbot.cmd_state)
 800862a:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800862e:	2d01      	cmp	r5, #1
{
 8008630:	460b      	mov	r3, r1
  switch (MSC_Handle->hbot.cmd_state)
 8008632:	d004      	beq.n	800863e <USBH_MSC_SCSI_Inquiry+0x1e>
 8008634:	2d02      	cmp	r5, #2
 8008636:	d023      	beq.n	8008680 <USBH_MSC_SCSI_Inquiry+0x60>
 8008638:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 800863a:	4628      	mov	r0, r5
 800863c:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800863e:	015b      	lsls	r3, r3, #5
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8008640:	2224      	movs	r2, #36	; 0x24
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008642:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008646:	f44f 5310 	mov.w	r3, #9216	; 0x2400
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800864a:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800864c:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008650:	2280      	movs	r2, #128	; 0x80
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008652:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008654:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008658:	f241 210a 	movw	r1, #4618	; 0x120a
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800865c:	2200      	movs	r2, #0
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800865e:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008662:	f104 0310 	add.w	r3, r4, #16
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8008666:	f8c4 2069 	str.w	r2, [r4, #105]	; 0x69
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800866a:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800866e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008672:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008676:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800867a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 800867e:	e7dc      	b.n	800863a <USBH_MSC_SCSI_Inquiry+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008680:	f7ff fe90 	bl	80083a4 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8008684:	4605      	mov	r5, r0
 8008686:	2800      	cmp	r0, #0
 8008688:	d1d7      	bne.n	800863a <USBH_MSC_SCSI_Inquiry+0x1a>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800868a:	4601      	mov	r1, r0
 800868c:	2222      	movs	r2, #34	; 0x22
 800868e:	4630      	mov	r0, r6
 8008690:	f002 fd98 	bl	800b1c4 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8008694:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	f003 031f 	and.w	r3, r3, #31
 800869e:	7073      	strb	r3, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80086a0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	095b      	lsrs	r3, r3, #5
 80086a8:	7033      	strb	r3, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80086aa:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80086ae:	785b      	ldrb	r3, [r3, #1]
 80086b0:	09db      	lsrs	r3, r3, #7
 80086b2:	70b3      	strb	r3, [r6, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80086b4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80086b8:	f852 3f08 	ldr.w	r3, [r2, #8]!
 80086bc:	f8c6 3003 	str.w	r3, [r6, #3]
 80086c0:	6853      	ldr	r3, [r2, #4]
 80086c2:	f8c6 3007 	str.w	r3, [r6, #7]
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80086c6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80086ca:	f106 010c 	add.w	r1, r6, #12
 80086ce:	f103 0210 	add.w	r2, r3, #16
 80086d2:	3320      	adds	r3, #32
 80086d4:	f852 0b04 	ldr.w	r0, [r2], #4
 80086d8:	f841 0b04 	str.w	r0, [r1], #4
 80086dc:	429a      	cmp	r2, r3
 80086de:	d1f9      	bne.n	80086d4 <USBH_MSC_SCSI_Inquiry+0xb4>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80086e0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	f8c6 301d 	str.w	r3, [r6, #29]
 80086ea:	e7a6      	b.n	800863a <USBH_MSC_SCSI_Inquiry+0x1a>

080086ec <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80086ec:	b570      	push	{r4, r5, r6, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80086ee:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
 80086f2:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 80086f4:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 80086f8:	2b01      	cmp	r3, #1
{
 80086fa:	460e      	mov	r6, r1
 80086fc:	4615      	mov	r5, r2
  switch (MSC_Handle->hbot.cmd_state)
 80086fe:	d004      	beq.n	800870a <USBH_MSC_SCSI_RequestSense+0x1e>
 8008700:	2b02      	cmp	r3, #2
 8008702:	d027      	beq.n	8008754 <USBH_MSC_SCSI_RequestSense+0x68>
 8008704:	2302      	movs	r3, #2
    default:
      break;
  }

  return error;
}
 8008706:	4618      	mov	r0, r3
 8008708:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800870a:	220e      	movs	r2, #14
 800870c:	65e2      	str	r2, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800870e:	2280      	movs	r2, #128	; 0x80
 8008710:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008714:	2200      	movs	r2, #0
 8008716:	f8c4 2067 	str.w	r2, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800871a:	f240 310a 	movw	r1, #778	; 0x30a
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800871e:	f8c4 206b 	str.w	r2, [r4, #107]	; 0x6b
 8008722:	f8c4 206f 	str.w	r2, [r4, #111]	; 0x6f
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008726:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800872a:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800872e:	2202      	movs	r2, #2
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008730:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008734:	0176      	lsls	r6, r6, #5
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008736:	f44f 6160 	mov.w	r1, #3584	; 0xe00
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800873a:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800873e:	f104 0210 	add.w	r2, r4, #16
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008742:	f884 6064 	strb.w	r6, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008746:	f8a4 1066 	strh.w	r1, [r4, #102]	; 0x66
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800874a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800874e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      break;
 8008752:	e7d8      	b.n	8008706 <USBH_MSC_SCSI_RequestSense+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008754:	f7ff fe26 	bl	80083a4 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8008758:	4603      	mov	r3, r0
 800875a:	2800      	cmp	r0, #0
 800875c:	d1d3      	bne.n	8008706 <USBH_MSC_SCSI_RequestSense+0x1a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800875e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008762:	7892      	ldrb	r2, [r2, #2]
 8008764:	f002 020f 	and.w	r2, r2, #15
 8008768:	702a      	strb	r2, [r5, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800876a:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800876e:	7b12      	ldrb	r2, [r2, #12]
 8008770:	706a      	strb	r2, [r5, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8008772:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8008776:	7b52      	ldrb	r2, [r2, #13]
 8008778:	70aa      	strb	r2, [r5, #2]
 800877a:	e7c4      	b.n	8008706 <USBH_MSC_SCSI_RequestSense+0x1a>

0800877c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800877c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008780:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008782:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 8008786:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008788:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 800878a:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
 800878e:	2e01      	cmp	r6, #1
{
 8008790:	4615      	mov	r5, r2
  switch (MSC_Handle->hbot.cmd_state)
 8008792:	d005      	beq.n	80087a0 <USBH_MSC_SCSI_Write+0x24>
 8008794:	2e02      	cmp	r6, #2
 8008796:	d02c      	beq.n	80087f2 <USBH_MSC_SCSI_Write+0x76>
 8008798:	2602      	movs	r6, #2
    default:
      break;
  }

  return error;
}
 800879a:	4630      	mov	r0, r6
 800879c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80087a0:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80087a4:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80087a6:	437b      	muls	r3, r7
 80087a8:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80087aa:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80087ae:	2210      	movs	r2, #16
 80087b0:	f104 0063 	add.w	r0, r4, #99	; 0x63
 80087b4:	f002 fd06 	bl	800b1c4 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80087b8:	f642 230a 	movw	r3, #10762	; 0x2a0a
 80087bc:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80087c0:	f3c5 6307 	ubfx	r3, r5, #24, #8
 80087c4:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80087c8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80087cc:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80087d0:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80087d4:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80087d8:	ba7f      	rev16	r7, r7
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80087da:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80087dc:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80087e0:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80087e4:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80087e8:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80087ec:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      break;
 80087f0:	e7d3      	b.n	800879a <USBH_MSC_SCSI_Write+0x1e>
}
 80087f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 80087f6:	f7ff bdd5 	b.w	80083a4 <USBH_MSC_BOT_Process>

080087fa <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80087fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087fe:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008800:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 8008804:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008806:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8008808:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
 800880c:	2e01      	cmp	r6, #1
{
 800880e:	4615      	mov	r5, r2
  switch (MSC_Handle->hbot.cmd_state)
 8008810:	d005      	beq.n	800881e <USBH_MSC_SCSI_Read+0x24>
 8008812:	2e02      	cmp	r6, #2
 8008814:	d02d      	beq.n	8008872 <USBH_MSC_SCSI_Read+0x78>
 8008816:	2602      	movs	r6, #2
    default:
      break;
  }

  return error;
}
 8008818:	4630      	mov	r0, r6
 800881a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800881e:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8008822:	437b      	muls	r3, r7
 8008824:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008826:	2380      	movs	r3, #128	; 0x80
 8008828:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800882c:	2210      	movs	r2, #16
 800882e:	2100      	movs	r1, #0
 8008830:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8008834:	f002 fcc6 	bl	800b1c4 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008838:	f642 030a 	movw	r3, #10250	; 0x280a
 800883c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8008840:	f3c5 6307 	ubfx	r3, r5, #24, #8
 8008844:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008848:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800884c:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008850:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8008854:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008858:	ba7f      	rev16	r7, r7
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800885a:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800885c:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008860:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008864:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008868:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800886c:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      break;
 8008870:	e7d2      	b.n	8008818 <USBH_MSC_SCSI_Read+0x1e>
}
 8008872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8008876:	f7ff bd95 	b.w	80083a4 <USBH_MSC_BOT_Process>

0800887a <DeInitStateMachine>:
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800887a:	f200 5354 	addw	r3, r0, #1364	; 0x554
 800887e:	f500 62b2 	add.w	r2, r0, #1424	; 0x590
  {
    phost->Pipes[i] = 0U;
 8008882:	2100      	movs	r1, #0
 8008884:	f843 1b04 	str.w	r1, [r3], #4
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008888:	4293      	cmp	r3, r2
 800888a:	d1fb      	bne.n	8008884 <DeInitStateMachine+0xa>
 800888c:	f500 7207 	add.w	r2, r0, #540	; 0x21c
 8008890:	f200 411c 	addw	r1, r0, #1052	; 0x41c
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	f802 3b01 	strb.w	r3, [r2], #1
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800889a:	428a      	cmp	r2, r1
 800889c:	d1fb      	bne.n	8008896 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
 800889e:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 80088a0:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
  phost->Timer = 0U;
 80088a2:	f8c0 3594 	str.w	r3, [r0, #1428]	; 0x594

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80088a6:	2340      	movs	r3, #64	; 0x40
  phost->RequestState = CMD_SEND;
 80088a8:	2201      	movs	r2, #1
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80088aa:	7183      	strb	r3, [r0, #6]
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80088ac:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->RequestState = CMD_SEND;
 80088b0:	7082      	strb	r2, [r0, #2]
  phost->Control.state = CTRL_SETUP;
 80088b2:	8302      	strh	r2, [r0, #24]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 80088b4:	f8c0 341c 	str.w	r3, [r0, #1052]	; 0x41c
  phost->device.speed = USBH_SPEED_FULL;
  phost->device.RstCnt = 0U;
  phost->device.EnumCnt = 0U;

  return USBH_OK;
}
 80088b8:	2000      	movs	r0, #0
 80088ba:	4770      	bx	lr

080088bc <USBH_Init>:
{
 80088bc:	b570      	push	{r4, r5, r6, lr}
 80088be:	460e      	mov	r6, r1
  if (phost == NULL)
 80088c0:	4604      	mov	r4, r0
 80088c2:	b1c0      	cbz	r0, 80088f6 <USBH_Init+0x3a>
  phost->pActiveClass = NULL;
 80088c4:	2500      	movs	r5, #0
  phost->id = id;
 80088c6:	f880 259c 	strb.w	r2, [r0, #1436]	; 0x59c
  phost->pActiveClass = NULL;
 80088ca:	f8c0 554c 	str.w	r5, [r0, #1356]	; 0x54c
  phost->ClassNumber = 0U;
 80088ce:	f8c0 5550 	str.w	r5, [r0, #1360]	; 0x550
  DeInitStateMachine(phost);
 80088d2:	f7ff ffd2 	bl	800887a <DeInitStateMachine>
  phost->device.is_connected = 0U;
 80088d6:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
  phost->device.PortEnabled = 0U;
 80088da:	f884 5423 	strb.w	r5, [r4, #1059]	; 0x423
  phost->device.is_disconnected = 0U;
 80088de:	f884 5421 	strb.w	r5, [r4, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
 80088e2:	f884 5422 	strb.w	r5, [r4, #1058]	; 0x422
  if (pUsrFunc != NULL)
 80088e6:	b10e      	cbz	r6, 80088ec <USBH_Init+0x30>
    phost->pUser = pUsrFunc;
 80088e8:	f8c4 65a4 	str.w	r6, [r4, #1444]	; 0x5a4
  USBH_LL_Init(phost);
 80088ec:	4620      	mov	r0, r4
 80088ee:	f7f8 f875 	bl	80009dc <USBH_LL_Init>
  return USBH_OK;
 80088f2:	2000      	movs	r0, #0
}
 80088f4:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 80088f6:	2002      	movs	r0, #2
 80088f8:	e7fc      	b.n	80088f4 <USBH_Init+0x38>

080088fa <USBH_RegisterClass>:
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 80088fa:	b149      	cbz	r1, 8008910 <USBH_RegisterClass+0x16>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80088fc:	f8d0 3550 	ldr.w	r3, [r0, #1360]	; 0x550
 8008900:	b933      	cbnz	r3, 8008910 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008902:	2201      	movs	r2, #1
 8008904:	f8c0 2550 	str.w	r2, [r0, #1360]	; 0x550
 8008908:	f8c0 1548 	str.w	r1, [r0, #1352]	; 0x548
      status = USBH_OK;
 800890c:	4618      	mov	r0, r3
 800890e:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008910:	2002      	movs	r0, #2
  }

  return status;
}
 8008912:	4770      	bx	lr

08008914 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008914:	f890 343c 	ldrb.w	r3, [r0, #1084]	; 0x43c
 8008918:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 800891a:	bf86      	itte	hi
 800891c:	f880 1424 	strbhi.w	r1, [r0, #1060]	; 0x424
  USBH_StatusTypeDef status = USBH_OK;
 8008920:	2000      	movhi	r0, #0
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008922:	2002      	movls	r0, #2
  }

  return status;
}
 8008924:	4770      	bx	lr

08008926 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008926:	b570      	push	{r4, r5, r6, lr}
 8008928:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800892a:	f890 6447 	ldrb.w	r6, [r0, #1095]	; 0x447
 800892e:	428e      	cmp	r6, r1
 8008930:	b2e5      	uxtb	r5, r4
 8008932:	d001      	beq.n	8008938 <USBH_FindInterface+0x12>
 8008934:	29ff      	cmp	r1, #255	; 0xff
 8008936:	d10b      	bne.n	8008950 <USBH_FindInterface+0x2a>
 8008938:	f890 6448 	ldrb.w	r6, [r0, #1096]	; 0x448
 800893c:	4296      	cmp	r6, r2
 800893e:	d001      	beq.n	8008944 <USBH_FindInterface+0x1e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008940:	2aff      	cmp	r2, #255	; 0xff
 8008942:	d105      	bne.n	8008950 <USBH_FindInterface+0x2a>
 8008944:	f890 6449 	ldrb.w	r6, [r0, #1097]	; 0x449
 8008948:	429e      	cmp	r6, r3
 800894a:	d007      	beq.n	800895c <USBH_FindInterface+0x36>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800894c:	2bff      	cmp	r3, #255	; 0xff
 800894e:	d005      	beq.n	800895c <USBH_FindInterface+0x36>
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008950:	3401      	adds	r4, #1
 8008952:	2c0a      	cmp	r4, #10
 8008954:	f100 001a 	add.w	r0, r0, #26
 8008958:	d1e7      	bne.n	800892a <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 800895a:	25ff      	movs	r5, #255	; 0xff
}
 800895c:	4628      	mov	r0, r5
 800895e:	bd70      	pop	{r4, r5, r6, pc}

08008960 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008960:	b510      	push	{r4, lr}
 8008962:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008964:	f7f8 f862 	bl	8000a2c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008968:	2101      	movs	r1, #1
 800896a:	4620      	mov	r0, r4
 800896c:	f7f8 f8b0 	bl	8000ad0 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8008970:	2000      	movs	r0, #0
 8008972:	bd10      	pop	{r4, pc}

08008974 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	b086      	sub	sp, #24
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008978:	2302      	movs	r3, #2
 800897a:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800897e:	f890 3421 	ldrb.w	r3, [r0, #1057]	; 0x421
 8008982:	2b01      	cmp	r3, #1
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008984:	bf04      	itt	eq
 8008986:	2303      	moveq	r3, #3
 8008988:	7003      	strbeq	r3, [r0, #0]
  }

  switch (phost->gState)
 800898a:	7803      	ldrb	r3, [r0, #0]
{
 800898c:	4604      	mov	r4, r0
 800898e:	2b0b      	cmp	r3, #11
 8008990:	d81d      	bhi.n	80089ce <USBH_Process+0x5a>
 8008992:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008996:	000c      	.short	0x000c
 8008998:	0041001f 	.word	0x0041001f
 800899c:	001c01b5 	.word	0x001c01b5
 80089a0:	01990076 	.word	0x01990076
 80089a4:	0162015a 	.word	0x0162015a
 80089a8:	0177016b 	.word	0x0177016b
 80089ac:	01ad      	.short	0x01ad
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80089ae:	f890 3420 	ldrb.w	r3, [r0, #1056]	; 0x420
 80089b2:	b163      	cbz	r3, 80089ce <USBH_Process+0x5a>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80089b4:	2301      	movs	r3, #1
 80089b6:	7003      	strb	r3, [r0, #0]
        USBH_Delay(200U);
 80089b8:	20c8      	movs	r0, #200	; 0xc8
 80089ba:	f7f8 f8b9 	bl	8000b30 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80089be:	4620      	mov	r0, r4
 80089c0:	f7f8 f84c 	bl	8000a5c <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80089c4:	2300      	movs	r3, #0
 80089c6:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
        phost->Timeout = 0U;
 80089ca:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
 80089ce:	2000      	movs	r0, #0
 80089d0:	b006      	add	sp, #24
 80089d2:	bd70      	pop	{r4, r5, r6, pc}
      if (phost->device.PortEnabled == 1U)
 80089d4:	f890 3423 	ldrb.w	r3, [r0, #1059]	; 0x423
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d105      	bne.n	80089e8 <USBH_Process+0x74>
        phost->device.RstCnt = 0U;
 80089dc:	2300      	movs	r3, #0
 80089de:	f880 341f 	strb.w	r3, [r0, #1055]	; 0x41f
        phost->gState = HOST_DEV_ATTACHED;
 80089e2:	2302      	movs	r3, #2
          phost->gState = HOST_INPUT;
 80089e4:	7023      	strb	r3, [r4, #0]
 80089e6:	e7f2      	b.n	80089ce <USBH_Process+0x5a>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80089e8:	f8d0 3598 	ldr.w	r3, [r0, #1432]	; 0x598
 80089ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089f0:	d90b      	bls.n	8008a0a <USBH_Process+0x96>
          phost->device.RstCnt++;
 80089f2:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 80089f6:	3301      	adds	r3, #1
 80089f8:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
 80089fa:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
 80089fc:	f880 341f 	strb.w	r3, [r0, #1055]	; 0x41f
          if (phost->device.RstCnt > 3U)
 8008a00:	d901      	bls.n	8008a06 <USBH_Process+0x92>
        phost->gState = HOST_ABORT_STATE;
 8008a02:	230d      	movs	r3, #13
 8008a04:	e7ee      	b.n	80089e4 <USBH_Process+0x70>
            phost->gState = HOST_IDLE;
 8008a06:	2300      	movs	r3, #0
 8008a08:	e7ec      	b.n	80089e4 <USBH_Process+0x70>
          phost->Timeout += 10U;
 8008a0a:	330a      	adds	r3, #10
 8008a0c:	f8c0 3598 	str.w	r3, [r0, #1432]	; 0x598
          USBH_Delay(10U);
 8008a10:	200a      	movs	r0, #10
 8008a12:	f7f8 f88d 	bl	8000b30 <USBH_Delay>
 8008a16:	e7da      	b.n	80089ce <USBH_Process+0x5a>
      if (phost->pUser != NULL)
 8008a18:	f8d0 35a4 	ldr.w	r3, [r0, #1444]	; 0x5a4
 8008a1c:	b10b      	cbz	r3, 8008a22 <USBH_Process+0xae>
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008a1e:	2104      	movs	r1, #4
 8008a20:	4798      	blx	r3
      USBH_Delay(100U);
 8008a22:	2064      	movs	r0, #100	; 0x64
 8008a24:	f7f8 f884 	bl	8000b30 <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f7f8 f80d 	bl	8000a48 <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
 8008a2e:	2305      	movs	r3, #5
 8008a30:	7023      	strb	r3, [r4, #0]
      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008a32:	f884 041d 	strb.w	r0, [r4, #1053]	; 0x41d
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008a36:	2100      	movs	r1, #0
 8008a38:	4620      	mov	r0, r4
 8008a3a:	f000 fc35 	bl	80092a8 <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008a3e:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008a40:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008a42:	4620      	mov	r0, r4
 8008a44:	f000 fc30 	bl	80092a8 <USBH_AllocPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008a48:	79a3      	ldrb	r3, [r4, #6]
 8008a4a:	9302      	str	r3, [sp, #8]
 8008a4c:	2500      	movs	r5, #0
 8008a4e:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008a52:	7120      	strb	r0, [r4, #4]
 8008a54:	4601      	mov	r1, r0
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	9501      	str	r5, [sp, #4]
 8008a5a:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
 8008a5e:	2280      	movs	r2, #128	; 0x80
 8008a60:	4620      	mov	r0, r4
 8008a62:	f000 fc0d 	bl	8009280 <USBH_OpenPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008a66:	79a3      	ldrb	r3, [r4, #6]
 8008a68:	7961      	ldrb	r1, [r4, #5]
 8008a6a:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8008a6e:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
 8008a72:	9300      	str	r3, [sp, #0]
 8008a74:	462a      	mov	r2, r5
 8008a76:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f000 fc00 	bl	8009280 <USBH_OpenPipe>
      break;
 8008a80:	e7a5      	b.n	80089ce <USBH_Process+0x5a>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
 8008a82:	7845      	ldrb	r5, [r0, #1]
 8008a84:	2d07      	cmp	r5, #7
 8008a86:	d82b      	bhi.n	8008ae0 <USBH_Process+0x16c>
 8008a88:	e8df f005 	tbb	[pc, r5]
 8008a8c:	8d714104 	.word	0x8d714104
 8008a90:	cdbeaf93 	.word	0xcdbeaf93
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008a94:	2108      	movs	r1, #8
 8008a96:	f000 fa65 	bl	8008f64 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8008a9a:	4606      	mov	r6, r0
 8008a9c:	b9f0      	cbnz	r0, 8008adc <USBH_Process+0x168>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008a9e:	f894 342d 	ldrb.w	r3, [r4, #1069]	; 0x42d
 8008aa2:	71a3      	strb	r3, [r4, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008aa4:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8008aa8:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
 8008aac:	9300      	str	r3, [sp, #0]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008aae:	2501      	movs	r5, #1
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ab0:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008ab4:	7065      	strb	r5, [r4, #1]
        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008ab6:	7921      	ldrb	r1, [r4, #4]
 8008ab8:	2280      	movs	r2, #128	; 0x80
 8008aba:	4620      	mov	r0, r4
 8008abc:	f000 fbe0 	bl	8009280 <USBH_OpenPipe>
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ac0:	79a3      	ldrb	r3, [r4, #6]
 8008ac2:	7961      	ldrb	r1, [r4, #5]
 8008ac4:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8008ac8:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	4632      	mov	r2, r6
 8008ad0:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	f000 fbd3 	bl	8009280 <USBH_OpenPipe>
 8008ada:	e01e      	b.n	8008b1a <USBH_Process+0x1a6>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008adc:	2803      	cmp	r0, #3
 8008ade:	d001      	beq.n	8008ae4 <USBH_Process+0x170>
  switch (phost->EnumState)
 8008ae0:	2501      	movs	r5, #1
 8008ae2:	e01a      	b.n	8008b1a <USBH_Process+0x1a6>
        phost->device.EnumCnt++;
 8008ae4:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 8008ae8:	3301      	adds	r3, #1
 8008aea:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 8008aec:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 8008aee:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 8008af2:	d901      	bls.n	8008af8 <USBH_Process+0x184>
        phost->device.EnumCnt++;
        if (phost->device.EnumCnt > 3U)
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 8008af4:	230d      	movs	r3, #13
 8008af6:	e008      	b.n	8008b0a <USBH_Process+0x196>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008af8:	7961      	ldrb	r1, [r4, #5]
 8008afa:	4620      	mov	r0, r4
 8008afc:	f000 fbec 	bl	80092d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b00:	7921      	ldrb	r1, [r4, #4]
 8008b02:	4620      	mov	r0, r4
 8008b04:	f000 fbe8 	bl	80092d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008b08:	2300      	movs	r3, #0
          USBH_FreePipe(phost, phost->Control.pipe_out);
          USBH_FreePipe(phost, phost->Control.pipe_in);

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
          phost->gState = HOST_IDLE;
 8008b0a:	7023      	strb	r3, [r4, #0]
 8008b0c:	e7e8      	b.n	8008ae0 <USBH_Process+0x16c>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008b0e:	2112      	movs	r1, #18
 8008b10:	f000 fa28 	bl	8008f64 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8008b14:	b998      	cbnz	r0, 8008b3e <USBH_Process+0x1ca>
        phost->EnumState = ENUM_SET_ADDR;
 8008b16:	2302      	movs	r3, #2
 8008b18:	7063      	strb	r3, [r4, #1]
      status = USBH_HandleEnum(phost);
 8008b1a:	f88d 5017 	strb.w	r5, [sp, #23]
      if (status == USBH_OK)
 8008b1e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008b22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f47f af51 	bne.w	80089ce <USBH_Process+0x5a>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008b2c:	f894 3437 	ldrb.w	r3, [r4, #1079]	; 0x437
        phost->device.current_interface = 0U;
 8008b30:	f884 2424 	strb.w	r2, [r4, #1060]	; 0x424
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	f040 8086 	bne.w	8008c46 <USBH_Process+0x2d2>
        phost->gState = HOST_SET_CONFIGURATION;
 8008b3a:	2308      	movs	r3, #8
 8008b3c:	e752      	b.n	80089e4 <USBH_Process+0x70>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b3e:	2803      	cmp	r0, #3
 8008b40:	d1ce      	bne.n	8008ae0 <USBH_Process+0x16c>
        phost->device.EnumCnt++;
 8008b42:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 8008b46:	3301      	adds	r3, #1
 8008b48:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 8008b4a:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 8008b4c:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 8008b50:	d902      	bls.n	8008b58 <USBH_Process+0x1e4>
          phost->gState = HOST_ABORT_STATE;
 8008b52:	230d      	movs	r3, #13
          phost->gState = HOST_IDLE;
 8008b54:	7023      	strb	r3, [r4, #0]
 8008b56:	e7e0      	b.n	8008b1a <USBH_Process+0x1a6>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b58:	7961      	ldrb	r1, [r4, #5]
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f000 fbbc 	bl	80092d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b60:	7921      	ldrb	r1, [r4, #4]
 8008b62:	4620      	mov	r0, r4
 8008b64:	f000 fbb8 	bl	80092d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	7063      	strb	r3, [r4, #1]
 8008b6c:	e7f2      	b.n	8008b54 <USBH_Process+0x1e0>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008b6e:	2101      	movs	r1, #1
 8008b70:	f000 faf4 	bl	800915c <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 8008b74:	4606      	mov	r6, r0
 8008b76:	b978      	cbnz	r0, 8008b98 <USBH_Process+0x224>
        USBH_Delay(2U);
 8008b78:	2002      	movs	r0, #2
 8008b7a:	f7f7 ffd9 	bl	8000b30 <USBH_Delay>
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	7063      	strb	r3, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008b82:	79a3      	ldrb	r3, [r4, #6]
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008b84:	2501      	movs	r5, #1
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008b86:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8008b8a:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
 8008b8e:	9300      	str	r3, [sp, #0]
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008b90:	f884 541c 	strb.w	r5, [r4, #1052]	; 0x41c
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008b94:	462b      	mov	r3, r5
 8008b96:	e78e      	b.n	8008ab6 <USBH_Process+0x142>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b98:	2803      	cmp	r0, #3
 8008b9a:	d1a1      	bne.n	8008ae0 <USBH_Process+0x16c>
        phost->gState = HOST_ABORT_STATE;
 8008b9c:	230d      	movs	r3, #13
 8008b9e:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 8008ba0:	2300      	movs	r3, #0
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008ba2:	7063      	strb	r3, [r4, #1]
 8008ba4:	e79c      	b.n	8008ae0 <USBH_Process+0x16c>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008ba6:	2109      	movs	r1, #9
 8008ba8:	f000 fa24 	bl	8008ff4 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8008bac:	b940      	cbnz	r0, 8008bc0 <USBH_Process+0x24c>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008bae:	2304      	movs	r3, #4
 8008bb0:	e7f7      	b.n	8008ba2 <USBH_Process+0x22e>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008bb2:	f8b0 143a 	ldrh.w	r1, [r0, #1082]	; 0x43a
 8008bb6:	f000 fa1d 	bl	8008ff4 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8008bba:	b908      	cbnz	r0, 8008bc0 <USBH_Process+0x24c>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008bbc:	2305      	movs	r3, #5
 8008bbe:	e7f0      	b.n	8008ba2 <USBH_Process+0x22e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008bc0:	2803      	cmp	r0, #3
 8008bc2:	d18d      	bne.n	8008ae0 <USBH_Process+0x16c>
        phost->device.EnumCnt++;
 8008bc4:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 8008bc8:	3301      	adds	r3, #1
 8008bca:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 8008bcc:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 8008bce:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 8008bd2:	d88f      	bhi.n	8008af4 <USBH_Process+0x180>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008bd4:	7961      	ldrb	r1, [r4, #5]
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f000 fb7e 	bl	80092d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008bdc:	7921      	ldrb	r1, [r4, #4]
 8008bde:	4620      	mov	r0, r4
 8008be0:	f000 fb7a 	bl	80092d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008be4:	2300      	movs	r3, #0
 8008be6:	7063      	strb	r3, [r4, #1]
 8008be8:	e78f      	b.n	8008b0a <USBH_Process+0x196>
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008bea:	f890 1434 	ldrb.w	r1, [r0, #1076]	; 0x434
 8008bee:	b129      	cbz	r1, 8008bfc <USBH_Process+0x288>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008bf0:	23ff      	movs	r3, #255	; 0xff
 8008bf2:	f500 7207 	add.w	r2, r0, #540	; 0x21c
 8008bf6:	f000 fa8a 	bl	800910e <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8008bfa:	b908      	cbnz	r0, 8008c00 <USBH_Process+0x28c>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008bfc:	2306      	movs	r3, #6
 8008bfe:	e7d0      	b.n	8008ba2 <USBH_Process+0x22e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c00:	2803      	cmp	r0, #3
 8008c02:	f47f af6d 	bne.w	8008ae0 <USBH_Process+0x16c>
 8008c06:	e7f9      	b.n	8008bfc <USBH_Process+0x288>
      if (phost->device.DevDesc.iProduct != 0U)
 8008c08:	f890 1435 	ldrb.w	r1, [r0, #1077]	; 0x435
 8008c0c:	b129      	cbz	r1, 8008c1a <USBH_Process+0x2a6>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008c0e:	23ff      	movs	r3, #255	; 0xff
 8008c10:	f500 7207 	add.w	r2, r0, #540	; 0x21c
 8008c14:	f000 fa7b 	bl	800910e <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8008c18:	b908      	cbnz	r0, 8008c1e <USBH_Process+0x2aa>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008c1a:	2307      	movs	r3, #7
 8008c1c:	e7c1      	b.n	8008ba2 <USBH_Process+0x22e>
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c1e:	2803      	cmp	r0, #3
 8008c20:	f47f af5e 	bne.w	8008ae0 <USBH_Process+0x16c>
 8008c24:	e7f9      	b.n	8008c1a <USBH_Process+0x2a6>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008c26:	f890 1436 	ldrb.w	r1, [r0, #1078]	; 0x436
 8008c2a:	b909      	cbnz	r1, 8008c30 <USBH_Process+0x2bc>
        }
      }
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
 8008c2c:	2500      	movs	r5, #0
 8008c2e:	e774      	b.n	8008b1a <USBH_Process+0x1a6>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008c30:	23ff      	movs	r3, #255	; 0xff
 8008c32:	f500 7207 	add.w	r2, r0, #540	; 0x21c
 8008c36:	f000 fa6a 	bl	800910e <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	d0f6      	beq.n	8008c2c <USBH_Process+0x2b8>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008c3e:	1ec5      	subs	r5, r0, #3
 8008c40:	bf18      	it	ne
 8008c42:	2501      	movne	r5, #1
 8008c44:	e769      	b.n	8008b1a <USBH_Process+0x1a6>
          phost->gState = HOST_INPUT;
 8008c46:	2307      	movs	r3, #7
 8008c48:	e6cc      	b.n	80089e4 <USBH_Process+0x70>
      if (phost->pUser != NULL)
 8008c4a:	f8d0 35a4 	ldr.w	r3, [r0, #1444]	; 0x5a4
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f43f aebd 	beq.w	80089ce <USBH_Process+0x5a>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008c54:	2101      	movs	r1, #1
 8008c56:	4798      	blx	r3
 8008c58:	e76f      	b.n	8008b3a <USBH_Process+0x1c6>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008c5a:	f890 143d 	ldrb.w	r1, [r0, #1085]	; 0x43d
 8008c5e:	f000 fa8a 	bl	8009176 <USBH_SetCfg>
 8008c62:	2800      	cmp	r0, #0
 8008c64:	f47f aeb3 	bne.w	80089ce <USBH_Process+0x5a>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008c68:	2309      	movs	r3, #9
 8008c6a:	e6bb      	b.n	80089e4 <USBH_Process+0x70>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008c6c:	f890 343f 	ldrb.w	r3, [r0, #1087]	; 0x43f
 8008c70:	069b      	lsls	r3, r3, #26
 8008c72:	d505      	bpl.n	8008c80 <USBH_Process+0x30c>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008c74:	2101      	movs	r1, #1
 8008c76:	f000 fa8b 	bl	8009190 <USBH_SetFeature>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	f47f aea7 	bne.w	80089ce <USBH_Process+0x5a>
        phost->gState = HOST_CHECK_CLASS;
 8008c80:	230a      	movs	r3, #10
 8008c82:	e6af      	b.n	80089e4 <USBH_Process+0x70>
      if (phost->ClassNumber == 0U)
 8008c84:	f8d0 3550 	ldr.w	r3, [r0, #1360]	; 0x550
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f43f aea0 	beq.w	80089ce <USBH_Process+0x5a>
        phost->pActiveClass = NULL;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	f8c0 354c 	str.w	r3, [r0, #1356]	; 0x54c
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008c94:	f8d0 3548 	ldr.w	r3, [r0, #1352]	; 0x548
 8008c98:	f890 2447 	ldrb.w	r2, [r0, #1095]	; 0x447
 8008c9c:	7919      	ldrb	r1, [r3, #4]
            phost->pActiveClass = phost->pClass[idx];
 8008c9e:	4291      	cmp	r1, r2
 8008ca0:	bf18      	it	ne
 8008ca2:	2300      	movne	r3, #0
 8008ca4:	f8c0 354c 	str.w	r3, [r0, #1356]	; 0x54c
        if (phost->pActiveClass != NULL)
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f43f aeaa 	beq.w	8008a02 <USBH_Process+0x8e>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	4798      	blx	r3
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	f47f aea5 	bne.w	8008a02 <USBH_Process+0x8e>
            phost->gState = HOST_CLASS_REQUEST;
 8008cb8:	2306      	movs	r3, #6
 8008cba:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008cbc:	2103      	movs	r1, #3
 8008cbe:	f8d4 35a4 	ldr.w	r3, [r4, #1444]	; 0x5a4
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	4798      	blx	r3
 8008cc6:	e682      	b.n	80089ce <USBH_Process+0x5a>
      if (phost->pActiveClass != NULL)
 8008cc8:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f43f ae98 	beq.w	8008a02 <USBH_Process+0x8e>
        status = phost->pActiveClass->Requests(phost);
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	4798      	blx	r3
 8008cd6:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 8008cda:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008cde:	b90b      	cbnz	r3, 8008ce4 <USBH_Process+0x370>
          phost->gState = HOST_CLASS;
 8008ce0:	230b      	movs	r3, #11
 8008ce2:	e67f      	b.n	80089e4 <USBH_Process+0x70>
        else if (status == USBH_FAIL)
 8008ce4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	f47f ae70 	bne.w	80089ce <USBH_Process+0x5a>
 8008cee:	e688      	b.n	8008a02 <USBH_Process+0x8e>
      if (phost->pActiveClass != NULL)
 8008cf0:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f43f ae6a 	beq.w	80089ce <USBH_Process+0x5a>
        phost->pActiveClass->BgndProcess(phost);
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	4798      	blx	r3
 8008cfe:	e666      	b.n	80089ce <USBH_Process+0x5a>
      phost->device.is_disconnected = 0U;
 8008d00:	2500      	movs	r5, #0
 8008d02:	f880 5421 	strb.w	r5, [r0, #1057]	; 0x421
      DeInitStateMachine(phost);
 8008d06:	f7ff fdb8 	bl	800887a <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 8008d0a:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 8008d0e:	b123      	cbz	r3, 8008d1a <USBH_Process+0x3a6>
        phost->pActiveClass->DeInit(phost);
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	4620      	mov	r0, r4
 8008d14:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008d16:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
      if (phost->pUser != NULL)
 8008d1a:	f8d4 35a4 	ldr.w	r3, [r4, #1444]	; 0x5a4
 8008d1e:	b113      	cbz	r3, 8008d26 <USBH_Process+0x3b2>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008d20:	2105      	movs	r1, #5
 8008d22:	4620      	mov	r0, r4
 8008d24:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 8008d26:	f894 3422 	ldrb.w	r3, [r4, #1058]	; 0x422
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d106      	bne.n	8008d3c <USBH_Process+0x3c8>
        phost->device.is_ReEnumerated = 0U;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
        USBH_Start(phost);
 8008d34:	4620      	mov	r0, r4
 8008d36:	f7ff fe13 	bl	8008960 <USBH_Start>
 8008d3a:	e648      	b.n	80089ce <USBH_Process+0x5a>
        USBH_LL_Start(phost);
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	f7f7 fe75 	bl	8000a2c <USBH_LL_Start>
 8008d42:	e644      	b.n	80089ce <USBH_Process+0x5a>

08008d44 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 8008d44:	f8c0 1594 	str.w	r1, [r0, #1428]	; 0x594
}
 8008d48:	4770      	bx	lr

08008d4a <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
 8008d4a:	f8d0 2594 	ldr.w	r2, [r0, #1428]	; 0x594
 8008d4e:	3201      	adds	r2, #1
 8008d50:	f8c0 2594 	str.w	r2, [r0, #1428]	; 0x594
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008d54:	7802      	ldrb	r2, [r0, #0]
 8008d56:	2a0b      	cmp	r2, #11
 8008d58:	d104      	bne.n	8008d64 <USBH_LL_IncTimer+0x1a>
 8008d5a:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
 8008d5e:	b10b      	cbz	r3, 8008d64 <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008d60:	699b      	ldr	r3, [r3, #24]
 8008d62:	4718      	bx	r3
}
 8008d64:	4770      	bx	lr

08008d66 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8008d66:	2301      	movs	r3, #1
 8008d68:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
 8008d6c:	4770      	bx	lr

08008d6e <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423

  return;
}
 8008d74:	4770      	bx	lr

08008d76 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
  phost->device.is_connected = 1U;
 8008d76:	2301      	movs	r3, #1
 8008d78:	f880 3420 	strb.w	r3, [r0, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
 8008d82:	f880 3422 	strb.w	r3, [r0, #1058]	; 0x422
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	4770      	bx	lr

08008d8a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008d8a:	b538      	push	{r3, r4, r5, lr}
 8008d8c:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008d8e:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
 8008d90:	2500      	movs	r5, #0
  phost->device.is_disconnected = 1U;
 8008d92:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.PortEnabled = 0U;
 8008d96:	f880 5423 	strb.w	r5, [r0, #1059]	; 0x423
  phost->device.is_connected = 0U;
 8008d9a:	f880 5420 	strb.w	r5, [r0, #1056]	; 0x420

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008d9e:	f7f7 fe4c 	bl	8000a3a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008da2:	7921      	ldrb	r1, [r4, #4]
 8008da4:	4620      	mov	r0, r4
 8008da6:	f000 fa97 	bl	80092d8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008daa:	7961      	ldrb	r1, [r4, #5]
 8008dac:	4620      	mov	r0, r4
 8008dae:	f000 fa93 	bl	80092d8 <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8008db2:	4628      	mov	r0, r5
 8008db4:	bd38      	pop	{r3, r4, r5, pc}

08008db6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008db6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8008db8:	7885      	ldrb	r5, [r0, #2]
 8008dba:	2d01      	cmp	r5, #1
{
 8008dbc:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8008dbe:	d003      	beq.n	8008dc8 <USBH_CtlReq+0x12>
 8008dc0:	2d02      	cmp	r5, #2
 8008dc2:	d007      	beq.n	8008dd4 <USBH_CtlReq+0x1e>
            phost->Control.state = CTRL_STATUS_OUT;
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8008dc4:	2501      	movs	r5, #1
  return status;
 8008dc6:	e019      	b.n	8008dfc <USBH_CtlReq+0x46>
      phost->Control.buff = buff;
 8008dc8:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
 8008dca:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
 8008dcc:	7605      	strb	r5, [r0, #24]
      phost->RequestState = CMD_WAIT;
 8008dce:	2302      	movs	r3, #2
        phost->RequestState = CMD_SEND;
 8008dd0:	70a3      	strb	r3, [r4, #2]
 8008dd2:	e013      	b.n	8008dfc <USBH_CtlReq+0x46>
  switch (phost->Control.state)
 8008dd4:	7e06      	ldrb	r6, [r0, #24]
 8008dd6:	1e73      	subs	r3, r6, #1
 8008dd8:	2b0a      	cmp	r3, #10
 8008dda:	d8f3      	bhi.n	8008dc4 <USBH_CtlReq+0xe>
 8008ddc:	e8df f003 	tbb	[pc, r3]
 8008de0:	392f1106 	.word	0x392f1106
 8008de4:	675d4e42 	.word	0x675d4e42
 8008de8:	8478      	.short	0x8478
 8008dea:	8c          	.byte	0x8c
 8008deb:	00          	.byte	0x00
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008dec:	7942      	ldrb	r2, [r0, #5]
 8008dee:	f100 0110 	add.w	r1, r0, #16
 8008df2:	f000 f9e7 	bl	80091c4 <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 8008df6:	2302      	movs	r3, #2
 8008df8:	7623      	strb	r3, [r4, #24]
 8008dfa:	4635      	mov	r5, r6
}
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	b002      	add	sp, #8
 8008e00:	bd70      	pop	{r4, r5, r6, pc}
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e02:	7941      	ldrb	r1, [r0, #5]
 8008e04:	f7f7 fe60 	bl	8000ac8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8008e08:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e0a:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8008e0c:	d111      	bne.n	8008e32 <USBH_CtlReq+0x7c>
        if (phost->Control.setup.b.wLength.w != 0U)
 8008e0e:	8ae2      	ldrh	r2, [r4, #22]
 8008e10:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8008e14:	b13a      	cbz	r2, 8008e26 <USBH_CtlReq+0x70>
          if (direction == USB_D2H)
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	da02      	bge.n	8008e20 <USBH_CtlReq+0x6a>
            phost->Control.state = CTRL_DATA_IN;
 8008e1a:	2303      	movs	r3, #3
        phost->Control.state = CTRL_IDLE;
 8008e1c:	7623      	strb	r3, [r4, #24]
 8008e1e:	e7ed      	b.n	8008dfc <USBH_CtlReq+0x46>
            phost->Control.state = CTRL_DATA_OUT;
 8008e20:	2305      	movs	r3, #5
    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);

      phost->Control.timer = (uint16_t)phost->Timer;
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008e22:	7623      	strb	r3, [r4, #24]
      else if (status == USBH_FAIL)
 8008e24:	e7ce      	b.n	8008dc4 <USBH_CtlReq+0xe>
          if (direction == USB_D2H)
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	da01      	bge.n	8008e2e <USBH_CtlReq+0x78>
        phost->Control.state = CTRL_STATUS_OUT;
 8008e2a:	2309      	movs	r3, #9
 8008e2c:	e7f9      	b.n	8008e22 <USBH_CtlReq+0x6c>
            phost->Control.state = CTRL_STATUS_IN;
 8008e2e:	2307      	movs	r3, #7
 8008e30:	e7f7      	b.n	8008e22 <USBH_CtlReq+0x6c>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008e32:	2804      	cmp	r0, #4
 8008e34:	d001      	beq.n	8008e3a <USBH_CtlReq+0x84>
 8008e36:	2802      	cmp	r0, #2
 8008e38:	d1c4      	bne.n	8008dc4 <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
 8008e3a:	230b      	movs	r3, #11
 8008e3c:	e7f1      	b.n	8008e22 <USBH_CtlReq+0x6c>
      phost->Control.timer = (uint16_t)phost->Timer;
 8008e3e:	f8d0 3594 	ldr.w	r3, [r0, #1428]	; 0x594
 8008e42:	81c3      	strh	r3, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008e44:	8982      	ldrh	r2, [r0, #12]
 8008e46:	7903      	ldrb	r3, [r0, #4]
 8008e48:	6881      	ldr	r1, [r0, #8]
 8008e4a:	f000 f9e2 	bl	8009212 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008e4e:	2304      	movs	r3, #4
 8008e50:	e7e7      	b.n	8008e22 <USBH_CtlReq+0x6c>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e52:	7901      	ldrb	r1, [r0, #4]
 8008e54:	f7f7 fe38 	bl	8000ac8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8008e58:	2801      	cmp	r0, #1
 8008e5a:	d0e6      	beq.n	8008e2a <USBH_CtlReq+0x74>
      if (URB_Status == USBH_URB_STALL)
 8008e5c:	2805      	cmp	r0, #5
 8008e5e:	d035      	beq.n	8008ecc <USBH_CtlReq+0x116>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 8008e60:	2804      	cmp	r0, #4
 8008e62:	e7e9      	b.n	8008e38 <USBH_CtlReq+0x82>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008e64:	2501      	movs	r5, #1
 8008e66:	9500      	str	r5, [sp, #0]
 8008e68:	7943      	ldrb	r3, [r0, #5]
 8008e6a:	8982      	ldrh	r2, [r0, #12]
 8008e6c:	6881      	ldr	r1, [r0, #8]
 8008e6e:	f000 f9b9 	bl	80091e4 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8008e72:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
 8008e76:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008e78:	2306      	movs	r3, #6
 8008e7a:	e7cf      	b.n	8008e1c <USBH_CtlReq+0x66>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e7c:	7941      	ldrb	r1, [r0, #5]
 8008e7e:	f7f7 fe23 	bl	8000ac8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8008e82:	2801      	cmp	r0, #1
 8008e84:	d0d3      	beq.n	8008e2e <USBH_CtlReq+0x78>
      else if (URB_Status == USBH_URB_STALL)
 8008e86:	2805      	cmp	r0, #5
 8008e88:	d020      	beq.n	8008ecc <USBH_CtlReq+0x116>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e8a:	2802      	cmp	r0, #2
 8008e8c:	d0c8      	beq.n	8008e20 <USBH_CtlReq+0x6a>
        if (URB_Status == USBH_URB_ERROR)
 8008e8e:	2804      	cmp	r0, #4
 8008e90:	d198      	bne.n	8008dc4 <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
 8008e92:	230b      	movs	r3, #11
 8008e94:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e79a      	b.n	8008dd0 <USBH_CtlReq+0x1a>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	7903      	ldrb	r3, [r0, #4]
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	f000 f9b7 	bl	8009212 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8008ea4:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
 8008ea8:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008eaa:	2308      	movs	r3, #8
 8008eac:	e7b9      	b.n	8008e22 <USBH_CtlReq+0x6c>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008eae:	7901      	ldrb	r1, [r0, #4]
 8008eb0:	f7f7 fe0a 	bl	8000ac8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8008eb4:	2801      	cmp	r0, #1
 8008eb6:	d104      	bne.n	8008ec2 <USBH_CtlReq+0x10c>
        status = USBH_OK;
 8008eb8:	2500      	movs	r5, #0
        phost->RequestState = CMD_SEND;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	e7ac      	b.n	8008e1c <USBH_CtlReq+0x66>
      else if (URB_Status == USBH_URB_ERROR)
 8008ec2:	2804      	cmp	r0, #4
 8008ec4:	d0b9      	beq.n	8008e3a <USBH_CtlReq+0x84>
        if (URB_Status == USBH_URB_STALL)
 8008ec6:	2805      	cmp	r0, #5
 8008ec8:	f47f af7c 	bne.w	8008dc4 <USBH_CtlReq+0xe>
{
 8008ecc:	2503      	movs	r5, #3
 8008ece:	e7f4      	b.n	8008eba <USBH_CtlReq+0x104>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008ed0:	2501      	movs	r5, #1
 8008ed2:	9500      	str	r5, [sp, #0]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	7943      	ldrb	r3, [r0, #5]
 8008ed8:	4611      	mov	r1, r2
 8008eda:	f000 f983 	bl	80091e4 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8008ede:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
 8008ee2:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008ee4:	230a      	movs	r3, #10
 8008ee6:	e799      	b.n	8008e1c <USBH_CtlReq+0x66>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ee8:	7941      	ldrb	r1, [r0, #5]
 8008eea:	f7f7 fded 	bl	8000ac8 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8008eee:	2801      	cmp	r0, #1
 8008ef0:	d0e2      	beq.n	8008eb8 <USBH_CtlReq+0x102>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ef2:	2802      	cmp	r0, #2
 8008ef4:	d1b4      	bne.n	8008e60 <USBH_CtlReq+0xaa>
 8008ef6:	e798      	b.n	8008e2a <USBH_CtlReq+0x74>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008ef8:	7e43      	ldrb	r3, [r0, #25]
 8008efa:	3301      	adds	r3, #1
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	7643      	strb	r3, [r0, #25]
 8008f02:	d803      	bhi.n	8008f0c <USBH_CtlReq+0x156>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008f04:	2501      	movs	r5, #1
 8008f06:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
 8008f08:	7085      	strb	r5, [r0, #2]
      else if (status == USBH_FAIL)
 8008f0a:	e777      	b.n	8008dfc <USBH_CtlReq+0x46>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008f0c:	f8d0 35a4 	ldr.w	r3, [r0, #1444]	; 0x5a4
 8008f10:	2106      	movs	r1, #6
        phost->Control.errorcount = 0U;
 8008f12:	2600      	movs	r6, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008f14:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");

        /* Free control pipes */
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f16:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 8008f18:	7666      	strb	r6, [r4, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 f9dc 	bl	80092d8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f20:	7921      	ldrb	r1, [r4, #4]
 8008f22:	4620      	mov	r0, r4
 8008f24:	f000 f9d8 	bl	80092d8 <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 8008f28:	7026      	strb	r6, [r4, #0]
      else if (status == USBH_FAIL)
 8008f2a:	e7b4      	b.n	8008e96 <USBH_CtlReq+0xe0>

08008f2c <USBH_GetDescriptor>:
{
 8008f2c:	b430      	push	{r4, r5}
 8008f2e:	460c      	mov	r4, r1
 8008f30:	4619      	mov	r1, r3
  if (phost->RequestState == CMD_SEND)
 8008f32:	7883      	ldrb	r3, [r0, #2]
{
 8008f34:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d10f      	bne.n	8008f5c <USBH_GetDescriptor+0x30>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008f3c:	f064 047f 	orn	r4, r4, #127	; 0x7f
 8008f40:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008f42:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008f46:	2306      	movs	r3, #6
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008f48:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008f4c:	7443      	strb	r3, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 8008f4e:	f240 4309 	movw	r3, #1033	; 0x409
 8008f52:	bf18      	it	ne
 8008f54:	2300      	movne	r3, #0
    phost->Control.setup.b.wValue.w = value_idx;
 8008f56:	8242      	strh	r2, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008f58:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8008f5a:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 8008f5c:	462a      	mov	r2, r5
}
 8008f5e:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 8008f60:	f7ff bf29 	b.w	8008db6 <USBH_CtlReq>

08008f64 <USBH_Get_DevDesc>:
{
 8008f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((status = USBH_GetDescriptor(phost,
 8008f66:	f500 7307 	add.w	r3, r0, #540	; 0x21c
 8008f6a:	460d      	mov	r5, r1
 8008f6c:	9100      	str	r1, [sp, #0]
 8008f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f72:	2100      	movs	r1, #0
{
 8008f74:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost,
 8008f76:	f7ff ffd9 	bl	8008f2c <USBH_GetDescriptor>
 8008f7a:	bbc8      	cbnz	r0, 8008ff0 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008f7c:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8008f80:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008f84:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
 8008f88:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008f8c:	f8b4 321e 	ldrh.w	r3, [r4, #542]	; 0x21e
 8008f90:	f8a4 3428 	strh.w	r3, [r4, #1064]	; 0x428
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008f94:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 8008f98:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008f9c:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
 8008fa0:	f884 342b 	strb.w	r3, [r4, #1067]	; 0x42b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008fa4:	f894 3222 	ldrb.w	r3, [r4, #546]	; 0x222
 8008fa8:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
  if (length > 8U)
 8008fac:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008fae:	f894 3223 	ldrb.w	r3, [r4, #547]	; 0x223
 8008fb2:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
  if (length > 8U)
 8008fb6:	d91b      	bls.n	8008ff0 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16(buf +  8);
 8008fb8:	f8b4 3224 	ldrh.w	r3, [r4, #548]	; 0x224
 8008fbc:	f8a4 342e 	strh.w	r3, [r4, #1070]	; 0x42e
    dev_desc->idProduct          = LE16(buf + 10);
 8008fc0:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
 8008fc4:	f8a4 3430 	strh.w	r3, [r4, #1072]	; 0x430
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008fc8:	f8b4 3228 	ldrh.w	r3, [r4, #552]	; 0x228
 8008fcc:	f8a4 3432 	strh.w	r3, [r4, #1074]	; 0x432
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008fd0:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
 8008fd4:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008fd8:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
 8008fdc:	f884 3435 	strb.w	r3, [r4, #1077]	; 0x435
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008fe0:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
 8008fe4:	f884 3436 	strb.w	r3, [r4, #1078]	; 0x436
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008fe8:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
 8008fec:	f884 3437 	strb.w	r3, [r4, #1079]	; 0x437
}
 8008ff0:	b003      	add	sp, #12
 8008ff2:	bd30      	pop	{r4, r5, pc}

08008ff4 <USBH_Get_CfgDesc>:
{
 8008ff4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008ff8:	f100 041c 	add.w	r4, r0, #28
{
 8008ffc:	460e      	mov	r6, r1
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008ffe:	9100      	str	r1, [sp, #0]
 8009000:	4623      	mov	r3, r4
 8009002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009006:	2100      	movs	r1, #0
{
 8009008:	4605      	mov	r5, r0
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800900a:	f7ff ff8f 	bl	8008f2c <USBH_GetDescriptor>
 800900e:	bb40      	cbnz	r0, 8009062 <USBH_Get_CfgDesc+0x6e>
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009010:	7f2b      	ldrb	r3, [r5, #28]
 8009012:	f885 3438 	strb.w	r3, [r5, #1080]	; 0x438
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009016:	7f6b      	ldrb	r3, [r5, #29]
 8009018:	f885 3439 	strb.w	r3, [r5, #1081]	; 0x439
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800901c:	f895 3020 	ldrb.w	r3, [r5, #32]
 8009020:	f885 343c 	strb.w	r3, [r5, #1084]	; 0x43c
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009024:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8009028:	f885 343d 	strb.w	r3, [r5, #1085]	; 0x43d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800902c:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8009030:	f885 343e 	strb.w	r3, [r5, #1086]	; 0x43e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009034:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009038:	f8b5 c01e 	ldrh.w	ip, [r5, #30]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800903c:	f885 343f 	strb.w	r3, [r5, #1087]	; 0x43f
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009040:	2e09      	cmp	r6, #9
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009042:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8009046:	f8a5 c43a 	strh.w	ip, [r5, #1082]	; 0x43a
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800904a:	f885 3440 	strb.w	r3, [r5, #1088]	; 0x440
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800904e:	d908      	bls.n	8009062 <USBH_Get_CfgDesc+0x6e>
 8009050:	462b      	mov	r3, r5
 8009052:	4607      	mov	r7, r0
    ptr = USB_LEN_CFG_DESC;
 8009054:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009056:	f04f 0e1a 	mov.w	lr, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800905a:	2f0a      	cmp	r7, #10
 800905c:	d001      	beq.n	8009062 <USBH_Get_CfgDesc+0x6e>
 800905e:	4594      	cmp	ip, r2
 8009060:	d802      	bhi.n	8009068 <USBH_Get_CfgDesc+0x74>
}
 8009062:	b003      	add	sp, #12
 8009064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009068:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800906a:	440c      	add	r4, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800906c:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800906e:	7861      	ldrb	r1, [r4, #1]
 8009070:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009072:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009074:	d1f1      	bne.n	800905a <USBH_Get_CfgDesc+0x66>
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009076:	7821      	ldrb	r1, [r4, #0]
 8009078:	f883 1442 	strb.w	r1, [r3, #1090]	; 0x442
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800907c:	7861      	ldrb	r1, [r4, #1]
 800907e:	f883 1443 	strb.w	r1, [r3, #1091]	; 0x443
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009082:	78a1      	ldrb	r1, [r4, #2]
 8009084:	f883 1444 	strb.w	r1, [r3, #1092]	; 0x444
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009088:	78e1      	ldrb	r1, [r4, #3]
 800908a:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800908e:	7921      	ldrb	r1, [r4, #4]
 8009090:	f883 1446 	strb.w	r1, [r3, #1094]	; 0x446
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009094:	7961      	ldrb	r1, [r4, #5]
 8009096:	f883 1447 	strb.w	r1, [r3, #1095]	; 0x447
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800909a:	79a1      	ldrb	r1, [r4, #6]
 800909c:	f883 1448 	strb.w	r1, [r3, #1096]	; 0x448
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80090a0:	79e1      	ldrb	r1, [r4, #7]
 80090a2:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80090a6:	7a21      	ldrb	r1, [r4, #8]
 80090a8:	f883 144a 	strb.w	r1, [r3, #1098]	; 0x44a
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80090ac:	fb0e f807 	mul.w	r8, lr, r7
        ep_ix = 0U;
 80090b0:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80090b2:	f893 6446 	ldrb.w	r6, [r3, #1094]	; 0x446
 80090b6:	428e      	cmp	r6, r1
 80090b8:	d901      	bls.n	80090be <USBH_Get_CfgDesc+0xca>
 80090ba:	4594      	cmp	ip, r2
 80090bc:	d802      	bhi.n	80090c4 <USBH_Get_CfgDesc+0xd0>
        if_ix++;
 80090be:	3701      	adds	r7, #1
 80090c0:	331a      	adds	r3, #26
 80090c2:	e7ca      	b.n	800905a <USBH_Get_CfgDesc+0x66>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80090c4:	7826      	ldrb	r6, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80090c6:	4434      	add	r4, r6
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80090c8:	4432      	add	r2, r6
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80090ca:	7866      	ldrb	r6, [r4, #1]
 80090cc:	2e05      	cmp	r6, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80090ce:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80090d0:	d1ef      	bne.n	80090b2 <USBH_Get_CfgDesc+0xbe>
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80090d2:	1c4e      	adds	r6, r1, #1
 80090d4:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
 80090d8:	4429      	add	r1, r5
 80090da:	f894 9000 	ldrb.w	r9, [r4]
 80090de:	f881 9444 	strb.w	r9, [r1, #1092]	; 0x444
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80090e2:	f894 9001 	ldrb.w	r9, [r4, #1]
 80090e6:	f881 9445 	strb.w	r9, [r1, #1093]	; 0x445
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80090ea:	f894 9002 	ldrb.w	r9, [r4, #2]
 80090ee:	f881 9446 	strb.w	r9, [r1, #1094]	; 0x446
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80090f2:	f894 9003 	ldrb.w	r9, [r4, #3]
 80090f6:	f881 9447 	strb.w	r9, [r1, #1095]	; 0x447
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80090fa:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 80090fe:	f8a1 9448 	strh.w	r9, [r1, #1096]	; 0x448
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009102:	f894 9006 	ldrb.w	r9, [r4, #6]
 8009106:	f881 944a 	strb.w	r9, [r1, #1098]	; 0x44a
            ep_ix++;
 800910a:	b2f1      	uxtb	r1, r6
 800910c:	e7d1      	b.n	80090b2 <USBH_Get_CfgDesc+0xbe>

0800910e <USBH_Get_StringDesc>:
{
 800910e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                   phost->device.Data, length)) == USBH_OK)
 8009110:	f500 7607 	add.w	r6, r0, #540	; 0x21c
{
 8009114:	4615      	mov	r5, r2
 8009116:	461f      	mov	r7, r3
  if ((status = USBH_GetDescriptor(phost,
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 800911e:	4633      	mov	r3, r6
 8009120:	2100      	movs	r1, #0
{
 8009122:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost,
 8009124:	f7ff ff02 	bl	8008f2c <USBH_GetDescriptor>
 8009128:	b978      	cbnz	r0, 800914a <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 800912a:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
 800912e:	2b03      	cmp	r3, #3
 8009130:	d10b      	bne.n	800914a <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009132:	f894 421c 	ldrb.w	r4, [r4, #540]	; 0x21c
 8009136:	1ea1      	subs	r1, r4, #2
 8009138:	42b9      	cmp	r1, r7
 800913a:	bf28      	it	cs
 800913c:	4639      	movcs	r1, r7
 800913e:	b289      	uxth	r1, r1
    for (idx = 0U; idx < strlength; idx += 2U)
 8009140:	4604      	mov	r4, r0
 8009142:	42a1      	cmp	r1, r4
 8009144:	d803      	bhi.n	800914e <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8009146:	2300      	movs	r3, #0
 8009148:	702b      	strb	r3, [r5, #0]
}
 800914a:	b003      	add	sp, #12
 800914c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 800914e:	1933      	adds	r3, r6, r4
    for (idx = 0U; idx < strlength; idx += 2U)
 8009150:	3402      	adds	r4, #2
      *pdest =  psrc[idx];
 8009152:	789b      	ldrb	r3, [r3, #2]
 8009154:	f805 3b01 	strb.w	r3, [r5], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8009158:	b2a4      	uxth	r4, r4
 800915a:	e7f2      	b.n	8009142 <USBH_Get_StringDesc+0x34>

0800915c <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
 800915c:	7883      	ldrb	r3, [r0, #2]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d105      	bne.n	800916e <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009162:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009166:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8009168:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800916a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800916c:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 800916e:	2200      	movs	r2, #0
 8009170:	4611      	mov	r1, r2
 8009172:	f7ff be20 	b.w	8008db6 <USBH_CtlReq>

08009176 <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
 8009176:	7883      	ldrb	r3, [r0, #2]
 8009178:	2b01      	cmp	r3, #1
 800917a:	d105      	bne.n	8009188 <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800917c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009180:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8009182:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009184:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009186:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 8009188:	2200      	movs	r2, #0
 800918a:	4611      	mov	r1, r2
 800918c:	f7ff be13 	b.w	8008db6 <USBH_CtlReq>

08009190 <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
 8009190:	7883      	ldrb	r3, [r0, #2]
 8009192:	2b01      	cmp	r3, #1
 8009194:	d105      	bne.n	80091a2 <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009196:	f44f 7340 	mov.w	r3, #768	; 0x300
 800919a:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 800919c:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = wValue;
 800919e:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80091a0:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 80091a2:	2200      	movs	r2, #0
 80091a4:	4611      	mov	r1, r2
 80091a6:	f7ff be06 	b.w	8008db6 <USBH_CtlReq>

080091aa <USBH_ClrFeature>:
  if (phost->RequestState == CMD_SEND)
 80091aa:	7883      	ldrb	r3, [r0, #2]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d105      	bne.n	80091bc <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80091b0:	f44f 7381 	mov.w	r3, #258	; 0x102
 80091b4:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
 80091b6:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 80091b8:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80091ba:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 80091bc:	2200      	movs	r2, #0
 80091be:	4611      	mov	r1, r2
 80091c0:	f7ff bdf9 	b.w	8008db6 <USBH_CtlReq>

080091c4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80091c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80091c6:	2400      	movs	r4, #0
{
 80091c8:	460b      	mov	r3, r1
 80091ca:	4611      	mov	r1, r2
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80091cc:	2208      	movs	r2, #8
 80091ce:	e9cd 2402 	strd	r2, r4, [sp, #8]
 80091d2:	e9cd 4300 	strd	r4, r3, [sp]
 80091d6:	4622      	mov	r2, r4
 80091d8:	4623      	mov	r3, r4
 80091da:	f7f7 fc62 	bl	8000aa2 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 80091de:	4620      	mov	r0, r4
 80091e0:	b004      	add	sp, #16
 80091e2:	bd10      	pop	{r4, pc}

080091e4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80091e4:	b530      	push	{r4, r5, lr}
 80091e6:	b085      	sub	sp, #20
  if (phost->device.speed != USBH_SPEED_HIGH)
 80091e8:	f890 541d 	ldrb.w	r5, [r0, #1053]	; 0x41d
{
 80091ec:	460c      	mov	r4, r1
  if (phost->device.speed != USBH_SPEED_HIGH)
 80091ee:	2d00      	cmp	r5, #0
{
 80091f0:	4619      	mov	r1, r3
 80091f2:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80091f6:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
 80091f8:	bf18      	it	ne
 80091fa:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80091fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009200:	2301      	movs	r3, #1
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	2300      	movs	r3, #0
 8009206:	461a      	mov	r2, r3
 8009208:	f7f7 fc4b 	bl	8000aa2 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 800920c:	2000      	movs	r0, #0
 800920e:	b005      	add	sp, #20
 8009210:	bd30      	pop	{r4, r5, pc}

08009212 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009212:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009214:	2400      	movs	r4, #0
{
 8009216:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009218:	e9cd 2402 	strd	r2, r4, [sp, #8]
{
 800921c:	460d      	mov	r5, r1
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800921e:	2201      	movs	r2, #1
{
 8009220:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009222:	9501      	str	r5, [sp, #4]
 8009224:	9200      	str	r2, [sp, #0]
 8009226:	4623      	mov	r3, r4
 8009228:	f7f7 fc3b 	bl	8000aa2 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 800922c:	4620      	mov	r0, r4
 800922e:	b005      	add	sp, #20
 8009230:	bd30      	pop	{r4, r5, pc}

08009232 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009232:	b530      	push	{r4, r5, lr}
 8009234:	b085      	sub	sp, #20
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009236:	f890 541d 	ldrb.w	r5, [r0, #1053]	; 0x41d
{
 800923a:	460c      	mov	r4, r1
  if (phost->device.speed != USBH_SPEED_HIGH)
 800923c:	2d00      	cmp	r5, #0
{
 800923e:	4619      	mov	r1, r3
 8009240:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009244:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
 8009246:	bf18      	it	ne
 8009248:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800924a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800924e:	2301      	movs	r3, #1
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	2200      	movs	r2, #0
 8009254:	2302      	movs	r3, #2
 8009256:	f7f7 fc24 	bl	8000aa2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 800925a:	2000      	movs	r0, #0
 800925c:	b005      	add	sp, #20
 800925e:	bd30      	pop	{r4, r5, pc}

08009260 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009260:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009262:	2400      	movs	r4, #0
{
 8009264:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009266:	e9cd 2402 	strd	r2, r4, [sp, #8]
{
 800926a:	460d      	mov	r5, r1
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800926c:	2201      	movs	r2, #1
{
 800926e:	4619      	mov	r1, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009270:	9501      	str	r5, [sp, #4]
 8009272:	9200      	str	r2, [sp, #0]
 8009274:	2302      	movs	r3, #2
 8009276:	f7f7 fc14 	bl	8000aa2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
}
 800927a:	4620      	mov	r0, r4
 800927c:	b005      	add	sp, #20
 800927e:	bd30      	pop	{r4, r5, pc}

08009280 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009282:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8009286:	9402      	str	r4, [sp, #8]
 8009288:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800928c:	9401      	str	r4, [sp, #4]
 800928e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8009292:	9400      	str	r4, [sp, #0]
 8009294:	f7f7 fbed 	bl	8000a72 <USBH_LL_OpenPipe>

  return USBH_OK;
}
 8009298:	2000      	movs	r0, #0
 800929a:	b004      	add	sp, #16
 800929c:	bd10      	pop	{r4, pc}

0800929e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800929e:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 80092a0:	f7f7 fbf8 	bl	8000a94 <USBH_LL_ClosePipe>

  return USBH_OK;
}
 80092a4:	2000      	movs	r0, #0
 80092a6:	bd08      	pop	{r3, pc}

080092a8 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80092a8:	b530      	push	{r4, r5, lr}
 80092aa:	2300      	movs	r3, #0
 80092ac:	f200 5454 	addw	r4, r0, #1364	; 0x554
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80092b0:	f854 5b04 	ldr.w	r5, [r4], #4
 80092b4:	042d      	lsls	r5, r5, #16
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	d408      	bmi.n	80092cc <USBH_AllocPipe+0x24>
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80092ba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80092be:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    {
      return (uint16_t)idx;
 80092c2:	b292      	uxth	r2, r2
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80092c4:	f8c0 1554 	str.w	r1, [r0, #1364]	; 0x554
}
 80092c8:	b2d0      	uxtb	r0, r2
 80092ca:	bd30      	pop	{r4, r5, pc}
  for (idx = 0U ; idx < 11U ; idx++)
 80092cc:	3301      	adds	r3, #1
 80092ce:	2b0b      	cmp	r3, #11
 80092d0:	d1ee      	bne.n	80092b0 <USBH_AllocPipe+0x8>
    }
  }

  return 0xFFFFU;
 80092d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092d6:	e7f7      	b.n	80092c8 <USBH_AllocPipe+0x20>

080092d8 <USBH_FreePipe>:
  if (idx < 11U)
 80092d8:	290a      	cmp	r1, #10
    phost->Pipes[idx] &= 0x7FFFU;
 80092da:	bf98      	it	ls
 80092dc:	eb00 0181 	addls.w	r1, r0, r1, lsl #2
}
 80092e0:	f04f 0000 	mov.w	r0, #0
    phost->Pipes[idx] &= 0x7FFFU;
 80092e4:	bf9e      	ittt	ls
 80092e6:	f8d1 3554 	ldrls.w	r3, [r1, #1364]	; 0x554
 80092ea:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 80092ee:	f8c1 3554 	strls.w	r3, [r1, #1364]	; 0x554
}
 80092f2:	4770      	bx	lr

080092f4 <D16_GENERIC>:
 80092f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f8:	b089      	sub	sp, #36	; 0x24
 80092fa:	68d4      	ldr	r4, [r2, #12]
 80092fc:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80092fe:	6993      	ldr	r3, [r2, #24]
 8009300:	9407      	str	r4, [sp, #28]
 8009302:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009304:	9306      	str	r3, [sp, #24]
 8009306:	9402      	str	r4, [sp, #8]
 8009308:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800930c:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8009310:	69d3      	ldr	r3, [r2, #28]
 8009312:	6896      	ldr	r6, [r2, #8]
 8009314:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8009316:	9103      	str	r1, [sp, #12]
 8009318:	2d00      	cmp	r5, #0
 800931a:	d066      	beq.n	80093ea <D16_GENERIC+0xf6>
 800931c:	f004 0510 	and.w	r5, r4, #16
 8009320:	f004 0420 	and.w	r4, r4, #32
 8009324:	9504      	str	r5, [sp, #16]
 8009326:	4938      	ldr	r1, [pc, #224]	; (8009408 <D16_GENERIC+0x114>)
 8009328:	9405      	str	r4, [sp, #20]
 800932a:	f04f 0e00 	mov.w	lr, #0
 800932e:	4635      	mov	r5, r6
 8009330:	e04f      	b.n	80093d2 <D16_GENERIC+0xde>
 8009332:	5d87      	ldrb	r7, [r0, r6]
 8009334:	7804      	ldrb	r4, [r0, #0]
 8009336:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800933a:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800933e:	b2e6      	uxtb	r6, r4
 8009340:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8009344:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8009348:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800934c:	4433      	add	r3, r6
 800934e:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8009352:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8009356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800935a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800935e:	0aa3      	lsrs	r3, r4, #10
 8009360:	4c2a      	ldr	r4, [pc, #168]	; (800940c <D16_GENERIC+0x118>)
 8009362:	fb26 5404 	smlad	r4, r6, r4, r5
 8009366:	4d2a      	ldr	r5, [pc, #168]	; (8009410 <D16_GENERIC+0x11c>)
 8009368:	fb26 f505 	smuad	r5, r6, r5
 800936c:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8009370:	eb04 080a 	add.w	r8, r4, sl
 8009374:	eba8 080b 	sub.w	r8, r8, fp
 8009378:	4646      	mov	r6, r8
 800937a:	17f7      	asrs	r7, r6, #31
 800937c:	e9cd 6700 	strd	r6, r7, [sp]
 8009380:	9e04      	ldr	r6, [sp, #16]
 8009382:	f10e 0c01 	add.w	ip, lr, #1
 8009386:	b16e      	cbz	r6, 80093a4 <D16_GENERIC+0xb0>
 8009388:	6a16      	ldr	r6, [r2, #32]
 800938a:	9f01      	ldr	r7, [sp, #4]
 800938c:	fba8 8906 	umull	r8, r9, r8, r6
 8009390:	fb06 9907 	mla	r9, r6, r7, r9
 8009394:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8009398:	f149 0900 	adc.w	r9, r9, #0
 800939c:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80093a0:	46a3      	mov	fp, r4
 80093a2:	4654      	mov	r4, sl
 80093a4:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80093a6:	9f02      	ldr	r7, [sp, #8]
 80093a8:	0424      	lsls	r4, r4, #16
 80093aa:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80093ae:	f04f 0900 	mov.w	r9, #0
 80093b2:	fb0e fe06 	mul.w	lr, lr, r6
 80093b6:	fbc7 8904 	smlal	r8, r9, r7, r4
 80093ba:	9e03      	ldr	r6, [sp, #12]
 80093bc:	464f      	mov	r7, r9
 80093be:	10bc      	asrs	r4, r7, #2
 80093c0:	f304 040f 	ssat	r4, #16, r4
 80093c4:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 80093c8:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80093ca:	fa1f fe8c 	uxth.w	lr, ip
 80093ce:	4574      	cmp	r4, lr
 80093d0:	d90a      	bls.n	80093e8 <D16_GENERIC+0xf4>
 80093d2:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80093d4:	2c01      	cmp	r4, #1
 80093d6:	b2e6      	uxtb	r6, r4
 80093d8:	d1ab      	bne.n	8009332 <D16_GENERIC+0x3e>
 80093da:	9e05      	ldr	r6, [sp, #20]
 80093dc:	f850 4b02 	ldr.w	r4, [r0], #2
 80093e0:	2e00      	cmp	r6, #0
 80093e2:	d0ac      	beq.n	800933e <D16_GENERIC+0x4a>
 80093e4:	ba64      	rev16	r4, r4
 80093e6:	e7aa      	b.n	800933e <D16_GENERIC+0x4a>
 80093e8:	462e      	mov	r6, r5
 80093ea:	9907      	ldr	r1, [sp, #28]
 80093ec:	61d3      	str	r3, [r2, #28]
 80093ee:	9b06      	ldr	r3, [sp, #24]
 80093f0:	6096      	str	r6, [r2, #8]
 80093f2:	2000      	movs	r0, #0
 80093f4:	60d1      	str	r1, [r2, #12]
 80093f6:	f8c2 a010 	str.w	sl, [r2, #16]
 80093fa:	f8c2 b014 	str.w	fp, [r2, #20]
 80093fe:	6193      	str	r3, [r2, #24]
 8009400:	b009      	add	sp, #36	; 0x24
 8009402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009406:	bf00      	nop
 8009408:	200000ec 	.word	0x200000ec
 800940c:	00030001 	.word	0x00030001
 8009410:	00010003 	.word	0x00010003

08009414 <D24_GENERIC>:
 8009414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009418:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800941a:	6993      	ldr	r3, [r2, #24]
 800941c:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800941e:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8009422:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8009426:	6894      	ldr	r4, [r2, #8]
 8009428:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800942c:	b089      	sub	sp, #36	; 0x24
 800942e:	9307      	str	r3, [sp, #28]
 8009430:	9503      	str	r5, [sp, #12]
 8009432:	69d3      	ldr	r3, [r2, #28]
 8009434:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8009436:	9104      	str	r1, [sp, #16]
 8009438:	2e00      	cmp	r6, #0
 800943a:	f000 8096 	beq.w	800956a <D24_GENERIC+0x156>
 800943e:	f005 0610 	and.w	r6, r5, #16
 8009442:	f005 0520 	and.w	r5, r5, #32
 8009446:	4954      	ldr	r1, [pc, #336]	; (8009598 <D24_GENERIC+0x184>)
 8009448:	9605      	str	r6, [sp, #20]
 800944a:	9506      	str	r5, [sp, #24]
 800944c:	f04f 0e00 	mov.w	lr, #0
 8009450:	f8cd 9008 	str.w	r9, [sp, #8]
 8009454:	e06a      	b.n	800952c <D24_GENERIC+0x118>
 8009456:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800945a:	f810 8007 	ldrb.w	r8, [r0, r7]
 800945e:	f890 c000 	ldrb.w	ip, [r0]
 8009462:	042d      	lsls	r5, r5, #16
 8009464:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8009468:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800946c:	44ac      	add	ip, r5
 800946e:	4438      	add	r0, r7
 8009470:	fa5f f68c 	uxtb.w	r6, ip
 8009474:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8009478:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800947c:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8009480:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009484:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8009488:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800948c:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8009490:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8009494:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009498:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800949c:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80094a0:	4d3e      	ldr	r5, [pc, #248]	; (800959c <D24_GENERIC+0x188>)
 80094a2:	fb26 b705 	smlad	r7, r6, r5, fp
 80094a6:	4d3e      	ldr	r5, [pc, #248]	; (80095a0 <D24_GENERIC+0x18c>)
 80094a8:	fb26 4b05 	smlad	fp, r6, r5, r4
 80094ac:	f3c3 0409 	ubfx	r4, r3, #0, #10
 80094b0:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 80094b4:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 80094b8:	2401      	movs	r4, #1
 80094ba:	fb26 f604 	smuad	r6, r6, r4
 80094be:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 80094c2:	9f02      	ldr	r7, [sp, #8]
 80094c4:	eb0e 0c04 	add.w	ip, lr, r4
 80094c8:	eb08 0406 	add.w	r4, r8, r6
 80094cc:	eb05 060a 	add.w	r6, r5, sl
 80094d0:	1bf6      	subs	r6, r6, r7
 80094d2:	4637      	mov	r7, r6
 80094d4:	ea4f 78e6 	mov.w	r8, r6, asr #31
 80094d8:	e9cd 7800 	strd	r7, r8, [sp]
 80094dc:	9f05      	ldr	r7, [sp, #20]
 80094de:	b177      	cbz	r7, 80094fe <D24_GENERIC+0xea>
 80094e0:	f8d2 8020 	ldr.w	r8, [r2, #32]
 80094e4:	9502      	str	r5, [sp, #8]
 80094e6:	fba6 9a08 	umull	r9, sl, r6, r8
 80094ea:	9e01      	ldr	r6, [sp, #4]
 80094ec:	fb08 aa06 	mla	sl, r8, r6, sl
 80094f0:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 80094f4:	f14a 0700 	adc.w	r7, sl, #0
 80094f8:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80094fc:	4655      	mov	r5, sl
 80094fe:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8009500:	9f03      	ldr	r7, [sp, #12]
 8009502:	03ad      	lsls	r5, r5, #14
 8009504:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8009508:	f04f 0900 	mov.w	r9, #0
 800950c:	fb0e fe06 	mul.w	lr, lr, r6
 8009510:	fbc7 8905 	smlal	r8, r9, r7, r5
 8009514:	9e04      	ldr	r6, [sp, #16]
 8009516:	464f      	mov	r7, r9
 8009518:	10bd      	asrs	r5, r7, #2
 800951a:	f305 050f 	ssat	r5, #16, r5
 800951e:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8009522:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009524:	fa1f fe8c 	uxth.w	lr, ip
 8009528:	4575      	cmp	r5, lr
 800952a:	d91c      	bls.n	8009566 <D24_GENERIC+0x152>
 800952c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800952e:	b2ef      	uxtb	r7, r5
 8009530:	2d01      	cmp	r5, #1
 8009532:	b23e      	sxth	r6, r7
 8009534:	d18f      	bne.n	8009456 <D24_GENERIC+0x42>
 8009536:	9d06      	ldr	r5, [sp, #24]
 8009538:	b15d      	cbz	r5, 8009552 <D24_GENERIC+0x13e>
 800953a:	f01e 0f01 	tst.w	lr, #1
 800953e:	d122      	bne.n	8009586 <D24_GENERIC+0x172>
 8009540:	7805      	ldrb	r5, [r0, #0]
 8009542:	78c7      	ldrb	r7, [r0, #3]
 8009544:	7846      	ldrb	r6, [r0, #1]
 8009546:	022d      	lsls	r5, r5, #8
 8009548:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800954c:	44b4      	add	ip, r6
 800954e:	3002      	adds	r0, #2
 8009550:	e78e      	b.n	8009470 <D24_GENERIC+0x5c>
 8009552:	7846      	ldrb	r6, [r0, #1]
 8009554:	f890 c002 	ldrb.w	ip, [r0, #2]
 8009558:	f810 5b03 	ldrb.w	r5, [r0], #3
 800955c:	0236      	lsls	r6, r6, #8
 800955e:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8009562:	44ac      	add	ip, r5
 8009564:	e784      	b.n	8009470 <D24_GENERIC+0x5c>
 8009566:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800956a:	61d3      	str	r3, [r2, #28]
 800956c:	9b07      	ldr	r3, [sp, #28]
 800956e:	6094      	str	r4, [r2, #8]
 8009570:	2000      	movs	r0, #0
 8009572:	f8c2 b00c 	str.w	fp, [r2, #12]
 8009576:	f8c2 a010 	str.w	sl, [r2, #16]
 800957a:	f8c2 9014 	str.w	r9, [r2, #20]
 800957e:	6193      	str	r3, [r2, #24]
 8009580:	b009      	add	sp, #36	; 0x24
 8009582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009586:	78c5      	ldrb	r5, [r0, #3]
 8009588:	7887      	ldrb	r7, [r0, #2]
 800958a:	f810 6b04 	ldrb.w	r6, [r0], #4
 800958e:	022d      	lsls	r5, r5, #8
 8009590:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8009594:	44b4      	add	ip, r6
 8009596:	e76b      	b.n	8009470 <D24_GENERIC+0x5c>
 8009598:	200000ec 	.word	0x200000ec
 800959c:	00030001 	.word	0x00030001
 80095a0:	00060007 	.word	0x00060007

080095a4 <D32_GENERIC>:
 80095a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a8:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80095aa:	6993      	ldr	r3, [r2, #24]
 80095ac:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80095ae:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80095b2:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80095b6:	69d6      	ldr	r6, [r2, #28]
 80095b8:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80095bc:	b089      	sub	sp, #36	; 0x24
 80095be:	9307      	str	r3, [sp, #28]
 80095c0:	9403      	str	r4, [sp, #12]
 80095c2:	6893      	ldr	r3, [r2, #8]
 80095c4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80095c6:	9104      	str	r1, [sp, #16]
 80095c8:	2d00      	cmp	r5, #0
 80095ca:	f000 809f 	beq.w	800970c <D32_GENERIC+0x168>
 80095ce:	f004 0510 	and.w	r5, r4, #16
 80095d2:	f004 0420 	and.w	r4, r4, #32
 80095d6:	9505      	str	r5, [sp, #20]
 80095d8:	4953      	ldr	r1, [pc, #332]	; (8009728 <D32_GENERIC+0x184>)
 80095da:	9406      	str	r4, [sp, #24]
 80095dc:	f04f 0c00 	mov.w	ip, #0
 80095e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80095e4:	461d      	mov	r5, r3
 80095e6:	4617      	mov	r7, r2
 80095e8:	e077      	b.n	80096da <D32_GENERIC+0x136>
 80095ea:	f818 3003 	ldrb.w	r3, [r8, r3]
 80095ee:	f810 800e 	ldrb.w	r8, [r0, lr]
 80095f2:	f810 e002 	ldrb.w	lr, [r0, r2]
 80095f6:	7800      	ldrb	r0, [r0, #0]
 80095f8:	041b      	lsls	r3, r3, #16
 80095fa:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80095fe:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8009602:	4403      	add	r3, r0
 8009604:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8009608:	b2dc      	uxtb	r4, r3
 800960a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800960e:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8009612:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009616:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800961a:	0e1b      	lsrs	r3, r3, #24
 800961c:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8009620:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8009624:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009628:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800962c:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8009630:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8009634:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8009638:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800963c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009640:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009644:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8009648:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800964c:	4b37      	ldr	r3, [pc, #220]	; (800972c <D32_GENERIC+0x188>)
 800964e:	fb22 b403 	smlad	r4, r2, r3, fp
 8009652:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009656:	fb2e 4803 	smlad	r8, lr, r3, r4
 800965a:	4b35      	ldr	r3, [pc, #212]	; (8009730 <D32_GENERIC+0x18c>)
 800965c:	fb22 5503 	smlad	r5, r2, r3, r5
 8009660:	4b34      	ldr	r3, [pc, #208]	; (8009734 <D32_GENERIC+0x190>)
 8009662:	fb2e 5b03 	smlad	fp, lr, r3, r5
 8009666:	2301      	movs	r3, #1
 8009668:	fb22 f203 	smuad	r2, r2, r3
 800966c:	4b32      	ldr	r3, [pc, #200]	; (8009738 <D32_GENERIC+0x194>)
 800966e:	fb2e 2503 	smlad	r5, lr, r3, r2
 8009672:	9b02      	ldr	r3, [sp, #8]
 8009674:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 8009678:	eb04 080a 	add.w	r8, r4, sl
 800967c:	eba8 0803 	sub.w	r8, r8, r3
 8009680:	4642      	mov	r2, r8
 8009682:	17d3      	asrs	r3, r2, #31
 8009684:	e9cd 2300 	strd	r2, r3, [sp]
 8009688:	9b05      	ldr	r3, [sp, #20]
 800968a:	f10c 0e01 	add.w	lr, ip, #1
 800968e:	b16b      	cbz	r3, 80096ac <D32_GENERIC+0x108>
 8009690:	6a3a      	ldr	r2, [r7, #32]
 8009692:	9b01      	ldr	r3, [sp, #4]
 8009694:	9402      	str	r4, [sp, #8]
 8009696:	fba8 8902 	umull	r8, r9, r8, r2
 800969a:	fb02 9903 	mla	r9, r2, r3, r9
 800969e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80096a2:	f149 0900 	adc.w	r9, r9, #0
 80096a6:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80096aa:	4654      	mov	r4, sl
 80096ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80096ae:	9a04      	ldr	r2, [sp, #16]
 80096b0:	fb0c fc03 	mul.w	ip, ip, r3
 80096b4:	9b03      	ldr	r3, [sp, #12]
 80096b6:	0364      	lsls	r4, r4, #13
 80096b8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80096bc:	f04f 0900 	mov.w	r9, #0
 80096c0:	fbc3 8904 	smlal	r8, r9, r3, r4
 80096c4:	464b      	mov	r3, r9
 80096c6:	109b      	asrs	r3, r3, #2
 80096c8:	f303 030f 	ssat	r3, #16, r3
 80096cc:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 80096d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80096d2:	fa1f fc8e 	uxth.w	ip, lr
 80096d6:	4563      	cmp	r3, ip
 80096d8:	d914      	bls.n	8009704 <D32_GENERIC+0x160>
 80096da:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80096dc:	b2e2      	uxtb	r2, r4
 80096de:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 80096e2:	eb00 080e 	add.w	r8, r0, lr
 80096e6:	4253      	negs	r3, r2
 80096e8:	2c01      	cmp	r4, #1
 80096ea:	eb08 0403 	add.w	r4, r8, r3
 80096ee:	f47f af7c 	bne.w	80095ea <D32_GENERIC+0x46>
 80096f2:	1d02      	adds	r2, r0, #4
 80096f4:	6803      	ldr	r3, [r0, #0]
 80096f6:	9806      	ldr	r0, [sp, #24]
 80096f8:	b110      	cbz	r0, 8009700 <D32_GENERIC+0x15c>
 80096fa:	ba5b      	rev16	r3, r3
 80096fc:	4610      	mov	r0, r2
 80096fe:	e783      	b.n	8009608 <D32_GENERIC+0x64>
 8009700:	4610      	mov	r0, r2
 8009702:	e781      	b.n	8009608 <D32_GENERIC+0x64>
 8009704:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009708:	462b      	mov	r3, r5
 800970a:	463a      	mov	r2, r7
 800970c:	6093      	str	r3, [r2, #8]
 800970e:	9b07      	ldr	r3, [sp, #28]
 8009710:	f8c2 b00c 	str.w	fp, [r2, #12]
 8009714:	2000      	movs	r0, #0
 8009716:	61d6      	str	r6, [r2, #28]
 8009718:	f8c2 a010 	str.w	sl, [r2, #16]
 800971c:	f8c2 9014 	str.w	r9, [r2, #20]
 8009720:	6193      	str	r3, [r2, #24]
 8009722:	b009      	add	sp, #36	; 0x24
 8009724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009728:	200000ec 	.word	0x200000ec
 800972c:	00060003 	.word	0x00060003
 8009730:	000a000c 	.word	0x000a000c
 8009734:	000c000a 	.word	0x000c000a
 8009738:	00030006 	.word	0x00030006

0800973c <D48_GENERIC>:
 800973c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009740:	b089      	sub	sp, #36	; 0x24
 8009742:	6953      	ldr	r3, [r2, #20]
 8009744:	68d4      	ldr	r4, [r2, #12]
 8009746:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8009748:	9302      	str	r3, [sp, #8]
 800974a:	9400      	str	r4, [sp, #0]
 800974c:	6993      	ldr	r3, [r2, #24]
 800974e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009750:	9307      	str	r3, [sp, #28]
 8009752:	9403      	str	r4, [sp, #12]
 8009754:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8009758:	69d6      	ldr	r6, [r2, #28]
 800975a:	6893      	ldr	r3, [r2, #8]
 800975c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800975e:	9104      	str	r1, [sp, #16]
 8009760:	2d00      	cmp	r5, #0
 8009762:	f000 80c5 	beq.w	80098f0 <D48_GENERIC+0x1b4>
 8009766:	f004 0510 	and.w	r5, r4, #16
 800976a:	f004 0420 	and.w	r4, r4, #32
 800976e:	4967      	ldr	r1, [pc, #412]	; (800990c <D48_GENERIC+0x1d0>)
 8009770:	9505      	str	r5, [sp, #20]
 8009772:	9406      	str	r4, [sp, #24]
 8009774:	f04f 0c00 	mov.w	ip, #0
 8009778:	4657      	mov	r7, sl
 800977a:	9301      	str	r3, [sp, #4]
 800977c:	e09c      	b.n	80098b8 <D48_GENERIC+0x17c>
 800977e:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8009782:	f810 b009 	ldrb.w	fp, [r0, r9]
 8009786:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800978a:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800978e:	7800      	ldrb	r0, [r0, #0]
 8009790:	0424      	lsls	r4, r4, #16
 8009792:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8009796:	f818 4005 	ldrb.w	r4, [r8, r5]
 800979a:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800979e:	44a8      	add	r8, r5
 80097a0:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 80097a4:	eb0b 0500 	add.w	r5, fp, r0
 80097a8:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 80097ac:	fa5f f885 	uxtb.w	r8, r5
 80097b0:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 80097b4:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 80097b8:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 80097bc:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 80097c0:	0e2d      	lsrs	r5, r5, #24
 80097c2:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 80097c6:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 80097ca:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 80097ce:	b2e6      	uxtb	r6, r4
 80097d0:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 80097d4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80097d8:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 80097dc:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80097e0:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 80097e4:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 80097e8:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 80097ec:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 80097f0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80097f4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80097f8:	f3c6 0909 	ubfx	r9, r6, #0, #10
 80097fc:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009800:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009804:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009808:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 800980c:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8009810:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8009814:	4c3e      	ldr	r4, [pc, #248]	; (8009910 <D48_GENERIC+0x1d4>)
 8009816:	9d00      	ldr	r5, [sp, #0]
 8009818:	fb2a 5404 	smlad	r4, sl, r4, r5
 800981c:	4d3d      	ldr	r5, [pc, #244]	; (8009914 <D48_GENERIC+0x1d8>)
 800981e:	fb28 4405 	smlad	r4, r8, r5, r4
 8009822:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009826:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800982a:	4c3b      	ldr	r4, [pc, #236]	; (8009918 <D48_GENERIC+0x1dc>)
 800982c:	9b01      	ldr	r3, [sp, #4]
 800982e:	fb2a 3304 	smlad	r3, sl, r4, r3
 8009832:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8009836:	fb28 3304 	smlad	r3, r8, r4, r3
 800983a:	4c38      	ldr	r4, [pc, #224]	; (800991c <D48_GENERIC+0x1e0>)
 800983c:	fb2e 3304 	smlad	r3, lr, r4, r3
 8009840:	2501      	movs	r5, #1
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	fb2a fa05 	smuad	sl, sl, r5
 8009848:	4b35      	ldr	r3, [pc, #212]	; (8009920 <D48_GENERIC+0x1e4>)
 800984a:	fb28 a803 	smlad	r8, r8, r3, sl
 800984e:	4b35      	ldr	r3, [pc, #212]	; (8009924 <D48_GENERIC+0x1e8>)
 8009850:	fb2e 8303 	smlad	r3, lr, r3, r8
 8009854:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	9b02      	ldr	r3, [sp, #8]
 800985c:	eb04 0807 	add.w	r8, r4, r7
 8009860:	eba8 0803 	sub.w	r8, r8, r3
 8009864:	9b05      	ldr	r3, [sp, #20]
 8009866:	4465      	add	r5, ip
 8009868:	ea4f 7be8 	mov.w	fp, r8, asr #31
 800986c:	b163      	cbz	r3, 8009888 <D48_GENERIC+0x14c>
 800986e:	6a17      	ldr	r7, [r2, #32]
 8009870:	9402      	str	r4, [sp, #8]
 8009872:	fba8 8907 	umull	r8, r9, r8, r7
 8009876:	fb07 990b 	mla	r9, r7, fp, r9
 800987a:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800987e:	f149 0900 	adc.w	r9, r9, #0
 8009882:	ea4f 0749 	mov.w	r7, r9, lsl #1
 8009886:	463c      	mov	r4, r7
 8009888:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800988c:	9b03      	ldr	r3, [sp, #12]
 800988e:	02e4      	lsls	r4, r4, #11
 8009890:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8009894:	f04f 0900 	mov.w	r9, #0
 8009898:	fb0c fc0e 	mul.w	ip, ip, lr
 800989c:	fbc3 8904 	smlal	r8, r9, r3, r4
 80098a0:	9b04      	ldr	r3, [sp, #16]
 80098a2:	ea4f 04a9 	mov.w	r4, r9, asr #2
 80098a6:	f304 040f 	ssat	r4, #16, r4
 80098aa:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 80098ae:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80098b0:	fa1f fc85 	uxth.w	ip, r5
 80098b4:	4564      	cmp	r4, ip
 80098b6:	d919      	bls.n	80098ec <D48_GENERIC+0x1b0>
 80098b8:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 80098ba:	fa5f fe84 	uxtb.w	lr, r4
 80098be:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 80098c2:	f1ce 0500 	rsb	r5, lr, #0
 80098c6:	eb00 0b09 	add.w	fp, r0, r9
 80098ca:	eb0b 0a05 	add.w	sl, fp, r5
 80098ce:	2c01      	cmp	r4, #1
 80098d0:	eb0a 0809 	add.w	r8, sl, r9
 80098d4:	f47f af53 	bne.w	800977e <D48_GENERIC+0x42>
 80098d8:	9b06      	ldr	r3, [sp, #24]
 80098da:	6805      	ldr	r5, [r0, #0]
 80098dc:	6844      	ldr	r4, [r0, #4]
 80098de:	3006      	adds	r0, #6
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f43f af63 	beq.w	80097ac <D48_GENERIC+0x70>
 80098e6:	ba6d      	rev16	r5, r5
 80098e8:	ba64      	rev16	r4, r4
 80098ea:	e75f      	b.n	80097ac <D48_GENERIC+0x70>
 80098ec:	9b01      	ldr	r3, [sp, #4]
 80098ee:	46ba      	mov	sl, r7
 80098f0:	6093      	str	r3, [r2, #8]
 80098f2:	9b00      	ldr	r3, [sp, #0]
 80098f4:	60d3      	str	r3, [r2, #12]
 80098f6:	9b02      	ldr	r3, [sp, #8]
 80098f8:	6153      	str	r3, [r2, #20]
 80098fa:	9b07      	ldr	r3, [sp, #28]
 80098fc:	61d6      	str	r6, [r2, #28]
 80098fe:	2000      	movs	r0, #0
 8009900:	f8c2 a010 	str.w	sl, [r2, #16]
 8009904:	6193      	str	r3, [r2, #24]
 8009906:	b009      	add	sp, #36	; 0x24
 8009908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990c:	200000ec 	.word	0x200000ec
 8009910:	000f000a 	.word	0x000f000a
 8009914:	00060003 	.word	0x00060003
 8009918:	00150019 	.word	0x00150019
 800991c:	00190015 	.word	0x00190015
 8009920:	00030006 	.word	0x00030006
 8009924:	000a000f 	.word	0x000a000f

08009928 <D64_GENERIC>:
 8009928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992c:	b089      	sub	sp, #36	; 0x24
 800992e:	6913      	ldr	r3, [r2, #16]
 8009930:	6895      	ldr	r5, [r2, #8]
 8009932:	9303      	str	r3, [sp, #12]
 8009934:	9501      	str	r5, [sp, #4]
 8009936:	6953      	ldr	r3, [r2, #20]
 8009938:	68d5      	ldr	r5, [r2, #12]
 800993a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800993c:	9304      	str	r3, [sp, #16]
 800993e:	9500      	str	r5, [sp, #0]
 8009940:	6993      	ldr	r3, [r2, #24]
 8009942:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8009944:	9307      	str	r3, [sp, #28]
 8009946:	9505      	str	r5, [sp, #20]
 8009948:	69d3      	ldr	r3, [r2, #28]
 800994a:	9106      	str	r1, [sp, #24]
 800994c:	2c00      	cmp	r4, #0
 800994e:	f000 80d9 	beq.w	8009b04 <D64_GENERIC+0x1dc>
 8009952:	6a11      	ldr	r1, [r2, #32]
 8009954:	9102      	str	r1, [sp, #8]
 8009956:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8009b44 <D64_GENERIC+0x21c>
 800995a:	f04f 0c00 	mov.w	ip, #0
 800995e:	4681      	mov	r9, r0
 8009960:	e0c1      	b.n	8009ae6 <D64_GENERIC+0x1be>
 8009962:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8009966:	4274      	negs	r4, r6
 8009968:	eb09 0708 	add.w	r7, r9, r8
 800996c:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8009970:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8009974:	5d38      	ldrb	r0, [r7, r4]
 8009976:	5d29      	ldrb	r1, [r5, r4]
 8009978:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 800997c:	f819 a008 	ldrb.w	sl, [r9, r8]
 8009980:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8009984:	f899 7000 	ldrb.w	r7, [r9]
 8009988:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 800998c:	4425      	add	r5, r4
 800998e:	0409      	lsls	r1, r1, #16
 8009990:	0400      	lsls	r0, r0, #16
 8009992:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8009996:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800999a:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800999e:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 80099a2:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80099a6:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 80099aa:	4459      	add	r1, fp
 80099ac:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 80099b0:	4438      	add	r0, r7
 80099b2:	b2c5      	uxtb	r5, r0
 80099b4:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80099b8:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 80099bc:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 80099c0:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80099c4:	0e00      	lsrs	r0, r0, #24
 80099c6:	eb03 0806 	add.w	r8, r3, r6
 80099ca:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 80099ce:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 80099d2:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80099d6:	b2c8      	uxtb	r0, r1
 80099d8:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80099dc:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80099e0:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 80099e4:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 80099e8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80099ec:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 80099f0:	0e09      	lsrs	r1, r1, #24
 80099f2:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 80099f6:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 80099fa:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 80099fe:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8009a02:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8009a06:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8009a0a:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8009a0e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009a12:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009a16:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009a1a:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8009a1e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009a22:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009a26:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009a2a:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8009a2e:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8009a32:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8009a36:	0a8b      	lsrs	r3, r1, #10
 8009a38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8009a3c:	4939      	ldr	r1, [pc, #228]	; (8009b24 <D64_GENERIC+0x1fc>)
 8009a3e:	9c00      	ldr	r4, [sp, #0]
 8009a40:	fb28 4101 	smlad	r1, r8, r1, r4
 8009a44:	4c38      	ldr	r4, [pc, #224]	; (8009b28 <D64_GENERIC+0x200>)
 8009a46:	fb27 1104 	smlad	r1, r7, r4, r1
 8009a4a:	4c38      	ldr	r4, [pc, #224]	; (8009b2c <D64_GENERIC+0x204>)
 8009a4c:	fb20 1104 	smlad	r1, r0, r4, r1
 8009a50:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8009a54:	fb2a 1106 	smlad	r1, sl, r6, r1
 8009a58:	4c35      	ldr	r4, [pc, #212]	; (8009b30 <D64_GENERIC+0x208>)
 8009a5a:	9d01      	ldr	r5, [sp, #4]
 8009a5c:	fb28 5404 	smlad	r4, r8, r4, r5
 8009a60:	4d33      	ldr	r5, [pc, #204]	; (8009b30 <D64_GENERIC+0x208>)
 8009a62:	fb2a 4415 	smladx	r4, sl, r5, r4
 8009a66:	4d33      	ldr	r5, [pc, #204]	; (8009b34 <D64_GENERIC+0x20c>)
 8009a68:	fb27 4405 	smlad	r4, r7, r5, r4
 8009a6c:	fb20 4415 	smladx	r4, r0, r5, r4
 8009a70:	2501      	movs	r5, #1
 8009a72:	9400      	str	r4, [sp, #0]
 8009a74:	fb28 f805 	smuad	r8, r8, r5
 8009a78:	4c2f      	ldr	r4, [pc, #188]	; (8009b38 <D64_GENERIC+0x210>)
 8009a7a:	fb27 8704 	smlad	r7, r7, r4, r8
 8009a7e:	4c2f      	ldr	r4, [pc, #188]	; (8009b3c <D64_GENERIC+0x214>)
 8009a80:	fb20 7004 	smlad	r0, r0, r4, r7
 8009a84:	4c2e      	ldr	r4, [pc, #184]	; (8009b40 <D64_GENERIC+0x218>)
 8009a86:	fb2a 0004 	smlad	r0, sl, r4, r0
 8009a8a:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8009a8e:	9902      	ldr	r1, [sp, #8]
 8009a90:	9001      	str	r0, [sp, #4]
 8009a92:	b189      	cbz	r1, 8009ab8 <D64_GENERIC+0x190>
 8009a94:	9803      	ldr	r0, [sp, #12]
 8009a96:	9c04      	ldr	r4, [sp, #16]
 8009a98:	9604      	str	r6, [sp, #16]
 8009a9a:	4430      	add	r0, r6
 8009a9c:	1b00      	subs	r0, r0, r4
 8009a9e:	17c5      	asrs	r5, r0, #31
 8009aa0:	460f      	mov	r7, r1
 8009aa2:	fba0 0101 	umull	r0, r1, r0, r1
 8009aa6:	fb07 1105 	mla	r1, r7, r5, r1
 8009aaa:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8009aae:	f141 0100 	adc.w	r1, r1, #0
 8009ab2:	0049      	lsls	r1, r1, #1
 8009ab4:	9103      	str	r1, [sp, #12]
 8009ab6:	460e      	mov	r6, r1
 8009ab8:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8009aba:	9905      	ldr	r1, [sp, #20]
 8009abc:	9806      	ldr	r0, [sp, #24]
 8009abe:	02b6      	lsls	r6, r6, #10
 8009ac0:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8009ac4:	f04f 0800 	mov.w	r8, #0
 8009ac8:	fb0c f404 	mul.w	r4, ip, r4
 8009acc:	fbc1 7806 	smlal	r7, r8, r1, r6
 8009ad0:	4641      	mov	r1, r8
 8009ad2:	1089      	asrs	r1, r1, #2
 8009ad4:	f301 010f 	ssat	r1, #16, r1
 8009ad8:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8009adc:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8009ade:	f10c 0c01 	add.w	ip, ip, #1
 8009ae2:	4561      	cmp	r1, ip
 8009ae4:	dd0e      	ble.n	8009b04 <D64_GENERIC+0x1dc>
 8009ae6:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8009ae8:	2e01      	cmp	r6, #1
 8009aea:	f47f af3a 	bne.w	8009962 <D64_GENERIC+0x3a>
 8009aee:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8009af0:	06b4      	lsls	r4, r6, #26
 8009af2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8009af6:	f109 0908 	add.w	r9, r9, #8
 8009afa:	f57f af5a 	bpl.w	80099b2 <D64_GENERIC+0x8a>
 8009afe:	ba40      	rev16	r0, r0
 8009b00:	ba49      	rev16	r1, r1
 8009b02:	e756      	b.n	80099b2 <D64_GENERIC+0x8a>
 8009b04:	61d3      	str	r3, [r2, #28]
 8009b06:	9b03      	ldr	r3, [sp, #12]
 8009b08:	9901      	ldr	r1, [sp, #4]
 8009b0a:	6113      	str	r3, [r2, #16]
 8009b0c:	9b04      	ldr	r3, [sp, #16]
 8009b0e:	6091      	str	r1, [r2, #8]
 8009b10:	6153      	str	r3, [r2, #20]
 8009b12:	9900      	ldr	r1, [sp, #0]
 8009b14:	9b07      	ldr	r3, [sp, #28]
 8009b16:	60d1      	str	r1, [r2, #12]
 8009b18:	2000      	movs	r0, #0
 8009b1a:	6193      	str	r3, [r2, #24]
 8009b1c:	b009      	add	sp, #36	; 0x24
 8009b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b22:	bf00      	nop
 8009b24:	001c0015 	.word	0x001c0015
 8009b28:	000f000a 	.word	0x000f000a
 8009b2c:	00060003 	.word	0x00060003
 8009b30:	0024002a 	.word	0x0024002a
 8009b34:	002e0030 	.word	0x002e0030
 8009b38:	00030006 	.word	0x00030006
 8009b3c:	000a000f 	.word	0x000a000f
 8009b40:	0015001c 	.word	0x0015001c
 8009b44:	200000ec 	.word	0x200000ec

08009b48 <D80_GENERIC>:
 8009b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4c:	b08b      	sub	sp, #44	; 0x2c
 8009b4e:	6914      	ldr	r4, [r2, #16]
 8009b50:	9404      	str	r4, [sp, #16]
 8009b52:	6954      	ldr	r4, [r2, #20]
 8009b54:	9405      	str	r4, [sp, #20]
 8009b56:	6994      	ldr	r4, [r2, #24]
 8009b58:	9409      	str	r4, [sp, #36]	; 0x24
 8009b5a:	6894      	ldr	r4, [r2, #8]
 8009b5c:	9402      	str	r4, [sp, #8]
 8009b5e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009b60:	68d4      	ldr	r4, [r2, #12]
 8009b62:	9401      	str	r4, [sp, #4]
 8009b64:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8009b66:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8009b6a:	9406      	str	r4, [sp, #24]
 8009b6c:	9107      	str	r1, [sp, #28]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f000 810f 	beq.w	8009d92 <D80_GENERIC+0x24a>
 8009b74:	6a13      	ldr	r3, [r2, #32]
 8009b76:	9308      	str	r3, [sp, #32]
 8009b78:	2300      	movs	r3, #0
 8009b7a:	9200      	str	r2, [sp, #0]
 8009b7c:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8009de4 <D80_GENERIC+0x29c>
 8009b80:	f8cd b00c 	str.w	fp, [sp, #12]
 8009b84:	461a      	mov	r2, r3
 8009b86:	e0ed      	b.n	8009d64 <D80_GENERIC+0x21c>
 8009b88:	fa5f fc8c 	uxtb.w	ip, ip
 8009b8c:	fa0f f48c 	sxth.w	r4, ip
 8009b90:	0066      	lsls	r6, r4, #1
 8009b92:	eb06 0804 	add.w	r8, r6, r4
 8009b96:	f1cc 0500 	rsb	r5, ip, #0
 8009b9a:	eb00 0108 	add.w	r1, r0, r8
 8009b9e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8009ba2:	194b      	adds	r3, r1, r5
 8009ba4:	5d49      	ldrb	r1, [r1, r5]
 8009ba6:	f810 a008 	ldrb.w	sl, [r0, r8]
 8009baa:	f813 b004 	ldrb.w	fp, [r3, r4]
 8009bae:	f810 c00c 	ldrb.w	ip, [r0, ip]
 8009bb2:	f890 8000 	ldrb.w	r8, [r0]
 8009bb6:	eb03 0e04 	add.w	lr, r3, r4
 8009bba:	eb0e 0705 	add.w	r7, lr, r5
 8009bbe:	0409      	lsls	r1, r1, #16
 8009bc0:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8009bc4:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8009bc8:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8009bcc:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8009bd0:	eb0a 0004 	add.w	r0, sl, r4
 8009bd4:	041b      	lsls	r3, r3, #16
 8009bd6:	f81a a004 	ldrb.w	sl, [sl, r4]
 8009bda:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8009bde:	5d44      	ldrb	r4, [r0, r5]
 8009be0:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8009be4:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8009be8:	4428      	add	r0, r5
 8009bea:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8009bee:	4441      	add	r1, r8
 8009bf0:	4430      	add	r0, r6
 8009bf2:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8009bf6:	441f      	add	r7, r3
 8009bf8:	b2cd      	uxtb	r5, r1
 8009bfa:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8009bfe:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8009c02:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8009c06:	9b03      	ldr	r3, [sp, #12]
 8009c08:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8009c0c:	0e09      	lsrs	r1, r1, #24
 8009c0e:	4433      	add	r3, r6
 8009c10:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8009c14:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8009c18:	b2fd      	uxtb	r5, r7
 8009c1a:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8009c1e:	469b      	mov	fp, r3
 8009c20:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8009c24:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8009c28:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8009c2c:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8009c30:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8009c34:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8009c38:	0e3b      	lsrs	r3, r7, #24
 8009c3a:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8009c3e:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 8009c42:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009c46:	fa5f fe84 	uxtb.w	lr, r4
 8009c4a:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8009c4e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8009c52:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8009c56:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8009c5a:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8009c5e:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8009c62:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8009c66:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8009c6a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c72:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009c76:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009c7a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009c7e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009c82:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8009c86:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8009c8a:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8009c8e:	0aa3      	lsrs	r3, r4, #10
 8009c90:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009c94:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009c98:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009c9c:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8009ca0:	9303      	str	r3, [sp, #12]
 8009ca2:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8009ca6:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8009caa:	4b42      	ldr	r3, [pc, #264]	; (8009db4 <D80_GENERIC+0x26c>)
 8009cac:	9901      	ldr	r1, [sp, #4]
 8009cae:	fb2b 1303 	smlad	r3, fp, r3, r1
 8009cb2:	4941      	ldr	r1, [pc, #260]	; (8009db8 <D80_GENERIC+0x270>)
 8009cb4:	fb28 3301 	smlad	r3, r8, r1, r3
 8009cb8:	4940      	ldr	r1, [pc, #256]	; (8009dbc <D80_GENERIC+0x274>)
 8009cba:	fb2c 3301 	smlad	r3, ip, r1, r3
 8009cbe:	4940      	ldr	r1, [pc, #256]	; (8009dc0 <D80_GENERIC+0x278>)
 8009cc0:	fb27 3301 	smlad	r3, r7, r1, r3
 8009cc4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8009cc8:	fb2e 3301 	smlad	r3, lr, r1, r3
 8009ccc:	493d      	ldr	r1, [pc, #244]	; (8009dc4 <D80_GENERIC+0x27c>)
 8009cce:	9c02      	ldr	r4, [sp, #8]
 8009cd0:	fb2b 4401 	smlad	r4, fp, r1, r4
 8009cd4:	493c      	ldr	r1, [pc, #240]	; (8009dc8 <D80_GENERIC+0x280>)
 8009cd6:	fb28 4401 	smlad	r4, r8, r1, r4
 8009cda:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8009cde:	fb2c 4101 	smlad	r1, ip, r1, r4
 8009ce2:	4c3a      	ldr	r4, [pc, #232]	; (8009dcc <D80_GENERIC+0x284>)
 8009ce4:	fb27 1104 	smlad	r1, r7, r4, r1
 8009ce8:	4c39      	ldr	r4, [pc, #228]	; (8009dd0 <D80_GENERIC+0x288>)
 8009cea:	fb2e 1104 	smlad	r1, lr, r4, r1
 8009cee:	9101      	str	r1, [sp, #4]
 8009cf0:	2101      	movs	r1, #1
 8009cf2:	fb2b fb01 	smuad	fp, fp, r1
 8009cf6:	4937      	ldr	r1, [pc, #220]	; (8009dd4 <D80_GENERIC+0x28c>)
 8009cf8:	fb28 b801 	smlad	r8, r8, r1, fp
 8009cfc:	4d36      	ldr	r5, [pc, #216]	; (8009dd8 <D80_GENERIC+0x290>)
 8009cfe:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8009d02:	4d36      	ldr	r5, [pc, #216]	; (8009ddc <D80_GENERIC+0x294>)
 8009d04:	fb27 c705 	smlad	r7, r7, r5, ip
 8009d08:	4d35      	ldr	r5, [pc, #212]	; (8009de0 <D80_GENERIC+0x298>)
 8009d0a:	fb2e 7105 	smlad	r1, lr, r5, r7
 8009d0e:	9102      	str	r1, [sp, #8]
 8009d10:	9908      	ldr	r1, [sp, #32]
 8009d12:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8009d16:	b181      	cbz	r1, 8009d3a <D80_GENERIC+0x1f2>
 8009d18:	9c04      	ldr	r4, [sp, #16]
 8009d1a:	9d05      	ldr	r5, [sp, #20]
 8009d1c:	9305      	str	r3, [sp, #20]
 8009d1e:	441c      	add	r4, r3
 8009d20:	1b64      	subs	r4, r4, r5
 8009d22:	17e7      	asrs	r7, r4, #31
 8009d24:	fba4 4501 	umull	r4, r5, r4, r1
 8009d28:	fb01 5507 	mla	r5, r1, r7, r5
 8009d2c:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8009d30:	f145 0500 	adc.w	r5, r5, #0
 8009d34:	0069      	lsls	r1, r5, #1
 8009d36:	9104      	str	r1, [sp, #16]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	9e00      	ldr	r6, [sp, #0]
 8009d3c:	9f06      	ldr	r7, [sp, #24]
 8009d3e:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8009d40:	025b      	lsls	r3, r3, #9
 8009d42:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009d46:	2500      	movs	r5, #0
 8009d48:	fb02 f101 	mul.w	r1, r2, r1
 8009d4c:	fbc7 4503 	smlal	r4, r5, r7, r3
 8009d50:	9c07      	ldr	r4, [sp, #28]
 8009d52:	10ab      	asrs	r3, r5, #2
 8009d54:	f303 030f 	ssat	r3, #16, r3
 8009d58:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8009d5c:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8009d5e:	3201      	adds	r2, #1
 8009d60:	4293      	cmp	r3, r2
 8009d62:	dd13      	ble.n	8009d8c <D80_GENERIC+0x244>
 8009d64:	9b00      	ldr	r3, [sp, #0]
 8009d66:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8009d6a:	f1bc 0f01 	cmp.w	ip, #1
 8009d6e:	f47f af0b 	bne.w	8009b88 <D80_GENERIC+0x40>
 8009d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d74:	6884      	ldr	r4, [r0, #8]
 8009d76:	069b      	lsls	r3, r3, #26
 8009d78:	e890 0082 	ldmia.w	r0, {r1, r7}
 8009d7c:	f100 000a 	add.w	r0, r0, #10
 8009d80:	f57f af3a 	bpl.w	8009bf8 <D80_GENERIC+0xb0>
 8009d84:	ba49      	rev16	r1, r1
 8009d86:	ba7f      	rev16	r7, r7
 8009d88:	ba64      	rev16	r4, r4
 8009d8a:	e735      	b.n	8009bf8 <D80_GENERIC+0xb0>
 8009d8c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009d90:	4632      	mov	r2, r6
 8009d92:	9b02      	ldr	r3, [sp, #8]
 8009d94:	6093      	str	r3, [r2, #8]
 8009d96:	9b01      	ldr	r3, [sp, #4]
 8009d98:	60d3      	str	r3, [r2, #12]
 8009d9a:	9b04      	ldr	r3, [sp, #16]
 8009d9c:	6113      	str	r3, [r2, #16]
 8009d9e:	9b05      	ldr	r3, [sp, #20]
 8009da0:	6153      	str	r3, [r2, #20]
 8009da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009da4:	f8c2 b01c 	str.w	fp, [r2, #28]
 8009da8:	2000      	movs	r0, #0
 8009daa:	6193      	str	r3, [r2, #24]
 8009dac:	b00b      	add	sp, #44	; 0x2c
 8009dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009db2:	bf00      	nop
 8009db4:	002d0024 	.word	0x002d0024
 8009db8:	001c0015 	.word	0x001c0015
 8009dbc:	000f000a 	.word	0x000f000a
 8009dc0:	00060003 	.word	0x00060003
 8009dc4:	0037003f 	.word	0x0037003f
 8009dc8:	00450049 	.word	0x00450049
 8009dcc:	00490045 	.word	0x00490045
 8009dd0:	003f0037 	.word	0x003f0037
 8009dd4:	00030006 	.word	0x00030006
 8009dd8:	000a000f 	.word	0x000a000f
 8009ddc:	0015001c 	.word	0x0015001c
 8009de0:	0024002d 	.word	0x0024002d
 8009de4:	200000ec 	.word	0x200000ec

08009de8 <D128_GENERIC>:
 8009de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dec:	b093      	sub	sp, #76	; 0x4c
 8009dee:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8009df0:	9005      	str	r0, [sp, #20]
 8009df2:	4610      	mov	r0, r2
 8009df4:	9201      	str	r2, [sp, #4]
 8009df6:	6912      	ldr	r2, [r2, #16]
 8009df8:	920c      	str	r2, [sp, #48]	; 0x30
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	6940      	ldr	r0, [r0, #20]
 8009dfe:	900d      	str	r0, [sp, #52]	; 0x34
 8009e00:	4610      	mov	r0, r2
 8009e02:	4614      	mov	r4, r2
 8009e04:	6992      	ldr	r2, [r2, #24]
 8009e06:	9211      	str	r2, [sp, #68]	; 0x44
 8009e08:	69c2      	ldr	r2, [r0, #28]
 8009e0a:	9202      	str	r2, [sp, #8]
 8009e0c:	68e2      	ldr	r2, [r4, #12]
 8009e0e:	6880      	ldr	r0, [r0, #8]
 8009e10:	9203      	str	r2, [sp, #12]
 8009e12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009e14:	9004      	str	r0, [sp, #16]
 8009e16:	920e      	str	r2, [sp, #56]	; 0x38
 8009e18:	910f      	str	r1, [sp, #60]	; 0x3c
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 819b 	beq.w	800a156 <D128_GENERIC+0x36e>
 8009e20:	6a23      	ldr	r3, [r4, #32]
 8009e22:	9310      	str	r3, [sp, #64]	; 0x40
 8009e24:	2300      	movs	r3, #0
 8009e26:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800a1d0 <D128_GENERIC+0x3e8>
 8009e2a:	9306      	str	r3, [sp, #24]
 8009e2c:	e17a      	b.n	800a124 <D128_GENERIC+0x33c>
 8009e2e:	b2d2      	uxtb	r2, r2
 8009e30:	9d05      	ldr	r5, [sp, #20]
 8009e32:	b214      	sxth	r4, r2
 8009e34:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8009e38:	4250      	negs	r0, r2
 8009e3a:	eb05 010a 	add.w	r1, r5, sl
 8009e3e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e42:	eb01 0800 	add.w	r8, r1, r0
 8009e46:	eb0b 0c04 	add.w	ip, fp, r4
 8009e4a:	eb08 070c 	add.w	r7, r8, ip
 8009e4e:	183b      	adds	r3, r7, r0
 8009e50:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8009e54:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8009e58:	eb0e 0604 	add.w	r6, lr, r4
 8009e5c:	9307      	str	r3, [sp, #28]
 8009e5e:	1833      	adds	r3, r6, r0
 8009e60:	9305      	str	r3, [sp, #20]
 8009e62:	462b      	mov	r3, r5
 8009e64:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8009e68:	f8cd a020 	str.w	sl, [sp, #32]
 8009e6c:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8009e70:	f813 c002 	ldrb.w	ip, [r3, r2]
 8009e74:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8009e78:	5c3a      	ldrb	r2, [r7, r0]
 8009e7a:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 8009e7e:	781f      	ldrb	r7, [r3, #0]
 8009e80:	9b07      	ldr	r3, [sp, #28]
 8009e82:	9d05      	ldr	r5, [sp, #20]
 8009e84:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8009e88:	5c09      	ldrb	r1, [r1, r0]
 8009e8a:	9709      	str	r7, [sp, #36]	; 0x24
 8009e8c:	9307      	str	r3, [sp, #28]
 8009e8e:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8009e92:	5c33      	ldrb	r3, [r6, r0]
 8009e94:	0412      	lsls	r2, r2, #16
 8009e96:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8009e9a:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8009e9e:	9d08      	ldr	r5, [sp, #32]
 8009ea0:	eb06 0a04 	add.w	sl, r6, r4
 8009ea4:	0409      	lsls	r1, r1, #16
 8009ea6:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8009eaa:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8009eae:	5d36      	ldrb	r6, [r6, r4]
 8009eb0:	9c05      	ldr	r4, [sp, #20]
 8009eb2:	042d      	lsls	r5, r5, #16
 8009eb4:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8009eb8:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8009ebc:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8009ec0:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8009ec4:	eb0a 0c00 	add.w	ip, sl, r0
 8009ec8:	041b      	lsls	r3, r3, #16
 8009eca:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8009ece:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8009ed2:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8009ed6:	9d07      	ldr	r5, [sp, #28]
 8009ed8:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8009edc:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8009ee0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009ee2:	4458      	add	r0, fp
 8009ee4:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8009ee8:	9005      	str	r0, [sp, #20]
 8009eea:	4439      	add	r1, r7
 8009eec:	442a      	add	r2, r5
 8009eee:	44b2      	add	sl, r6
 8009ef0:	1918      	adds	r0, r3, r4
 8009ef2:	b2cb      	uxtb	r3, r1
 8009ef4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8009ef8:	9e02      	ldr	r6, [sp, #8]
 8009efa:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009efe:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8009f02:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8009f06:	441e      	add	r6, r3
 8009f08:	0e09      	lsrs	r1, r1, #24
 8009f0a:	4633      	mov	r3, r6
 8009f0c:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009f10:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8009f14:	b2d4      	uxtb	r4, r2
 8009f16:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8009f1a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009f1e:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8009f22:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009f26:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009f2a:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009f2e:	0e12      	lsrs	r2, r2, #24
 8009f30:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8009f34:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8009f38:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009f3c:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8009f40:	9702      	str	r7, [sp, #8]
 8009f42:	b2c2      	uxtb	r2, r0
 8009f44:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8009f48:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8009f4c:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8009f50:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8009f54:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8009f58:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8009f5c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8009f60:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8009f64:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8009f68:	0e00      	lsrs	r0, r0, #24
 8009f6a:	fa5f f68a 	uxtb.w	r6, sl
 8009f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f72:	9309      	str	r3, [sp, #36]	; 0x24
 8009f74:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8009f78:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8009f7c:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8009f80:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8009f84:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009f88:	950a      	str	r5, [sp, #40]	; 0x28
 8009f8a:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8009f8e:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8009f92:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8009f96:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009f9a:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8009f9e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009fa2:	920b      	str	r2, [sp, #44]	; 0x2c
 8009fa4:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8009fa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009faa:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8009fae:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009fb2:	9307      	str	r3, [sp, #28]
 8009fb4:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8009fb8:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8009fbc:	9b02      	ldr	r3, [sp, #8]
 8009fbe:	f8cd c008 	str.w	ip, [sp, #8]
 8009fc2:	4694      	mov	ip, r2
 8009fc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fc6:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8009fca:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8009fce:	9a02      	ldr	r2, [sp, #8]
 8009fd0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009fd4:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8009fd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009fdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fde:	f8cd a020 	str.w	sl, [sp, #32]
 8009fe2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009fe6:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8009fea:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009fee:	9b07      	ldr	r3, [sp, #28]
 8009ff0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009ff4:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8009ff8:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8009ffc:	9a08      	ldr	r2, [sp, #32]
 8009ffe:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a002:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a006:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a00a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a00e:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800a012:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800a016:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a01a:	0a96      	lsrs	r6, r2, #10
 800a01c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a020:	9602      	str	r6, [sp, #8]
 800a022:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800a026:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800a02a:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800a02e:	4e53      	ldr	r6, [pc, #332]	; (800a17c <D128_GENERIC+0x394>)
 800a030:	9f03      	ldr	r7, [sp, #12]
 800a032:	fb2c 7606 	smlad	r6, ip, r6, r7
 800a036:	4f52      	ldr	r7, [pc, #328]	; (800a180 <D128_GENERIC+0x398>)
 800a038:	fb2a 6607 	smlad	r6, sl, r7, r6
 800a03c:	4f51      	ldr	r7, [pc, #324]	; (800a184 <D128_GENERIC+0x39c>)
 800a03e:	fb21 6607 	smlad	r6, r1, r7, r6
 800a042:	4f51      	ldr	r7, [pc, #324]	; (800a188 <D128_GENERIC+0x3a0>)
 800a044:	fb24 6607 	smlad	r6, r4, r7, r6
 800a048:	4f50      	ldr	r7, [pc, #320]	; (800a18c <D128_GENERIC+0x3a4>)
 800a04a:	fb28 6607 	smlad	r6, r8, r7, r6
 800a04e:	4f50      	ldr	r7, [pc, #320]	; (800a190 <D128_GENERIC+0x3a8>)
 800a050:	fb20 6607 	smlad	r6, r0, r7, r6
 800a054:	4f4f      	ldr	r7, [pc, #316]	; (800a194 <D128_GENERIC+0x3ac>)
 800a056:	fb23 6607 	smlad	r6, r3, r7, r6
 800a05a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800a05e:	fb25 6607 	smlad	r6, r5, r7, r6
 800a062:	4f4d      	ldr	r7, [pc, #308]	; (800a198 <D128_GENERIC+0x3b0>)
 800a064:	9a04      	ldr	r2, [sp, #16]
 800a066:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800a06a:	4a4c      	ldr	r2, [pc, #304]	; (800a19c <D128_GENERIC+0x3b4>)
 800a06c:	fb2a ee02 	smlad	lr, sl, r2, lr
 800a070:	4f4b      	ldr	r7, [pc, #300]	; (800a1a0 <D128_GENERIC+0x3b8>)
 800a072:	fb21 ee07 	smlad	lr, r1, r7, lr
 800a076:	4f4b      	ldr	r7, [pc, #300]	; (800a1a4 <D128_GENERIC+0x3bc>)
 800a078:	fb24 ee07 	smlad	lr, r4, r7, lr
 800a07c:	4f4a      	ldr	r7, [pc, #296]	; (800a1a8 <D128_GENERIC+0x3c0>)
 800a07e:	fb28 ee07 	smlad	lr, r8, r7, lr
 800a082:	4f4a      	ldr	r7, [pc, #296]	; (800a1ac <D128_GENERIC+0x3c4>)
 800a084:	fb20 ee07 	smlad	lr, r0, r7, lr
 800a088:	4f49      	ldr	r7, [pc, #292]	; (800a1b0 <D128_GENERIC+0x3c8>)
 800a08a:	fb23 e707 	smlad	r7, r3, r7, lr
 800a08e:	f8df e144 	ldr.w	lr, [pc, #324]	; 800a1d4 <D128_GENERIC+0x3ec>
 800a092:	fb25 720e 	smlad	r2, r5, lr, r7
 800a096:	f04f 0b01 	mov.w	fp, #1
 800a09a:	9203      	str	r2, [sp, #12]
 800a09c:	fb2c fb0b 	smuad	fp, ip, fp
 800a0a0:	4f44      	ldr	r7, [pc, #272]	; (800a1b4 <D128_GENERIC+0x3cc>)
 800a0a2:	fb2a ba07 	smlad	sl, sl, r7, fp
 800a0a6:	4f44      	ldr	r7, [pc, #272]	; (800a1b8 <D128_GENERIC+0x3d0>)
 800a0a8:	fb21 aa07 	smlad	sl, r1, r7, sl
 800a0ac:	4f43      	ldr	r7, [pc, #268]	; (800a1bc <D128_GENERIC+0x3d4>)
 800a0ae:	fb24 aa07 	smlad	sl, r4, r7, sl
 800a0b2:	4f43      	ldr	r7, [pc, #268]	; (800a1c0 <D128_GENERIC+0x3d8>)
 800a0b4:	fb28 a707 	smlad	r7, r8, r7, sl
 800a0b8:	4a42      	ldr	r2, [pc, #264]	; (800a1c4 <D128_GENERIC+0x3dc>)
 800a0ba:	fb20 7702 	smlad	r7, r0, r2, r7
 800a0be:	4a42      	ldr	r2, [pc, #264]	; (800a1c8 <D128_GENERIC+0x3e0>)
 800a0c0:	fb23 7702 	smlad	r7, r3, r2, r7
 800a0c4:	4b41      	ldr	r3, [pc, #260]	; (800a1cc <D128_GENERIC+0x3e4>)
 800a0c6:	fb25 7303 	smlad	r3, r5, r3, r7
 800a0ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a0cc:	9304      	str	r3, [sp, #16]
 800a0ce:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800a0d2:	b185      	cbz	r5, 800a0f6 <D128_GENERIC+0x30e>
 800a0d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a0d8:	960d      	str	r6, [sp, #52]	; 0x34
 800a0da:	4432      	add	r2, r6
 800a0dc:	1a52      	subs	r2, r2, r1
 800a0de:	17d1      	asrs	r1, r2, #31
 800a0e0:	fba2 2305 	umull	r2, r3, r2, r5
 800a0e4:	fb05 3301 	mla	r3, r5, r1, r3
 800a0e8:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a0ec:	f143 0300 	adc.w	r3, r3, #0
 800a0f0:	005b      	lsls	r3, r3, #1
 800a0f2:	930c      	str	r3, [sp, #48]	; 0x30
 800a0f4:	461e      	mov	r6, r3
 800a0f6:	9801      	ldr	r0, [sp, #4]
 800a0f8:	9c06      	ldr	r4, [sp, #24]
 800a0fa:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800a0fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a0fe:	01f6      	lsls	r6, r6, #7
 800a100:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a104:	2300      	movs	r3, #0
 800a106:	fbc5 2306 	smlal	r2, r3, r5, r6
 800a10a:	fb04 f101 	mul.w	r1, r4, r1
 800a10e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a110:	109b      	asrs	r3, r3, #2
 800a112:	f303 030f 	ssat	r3, #16, r3
 800a116:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800a11a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800a11c:	1c62      	adds	r2, r4, #1
 800a11e:	4293      	cmp	r3, r2
 800a120:	9206      	str	r2, [sp, #24]
 800a122:	dd18      	ble.n	800a156 <D128_GENERIC+0x36e>
 800a124:	9b01      	ldr	r3, [sp, #4]
 800a126:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a128:	2a01      	cmp	r2, #1
 800a12a:	f47f ae80 	bne.w	8009e2e <D128_GENERIC+0x46>
 800a12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a130:	9d05      	ldr	r5, [sp, #20]
 800a132:	069b      	lsls	r3, r3, #26
 800a134:	6829      	ldr	r1, [r5, #0]
 800a136:	686a      	ldr	r2, [r5, #4]
 800a138:	68a8      	ldr	r0, [r5, #8]
 800a13a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800a13e:	f105 0410 	add.w	r4, r5, #16
 800a142:	d506      	bpl.n	800a152 <D128_GENERIC+0x36a>
 800a144:	ba49      	rev16	r1, r1
 800a146:	ba52      	rev16	r2, r2
 800a148:	ba40      	rev16	r0, r0
 800a14a:	fa9a fa9a 	rev16.w	sl, sl
 800a14e:	9405      	str	r4, [sp, #20]
 800a150:	e6cf      	b.n	8009ef2 <D128_GENERIC+0x10a>
 800a152:	9405      	str	r4, [sp, #20]
 800a154:	e6cd      	b.n	8009ef2 <D128_GENERIC+0x10a>
 800a156:	9a01      	ldr	r2, [sp, #4]
 800a158:	9904      	ldr	r1, [sp, #16]
 800a15a:	6091      	str	r1, [r2, #8]
 800a15c:	9903      	ldr	r1, [sp, #12]
 800a15e:	60d1      	str	r1, [r2, #12]
 800a160:	9b02      	ldr	r3, [sp, #8]
 800a162:	61d3      	str	r3, [r2, #28]
 800a164:	4611      	mov	r1, r2
 800a166:	4613      	mov	r3, r2
 800a168:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a16a:	610a      	str	r2, [r1, #16]
 800a16c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a16e:	6159      	str	r1, [r3, #20]
 800a170:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a172:	6199      	str	r1, [r3, #24]
 800a174:	2000      	movs	r0, #0
 800a176:	b013      	add	sp, #76	; 0x4c
 800a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17c:	00780069 	.word	0x00780069
 800a180:	005b004e 	.word	0x005b004e
 800a184:	00420037 	.word	0x00420037
 800a188:	002d0024 	.word	0x002d0024
 800a18c:	001c0015 	.word	0x001c0015
 800a190:	000f000a 	.word	0x000f000a
 800a194:	00060003 	.word	0x00060003
 800a198:	00880096 	.word	0x00880096
 800a19c:	00a200ac 	.word	0x00a200ac
 800a1a0:	00b400ba 	.word	0x00b400ba
 800a1a4:	00be00c0 	.word	0x00be00c0
 800a1a8:	00c000be 	.word	0x00c000be
 800a1ac:	00ba00b4 	.word	0x00ba00b4
 800a1b0:	00ac00a2 	.word	0x00ac00a2
 800a1b4:	00030006 	.word	0x00030006
 800a1b8:	000a000f 	.word	0x000a000f
 800a1bc:	0015001c 	.word	0x0015001c
 800a1c0:	0024002d 	.word	0x0024002d
 800a1c4:	00370042 	.word	0x00370042
 800a1c8:	004e005b 	.word	0x004e005b
 800a1cc:	00690078 	.word	0x00690078
 800a1d0:	200000ec 	.word	0x200000ec
 800a1d4:	00960088 	.word	0x00960088

0800a1d8 <D16_1CH_HTONS_VOL_HP>:
 800a1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1dc:	4691      	mov	r9, r2
 800a1de:	b083      	sub	sp, #12
 800a1e0:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a1e2:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800a1e6:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800a1ea:	9300      	str	r3, [sp, #0]
 800a1ec:	4680      	mov	r8, r0
 800a1ee:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800a1f2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a1f6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a1fa:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800a1fe:	9401      	str	r4, [sp, #4]
 800a200:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800a204:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800a208:	2a00      	cmp	r2, #0
 800a20a:	d04e      	beq.n	800a2aa <D16_1CH_HTONS_VOL_HP+0xd2>
 800a20c:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800a2b8 <D16_1CH_HTONS_VOL_HP+0xe0>
 800a210:	1e8c      	subs	r4, r1, #2
 800a212:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800a216:	f858 2b02 	ldr.w	r2, [r8], #2
 800a21a:	ba52      	rev16	r2, r2
 800a21c:	b2d6      	uxtb	r6, r2
 800a21e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a222:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800a226:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800a22a:	4413      	add	r3, r2
 800a22c:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800a230:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800a234:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a238:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a23c:	0a93      	lsrs	r3, r2, #10
 800a23e:	4a1c      	ldr	r2, [pc, #112]	; (800a2b0 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800a240:	fb21 5202 	smlad	r2, r1, r2, r5
 800a244:	4d1b      	ldr	r5, [pc, #108]	; (800a2b4 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800a246:	fb21 f505 	smuad	r5, r1, r5
 800a24a:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800a24e:	4410      	add	r0, r2
 800a250:	1bc0      	subs	r0, r0, r7
 800a252:	17c7      	asrs	r7, r0, #31
 800a254:	fba0 010e 	umull	r0, r1, r0, lr
 800a258:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800a25c:	fb0e 1107 	mla	r1, lr, r7, r1
 800a260:	f141 0100 	adc.w	r1, r1, #0
 800a264:	0448      	lsls	r0, r1, #17
 800a266:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a26a:	2700      	movs	r7, #0
 800a26c:	fbc0 670a 	smlal	r6, r7, r0, sl
 800a270:	45d8      	cmp	r8, fp
 800a272:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800a276:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800a27a:	4617      	mov	r7, r2
 800a27c:	f301 010f 	ssat	r1, #16, r1
 800a280:	f824 1f02 	strh.w	r1, [r4, #2]!
 800a284:	d1c7      	bne.n	800a216 <D16_1CH_HTONS_VOL_HP+0x3e>
 800a286:	9901      	ldr	r1, [sp, #4]
 800a288:	f8c9 301c 	str.w	r3, [r9, #28]
 800a28c:	9b00      	ldr	r3, [sp, #0]
 800a28e:	f8c9 0010 	str.w	r0, [r9, #16]
 800a292:	2000      	movs	r0, #0
 800a294:	f8c9 5008 	str.w	r5, [r9, #8]
 800a298:	f8c9 100c 	str.w	r1, [r9, #12]
 800a29c:	f8c9 2014 	str.w	r2, [r9, #20]
 800a2a0:	f8c9 3018 	str.w	r3, [r9, #24]
 800a2a4:	b003      	add	sp, #12
 800a2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2aa:	463a      	mov	r2, r7
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	e7eb      	b.n	800a288 <D16_1CH_HTONS_VOL_HP+0xb0>
 800a2b0:	00030001 	.word	0x00030001
 800a2b4:	00010003 	.word	0x00010003
 800a2b8:	200000ec 	.word	0x200000ec

0800a2bc <D24_1CH_HTONS_VOL_HP>:
 800a2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c0:	b089      	sub	sp, #36	; 0x24
 800a2c2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a2c4:	6996      	ldr	r6, [r2, #24]
 800a2c6:	9304      	str	r3, [sp, #16]
 800a2c8:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800a2ca:	9207      	str	r2, [sp, #28]
 800a2cc:	6915      	ldr	r5, [r2, #16]
 800a2ce:	6954      	ldr	r4, [r2, #20]
 800a2d0:	9606      	str	r6, [sp, #24]
 800a2d2:	6893      	ldr	r3, [r2, #8]
 800a2d4:	69d6      	ldr	r6, [r2, #28]
 800a2d6:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800a2da:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800a2de:	9a04      	ldr	r2, [sp, #16]
 800a2e0:	9705      	str	r7, [sp, #20]
 800a2e2:	2a00      	cmp	r2, #0
 800a2e4:	d07e      	beq.n	800a3e4 <D24_1CH_HTONS_VOL_HP+0x128>
 800a2e6:	f1a1 0b02 	sub.w	fp, r1, #2
 800a2ea:	2700      	movs	r7, #0
 800a2ec:	46a8      	mov	r8, r5
 800a2ee:	f8cd b004 	str.w	fp, [sp, #4]
 800a2f2:	4655      	mov	r5, sl
 800a2f4:	46e3      	mov	fp, ip
 800a2f6:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800a3f0 <D24_1CH_HTONS_VOL_HP+0x134>
 800a2fa:	46ba      	mov	sl, r7
 800a2fc:	469c      	mov	ip, r3
 800a2fe:	e055      	b.n	800a3ac <D24_1CH_HTONS_VOL_HP+0xf0>
 800a300:	7802      	ldrb	r2, [r0, #0]
 800a302:	78c3      	ldrb	r3, [r0, #3]
 800a304:	7841      	ldrb	r1, [r0, #1]
 800a306:	0212      	lsls	r2, r2, #8
 800a308:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800a30c:	440b      	add	r3, r1
 800a30e:	3002      	adds	r0, #2
 800a310:	b2d9      	uxtb	r1, r3
 800a312:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a316:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800a31a:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800a31e:	0c1b      	lsrs	r3, r3, #16
 800a320:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800a324:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800a328:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800a32c:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800a330:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800a334:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800a338:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800a33c:	4a2a      	ldr	r2, [pc, #168]	; (800a3e8 <D24_1CH_HTONS_VOL_HP+0x12c>)
 800a33e:	fb23 b102 	smlad	r1, r3, r2, fp
 800a342:	4a2a      	ldr	r2, [pc, #168]	; (800a3ec <D24_1CH_HTONS_VOL_HP+0x130>)
 800a344:	fb23 cb02 	smlad	fp, r3, r2, ip
 800a348:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800a34c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800a350:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800a354:	2201      	movs	r2, #1
 800a356:	fb23 f702 	smuad	r7, r3, r2
 800a35a:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800a35e:	eb01 0208 	add.w	r2, r1, r8
 800a362:	1b12      	subs	r2, r2, r4
 800a364:	17d4      	asrs	r4, r2, #31
 800a366:	fba2 2305 	umull	r2, r3, r2, r5
 800a36a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a36e:	fb05 3304 	mla	r3, r5, r4, r3
 800a372:	f143 0300 	adc.w	r3, r3, #0
 800a376:	9c05      	ldr	r4, [sp, #20]
 800a378:	03da      	lsls	r2, r3, #15
 800a37a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a37e:	f04f 0900 	mov.w	r9, #0
 800a382:	fbc4 8902 	smlal	r8, r9, r4, r2
 800a386:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a38a:	9a01      	ldr	r2, [sp, #4]
 800a38c:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800a390:	9b03      	ldr	r3, [sp, #12]
 800a392:	109b      	asrs	r3, r3, #2
 800a394:	f303 030f 	ssat	r3, #16, r3
 800a398:	f822 3f02 	strh.w	r3, [r2, #2]!
 800a39c:	9b04      	ldr	r3, [sp, #16]
 800a39e:	9201      	str	r2, [sp, #4]
 800a3a0:	f10a 0a01 	add.w	sl, sl, #1
 800a3a4:	459a      	cmp	sl, r3
 800a3a6:	44bc      	add	ip, r7
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	d00b      	beq.n	800a3c4 <D24_1CH_HTONS_VOL_HP+0x108>
 800a3ac:	f01a 0f01 	tst.w	sl, #1
 800a3b0:	d0a6      	beq.n	800a300 <D24_1CH_HTONS_VOL_HP+0x44>
 800a3b2:	78c2      	ldrb	r2, [r0, #3]
 800a3b4:	7883      	ldrb	r3, [r0, #2]
 800a3b6:	f810 1b04 	ldrb.w	r1, [r0], #4
 800a3ba:	0212      	lsls	r2, r2, #8
 800a3bc:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800a3c0:	440b      	add	r3, r1
 800a3c2:	e7a5      	b.n	800a310 <D24_1CH_HTONS_VOL_HP+0x54>
 800a3c4:	4663      	mov	r3, ip
 800a3c6:	4645      	mov	r5, r8
 800a3c8:	46dc      	mov	ip, fp
 800a3ca:	9807      	ldr	r0, [sp, #28]
 800a3cc:	6141      	str	r1, [r0, #20]
 800a3ce:	9906      	ldr	r1, [sp, #24]
 800a3d0:	6083      	str	r3, [r0, #8]
 800a3d2:	f8c0 c00c 	str.w	ip, [r0, #12]
 800a3d6:	61c6      	str	r6, [r0, #28]
 800a3d8:	6105      	str	r5, [r0, #16]
 800a3da:	6181      	str	r1, [r0, #24]
 800a3dc:	2000      	movs	r0, #0
 800a3de:	b009      	add	sp, #36	; 0x24
 800a3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e4:	4621      	mov	r1, r4
 800a3e6:	e7f0      	b.n	800a3ca <D24_1CH_HTONS_VOL_HP+0x10e>
 800a3e8:	00030001 	.word	0x00030001
 800a3ec:	00060007 	.word	0x00060007
 800a3f0:	200000ec 	.word	0x200000ec

0800a3f4 <D32_1CH_HTONS_VOL_HP>:
 800a3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f8:	4692      	mov	sl, r2
 800a3fa:	b087      	sub	sp, #28
 800a3fc:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a3fe:	f8da 3018 	ldr.w	r3, [sl, #24]
 800a402:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800a406:	9304      	str	r3, [sp, #16]
 800a408:	f8da 4010 	ldr.w	r4, [sl, #16]
 800a40c:	f8da 8014 	ldr.w	r8, [sl, #20]
 800a410:	f8da 601c 	ldr.w	r6, [sl, #28]
 800a414:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a418:	f8da e00c 	ldr.w	lr, [sl, #12]
 800a41c:	9501      	str	r5, [sp, #4]
 800a41e:	f8da c020 	ldr.w	ip, [sl, #32]
 800a422:	2a00      	cmp	r2, #0
 800a424:	d07b      	beq.n	800a51e <D32_1CH_HTONS_VOL_HP+0x12a>
 800a426:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a42a:	4f3e      	ldr	r7, [pc, #248]	; (800a524 <D32_1CH_HTONS_VOL_HP+0x130>)
 800a42c:	f8cd c00c 	str.w	ip, [sp, #12]
 800a430:	9202      	str	r2, [sp, #8]
 800a432:	460d      	mov	r5, r1
 800a434:	46a1      	mov	r9, r4
 800a436:	4684      	mov	ip, r0
 800a438:	f8cd a014 	str.w	sl, [sp, #20]
 800a43c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a440:	ba49      	rev16	r1, r1
 800a442:	b2c8      	uxtb	r0, r1
 800a444:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800a448:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800a44c:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800a450:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a454:	0e09      	lsrs	r1, r1, #24
 800a456:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800a45a:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800a45e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800a462:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800a466:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800a46a:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800a46e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a472:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800a476:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a47a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a47e:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800a482:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800a486:	4a28      	ldr	r2, [pc, #160]	; (800a528 <D32_1CH_HTONS_VOL_HP+0x134>)
 800a488:	fb20 e202 	smlad	r2, r0, r2, lr
 800a48c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a490:	fb2a 2101 	smlad	r1, sl, r1, r2
 800a494:	4a25      	ldr	r2, [pc, #148]	; (800a52c <D32_1CH_HTONS_VOL_HP+0x138>)
 800a496:	fb20 3302 	smlad	r3, r0, r2, r3
 800a49a:	4a25      	ldr	r2, [pc, #148]	; (800a530 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800a49c:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	fb20 f003 	smuad	r0, r0, r3
 800a4a6:	4b23      	ldr	r3, [pc, #140]	; (800a534 <D32_1CH_HTONS_VOL_HP+0x140>)
 800a4a8:	fb2a 0303 	smlad	r3, sl, r3, r0
 800a4ac:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800a4b0:	9c03      	ldr	r4, [sp, #12]
 800a4b2:	eb02 0009 	add.w	r0, r2, r9
 800a4b6:	eba0 0008 	sub.w	r0, r0, r8
 800a4ba:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800a4be:	fba0 0104 	umull	r0, r1, r0, r4
 800a4c2:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800a4c6:	fb04 110b 	mla	r1, r4, fp, r1
 800a4ca:	f141 0100 	adc.w	r1, r1, #0
 800a4ce:	9c01      	ldr	r4, [sp, #4]
 800a4d0:	0388      	lsls	r0, r1, #14
 800a4d2:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a4d6:	f04f 0900 	mov.w	r9, #0
 800a4da:	fbc0 8904 	smlal	r8, r9, r0, r4
 800a4de:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800a4e2:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800a4e6:	f300 000f 	ssat	r0, #16, r0
 800a4ea:	9902      	ldr	r1, [sp, #8]
 800a4ec:	f825 0b02 	strh.w	r0, [r5], #2
 800a4f0:	428d      	cmp	r5, r1
 800a4f2:	4690      	mov	r8, r2
 800a4f4:	d1a2      	bne.n	800a43c <D32_1CH_HTONS_VOL_HP+0x48>
 800a4f6:	f8dd a014 	ldr.w	sl, [sp, #20]
 800a4fa:	464c      	mov	r4, r9
 800a4fc:	f8ca 3008 	str.w	r3, [sl, #8]
 800a500:	9b04      	ldr	r3, [sp, #16]
 800a502:	f8ca e00c 	str.w	lr, [sl, #12]
 800a506:	2000      	movs	r0, #0
 800a508:	f8ca 601c 	str.w	r6, [sl, #28]
 800a50c:	f8ca 4010 	str.w	r4, [sl, #16]
 800a510:	f8ca 2014 	str.w	r2, [sl, #20]
 800a514:	f8ca 3018 	str.w	r3, [sl, #24]
 800a518:	b007      	add	sp, #28
 800a51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51e:	4642      	mov	r2, r8
 800a520:	e7ec      	b.n	800a4fc <D32_1CH_HTONS_VOL_HP+0x108>
 800a522:	bf00      	nop
 800a524:	200000ec 	.word	0x200000ec
 800a528:	00060003 	.word	0x00060003
 800a52c:	000a000c 	.word	0x000a000c
 800a530:	000c000a 	.word	0x000c000a
 800a534:	00030006 	.word	0x00030006

0800a538 <D48_1CH_HTONS_VOL_HP>:
 800a538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a53c:	4613      	mov	r3, r2
 800a53e:	461c      	mov	r4, r3
 800a540:	b087      	sub	sp, #28
 800a542:	4625      	mov	r5, r4
 800a544:	4626      	mov	r6, r4
 800a546:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800a548:	9205      	str	r2, [sp, #20]
 800a54a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a54c:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800a550:	9501      	str	r5, [sp, #4]
 800a552:	4680      	mov	r8, r0
 800a554:	6a35      	ldr	r5, [r6, #32]
 800a556:	6918      	ldr	r0, [r3, #16]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	9304      	str	r3, [sp, #16]
 800a55c:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800a560:	68a3      	ldr	r3, [r4, #8]
 800a562:	9502      	str	r5, [sp, #8]
 800a564:	68e4      	ldr	r4, [r4, #12]
 800a566:	2a00      	cmp	r2, #0
 800a568:	f000 808c 	beq.w	800a684 <D48_1CH_HTONS_VOL_HP+0x14c>
 800a56c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a570:	4d45      	ldr	r5, [pc, #276]	; (800a688 <D48_1CH_HTONS_VOL_HP+0x150>)
 800a572:	9203      	str	r2, [sp, #12]
 800a574:	468c      	mov	ip, r1
 800a576:	e898 0044 	ldmia.w	r8, {r2, r6}
 800a57a:	f108 0806 	add.w	r8, r8, #6
 800a57e:	ba52      	rev16	r2, r2
 800a580:	ba76      	rev16	r6, r6
 800a582:	b2d7      	uxtb	r7, r2
 800a584:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a588:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800a58c:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800a590:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800a594:	0e12      	lsrs	r2, r2, #24
 800a596:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800a59a:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800a59e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800a5a2:	fa5f fb86 	uxtb.w	fp, r6
 800a5a6:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800a5aa:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800a5ae:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800a5b2:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800a5b6:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800a5ba:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800a5be:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800a5c2:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800a5c6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a5ca:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a5ce:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800a5d2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a5d6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a5da:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a5de:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800a5e2:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800a5e6:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800a5ea:	4a28      	ldr	r2, [pc, #160]	; (800a68c <D48_1CH_HTONS_VOL_HP+0x154>)
 800a5ec:	fb2a 4202 	smlad	r2, sl, r2, r4
 800a5f0:	4927      	ldr	r1, [pc, #156]	; (800a690 <D48_1CH_HTONS_VOL_HP+0x158>)
 800a5f2:	fb27 2201 	smlad	r2, r7, r1, r2
 800a5f6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800a5fa:	fb26 2201 	smlad	r2, r6, r1, r2
 800a5fe:	4925      	ldr	r1, [pc, #148]	; (800a694 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800a600:	fb2a 3401 	smlad	r4, sl, r1, r3
 800a604:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800a608:	fb27 4403 	smlad	r4, r7, r3, r4
 800a60c:	4b22      	ldr	r3, [pc, #136]	; (800a698 <D48_1CH_HTONS_VOL_HP+0x160>)
 800a60e:	fb26 4403 	smlad	r4, r6, r3, r4
 800a612:	2101      	movs	r1, #1
 800a614:	fb2a fa01 	smuad	sl, sl, r1
 800a618:	4b20      	ldr	r3, [pc, #128]	; (800a69c <D48_1CH_HTONS_VOL_HP+0x164>)
 800a61a:	fb27 a703 	smlad	r7, r7, r3, sl
 800a61e:	4b20      	ldr	r3, [pc, #128]	; (800a6a0 <D48_1CH_HTONS_VOL_HP+0x168>)
 800a620:	fb26 7303 	smlad	r3, r6, r3, r7
 800a624:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800a628:	9e02      	ldr	r6, [sp, #8]
 800a62a:	9f01      	ldr	r7, [sp, #4]
 800a62c:	4410      	add	r0, r2
 800a62e:	eba0 0009 	sub.w	r0, r0, r9
 800a632:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800a636:	fba0 0106 	umull	r0, r1, r0, r6
 800a63a:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800a63e:	fb06 110a 	mla	r1, r6, sl, r1
 800a642:	f141 0100 	adc.w	r1, r1, #0
 800a646:	0308      	lsls	r0, r1, #12
 800a648:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800a64c:	f04f 0a00 	mov.w	sl, #0
 800a650:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800a654:	4657      	mov	r7, sl
 800a656:	10b8      	asrs	r0, r7, #2
 800a658:	f300 000f 	ssat	r0, #16, r0
 800a65c:	f82c 0b02 	strh.w	r0, [ip], #2
 800a660:	0048      	lsls	r0, r1, #1
 800a662:	9903      	ldr	r1, [sp, #12]
 800a664:	458c      	cmp	ip, r1
 800a666:	4691      	mov	r9, r2
 800a668:	d185      	bne.n	800a576 <D48_1CH_HTONS_VOL_HP+0x3e>
 800a66a:	9d05      	ldr	r5, [sp, #20]
 800a66c:	616a      	str	r2, [r5, #20]
 800a66e:	9a04      	ldr	r2, [sp, #16]
 800a670:	6128      	str	r0, [r5, #16]
 800a672:	2000      	movs	r0, #0
 800a674:	60ab      	str	r3, [r5, #8]
 800a676:	60ec      	str	r4, [r5, #12]
 800a678:	f8c5 e01c 	str.w	lr, [r5, #28]
 800a67c:	61aa      	str	r2, [r5, #24]
 800a67e:	b007      	add	sp, #28
 800a680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a684:	464a      	mov	r2, r9
 800a686:	e7f0      	b.n	800a66a <D48_1CH_HTONS_VOL_HP+0x132>
 800a688:	200000ec 	.word	0x200000ec
 800a68c:	000f000a 	.word	0x000f000a
 800a690:	00060003 	.word	0x00060003
 800a694:	00150019 	.word	0x00150019
 800a698:	00190015 	.word	0x00190015
 800a69c:	00030006 	.word	0x00030006
 800a6a0:	000a000f 	.word	0x000a000f

0800a6a4 <D64_1CH_HTONS_VOL_HP>:
 800a6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a8:	b089      	sub	sp, #36	; 0x24
 800a6aa:	4614      	mov	r4, r2
 800a6ac:	9207      	str	r2, [sp, #28]
 800a6ae:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800a6b0:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800a6b4:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800a6b8:	6992      	ldr	r2, [r2, #24]
 800a6ba:	9206      	str	r2, [sp, #24]
 800a6bc:	68e2      	ldr	r2, [r4, #12]
 800a6be:	9201      	str	r2, [sp, #4]
 800a6c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a6c2:	9203      	str	r2, [sp, #12]
 800a6c4:	6a22      	ldr	r2, [r4, #32]
 800a6c6:	69e5      	ldr	r5, [r4, #28]
 800a6c8:	68a6      	ldr	r6, [r4, #8]
 800a6ca:	9204      	str	r2, [sp, #16]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f000 80b0 	beq.w	800a832 <D64_1CH_HTONS_VOL_HP+0x18e>
 800a6d2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a6d6:	4f58      	ldr	r7, [pc, #352]	; (800a838 <D64_1CH_HTONS_VOL_HP+0x194>)
 800a6d8:	9305      	str	r3, [sp, #20]
 800a6da:	9102      	str	r1, [sp, #8]
 800a6dc:	f850 2b08 	ldr.w	r2, [r0], #8
 800a6e0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a6e4:	ba52      	rev16	r2, r2
 800a6e6:	fa93 f993 	rev16.w	r9, r3
 800a6ea:	b2d4      	uxtb	r4, r2
 800a6ec:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800a6f0:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800a6f4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800a6f8:	9901      	ldr	r1, [sp, #4]
 800a6fa:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800a6fe:	0e12      	lsrs	r2, r2, #24
 800a700:	44ab      	add	fp, r5
 800a702:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a706:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800a70a:	fa5f f289 	uxtb.w	r2, r9
 800a70e:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800a712:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800a716:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800a71a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a71e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800a722:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800a726:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800a72a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800a72e:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800a732:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800a736:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800a73a:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800a73e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800a742:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800a746:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a74a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a74e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a756:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a75a:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800a75e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a762:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800a766:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a76a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800a76e:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800a772:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a776:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800a77a:	4b30      	ldr	r3, [pc, #192]	; (800a83c <D64_1CH_HTONS_VOL_HP+0x198>)
 800a77c:	fb2b 1303 	smlad	r3, fp, r3, r1
 800a780:	492f      	ldr	r1, [pc, #188]	; (800a840 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800a782:	fb24 3301 	smlad	r3, r4, r1, r3
 800a786:	492f      	ldr	r1, [pc, #188]	; (800a844 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800a788:	fb22 3301 	smlad	r3, r2, r1, r3
 800a78c:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800a790:	fb2e 390a 	smlad	r9, lr, sl, r3
 800a794:	4b2c      	ldr	r3, [pc, #176]	; (800a848 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800a796:	fb2b 6603 	smlad	r6, fp, r3, r6
 800a79a:	fb2e 6613 	smladx	r6, lr, r3, r6
 800a79e:	4b2b      	ldr	r3, [pc, #172]	; (800a84c <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800a7a0:	fb24 6603 	smlad	r6, r4, r3, r6
 800a7a4:	fb22 6313 	smladx	r3, r2, r3, r6
 800a7a8:	f04f 0a01 	mov.w	sl, #1
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	fb2b fb0a 	smuad	fp, fp, sl
 800a7b2:	4b27      	ldr	r3, [pc, #156]	; (800a850 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800a7b4:	fb24 ba03 	smlad	sl, r4, r3, fp
 800a7b8:	4b26      	ldr	r3, [pc, #152]	; (800a854 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800a7ba:	fb22 a203 	smlad	r2, r2, r3, sl
 800a7be:	4b26      	ldr	r3, [pc, #152]	; (800a858 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800a7c0:	fb2e 2603 	smlad	r6, lr, r3, r2
 800a7c4:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800a7c8:	eb0a 020c 	add.w	r2, sl, ip
 800a7cc:	9c04      	ldr	r4, [sp, #16]
 800a7ce:	9903      	ldr	r1, [sp, #12]
 800a7d0:	eba2 0208 	sub.w	r2, r2, r8
 800a7d4:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800a7d8:	fba2 2304 	umull	r2, r3, r2, r4
 800a7dc:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a7e0:	fb04 3309 	mla	r3, r4, r9, r3
 800a7e4:	f143 0300 	adc.w	r3, r3, #0
 800a7e8:	02da      	lsls	r2, r3, #11
 800a7ea:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800a7ee:	f04f 0900 	mov.w	r9, #0
 800a7f2:	fbc1 8902 	smlal	r8, r9, r1, r2
 800a7f6:	9902      	ldr	r1, [sp, #8]
 800a7f8:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800a7fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800a800:	f302 020f 	ssat	r2, #16, r2
 800a804:	9b05      	ldr	r3, [sp, #20]
 800a806:	f821 2b02 	strh.w	r2, [r1], #2
 800a80a:	4299      	cmp	r1, r3
 800a80c:	9102      	str	r1, [sp, #8]
 800a80e:	46d0      	mov	r8, sl
 800a810:	f47f af64 	bne.w	800a6dc <D64_1CH_HTONS_VOL_HP+0x38>
 800a814:	9a07      	ldr	r2, [sp, #28]
 800a816:	9901      	ldr	r1, [sp, #4]
 800a818:	60d1      	str	r1, [r2, #12]
 800a81a:	9906      	ldr	r1, [sp, #24]
 800a81c:	6096      	str	r6, [r2, #8]
 800a81e:	2000      	movs	r0, #0
 800a820:	61d5      	str	r5, [r2, #28]
 800a822:	f8c2 c010 	str.w	ip, [r2, #16]
 800a826:	f8c2 a014 	str.w	sl, [r2, #20]
 800a82a:	6191      	str	r1, [r2, #24]
 800a82c:	b009      	add	sp, #36	; 0x24
 800a82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a832:	46c2      	mov	sl, r8
 800a834:	4622      	mov	r2, r4
 800a836:	e7ee      	b.n	800a816 <D64_1CH_HTONS_VOL_HP+0x172>
 800a838:	200000ec 	.word	0x200000ec
 800a83c:	001c0015 	.word	0x001c0015
 800a840:	000f000a 	.word	0x000f000a
 800a844:	00060003 	.word	0x00060003
 800a848:	0024002a 	.word	0x0024002a
 800a84c:	002e0030 	.word	0x002e0030
 800a850:	00030006 	.word	0x00030006
 800a854:	000a000f 	.word	0x000a000f
 800a858:	0015001c 	.word	0x0015001c

0800a85c <D80_1CH_HTONS_VOL_HP>:
 800a85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a860:	4613      	mov	r3, r2
 800a862:	b089      	sub	sp, #36	; 0x24
 800a864:	4686      	mov	lr, r0
 800a866:	6918      	ldr	r0, [r3, #16]
 800a868:	9000      	str	r0, [sp, #0]
 800a86a:	4618      	mov	r0, r3
 800a86c:	461c      	mov	r4, r3
 800a86e:	695b      	ldr	r3, [r3, #20]
 800a870:	9302      	str	r3, [sp, #8]
 800a872:	6983      	ldr	r3, [r0, #24]
 800a874:	9306      	str	r3, [sp, #24]
 800a876:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800a87a:	69c3      	ldr	r3, [r0, #28]
 800a87c:	68c0      	ldr	r0, [r0, #12]
 800a87e:	9207      	str	r2, [sp, #28]
 800a880:	9001      	str	r0, [sp, #4]
 800a882:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800a884:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a886:	9003      	str	r0, [sp, #12]
 800a888:	6a20      	ldr	r0, [r4, #32]
 800a88a:	9004      	str	r0, [sp, #16]
 800a88c:	2a00      	cmp	r2, #0
 800a88e:	f000 80d2 	beq.w	800aa36 <D80_1CH_HTONS_VOL_HP+0x1da>
 800a892:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a896:	4869      	ldr	r0, [pc, #420]	; (800aa3c <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800a898:	9205      	str	r2, [sp, #20]
 800a89a:	461c      	mov	r4, r3
 800a89c:	f8de 5000 	ldr.w	r5, [lr]
 800a8a0:	f8de 2004 	ldr.w	r2, [lr, #4]
 800a8a4:	f8de 3008 	ldr.w	r3, [lr, #8]
 800a8a8:	f10e 0e0a 	add.w	lr, lr, #10
 800a8ac:	ba6d      	rev16	r5, r5
 800a8ae:	ba52      	rev16	r2, r2
 800a8b0:	fa93 fb93 	rev16.w	fp, r3
 800a8b4:	b2ee      	uxtb	r6, r5
 800a8b6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800a8ba:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800a8be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a8c2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800a8c6:	eb04 0a07 	add.w	sl, r4, r7
 800a8ca:	0e2d      	lsrs	r5, r5, #24
 800a8cc:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800a8d0:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800a8d4:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800a8d8:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800a8dc:	b2d5      	uxtb	r5, r2
 800a8de:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800a8e2:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800a8e6:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800a8ea:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800a8ee:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800a8f2:	0e12      	lsrs	r2, r2, #24
 800a8f4:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800a8f8:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800a8fc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800a900:	fa5f f48b 	uxtb.w	r4, fp
 800a904:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800a908:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800a90c:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800a910:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800a914:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800a918:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800a91c:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800a920:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800a924:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a928:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a92c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a930:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a934:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a938:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a93c:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800a940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a944:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800a948:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a94c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a950:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800a954:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800a958:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800a95c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800a960:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800a964:	4d36      	ldr	r5, [pc, #216]	; (800aa40 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800a966:	9f01      	ldr	r7, [sp, #4]
 800a968:	fb23 7505 	smlad	r5, r3, r5, r7
 800a96c:	4f35      	ldr	r7, [pc, #212]	; (800aa44 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800a96e:	fb29 5507 	smlad	r5, r9, r7, r5
 800a972:	4f35      	ldr	r7, [pc, #212]	; (800aa48 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800a974:	fb28 5507 	smlad	r5, r8, r7, r5
 800a978:	4f34      	ldr	r7, [pc, #208]	; (800aa4c <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800a97a:	fb22 5507 	smlad	r5, r2, r7, r5
 800a97e:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800a982:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800a986:	4d32      	ldr	r5, [pc, #200]	; (800aa50 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800a988:	fb23 cc05 	smlad	ip, r3, r5, ip
 800a98c:	4d31      	ldr	r5, [pc, #196]	; (800aa54 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800a98e:	fb29 cc05 	smlad	ip, r9, r5, ip
 800a992:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800a996:	fb28 c505 	smlad	r5, r8, r5, ip
 800a99a:	4f2f      	ldr	r7, [pc, #188]	; (800aa58 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800a99c:	fb22 5507 	smlad	r5, r2, r7, r5
 800a9a0:	4f2e      	ldr	r7, [pc, #184]	; (800aa5c <D80_1CH_HTONS_VOL_HP+0x200>)
 800a9a2:	fb26 5507 	smlad	r5, r6, r7, r5
 800a9a6:	f04f 0a01 	mov.w	sl, #1
 800a9aa:	9501      	str	r5, [sp, #4]
 800a9ac:	fb23 fa0a 	smuad	sl, r3, sl
 800a9b0:	4b2b      	ldr	r3, [pc, #172]	; (800aa60 <D80_1CH_HTONS_VOL_HP+0x204>)
 800a9b2:	fb29 a903 	smlad	r9, r9, r3, sl
 800a9b6:	4d2b      	ldr	r5, [pc, #172]	; (800aa64 <D80_1CH_HTONS_VOL_HP+0x208>)
 800a9b8:	fb28 9805 	smlad	r8, r8, r5, r9
 800a9bc:	4d2a      	ldr	r5, [pc, #168]	; (800aa68 <D80_1CH_HTONS_VOL_HP+0x20c>)
 800a9be:	fb22 8205 	smlad	r2, r2, r5, r8
 800a9c2:	4b2a      	ldr	r3, [pc, #168]	; (800aa6c <D80_1CH_HTONS_VOL_HP+0x210>)
 800a9c4:	fb26 2c03 	smlad	ip, r6, r3, r2
 800a9c8:	9b00      	ldr	r3, [sp, #0]
 800a9ca:	9d04      	ldr	r5, [sp, #16]
 800a9cc:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800a9d0:	4453      	add	r3, sl
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	9b02      	ldr	r3, [sp, #8]
 800a9d6:	f8cd a008 	str.w	sl, [sp, #8]
 800a9da:	1ad2      	subs	r2, r2, r3
 800a9dc:	17d7      	asrs	r7, r2, #31
 800a9de:	fba2 2305 	umull	r2, r3, r2, r5
 800a9e2:	fb05 3307 	mla	r3, r5, r7, r3
 800a9e6:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800a9ea:	f143 0300 	adc.w	r3, r3, #0
 800a9ee:	9d03      	ldr	r5, [sp, #12]
 800a9f0:	029a      	lsls	r2, r3, #10
 800a9f2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a9f6:	2700      	movs	r7, #0
 800a9f8:	005b      	lsls	r3, r3, #1
 800a9fa:	fbc5 6702 	smlal	r6, r7, r5, r2
 800a9fe:	10ba      	asrs	r2, r7, #2
 800aa00:	9300      	str	r3, [sp, #0]
 800aa02:	f302 020f 	ssat	r2, #16, r2
 800aa06:	9b05      	ldr	r3, [sp, #20]
 800aa08:	f821 2b02 	strh.w	r2, [r1], #2
 800aa0c:	4299      	cmp	r1, r3
 800aa0e:	f47f af45 	bne.w	800a89c <D80_1CH_HTONS_VOL_HP+0x40>
 800aa12:	4623      	mov	r3, r4
 800aa14:	9907      	ldr	r1, [sp, #28]
 800aa16:	9801      	ldr	r0, [sp, #4]
 800aa18:	60c8      	str	r0, [r1, #12]
 800aa1a:	9a00      	ldr	r2, [sp, #0]
 800aa1c:	f8c1 c008 	str.w	ip, [r1, #8]
 800aa20:	4608      	mov	r0, r1
 800aa22:	61cb      	str	r3, [r1, #28]
 800aa24:	610a      	str	r2, [r1, #16]
 800aa26:	f8c1 a014 	str.w	sl, [r1, #20]
 800aa2a:	9906      	ldr	r1, [sp, #24]
 800aa2c:	6181      	str	r1, [r0, #24]
 800aa2e:	2000      	movs	r0, #0
 800aa30:	b009      	add	sp, #36	; 0x24
 800aa32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa36:	f8dd a008 	ldr.w	sl, [sp, #8]
 800aa3a:	e7eb      	b.n	800aa14 <D80_1CH_HTONS_VOL_HP+0x1b8>
 800aa3c:	200000ec 	.word	0x200000ec
 800aa40:	002d0024 	.word	0x002d0024
 800aa44:	001c0015 	.word	0x001c0015
 800aa48:	000f000a 	.word	0x000f000a
 800aa4c:	00060003 	.word	0x00060003
 800aa50:	0037003f 	.word	0x0037003f
 800aa54:	00450049 	.word	0x00450049
 800aa58:	00490045 	.word	0x00490045
 800aa5c:	003f0037 	.word	0x003f0037
 800aa60:	00030006 	.word	0x00030006
 800aa64:	000a000f 	.word	0x000a000f
 800aa68:	0015001c 	.word	0x0015001c
 800aa6c:	0024002d 	.word	0x0024002d

0800aa70 <D128_1CH_HTONS_VOL_HP>:
 800aa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa74:	b093      	sub	sp, #76	; 0x4c
 800aa76:	4614      	mov	r4, r2
 800aa78:	9211      	str	r2, [sp, #68]	; 0x44
 800aa7a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800aa7c:	6912      	ldr	r2, [r2, #16]
 800aa7e:	9203      	str	r2, [sp, #12]
 800aa80:	4622      	mov	r2, r4
 800aa82:	4615      	mov	r5, r2
 800aa84:	6964      	ldr	r4, [r4, #20]
 800aa86:	9406      	str	r4, [sp, #24]
 800aa88:	4614      	mov	r4, r2
 800aa8a:	6992      	ldr	r2, [r2, #24]
 800aa8c:	9210      	str	r2, [sp, #64]	; 0x40
 800aa8e:	68ea      	ldr	r2, [r5, #12]
 800aa90:	9204      	str	r2, [sp, #16]
 800aa92:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800aa94:	69e6      	ldr	r6, [r4, #28]
 800aa96:	920d      	str	r2, [sp, #52]	; 0x34
 800aa98:	68a4      	ldr	r4, [r4, #8]
 800aa9a:	6a2a      	ldr	r2, [r5, #32]
 800aa9c:	9405      	str	r4, [sp, #20]
 800aa9e:	920e      	str	r2, [sp, #56]	; 0x38
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f000 8145 	beq.w	800ad30 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800aaa6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800aaaa:	930f      	str	r3, [sp, #60]	; 0x3c
 800aaac:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800ad8c <D128_1CH_HTONS_VOL_HP+0x31c>
 800aab0:	9107      	str	r1, [sp, #28]
 800aab2:	f100 0310 	add.w	r3, r0, #16
 800aab6:	4699      	mov	r9, r3
 800aab8:	f1a9 0110 	sub.w	r1, r9, #16
 800aabc:	c90e      	ldmia	r1, {r1, r2, r3}
 800aabe:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800aac2:	ba49      	rev16	r1, r1
 800aac4:	ba52      	rev16	r2, r2
 800aac6:	ba5b      	rev16	r3, r3
 800aac8:	fa90 fa90 	rev16.w	sl, r0
 800aacc:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800aad0:	b2cc      	uxtb	r4, r1
 800aad2:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800aad6:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800aada:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800aade:	0e09      	lsrs	r1, r1, #24
 800aae0:	4426      	add	r6, r4
 800aae2:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800aae6:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800aaea:	b2d0      	uxtb	r0, r2
 800aaec:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800aaf0:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800aaf4:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800aaf8:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800aafc:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800ab00:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800ab04:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800ab08:	0e12      	lsrs	r2, r2, #24
 800ab0a:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800ab0e:	9701      	str	r7, [sp, #4]
 800ab10:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800ab14:	4627      	mov	r7, r4
 800ab16:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800ab1a:	9702      	str	r7, [sp, #8]
 800ab1c:	b2da      	uxtb	r2, r3
 800ab1e:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800ab22:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800ab26:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800ab2a:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800ab2e:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800ab32:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ab36:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800ab3a:	0e1b      	lsrs	r3, r3, #24
 800ab3c:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800ab40:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800ab44:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800ab48:	fa5f f38a 	uxtb.w	r3, sl
 800ab4c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ab50:	960a      	str	r6, [sp, #40]	; 0x28
 800ab52:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800ab56:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800ab5a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ab5e:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800ab62:	950b      	str	r5, [sp, #44]	; 0x2c
 800ab64:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800ab68:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800ab6c:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800ab70:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800ab74:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800ab78:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800ab7c:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800ab80:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800ab84:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800ab88:	9308      	str	r3, [sp, #32]
 800ab8a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800ab8e:	9b01      	ldr	r3, [sp, #4]
 800ab90:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800ab94:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ab98:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800ab9c:	9b02      	ldr	r3, [sp, #8]
 800ab9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aba2:	9302      	str	r3, [sp, #8]
 800aba4:	9b08      	ldr	r3, [sp, #32]
 800aba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abaa:	9308      	str	r3, [sp, #32]
 800abac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abae:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800abb2:	950c      	str	r5, [sp, #48]	; 0x30
 800abb4:	461d      	mov	r5, r3
 800abb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abb8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800abbc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800abc0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800abc4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800abc8:	9301      	str	r3, [sp, #4]
 800abca:	9b02      	ldr	r3, [sp, #8]
 800abcc:	9202      	str	r2, [sp, #8]
 800abce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abd0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abd2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800abd6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800abda:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800abde:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800abe2:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800abe6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800abea:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800abee:	9b08      	ldr	r3, [sp, #32]
 800abf0:	9f01      	ldr	r7, [sp, #4]
 800abf2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800abf6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800abfa:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800abfe:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800ac02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800ac06:	46be      	mov	lr, r7
 800ac08:	0a96      	lsrs	r6, r2, #10
 800ac0a:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800ac0e:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800ac12:	4f49      	ldr	r7, [pc, #292]	; (800ad38 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800ac14:	9a04      	ldr	r2, [sp, #16]
 800ac16:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800ac1a:	4a48      	ldr	r2, [pc, #288]	; (800ad3c <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800ac1c:	fb2a ee02 	smlad	lr, sl, r2, lr
 800ac20:	4a47      	ldr	r2, [pc, #284]	; (800ad40 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800ac22:	fb21 ee02 	smlad	lr, r1, r2, lr
 800ac26:	4a47      	ldr	r2, [pc, #284]	; (800ad44 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800ac28:	fb24 ee02 	smlad	lr, r4, r2, lr
 800ac2c:	4a46      	ldr	r2, [pc, #280]	; (800ad48 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800ac2e:	9f02      	ldr	r7, [sp, #8]
 800ac30:	fb27 ee02 	smlad	lr, r7, r2, lr
 800ac34:	4a45      	ldr	r2, [pc, #276]	; (800ad4c <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800ac36:	fb20 ee02 	smlad	lr, r0, r2, lr
 800ac3a:	4a45      	ldr	r2, [pc, #276]	; (800ad50 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800ac3c:	fb23 e702 	smlad	r7, r3, r2, lr
 800ac40:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800ac44:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800ac48:	9f01      	ldr	r7, [sp, #4]
 800ac4a:	4a42      	ldr	r2, [pc, #264]	; (800ad54 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800ac4c:	46bc      	mov	ip, r7
 800ac4e:	9f05      	ldr	r7, [sp, #20]
 800ac50:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800ac54:	4a40      	ldr	r2, [pc, #256]	; (800ad58 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800ac56:	fb2a cc02 	smlad	ip, sl, r2, ip
 800ac5a:	4f40      	ldr	r7, [pc, #256]	; (800ad5c <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800ac5c:	fb21 cc07 	smlad	ip, r1, r7, ip
 800ac60:	4f3f      	ldr	r7, [pc, #252]	; (800ad60 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800ac62:	fb24 cc07 	smlad	ip, r4, r7, ip
 800ac66:	4f3f      	ldr	r7, [pc, #252]	; (800ad64 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800ac68:	9a02      	ldr	r2, [sp, #8]
 800ac6a:	fb22 cc07 	smlad	ip, r2, r7, ip
 800ac6e:	4f3e      	ldr	r7, [pc, #248]	; (800ad68 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800ac70:	fb20 cc07 	smlad	ip, r0, r7, ip
 800ac74:	4f3d      	ldr	r7, [pc, #244]	; (800ad6c <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800ac76:	fb23 c707 	smlad	r7, r3, r7, ip
 800ac7a:	f8df c114 	ldr.w	ip, [pc, #276]	; 800ad90 <D128_1CH_HTONS_VOL_HP+0x320>
 800ac7e:	fb25 720c 	smlad	r2, r5, ip, r7
 800ac82:	f04f 0b01 	mov.w	fp, #1
 800ac86:	9204      	str	r2, [sp, #16]
 800ac88:	9f01      	ldr	r7, [sp, #4]
 800ac8a:	fb27 fb0b 	smuad	fp, r7, fp
 800ac8e:	4f38      	ldr	r7, [pc, #224]	; (800ad70 <D128_1CH_HTONS_VOL_HP+0x300>)
 800ac90:	fb2a ba07 	smlad	sl, sl, r7, fp
 800ac94:	4f37      	ldr	r7, [pc, #220]	; (800ad74 <D128_1CH_HTONS_VOL_HP+0x304>)
 800ac96:	fb21 aa07 	smlad	sl, r1, r7, sl
 800ac9a:	4f37      	ldr	r7, [pc, #220]	; (800ad78 <D128_1CH_HTONS_VOL_HP+0x308>)
 800ac9c:	fb24 aa07 	smlad	sl, r4, r7, sl
 800aca0:	4f36      	ldr	r7, [pc, #216]	; (800ad7c <D128_1CH_HTONS_VOL_HP+0x30c>)
 800aca2:	9a02      	ldr	r2, [sp, #8]
 800aca4:	fb22 a707 	smlad	r7, r2, r7, sl
 800aca8:	4a35      	ldr	r2, [pc, #212]	; (800ad80 <D128_1CH_HTONS_VOL_HP+0x310>)
 800acaa:	fb20 7702 	smlad	r7, r0, r2, r7
 800acae:	4a35      	ldr	r2, [pc, #212]	; (800ad84 <D128_1CH_HTONS_VOL_HP+0x314>)
 800acb0:	fb23 7702 	smlad	r7, r3, r2, r7
 800acb4:	4b34      	ldr	r3, [pc, #208]	; (800ad88 <D128_1CH_HTONS_VOL_HP+0x318>)
 800acb6:	fb25 7303 	smlad	r3, r5, r3, r7
 800acba:	9305      	str	r3, [sp, #20]
 800acbc:	9b03      	ldr	r3, [sp, #12]
 800acbe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800acc0:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800acc4:	4473      	add	r3, lr
 800acc6:	461a      	mov	r2, r3
 800acc8:	9b06      	ldr	r3, [sp, #24]
 800acca:	f8cd e018 	str.w	lr, [sp, #24]
 800acce:	1ad2      	subs	r2, r2, r3
 800acd0:	17d1      	asrs	r1, r2, #31
 800acd2:	fba2 2304 	umull	r2, r3, r2, r4
 800acd6:	fb04 3301 	mla	r3, r4, r1, r3
 800acda:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800acde:	f143 0300 	adc.w	r3, r3, #0
 800ace2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800ace4:	021a      	lsls	r2, r3, #8
 800ace6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800acea:	2100      	movs	r1, #0
 800acec:	fbc4 0102 	smlal	r0, r1, r4, r2
 800acf0:	108a      	asrs	r2, r1, #2
 800acf2:	9907      	ldr	r1, [sp, #28]
 800acf4:	f302 020f 	ssat	r2, #16, r2
 800acf8:	005b      	lsls	r3, r3, #1
 800acfa:	f821 2b02 	strh.w	r2, [r1], #2
 800acfe:	9303      	str	r3, [sp, #12]
 800ad00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad02:	9107      	str	r1, [sp, #28]
 800ad04:	4299      	cmp	r1, r3
 800ad06:	f109 0910 	add.w	r9, r9, #16
 800ad0a:	f47f aed5 	bne.w	800aab8 <D128_1CH_HTONS_VOL_HP+0x48>
 800ad0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ad10:	9905      	ldr	r1, [sp, #20]
 800ad12:	6091      	str	r1, [r2, #8]
 800ad14:	9904      	ldr	r1, [sp, #16]
 800ad16:	60d1      	str	r1, [r2, #12]
 800ad18:	4613      	mov	r3, r2
 800ad1a:	61d6      	str	r6, [r2, #28]
 800ad1c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ad1e:	9a03      	ldr	r2, [sp, #12]
 800ad20:	611a      	str	r2, [r3, #16]
 800ad22:	2000      	movs	r0, #0
 800ad24:	f8c3 e014 	str.w	lr, [r3, #20]
 800ad28:	6199      	str	r1, [r3, #24]
 800ad2a:	b013      	add	sp, #76	; 0x4c
 800ad2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad30:	f8dd e018 	ldr.w	lr, [sp, #24]
 800ad34:	e7eb      	b.n	800ad0e <D128_1CH_HTONS_VOL_HP+0x29e>
 800ad36:	bf00      	nop
 800ad38:	00780069 	.word	0x00780069
 800ad3c:	005b004e 	.word	0x005b004e
 800ad40:	00420037 	.word	0x00420037
 800ad44:	002d0024 	.word	0x002d0024
 800ad48:	001c0015 	.word	0x001c0015
 800ad4c:	000f000a 	.word	0x000f000a
 800ad50:	00060003 	.word	0x00060003
 800ad54:	00880096 	.word	0x00880096
 800ad58:	00a200ac 	.word	0x00a200ac
 800ad5c:	00b400ba 	.word	0x00b400ba
 800ad60:	00be00c0 	.word	0x00be00c0
 800ad64:	00c000be 	.word	0x00c000be
 800ad68:	00ba00b4 	.word	0x00ba00b4
 800ad6c:	00ac00a2 	.word	0x00ac00a2
 800ad70:	00030006 	.word	0x00030006
 800ad74:	000a000f 	.word	0x000a000f
 800ad78:	0015001c 	.word	0x0015001c
 800ad7c:	0024002d 	.word	0x0024002d
 800ad80:	00370042 	.word	0x00370042
 800ad84:	004e005b 	.word	0x004e005b
 800ad88:	00690078 	.word	0x00690078
 800ad8c:	200000ec 	.word	0x200000ec
 800ad90:	00960088 	.word	0x00960088

0800ad94 <PDM_Filter_Init>:
 800ad94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad96:	2240      	movs	r2, #64	; 0x40
 800ad98:	4604      	mov	r4, r0
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	300c      	adds	r0, #12
 800ad9e:	f000 fa11 	bl	800b1c4 <memset>
 800ada2:	493b      	ldr	r1, [pc, #236]	; (800ae90 <PDM_Filter_Init+0xfc>)
 800ada4:	483b      	ldr	r0, [pc, #236]	; (800ae94 <PDM_Filter_Init+0x100>)
 800ada6:	f000 f98d 	bl	800b0c4 <CRC_Lock>
 800adaa:	8822      	ldrh	r2, [r4, #0]
 800adac:	8963      	ldrh	r3, [r4, #10]
 800adae:	4938      	ldr	r1, [pc, #224]	; (800ae90 <PDM_Filter_Init+0xfc>)
 800adb0:	8925      	ldrh	r5, [r4, #8]
 800adb2:	86a3      	strh	r3, [r4, #52]	; 0x34
 800adb4:	2801      	cmp	r0, #1
 800adb6:	f04f 0300 	mov.w	r3, #0
 800adba:	bf18      	it	ne
 800adbc:	2100      	movne	r1, #0
 800adbe:	2a01      	cmp	r2, #1
 800adc0:	6461      	str	r1, [r4, #68]	; 0x44
 800adc2:	86e5      	strh	r5, [r4, #54]	; 0x36
 800adc4:	61a3      	str	r3, [r4, #24]
 800adc6:	6123      	str	r3, [r4, #16]
 800adc8:	6163      	str	r3, [r4, #20]
 800adca:	60e3      	str	r3, [r4, #12]
 800adcc:	6263      	str	r3, [r4, #36]	; 0x24
 800adce:	61e3      	str	r3, [r4, #28]
 800add0:	6223      	str	r3, [r4, #32]
 800add2:	6423      	str	r3, [r4, #64]	; 0x40
 800add4:	d918      	bls.n	800ae08 <PDM_Filter_Init+0x74>
 800add6:	2003      	movs	r0, #3
 800add8:	2302      	movs	r3, #2
 800adda:	8862      	ldrh	r2, [r4, #2]
 800addc:	2a01      	cmp	r2, #1
 800adde:	d91d      	bls.n	800ae1c <PDM_Filter_Init+0x88>
 800ade0:	2140      	movs	r1, #64	; 0x40
 800ade2:	2300      	movs	r3, #0
 800ade4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ade6:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800adea:	6862      	ldr	r2, [r4, #4]
 800adec:	bf04      	itt	eq
 800adee:	6421      	streq	r1, [r4, #64]	; 0x40
 800adf0:	460b      	moveq	r3, r1
 800adf2:	b11a      	cbz	r2, 800adfc <PDM_Filter_Init+0x68>
 800adf4:	f043 0310 	orr.w	r3, r3, #16
 800adf8:	6423      	str	r3, [r4, #64]	; 0x40
 800adfa:	62e2      	str	r2, [r4, #44]	; 0x2c
 800adfc:	2200      	movs	r2, #0
 800adfe:	8722      	strh	r2, [r4, #56]	; 0x38
 800ae00:	b908      	cbnz	r0, 800ae06 <PDM_Filter_Init+0x72>
 800ae02:	3380      	adds	r3, #128	; 0x80
 800ae04:	6423      	str	r3, [r4, #64]	; 0x40
 800ae06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae08:	4d23      	ldr	r5, [pc, #140]	; (800ae98 <PDM_Filter_Init+0x104>)
 800ae0a:	d010      	beq.n	800ae2e <PDM_Filter_Init+0x9a>
 800ae0c:	782a      	ldrb	r2, [r5, #0]
 800ae0e:	2a01      	cmp	r2, #1
 800ae10:	d027      	beq.n	800ae62 <PDM_Filter_Init+0xce>
 800ae12:	8862      	ldrh	r2, [r4, #2]
 800ae14:	2a01      	cmp	r2, #1
 800ae16:	f04f 0001 	mov.w	r0, #1
 800ae1a:	d8e1      	bhi.n	800ade0 <PDM_Filter_Init+0x4c>
 800ae1c:	d001      	beq.n	800ae22 <PDM_Filter_Init+0x8e>
 800ae1e:	4618      	mov	r0, r3
 800ae20:	e7de      	b.n	800ade0 <PDM_Filter_Init+0x4c>
 800ae22:	2220      	movs	r2, #32
 800ae24:	4618      	mov	r0, r3
 800ae26:	6422      	str	r2, [r4, #64]	; 0x40
 800ae28:	4613      	mov	r3, r2
 800ae2a:	2160      	movs	r1, #96	; 0x60
 800ae2c:	e7da      	b.n	800ade4 <PDM_Filter_Init+0x50>
 800ae2e:	7829      	ldrb	r1, [r5, #0]
 800ae30:	2900      	cmp	r1, #0
 800ae32:	d1ee      	bne.n	800ae12 <PDM_Filter_Init+0x7e>
 800ae34:	4919      	ldr	r1, [pc, #100]	; (800ae9c <PDM_Filter_Init+0x108>)
 800ae36:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800aea4 <PDM_Filter_Init+0x110>
 800ae3a:	4f19      	ldr	r7, [pc, #100]	; (800aea0 <PDM_Filter_Init+0x10c>)
 800ae3c:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800ae40:	684a      	ldr	r2, [r1, #4]
 800ae42:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800ae46:	ea02 0007 	and.w	r0, r2, r7
 800ae4a:	4303      	orrs	r3, r0
 800ae4c:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800ae50:	4413      	add	r3, r2
 800ae52:	f841 3f04 	str.w	r3, [r1, #4]!
 800ae56:	428e      	cmp	r6, r1
 800ae58:	d1f2      	bne.n	800ae40 <PDM_Filter_Init+0xac>
 800ae5a:	2001      	movs	r0, #1
 800ae5c:	7028      	strb	r0, [r5, #0]
 800ae5e:	2300      	movs	r3, #0
 800ae60:	e7bb      	b.n	800adda <PDM_Filter_Init+0x46>
 800ae62:	490e      	ldr	r1, [pc, #56]	; (800ae9c <PDM_Filter_Init+0x108>)
 800ae64:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800aea4 <PDM_Filter_Init+0x110>
 800ae68:	4f0d      	ldr	r7, [pc, #52]	; (800aea0 <PDM_Filter_Init+0x10c>)
 800ae6a:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800ae6e:	684a      	ldr	r2, [r1, #4]
 800ae70:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800ae74:	ea02 0007 	and.w	r0, r2, r7
 800ae78:	4303      	orrs	r3, r0
 800ae7a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800ae7e:	4413      	add	r3, r2
 800ae80:	f841 3f04 	str.w	r3, [r1, #4]!
 800ae84:	428e      	cmp	r6, r1
 800ae86:	d1f2      	bne.n	800ae6e <PDM_Filter_Init+0xda>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	702b      	strb	r3, [r5, #0]
 800ae8c:	e7c1      	b.n	800ae12 <PDM_Filter_Init+0x7e>
 800ae8e:	bf00      	nop
 800ae90:	b5e8b5cd 	.word	0xb5e8b5cd
 800ae94:	f407a5c2 	.word	0xf407a5c2
 800ae98:	20000aa4 	.word	0x20000aa4
 800ae9c:	200000e8 	.word	0x200000e8
 800aea0:	000ffc00 	.word	0x000ffc00
 800aea4:	3ff00000 	.word	0x3ff00000

0800aea8 <PDM_Filter_setConfig>:
 800aea8:	4b66      	ldr	r3, [pc, #408]	; (800b044 <PDM_Filter_setConfig+0x19c>)
 800aeaa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d001      	beq.n	800aeb4 <PDM_Filter_setConfig+0xc>
 800aeb0:	2004      	movs	r0, #4
 800aeb2:	4770      	bx	lr
 800aeb4:	b530      	push	{r4, r5, lr}
 800aeb6:	880a      	ldrh	r2, [r1, #0]
 800aeb8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800aeba:	ed2d 8b04 	vpush	{d8-d9}
 800aebe:	4604      	mov	r4, r0
 800aec0:	460d      	mov	r5, r1
 800aec2:	1e51      	subs	r1, r2, #1
 800aec4:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800aec8:	2906      	cmp	r1, #6
 800aeca:	b083      	sub	sp, #12
 800aecc:	6420      	str	r0, [r4, #64]	; 0x40
 800aece:	d91a      	bls.n	800af06 <PDM_Filter_setConfig+0x5e>
 800aed0:	2008      	movs	r0, #8
 800aed2:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800aed6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800aeda:	4299      	cmp	r1, r3
 800aedc:	d07e      	beq.n	800afdc <PDM_Filter_setConfig+0x134>
 800aede:	f113 0f0c 	cmn.w	r3, #12
 800aee2:	da2a      	bge.n	800af3a <PDM_Filter_setConfig+0x92>
 800aee4:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800aee8:	3040      	adds	r0, #64	; 0x40
 800aeea:	80ab      	strh	r3, [r5, #4]
 800aeec:	8622      	strh	r2, [r4, #48]	; 0x30
 800aeee:	886b      	ldrh	r3, [r5, #2]
 800aef0:	8663      	strh	r3, [r4, #50]	; 0x32
 800aef2:	b920      	cbnz	r0, 800aefe <PDM_Filter_setConfig+0x56>
 800aef4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aefa:	6423      	str	r3, [r4, #64]	; 0x40
 800aefc:	2000      	movs	r0, #0
 800aefe:	b003      	add	sp, #12
 800af00:	ecbd 8b04 	vpop	{d8-d9}
 800af04:	bd30      	pop	{r4, r5, pc}
 800af06:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800af08:	4291      	cmp	r1, r2
 800af0a:	d06c      	beq.n	800afe6 <PDM_Filter_setConfig+0x13e>
 800af0c:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800af10:	f023 0301 	bic.w	r3, r3, #1
 800af14:	4313      	orrs	r3, r2
 800af16:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800af1a:	6423      	str	r3, [r4, #64]	; 0x40
 800af1c:	2970      	cmp	r1, #112	; 0x70
 800af1e:	f003 030f 	and.w	r3, r3, #15
 800af22:	f103 33ff 	add.w	r3, r3, #4294967295
 800af26:	d066      	beq.n	800aff6 <PDM_Filter_setConfig+0x14e>
 800af28:	2b06      	cmp	r3, #6
 800af2a:	f200 8089 	bhi.w	800b040 <PDM_Filter_setConfig+0x198>
 800af2e:	e8df f003 	tbb	[pc, r3]
 800af32:	4f52      	.short	0x4f52
 800af34:	3d43494c 	.word	0x3d43494c
 800af38:	46          	.byte	0x46
 800af39:	00          	.byte	0x00
 800af3a:	2b33      	cmp	r3, #51	; 0x33
 800af3c:	dc32      	bgt.n	800afa4 <PDM_Filter_setConfig+0xfc>
 800af3e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800af40:	f002 020f 	and.w	r2, r2, #15
 800af44:	3a01      	subs	r2, #1
 800af46:	2a06      	cmp	r2, #6
 800af48:	d872      	bhi.n	800b030 <PDM_Filter_setConfig+0x188>
 800af4a:	493f      	ldr	r1, [pc, #252]	; (800b048 <PDM_Filter_setConfig+0x1a0>)
 800af4c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800af50:	ed92 9a00 	vldr	s18, [r2]
 800af54:	ed92 8a07 	vldr	s16, [r2, #28]
 800af58:	9001      	str	r0, [sp, #4]
 800af5a:	ee07 3a90 	vmov	s15, r3
 800af5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af62:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800af66:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800af6a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800af6e:	f000 fa1f 	bl	800b3b0 <powf>
 800af72:	eddf 0a36 	vldr	s1, [pc, #216]	; 800b04c <PDM_Filter_setConfig+0x1a4>
 800af76:	eef0 8a40 	vmov.f32	s17, s0
 800af7a:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800af7e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800af82:	f000 fa15 	bl	800b3b0 <powf>
 800af86:	ee28 8a28 	vmul.f32	s16, s16, s17
 800af8a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800af8e:	f000 f9e9 	bl	800b364 <roundf>
 800af92:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800af96:	88ab      	ldrh	r3, [r5, #4]
 800af98:	882a      	ldrh	r2, [r5, #0]
 800af9a:	9801      	ldr	r0, [sp, #4]
 800af9c:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800afa0:	8723      	strh	r3, [r4, #56]	; 0x38
 800afa2:	e7a3      	b.n	800aeec <PDM_Filter_setConfig+0x44>
 800afa4:	2333      	movs	r3, #51	; 0x33
 800afa6:	3040      	adds	r0, #64	; 0x40
 800afa8:	80ab      	strh	r3, [r5, #4]
 800afaa:	e79f      	b.n	800aeec <PDM_Filter_setConfig+0x44>
 800afac:	4b28      	ldr	r3, [pc, #160]	; (800b050 <PDM_Filter_setConfig+0x1a8>)
 800afae:	64a3      	str	r3, [r4, #72]	; 0x48
 800afb0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800afb4:	2000      	movs	r0, #0
 800afb6:	e792      	b.n	800aede <PDM_Filter_setConfig+0x36>
 800afb8:	4b26      	ldr	r3, [pc, #152]	; (800b054 <PDM_Filter_setConfig+0x1ac>)
 800afba:	64a3      	str	r3, [r4, #72]	; 0x48
 800afbc:	e7f8      	b.n	800afb0 <PDM_Filter_setConfig+0x108>
 800afbe:	4b26      	ldr	r3, [pc, #152]	; (800b058 <PDM_Filter_setConfig+0x1b0>)
 800afc0:	64a3      	str	r3, [r4, #72]	; 0x48
 800afc2:	e7f5      	b.n	800afb0 <PDM_Filter_setConfig+0x108>
 800afc4:	4b25      	ldr	r3, [pc, #148]	; (800b05c <PDM_Filter_setConfig+0x1b4>)
 800afc6:	64a3      	str	r3, [r4, #72]	; 0x48
 800afc8:	e7f2      	b.n	800afb0 <PDM_Filter_setConfig+0x108>
 800afca:	4b25      	ldr	r3, [pc, #148]	; (800b060 <PDM_Filter_setConfig+0x1b8>)
 800afcc:	64a3      	str	r3, [r4, #72]	; 0x48
 800afce:	e7ef      	b.n	800afb0 <PDM_Filter_setConfig+0x108>
 800afd0:	4b24      	ldr	r3, [pc, #144]	; (800b064 <PDM_Filter_setConfig+0x1bc>)
 800afd2:	64a3      	str	r3, [r4, #72]	; 0x48
 800afd4:	e7ec      	b.n	800afb0 <PDM_Filter_setConfig+0x108>
 800afd6:	4b24      	ldr	r3, [pc, #144]	; (800b068 <PDM_Filter_setConfig+0x1c0>)
 800afd8:	64a3      	str	r3, [r4, #72]	; 0x48
 800afda:	e7e9      	b.n	800afb0 <PDM_Filter_setConfig+0x108>
 800afdc:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800afde:	4291      	cmp	r1, r2
 800afe0:	f47f af7d 	bne.w	800aede <PDM_Filter_setConfig+0x36>
 800afe4:	e783      	b.n	800aeee <PDM_Filter_setConfig+0x46>
 800afe6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800afea:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800afee:	4299      	cmp	r1, r3
 800aff0:	d023      	beq.n	800b03a <PDM_Filter_setConfig+0x192>
 800aff2:	2000      	movs	r0, #0
 800aff4:	e773      	b.n	800aede <PDM_Filter_setConfig+0x36>
 800aff6:	2b06      	cmp	r3, #6
 800aff8:	d822      	bhi.n	800b040 <PDM_Filter_setConfig+0x198>
 800affa:	e8df f003 	tbb	[pc, r3]
 800affe:	1316      	.short	0x1316
 800b000:	070a0d10 	.word	0x070a0d10
 800b004:	04          	.byte	0x04
 800b005:	00          	.byte	0x00
 800b006:	4b19      	ldr	r3, [pc, #100]	; (800b06c <PDM_Filter_setConfig+0x1c4>)
 800b008:	64a3      	str	r3, [r4, #72]	; 0x48
 800b00a:	e7d1      	b.n	800afb0 <PDM_Filter_setConfig+0x108>
 800b00c:	4b18      	ldr	r3, [pc, #96]	; (800b070 <PDM_Filter_setConfig+0x1c8>)
 800b00e:	64a3      	str	r3, [r4, #72]	; 0x48
 800b010:	e7ce      	b.n	800afb0 <PDM_Filter_setConfig+0x108>
 800b012:	4b18      	ldr	r3, [pc, #96]	; (800b074 <PDM_Filter_setConfig+0x1cc>)
 800b014:	64a3      	str	r3, [r4, #72]	; 0x48
 800b016:	e7cb      	b.n	800afb0 <PDM_Filter_setConfig+0x108>
 800b018:	4b17      	ldr	r3, [pc, #92]	; (800b078 <PDM_Filter_setConfig+0x1d0>)
 800b01a:	64a3      	str	r3, [r4, #72]	; 0x48
 800b01c:	e7c8      	b.n	800afb0 <PDM_Filter_setConfig+0x108>
 800b01e:	4b17      	ldr	r3, [pc, #92]	; (800b07c <PDM_Filter_setConfig+0x1d4>)
 800b020:	64a3      	str	r3, [r4, #72]	; 0x48
 800b022:	e7c5      	b.n	800afb0 <PDM_Filter_setConfig+0x108>
 800b024:	4b16      	ldr	r3, [pc, #88]	; (800b080 <PDM_Filter_setConfig+0x1d8>)
 800b026:	64a3      	str	r3, [r4, #72]	; 0x48
 800b028:	e7c2      	b.n	800afb0 <PDM_Filter_setConfig+0x108>
 800b02a:	4b16      	ldr	r3, [pc, #88]	; (800b084 <PDM_Filter_setConfig+0x1dc>)
 800b02c:	64a3      	str	r3, [r4, #72]	; 0x48
 800b02e:	e7bf      	b.n	800afb0 <PDM_Filter_setConfig+0x108>
 800b030:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800b088 <PDM_Filter_setConfig+0x1e0>
 800b034:	eeb0 9a48 	vmov.f32	s18, s16
 800b038:	e78e      	b.n	800af58 <PDM_Filter_setConfig+0xb0>
 800b03a:	886b      	ldrh	r3, [r5, #2]
 800b03c:	8663      	strh	r3, [r4, #50]	; 0x32
 800b03e:	e759      	b.n	800aef4 <PDM_Filter_setConfig+0x4c>
 800b040:	2000      	movs	r0, #0
 800b042:	e746      	b.n	800aed2 <PDM_Filter_setConfig+0x2a>
 800b044:	b5e8b5cd 	.word	0xb5e8b5cd
 800b048:	0800c1d8 	.word	0x0800c1d8
 800b04c:	42000000 	.word	0x42000000
 800b050:	08009415 	.word	0x08009415
 800b054:	080092f5 	.word	0x080092f5
 800b058:	080095a5 	.word	0x080095a5
 800b05c:	08009de9 	.word	0x08009de9
 800b060:	08009b49 	.word	0x08009b49
 800b064:	08009929 	.word	0x08009929
 800b068:	0800973d 	.word	0x0800973d
 800b06c:	0800a3f5 	.word	0x0800a3f5
 800b070:	0800a2bd 	.word	0x0800a2bd
 800b074:	0800a1d9 	.word	0x0800a1d9
 800b078:	0800aa71 	.word	0x0800aa71
 800b07c:	0800a85d 	.word	0x0800a85d
 800b080:	0800a6a5 	.word	0x0800a6a5
 800b084:	0800a539 	.word	0x0800a539
 800b088:	00000000 	.word	0x00000000

0800b08c <PDM_Filter>:
 800b08c:	b410      	push	{r4}
 800b08e:	4b0c      	ldr	r3, [pc, #48]	; (800b0c0 <PDM_Filter+0x34>)
 800b090:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800b092:	429c      	cmp	r4, r3
 800b094:	d003      	beq.n	800b09e <PDM_Filter+0x12>
 800b096:	2004      	movs	r0, #4
 800b098:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b09c:	4770      	bx	lr
 800b09e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b0a0:	05dc      	lsls	r4, r3, #23
 800b0a2:	d407      	bmi.n	800b0b4 <PDM_Filter+0x28>
 800b0a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b0a8:	bf14      	ite	ne
 800b0aa:	2020      	movne	r0, #32
 800b0ac:	2030      	moveq	r0, #48	; 0x30
 800b0ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0b2:	4770      	bx	lr
 800b0b4:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800b0b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ba:	320c      	adds	r2, #12
 800b0bc:	4718      	bx	r3
 800b0be:	bf00      	nop
 800b0c0:	b5e8b5cd 	.word	0xb5e8b5cd

0800b0c4 <CRC_Lock>:
 800b0c4:	4a17      	ldr	r2, [pc, #92]	; (800b124 <CRC_Lock+0x60>)
 800b0c6:	6813      	ldr	r3, [r2, #0]
 800b0c8:	b410      	push	{r4}
 800b0ca:	f023 0301 	bic.w	r3, r3, #1
 800b0ce:	4c16      	ldr	r4, [pc, #88]	; (800b128 <CRC_Lock+0x64>)
 800b0d0:	6013      	str	r3, [r2, #0]
 800b0d2:	6823      	ldr	r3, [r4, #0]
 800b0d4:	b933      	cbnz	r3, 800b0e4 <CRC_Lock+0x20>
 800b0d6:	4b15      	ldr	r3, [pc, #84]	; (800b12c <CRC_Lock+0x68>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0de:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b0e2:	d00f      	beq.n	800b104 <CRC_Lock+0x40>
 800b0e4:	4a12      	ldr	r2, [pc, #72]	; (800b130 <CRC_Lock+0x6c>)
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	6013      	str	r3, [r2, #0]
 800b0ea:	6813      	ldr	r3, [r2, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d1fc      	bne.n	800b0ea <CRC_Lock+0x26>
 800b0f0:	4b10      	ldr	r3, [pc, #64]	; (800b134 <CRC_Lock+0x70>)
 800b0f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0f6:	6018      	str	r0, [r3, #0]
 800b0f8:	6818      	ldr	r0, [r3, #0]
 800b0fa:	1a08      	subs	r0, r1, r0
 800b0fc:	fab0 f080 	clz	r0, r0
 800b100:	0940      	lsrs	r0, r0, #5
 800b102:	4770      	bx	lr
 800b104:	4a0c      	ldr	r2, [pc, #48]	; (800b138 <CRC_Lock+0x74>)
 800b106:	2301      	movs	r3, #1
 800b108:	6013      	str	r3, [r2, #0]
 800b10a:	6813      	ldr	r3, [r2, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1fc      	bne.n	800b10a <CRC_Lock+0x46>
 800b110:	4b0a      	ldr	r3, [pc, #40]	; (800b13c <CRC_Lock+0x78>)
 800b112:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b116:	6018      	str	r0, [r3, #0]
 800b118:	6818      	ldr	r0, [r3, #0]
 800b11a:	1a40      	subs	r0, r0, r1
 800b11c:	fab0 f080 	clz	r0, r0
 800b120:	0940      	lsrs	r0, r0, #5
 800b122:	4770      	bx	lr
 800b124:	e0002000 	.word	0xe0002000
 800b128:	e0042000 	.word	0xe0042000
 800b12c:	5c001000 	.word	0x5c001000
 800b130:	40023008 	.word	0x40023008
 800b134:	40023000 	.word	0x40023000
 800b138:	58024c08 	.word	0x58024c08
 800b13c:	58024c00 	.word	0x58024c00

0800b140 <__libc_init_array>:
 800b140:	b570      	push	{r4, r5, r6, lr}
 800b142:	4d0d      	ldr	r5, [pc, #52]	; (800b178 <__libc_init_array+0x38>)
 800b144:	4c0d      	ldr	r4, [pc, #52]	; (800b17c <__libc_init_array+0x3c>)
 800b146:	1b64      	subs	r4, r4, r5
 800b148:	10a4      	asrs	r4, r4, #2
 800b14a:	2600      	movs	r6, #0
 800b14c:	42a6      	cmp	r6, r4
 800b14e:	d109      	bne.n	800b164 <__libc_init_array+0x24>
 800b150:	4d0b      	ldr	r5, [pc, #44]	; (800b180 <__libc_init_array+0x40>)
 800b152:	4c0c      	ldr	r4, [pc, #48]	; (800b184 <__libc_init_array+0x44>)
 800b154:	f000 fd84 	bl	800bc60 <_init>
 800b158:	1b64      	subs	r4, r4, r5
 800b15a:	10a4      	asrs	r4, r4, #2
 800b15c:	2600      	movs	r6, #0
 800b15e:	42a6      	cmp	r6, r4
 800b160:	d105      	bne.n	800b16e <__libc_init_array+0x2e>
 800b162:	bd70      	pop	{r4, r5, r6, pc}
 800b164:	f855 3b04 	ldr.w	r3, [r5], #4
 800b168:	4798      	blx	r3
 800b16a:	3601      	adds	r6, #1
 800b16c:	e7ee      	b.n	800b14c <__libc_init_array+0xc>
 800b16e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b172:	4798      	blx	r3
 800b174:	3601      	adds	r6, #1
 800b176:	e7f2      	b.n	800b15e <__libc_init_array+0x1e>
 800b178:	0800c2a0 	.word	0x0800c2a0
 800b17c:	0800c2a0 	.word	0x0800c2a0
 800b180:	0800c2a0 	.word	0x0800c2a0
 800b184:	0800c2a4 	.word	0x0800c2a4

0800b188 <malloc>:
 800b188:	4b02      	ldr	r3, [pc, #8]	; (800b194 <malloc+0xc>)
 800b18a:	4601      	mov	r1, r0
 800b18c:	6818      	ldr	r0, [r3, #0]
 800b18e:	f000 b871 	b.w	800b274 <_malloc_r>
 800b192:	bf00      	nop
 800b194:	200004ec 	.word	0x200004ec

0800b198 <free>:
 800b198:	4b02      	ldr	r3, [pc, #8]	; (800b1a4 <free+0xc>)
 800b19a:	4601      	mov	r1, r0
 800b19c:	6818      	ldr	r0, [r3, #0]
 800b19e:	f000 b819 	b.w	800b1d4 <_free_r>
 800b1a2:	bf00      	nop
 800b1a4:	200004ec 	.word	0x200004ec

0800b1a8 <memcpy>:
 800b1a8:	440a      	add	r2, r1
 800b1aa:	4291      	cmp	r1, r2
 800b1ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1b0:	d100      	bne.n	800b1b4 <memcpy+0xc>
 800b1b2:	4770      	bx	lr
 800b1b4:	b510      	push	{r4, lr}
 800b1b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1be:	4291      	cmp	r1, r2
 800b1c0:	d1f9      	bne.n	800b1b6 <memcpy+0xe>
 800b1c2:	bd10      	pop	{r4, pc}

0800b1c4 <memset>:
 800b1c4:	4402      	add	r2, r0
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d100      	bne.n	800b1ce <memset+0xa>
 800b1cc:	4770      	bx	lr
 800b1ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b1d2:	e7f9      	b.n	800b1c8 <memset+0x4>

0800b1d4 <_free_r>:
 800b1d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1d6:	2900      	cmp	r1, #0
 800b1d8:	d048      	beq.n	800b26c <_free_r+0x98>
 800b1da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1de:	9001      	str	r0, [sp, #4]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	f1a1 0404 	sub.w	r4, r1, #4
 800b1e6:	bfb8      	it	lt
 800b1e8:	18e4      	addlt	r4, r4, r3
 800b1ea:	f000 f8ad 	bl	800b348 <__malloc_lock>
 800b1ee:	4a20      	ldr	r2, [pc, #128]	; (800b270 <_free_r+0x9c>)
 800b1f0:	9801      	ldr	r0, [sp, #4]
 800b1f2:	6813      	ldr	r3, [r2, #0]
 800b1f4:	4615      	mov	r5, r2
 800b1f6:	b933      	cbnz	r3, 800b206 <_free_r+0x32>
 800b1f8:	6063      	str	r3, [r4, #4]
 800b1fa:	6014      	str	r4, [r2, #0]
 800b1fc:	b003      	add	sp, #12
 800b1fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b202:	f000 b8a7 	b.w	800b354 <__malloc_unlock>
 800b206:	42a3      	cmp	r3, r4
 800b208:	d90b      	bls.n	800b222 <_free_r+0x4e>
 800b20a:	6821      	ldr	r1, [r4, #0]
 800b20c:	1862      	adds	r2, r4, r1
 800b20e:	4293      	cmp	r3, r2
 800b210:	bf04      	itt	eq
 800b212:	681a      	ldreq	r2, [r3, #0]
 800b214:	685b      	ldreq	r3, [r3, #4]
 800b216:	6063      	str	r3, [r4, #4]
 800b218:	bf04      	itt	eq
 800b21a:	1852      	addeq	r2, r2, r1
 800b21c:	6022      	streq	r2, [r4, #0]
 800b21e:	602c      	str	r4, [r5, #0]
 800b220:	e7ec      	b.n	800b1fc <_free_r+0x28>
 800b222:	461a      	mov	r2, r3
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	b10b      	cbz	r3, 800b22c <_free_r+0x58>
 800b228:	42a3      	cmp	r3, r4
 800b22a:	d9fa      	bls.n	800b222 <_free_r+0x4e>
 800b22c:	6811      	ldr	r1, [r2, #0]
 800b22e:	1855      	adds	r5, r2, r1
 800b230:	42a5      	cmp	r5, r4
 800b232:	d10b      	bne.n	800b24c <_free_r+0x78>
 800b234:	6824      	ldr	r4, [r4, #0]
 800b236:	4421      	add	r1, r4
 800b238:	1854      	adds	r4, r2, r1
 800b23a:	42a3      	cmp	r3, r4
 800b23c:	6011      	str	r1, [r2, #0]
 800b23e:	d1dd      	bne.n	800b1fc <_free_r+0x28>
 800b240:	681c      	ldr	r4, [r3, #0]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	6053      	str	r3, [r2, #4]
 800b246:	4421      	add	r1, r4
 800b248:	6011      	str	r1, [r2, #0]
 800b24a:	e7d7      	b.n	800b1fc <_free_r+0x28>
 800b24c:	d902      	bls.n	800b254 <_free_r+0x80>
 800b24e:	230c      	movs	r3, #12
 800b250:	6003      	str	r3, [r0, #0]
 800b252:	e7d3      	b.n	800b1fc <_free_r+0x28>
 800b254:	6825      	ldr	r5, [r4, #0]
 800b256:	1961      	adds	r1, r4, r5
 800b258:	428b      	cmp	r3, r1
 800b25a:	bf04      	itt	eq
 800b25c:	6819      	ldreq	r1, [r3, #0]
 800b25e:	685b      	ldreq	r3, [r3, #4]
 800b260:	6063      	str	r3, [r4, #4]
 800b262:	bf04      	itt	eq
 800b264:	1949      	addeq	r1, r1, r5
 800b266:	6021      	streq	r1, [r4, #0]
 800b268:	6054      	str	r4, [r2, #4]
 800b26a:	e7c7      	b.n	800b1fc <_free_r+0x28>
 800b26c:	b003      	add	sp, #12
 800b26e:	bd30      	pop	{r4, r5, pc}
 800b270:	20000aa8 	.word	0x20000aa8

0800b274 <_malloc_r>:
 800b274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b276:	1ccd      	adds	r5, r1, #3
 800b278:	f025 0503 	bic.w	r5, r5, #3
 800b27c:	3508      	adds	r5, #8
 800b27e:	2d0c      	cmp	r5, #12
 800b280:	bf38      	it	cc
 800b282:	250c      	movcc	r5, #12
 800b284:	2d00      	cmp	r5, #0
 800b286:	4606      	mov	r6, r0
 800b288:	db01      	blt.n	800b28e <_malloc_r+0x1a>
 800b28a:	42a9      	cmp	r1, r5
 800b28c:	d903      	bls.n	800b296 <_malloc_r+0x22>
 800b28e:	230c      	movs	r3, #12
 800b290:	6033      	str	r3, [r6, #0]
 800b292:	2000      	movs	r0, #0
 800b294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b296:	f000 f857 	bl	800b348 <__malloc_lock>
 800b29a:	4921      	ldr	r1, [pc, #132]	; (800b320 <_malloc_r+0xac>)
 800b29c:	680a      	ldr	r2, [r1, #0]
 800b29e:	4614      	mov	r4, r2
 800b2a0:	b99c      	cbnz	r4, 800b2ca <_malloc_r+0x56>
 800b2a2:	4f20      	ldr	r7, [pc, #128]	; (800b324 <_malloc_r+0xb0>)
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	b923      	cbnz	r3, 800b2b2 <_malloc_r+0x3e>
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	f000 f83c 	bl	800b328 <_sbrk_r>
 800b2b0:	6038      	str	r0, [r7, #0]
 800b2b2:	4629      	mov	r1, r5
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	f000 f837 	bl	800b328 <_sbrk_r>
 800b2ba:	1c43      	adds	r3, r0, #1
 800b2bc:	d123      	bne.n	800b306 <_malloc_r+0x92>
 800b2be:	230c      	movs	r3, #12
 800b2c0:	6033      	str	r3, [r6, #0]
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	f000 f846 	bl	800b354 <__malloc_unlock>
 800b2c8:	e7e3      	b.n	800b292 <_malloc_r+0x1e>
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	1b5b      	subs	r3, r3, r5
 800b2ce:	d417      	bmi.n	800b300 <_malloc_r+0x8c>
 800b2d0:	2b0b      	cmp	r3, #11
 800b2d2:	d903      	bls.n	800b2dc <_malloc_r+0x68>
 800b2d4:	6023      	str	r3, [r4, #0]
 800b2d6:	441c      	add	r4, r3
 800b2d8:	6025      	str	r5, [r4, #0]
 800b2da:	e004      	b.n	800b2e6 <_malloc_r+0x72>
 800b2dc:	6863      	ldr	r3, [r4, #4]
 800b2de:	42a2      	cmp	r2, r4
 800b2e0:	bf0c      	ite	eq
 800b2e2:	600b      	streq	r3, [r1, #0]
 800b2e4:	6053      	strne	r3, [r2, #4]
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	f000 f834 	bl	800b354 <__malloc_unlock>
 800b2ec:	f104 000b 	add.w	r0, r4, #11
 800b2f0:	1d23      	adds	r3, r4, #4
 800b2f2:	f020 0007 	bic.w	r0, r0, #7
 800b2f6:	1ac2      	subs	r2, r0, r3
 800b2f8:	d0cc      	beq.n	800b294 <_malloc_r+0x20>
 800b2fa:	1a1b      	subs	r3, r3, r0
 800b2fc:	50a3      	str	r3, [r4, r2]
 800b2fe:	e7c9      	b.n	800b294 <_malloc_r+0x20>
 800b300:	4622      	mov	r2, r4
 800b302:	6864      	ldr	r4, [r4, #4]
 800b304:	e7cc      	b.n	800b2a0 <_malloc_r+0x2c>
 800b306:	1cc4      	adds	r4, r0, #3
 800b308:	f024 0403 	bic.w	r4, r4, #3
 800b30c:	42a0      	cmp	r0, r4
 800b30e:	d0e3      	beq.n	800b2d8 <_malloc_r+0x64>
 800b310:	1a21      	subs	r1, r4, r0
 800b312:	4630      	mov	r0, r6
 800b314:	f000 f808 	bl	800b328 <_sbrk_r>
 800b318:	3001      	adds	r0, #1
 800b31a:	d1dd      	bne.n	800b2d8 <_malloc_r+0x64>
 800b31c:	e7cf      	b.n	800b2be <_malloc_r+0x4a>
 800b31e:	bf00      	nop
 800b320:	20000aa8 	.word	0x20000aa8
 800b324:	20000aac 	.word	0x20000aac

0800b328 <_sbrk_r>:
 800b328:	b538      	push	{r3, r4, r5, lr}
 800b32a:	4d06      	ldr	r5, [pc, #24]	; (800b344 <_sbrk_r+0x1c>)
 800b32c:	2300      	movs	r3, #0
 800b32e:	4604      	mov	r4, r0
 800b330:	4608      	mov	r0, r1
 800b332:	602b      	str	r3, [r5, #0]
 800b334:	f000 fc86 	bl	800bc44 <_sbrk>
 800b338:	1c43      	adds	r3, r0, #1
 800b33a:	d102      	bne.n	800b342 <_sbrk_r+0x1a>
 800b33c:	682b      	ldr	r3, [r5, #0]
 800b33e:	b103      	cbz	r3, 800b342 <_sbrk_r+0x1a>
 800b340:	6023      	str	r3, [r4, #0]
 800b342:	bd38      	pop	{r3, r4, r5, pc}
 800b344:	20004c2c 	.word	0x20004c2c

0800b348 <__malloc_lock>:
 800b348:	4801      	ldr	r0, [pc, #4]	; (800b350 <__malloc_lock+0x8>)
 800b34a:	f000 b809 	b.w	800b360 <__retarget_lock_acquire_recursive>
 800b34e:	bf00      	nop
 800b350:	20004c34 	.word	0x20004c34

0800b354 <__malloc_unlock>:
 800b354:	4801      	ldr	r0, [pc, #4]	; (800b35c <__malloc_unlock+0x8>)
 800b356:	f000 b804 	b.w	800b362 <__retarget_lock_release_recursive>
 800b35a:	bf00      	nop
 800b35c:	20004c34 	.word	0x20004c34

0800b360 <__retarget_lock_acquire_recursive>:
 800b360:	4770      	bx	lr

0800b362 <__retarget_lock_release_recursive>:
 800b362:	4770      	bx	lr

0800b364 <roundf>:
 800b364:	ee10 0a10 	vmov	r0, s0
 800b368:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b36c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800b370:	2a16      	cmp	r2, #22
 800b372:	dc15      	bgt.n	800b3a0 <roundf+0x3c>
 800b374:	2a00      	cmp	r2, #0
 800b376:	da08      	bge.n	800b38a <roundf+0x26>
 800b378:	3201      	adds	r2, #1
 800b37a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800b37e:	d101      	bne.n	800b384 <roundf+0x20>
 800b380:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800b384:	ee00 3a10 	vmov	s0, r3
 800b388:	4770      	bx	lr
 800b38a:	4908      	ldr	r1, [pc, #32]	; (800b3ac <roundf+0x48>)
 800b38c:	4111      	asrs	r1, r2
 800b38e:	4208      	tst	r0, r1
 800b390:	d0fa      	beq.n	800b388 <roundf+0x24>
 800b392:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b396:	4113      	asrs	r3, r2
 800b398:	4403      	add	r3, r0
 800b39a:	ea23 0301 	bic.w	r3, r3, r1
 800b39e:	e7f1      	b.n	800b384 <roundf+0x20>
 800b3a0:	2a80      	cmp	r2, #128	; 0x80
 800b3a2:	d1f1      	bne.n	800b388 <roundf+0x24>
 800b3a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	007fffff 	.word	0x007fffff

0800b3b0 <powf>:
 800b3b0:	b508      	push	{r3, lr}
 800b3b2:	ed2d 8b04 	vpush	{d8-d9}
 800b3b6:	eeb0 9a40 	vmov.f32	s18, s0
 800b3ba:	eef0 8a60 	vmov.f32	s17, s1
 800b3be:	f000 f88f 	bl	800b4e0 <__ieee754_powf>
 800b3c2:	4b43      	ldr	r3, [pc, #268]	; (800b4d0 <powf+0x120>)
 800b3c4:	f993 3000 	ldrsb.w	r3, [r3]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	eeb0 8a40 	vmov.f32	s16, s0
 800b3ce:	d012      	beq.n	800b3f6 <powf+0x46>
 800b3d0:	eef4 8a68 	vcmp.f32	s17, s17
 800b3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d8:	d60d      	bvs.n	800b3f6 <powf+0x46>
 800b3da:	eeb4 9a49 	vcmp.f32	s18, s18
 800b3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3e2:	d70d      	bvc.n	800b400 <powf+0x50>
 800b3e4:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b3f0:	bf08      	it	eq
 800b3f2:	eeb0 8a67 	vmoveq.f32	s16, s15
 800b3f6:	eeb0 0a48 	vmov.f32	s0, s16
 800b3fa:	ecbd 8b04 	vpop	{d8-d9}
 800b3fe:	bd08      	pop	{r3, pc}
 800b400:	eddf 9a34 	vldr	s19, [pc, #208]	; 800b4d4 <powf+0x124>
 800b404:	eeb4 9a69 	vcmp.f32	s18, s19
 800b408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b40c:	d116      	bne.n	800b43c <powf+0x8c>
 800b40e:	eef4 8a69 	vcmp.f32	s17, s19
 800b412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b416:	d057      	beq.n	800b4c8 <powf+0x118>
 800b418:	eeb0 0a68 	vmov.f32	s0, s17
 800b41c:	f000 fb2a 	bl	800ba74 <finitef>
 800b420:	2800      	cmp	r0, #0
 800b422:	d0e8      	beq.n	800b3f6 <powf+0x46>
 800b424:	eef4 8ae9 	vcmpe.f32	s17, s19
 800b428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b42c:	d5e3      	bpl.n	800b3f6 <powf+0x46>
 800b42e:	f000 fc03 	bl	800bc38 <__errno>
 800b432:	2321      	movs	r3, #33	; 0x21
 800b434:	6003      	str	r3, [r0, #0]
 800b436:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800b4d8 <powf+0x128>
 800b43a:	e7dc      	b.n	800b3f6 <powf+0x46>
 800b43c:	f000 fb1a 	bl	800ba74 <finitef>
 800b440:	bb50      	cbnz	r0, 800b498 <powf+0xe8>
 800b442:	eeb0 0a49 	vmov.f32	s0, s18
 800b446:	f000 fb15 	bl	800ba74 <finitef>
 800b44a:	b328      	cbz	r0, 800b498 <powf+0xe8>
 800b44c:	eeb0 0a68 	vmov.f32	s0, s17
 800b450:	f000 fb10 	bl	800ba74 <finitef>
 800b454:	b300      	cbz	r0, 800b498 <powf+0xe8>
 800b456:	eeb4 8a48 	vcmp.f32	s16, s16
 800b45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b45e:	d706      	bvc.n	800b46e <powf+0xbe>
 800b460:	f000 fbea 	bl	800bc38 <__errno>
 800b464:	2321      	movs	r3, #33	; 0x21
 800b466:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800b46a:	6003      	str	r3, [r0, #0]
 800b46c:	e7c3      	b.n	800b3f6 <powf+0x46>
 800b46e:	f000 fbe3 	bl	800bc38 <__errno>
 800b472:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800b476:	2322      	movs	r3, #34	; 0x22
 800b478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b47c:	6003      	str	r3, [r0, #0]
 800b47e:	d508      	bpl.n	800b492 <powf+0xe2>
 800b480:	eeb0 0a68 	vmov.f32	s0, s17
 800b484:	f000 fb0a 	bl	800ba9c <rintf>
 800b488:	eeb4 0a68 	vcmp.f32	s0, s17
 800b48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b490:	d1d1      	bne.n	800b436 <powf+0x86>
 800b492:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800b4dc <powf+0x12c>
 800b496:	e7ae      	b.n	800b3f6 <powf+0x46>
 800b498:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b49c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4a0:	d1a9      	bne.n	800b3f6 <powf+0x46>
 800b4a2:	eeb0 0a49 	vmov.f32	s0, s18
 800b4a6:	f000 fae5 	bl	800ba74 <finitef>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	d0a3      	beq.n	800b3f6 <powf+0x46>
 800b4ae:	eeb0 0a68 	vmov.f32	s0, s17
 800b4b2:	f000 fadf 	bl	800ba74 <finitef>
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	d09d      	beq.n	800b3f6 <powf+0x46>
 800b4ba:	f000 fbbd 	bl	800bc38 <__errno>
 800b4be:	2322      	movs	r3, #34	; 0x22
 800b4c0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800b4d4 <powf+0x124>
 800b4c4:	6003      	str	r3, [r0, #0]
 800b4c6:	e796      	b.n	800b3f6 <powf+0x46>
 800b4c8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800b4cc:	e793      	b.n	800b3f6 <powf+0x46>
 800b4ce:	bf00      	nop
 800b4d0:	20000550 	.word	0x20000550
 800b4d4:	00000000 	.word	0x00000000
 800b4d8:	ff800000 	.word	0xff800000
 800b4dc:	7f800000 	.word	0x7f800000

0800b4e0 <__ieee754_powf>:
 800b4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e4:	ee10 5a90 	vmov	r5, s1
 800b4e8:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800b4ec:	ed2d 8b02 	vpush	{d8}
 800b4f0:	eeb0 8a40 	vmov.f32	s16, s0
 800b4f4:	eef0 8a60 	vmov.f32	s17, s1
 800b4f8:	f000 8291 	beq.w	800ba1e <__ieee754_powf+0x53e>
 800b4fc:	ee10 8a10 	vmov	r8, s0
 800b500:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800b504:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800b508:	dc06      	bgt.n	800b518 <__ieee754_powf+0x38>
 800b50a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800b50e:	dd0a      	ble.n	800b526 <__ieee754_powf+0x46>
 800b510:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800b514:	f000 8283 	beq.w	800ba1e <__ieee754_powf+0x53e>
 800b518:	ecbd 8b02 	vpop	{d8}
 800b51c:	48d8      	ldr	r0, [pc, #864]	; (800b880 <__ieee754_powf+0x3a0>)
 800b51e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b522:	f000 bab5 	b.w	800ba90 <nanf>
 800b526:	f1b8 0f00 	cmp.w	r8, #0
 800b52a:	da1f      	bge.n	800b56c <__ieee754_powf+0x8c>
 800b52c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800b530:	da2e      	bge.n	800b590 <__ieee754_powf+0xb0>
 800b532:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800b536:	f2c0 827b 	blt.w	800ba30 <__ieee754_powf+0x550>
 800b53a:	15fb      	asrs	r3, r7, #23
 800b53c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800b540:	fa47 f603 	asr.w	r6, r7, r3
 800b544:	fa06 f303 	lsl.w	r3, r6, r3
 800b548:	42bb      	cmp	r3, r7
 800b54a:	f040 8271 	bne.w	800ba30 <__ieee754_powf+0x550>
 800b54e:	f006 0601 	and.w	r6, r6, #1
 800b552:	f1c6 0602 	rsb	r6, r6, #2
 800b556:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800b55a:	d120      	bne.n	800b59e <__ieee754_powf+0xbe>
 800b55c:	2d00      	cmp	r5, #0
 800b55e:	f280 8264 	bge.w	800ba2a <__ieee754_powf+0x54a>
 800b562:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b566:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800b56a:	e00d      	b.n	800b588 <__ieee754_powf+0xa8>
 800b56c:	2600      	movs	r6, #0
 800b56e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800b572:	d1f0      	bne.n	800b556 <__ieee754_powf+0x76>
 800b574:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800b578:	f000 8251 	beq.w	800ba1e <__ieee754_powf+0x53e>
 800b57c:	dd0a      	ble.n	800b594 <__ieee754_powf+0xb4>
 800b57e:	2d00      	cmp	r5, #0
 800b580:	f280 8250 	bge.w	800ba24 <__ieee754_powf+0x544>
 800b584:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800b884 <__ieee754_powf+0x3a4>
 800b588:	ecbd 8b02 	vpop	{d8}
 800b58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b590:	2602      	movs	r6, #2
 800b592:	e7ec      	b.n	800b56e <__ieee754_powf+0x8e>
 800b594:	2d00      	cmp	r5, #0
 800b596:	daf5      	bge.n	800b584 <__ieee754_powf+0xa4>
 800b598:	eeb1 0a68 	vneg.f32	s0, s17
 800b59c:	e7f4      	b.n	800b588 <__ieee754_powf+0xa8>
 800b59e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800b5a2:	d102      	bne.n	800b5aa <__ieee754_powf+0xca>
 800b5a4:	ee28 0a08 	vmul.f32	s0, s16, s16
 800b5a8:	e7ee      	b.n	800b588 <__ieee754_powf+0xa8>
 800b5aa:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800b5ae:	eeb0 0a48 	vmov.f32	s0, s16
 800b5b2:	d108      	bne.n	800b5c6 <__ieee754_powf+0xe6>
 800b5b4:	f1b8 0f00 	cmp.w	r8, #0
 800b5b8:	db05      	blt.n	800b5c6 <__ieee754_powf+0xe6>
 800b5ba:	ecbd 8b02 	vpop	{d8}
 800b5be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c2:	f000 ba4d 	b.w	800ba60 <__ieee754_sqrtf>
 800b5c6:	f000 fa4e 	bl	800ba66 <fabsf>
 800b5ca:	b124      	cbz	r4, 800b5d6 <__ieee754_powf+0xf6>
 800b5cc:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800b5d0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b5d4:	d117      	bne.n	800b606 <__ieee754_powf+0x126>
 800b5d6:	2d00      	cmp	r5, #0
 800b5d8:	bfbc      	itt	lt
 800b5da:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800b5de:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800b5e2:	f1b8 0f00 	cmp.w	r8, #0
 800b5e6:	dacf      	bge.n	800b588 <__ieee754_powf+0xa8>
 800b5e8:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800b5ec:	ea54 0306 	orrs.w	r3, r4, r6
 800b5f0:	d104      	bne.n	800b5fc <__ieee754_powf+0x11c>
 800b5f2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b5f6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b5fa:	e7c5      	b.n	800b588 <__ieee754_powf+0xa8>
 800b5fc:	2e01      	cmp	r6, #1
 800b5fe:	d1c3      	bne.n	800b588 <__ieee754_powf+0xa8>
 800b600:	eeb1 0a40 	vneg.f32	s0, s0
 800b604:	e7c0      	b.n	800b588 <__ieee754_powf+0xa8>
 800b606:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800b60a:	3801      	subs	r0, #1
 800b60c:	ea56 0300 	orrs.w	r3, r6, r0
 800b610:	d104      	bne.n	800b61c <__ieee754_powf+0x13c>
 800b612:	ee38 8a48 	vsub.f32	s16, s16, s16
 800b616:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800b61a:	e7b5      	b.n	800b588 <__ieee754_powf+0xa8>
 800b61c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800b620:	dd6b      	ble.n	800b6fa <__ieee754_powf+0x21a>
 800b622:	4b99      	ldr	r3, [pc, #612]	; (800b888 <__ieee754_powf+0x3a8>)
 800b624:	429c      	cmp	r4, r3
 800b626:	dc06      	bgt.n	800b636 <__ieee754_powf+0x156>
 800b628:	2d00      	cmp	r5, #0
 800b62a:	daab      	bge.n	800b584 <__ieee754_powf+0xa4>
 800b62c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800b88c <__ieee754_powf+0x3ac>
 800b630:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b634:	e7a8      	b.n	800b588 <__ieee754_powf+0xa8>
 800b636:	4b96      	ldr	r3, [pc, #600]	; (800b890 <__ieee754_powf+0x3b0>)
 800b638:	429c      	cmp	r4, r3
 800b63a:	dd02      	ble.n	800b642 <__ieee754_powf+0x162>
 800b63c:	2d00      	cmp	r5, #0
 800b63e:	dcf5      	bgt.n	800b62c <__ieee754_powf+0x14c>
 800b640:	e7a0      	b.n	800b584 <__ieee754_powf+0xa4>
 800b642:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b646:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b64a:	eddf 6a92 	vldr	s13, [pc, #584]	; 800b894 <__ieee754_powf+0x3b4>
 800b64e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800b652:	eee0 6a67 	vfms.f32	s13, s0, s15
 800b656:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b65a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800b65e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b662:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b666:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800b898 <__ieee754_powf+0x3b8>
 800b66a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800b66e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800b89c <__ieee754_powf+0x3bc>
 800b672:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b676:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800b8a0 <__ieee754_powf+0x3c0>
 800b67a:	eef0 6a67 	vmov.f32	s13, s15
 800b67e:	eee0 6a07 	vfma.f32	s13, s0, s14
 800b682:	ee16 3a90 	vmov	r3, s13
 800b686:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b68a:	f023 030f 	bic.w	r3, r3, #15
 800b68e:	ee00 3a90 	vmov	s1, r3
 800b692:	eee0 0a47 	vfms.f32	s1, s0, s14
 800b696:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b69a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800b69e:	f025 050f 	bic.w	r5, r5, #15
 800b6a2:	ee07 5a10 	vmov	s14, r5
 800b6a6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800b6aa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800b6ae:	ee07 3a90 	vmov	s15, r3
 800b6b2:	eee7 0a27 	vfma.f32	s1, s14, s15
 800b6b6:	3e01      	subs	r6, #1
 800b6b8:	ea56 0200 	orrs.w	r2, r6, r0
 800b6bc:	ee07 5a10 	vmov	s14, r5
 800b6c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6c4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800b6c8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800b6cc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800b6d0:	ee17 4a10 	vmov	r4, s14
 800b6d4:	bf08      	it	eq
 800b6d6:	eeb0 8a40 	vmoveq.f32	s16, s0
 800b6da:	2c00      	cmp	r4, #0
 800b6dc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b6e0:	f340 8184 	ble.w	800b9ec <__ieee754_powf+0x50c>
 800b6e4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800b6e8:	f340 80fc 	ble.w	800b8e4 <__ieee754_powf+0x404>
 800b6ec:	eddf 7a67 	vldr	s15, [pc, #412]	; 800b88c <__ieee754_powf+0x3ac>
 800b6f0:	ee28 0a27 	vmul.f32	s0, s16, s15
 800b6f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b6f8:	e746      	b.n	800b588 <__ieee754_powf+0xa8>
 800b6fa:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800b6fe:	bf01      	itttt	eq
 800b700:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800b8a4 <__ieee754_powf+0x3c4>
 800b704:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800b708:	f06f 0217 	mvneq.w	r2, #23
 800b70c:	ee17 4a90 	vmoveq	r4, s15
 800b710:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800b714:	bf18      	it	ne
 800b716:	2200      	movne	r2, #0
 800b718:	3b7f      	subs	r3, #127	; 0x7f
 800b71a:	4413      	add	r3, r2
 800b71c:	4a62      	ldr	r2, [pc, #392]	; (800b8a8 <__ieee754_powf+0x3c8>)
 800b71e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800b722:	4294      	cmp	r4, r2
 800b724:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800b728:	dd06      	ble.n	800b738 <__ieee754_powf+0x258>
 800b72a:	4a60      	ldr	r2, [pc, #384]	; (800b8ac <__ieee754_powf+0x3cc>)
 800b72c:	4294      	cmp	r4, r2
 800b72e:	f340 80a4 	ble.w	800b87a <__ieee754_powf+0x39a>
 800b732:	3301      	adds	r3, #1
 800b734:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b738:	2400      	movs	r4, #0
 800b73a:	4a5d      	ldr	r2, [pc, #372]	; (800b8b0 <__ieee754_powf+0x3d0>)
 800b73c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b740:	ee07 1a90 	vmov	s15, r1
 800b744:	ed92 7a00 	vldr	s14, [r2]
 800b748:	4a5a      	ldr	r2, [pc, #360]	; (800b8b4 <__ieee754_powf+0x3d4>)
 800b74a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800b74e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b752:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800b756:	1049      	asrs	r1, r1, #1
 800b758:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800b75c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800b760:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800b764:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800b768:	ee06 1a10 	vmov	s12, r1
 800b76c:	ee65 4a26 	vmul.f32	s9, s10, s13
 800b770:	ee36 7a47 	vsub.f32	s14, s12, s14
 800b774:	ee14 7a90 	vmov	r7, s9
 800b778:	4017      	ands	r7, r2
 800b77a:	ee05 7a90 	vmov	s11, r7
 800b77e:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800b782:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b786:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800b8b8 <__ieee754_powf+0x3d8>
 800b78a:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800b78e:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800b792:	ee25 6a26 	vmul.f32	s12, s10, s13
 800b796:	eddf 6a49 	vldr	s13, [pc, #292]	; 800b8bc <__ieee754_powf+0x3dc>
 800b79a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b79e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b8c0 <__ieee754_powf+0x3e0>
 800b7a2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b7a6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800b894 <__ieee754_powf+0x3b4>
 800b7aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b7ae:	eddf 6a45 	vldr	s13, [pc, #276]	; 800b8c4 <__ieee754_powf+0x3e4>
 800b7b2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b7b6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800b8c8 <__ieee754_powf+0x3e8>
 800b7ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b7be:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800b7c2:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800b7c6:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b7ca:	eee5 6a07 	vfma.f32	s13, s10, s14
 800b7ce:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800b7d2:	eef0 7a45 	vmov.f32	s15, s10
 800b7d6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800b7da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7de:	ee17 1a90 	vmov	r1, s15
 800b7e2:	4011      	ands	r1, r2
 800b7e4:	ee07 1a90 	vmov	s15, r1
 800b7e8:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800b7ec:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800b7f0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b7f4:	ee27 7a24 	vmul.f32	s14, s14, s9
 800b7f8:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b7fc:	eeb0 6a47 	vmov.f32	s12, s14
 800b800:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800b804:	ee16 1a10 	vmov	r1, s12
 800b808:	4011      	ands	r1, r2
 800b80a:	ee06 1a90 	vmov	s13, r1
 800b80e:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800b812:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800b8cc <__ieee754_powf+0x3ec>
 800b816:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b8d0 <__ieee754_powf+0x3f0>
 800b81a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b81e:	ee06 1a10 	vmov	s12, r1
 800b822:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b826:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b8d4 <__ieee754_powf+0x3f4>
 800b82a:	492b      	ldr	r1, [pc, #172]	; (800b8d8 <__ieee754_powf+0x3f8>)
 800b82c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b830:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b834:	edd1 7a00 	vldr	s15, [r1]
 800b838:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b83c:	ee07 3a90 	vmov	s15, r3
 800b840:	4b26      	ldr	r3, [pc, #152]	; (800b8dc <__ieee754_powf+0x3fc>)
 800b842:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b846:	eef0 7a47 	vmov.f32	s15, s14
 800b84a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b84e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b852:	edd4 0a00 	vldr	s1, [r4]
 800b856:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b85a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b85e:	ee17 3a90 	vmov	r3, s15
 800b862:	4013      	ands	r3, r2
 800b864:	ee07 3a90 	vmov	s15, r3
 800b868:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b86c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800b870:	eee6 6a65 	vfms.f32	s13, s12, s11
 800b874:	ee77 7a66 	vsub.f32	s15, s14, s13
 800b878:	e70f      	b.n	800b69a <__ieee754_powf+0x1ba>
 800b87a:	2401      	movs	r4, #1
 800b87c:	e75d      	b.n	800b73a <__ieee754_powf+0x25a>
 800b87e:	bf00      	nop
 800b880:	0800c270 	.word	0x0800c270
 800b884:	00000000 	.word	0x00000000
 800b888:	3f7ffff7 	.word	0x3f7ffff7
 800b88c:	7149f2ca 	.word	0x7149f2ca
 800b890:	3f800007 	.word	0x3f800007
 800b894:	3eaaaaab 	.word	0x3eaaaaab
 800b898:	3fb8aa3b 	.word	0x3fb8aa3b
 800b89c:	36eca570 	.word	0x36eca570
 800b8a0:	3fb8aa00 	.word	0x3fb8aa00
 800b8a4:	4b800000 	.word	0x4b800000
 800b8a8:	001cc471 	.word	0x001cc471
 800b8ac:	005db3d6 	.word	0x005db3d6
 800b8b0:	0800c278 	.word	0x0800c278
 800b8b4:	fffff000 	.word	0xfffff000
 800b8b8:	3e6c3255 	.word	0x3e6c3255
 800b8bc:	3e53f142 	.word	0x3e53f142
 800b8c0:	3e8ba305 	.word	0x3e8ba305
 800b8c4:	3edb6db7 	.word	0x3edb6db7
 800b8c8:	3f19999a 	.word	0x3f19999a
 800b8cc:	3f76384f 	.word	0x3f76384f
 800b8d0:	3f763800 	.word	0x3f763800
 800b8d4:	369dc3a0 	.word	0x369dc3a0
 800b8d8:	0800c288 	.word	0x0800c288
 800b8dc:	0800c280 	.word	0x0800c280
 800b8e0:	3338aa3c 	.word	0x3338aa3c
 800b8e4:	f040 8092 	bne.w	800ba0c <__ieee754_powf+0x52c>
 800b8e8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800b8e0 <__ieee754_powf+0x400>
 800b8ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b8f0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800b8f4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8fc:	f73f aef6 	bgt.w	800b6ec <__ieee754_powf+0x20c>
 800b900:	15db      	asrs	r3, r3, #23
 800b902:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800b906:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b90a:	4103      	asrs	r3, r0
 800b90c:	4423      	add	r3, r4
 800b90e:	4949      	ldr	r1, [pc, #292]	; (800ba34 <__ieee754_powf+0x554>)
 800b910:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b914:	3a7f      	subs	r2, #127	; 0x7f
 800b916:	4111      	asrs	r1, r2
 800b918:	ea23 0101 	bic.w	r1, r3, r1
 800b91c:	ee07 1a10 	vmov	s14, r1
 800b920:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800b924:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800b928:	f1c2 0217 	rsb	r2, r2, #23
 800b92c:	4110      	asrs	r0, r2
 800b92e:	2c00      	cmp	r4, #0
 800b930:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b934:	bfb8      	it	lt
 800b936:	4240      	neglt	r0, r0
 800b938:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800b93c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800ba38 <__ieee754_powf+0x558>
 800b940:	ee17 3a10 	vmov	r3, s14
 800b944:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b948:	f023 030f 	bic.w	r3, r3, #15
 800b94c:	ee07 3a10 	vmov	s14, r3
 800b950:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b954:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b958:	eddf 7a38 	vldr	s15, [pc, #224]	; 800ba3c <__ieee754_powf+0x55c>
 800b95c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b960:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800b964:	eddf 6a36 	vldr	s13, [pc, #216]	; 800ba40 <__ieee754_powf+0x560>
 800b968:	eeb0 0a67 	vmov.f32	s0, s15
 800b96c:	eea7 0a26 	vfma.f32	s0, s14, s13
 800b970:	eeb0 6a40 	vmov.f32	s12, s0
 800b974:	eea7 6a66 	vfms.f32	s12, s14, s13
 800b978:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b97c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b980:	eddf 6a30 	vldr	s13, [pc, #192]	; 800ba44 <__ieee754_powf+0x564>
 800b984:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800ba48 <__ieee754_powf+0x568>
 800b988:	eea7 6a26 	vfma.f32	s12, s14, s13
 800b98c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800ba4c <__ieee754_powf+0x56c>
 800b990:	eee6 6a07 	vfma.f32	s13, s12, s14
 800b994:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800ba50 <__ieee754_powf+0x570>
 800b998:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b99c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800ba54 <__ieee754_powf+0x574>
 800b9a0:	eee6 6a07 	vfma.f32	s13, s12, s14
 800b9a4:	eeb0 6a40 	vmov.f32	s12, s0
 800b9a8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800b9ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b9b0:	eeb0 7a46 	vmov.f32	s14, s12
 800b9b4:	ee77 6a66 	vsub.f32	s13, s14, s13
 800b9b8:	ee20 6a06 	vmul.f32	s12, s0, s12
 800b9bc:	eee0 7a27 	vfma.f32	s15, s0, s15
 800b9c0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800b9c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9c8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b9cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b9d0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b9d4:	ee10 3a10 	vmov	r3, s0
 800b9d8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800b9dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b9e0:	da1a      	bge.n	800ba18 <__ieee754_powf+0x538>
 800b9e2:	f000 f8b7 	bl	800bb54 <scalbnf>
 800b9e6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b9ea:	e5cd      	b.n	800b588 <__ieee754_powf+0xa8>
 800b9ec:	4a1a      	ldr	r2, [pc, #104]	; (800ba58 <__ieee754_powf+0x578>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	dd02      	ble.n	800b9f8 <__ieee754_powf+0x518>
 800b9f2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800ba5c <__ieee754_powf+0x57c>
 800b9f6:	e67b      	b.n	800b6f0 <__ieee754_powf+0x210>
 800b9f8:	d108      	bne.n	800ba0c <__ieee754_powf+0x52c>
 800b9fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b9fe:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800ba02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba06:	f6ff af7b 	blt.w	800b900 <__ieee754_powf+0x420>
 800ba0a:	e7f2      	b.n	800b9f2 <__ieee754_powf+0x512>
 800ba0c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800ba10:	f73f af76 	bgt.w	800b900 <__ieee754_powf+0x420>
 800ba14:	2000      	movs	r0, #0
 800ba16:	e78f      	b.n	800b938 <__ieee754_powf+0x458>
 800ba18:	ee00 3a10 	vmov	s0, r3
 800ba1c:	e7e3      	b.n	800b9e6 <__ieee754_powf+0x506>
 800ba1e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ba22:	e5b1      	b.n	800b588 <__ieee754_powf+0xa8>
 800ba24:	eeb0 0a68 	vmov.f32	s0, s17
 800ba28:	e5ae      	b.n	800b588 <__ieee754_powf+0xa8>
 800ba2a:	eeb0 0a48 	vmov.f32	s0, s16
 800ba2e:	e5ab      	b.n	800b588 <__ieee754_powf+0xa8>
 800ba30:	2600      	movs	r6, #0
 800ba32:	e590      	b.n	800b556 <__ieee754_powf+0x76>
 800ba34:	007fffff 	.word	0x007fffff
 800ba38:	3f317218 	.word	0x3f317218
 800ba3c:	35bfbe8c 	.word	0x35bfbe8c
 800ba40:	3f317200 	.word	0x3f317200
 800ba44:	3331bb4c 	.word	0x3331bb4c
 800ba48:	b5ddea0e 	.word	0xb5ddea0e
 800ba4c:	388ab355 	.word	0x388ab355
 800ba50:	bb360b61 	.word	0xbb360b61
 800ba54:	3e2aaaab 	.word	0x3e2aaaab
 800ba58:	43160000 	.word	0x43160000
 800ba5c:	0da24260 	.word	0x0da24260

0800ba60 <__ieee754_sqrtf>:
 800ba60:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ba64:	4770      	bx	lr

0800ba66 <fabsf>:
 800ba66:	ee10 3a10 	vmov	r3, s0
 800ba6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ba6e:	ee00 3a10 	vmov	s0, r3
 800ba72:	4770      	bx	lr

0800ba74 <finitef>:
 800ba74:	b082      	sub	sp, #8
 800ba76:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ba7a:	9801      	ldr	r0, [sp, #4]
 800ba7c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ba80:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ba84:	bfac      	ite	ge
 800ba86:	2000      	movge	r0, #0
 800ba88:	2001      	movlt	r0, #1
 800ba8a:	b002      	add	sp, #8
 800ba8c:	4770      	bx	lr
	...

0800ba90 <nanf>:
 800ba90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ba98 <nanf+0x8>
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop
 800ba98:	7fc00000 	.word	0x7fc00000

0800ba9c <rintf>:
 800ba9c:	ee10 2a10 	vmov	r2, s0
 800baa0:	b513      	push	{r0, r1, r4, lr}
 800baa2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800baa6:	397f      	subs	r1, #127	; 0x7f
 800baa8:	2916      	cmp	r1, #22
 800baaa:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800baae:	dc47      	bgt.n	800bb40 <rintf+0xa4>
 800bab0:	b32b      	cbz	r3, 800bafe <rintf+0x62>
 800bab2:	2900      	cmp	r1, #0
 800bab4:	ee10 3a10 	vmov	r3, s0
 800bab8:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800babc:	da21      	bge.n	800bb02 <rintf+0x66>
 800babe:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800bac2:	425b      	negs	r3, r3
 800bac4:	4921      	ldr	r1, [pc, #132]	; (800bb4c <rintf+0xb0>)
 800bac6:	0a5b      	lsrs	r3, r3, #9
 800bac8:	0d12      	lsrs	r2, r2, #20
 800baca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bace:	0512      	lsls	r2, r2, #20
 800bad0:	4313      	orrs	r3, r2
 800bad2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800bad6:	ee07 3a90 	vmov	s15, r3
 800bada:	edd1 6a00 	vldr	s13, [r1]
 800bade:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800bae2:	ed8d 7a01 	vstr	s14, [sp, #4]
 800bae6:	eddd 7a01 	vldr	s15, [sp, #4]
 800baea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800baee:	ee17 3a90 	vmov	r3, s15
 800baf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800baf6:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800bafa:	ee00 3a10 	vmov	s0, r3
 800bafe:	b002      	add	sp, #8
 800bb00:	bd10      	pop	{r4, pc}
 800bb02:	4a13      	ldr	r2, [pc, #76]	; (800bb50 <rintf+0xb4>)
 800bb04:	410a      	asrs	r2, r1
 800bb06:	4213      	tst	r3, r2
 800bb08:	d0f9      	beq.n	800bafe <rintf+0x62>
 800bb0a:	0854      	lsrs	r4, r2, #1
 800bb0c:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 800bb10:	d006      	beq.n	800bb20 <rintf+0x84>
 800bb12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bb16:	ea23 0304 	bic.w	r3, r3, r4
 800bb1a:	fa42 f101 	asr.w	r1, r2, r1
 800bb1e:	430b      	orrs	r3, r1
 800bb20:	4a0a      	ldr	r2, [pc, #40]	; (800bb4c <rintf+0xb0>)
 800bb22:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800bb26:	ed90 7a00 	vldr	s14, [r0]
 800bb2a:	ee07 3a90 	vmov	s15, r3
 800bb2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb32:	edcd 7a01 	vstr	s15, [sp, #4]
 800bb36:	ed9d 0a01 	vldr	s0, [sp, #4]
 800bb3a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bb3e:	e7de      	b.n	800bafe <rintf+0x62>
 800bb40:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800bb44:	d3db      	bcc.n	800bafe <rintf+0x62>
 800bb46:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bb4a:	e7d8      	b.n	800bafe <rintf+0x62>
 800bb4c:	0800c290 	.word	0x0800c290
 800bb50:	007fffff 	.word	0x007fffff

0800bb54 <scalbnf>:
 800bb54:	ee10 3a10 	vmov	r3, s0
 800bb58:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800bb5c:	d025      	beq.n	800bbaa <scalbnf+0x56>
 800bb5e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bb62:	d302      	bcc.n	800bb6a <scalbnf+0x16>
 800bb64:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bb68:	4770      	bx	lr
 800bb6a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800bb6e:	d122      	bne.n	800bbb6 <scalbnf+0x62>
 800bb70:	4b2a      	ldr	r3, [pc, #168]	; (800bc1c <scalbnf+0xc8>)
 800bb72:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800bc20 <scalbnf+0xcc>
 800bb76:	4298      	cmp	r0, r3
 800bb78:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bb7c:	db16      	blt.n	800bbac <scalbnf+0x58>
 800bb7e:	ee10 3a10 	vmov	r3, s0
 800bb82:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bb86:	3a19      	subs	r2, #25
 800bb88:	4402      	add	r2, r0
 800bb8a:	2afe      	cmp	r2, #254	; 0xfe
 800bb8c:	dd15      	ble.n	800bbba <scalbnf+0x66>
 800bb8e:	ee10 3a10 	vmov	r3, s0
 800bb92:	eddf 7a24 	vldr	s15, [pc, #144]	; 800bc24 <scalbnf+0xd0>
 800bb96:	eddf 6a24 	vldr	s13, [pc, #144]	; 800bc28 <scalbnf+0xd4>
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	eeb0 7a67 	vmov.f32	s14, s15
 800bba0:	bfb8      	it	lt
 800bba2:	eef0 7a66 	vmovlt.f32	s15, s13
 800bba6:	ee27 0a27 	vmul.f32	s0, s14, s15
 800bbaa:	4770      	bx	lr
 800bbac:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800bc2c <scalbnf+0xd8>
 800bbb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bbb4:	4770      	bx	lr
 800bbb6:	0dd2      	lsrs	r2, r2, #23
 800bbb8:	e7e6      	b.n	800bb88 <scalbnf+0x34>
 800bbba:	2a00      	cmp	r2, #0
 800bbbc:	dd06      	ble.n	800bbcc <scalbnf+0x78>
 800bbbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bbc2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800bbc6:	ee00 3a10 	vmov	s0, r3
 800bbca:	4770      	bx	lr
 800bbcc:	f112 0f16 	cmn.w	r2, #22
 800bbd0:	da1a      	bge.n	800bc08 <scalbnf+0xb4>
 800bbd2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bbd6:	4298      	cmp	r0, r3
 800bbd8:	ee10 3a10 	vmov	r3, s0
 800bbdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbe0:	dd0a      	ble.n	800bbf8 <scalbnf+0xa4>
 800bbe2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800bc24 <scalbnf+0xd0>
 800bbe6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800bc28 <scalbnf+0xd4>
 800bbea:	eef0 7a40 	vmov.f32	s15, s0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	bf18      	it	ne
 800bbf2:	eeb0 0a47 	vmovne.f32	s0, s14
 800bbf6:	e7db      	b.n	800bbb0 <scalbnf+0x5c>
 800bbf8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800bc2c <scalbnf+0xd8>
 800bbfc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800bc30 <scalbnf+0xdc>
 800bc00:	eef0 7a40 	vmov.f32	s15, s0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	e7f3      	b.n	800bbf0 <scalbnf+0x9c>
 800bc08:	3219      	adds	r2, #25
 800bc0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bc0e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800bc12:	eddf 7a08 	vldr	s15, [pc, #32]	; 800bc34 <scalbnf+0xe0>
 800bc16:	ee07 3a10 	vmov	s14, r3
 800bc1a:	e7c4      	b.n	800bba6 <scalbnf+0x52>
 800bc1c:	ffff3cb0 	.word	0xffff3cb0
 800bc20:	4c000000 	.word	0x4c000000
 800bc24:	7149f2ca 	.word	0x7149f2ca
 800bc28:	f149f2ca 	.word	0xf149f2ca
 800bc2c:	0da24260 	.word	0x0da24260
 800bc30:	8da24260 	.word	0x8da24260
 800bc34:	33000000 	.word	0x33000000

0800bc38 <__errno>:
 800bc38:	4b01      	ldr	r3, [pc, #4]	; (800bc40 <__errno+0x8>)
 800bc3a:	6818      	ldr	r0, [r3, #0]
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop
 800bc40:	200004ec 	.word	0x200004ec

0800bc44 <_sbrk>:
 800bc44:	4b04      	ldr	r3, [pc, #16]	; (800bc58 <_sbrk+0x14>)
 800bc46:	6819      	ldr	r1, [r3, #0]
 800bc48:	4602      	mov	r2, r0
 800bc4a:	b909      	cbnz	r1, 800bc50 <_sbrk+0xc>
 800bc4c:	4903      	ldr	r1, [pc, #12]	; (800bc5c <_sbrk+0x18>)
 800bc4e:	6019      	str	r1, [r3, #0]
 800bc50:	6818      	ldr	r0, [r3, #0]
 800bc52:	4402      	add	r2, r0
 800bc54:	601a      	str	r2, [r3, #0]
 800bc56:	4770      	bx	lr
 800bc58:	20000ab0 	.word	0x20000ab0
 800bc5c:	20004c40 	.word	0x20004c40

0800bc60 <_init>:
 800bc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc62:	bf00      	nop
 800bc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc66:	bc08      	pop	{r3}
 800bc68:	469e      	mov	lr, r3
 800bc6a:	4770      	bx	lr

0800bc6c <_fini>:
 800bc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc6e:	bf00      	nop
 800bc70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc72:	bc08      	pop	{r3}
 800bc74:	469e      	mov	lr, r3
 800bc76:	4770      	bx	lr
