Demo projekt na osnovi osnovnega projekta za USB VComPort, blinkanje LED diod in branje modre tipke
     tipka je na PA0 in se njeno stanje zapiše na LED diodo (modro)
     
Dodana je SPI komunikacija s prisotnim pospeškomerom LIS302DL.

Postopek :

1. New project -> STM32 Project -> Board -> 407DISC1
2. CubeMX: Spremeniti USB Host v USB Device :
	Connectivity -> USB_OTG_FS -> Mode v Device Only
	Middleware   -> DEVICE_USB in Class Virtual Com Port
	
3. generirati kodo in dodati naslednje odseke :
	main.c :
		izpis na Micro-USB port 
			/* USER CODE BEGIN PV */
			#define BUFSIZE 256
			char SendBuffer[BUFSIZE];
			
			/* USER CODE END PV */
			
			v glavni zanki :
			snprintf (SendBuffer,BUFSIZE,"USB:2 secs\r\n");
	    	CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));

      		HAL_Delay(2000);
			
		LED diode
			zacetno stanje :
			  /* USER CODE BEGIN 2 */
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,1);
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,0);
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,1);
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,0);
			
			  /* USER CODE END 2 */
			
			
			glavna zanka :	
			
				  /* USER CODE BEGIN WHILE */
				  while (1)
				  {
				
					 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
					 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
					 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
				
					 KeyState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
					 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, KeyState);
				
				
					  snprintf(SendBuffer,BUFSIZE,"Hello World [%d]: Key:%d\r\n",Counter++,KeyState);
					  CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
				
				    /* USER CODE END WHILE */
				
				    /* USER CODE BEGIN 3 */
					  HAL_Delay(1000);
				  }
				  /* USER CODE END 3 */
	
4. CubeMX: SPI1 PRescaler na 256 (namesto 2)

5. Osnovna koda za SPI komunikacijo s pospeškometrom (branje registra)
			
			/* USER CODE BEGIN PV */
			...
			
			// Global variables
			uint8_t indata[2];
			uint8_t outdata[2] = {0,0};
			uint8_t lis_id;
			int8_t AccelX;
			int8_t AccelY;
			int8_t AccelZ;
			
			HAL_StatusTypeDef SPIStatus;
			
			/* USER CODE END PV */
			
			
			
			  /* USER CODE BEGIN 2 */
			
			  // Config accelerometer
			
			  // Read WHOAMI register
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
			  outdata[0] = 0x0f | 0x80 ;  // read whoami
			  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
			  lis_id = indata[1];
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
			
			  HAL_Delay(500);
			
			  // Read WHOAMI register
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
			  outdata[0] = 0x20 ;  // switch on axes
			  outdata[1] = 0x47 ;
			  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
			  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
			
			  HAL_Delay(500);
			  outdata[1] = 0x00 ;
			
			  /* USER CODE END 2 */
			
			
			  /* USER CODE BEGIN WHILE */
			  while (1)
			  {
			
			
					  outdata[0] = 0x29 | 0x80  ;  // read x
					  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
					  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
			//			 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
					  AccelX = indata[1];
			
					  outdata[0] = 0x2B | 0x80  ;  // read y
			//		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
					  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
			//			 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
					  AccelY = indata[1];
			
					  outdata[0] = 0x2D | 0x80  ;  // read z
			//		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
					  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
					  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
					  AccelZ = indata[1];
			
				  snprintf(SendBuffer,BUFSIZE,"Hello World [%d]: Key:%04d Accel[ID:%02x] X:%04d Y:%d Z:%04d\r\n",Counter++,KeyState,lis_id,AccelX,AccelY,AccelZ);
				  CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
			
			