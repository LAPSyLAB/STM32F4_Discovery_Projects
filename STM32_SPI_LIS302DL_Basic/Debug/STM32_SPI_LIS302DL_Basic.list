
STM32_SPI_LIS302DL_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08009484  08009484  00019484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800955c  0800955c  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  0800955c  0800955c  0001955c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009564  08009564  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009564  08009564  00019564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009568  08009568  00019568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  0800956c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          00001f80  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200020cc  200020cc  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001533a  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003da9  00000000  00000000  000354f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001248  00000000  00000000  000392a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000dd5  00000000  00000000  0003a4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024aef  00000000  00000000  0003b2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ad31  00000000  00000000  0005fdb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ca769  00000000  00000000  0007aae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004f60  00000000  00000000  00145250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  0014a1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800946c 	.word	0x0800946c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	0800946c 	.word	0x0800946c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08c      	sub	sp, #48	; 0x30
 8000580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
 8000596:	4b72      	ldr	r3, [pc, #456]	; (8000760 <MX_GPIO_Init+0x1e4>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a71      	ldr	r2, [pc, #452]	; (8000760 <MX_GPIO_Init+0x1e4>)
 800059c:	f043 0310 	orr.w	r3, r3, #16
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b6f      	ldr	r3, [pc, #444]	; (8000760 <MX_GPIO_Init+0x1e4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0310 	and.w	r3, r3, #16
 80005aa:	61bb      	str	r3, [r7, #24]
 80005ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
 80005b2:	4b6b      	ldr	r3, [pc, #428]	; (8000760 <MX_GPIO_Init+0x1e4>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a6a      	ldr	r2, [pc, #424]	; (8000760 <MX_GPIO_Init+0x1e4>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b68      	ldr	r3, [pc, #416]	; (8000760 <MX_GPIO_Init+0x1e4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]
 80005ce:	4b64      	ldr	r3, [pc, #400]	; (8000760 <MX_GPIO_Init+0x1e4>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a63      	ldr	r2, [pc, #396]	; (8000760 <MX_GPIO_Init+0x1e4>)
 80005d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b61      	ldr	r3, [pc, #388]	; (8000760 <MX_GPIO_Init+0x1e4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	4b5d      	ldr	r3, [pc, #372]	; (8000760 <MX_GPIO_Init+0x1e4>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a5c      	ldr	r2, [pc, #368]	; (8000760 <MX_GPIO_Init+0x1e4>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b5a      	ldr	r3, [pc, #360]	; (8000760 <MX_GPIO_Init+0x1e4>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b56      	ldr	r3, [pc, #344]	; (8000760 <MX_GPIO_Init+0x1e4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a55      	ldr	r2, [pc, #340]	; (8000760 <MX_GPIO_Init+0x1e4>)
 800060c:	f043 0302 	orr.w	r3, r3, #2
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b53      	ldr	r3, [pc, #332]	; (8000760 <MX_GPIO_Init+0x1e4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b4f      	ldr	r3, [pc, #316]	; (8000760 <MX_GPIO_Init+0x1e4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a4e      	ldr	r2, [pc, #312]	; (8000760 <MX_GPIO_Init+0x1e4>)
 8000628:	f043 0308 	orr.w	r3, r3, #8
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b4c      	ldr	r3, [pc, #304]	; (8000760 <MX_GPIO_Init+0x1e4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2108      	movs	r1, #8
 800063e:	4849      	ldr	r0, [pc, #292]	; (8000764 <MX_GPIO_Init+0x1e8>)
 8000640:	f000 ffce 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	2101      	movs	r1, #1
 8000648:	4847      	ldr	r0, [pc, #284]	; (8000768 <MX_GPIO_Init+0x1ec>)
 800064a:	f000 ffc9 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800064e:	2200      	movs	r2, #0
 8000650:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000654:	4845      	ldr	r0, [pc, #276]	; (800076c <MX_GPIO_Init+0x1f0>)
 8000656:	f000 ffc3 	bl	80015e0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800065a:	2308      	movs	r3, #8
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	2301      	movs	r3, #1
 8000660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	4619      	mov	r1, r3
 8000670:	483c      	ldr	r0, [pc, #240]	; (8000764 <MX_GPIO_Init+0x1e8>)
 8000672:	f000 fe01 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000676:	2301      	movs	r3, #1
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	4619      	mov	r1, r3
 800068c:	4836      	ldr	r0, [pc, #216]	; (8000768 <MX_GPIO_Init+0x1ec>)
 800068e:	f000 fdf3 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000692:	2308      	movs	r3, #8
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	2302      	movs	r3, #2
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006a2:	2305      	movs	r3, #5
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	482e      	ldr	r0, [pc, #184]	; (8000768 <MX_GPIO_Init+0x1ec>)
 80006ae:	f000 fde3 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b2:	2301      	movs	r3, #1
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006b6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4619      	mov	r1, r3
 80006c6:	482a      	ldr	r0, [pc, #168]	; (8000770 <MX_GPIO_Init+0x1f4>)
 80006c8:	f000 fdd6 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006cc:	2304      	movs	r3, #4
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	4825      	ldr	r0, [pc, #148]	; (8000774 <MX_GPIO_Init+0x1f8>)
 80006e0:	f000 fdca 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006f6:	2305      	movs	r3, #5
 80006f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	481c      	ldr	r0, [pc, #112]	; (8000774 <MX_GPIO_Init+0x1f8>)
 8000702:	f000 fdb9 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000706:	f24f 0310 	movw	r3, #61456	; 0xf010
 800070a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	4813      	ldr	r0, [pc, #76]	; (800076c <MX_GPIO_Init+0x1f0>)
 8000720:	f000 fdaa 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000724:	2320      	movs	r3, #32
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	480d      	ldr	r0, [pc, #52]	; (800076c <MX_GPIO_Init+0x1f0>)
 8000738:	f000 fd9e 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800073c:	2302      	movs	r3, #2
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000740:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_GPIO_Init+0x1e8>)
 8000752:	f000 fd91 	bl	8001278 <HAL_GPIO_Init>

}
 8000756:	bf00      	nop
 8000758:	3730      	adds	r7, #48	; 0x30
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40021000 	.word	0x40021000
 8000768:	40020800 	.word	0x40020800
 800076c:	40020c00 	.word	0x40020c00
 8000770:	40020000 	.word	0x40020000
 8000774:	40020400 	.word	0x40020400

08000778 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_I2C1_Init+0x50>)
 800077e:	4a13      	ldr	r2, [pc, #76]	; (80007cc <MX_I2C1_Init+0x54>)
 8000780:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_I2C1_Init+0x50>)
 8000784:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <MX_I2C1_Init+0x58>)
 8000786:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_I2C1_Init+0x50>)
 8000796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800079a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_I2C1_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_I2C1_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_I2C1_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_I2C1_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_I2C1_Init+0x50>)
 80007b6:	f000 ff47 	bl	8001648 <HAL_I2C_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007c0:	f000 fa60 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000168 	.word	0x20000168
 80007cc:	40005400 	.word	0x40005400
 80007d0:	000186a0 	.word	0x000186a0

080007d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a19      	ldr	r2, [pc, #100]	; (8000858 <HAL_I2C_MspInit+0x84>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d12c      	bne.n	8000850 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	4b18      	ldr	r3, [pc, #96]	; (800085c <HAL_I2C_MspInit+0x88>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a17      	ldr	r2, [pc, #92]	; (800085c <HAL_I2C_MspInit+0x88>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <HAL_I2C_MspInit+0x88>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000812:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000818:	2312      	movs	r3, #18
 800081a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800081c:	2301      	movs	r3, #1
 800081e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000824:	2304      	movs	r3, #4
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	480c      	ldr	r0, [pc, #48]	; (8000860 <HAL_I2C_MspInit+0x8c>)
 8000830:	f000 fd22 	bl	8001278 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_I2C_MspInit+0x88>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	4a07      	ldr	r2, [pc, #28]	; (800085c <HAL_I2C_MspInit+0x88>)
 800083e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000842:	6413      	str	r3, [r2, #64]	; 0x40
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_I2C_MspInit+0x88>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000850:	bf00      	nop
 8000852:	3728      	adds	r7, #40	; 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40005400 	.word	0x40005400
 800085c:	40023800 	.word	0x40023800
 8000860:	40020400 	.word	0x40020400

08000864 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_I2S3_Init+0x54>)
 800086a:	4a14      	ldr	r2, [pc, #80]	; (80008bc <MX_I2S3_Init+0x58>)
 800086c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_I2S3_Init+0x54>)
 8000870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000874:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_I2S3_Init+0x54>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_I2S3_Init+0x54>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MX_I2S3_Init+0x54>)
 8000884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000888:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_I2S3_Init+0x54>)
 800088c:	4a0c      	ldr	r2, [pc, #48]	; (80008c0 <MX_I2S3_Init+0x5c>)
 800088e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_I2S3_Init+0x54>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_I2S3_Init+0x54>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_I2S3_Init+0x54>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_I2S3_Init+0x54>)
 80008a4:	f001 f814 	bl	80018d0 <HAL_I2S_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008ae:	f000 f9e9 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200001bc 	.word	0x200001bc
 80008bc:	40003c00 	.word	0x40003c00
 80008c0:	00017700 	.word	0x00017700

080008c4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08e      	sub	sp, #56	; 0x38
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a31      	ldr	r2, [pc, #196]	; (80009b4 <HAL_I2S_MspInit+0xf0>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d15a      	bne.n	80009aa <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008f4:	2301      	movs	r3, #1
 80008f6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008f8:	23c0      	movs	r3, #192	; 0xc0
 80008fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4618      	mov	r0, r3
 8000906:	f003 fb85 	bl	8004014 <HAL_RCCEx_PeriphCLKConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000910:	f000 f9b8 	bl	8000c84 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <HAL_I2S_MspInit+0xf4>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	4a26      	ldr	r2, [pc, #152]	; (80009b8 <HAL_I2S_MspInit+0xf4>)
 800091e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000922:	6413      	str	r3, [r2, #64]	; 0x40
 8000924:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <HAL_I2S_MspInit+0xf4>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	4b20      	ldr	r3, [pc, #128]	; (80009b8 <HAL_I2S_MspInit+0xf4>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	4a1f      	ldr	r2, [pc, #124]	; (80009b8 <HAL_I2S_MspInit+0xf4>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6313      	str	r3, [r2, #48]	; 0x30
 8000940:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <HAL_I2S_MspInit+0xf4>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <HAL_I2S_MspInit+0xf4>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	4a18      	ldr	r2, [pc, #96]	; (80009b8 <HAL_I2S_MspInit+0xf4>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	6313      	str	r3, [r2, #48]	; 0x30
 800095c:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <HAL_I2S_MspInit+0xf4>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000960:	f003 0304 	and.w	r3, r3, #4
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000968:	2310      	movs	r3, #16
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000978:	2306      	movs	r3, #6
 800097a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000980:	4619      	mov	r1, r3
 8000982:	480e      	ldr	r0, [pc, #56]	; (80009bc <HAL_I2S_MspInit+0xf8>)
 8000984:	f000 fc78 	bl	8001278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000988:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800099a:	2306      	movs	r3, #6
 800099c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	4619      	mov	r1, r3
 80009a4:	4806      	ldr	r0, [pc, #24]	; (80009c0 <HAL_I2S_MspInit+0xfc>)
 80009a6:	f000 fc67 	bl	8001278 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009aa:	bf00      	nop
 80009ac:	3738      	adds	r7, #56	; 0x38
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40003c00 	.word	0x40003c00
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020000 	.word	0x40020000
 80009c0:	40020800 	.word	0x40020800

080009c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c4:	b5b0      	push	{r4, r5, r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ca:	f000 faad 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ce:	f000 f8ef 	bl	8000bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d2:	f7ff fdd3 	bl	800057c <MX_GPIO_Init>
  MX_I2C1_Init();
 80009d6:	f7ff fecf 	bl	8000778 <MX_I2C1_Init>
  MX_I2S3_Init();
 80009da:	f7ff ff43 	bl	8000864 <MX_I2S3_Init>
  MX_SPI1_Init();
 80009de:	f000 f957 	bl	8000c90 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80009e2:	f007 fb63 	bl	80080ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // Config accelerometer
  // Read WHOAMI register
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2108      	movs	r1, #8
 80009ea:	4863      	ldr	r0, [pc, #396]	; (8000b78 <main+0x1b4>)
 80009ec:	f000 fdf8 	bl	80015e0 <HAL_GPIO_WritePin>
  outdata[0] = 0x0f | 0x80 ;  // read whoami
 80009f0:	4b62      	ldr	r3, [pc, #392]	; (8000b7c <main+0x1b8>)
 80009f2:	228f      	movs	r2, #143	; 0x8f
 80009f4:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2302      	movs	r3, #2
 80009fe:	4a60      	ldr	r2, [pc, #384]	; (8000b80 <main+0x1bc>)
 8000a00:	495e      	ldr	r1, [pc, #376]	; (8000b7c <main+0x1b8>)
 8000a02:	4860      	ldr	r0, [pc, #384]	; (8000b84 <main+0x1c0>)
 8000a04:	f003 fccf 	bl	80043a6 <HAL_SPI_TransmitReceive>
  lis_id = indata[1];
 8000a08:	4b5d      	ldr	r3, [pc, #372]	; (8000b80 <main+0x1bc>)
 8000a0a:	785a      	ldrb	r2, [r3, #1]
 8000a0c:	4b5e      	ldr	r3, [pc, #376]	; (8000b88 <main+0x1c4>)
 8000a0e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2108      	movs	r1, #8
 8000a14:	4858      	ldr	r0, [pc, #352]	; (8000b78 <main+0x1b4>)
 8000a16:	f000 fde3 	bl	80015e0 <HAL_GPIO_WritePin>

  HAL_Delay(500);
 8000a1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a1e:	f000 faf5 	bl	800100c <HAL_Delay>

  // Write to CTRL register (enable 3 axes meaurements on 25Hz)
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2108      	movs	r1, #8
 8000a26:	4854      	ldr	r0, [pc, #336]	; (8000b78 <main+0x1b4>)
 8000a28:	f000 fdda 	bl	80015e0 <HAL_GPIO_WritePin>
  outdata[0] = 0x20 ;  // switch on axes
 8000a2c:	4b53      	ldr	r3, [pc, #332]	; (8000b7c <main+0x1b8>)
 8000a2e:	2220      	movs	r2, #32
 8000a30:	701a      	strb	r2, [r3, #0]
  outdata[1] = 0x47 ;
 8000a32:	4b52      	ldr	r3, [pc, #328]	; (8000b7c <main+0x1b8>)
 8000a34:	2247      	movs	r2, #71	; 0x47
 8000a36:	705a      	strb	r2, [r3, #1]
  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000a38:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2302      	movs	r3, #2
 8000a40:	4a4f      	ldr	r2, [pc, #316]	; (8000b80 <main+0x1bc>)
 8000a42:	494e      	ldr	r1, [pc, #312]	; (8000b7c <main+0x1b8>)
 8000a44:	484f      	ldr	r0, [pc, #316]	; (8000b84 <main+0x1c0>)
 8000a46:	f003 fcae 	bl	80043a6 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2108      	movs	r1, #8
 8000a4e:	484a      	ldr	r0, [pc, #296]	; (8000b78 <main+0x1b4>)
 8000a50:	f000 fdc6 	bl	80015e0 <HAL_GPIO_WritePin>

  HAL_Delay(500);
 8000a54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a58:	f000 fad8 	bl	800100c <HAL_Delay>
  outdata[1] = 0x00 ;
 8000a5c:	4b47      	ldr	r3, [pc, #284]	; (8000b7c <main+0x1b8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	705a      	strb	r2, [r3, #1]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	  // Read x,y,z axes
		  outdata[0] = 0x29 | 0x80  ;  // read x
 8000a62:	4b46      	ldr	r3, [pc, #280]	; (8000b7c <main+0x1b8>)
 8000a64:	22a9      	movs	r2, #169	; 0xa9
 8000a66:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2108      	movs	r1, #8
 8000a6c:	4842      	ldr	r0, [pc, #264]	; (8000b78 <main+0x1b4>)
 8000a6e:	f000 fdb7 	bl	80015e0 <HAL_GPIO_WritePin>
		  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	2302      	movs	r3, #2
 8000a7a:	4a41      	ldr	r2, [pc, #260]	; (8000b80 <main+0x1bc>)
 8000a7c:	493f      	ldr	r1, [pc, #252]	; (8000b7c <main+0x1b8>)
 8000a7e:	4841      	ldr	r0, [pc, #260]	; (8000b84 <main+0x1c0>)
 8000a80:	f003 fc91 	bl	80043a6 <HAL_SPI_TransmitReceive>
		  AccelX = indata[1];
 8000a84:	4b3e      	ldr	r3, [pc, #248]	; (8000b80 <main+0x1bc>)
 8000a86:	785b      	ldrb	r3, [r3, #1]
 8000a88:	b25a      	sxtb	r2, r3
 8000a8a:	4b40      	ldr	r3, [pc, #256]	; (8000b8c <main+0x1c8>)
 8000a8c:	701a      	strb	r2, [r3, #0]

		  outdata[0] = 0x2B | 0x80  ;  // read y
 8000a8e:	4b3b      	ldr	r3, [pc, #236]	; (8000b7c <main+0x1b8>)
 8000a90:	22ab      	movs	r2, #171	; 0xab
 8000a92:	701a      	strb	r2, [r3, #0]
		  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	4a38      	ldr	r2, [pc, #224]	; (8000b80 <main+0x1bc>)
 8000a9e:	4937      	ldr	r1, [pc, #220]	; (8000b7c <main+0x1b8>)
 8000aa0:	4838      	ldr	r0, [pc, #224]	; (8000b84 <main+0x1c0>)
 8000aa2:	f003 fc80 	bl	80043a6 <HAL_SPI_TransmitReceive>
		  AccelY = indata[1];
 8000aa6:	4b36      	ldr	r3, [pc, #216]	; (8000b80 <main+0x1bc>)
 8000aa8:	785b      	ldrb	r3, [r3, #1]
 8000aaa:	b25a      	sxtb	r2, r3
 8000aac:	4b38      	ldr	r3, [pc, #224]	; (8000b90 <main+0x1cc>)
 8000aae:	701a      	strb	r2, [r3, #0]

		  outdata[0] = 0x2D | 0x80  ;  // read z
 8000ab0:	4b32      	ldr	r3, [pc, #200]	; (8000b7c <main+0x1b8>)
 8000ab2:	22ad      	movs	r2, #173	; 0xad
 8000ab4:	701a      	strb	r2, [r3, #0]
		  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2302      	movs	r3, #2
 8000abe:	4a30      	ldr	r2, [pc, #192]	; (8000b80 <main+0x1bc>)
 8000ac0:	492e      	ldr	r1, [pc, #184]	; (8000b7c <main+0x1b8>)
 8000ac2:	4830      	ldr	r0, [pc, #192]	; (8000b84 <main+0x1c0>)
 8000ac4:	f003 fc6f 	bl	80043a6 <HAL_SPI_TransmitReceive>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2108      	movs	r1, #8
 8000acc:	482a      	ldr	r0, [pc, #168]	; (8000b78 <main+0x1b4>)
 8000ace:	f000 fd87 	bl	80015e0 <HAL_GPIO_WritePin>
		  AccelZ = indata[1];
 8000ad2:	4b2b      	ldr	r3, [pc, #172]	; (8000b80 <main+0x1bc>)
 8000ad4:	785b      	ldrb	r3, [r3, #1]
 8000ad6:	b25a      	sxtb	r2, r3
 8000ad8:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <main+0x1d0>)
 8000ada:	701a      	strb	r2, [r3, #0]



	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae0:	482d      	ldr	r0, [pc, #180]	; (8000b98 <main+0x1d4>)
 8000ae2:	f000 fd96 	bl	8001612 <HAL_GPIO_TogglePin>
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000ae6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aea:	482b      	ldr	r0, [pc, #172]	; (8000b98 <main+0x1d4>)
 8000aec:	f000 fd91 	bl	8001612 <HAL_GPIO_TogglePin>
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000af0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000af4:	4828      	ldr	r0, [pc, #160]	; (8000b98 <main+0x1d4>)
 8000af6:	f000 fd8c 	bl	8001612 <HAL_GPIO_TogglePin>

	 KeyState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000afa:	2101      	movs	r1, #1
 8000afc:	4827      	ldr	r0, [pc, #156]	; (8000b9c <main+0x1d8>)
 8000afe:	f000 fd57 	bl	80015b0 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <main+0x1dc>)
 8000b08:	601a      	str	r2, [r3, #0]
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, KeyState);
 8000b0a:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <main+0x1dc>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b16:	4820      	ldr	r0, [pc, #128]	; (8000b98 <main+0x1d4>)
 8000b18:	f000 fd62 	bl	80015e0 <HAL_GPIO_WritePin>


	  snprintf(SendBuffer,BUFSIZE,"Hello World [%d]: Key:%04d Accel[ID:%02x] X:%04d Y:%d Z:%04d\r\n",Counter++,KeyState,lis_id,AccelX,AccelY,AccelZ);
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <main+0x1e0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	1c5a      	adds	r2, r3, #1
 8000b22:	4920      	ldr	r1, [pc, #128]	; (8000ba4 <main+0x1e0>)
 8000b24:	600a      	str	r2, [r1, #0]
 8000b26:	4a1e      	ldr	r2, [pc, #120]	; (8000ba0 <main+0x1dc>)
 8000b28:	6812      	ldr	r2, [r2, #0]
 8000b2a:	4917      	ldr	r1, [pc, #92]	; (8000b88 <main+0x1c4>)
 8000b2c:	7809      	ldrb	r1, [r1, #0]
 8000b2e:	4608      	mov	r0, r1
 8000b30:	4916      	ldr	r1, [pc, #88]	; (8000b8c <main+0x1c8>)
 8000b32:	f991 1000 	ldrsb.w	r1, [r1]
 8000b36:	460c      	mov	r4, r1
 8000b38:	4915      	ldr	r1, [pc, #84]	; (8000b90 <main+0x1cc>)
 8000b3a:	f991 1000 	ldrsb.w	r1, [r1]
 8000b3e:	460d      	mov	r5, r1
 8000b40:	4914      	ldr	r1, [pc, #80]	; (8000b94 <main+0x1d0>)
 8000b42:	f991 1000 	ldrsb.w	r1, [r1]
 8000b46:	9104      	str	r1, [sp, #16]
 8000b48:	9503      	str	r5, [sp, #12]
 8000b4a:	9402      	str	r4, [sp, #8]
 8000b4c:	9001      	str	r0, [sp, #4]
 8000b4e:	9200      	str	r2, [sp, #0]
 8000b50:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <main+0x1e4>)
 8000b52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b56:	4815      	ldr	r0, [pc, #84]	; (8000bac <main+0x1e8>)
 8000b58:	f007 ffd0 	bl	8008afc <sniprintf>
	  CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8000b5c:	4813      	ldr	r0, [pc, #76]	; (8000bac <main+0x1e8>)
 8000b5e:	f7ff fb37 	bl	80001d0 <strlen>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4619      	mov	r1, r3
 8000b66:	4811      	ldr	r0, [pc, #68]	; (8000bac <main+0x1e8>)
 8000b68:	f007 fb5e 	bl	8008228 <CDC_Transmit_FS>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8000b6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b70:	f000 fa4c 	bl	800100c <HAL_Delay>
  {
 8000b74:	e775      	b.n	8000a62 <main+0x9e>
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	20000310 	.word	0x20000310
 8000b80:	2000030c 	.word	0x2000030c
 8000b84:	20000318 	.word	0x20000318
 8000b88:	20000312 	.word	0x20000312
 8000b8c:	20000313 	.word	0x20000313
 8000b90:	20000314 	.word	0x20000314
 8000b94:	20000315 	.word	0x20000315
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	20000308 	.word	0x20000308
 8000ba4:	20000304 	.word	0x20000304
 8000ba8:	08009484 	.word	0x08009484
 8000bac:	20000204 	.word	0x20000204

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b094      	sub	sp, #80	; 0x50
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 0320 	add.w	r3, r7, #32
 8000bba:	2230      	movs	r2, #48	; 0x30
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f007 ffd0 	bl	8008b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <SystemClock_Config+0xcc>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	4a27      	ldr	r2, [pc, #156]	; (8000c7c <SystemClock_Config+0xcc>)
 8000bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be2:	6413      	str	r3, [r2, #64]	; 0x40
 8000be4:	4b25      	ldr	r3, [pc, #148]	; (8000c7c <SystemClock_Config+0xcc>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	4b22      	ldr	r3, [pc, #136]	; (8000c80 <SystemClock_Config+0xd0>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <SystemClock_Config+0xd0>)
 8000bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <SystemClock_Config+0xd0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c16:	2302      	movs	r3, #2
 8000c18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c20:	2308      	movs	r3, #8
 8000c22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c24:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c2e:	2307      	movs	r3, #7
 8000c30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c32:	f107 0320 	add.w	r3, r7, #32
 8000c36:	4618      	mov	r0, r3
 8000c38:	f002 fd68 	bl	800370c <HAL_RCC_OscConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c42:	f000 f81f 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c46:	230f      	movs	r3, #15
 8000c48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	2105      	movs	r1, #5
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 ffc9 	bl	8003bfc <HAL_RCC_ClockConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c70:	f000 f808 	bl	8000c84 <Error_Handler>
  }
}
 8000c74:	bf00      	nop
 8000c76:	3750      	adds	r7, #80	; 0x50
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40007000 	.word	0x40007000

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <Error_Handler+0x8>
	...

08000c90 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_SPI1_Init+0x64>)
 8000c96:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <MX_SPI1_Init+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c9a:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <MX_SPI1_Init+0x64>)
 8000c9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_SPI1_Init+0x64>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_SPI1_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_SPI1_Init+0x64>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_SPI1_Init+0x64>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_SPI1_Init+0x64>)
 8000cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_SPI1_Init+0x64>)
 8000cc4:	2238      	movs	r2, #56	; 0x38
 8000cc6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <MX_SPI1_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_SPI1_Init+0x64>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <MX_SPI1_Init+0x64>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_SPI1_Init+0x64>)
 8000cdc:	220a      	movs	r2, #10
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ce0:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <MX_SPI1_Init+0x64>)
 8000ce2:	f003 fad7 	bl	8004294 <HAL_SPI_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cec:	f7ff ffca 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000318 	.word	0x20000318
 8000cf8:	40013000 	.word	0x40013000

08000cfc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a19      	ldr	r2, [pc, #100]	; (8000d80 <HAL_SPI_MspInit+0x84>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d12b      	bne.n	8000d76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	4a17      	ldr	r2, [pc, #92]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a10      	ldr	r2, [pc, #64]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_SPI_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d56:	23e0      	movs	r3, #224	; 0xe0
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d66:	2305      	movs	r3, #5
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	; (8000d88 <HAL_SPI_MspInit+0x8c>)
 8000d72:	f000 fa81 	bl	8001278 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	; 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40013000 	.word	0x40013000
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dca:	2007      	movs	r0, #7
 8000dcc:	f000 fa12 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <NMI_Handler+0x4>

08000de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <MemManage_Handler+0x4>

08000dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e28:	f000 f8d0 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <OTG_FS_IRQHandler+0x10>)
 8000e36:	f001 fb3b 	bl	80024b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20001858 	.word	0x20001858

08000e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e4c:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <_sbrk+0x5c>)
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <_sbrk+0x60>)
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <_sbrk+0x64>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <_sbrk+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d207      	bcs.n	8000e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e74:	f007 fe7e 	bl	8008b74 <__errno>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e82:	e009      	b.n	8000e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <_sbrk+0x64>)
 8000e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e96:	68fb      	ldr	r3, [r7, #12]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20020000 	.word	0x20020000
 8000ea4:	00000400 	.word	0x00000400
 8000ea8:	20000370 	.word	0x20000370
 8000eac:	200020d0 	.word	0x200020d0

08000eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <SystemInit+0x20>)
 8000eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <SystemInit+0x20>)
 8000ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eda:	490e      	ldr	r1, [pc, #56]	; (8000f14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000edc:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee0:	e002      	b.n	8000ee8 <LoopCopyDataInit>

08000ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee6:	3304      	adds	r3, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eec:	d3f9      	bcc.n	8000ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ef0:	4c0b      	ldr	r4, [pc, #44]	; (8000f20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef4:	e001      	b.n	8000efa <LoopFillZerobss>

08000ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef8:	3204      	adds	r2, #4

08000efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000efc:	d3fb      	bcc.n	8000ef6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000efe:	f7ff ffd7 	bl	8000eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f02:	f007 fe3d 	bl	8008b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f06:	f7ff fd5d 	bl	80009c4 <main>
  bx  lr    
 8000f0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f14:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000f18:	0800956c 	.word	0x0800956c
  ldr r2, =_sbss
 8000f1c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000f20:	200020cc 	.word	0x200020cc

08000f24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <HAL_Init+0x40>)
 8000f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_Init+0x40>)
 8000f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_Init+0x40>)
 8000f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f000 f94f 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f000 f808 	bl	8000f6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5c:	f7ff ff16 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023c00 	.word	0x40023c00

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f967 	bl	800125e <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f000 f92f 	bl	800120a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000004 	.word	0x20000004

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000374 	.word	0x20000374

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000374 	.word	0x20000374

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff ffee 	bl	8000ff4 <HAL_GetTick>
 8001018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_Delay+0x44>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001032:	bf00      	nop
 8001034:	f7ff ffde 	bl	8000ff4 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000008 	.word	0x20000008

08001054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001070:	4013      	ands	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800107c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001086:	4a04      	ldr	r2, [pc, #16]	; (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	60d3      	str	r3, [r2, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <__NVIC_GetPriorityGrouping+0x18>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	f003 0307 	and.w	r3, r3, #7
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db0b      	blt.n	80010e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f003 021f 	and.w	r2, r3, #31
 80010d0:	4907      	ldr	r1, [pc, #28]	; (80010f0 <__NVIC_EnableIRQ+0x38>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	095b      	lsrs	r3, r3, #5
 80010d8:	2001      	movs	r0, #1
 80010da:	fa00 f202 	lsl.w	r2, r0, r2
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000e100 	.word	0xe000e100

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	; (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c0:	d301      	bcc.n	80011c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00f      	b.n	80011e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <SysTick_Config+0x40>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ce:	210f      	movs	r1, #15
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f7ff ff8e 	bl	80010f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <SysTick_Config+0x40>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SysTick_Config+0x40>)
 80011e0:	2207      	movs	r2, #7
 80011e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff29 	bl	8001054 <__NVIC_SetPriorityGrouping>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800121c:	f7ff ff3e 	bl	800109c <__NVIC_GetPriorityGrouping>
 8001220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f7ff ff8e 	bl	8001148 <NVIC_EncodePriority>
 800122c:	4602      	mov	r2, r0
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff5d 	bl	80010f4 <__NVIC_SetPriority>
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff31 	bl	80010b8 <__NVIC_EnableIRQ>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffa2 	bl	80011b0 <SysTick_Config>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
 8001292:	e16b      	b.n	800156c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001294:	2201      	movs	r2, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	f040 815a 	bne.w	8001566 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d005      	beq.n	80012ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d130      	bne.n	800132c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	2203      	movs	r2, #3
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001300:	2201      	movs	r2, #1
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	f003 0201 	and.w	r2, r3, #1
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f003 0303 	and.w	r3, r3, #3
 8001334:	2b03      	cmp	r3, #3
 8001336:	d017      	beq.n	8001368 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	2203      	movs	r2, #3
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0303 	and.w	r3, r3, #3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d123      	bne.n	80013bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	08da      	lsrs	r2, r3, #3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3208      	adds	r2, #8
 800137c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	220f      	movs	r2, #15
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	08da      	lsrs	r2, r3, #3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3208      	adds	r2, #8
 80013b6:	69b9      	ldr	r1, [r7, #24]
 80013b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	2203      	movs	r2, #3
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 0203 	and.w	r2, r3, #3
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 80b4 	beq.w	8001566 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b60      	ldr	r3, [pc, #384]	; (8001584 <HAL_GPIO_Init+0x30c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	4a5f      	ldr	r2, [pc, #380]	; (8001584 <HAL_GPIO_Init+0x30c>)
 8001408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140c:	6453      	str	r3, [r2, #68]	; 0x44
 800140e:	4b5d      	ldr	r3, [pc, #372]	; (8001584 <HAL_GPIO_Init+0x30c>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800141a:	4a5b      	ldr	r2, [pc, #364]	; (8001588 <HAL_GPIO_Init+0x310>)
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3302      	adds	r3, #2
 8001422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	220f      	movs	r2, #15
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a52      	ldr	r2, [pc, #328]	; (800158c <HAL_GPIO_Init+0x314>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d02b      	beq.n	800149e <HAL_GPIO_Init+0x226>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a51      	ldr	r2, [pc, #324]	; (8001590 <HAL_GPIO_Init+0x318>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d025      	beq.n	800149a <HAL_GPIO_Init+0x222>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a50      	ldr	r2, [pc, #320]	; (8001594 <HAL_GPIO_Init+0x31c>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d01f      	beq.n	8001496 <HAL_GPIO_Init+0x21e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4f      	ldr	r2, [pc, #316]	; (8001598 <HAL_GPIO_Init+0x320>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d019      	beq.n	8001492 <HAL_GPIO_Init+0x21a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a4e      	ldr	r2, [pc, #312]	; (800159c <HAL_GPIO_Init+0x324>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d013      	beq.n	800148e <HAL_GPIO_Init+0x216>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a4d      	ldr	r2, [pc, #308]	; (80015a0 <HAL_GPIO_Init+0x328>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d00d      	beq.n	800148a <HAL_GPIO_Init+0x212>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a4c      	ldr	r2, [pc, #304]	; (80015a4 <HAL_GPIO_Init+0x32c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d007      	beq.n	8001486 <HAL_GPIO_Init+0x20e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4b      	ldr	r2, [pc, #300]	; (80015a8 <HAL_GPIO_Init+0x330>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d101      	bne.n	8001482 <HAL_GPIO_Init+0x20a>
 800147e:	2307      	movs	r3, #7
 8001480:	e00e      	b.n	80014a0 <HAL_GPIO_Init+0x228>
 8001482:	2308      	movs	r3, #8
 8001484:	e00c      	b.n	80014a0 <HAL_GPIO_Init+0x228>
 8001486:	2306      	movs	r3, #6
 8001488:	e00a      	b.n	80014a0 <HAL_GPIO_Init+0x228>
 800148a:	2305      	movs	r3, #5
 800148c:	e008      	b.n	80014a0 <HAL_GPIO_Init+0x228>
 800148e:	2304      	movs	r3, #4
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x228>
 8001492:	2303      	movs	r3, #3
 8001494:	e004      	b.n	80014a0 <HAL_GPIO_Init+0x228>
 8001496:	2302      	movs	r3, #2
 8001498:	e002      	b.n	80014a0 <HAL_GPIO_Init+0x228>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <HAL_GPIO_Init+0x228>
 800149e:	2300      	movs	r3, #0
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	f002 0203 	and.w	r2, r2, #3
 80014a6:	0092      	lsls	r2, r2, #2
 80014a8:	4093      	lsls	r3, r2
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014b0:	4935      	ldr	r1, [pc, #212]	; (8001588 <HAL_GPIO_Init+0x310>)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014be:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <HAL_GPIO_Init+0x334>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014e2:	4a32      	ldr	r2, [pc, #200]	; (80015ac <HAL_GPIO_Init+0x334>)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014e8:	4b30      	ldr	r3, [pc, #192]	; (80015ac <HAL_GPIO_Init+0x334>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800150c:	4a27      	ldr	r2, [pc, #156]	; (80015ac <HAL_GPIO_Init+0x334>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001512:	4b26      	ldr	r3, [pc, #152]	; (80015ac <HAL_GPIO_Init+0x334>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001536:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <HAL_GPIO_Init+0x334>)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_GPIO_Init+0x334>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001560:	4a12      	ldr	r2, [pc, #72]	; (80015ac <HAL_GPIO_Init+0x334>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3301      	adds	r3, #1
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	2b0f      	cmp	r3, #15
 8001570:	f67f ae90 	bls.w	8001294 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3724      	adds	r7, #36	; 0x24
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800
 8001588:	40013800 	.word	0x40013800
 800158c:	40020000 	.word	0x40020000
 8001590:	40020400 	.word	0x40020400
 8001594:	40020800 	.word	0x40020800
 8001598:	40020c00 	.word	0x40020c00
 800159c:	40021000 	.word	0x40021000
 80015a0:	40021400 	.word	0x40021400
 80015a4:	40021800 	.word	0x40021800
 80015a8:	40021c00 	.word	0x40021c00
 80015ac:	40013c00 	.word	0x40013c00

080015b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	887b      	ldrh	r3, [r7, #2]
 80015c2:	4013      	ands	r3, r2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d002      	beq.n	80015ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e001      	b.n	80015d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
 80015ec:	4613      	mov	r3, r2
 80015ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f0:	787b      	ldrb	r3, [r7, #1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015fc:	e003      	b.n	8001606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	041a      	lsls	r2, r3, #16
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	619a      	str	r2, [r3, #24]
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001624:	887a      	ldrh	r2, [r7, #2]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4013      	ands	r3, r2
 800162a:	041a      	lsls	r2, r3, #16
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43d9      	mvns	r1, r3
 8001630:	887b      	ldrh	r3, [r7, #2]
 8001632:	400b      	ands	r3, r1
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	619a      	str	r2, [r3, #24]
}
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e12b      	b.n	80018b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d106      	bne.n	8001674 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff f8b0 	bl	80007d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2224      	movs	r2, #36	; 0x24
 8001678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0201 	bic.w	r2, r2, #1
 800168a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800169a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016ac:	f002 fc9e 	bl	8003fec <HAL_RCC_GetPCLK1Freq>
 80016b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4a81      	ldr	r2, [pc, #516]	; (80018bc <HAL_I2C_Init+0x274>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d807      	bhi.n	80016cc <HAL_I2C_Init+0x84>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4a80      	ldr	r2, [pc, #512]	; (80018c0 <HAL_I2C_Init+0x278>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	bf94      	ite	ls
 80016c4:	2301      	movls	r3, #1
 80016c6:	2300      	movhi	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	e006      	b.n	80016da <HAL_I2C_Init+0x92>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4a7d      	ldr	r2, [pc, #500]	; (80018c4 <HAL_I2C_Init+0x27c>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	bf94      	ite	ls
 80016d4:	2301      	movls	r3, #1
 80016d6:	2300      	movhi	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0e7      	b.n	80018b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4a78      	ldr	r2, [pc, #480]	; (80018c8 <HAL_I2C_Init+0x280>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	0c9b      	lsrs	r3, r3, #18
 80016ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	430a      	orrs	r2, r1
 8001700:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	4a6a      	ldr	r2, [pc, #424]	; (80018bc <HAL_I2C_Init+0x274>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d802      	bhi.n	800171c <HAL_I2C_Init+0xd4>
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3301      	adds	r3, #1
 800171a:	e009      	b.n	8001730 <HAL_I2C_Init+0xe8>
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001722:	fb02 f303 	mul.w	r3, r2, r3
 8001726:	4a69      	ldr	r2, [pc, #420]	; (80018cc <HAL_I2C_Init+0x284>)
 8001728:	fba2 2303 	umull	r2, r3, r2, r3
 800172c:	099b      	lsrs	r3, r3, #6
 800172e:	3301      	adds	r3, #1
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	430b      	orrs	r3, r1
 8001736:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001742:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	495c      	ldr	r1, [pc, #368]	; (80018bc <HAL_I2C_Init+0x274>)
 800174c:	428b      	cmp	r3, r1
 800174e:	d819      	bhi.n	8001784 <HAL_I2C_Init+0x13c>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	1e59      	subs	r1, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	fbb1 f3f3 	udiv	r3, r1, r3
 800175e:	1c59      	adds	r1, r3, #1
 8001760:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001764:	400b      	ands	r3, r1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00a      	beq.n	8001780 <HAL_I2C_Init+0x138>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	1e59      	subs	r1, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	fbb1 f3f3 	udiv	r3, r1, r3
 8001778:	3301      	adds	r3, #1
 800177a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800177e:	e051      	b.n	8001824 <HAL_I2C_Init+0x1dc>
 8001780:	2304      	movs	r3, #4
 8001782:	e04f      	b.n	8001824 <HAL_I2C_Init+0x1dc>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d111      	bne.n	80017b0 <HAL_I2C_Init+0x168>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	1e58      	subs	r0, r3, #1
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6859      	ldr	r1, [r3, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	440b      	add	r3, r1
 800179a:	fbb0 f3f3 	udiv	r3, r0, r3
 800179e:	3301      	adds	r3, #1
 80017a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf0c      	ite	eq
 80017a8:	2301      	moveq	r3, #1
 80017aa:	2300      	movne	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	e012      	b.n	80017d6 <HAL_I2C_Init+0x18e>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1e58      	subs	r0, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	0099      	lsls	r1, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c6:	3301      	adds	r3, #1
 80017c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bf0c      	ite	eq
 80017d0:	2301      	moveq	r3, #1
 80017d2:	2300      	movne	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_Init+0x196>
 80017da:	2301      	movs	r3, #1
 80017dc:	e022      	b.n	8001824 <HAL_I2C_Init+0x1dc>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10e      	bne.n	8001804 <HAL_I2C_Init+0x1bc>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1e58      	subs	r0, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6859      	ldr	r1, [r3, #4]
 80017ee:	460b      	mov	r3, r1
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	440b      	add	r3, r1
 80017f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f8:	3301      	adds	r3, #1
 80017fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001802:	e00f      	b.n	8001824 <HAL_I2C_Init+0x1dc>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1e58      	subs	r0, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	440b      	add	r3, r1
 8001812:	0099      	lsls	r1, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	fbb0 f3f3 	udiv	r3, r0, r3
 800181a:	3301      	adds	r3, #1
 800181c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001820:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	6809      	ldr	r1, [r1, #0]
 8001828:	4313      	orrs	r3, r2
 800182a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69da      	ldr	r2, [r3, #28]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001852:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6911      	ldr	r1, [r2, #16]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68d2      	ldr	r2, [r2, #12]
 800185e:	4311      	orrs	r1, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	430b      	orrs	r3, r1
 8001866:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2220      	movs	r2, #32
 800189e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	000186a0 	.word	0x000186a0
 80018c0:	001e847f 	.word	0x001e847f
 80018c4:	003d08ff 	.word	0x003d08ff
 80018c8:	431bde83 	.word	0x431bde83
 80018cc:	10624dd3 	.word	0x10624dd3

080018d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e128      	b.n	8001b34 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d109      	bne.n	8001902 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a90      	ldr	r2, [pc, #576]	; (8001b3c <HAL_I2S_Init+0x26c>)
 80018fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7fe ffe1 	bl	80008c4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2202      	movs	r2, #2
 8001906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001918:	f023 030f 	bic.w	r3, r3, #15
 800191c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2202      	movs	r2, #2
 8001924:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d060      	beq.n	80019f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d102      	bne.n	800193c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001936:	2310      	movs	r3, #16
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e001      	b.n	8001940 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800193c:	2320      	movs	r3, #32
 800193e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b20      	cmp	r3, #32
 8001946:	d802      	bhi.n	800194e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800194e:	2001      	movs	r0, #1
 8001950:	f002 fc42 	bl	80041d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001954:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800195e:	d125      	bne.n	80019ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d010      	beq.n	800198a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	461a      	mov	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	fbb2 f3f3 	udiv	r3, r2, r3
 8001984:	3305      	adds	r3, #5
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	e01f      	b.n	80019ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	fbb2 f2f3 	udiv	r2, r2, r3
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	461a      	mov	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a6:	3305      	adds	r3, #5
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	e00e      	b.n	80019ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	461a      	mov	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c6:	3305      	adds	r3, #5
 80019c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4a5c      	ldr	r2, [pc, #368]	; (8001b40 <HAL_I2S_Init+0x270>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	08db      	lsrs	r3, r3, #3
 80019d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	085b      	lsrs	r3, r3, #1
 80019e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	e003      	b.n	80019f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80019f0:	2302      	movs	r3, #2
 80019f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d902      	bls.n	8001a04 <HAL_I2S_Init+0x134>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	2bff      	cmp	r3, #255	; 0xff
 8001a02:	d907      	bls.n	8001a14 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a08:	f043 0210 	orr.w	r2, r3, #16
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e08f      	b.n	8001b34 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	ea42 0103 	orr.w	r1, r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a32:	f023 030f 	bic.w	r3, r3, #15
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6851      	ldr	r1, [r2, #4]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6892      	ldr	r2, [r2, #8]
 8001a3e:	4311      	orrs	r1, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	68d2      	ldr	r2, [r2, #12]
 8001a44:	4311      	orrs	r1, r2
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6992      	ldr	r2, [r2, #24]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a56:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d161      	bne.n	8001b24 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a38      	ldr	r2, [pc, #224]	; (8001b44 <HAL_I2S_Init+0x274>)
 8001a64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a37      	ldr	r2, [pc, #220]	; (8001b48 <HAL_I2S_Init+0x278>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d101      	bne.n	8001a74 <HAL_I2S_Init+0x1a4>
 8001a70:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <HAL_I2S_Init+0x27c>)
 8001a72:	e001      	b.n	8001a78 <HAL_I2S_Init+0x1a8>
 8001a74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6812      	ldr	r2, [r2, #0]
 8001a7e:	4932      	ldr	r1, [pc, #200]	; (8001b48 <HAL_I2S_Init+0x278>)
 8001a80:	428a      	cmp	r2, r1
 8001a82:	d101      	bne.n	8001a88 <HAL_I2S_Init+0x1b8>
 8001a84:	4a31      	ldr	r2, [pc, #196]	; (8001b4c <HAL_I2S_Init+0x27c>)
 8001a86:	e001      	b.n	8001a8c <HAL_I2S_Init+0x1bc>
 8001a88:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a8c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a90:	f023 030f 	bic.w	r3, r3, #15
 8001a94:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a2b      	ldr	r2, [pc, #172]	; (8001b48 <HAL_I2S_Init+0x278>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d101      	bne.n	8001aa4 <HAL_I2S_Init+0x1d4>
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <HAL_I2S_Init+0x27c>)
 8001aa2:	e001      	b.n	8001aa8 <HAL_I2S_Init+0x1d8>
 8001aa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a25      	ldr	r2, [pc, #148]	; (8001b48 <HAL_I2S_Init+0x278>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d101      	bne.n	8001aba <HAL_I2S_Init+0x1ea>
 8001ab6:	4b25      	ldr	r3, [pc, #148]	; (8001b4c <HAL_I2S_Init+0x27c>)
 8001ab8:	e001      	b.n	8001abe <HAL_I2S_Init+0x1ee>
 8001aba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aca:	d003      	beq.n	8001ad4 <HAL_I2S_Init+0x204>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d103      	bne.n	8001adc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	e001      	b.n	8001ae0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001af4:	4313      	orrs	r3, r2
 8001af6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001afe:	4313      	orrs	r3, r2
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	897b      	ldrh	r3, [r7, #10]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b0c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <HAL_I2S_Init+0x278>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d101      	bne.n	8001b1c <HAL_I2S_Init+0x24c>
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_I2S_Init+0x27c>)
 8001b1a:	e001      	b.n	8001b20 <HAL_I2S_Init+0x250>
 8001b1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b20:	897a      	ldrh	r2, [r7, #10]
 8001b22:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3720      	adds	r7, #32
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	08001c47 	.word	0x08001c47
 8001b40:	cccccccd 	.word	0xcccccccd
 8001b44:	08001d5d 	.word	0x08001d5d
 8001b48:	40003800 	.word	0x40003800
 8001b4c:	40003400 	.word	0x40003400

08001b50 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	881a      	ldrh	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	1c9a      	adds	r2, r3, #2
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10e      	bne.n	8001be0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bd0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffb8 	bl	8001b50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	b292      	uxth	r2, r2
 8001bfc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	1c9a      	adds	r2, r3, #2
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d10e      	bne.n	8001c3e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c2e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ff93 	bl	8001b64 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d13a      	bne.n	8001cd8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d109      	bne.n	8001c80 <I2S_IRQHandler+0x3a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c76:	2b40      	cmp	r3, #64	; 0x40
 8001c78:	d102      	bne.n	8001c80 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ffb4 	bl	8001be8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c86:	2b40      	cmp	r3, #64	; 0x40
 8001c88:	d126      	bne.n	8001cd8 <I2S_IRQHandler+0x92>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0320 	and.w	r3, r3, #32
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	d11f      	bne.n	8001cd8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ca6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ca8:	2300      	movs	r3, #0
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f043 0202 	orr.w	r2, r3, #2
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ff50 	bl	8001b78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d136      	bne.n	8001d52 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d109      	bne.n	8001d02 <I2S_IRQHandler+0xbc>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf8:	2b80      	cmp	r3, #128	; 0x80
 8001cfa:	d102      	bne.n	8001d02 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff45 	bl	8001b8c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d122      	bne.n	8001d52 <I2S_IRQHandler+0x10c>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	2b20      	cmp	r3, #32
 8001d18:	d11b      	bne.n	8001d52 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d28:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d44:	f043 0204 	orr.w	r2, r3, #4
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ff13 	bl	8001b78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a92      	ldr	r2, [pc, #584]	; (8001fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d101      	bne.n	8001d7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001d76:	4b92      	ldr	r3, [pc, #584]	; (8001fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d78:	e001      	b.n	8001d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001d7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a8b      	ldr	r2, [pc, #556]	; (8001fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d101      	bne.n	8001d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001d94:	4b8a      	ldr	r3, [pc, #552]	; (8001fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d96:	e001      	b.n	8001d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001d98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da8:	d004      	beq.n	8001db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f040 8099 	bne.w	8001ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d107      	bne.n	8001dce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f925 	bl	8002018 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d107      	bne.n	8001de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f9c8 	bl	8002178 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dee:	2b40      	cmp	r3, #64	; 0x40
 8001df0:	d13a      	bne.n	8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	f003 0320 	and.w	r3, r3, #32
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d035      	beq.n	8001e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a6e      	ldr	r2, [pc, #440]	; (8001fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d101      	bne.n	8001e0a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001e06:	4b6e      	ldr	r3, [pc, #440]	; (8001fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e08:	e001      	b.n	8001e0e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001e0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4969      	ldr	r1, [pc, #420]	; (8001fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e16:	428b      	cmp	r3, r1
 8001e18:	d101      	bne.n	8001e1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001e1a:	4b69      	ldr	r3, [pc, #420]	; (8001fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e1c:	e001      	b.n	8001e22 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001e1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e26:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e36:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f043 0202 	orr.w	r2, r3, #2
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fe88 	bl	8001b78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	f040 80c3 	bne.w	8001ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 80bd 	beq.w	8001ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e8e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a49      	ldr	r2, [pc, #292]	; (8001fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d101      	bne.n	8001e9e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001e9a:	4b49      	ldr	r3, [pc, #292]	; (8001fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e9c:	e001      	b.n	8001ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001e9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4944      	ldr	r1, [pc, #272]	; (8001fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001eaa:	428b      	cmp	r3, r1
 8001eac:	d101      	bne.n	8001eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001eae:	4b44      	ldr	r3, [pc, #272]	; (8001fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001eb0:	e001      	b.n	8001eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001eb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eb6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001eba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	f043 0204 	orr.w	r2, r3, #4
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff fe4a 	bl	8001b78 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ee4:	e089      	b.n	8001ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d107      	bne.n	8001f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8be 	bl	800207c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f8fd 	bl	8002114 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f20:	2b40      	cmp	r3, #64	; 0x40
 8001f22:	d12f      	bne.n	8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d02a      	beq.n	8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f3c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1e      	ldr	r2, [pc, #120]	; (8001fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d101      	bne.n	8001f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001f48:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f4a:	e001      	b.n	8001f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001f4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4919      	ldr	r1, [pc, #100]	; (8001fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f58:	428b      	cmp	r3, r1
 8001f5a:	d101      	bne.n	8001f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f5e:	e001      	b.n	8001f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001f60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f68:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f043 0202 	orr.w	r2, r3, #2
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fdfa 	bl	8001b78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d136      	bne.n	8001ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d031      	beq.n	8001ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a07      	ldr	r2, [pc, #28]	; (8001fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d101      	bne.n	8001fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fa4:	e001      	b.n	8001faa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001fa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4902      	ldr	r1, [pc, #8]	; (8001fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fb2:	428b      	cmp	r3, r1
 8001fb4:	d106      	bne.n	8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001fb6:	4b02      	ldr	r3, [pc, #8]	; (8001fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fb8:	e006      	b.n	8001fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001fba:	bf00      	nop
 8001fbc:	40003800 	.word	0x40003800
 8001fc0:	40003400 	.word	0x40003400
 8001fc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fcc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fdc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	f043 0204 	orr.w	r2, r3, #4
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fdc0 	bl	8001b78 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001ff8:	e000      	b.n	8001ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ffa:	bf00      	nop
}
 8001ffc:	bf00      	nop
 8001ffe:	3720      	adds	r7, #32
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002024:	1c99      	adds	r1, r3, #2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6251      	str	r1, [r2, #36]	; 0x24
 800202a:	881a      	ldrh	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	b29a      	uxth	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002044:	b29b      	uxth	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d113      	bne.n	8002072 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002058:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800205e:	b29b      	uxth	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d106      	bne.n	8002072 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ffc9 	bl	8002004 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	1c99      	adds	r1, r3, #2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6251      	str	r1, [r2, #36]	; 0x24
 800208e:	8819      	ldrh	r1, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1d      	ldr	r2, [pc, #116]	; (800210c <I2SEx_TxISR_I2SExt+0x90>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <I2SEx_TxISR_I2SExt+0x22>
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <I2SEx_TxISR_I2SExt+0x94>)
 800209c:	e001      	b.n	80020a2 <I2SEx_TxISR_I2SExt+0x26>
 800209e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020a2:	460a      	mov	r2, r1
 80020a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d121      	bne.n	8002102 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <I2SEx_TxISR_I2SExt+0x90>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d101      	bne.n	80020cc <I2SEx_TxISR_I2SExt+0x50>
 80020c8:	4b11      	ldr	r3, [pc, #68]	; (8002110 <I2SEx_TxISR_I2SExt+0x94>)
 80020ca:	e001      	b.n	80020d0 <I2SEx_TxISR_I2SExt+0x54>
 80020cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	490d      	ldr	r1, [pc, #52]	; (800210c <I2SEx_TxISR_I2SExt+0x90>)
 80020d8:	428b      	cmp	r3, r1
 80020da:	d101      	bne.n	80020e0 <I2SEx_TxISR_I2SExt+0x64>
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <I2SEx_TxISR_I2SExt+0x94>)
 80020de:	e001      	b.n	80020e4 <I2SEx_TxISR_I2SExt+0x68>
 80020e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d106      	bne.n	8002102 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff81 	bl	8002004 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40003800 	.word	0x40003800
 8002110:	40003400 	.word	0x40003400

08002114 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68d8      	ldr	r0, [r3, #12]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	1c99      	adds	r1, r3, #2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800212c:	b282      	uxth	r2, r0
 800212e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002134:	b29b      	uxth	r3, r3
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002142:	b29b      	uxth	r3, r3
 8002144:	2b00      	cmp	r3, #0
 8002146:	d113      	bne.n	8002170 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002156:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215c:	b29b      	uxth	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ff4a 	bl	8002004 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a20      	ldr	r2, [pc, #128]	; (8002208 <I2SEx_RxISR_I2SExt+0x90>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d101      	bne.n	800218e <I2SEx_RxISR_I2SExt+0x16>
 800218a:	4b20      	ldr	r3, [pc, #128]	; (800220c <I2SEx_RxISR_I2SExt+0x94>)
 800218c:	e001      	b.n	8002192 <I2SEx_RxISR_I2SExt+0x1a>
 800218e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002192:	68d8      	ldr	r0, [r3, #12]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	1c99      	adds	r1, r3, #2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800219e:	b282      	uxth	r2, r0
 80021a0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3b01      	subs	r3, #1
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d121      	bne.n	80021fe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a12      	ldr	r2, [pc, #72]	; (8002208 <I2SEx_RxISR_I2SExt+0x90>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d101      	bne.n	80021c8 <I2SEx_RxISR_I2SExt+0x50>
 80021c4:	4b11      	ldr	r3, [pc, #68]	; (800220c <I2SEx_RxISR_I2SExt+0x94>)
 80021c6:	e001      	b.n	80021cc <I2SEx_RxISR_I2SExt+0x54>
 80021c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	490d      	ldr	r1, [pc, #52]	; (8002208 <I2SEx_RxISR_I2SExt+0x90>)
 80021d4:	428b      	cmp	r3, r1
 80021d6:	d101      	bne.n	80021dc <I2SEx_RxISR_I2SExt+0x64>
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <I2SEx_RxISR_I2SExt+0x94>)
 80021da:	e001      	b.n	80021e0 <I2SEx_RxISR_I2SExt+0x68>
 80021dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021e4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d106      	bne.n	80021fe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff03 	bl	8002004 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40003800 	.word	0x40003800
 800220c:	40003400 	.word	0x40003400

08002210 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002212:	b08f      	sub	sp, #60	; 0x3c
 8002214:	af0a      	add	r7, sp, #40	; 0x28
 8002216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e10f      	b.n	8002442 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d106      	bne.n	8002242 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f006 f93b 	bl	80084b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2203      	movs	r2, #3
 8002246:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d102      	bne.n	800225c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f002 fc22 	bl	8004aaa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	687e      	ldr	r6, [r7, #4]
 800226e:	466d      	mov	r5, sp
 8002270:	f106 0410 	add.w	r4, r6, #16
 8002274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002276:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800227a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800227c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002280:	e885 0003 	stmia.w	r5, {r0, r1}
 8002284:	1d33      	adds	r3, r6, #4
 8002286:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002288:	6838      	ldr	r0, [r7, #0]
 800228a:	f002 faf9 	bl	8004880 <USB_CoreInit>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0d0      	b.n	8002442 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f002 fc10 	bl	8004acc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	e04a      	b.n	8002348 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	333d      	adds	r3, #61	; 0x3d
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	333c      	adds	r3, #60	; 0x3c
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	b298      	uxth	r0, r3
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	3344      	adds	r3, #68	; 0x44
 80022ee:	4602      	mov	r2, r0
 80022f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	3340      	adds	r3, #64	; 0x40
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	3348      	adds	r3, #72	; 0x48
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	334c      	adds	r3, #76	; 0x4c
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800232e:	7bfa      	ldrb	r2, [r7, #15]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	4413      	add	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	3354      	adds	r3, #84	; 0x54
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	3301      	adds	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	429a      	cmp	r2, r3
 8002350:	d3af      	bcc.n	80022b2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	e044      	b.n	80023e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002380:	7bfa      	ldrb	r2, [r7, #15]
 8002382:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002384:	7bfa      	ldrb	r2, [r7, #15]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	3301      	adds	r3, #1
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d3b5      	bcc.n	8002358 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	603b      	str	r3, [r7, #0]
 80023f2:	687e      	ldr	r6, [r7, #4]
 80023f4:	466d      	mov	r5, sp
 80023f6:	f106 0410 	add.w	r4, r6, #16
 80023fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002406:	e885 0003 	stmia.w	r5, {r0, r1}
 800240a:	1d33      	adds	r3, r6, #4
 800240c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800240e:	6838      	ldr	r0, [r7, #0]
 8002410:	f002 fba8 	bl	8004b64 <USB_DevInit>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2202      	movs	r2, #2
 800241e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e00d      	b.n	8002442 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f003 fcf7 	bl	8005e2e <USB_DevDisconnect>

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800244a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_PCD_Start+0x1c>
 8002462:	2302      	movs	r3, #2
 8002464:	e020      	b.n	80024a8 <HAL_PCD_Start+0x5e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	2b01      	cmp	r3, #1
 8002474:	d109      	bne.n	800248a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800247a:	2b01      	cmp	r3, #1
 800247c:	d005      	beq.n	800248a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002482:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f002 fafa 	bl	8004a88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f003 fca7 	bl	8005dec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b08d      	sub	sp, #52	; 0x34
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 fd65 	bl	8005f96 <USB_GetMode>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 848a 	bne.w	8002de8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f003 fcc9 	bl	8005e70 <USB_ReadInterrupts>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 8480 	beq.w	8002de6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 fcb6 	bl	8005e70 <USB_ReadInterrupts>
 8002504:	4603      	mov	r3, r0
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b02      	cmp	r3, #2
 800250c:	d107      	bne.n	800251e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f002 0202 	and.w	r2, r2, #2
 800251c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f003 fca4 	bl	8005e70 <USB_ReadInterrupts>
 8002528:	4603      	mov	r3, r0
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b10      	cmp	r3, #16
 8002530:	d161      	bne.n	80025f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0210 	bic.w	r2, r2, #16
 8002540:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f003 020f 	and.w	r2, r3, #15
 800254e:	4613      	mov	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	4413      	add	r3, r2
 800255e:	3304      	adds	r3, #4
 8002560:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	0c5b      	lsrs	r3, r3, #17
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	2b02      	cmp	r3, #2
 800256c:	d124      	bne.n	80025b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002574:	4013      	ands	r3, r2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d035      	beq.n	80025e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002584:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002588:	b29b      	uxth	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	6a38      	ldr	r0, [r7, #32]
 800258e:	f003 fadb 	bl	8005b48 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	691a      	ldr	r2, [r3, #16]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800259e:	441a      	add	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	6a1a      	ldr	r2, [r3, #32]
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	091b      	lsrs	r3, r3, #4
 80025ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025b0:	441a      	add	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	621a      	str	r2, [r3, #32]
 80025b6:	e016      	b.n	80025e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	0c5b      	lsrs	r3, r3, #17
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	2b06      	cmp	r3, #6
 80025c2:	d110      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025ca:	2208      	movs	r2, #8
 80025cc:	4619      	mov	r1, r3
 80025ce:	6a38      	ldr	r0, [r7, #32]
 80025d0:	f003 faba 	bl	8005b48 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	6a1a      	ldr	r2, [r3, #32]
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025e0:	441a      	add	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699a      	ldr	r2, [r3, #24]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f042 0210 	orr.w	r2, r2, #16
 80025f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 fc38 	bl	8005e70 <USB_ReadInterrupts>
 8002600:	4603      	mov	r3, r0
 8002602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002606:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800260a:	f040 80a7 	bne.w	800275c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f003 fc3d 	bl	8005e96 <USB_ReadDevAllOutEpInterrupt>
 800261c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800261e:	e099      	b.n	8002754 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 808e 	beq.w	8002748 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f003 fc61 	bl	8005efe <USB_ReadDevOutEPInterrupt>
 800263c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00c      	beq.n	8002662 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	4413      	add	r3, r2
 8002650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002654:	461a      	mov	r2, r3
 8002656:	2301      	movs	r3, #1
 8002658:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800265a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 fec3 	bl	80033e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00c      	beq.n	8002686 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	4413      	add	r3, r2
 8002674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002678:	461a      	mov	r2, r3
 800267a:	2308      	movs	r3, #8
 800267c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800267e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 ff99 	bl	80035b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	4413      	add	r3, r2
 8002698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800269c:	461a      	mov	r2, r3
 800269e:	2310      	movs	r3, #16
 80026a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d030      	beq.n	800270e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b4:	2b80      	cmp	r3, #128	; 0x80
 80026b6:	d109      	bne.n	80026cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ce:	4613      	mov	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	4413      	add	r3, r2
 80026de:	3304      	adds	r3, #4
 80026e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	78db      	ldrb	r3, [r3, #3]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d108      	bne.n	80026fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2200      	movs	r2, #0
 80026ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	4619      	mov	r1, r3
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f005 fff2 	bl	80086e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	4413      	add	r3, r2
 8002704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002708:	461a      	mov	r2, r3
 800270a:	2302      	movs	r3, #2
 800270c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	4413      	add	r3, r2
 8002720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002724:	461a      	mov	r2, r3
 8002726:	2320      	movs	r3, #32
 8002728:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d009      	beq.n	8002748 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	4413      	add	r3, r2
 800273c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002740:	461a      	mov	r2, r3
 8002742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002746:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	3301      	adds	r3, #1
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	085b      	lsrs	r3, r3, #1
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002756:	2b00      	cmp	r3, #0
 8002758:	f47f af62 	bne.w	8002620 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f003 fb85 	bl	8005e70 <USB_ReadInterrupts>
 8002766:	4603      	mov	r3, r0
 8002768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800276c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002770:	f040 80db 	bne.w	800292a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f003 fba6 	bl	8005eca <USB_ReadDevAllInEpInterrupt>
 800277e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002784:	e0cd      	b.n	8002922 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 80c2 	beq.w	8002916 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f003 fbcc 	bl	8005f3a <USB_ReadDevInEPInterrupt>
 80027a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d057      	beq.n	800285e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	f003 030f 	and.w	r3, r3, #15
 80027b4:	2201      	movs	r2, #1
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69f9      	ldr	r1, [r7, #28]
 80027ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027ce:	4013      	ands	r3, r2
 80027d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027de:	461a      	mov	r2, r3
 80027e0:	2301      	movs	r3, #1
 80027e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d132      	bne.n	8002852 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f0:	4613      	mov	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	334c      	adds	r3, #76	; 0x4c
 80027fc:	6819      	ldr	r1, [r3, #0]
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4403      	add	r3, r0
 800280c:	3348      	adds	r3, #72	; 0x48
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4419      	add	r1, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4403      	add	r3, r0
 8002820:	334c      	adds	r3, #76	; 0x4c
 8002822:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	2b00      	cmp	r3, #0
 8002828:	d113      	bne.n	8002852 <HAL_PCD_IRQHandler+0x3a2>
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3354      	adds	r3, #84	; 0x54
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d108      	bne.n	8002852 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800284a:	461a      	mov	r2, r3
 800284c:	2101      	movs	r1, #1
 800284e:	f003 fbd3 	bl	8005ff8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	b2db      	uxtb	r3, r3
 8002856:	4619      	mov	r1, r3
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f005 febc 	bl	80085d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002874:	461a      	mov	r2, r3
 8002876:	2308      	movs	r3, #8
 8002878:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	4413      	add	r3, r2
 800288c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002890:	461a      	mov	r2, r3
 8002892:	2310      	movs	r3, #16
 8002894:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ac:	461a      	mov	r2, r3
 80028ae:	2340      	movs	r3, #64	; 0x40
 80028b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d023      	beq.n	8002904 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028be:	6a38      	ldr	r0, [r7, #32]
 80028c0:	f002 fab4 	bl	8004e2c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c6:	4613      	mov	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4413      	add	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	3338      	adds	r3, #56	; 0x38
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	4413      	add	r3, r2
 80028d4:	3304      	adds	r3, #4
 80028d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	78db      	ldrb	r3, [r3, #3]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d108      	bne.n	80028f2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2200      	movs	r2, #0
 80028e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	4619      	mov	r1, r3
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f005 ff09 	bl	8008704 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	015a      	lsls	r2, r3, #5
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028fe:	461a      	mov	r2, r3
 8002900:	2302      	movs	r3, #2
 8002902:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800290e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 fcdb 	bl	80032cc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	3301      	adds	r3, #1
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800291c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291e:	085b      	lsrs	r3, r3, #1
 8002920:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	2b00      	cmp	r3, #0
 8002926:	f47f af2e 	bne.w	8002786 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f003 fa9e 	bl	8005e70 <USB_ReadInterrupts>
 8002934:	4603      	mov	r3, r0
 8002936:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800293a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800293e:	d122      	bne.n	8002986 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800295a:	2b01      	cmp	r3, #1
 800295c:	d108      	bne.n	8002970 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002966:	2100      	movs	r1, #0
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 fec3 	bl	80036f4 <HAL_PCDEx_LPM_Callback>
 800296e:	e002      	b.n	8002976 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f005 fea7 	bl	80086c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695a      	ldr	r2, [r3, #20]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002984:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f003 fa70 	bl	8005e70 <USB_ReadInterrupts>
 8002990:	4603      	mov	r3, r0
 8002992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800299a:	d112      	bne.n	80029c2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d102      	bne.n	80029b2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f005 fe63 	bl	8008678 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80029c0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f003 fa52 	bl	8005e70 <USB_ReadInterrupts>
 80029cc:	4603      	mov	r3, r0
 80029ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d6:	f040 80b7 	bne.w	8002b48 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e8:	f023 0301 	bic.w	r3, r3, #1
 80029ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2110      	movs	r1, #16
 80029f4:	4618      	mov	r0, r3
 80029f6:	f002 fa19 	bl	8004e2c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029fa:	2300      	movs	r3, #0
 80029fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029fe:	e046      	b.n	8002a8e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a12:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	015a      	lsls	r2, r3, #5
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a24:	0151      	lsls	r1, r2, #5
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	440a      	add	r2, r1
 8002a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a40:	461a      	mov	r2, r3
 8002a42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a46:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4a:	015a      	lsls	r2, r3, #5
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	4413      	add	r3, r2
 8002a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a58:	0151      	lsls	r1, r2, #5
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	440a      	add	r2, r1
 8002a5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a78:	0151      	lsls	r1, r2, #5
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	440a      	add	r2, r1
 8002a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a86:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d3b3      	bcc.n	8002a00 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	69fa      	ldr	r2, [r7, #28]
 8002aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002aaa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d016      	beq.n	8002ae2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ac4:	f043 030b 	orr.w	r3, r3, #11
 8002ac8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ada:	f043 030b 	orr.w	r3, r3, #11
 8002ade:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae0:	e015      	b.n	8002b0e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002af0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002af4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002af8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b08:	f043 030b 	orr.w	r3, r3, #11
 8002b0c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b1c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b20:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b32:	461a      	mov	r2, r3
 8002b34:	f003 fa60 	bl	8005ff8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f003 f98f 	bl	8005e70 <USB_ReadInterrupts>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5c:	d124      	bne.n	8002ba8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f003 fa25 	bl	8005fb2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f002 f9da 	bl	8004f26 <USB_GetDevSpeed>
 8002b72:	4603      	mov	r3, r0
 8002b74:	461a      	mov	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681c      	ldr	r4, [r3, #0]
 8002b7e:	f001 fa29 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 8002b82:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f001 fed9 	bl	8004944 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f005 fd47 	bl	8008626 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ba6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f003 f95f 	bl	8005e70 <USB_ReadInterrupts>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d10a      	bne.n	8002bd2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f005 fd24 	bl	800860a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f002 0208 	and.w	r2, r2, #8
 8002bd0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f003 f94a 	bl	8005e70 <USB_ReadInterrupts>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be2:	2b80      	cmp	r3, #128	; 0x80
 8002be4:	d122      	bne.n	8002c2c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf6:	e014      	b.n	8002c22 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d105      	bne.n	8002c1c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	4619      	mov	r1, r3
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fb27 	bl	800326a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	3301      	adds	r3, #1
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d3e5      	bcc.n	8002bf8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 f91d 	bl	8005e70 <USB_ReadInterrupts>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c40:	d13b      	bne.n	8002cba <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c42:	2301      	movs	r3, #1
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
 8002c46:	e02b      	b.n	8002ca0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	3340      	adds	r3, #64	; 0x40
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d115      	bne.n	8002c9a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c6e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	da12      	bge.n	8002c9a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	333f      	adds	r3, #63	; 0x3f
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	4619      	mov	r1, r3
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fae8 	bl	800326a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d3ce      	bcc.n	8002c48 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f003 f8d6 	bl	8005e70 <USB_ReadInterrupts>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cce:	d155      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd4:	e045      	b.n	8002d62 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d12e      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cfe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	da2b      	bge.n	8002d5c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d10:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d121      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10a      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d58:	6053      	str	r3, [r2, #4]
            break;
 8002d5a:	e007      	b.n	8002d6c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	3301      	adds	r3, #1
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d3b4      	bcc.n	8002cd6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f003 f875 	bl	8005e70 <USB_ReadInterrupts>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d90:	d10a      	bne.n	8002da8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f005 fcc8 	bl	8008728 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002da6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f003 f85f 	bl	8005e70 <USB_ReadInterrupts>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d115      	bne.n	8002de8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f005 fcb8 	bl	8008744 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6859      	ldr	r1, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	e000      	b.n	8002de8 <HAL_PCD_IRQHandler+0x938>
      return;
 8002de6:	bf00      	nop
    }
  }
}
 8002de8:	3734      	adds	r7, #52	; 0x34
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd90      	pop	{r4, r7, pc}

08002dee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_PCD_SetAddress+0x1a>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e013      	b.n	8002e30 <HAL_PCD_SetAddress+0x42>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4618      	mov	r0, r3
 8002e22:	f002 ffbd 	bl	8005da0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	4608      	mov	r0, r1
 8002e42:	4611      	mov	r1, r2
 8002e44:	461a      	mov	r2, r3
 8002e46:	4603      	mov	r3, r0
 8002e48:	70fb      	strb	r3, [r7, #3]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	803b      	strh	r3, [r7, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e52:	2300      	movs	r3, #0
 8002e54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	da0f      	bge.n	8002e7e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e5e:	78fb      	ldrb	r3, [r7, #3]
 8002e60:	f003 020f 	and.w	r2, r3, #15
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	3338      	adds	r3, #56	; 0x38
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	3304      	adds	r3, #4
 8002e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	705a      	strb	r2, [r3, #1]
 8002e7c:	e00f      	b.n	8002e9e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	f003 020f 	and.w	r2, r3, #15
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	3304      	adds	r3, #4
 8002e96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002eaa:	883a      	ldrh	r2, [r7, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	78ba      	ldrb	r2, [r7, #2]
 8002eb4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	785b      	ldrb	r3, [r3, #1]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d004      	beq.n	8002ec8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ec8:	78bb      	ldrb	r3, [r7, #2]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d102      	bne.n	8002ed4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_PCD_EP_Open+0xaa>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e00e      	b.n	8002f00 <HAL_PCD_EP_Open+0xc8>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68f9      	ldr	r1, [r7, #12]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f002 f83d 	bl	8004f70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002efe:	7afb      	ldrb	r3, [r7, #11]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	da0f      	bge.n	8002f3c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	f003 020f 	and.w	r2, r3, #15
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	3338      	adds	r3, #56	; 0x38
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	3304      	adds	r3, #4
 8002f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	705a      	strb	r2, [r3, #1]
 8002f3a:	e00f      	b.n	8002f5c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	f003 020f 	and.w	r2, r3, #15
 8002f42:	4613      	mov	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	3304      	adds	r3, #4
 8002f54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_PCD_EP_Close+0x6e>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e00e      	b.n	8002f94 <HAL_PCD_EP_Close+0x8c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68f9      	ldr	r1, [r7, #12]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f002 f87b 	bl	8005080 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fac:	7afb      	ldrb	r3, [r7, #11]
 8002fae:	f003 020f 	and.w	r2, r3, #15
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fde:	7afb      	ldrb	r3, [r7, #11]
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d102      	bne.n	8002ff8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ff8:	7afb      	ldrb	r3, [r7, #11]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6818      	ldr	r0, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	b2db      	uxtb	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	6979      	ldr	r1, [r7, #20]
 8003010:	f002 fb5a 	bl	80056c8 <USB_EP0StartXfer>
 8003014:	e008      	b.n	8003028 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	461a      	mov	r2, r3
 8003022:	6979      	ldr	r1, [r7, #20]
 8003024:	f002 f908 	bl	8005238 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	f003 020f 	and.w	r2, r3, #15
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003054:	681b      	ldr	r3, [r3, #0]
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
 800306e:	460b      	mov	r3, r1
 8003070:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003072:	7afb      	ldrb	r3, [r7, #11]
 8003074:	f003 020f 	and.w	r2, r3, #15
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	3338      	adds	r3, #56	; 0x38
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4413      	add	r3, r2
 8003086:	3304      	adds	r3, #4
 8003088:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2200      	movs	r2, #0
 800309a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	2201      	movs	r2, #1
 80030a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030a2:	7afb      	ldrb	r3, [r7, #11]
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d102      	bne.n	80030bc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030bc:	7afb      	ldrb	r3, [r7, #11]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	6979      	ldr	r1, [r7, #20]
 80030d4:	f002 faf8 	bl	80056c8 <USB_EP0StartXfer>
 80030d8:	e008      	b.n	80030ec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	6979      	ldr	r1, [r7, #20]
 80030e8:	f002 f8a6 	bl	8005238 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	460b      	mov	r3, r1
 8003100:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	f003 020f 	and.w	r2, r3, #15
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	429a      	cmp	r2, r3
 800310e:	d901      	bls.n	8003114 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e050      	b.n	80031b6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003118:	2b00      	cmp	r3, #0
 800311a:	da0f      	bge.n	800313c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	f003 020f 	and.w	r2, r3, #15
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	3338      	adds	r3, #56	; 0x38
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	4413      	add	r3, r2
 8003130:	3304      	adds	r3, #4
 8003132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	705a      	strb	r2, [r3, #1]
 800313a:	e00d      	b.n	8003158 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	3304      	adds	r3, #4
 8003150:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	b2da      	uxtb	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_PCD_EP_SetStall+0x82>
 8003174:	2302      	movs	r3, #2
 8003176:	e01e      	b.n	80031b6 <HAL_PCD_EP_SetStall+0xc0>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68f9      	ldr	r1, [r7, #12]
 8003186:	4618      	mov	r0, r3
 8003188:	f002 fd36 	bl	8005bf8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10a      	bne.n	80031ac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	b2d9      	uxtb	r1, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031a6:	461a      	mov	r2, r3
 80031a8:	f002 ff26 	bl	8005ff8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	460b      	mov	r3, r1
 80031c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	f003 020f 	and.w	r2, r3, #15
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d901      	bls.n	80031dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e042      	b.n	8003262 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	da0f      	bge.n	8003204 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	f003 020f 	and.w	r2, r3, #15
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	3338      	adds	r3, #56	; 0x38
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	3304      	adds	r3, #4
 80031fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2201      	movs	r2, #1
 8003200:	705a      	strb	r2, [r3, #1]
 8003202:	e00f      	b.n	8003224 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	f003 020f 	and.w	r2, r3, #15
 800320a:	4613      	mov	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	3304      	adds	r3, #4
 800321c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	b2da      	uxtb	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800323c:	2b01      	cmp	r3, #1
 800323e:	d101      	bne.n	8003244 <HAL_PCD_EP_ClrStall+0x86>
 8003240:	2302      	movs	r3, #2
 8003242:	e00e      	b.n	8003262 <HAL_PCD_EP_ClrStall+0xa4>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68f9      	ldr	r1, [r7, #12]
 8003252:	4618      	mov	r0, r3
 8003254:	f002 fd3e 	bl	8005cd4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003276:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800327a:	2b00      	cmp	r3, #0
 800327c:	da0c      	bge.n	8003298 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	f003 020f 	and.w	r2, r3, #15
 8003284:	4613      	mov	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	3338      	adds	r3, #56	; 0x38
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	4413      	add	r3, r2
 8003292:	3304      	adds	r3, #4
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	e00c      	b.n	80032b2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	f003 020f 	and.w	r2, r3, #15
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	3304      	adds	r3, #4
 80032b0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68f9      	ldr	r1, [r7, #12]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f002 fb5d 	bl	8005978 <USB_EPStopXfer>
 80032be:	4603      	mov	r3, r0
 80032c0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032c2:	7afb      	ldrb	r3, [r7, #11]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	; 0x28
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	3338      	adds	r3, #56	; 0x38
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	3304      	adds	r3, #4
 80032f2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a1a      	ldr	r2, [r3, #32]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d901      	bls.n	8003304 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e06c      	b.n	80033de <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	699a      	ldr	r2, [r3, #24]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	429a      	cmp	r2, r3
 8003318:	d902      	bls.n	8003320 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	3303      	adds	r3, #3
 8003324:	089b      	lsrs	r3, r3, #2
 8003326:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003328:	e02b      	b.n	8003382 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	429a      	cmp	r2, r3
 800333e:	d902      	bls.n	8003346 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3303      	adds	r3, #3
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6919      	ldr	r1, [r3, #16]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800335e:	b2db      	uxtb	r3, r3
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	4603      	mov	r3, r0
 8003364:	6978      	ldr	r0, [r7, #20]
 8003366:	f002 fbb1 	bl	8005acc <USB_WritePacket>

    ep->xfer_buff  += len;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	691a      	ldr	r2, [r3, #16]
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	441a      	add	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a1a      	ldr	r2, [r3, #32]
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	441a      	add	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	429a      	cmp	r2, r3
 8003396:	d809      	bhi.n	80033ac <PCD_WriteEmptyTxFifo+0xe0>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a1a      	ldr	r2, [r3, #32]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d203      	bcs.n	80033ac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1be      	bne.n	800332a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d811      	bhi.n	80033dc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	2201      	movs	r2, #1
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	6939      	ldr	r1, [r7, #16]
 80033d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033d8:	4013      	ands	r3, r2
 80033da:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3720      	adds	r7, #32
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	333c      	adds	r3, #60	; 0x3c
 8003400:	3304      	adds	r3, #4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	4413      	add	r3, r2
 800340e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d17b      	bne.n	8003516 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d015      	beq.n	8003454 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	4a61      	ldr	r2, [pc, #388]	; (80035b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	f240 80b9 	bls.w	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80b3 	beq.w	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	4413      	add	r3, r2
 8003446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344a:	461a      	mov	r2, r3
 800344c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003450:	6093      	str	r3, [r2, #8]
 8003452:	e0a7      	b.n	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f003 0320 	and.w	r3, r3, #32
 800345a:	2b00      	cmp	r3, #0
 800345c:	d009      	beq.n	8003472 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346a:	461a      	mov	r2, r3
 800346c:	2320      	movs	r3, #32
 800346e:	6093      	str	r3, [r2, #8]
 8003470:	e098      	b.n	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003478:	2b00      	cmp	r3, #0
 800347a:	f040 8093 	bne.w	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	4a4b      	ldr	r2, [pc, #300]	; (80035b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d90f      	bls.n	80034a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	4413      	add	r3, r2
 8003498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349c:	461a      	mov	r2, r3
 800349e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034a2:	6093      	str	r3, [r2, #8]
 80034a4:	e07e      	b.n	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	4413      	add	r3, r2
 80034b8:	3304      	adds	r3, #4
 80034ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	69da      	ldr	r2, [r3, #28]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	0159      	lsls	r1, r3, #5
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	440b      	add	r3, r1
 80034c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d2:	1ad2      	subs	r2, r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d114      	bne.n	8003508 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034f0:	461a      	mov	r2, r3
 80034f2:	2101      	movs	r1, #1
 80034f4:	f002 fd80 	bl	8005ff8 <USB_EP0_OutStart>
 80034f8:	e006      	b.n	8003508 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	441a      	add	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	4619      	mov	r1, r3
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f005 f846 	bl	80085a0 <HAL_PCD_DataOutStageCallback>
 8003514:	e046      	b.n	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	4a26      	ldr	r2, [pc, #152]	; (80035b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d124      	bne.n	8003568 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00a      	beq.n	800353e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003534:	461a      	mov	r2, r3
 8003536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800353a:	6093      	str	r3, [r2, #8]
 800353c:	e032      	b.n	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003554:	461a      	mov	r2, r3
 8003556:	2320      	movs	r3, #32
 8003558:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	4619      	mov	r1, r3
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f005 f81d 	bl	80085a0 <HAL_PCD_DataOutStageCallback>
 8003566:	e01d      	b.n	80035a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d114      	bne.n	8003598 <PCD_EP_OutXfrComplete_int+0x1b0>
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d108      	bne.n	8003598 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003590:	461a      	mov	r2, r3
 8003592:	2100      	movs	r1, #0
 8003594:	f002 fd30 	bl	8005ff8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	b2db      	uxtb	r3, r3
 800359c:	4619      	mov	r1, r3
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f004 fffe 	bl	80085a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	4f54300a 	.word	0x4f54300a
 80035b4:	4f54310a 	.word	0x4f54310a

080035b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	333c      	adds	r3, #60	; 0x3c
 80035d0:	3304      	adds	r3, #4
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4a15      	ldr	r2, [pc, #84]	; (8003640 <PCD_EP_OutSetupPacket_int+0x88>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d90e      	bls.n	800360c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d009      	beq.n	800360c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	015a      	lsls	r2, r3, #5
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4413      	add	r3, r2
 8003600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003604:	461a      	mov	r2, r3
 8003606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f004 ffb5 	bl	800857c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4a0a      	ldr	r2, [pc, #40]	; (8003640 <PCD_EP_OutSetupPacket_int+0x88>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d90c      	bls.n	8003634 <PCD_EP_OutSetupPacket_int+0x7c>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d108      	bne.n	8003634 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800362c:	461a      	mov	r2, r3
 800362e:	2101      	movs	r1, #1
 8003630:	f002 fce2 	bl	8005ff8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	4f54300a 	.word	0x4f54300a

08003644 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	460b      	mov	r3, r1
 800364e:	70fb      	strb	r3, [r7, #3]
 8003650:	4613      	mov	r3, r2
 8003652:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d107      	bne.n	8003672 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003662:	883b      	ldrh	r3, [r7, #0]
 8003664:	0419      	lsls	r1, r3, #16
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	430a      	orrs	r2, r1
 800366e:	629a      	str	r2, [r3, #40]	; 0x28
 8003670:	e028      	b.n	80036c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	0c1b      	lsrs	r3, r3, #16
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	4413      	add	r3, r2
 800367e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003680:	2300      	movs	r3, #0
 8003682:	73fb      	strb	r3, [r7, #15]
 8003684:	e00d      	b.n	80036a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	3340      	adds	r3, #64	; 0x40
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	0c1b      	lsrs	r3, r3, #16
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	4413      	add	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	3301      	adds	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
 80036a2:	7bfa      	ldrb	r2, [r7, #15]
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3ec      	bcc.n	8003686 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036ac:	883b      	ldrh	r3, [r7, #0]
 80036ae:	0418      	lsls	r0, r3, #16
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6819      	ldr	r1, [r3, #0]
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	4302      	orrs	r2, r0
 80036bc:	3340      	adds	r3, #64	; 0x40
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	460b      	mov	r3, r1
 80036dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	887a      	ldrh	r2, [r7, #2]
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e267      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d075      	beq.n	8003816 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800372a:	4b88      	ldr	r3, [pc, #544]	; (800394c <HAL_RCC_OscConfig+0x240>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b04      	cmp	r3, #4
 8003734:	d00c      	beq.n	8003750 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003736:	4b85      	ldr	r3, [pc, #532]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800373e:	2b08      	cmp	r3, #8
 8003740:	d112      	bne.n	8003768 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003742:	4b82      	ldr	r3, [pc, #520]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800374e:	d10b      	bne.n	8003768 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003750:	4b7e      	ldr	r3, [pc, #504]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d05b      	beq.n	8003814 <HAL_RCC_OscConfig+0x108>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d157      	bne.n	8003814 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e242      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003770:	d106      	bne.n	8003780 <HAL_RCC_OscConfig+0x74>
 8003772:	4b76      	ldr	r3, [pc, #472]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a75      	ldr	r2, [pc, #468]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e01d      	b.n	80037bc <HAL_RCC_OscConfig+0xb0>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003788:	d10c      	bne.n	80037a4 <HAL_RCC_OscConfig+0x98>
 800378a:	4b70      	ldr	r3, [pc, #448]	; (800394c <HAL_RCC_OscConfig+0x240>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a6f      	ldr	r2, [pc, #444]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003794:	6013      	str	r3, [r2, #0]
 8003796:	4b6d      	ldr	r3, [pc, #436]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a6c      	ldr	r2, [pc, #432]	; (800394c <HAL_RCC_OscConfig+0x240>)
 800379c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	e00b      	b.n	80037bc <HAL_RCC_OscConfig+0xb0>
 80037a4:	4b69      	ldr	r3, [pc, #420]	; (800394c <HAL_RCC_OscConfig+0x240>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a68      	ldr	r2, [pc, #416]	; (800394c <HAL_RCC_OscConfig+0x240>)
 80037aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b66      	ldr	r3, [pc, #408]	; (800394c <HAL_RCC_OscConfig+0x240>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a65      	ldr	r2, [pc, #404]	; (800394c <HAL_RCC_OscConfig+0x240>)
 80037b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d013      	beq.n	80037ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7fd fc16 	bl	8000ff4 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037cc:	f7fd fc12 	bl	8000ff4 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	; 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e207      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b5b      	ldr	r3, [pc, #364]	; (800394c <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0xc0>
 80037ea:	e014      	b.n	8003816 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7fd fc02 	bl	8000ff4 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fd fbfe 	bl	8000ff4 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e1f3      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003806:	4b51      	ldr	r3, [pc, #324]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0xe8>
 8003812:	e000      	b.n	8003816 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d063      	beq.n	80038ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003822:	4b4a      	ldr	r3, [pc, #296]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800382e:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003836:	2b08      	cmp	r3, #8
 8003838:	d11c      	bne.n	8003874 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800383a:	4b44      	ldr	r3, [pc, #272]	; (800394c <HAL_RCC_OscConfig+0x240>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d116      	bne.n	8003874 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003846:	4b41      	ldr	r3, [pc, #260]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <HAL_RCC_OscConfig+0x152>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d001      	beq.n	800385e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e1c7      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385e:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4937      	ldr	r1, [pc, #220]	; (800394c <HAL_RCC_OscConfig+0x240>)
 800386e:	4313      	orrs	r3, r2
 8003870:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003872:	e03a      	b.n	80038ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d020      	beq.n	80038be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800387c:	4b34      	ldr	r3, [pc, #208]	; (8003950 <HAL_RCC_OscConfig+0x244>)
 800387e:	2201      	movs	r2, #1
 8003880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003882:	f7fd fbb7 	bl	8000ff4 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800388a:	f7fd fbb3 	bl	8000ff4 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e1a8      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389c:	4b2b      	ldr	r3, [pc, #172]	; (800394c <HAL_RCC_OscConfig+0x240>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a8:	4b28      	ldr	r3, [pc, #160]	; (800394c <HAL_RCC_OscConfig+0x240>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4925      	ldr	r1, [pc, #148]	; (800394c <HAL_RCC_OscConfig+0x240>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	600b      	str	r3, [r1, #0]
 80038bc:	e015      	b.n	80038ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038be:	4b24      	ldr	r3, [pc, #144]	; (8003950 <HAL_RCC_OscConfig+0x244>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c4:	f7fd fb96 	bl	8000ff4 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038cc:	f7fd fb92 	bl	8000ff4 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e187      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038de:	4b1b      	ldr	r3, [pc, #108]	; (800394c <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d036      	beq.n	8003964 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d016      	beq.n	800392c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <HAL_RCC_OscConfig+0x248>)
 8003900:	2201      	movs	r2, #1
 8003902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003904:	f7fd fb76 	bl	8000ff4 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800390c:	f7fd fb72 	bl	8000ff4 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e167      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391e:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_OscConfig+0x240>)
 8003920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0x200>
 800392a:	e01b      	b.n	8003964 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800392c:	4b09      	ldr	r3, [pc, #36]	; (8003954 <HAL_RCC_OscConfig+0x248>)
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003932:	f7fd fb5f 	bl	8000ff4 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003938:	e00e      	b.n	8003958 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800393a:	f7fd fb5b 	bl	8000ff4 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d907      	bls.n	8003958 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e150      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
 800394c:	40023800 	.word	0x40023800
 8003950:	42470000 	.word	0x42470000
 8003954:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003958:	4b88      	ldr	r3, [pc, #544]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 800395a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1ea      	bne.n	800393a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8097 	beq.w	8003aa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003972:	2300      	movs	r3, #0
 8003974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003976:	4b81      	ldr	r3, [pc, #516]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	4b7d      	ldr	r3, [pc, #500]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	4a7c      	ldr	r2, [pc, #496]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 800398c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003990:	6413      	str	r3, [r2, #64]	; 0x40
 8003992:	4b7a      	ldr	r3, [pc, #488]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800399e:	2301      	movs	r3, #1
 80039a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	4b77      	ldr	r3, [pc, #476]	; (8003b80 <HAL_RCC_OscConfig+0x474>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d118      	bne.n	80039e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ae:	4b74      	ldr	r3, [pc, #464]	; (8003b80 <HAL_RCC_OscConfig+0x474>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a73      	ldr	r2, [pc, #460]	; (8003b80 <HAL_RCC_OscConfig+0x474>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ba:	f7fd fb1b 	bl	8000ff4 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c2:	f7fd fb17 	bl	8000ff4 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e10c      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d4:	4b6a      	ldr	r3, [pc, #424]	; (8003b80 <HAL_RCC_OscConfig+0x474>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0f0      	beq.n	80039c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d106      	bne.n	80039f6 <HAL_RCC_OscConfig+0x2ea>
 80039e8:	4b64      	ldr	r3, [pc, #400]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 80039ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ec:	4a63      	ldr	r2, [pc, #396]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6713      	str	r3, [r2, #112]	; 0x70
 80039f4:	e01c      	b.n	8003a30 <HAL_RCC_OscConfig+0x324>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b05      	cmp	r3, #5
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x30c>
 80039fe:	4b5f      	ldr	r3, [pc, #380]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	4a5e      	ldr	r2, [pc, #376]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a04:	f043 0304 	orr.w	r3, r3, #4
 8003a08:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0a:	4b5c      	ldr	r3, [pc, #368]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0e:	4a5b      	ldr	r2, [pc, #364]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	6713      	str	r3, [r2, #112]	; 0x70
 8003a16:	e00b      	b.n	8003a30 <HAL_RCC_OscConfig+0x324>
 8003a18:	4b58      	ldr	r3, [pc, #352]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	4a57      	ldr	r2, [pc, #348]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	6713      	str	r3, [r2, #112]	; 0x70
 8003a24:	4b55      	ldr	r3, [pc, #340]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	4a54      	ldr	r2, [pc, #336]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a2a:	f023 0304 	bic.w	r3, r3, #4
 8003a2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d015      	beq.n	8003a64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a38:	f7fd fadc 	bl	8000ff4 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a40:	f7fd fad8 	bl	8000ff4 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0cb      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a56:	4b49      	ldr	r3, [pc, #292]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0ee      	beq.n	8003a40 <HAL_RCC_OscConfig+0x334>
 8003a62:	e014      	b.n	8003a8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a64:	f7fd fac6 	bl	8000ff4 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7fd fac2 	bl	8000ff4 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0b5      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a82:	4b3e      	ldr	r3, [pc, #248]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1ee      	bne.n	8003a6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a94:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	4a38      	ldr	r2, [pc, #224]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003a9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80a1 	beq.w	8003bec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aaa:	4b34      	ldr	r3, [pc, #208]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d05c      	beq.n	8003b70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d141      	bne.n	8003b42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abe:	4b31      	ldr	r3, [pc, #196]	; (8003b84 <HAL_RCC_OscConfig+0x478>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac4:	f7fd fa96 	bl	8000ff4 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fd fa92 	bl	8000ff4 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e087      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ade:	4b27      	ldr	r3, [pc, #156]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	019b      	lsls	r3, r3, #6
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	085b      	lsrs	r3, r3, #1
 8003b02:	3b01      	subs	r3, #1
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	061b      	lsls	r3, r3, #24
 8003b0e:	491b      	ldr	r1, [pc, #108]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b14:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <HAL_RCC_OscConfig+0x478>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1a:	f7fd fa6b 	bl	8000ff4 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b22:	f7fd fa67 	bl	8000ff4 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e05c      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b34:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x416>
 8003b40:	e054      	b.n	8003bec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b42:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <HAL_RCC_OscConfig+0x478>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fd fa54 	bl	8000ff4 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fd fa50 	bl	8000ff4 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e045      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_RCC_OscConfig+0x470>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x444>
 8003b6e:	e03d      	b.n	8003bec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e038      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40007000 	.word	0x40007000
 8003b84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <HAL_RCC_OscConfig+0x4ec>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d028      	beq.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d121      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d11a      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bb8:	4013      	ands	r3, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d111      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d107      	bne.n	8003be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800

08003bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0cc      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c10:	4b68      	ldr	r3, [pc, #416]	; (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d90c      	bls.n	8003c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1e:	4b65      	ldr	r3, [pc, #404]	; (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	4b63      	ldr	r3, [pc, #396]	; (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d001      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e0b8      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d020      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c50:	4b59      	ldr	r3, [pc, #356]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	4a58      	ldr	r2, [pc, #352]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c68:	4b53      	ldr	r3, [pc, #332]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4a52      	ldr	r2, [pc, #328]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c74:	4b50      	ldr	r3, [pc, #320]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	494d      	ldr	r1, [pc, #308]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d044      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d107      	bne.n	8003caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d119      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e07f      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d003      	beq.n	8003cba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cba:	4b3f      	ldr	r3, [pc, #252]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e06f      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cca:	4b3b      	ldr	r3, [pc, #236]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e067      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cda:	4b37      	ldr	r3, [pc, #220]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f023 0203 	bic.w	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	4934      	ldr	r1, [pc, #208]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cec:	f7fd f982 	bl	8000ff4 <HAL_GetTick>
 8003cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf2:	e00a      	b.n	8003d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf4:	f7fd f97e 	bl	8000ff4 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e04f      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0a:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 020c 	and.w	r2, r3, #12
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d1eb      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d1c:	4b25      	ldr	r3, [pc, #148]	; (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d20c      	bcs.n	8003d44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2a:	4b22      	ldr	r3, [pc, #136]	; (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d32:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d001      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e032      	b.n	8003daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d50:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4916      	ldr	r1, [pc, #88]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d6e:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	490e      	ldr	r1, [pc, #56]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d82:	f000 f821 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8003d86:	4602      	mov	r2, r0
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	f003 030f 	and.w	r3, r3, #15
 8003d92:	490a      	ldr	r1, [pc, #40]	; (8003dbc <HAL_RCC_ClockConfig+0x1c0>)
 8003d94:	5ccb      	ldrb	r3, [r1, r3]
 8003d96:	fa22 f303 	lsr.w	r3, r2, r3
 8003d9a:	4a09      	ldr	r2, [pc, #36]	; (8003dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d9e:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fd f8e2 	bl	8000f6c <HAL_InitTick>

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40023c00 	.word	0x40023c00
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	08009510 	.word	0x08009510
 8003dc0:	20000000 	.word	0x20000000
 8003dc4:	20000004 	.word	0x20000004

08003dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dcc:	b094      	sub	sp, #80	; 0x50
 8003dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd8:	2300      	movs	r3, #0
 8003dda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003de0:	4b79      	ldr	r3, [pc, #484]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 030c 	and.w	r3, r3, #12
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d00d      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0x40>
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	f200 80e1 	bhi.w	8003fb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0x34>
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d003      	beq.n	8003e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dfa:	e0db      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dfc:	4b73      	ldr	r3, [pc, #460]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x204>)
 8003dfe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e00:	e0db      	b.n	8003fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e02:	4b73      	ldr	r3, [pc, #460]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e06:	e0d8      	b.n	8003fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e08:	4b6f      	ldr	r3, [pc, #444]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e12:	4b6d      	ldr	r3, [pc, #436]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d063      	beq.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e1e:	4b6a      	ldr	r3, [pc, #424]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	099b      	lsrs	r3, r3, #6
 8003e24:	2200      	movs	r2, #0
 8003e26:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e30:	633b      	str	r3, [r7, #48]	; 0x30
 8003e32:	2300      	movs	r3, #0
 8003e34:	637b      	str	r3, [r7, #52]	; 0x34
 8003e36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e3a:	4622      	mov	r2, r4
 8003e3c:	462b      	mov	r3, r5
 8003e3e:	f04f 0000 	mov.w	r0, #0
 8003e42:	f04f 0100 	mov.w	r1, #0
 8003e46:	0159      	lsls	r1, r3, #5
 8003e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e4c:	0150      	lsls	r0, r2, #5
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	4621      	mov	r1, r4
 8003e54:	1a51      	subs	r1, r2, r1
 8003e56:	6139      	str	r1, [r7, #16]
 8003e58:	4629      	mov	r1, r5
 8003e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e6c:	4659      	mov	r1, fp
 8003e6e:	018b      	lsls	r3, r1, #6
 8003e70:	4651      	mov	r1, sl
 8003e72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e76:	4651      	mov	r1, sl
 8003e78:	018a      	lsls	r2, r1, #6
 8003e7a:	4651      	mov	r1, sl
 8003e7c:	ebb2 0801 	subs.w	r8, r2, r1
 8003e80:	4659      	mov	r1, fp
 8003e82:	eb63 0901 	sbc.w	r9, r3, r1
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e9a:	4690      	mov	r8, r2
 8003e9c:	4699      	mov	r9, r3
 8003e9e:	4623      	mov	r3, r4
 8003ea0:	eb18 0303 	adds.w	r3, r8, r3
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	462b      	mov	r3, r5
 8003ea8:	eb49 0303 	adc.w	r3, r9, r3
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003eba:	4629      	mov	r1, r5
 8003ebc:	024b      	lsls	r3, r1, #9
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ec4:	4621      	mov	r1, r4
 8003ec6:	024a      	lsls	r2, r1, #9
 8003ec8:	4610      	mov	r0, r2
 8003eca:	4619      	mov	r1, r3
 8003ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ece:	2200      	movs	r2, #0
 8003ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ed2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ed4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ed8:	f7fc f9d2 	bl	8000280 <__aeabi_uldivmod>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ee4:	e058      	b.n	8003f98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ee6:	4b38      	ldr	r3, [pc, #224]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	099b      	lsrs	r3, r3, #6
 8003eec:	2200      	movs	r2, #0
 8003eee:	4618      	mov	r0, r3
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ef6:	623b      	str	r3, [r7, #32]
 8003ef8:	2300      	movs	r3, #0
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
 8003efc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f00:	4642      	mov	r2, r8
 8003f02:	464b      	mov	r3, r9
 8003f04:	f04f 0000 	mov.w	r0, #0
 8003f08:	f04f 0100 	mov.w	r1, #0
 8003f0c:	0159      	lsls	r1, r3, #5
 8003f0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f12:	0150      	lsls	r0, r2, #5
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4641      	mov	r1, r8
 8003f1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f1e:	4649      	mov	r1, r9
 8003f20:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f38:	ebb2 040a 	subs.w	r4, r2, sl
 8003f3c:	eb63 050b 	sbc.w	r5, r3, fp
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	00eb      	lsls	r3, r5, #3
 8003f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f4e:	00e2      	lsls	r2, r4, #3
 8003f50:	4614      	mov	r4, r2
 8003f52:	461d      	mov	r5, r3
 8003f54:	4643      	mov	r3, r8
 8003f56:	18e3      	adds	r3, r4, r3
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	464b      	mov	r3, r9
 8003f5c:	eb45 0303 	adc.w	r3, r5, r3
 8003f60:	607b      	str	r3, [r7, #4]
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f6e:	4629      	mov	r1, r5
 8003f70:	028b      	lsls	r3, r1, #10
 8003f72:	4621      	mov	r1, r4
 8003f74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f78:	4621      	mov	r1, r4
 8003f7a:	028a      	lsls	r2, r1, #10
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f82:	2200      	movs	r2, #0
 8003f84:	61bb      	str	r3, [r7, #24]
 8003f86:	61fa      	str	r2, [r7, #28]
 8003f88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f8c:	f7fc f978 	bl	8000280 <__aeabi_uldivmod>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4613      	mov	r3, r2
 8003f96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	0c1b      	lsrs	r3, r3, #16
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003fa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fb2:	e002      	b.n	8003fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x204>)
 8003fb6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3750      	adds	r7, #80	; 0x50
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	00f42400 	.word	0x00f42400
 8003fd0:	007a1200 	.word	0x007a1200

08003fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd8:	4b03      	ldr	r3, [pc, #12]	; (8003fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fda:	681b      	ldr	r3, [r3, #0]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000000 	.word	0x20000000

08003fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ff0:	f7ff fff0 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	0a9b      	lsrs	r3, r3, #10
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	4903      	ldr	r1, [pc, #12]	; (8004010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004002:	5ccb      	ldrb	r3, [r1, r3]
 8004004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004008:	4618      	mov	r0, r3
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40023800 	.word	0x40023800
 8004010:	08009520 	.word	0x08009520

08004014 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d105      	bne.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004038:	2b00      	cmp	r3, #0
 800403a:	d035      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800403c:	4b62      	ldr	r3, [pc, #392]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004042:	f7fc ffd7 	bl	8000ff4 <HAL_GetTick>
 8004046:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004048:	e008      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800404a:	f7fc ffd3 	bl	8000ff4 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e0b0      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800405c:	4b5b      	ldr	r3, [pc, #364]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f0      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	019a      	lsls	r2, r3, #6
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	071b      	lsls	r3, r3, #28
 8004074:	4955      	ldr	r1, [pc, #340]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800407c:	4b52      	ldr	r3, [pc, #328]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004082:	f7fc ffb7 	bl	8000ff4 <HAL_GetTick>
 8004086:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004088:	e008      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800408a:	f7fc ffb3 	bl	8000ff4 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e090      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800409c:	4b4b      	ldr	r3, [pc, #300]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8083 	beq.w	80041bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	4b44      	ldr	r3, [pc, #272]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	4a43      	ldr	r2, [pc, #268]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c4:	6413      	str	r3, [r2, #64]	; 0x40
 80040c6:	4b41      	ldr	r3, [pc, #260]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80040d2:	4b3f      	ldr	r3, [pc, #252]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a3e      	ldr	r2, [pc, #248]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040de:	f7fc ff89 	bl	8000ff4 <HAL_GetTick>
 80040e2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040e4:	e008      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040e6:	f7fc ff85 	bl	8000ff4 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e062      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040f8:	4b35      	ldr	r3, [pc, #212]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004104:	4b31      	ldr	r3, [pc, #196]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d02f      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	429a      	cmp	r2, r3
 8004120:	d028      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004122:	4b2a      	ldr	r3, [pc, #168]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800412a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800412c:	4b29      	ldr	r3, [pc, #164]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004132:	4b28      	ldr	r3, [pc, #160]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004138:	4a24      	ldr	r2, [pc, #144]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800413e:	4b23      	ldr	r3, [pc, #140]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b01      	cmp	r3, #1
 8004148:	d114      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800414a:	f7fc ff53 	bl	8000ff4 <HAL_GetTick>
 800414e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004150:	e00a      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004152:	f7fc ff4f 	bl	8000ff4 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004160:	4293      	cmp	r3, r2
 8004162:	d901      	bls.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e02a      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004168:	4b18      	ldr	r3, [pc, #96]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0ee      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004180:	d10d      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004182:	4b12      	ldr	r3, [pc, #72]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004196:	490d      	ldr	r1, [pc, #52]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004198:	4313      	orrs	r3, r2
 800419a:	608b      	str	r3, [r1, #8]
 800419c:	e005      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 800419e:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	4a0a      	ldr	r2, [pc, #40]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041a8:	6093      	str	r3, [r2, #8]
 80041aa:	4b08      	ldr	r3, [pc, #32]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b6:	4905      	ldr	r1, [pc, #20]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	42470068 	.word	0x42470068
 80041cc:	40023800 	.word	0x40023800
 80041d0:	40007000 	.word	0x40007000
 80041d4:	42470e40 	.word	0x42470e40

080041d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d13e      	bne.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80041f6:	4b23      	ldr	r3, [pc, #140]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d12f      	bne.n	800426c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800420c:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800420e:	617b      	str	r3, [r7, #20]
          break;
 8004210:	e02f      	b.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004212:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800421a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800421e:	d108      	bne.n	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004220:	4b18      	ldr	r3, [pc, #96]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004228:	4a18      	ldr	r2, [pc, #96]	; (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800422a:	fbb2 f3f3 	udiv	r3, r2, r3
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	e007      	b.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004232:	4b14      	ldr	r3, [pc, #80]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800423a:	4a15      	ldr	r2, [pc, #84]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800423c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004240:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004242:	4b10      	ldr	r3, [pc, #64]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004248:	099b      	lsrs	r3, r3, #6
 800424a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	fb02 f303 	mul.w	r3, r2, r3
 8004254:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425c:	0f1b      	lsrs	r3, r3, #28
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	617b      	str	r3, [r7, #20]
          break;
 800426a:	e002      	b.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
          break;
 8004270:	bf00      	nop
        }
      }
      break;
 8004272:	bf00      	nop
    }
  }
  return frequency;
 8004274:	697b      	ldr	r3, [r7, #20]
}
 8004276:	4618      	mov	r0, r3
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40023800 	.word	0x40023800
 8004288:	00bb8000 	.word	0x00bb8000
 800428c:	007a1200 	.word	0x007a1200
 8004290:	00f42400 	.word	0x00f42400

08004294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e07b      	b.n	800439e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d108      	bne.n	80042c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b6:	d009      	beq.n	80042cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	61da      	str	r2, [r3, #28]
 80042be:	e005      	b.n	80042cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fc fd08 	bl	8000cfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004302:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004350:	ea42 0103 	orr.w	r1, r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	f003 0104 	and.w	r1, r3, #4
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	f003 0210 	and.w	r2, r3, #16
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800438c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b08c      	sub	sp, #48	; 0x30
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043b4:	2301      	movs	r3, #1
 80043b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_SPI_TransmitReceive+0x26>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e18a      	b.n	80046e2 <HAL_SPI_TransmitReceive+0x33c>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043d4:	f7fc fe0e 	bl	8000ff4 <HAL_GetTick>
 80043d8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80043ea:	887b      	ldrh	r3, [r7, #2]
 80043ec:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d00f      	beq.n	8004416 <HAL_SPI_TransmitReceive+0x70>
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043fc:	d107      	bne.n	800440e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d103      	bne.n	800440e <HAL_SPI_TransmitReceive+0x68>
 8004406:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800440a:	2b04      	cmp	r3, #4
 800440c:	d003      	beq.n	8004416 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800440e:	2302      	movs	r3, #2
 8004410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004414:	e15b      	b.n	80046ce <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <HAL_SPI_TransmitReceive+0x82>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <HAL_SPI_TransmitReceive+0x82>
 8004422:	887b      	ldrh	r3, [r7, #2]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d103      	bne.n	8004430 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800442e:	e14e      	b.n	80046ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b04      	cmp	r3, #4
 800443a:	d003      	beq.n	8004444 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2205      	movs	r2, #5
 8004440:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	887a      	ldrh	r2, [r7, #2]
 8004454:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	887a      	ldrh	r2, [r7, #2]
 800445a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	887a      	ldrh	r2, [r7, #2]
 8004466:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	887a      	ldrh	r2, [r7, #2]
 800446c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004484:	2b40      	cmp	r3, #64	; 0x40
 8004486:	d007      	beq.n	8004498 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004496:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a0:	d178      	bne.n	8004594 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_SPI_TransmitReceive+0x10a>
 80044aa:	8b7b      	ldrh	r3, [r7, #26]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d166      	bne.n	800457e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	881a      	ldrh	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	1c9a      	adds	r2, r3, #2
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044d4:	e053      	b.n	800457e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d11b      	bne.n	800451c <HAL_SPI_TransmitReceive+0x176>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d016      	beq.n	800451c <HAL_SPI_TransmitReceive+0x176>
 80044ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d113      	bne.n	800451c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	881a      	ldrh	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	1c9a      	adds	r2, r3, #2
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b01      	cmp	r3, #1
 8004528:	d119      	bne.n	800455e <HAL_SPI_TransmitReceive+0x1b8>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d014      	beq.n	800455e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	b292      	uxth	r2, r2
 8004540:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	1c9a      	adds	r2, r3, #2
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800455a:	2301      	movs	r3, #1
 800455c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800455e:	f7fc fd49 	bl	8000ff4 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800456a:	429a      	cmp	r2, r3
 800456c:	d807      	bhi.n	800457e <HAL_SPI_TransmitReceive+0x1d8>
 800456e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004574:	d003      	beq.n	800457e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800457c:	e0a7      	b.n	80046ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1a6      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x130>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1a1      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x130>
 8004592:	e07c      	b.n	800468e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <HAL_SPI_TransmitReceive+0x1fc>
 800459c:	8b7b      	ldrh	r3, [r7, #26]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d16b      	bne.n	800467a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	330c      	adds	r3, #12
 80045ac:	7812      	ldrb	r2, [r2, #0]
 80045ae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045c8:	e057      	b.n	800467a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d11c      	bne.n	8004612 <HAL_SPI_TransmitReceive+0x26c>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d017      	beq.n	8004612 <HAL_SPI_TransmitReceive+0x26c>
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d114      	bne.n	8004612 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	330c      	adds	r3, #12
 80045f2:	7812      	ldrb	r2, [r2, #0]
 80045f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b01      	cmp	r3, #1
 800461e:	d119      	bne.n	8004654 <HAL_SPI_TransmitReceive+0x2ae>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d014      	beq.n	8004654 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004650:	2301      	movs	r3, #1
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004654:	f7fc fcce 	bl	8000ff4 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004660:	429a      	cmp	r2, r3
 8004662:	d803      	bhi.n	800466c <HAL_SPI_TransmitReceive+0x2c6>
 8004664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466a:	d102      	bne.n	8004672 <HAL_SPI_TransmitReceive+0x2cc>
 800466c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466e:	2b00      	cmp	r3, #0
 8004670:	d103      	bne.n	800467a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004678:	e029      	b.n	80046ce <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1a2      	bne.n	80045ca <HAL_SPI_TransmitReceive+0x224>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d19d      	bne.n	80045ca <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800468e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004690:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 f8b2 	bl	80047fc <SPI_EndRxTxTransaction>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d006      	beq.n	80046ac <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2220      	movs	r2, #32
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80046aa:	e010      	b.n	80046ce <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10b      	bne.n	80046cc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	e000      	b.n	80046ce <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80046cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3730      	adds	r7, #48	; 0x30
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	4613      	mov	r3, r2
 80046fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046fc:	f7fc fc7a 	bl	8000ff4 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	4413      	add	r3, r2
 800470a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800470c:	f7fc fc72 	bl	8000ff4 <HAL_GetTick>
 8004710:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004712:	4b39      	ldr	r3, [pc, #228]	; (80047f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	015b      	lsls	r3, r3, #5
 8004718:	0d1b      	lsrs	r3, r3, #20
 800471a:	69fa      	ldr	r2, [r7, #28]
 800471c:	fb02 f303 	mul.w	r3, r2, r3
 8004720:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004722:	e054      	b.n	80047ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800472a:	d050      	beq.n	80047ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800472c:	f7fc fc62 	bl	8000ff4 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	69fa      	ldr	r2, [r7, #28]
 8004738:	429a      	cmp	r2, r3
 800473a:	d902      	bls.n	8004742 <SPI_WaitFlagStateUntilTimeout+0x56>
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d13d      	bne.n	80047be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004750:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800475a:	d111      	bne.n	8004780 <SPI_WaitFlagStateUntilTimeout+0x94>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004764:	d004      	beq.n	8004770 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476e:	d107      	bne.n	8004780 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800477e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004788:	d10f      	bne.n	80047aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e017      	b.n	80047ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4013      	ands	r3, r2
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	429a      	cmp	r2, r3
 80047dc:	bf0c      	ite	eq
 80047de:	2301      	moveq	r3, #1
 80047e0:	2300      	movne	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	461a      	mov	r2, r3
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d19b      	bne.n	8004724 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3720      	adds	r7, #32
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000000 	.word	0x20000000

080047fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004808:	4b1b      	ldr	r3, [pc, #108]	; (8004878 <SPI_EndRxTxTransaction+0x7c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a1b      	ldr	r2, [pc, #108]	; (800487c <SPI_EndRxTxTransaction+0x80>)
 800480e:	fba2 2303 	umull	r2, r3, r2, r3
 8004812:	0d5b      	lsrs	r3, r3, #21
 8004814:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004818:	fb02 f303 	mul.w	r3, r2, r3
 800481c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004826:	d112      	bne.n	800484e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	9300      	str	r3, [sp, #0]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2200      	movs	r2, #0
 8004830:	2180      	movs	r1, #128	; 0x80
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f7ff ff5a 	bl	80046ec <SPI_WaitFlagStateUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d016      	beq.n	800486c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	f043 0220 	orr.w	r2, r3, #32
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e00f      	b.n	800486e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	3b01      	subs	r3, #1
 8004858:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004864:	2b80      	cmp	r3, #128	; 0x80
 8004866:	d0f2      	beq.n	800484e <SPI_EndRxTxTransaction+0x52>
 8004868:	e000      	b.n	800486c <SPI_EndRxTxTransaction+0x70>
        break;
 800486a:	bf00      	nop
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	20000000 	.word	0x20000000
 800487c:	165e9f81 	.word	0x165e9f81

08004880 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004880:	b084      	sub	sp, #16
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	f107 001c 	add.w	r0, r7, #28
 800488e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	2b01      	cmp	r3, #1
 8004896:	d122      	bne.n	80048de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80048ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80048c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d105      	bne.n	80048d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f001 fbee 	bl	80060b4 <USB_CoreReset>
 80048d8:	4603      	mov	r3, r0
 80048da:	73fb      	strb	r3, [r7, #15]
 80048dc:	e01a      	b.n	8004914 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f001 fbe2 	bl	80060b4 <USB_CoreReset>
 80048f0:	4603      	mov	r3, r0
 80048f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80048f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	639a      	str	r2, [r3, #56]	; 0x38
 8004906:	e005      	b.n	8004914 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	2b01      	cmp	r3, #1
 8004918:	d10b      	bne.n	8004932 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f043 0206 	orr.w	r2, r3, #6
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f043 0220 	orr.w	r2, r3, #32
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004932:	7bfb      	ldrb	r3, [r7, #15]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800493e:	b004      	add	sp, #16
 8004940:	4770      	bx	lr
	...

08004944 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	4613      	mov	r3, r2
 8004950:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	2b02      	cmp	r3, #2
 8004956:	d165      	bne.n	8004a24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4a41      	ldr	r2, [pc, #260]	; (8004a60 <USB_SetTurnaroundTime+0x11c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d906      	bls.n	800496e <USB_SetTurnaroundTime+0x2a>
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4a40      	ldr	r2, [pc, #256]	; (8004a64 <USB_SetTurnaroundTime+0x120>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d202      	bcs.n	800496e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004968:	230f      	movs	r3, #15
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	e062      	b.n	8004a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	4a3c      	ldr	r2, [pc, #240]	; (8004a64 <USB_SetTurnaroundTime+0x120>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d306      	bcc.n	8004984 <USB_SetTurnaroundTime+0x40>
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	4a3b      	ldr	r2, [pc, #236]	; (8004a68 <USB_SetTurnaroundTime+0x124>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d202      	bcs.n	8004984 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800497e:	230e      	movs	r3, #14
 8004980:	617b      	str	r3, [r7, #20]
 8004982:	e057      	b.n	8004a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4a38      	ldr	r2, [pc, #224]	; (8004a68 <USB_SetTurnaroundTime+0x124>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d306      	bcc.n	800499a <USB_SetTurnaroundTime+0x56>
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4a37      	ldr	r2, [pc, #220]	; (8004a6c <USB_SetTurnaroundTime+0x128>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d202      	bcs.n	800499a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004994:	230d      	movs	r3, #13
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	e04c      	b.n	8004a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	4a33      	ldr	r2, [pc, #204]	; (8004a6c <USB_SetTurnaroundTime+0x128>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d306      	bcc.n	80049b0 <USB_SetTurnaroundTime+0x6c>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4a32      	ldr	r2, [pc, #200]	; (8004a70 <USB_SetTurnaroundTime+0x12c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d802      	bhi.n	80049b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80049aa:	230c      	movs	r3, #12
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	e041      	b.n	8004a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4a2f      	ldr	r2, [pc, #188]	; (8004a70 <USB_SetTurnaroundTime+0x12c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d906      	bls.n	80049c6 <USB_SetTurnaroundTime+0x82>
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4a2e      	ldr	r2, [pc, #184]	; (8004a74 <USB_SetTurnaroundTime+0x130>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d802      	bhi.n	80049c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80049c0:	230b      	movs	r3, #11
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	e036      	b.n	8004a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4a2a      	ldr	r2, [pc, #168]	; (8004a74 <USB_SetTurnaroundTime+0x130>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d906      	bls.n	80049dc <USB_SetTurnaroundTime+0x98>
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	4a29      	ldr	r2, [pc, #164]	; (8004a78 <USB_SetTurnaroundTime+0x134>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d802      	bhi.n	80049dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80049d6:	230a      	movs	r3, #10
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	e02b      	b.n	8004a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4a26      	ldr	r2, [pc, #152]	; (8004a78 <USB_SetTurnaroundTime+0x134>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d906      	bls.n	80049f2 <USB_SetTurnaroundTime+0xae>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	4a25      	ldr	r2, [pc, #148]	; (8004a7c <USB_SetTurnaroundTime+0x138>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d202      	bcs.n	80049f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80049ec:	2309      	movs	r3, #9
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	e020      	b.n	8004a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	4a21      	ldr	r2, [pc, #132]	; (8004a7c <USB_SetTurnaroundTime+0x138>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d306      	bcc.n	8004a08 <USB_SetTurnaroundTime+0xc4>
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	4a20      	ldr	r2, [pc, #128]	; (8004a80 <USB_SetTurnaroundTime+0x13c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d802      	bhi.n	8004a08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004a02:	2308      	movs	r3, #8
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	e015      	b.n	8004a34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4a1d      	ldr	r2, [pc, #116]	; (8004a80 <USB_SetTurnaroundTime+0x13c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d906      	bls.n	8004a1e <USB_SetTurnaroundTime+0xda>
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4a1c      	ldr	r2, [pc, #112]	; (8004a84 <USB_SetTurnaroundTime+0x140>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d202      	bcs.n	8004a1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004a18:	2307      	movs	r3, #7
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	e00a      	b.n	8004a34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004a1e:	2306      	movs	r3, #6
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	e007      	b.n	8004a34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004a24:	79fb      	ldrb	r3, [r7, #7]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d102      	bne.n	8004a30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004a2a:	2309      	movs	r3, #9
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	e001      	b.n	8004a34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004a30:	2309      	movs	r3, #9
 8004a32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	029b      	lsls	r3, r3, #10
 8004a48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	371c      	adds	r7, #28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	00d8acbf 	.word	0x00d8acbf
 8004a64:	00e4e1c0 	.word	0x00e4e1c0
 8004a68:	00f42400 	.word	0x00f42400
 8004a6c:	01067380 	.word	0x01067380
 8004a70:	011a499f 	.word	0x011a499f
 8004a74:	01312cff 	.word	0x01312cff
 8004a78:	014ca43f 	.word	0x014ca43f
 8004a7c:	016e3600 	.word	0x016e3600
 8004a80:	01a6ab1f 	.word	0x01a6ab1f
 8004a84:	01e84800 	.word	0x01e84800

08004a88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f043 0201 	orr.w	r2, r3, #1
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f023 0201 	bic.w	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d115      	bne.n	8004b1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004afa:	2001      	movs	r0, #1
 8004afc:	f7fc fa86 	bl	800100c <HAL_Delay>
      ms++;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3301      	adds	r3, #1
 8004b04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f001 fa45 	bl	8005f96 <USB_GetMode>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d01e      	beq.n	8004b50 <USB_SetCurrentMode+0x84>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b31      	cmp	r3, #49	; 0x31
 8004b16:	d9f0      	bls.n	8004afa <USB_SetCurrentMode+0x2e>
 8004b18:	e01a      	b.n	8004b50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d115      	bne.n	8004b4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	f7fc fa6d 	bl	800100c <HAL_Delay>
      ms++;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3301      	adds	r3, #1
 8004b36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f001 fa2c 	bl	8005f96 <USB_GetMode>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d005      	beq.n	8004b50 <USB_SetCurrentMode+0x84>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b31      	cmp	r3, #49	; 0x31
 8004b48:	d9f0      	bls.n	8004b2c <USB_SetCurrentMode+0x60>
 8004b4a:	e001      	b.n	8004b50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e005      	b.n	8004b5c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2b32      	cmp	r3, #50	; 0x32
 8004b54:	d101      	bne.n	8004b5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b64:	b084      	sub	sp, #16
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b086      	sub	sp, #24
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b7e:	2300      	movs	r3, #0
 8004b80:	613b      	str	r3, [r7, #16]
 8004b82:	e009      	b.n	8004b98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	3340      	adds	r3, #64	; 0x40
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	2200      	movs	r2, #0
 8004b90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	3301      	adds	r3, #1
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b0e      	cmp	r3, #14
 8004b9c:	d9f2      	bls.n	8004b84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d11c      	bne.n	8004bde <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bb2:	f043 0302 	orr.w	r3, r3, #2
 8004bb6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38
 8004bdc:	e00b      	b.n	8004bf6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	2300      	movs	r3, #0
 8004c00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c08:	4619      	mov	r1, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c10:	461a      	mov	r2, r3
 8004c12:	680b      	ldr	r3, [r1, #0]
 8004c14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d10c      	bne.n	8004c36 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d104      	bne.n	8004c2c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c22:	2100      	movs	r1, #0
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f965 	bl	8004ef4 <USB_SetDevSpeed>
 8004c2a:	e008      	b.n	8004c3e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f960 	bl	8004ef4 <USB_SetDevSpeed>
 8004c34:	e003      	b.n	8004c3e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c36:	2103      	movs	r1, #3
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f95b 	bl	8004ef4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c3e:	2110      	movs	r1, #16
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f8f3 	bl	8004e2c <USB_FlushTxFifo>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f91f 	bl	8004e94 <USB_FlushRxFifo>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c66:	461a      	mov	r2, r3
 8004c68:	2300      	movs	r3, #0
 8004c6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c72:	461a      	mov	r2, r3
 8004c74:	2300      	movs	r3, #0
 8004c76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7e:	461a      	mov	r2, r3
 8004c80:	2300      	movs	r3, #0
 8004c82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c84:	2300      	movs	r3, #0
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	e043      	b.n	8004d12 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ca0:	d118      	bne.n	8004cd4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	e013      	b.n	8004ce6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	015a      	lsls	r2, r3, #5
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e008      	b.n	8004ce6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d04:	461a      	mov	r2, r3
 8004d06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d3b7      	bcc.n	8004c8a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	e043      	b.n	8004da8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d36:	d118      	bne.n	8004d6a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10a      	bne.n	8004d54 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	e013      	b.n	8004d7c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d60:	461a      	mov	r2, r3
 8004d62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	e008      	b.n	8004d7c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d76:	461a      	mov	r2, r3
 8004d78:	2300      	movs	r3, #0
 8004d7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d88:	461a      	mov	r2, r3
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004da0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	3301      	adds	r3, #1
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d3b7      	bcc.n	8004d20 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004dd0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d105      	bne.n	8004de4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	f043 0210 	orr.w	r2, r3, #16
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699a      	ldr	r2, [r3, #24]
 8004de8:	4b0f      	ldr	r3, [pc, #60]	; (8004e28 <USB_DevInit+0x2c4>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f043 0208 	orr.w	r2, r3, #8
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d107      	bne.n	8004e18 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e10:	f043 0304 	orr.w	r3, r3, #4
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e24:	b004      	add	sp, #16
 8004e26:	4770      	bx	lr
 8004e28:	803c3800 	.word	0x803c3800

08004e2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4a13      	ldr	r2, [pc, #76]	; (8004e90 <USB_FlushTxFifo+0x64>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d901      	bls.n	8004e4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e01b      	b.n	8004e84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	daf2      	bge.n	8004e3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	019b      	lsls	r3, r3, #6
 8004e5c:	f043 0220 	orr.w	r2, r3, #32
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3301      	adds	r3, #1
 8004e68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4a08      	ldr	r2, [pc, #32]	; (8004e90 <USB_FlushTxFifo+0x64>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d901      	bls.n	8004e76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e006      	b.n	8004e84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d0f0      	beq.n	8004e64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	00030d40 	.word	0x00030d40

08004e94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4a11      	ldr	r2, [pc, #68]	; (8004ef0 <USB_FlushRxFifo+0x5c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d901      	bls.n	8004eb2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e018      	b.n	8004ee4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	daf2      	bge.n	8004ea0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a08      	ldr	r2, [pc, #32]	; (8004ef0 <USB_FlushRxFifo+0x5c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d901      	bls.n	8004ed6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e006      	b.n	8004ee4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f003 0310 	and.w	r3, r3, #16
 8004ede:	2b10      	cmp	r3, #16
 8004ee0:	d0f0      	beq.n	8004ec4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	00030d40 	.word	0x00030d40

08004ef4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	78fb      	ldrb	r3, [r7, #3]
 8004f0e:	68f9      	ldr	r1, [r7, #12]
 8004f10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f14:	4313      	orrs	r3, r2
 8004f16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b087      	sub	sp, #28
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 0306 	and.w	r3, r3, #6
 8004f3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d102      	bne.n	8004f4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004f46:	2300      	movs	r3, #0
 8004f48:	75fb      	strb	r3, [r7, #23]
 8004f4a:	e00a      	b.n	8004f62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d002      	beq.n	8004f58 <USB_GetDevSpeed+0x32>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b06      	cmp	r3, #6
 8004f56:	d102      	bne.n	8004f5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004f58:	2302      	movs	r3, #2
 8004f5a:	75fb      	strb	r3, [r7, #23]
 8004f5c:	e001      	b.n	8004f62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004f5e:	230f      	movs	r3, #15
 8004f60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	371c      	adds	r7, #28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	785b      	ldrb	r3, [r3, #1]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d13a      	bne.n	8005002 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	f003 030f 	and.w	r3, r3, #15
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	68f9      	ldr	r1, [r7, #12]
 8004fa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004faa:	4313      	orrs	r3, r2
 8004fac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d155      	bne.n	8005070 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	791b      	ldrb	r3, [r3, #4]
 8004fde:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fe0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	059b      	lsls	r3, r3, #22
 8004fe6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	0151      	lsls	r1, r2, #5
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	e036      	b.n	8005070 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005008:	69da      	ldr	r2, [r3, #28]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	2101      	movs	r1, #1
 8005014:	fa01 f303 	lsl.w	r3, r1, r3
 8005018:	041b      	lsls	r3, r3, #16
 800501a:	68f9      	ldr	r1, [r7, #12]
 800501c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005020:	4313      	orrs	r3, r2
 8005022:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d11a      	bne.n	8005070 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	015a      	lsls	r2, r3, #5
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4413      	add	r3, r2
 8005042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	791b      	ldrb	r3, [r3, #4]
 8005054:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005056:	430b      	orrs	r3, r1
 8005058:	4313      	orrs	r3, r2
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	0151      	lsls	r1, r2, #5
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	440a      	add	r2, r1
 8005062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	785b      	ldrb	r3, [r3, #1]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d161      	bne.n	8005160 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050b2:	d11f      	bne.n	80050f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	0151      	lsls	r1, r2, #5
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	440a      	add	r2, r1
 80050ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	0151      	lsls	r1, r2, #5
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	440a      	add	r2, r1
 80050ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	2101      	movs	r1, #1
 8005106:	fa01 f303 	lsl.w	r3, r1, r3
 800510a:	b29b      	uxth	r3, r3
 800510c:	43db      	mvns	r3, r3
 800510e:	68f9      	ldr	r1, [r7, #12]
 8005110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005114:	4013      	ands	r3, r2
 8005116:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511e:	69da      	ldr	r2, [r3, #28]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	2101      	movs	r1, #1
 800512a:	fa01 f303 	lsl.w	r3, r1, r3
 800512e:	b29b      	uxth	r3, r3
 8005130:	43db      	mvns	r3, r3
 8005132:	68f9      	ldr	r1, [r7, #12]
 8005134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005138:	4013      	ands	r3, r2
 800513a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	0159      	lsls	r1, r3, #5
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	440b      	add	r3, r1
 8005152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005156:	4619      	mov	r1, r3
 8005158:	4b35      	ldr	r3, [pc, #212]	; (8005230 <USB_DeactivateEndpoint+0x1b0>)
 800515a:	4013      	ands	r3, r2
 800515c:	600b      	str	r3, [r1, #0]
 800515e:	e060      	b.n	8005222 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005176:	d11f      	bne.n	80051b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	0151      	lsls	r1, r2, #5
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	440a      	add	r2, r1
 800518e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005192:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005196:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	0151      	lsls	r1, r2, #5
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	440a      	add	r2, r1
 80051ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	2101      	movs	r1, #1
 80051ca:	fa01 f303 	lsl.w	r3, r1, r3
 80051ce:	041b      	lsls	r3, r3, #16
 80051d0:	43db      	mvns	r3, r3
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051d8:	4013      	ands	r3, r2
 80051da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	f003 030f 	and.w	r3, r3, #15
 80051ec:	2101      	movs	r1, #1
 80051ee:	fa01 f303 	lsl.w	r3, r1, r3
 80051f2:	041b      	lsls	r3, r3, #16
 80051f4:	43db      	mvns	r3, r3
 80051f6:	68f9      	ldr	r1, [r7, #12]
 80051f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051fc:	4013      	ands	r3, r2
 80051fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	0159      	lsls	r1, r3, #5
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	440b      	add	r3, r1
 8005216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521a:	4619      	mov	r1, r3
 800521c:	4b05      	ldr	r3, [pc, #20]	; (8005234 <USB_DeactivateEndpoint+0x1b4>)
 800521e:	4013      	ands	r3, r2
 8005220:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr
 8005230:	ec337800 	.word	0xec337800
 8005234:	eff37800 	.word	0xeff37800

08005238 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	; 0x28
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	4613      	mov	r3, r2
 8005244:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	2b01      	cmp	r3, #1
 8005256:	f040 815c 	bne.w	8005512 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d132      	bne.n	80052c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	0151      	lsls	r1, r2, #5
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	440a      	add	r2, r1
 8005278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800527c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005280:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005284:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	0151      	lsls	r1, r2, #5
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	440a      	add	r2, r1
 800529c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	0151      	lsls	r1, r2, #5
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	440a      	add	r2, r1
 80052bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c0:	0cdb      	lsrs	r3, r3, #19
 80052c2:	04db      	lsls	r3, r3, #19
 80052c4:	6113      	str	r3, [r2, #16]
 80052c6:	e074      	b.n	80053b2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	0151      	lsls	r1, r2, #5
 80052da:	69fa      	ldr	r2, [r7, #28]
 80052dc:	440a      	add	r2, r1
 80052de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e2:	0cdb      	lsrs	r3, r3, #19
 80052e4:	04db      	lsls	r3, r3, #19
 80052e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	0151      	lsls	r1, r2, #5
 80052fa:	69fa      	ldr	r2, [r7, #28]
 80052fc:	440a      	add	r2, r1
 80052fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005302:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005306:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800530a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005318:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	6999      	ldr	r1, [r3, #24]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	440b      	add	r3, r1
 8005324:	1e59      	subs	r1, r3, #1
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	fbb1 f3f3 	udiv	r3, r1, r3
 800532e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005330:	4b9d      	ldr	r3, [pc, #628]	; (80055a8 <USB_EPStartXfer+0x370>)
 8005332:	400b      	ands	r3, r1
 8005334:	69b9      	ldr	r1, [r7, #24]
 8005336:	0148      	lsls	r0, r1, #5
 8005338:	69f9      	ldr	r1, [r7, #28]
 800533a:	4401      	add	r1, r0
 800533c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005340:	4313      	orrs	r3, r2
 8005342:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005350:	691a      	ldr	r2, [r3, #16]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800535a:	69b9      	ldr	r1, [r7, #24]
 800535c:	0148      	lsls	r0, r1, #5
 800535e:	69f9      	ldr	r1, [r7, #28]
 8005360:	4401      	add	r1, r0
 8005362:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005366:	4313      	orrs	r3, r2
 8005368:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	791b      	ldrb	r3, [r3, #4]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d11f      	bne.n	80053b2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	0151      	lsls	r1, r2, #5
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	440a      	add	r2, r1
 8005388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800538c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005390:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	0151      	lsls	r1, r2, #5
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	440a      	add	r2, r1
 80053a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80053b2:	79fb      	ldrb	r3, [r7, #7]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d14b      	bne.n	8005450 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d009      	beq.n	80053d4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053cc:	461a      	mov	r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	791b      	ldrb	r3, [r3, #4]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d128      	bne.n	800542e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d110      	bne.n	800540e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	0151      	lsls	r1, r2, #5
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	440a      	add	r2, r1
 8005402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005406:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	e00f      	b.n	800542e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	440a      	add	r2, r1
 8005424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800542c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	0151      	lsls	r1, r2, #5
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	440a      	add	r2, r1
 8005444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005448:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	e133      	b.n	80056b8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	69fa      	ldr	r2, [r7, #28]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800546e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	791b      	ldrb	r3, [r3, #4]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d015      	beq.n	80054a4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 811b 	beq.w	80056b8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005488:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	2101      	movs	r1, #1
 8005494:	fa01 f303 	lsl.w	r3, r1, r3
 8005498:	69f9      	ldr	r1, [r7, #28]
 800549a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800549e:	4313      	orrs	r3, r2
 80054a0:	634b      	str	r3, [r1, #52]	; 0x34
 80054a2:	e109      	b.n	80056b8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d110      	bne.n	80054d6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	e00f      	b.n	80054f6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	0151      	lsls	r1, r2, #5
 80054e8:	69fa      	ldr	r2, [r7, #28]
 80054ea:	440a      	add	r2, r1
 80054ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	6919      	ldr	r1, [r3, #16]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	781a      	ldrb	r2, [r3, #0]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	b298      	uxth	r0, r3
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	4603      	mov	r3, r0
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 fade 	bl	8005acc <USB_WritePacket>
 8005510:	e0d2      	b.n	80056b8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	0151      	lsls	r1, r2, #5
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	440a      	add	r2, r1
 8005528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800552c:	0cdb      	lsrs	r3, r3, #19
 800552e:	04db      	lsls	r3, r3, #19
 8005530:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	0151      	lsls	r1, r2, #5
 8005544:	69fa      	ldr	r2, [r7, #28]
 8005546:	440a      	add	r2, r1
 8005548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800554c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005550:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005554:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d126      	bne.n	80055ac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005574:	69b9      	ldr	r1, [r7, #24]
 8005576:	0148      	lsls	r0, r1, #5
 8005578:	69f9      	ldr	r1, [r7, #28]
 800557a:	4401      	add	r1, r0
 800557c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005580:	4313      	orrs	r3, r2
 8005582:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	69fa      	ldr	r2, [r7, #28]
 8005598:	440a      	add	r2, r1
 800559a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800559e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055a2:	6113      	str	r3, [r2, #16]
 80055a4:	e03a      	b.n	800561c <USB_EPStartXfer+0x3e4>
 80055a6:	bf00      	nop
 80055a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	699a      	ldr	r2, [r3, #24]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	4413      	add	r3, r2
 80055b6:	1e5a      	subs	r2, r3, #1
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	8afa      	ldrh	r2, [r7, #22]
 80055c8:	fb03 f202 	mul.w	r2, r3, r2
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	8afb      	ldrh	r3, [r7, #22]
 80055e0:	04d9      	lsls	r1, r3, #19
 80055e2:	4b38      	ldr	r3, [pc, #224]	; (80056c4 <USB_EPStartXfer+0x48c>)
 80055e4:	400b      	ands	r3, r1
 80055e6:	69b9      	ldr	r1, [r7, #24]
 80055e8:	0148      	lsls	r0, r1, #5
 80055ea:	69f9      	ldr	r1, [r7, #28]
 80055ec:	4401      	add	r1, r0
 80055ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055f2:	4313      	orrs	r3, r2
 80055f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800560c:	69b9      	ldr	r1, [r7, #24]
 800560e:	0148      	lsls	r0, r1, #5
 8005610:	69f9      	ldr	r1, [r7, #28]
 8005612:	4401      	add	r1, r0
 8005614:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005618:	4313      	orrs	r3, r2
 800561a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800561c:	79fb      	ldrb	r3, [r7, #7]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d10d      	bne.n	800563e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	6919      	ldr	r1, [r3, #16]
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563a:	460a      	mov	r2, r1
 800563c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	791b      	ldrb	r3, [r3, #4]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d128      	bne.n	8005698 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005652:	2b00      	cmp	r3, #0
 8005654:	d110      	bne.n	8005678 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	0151      	lsls	r1, r2, #5
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	440a      	add	r2, r1
 800566c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005670:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	e00f      	b.n	8005698 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	0151      	lsls	r1, r2, #5
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	440a      	add	r2, r1
 800568e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005696:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	0151      	lsls	r1, r2, #5
 80056aa:	69fa      	ldr	r2, [r7, #28]
 80056ac:	440a      	add	r2, r1
 80056ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3720      	adds	r7, #32
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	1ff80000 	.word	0x1ff80000

080056c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	4613      	mov	r3, r2
 80056d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	785b      	ldrb	r3, [r3, #1]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	f040 80ce 	bne.w	8005886 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d132      	bne.n	8005758 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	0151      	lsls	r1, r2, #5
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	440a      	add	r2, r1
 8005708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005710:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005714:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	0151      	lsls	r1, r2, #5
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	440a      	add	r2, r1
 800572c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005730:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005734:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	0151      	lsls	r1, r2, #5
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	440a      	add	r2, r1
 800574c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005750:	0cdb      	lsrs	r3, r3, #19
 8005752:	04db      	lsls	r3, r3, #19
 8005754:	6113      	str	r3, [r2, #16]
 8005756:	e04e      	b.n	80057f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	0151      	lsls	r1, r2, #5
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	440a      	add	r2, r1
 800576e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005772:	0cdb      	lsrs	r3, r3, #19
 8005774:	04db      	lsls	r3, r3, #19
 8005776:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005792:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005796:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800579a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	699a      	ldr	r2, [r3, #24]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d903      	bls.n	80057b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	68da      	ldr	r2, [r3, #12]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	0151      	lsls	r1, r2, #5
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	440a      	add	r2, r1
 80057c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057dc:	691a      	ldr	r2, [r3, #16]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057e6:	6939      	ldr	r1, [r7, #16]
 80057e8:	0148      	lsls	r0, r1, #5
 80057ea:	6979      	ldr	r1, [r7, #20]
 80057ec:	4401      	add	r1, r0
 80057ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057f2:	4313      	orrs	r3, r2
 80057f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80057f6:	79fb      	ldrb	r3, [r7, #7]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d11e      	bne.n	800583a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d009      	beq.n	8005818 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005810:	461a      	mov	r2, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	0151      	lsls	r1, r2, #5
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	440a      	add	r2, r1
 800582e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005832:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	e097      	b.n	800596a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	440a      	add	r2, r1
 8005850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005854:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005858:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 8083 	beq.w	800596a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	2101      	movs	r1, #1
 8005876:	fa01 f303 	lsl.w	r3, r1, r3
 800587a:	6979      	ldr	r1, [r7, #20]
 800587c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005880:	4313      	orrs	r3, r2
 8005882:	634b      	str	r3, [r1, #52]	; 0x34
 8005884:	e071      	b.n	800596a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	440a      	add	r2, r1
 800589c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a0:	0cdb      	lsrs	r3, r3, #19
 80058a2:	04db      	lsls	r3, r3, #19
 80058a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	0151      	lsls	r1, r2, #5
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	440a      	add	r2, r1
 80058bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	0151      	lsls	r1, r2, #5
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	440a      	add	r2, r1
 80058f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005900:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005918:	6939      	ldr	r1, [r7, #16]
 800591a:	0148      	lsls	r0, r1, #5
 800591c:	6979      	ldr	r1, [r7, #20]
 800591e:	4401      	add	r1, r0
 8005920:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005924:	4313      	orrs	r3, r2
 8005926:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005928:	79fb      	ldrb	r3, [r7, #7]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d10d      	bne.n	800594a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d009      	beq.n	800594a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	6919      	ldr	r1, [r3, #16]
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005946:	460a      	mov	r2, r1
 8005948:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	440a      	add	r2, r1
 8005960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005964:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005968:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d14a      	bne.n	8005a2c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ae:	f040 8086 	bne.w	8005abe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	7812      	ldrb	r2, [r2, #0]
 80059c6:	0151      	lsls	r1, r2, #5
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	440a      	add	r2, r1
 80059cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	7812      	ldrb	r2, [r2, #0]
 80059ea:	0151      	lsls	r1, r2, #5
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	440a      	add	r2, r1
 80059f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	3301      	adds	r3, #1
 80059fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d902      	bls.n	8005a10 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	75fb      	strb	r3, [r7, #23]
          break;
 8005a0e:	e056      	b.n	8005abe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a28:	d0e7      	beq.n	80059fa <USB_EPStopXfer+0x82>
 8005a2a:	e048      	b.n	8005abe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a44:	d13b      	bne.n	8005abe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	7812      	ldrb	r2, [r2, #0]
 8005a5a:	0151      	lsls	r1, r2, #5
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	440a      	add	r2, r1
 8005a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a68:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	7812      	ldrb	r2, [r2, #0]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3301      	adds	r3, #1
 8005a92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d902      	bls.n	8005aa4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	75fb      	strb	r3, [r7, #23]
          break;
 8005aa2:	e00c      	b.n	8005abe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005abc:	d0e7      	beq.n	8005a8e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	371c      	adds	r7, #28
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b089      	sub	sp, #36	; 0x24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	461a      	mov	r2, r3
 8005ada:	460b      	mov	r3, r1
 8005adc:	71fb      	strb	r3, [r7, #7]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005aea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d123      	bne.n	8005b3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005af2:	88bb      	ldrh	r3, [r7, #4]
 8005af4:	3303      	adds	r3, #3
 8005af6:	089b      	lsrs	r3, r3, #2
 8005af8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005afa:	2300      	movs	r3, #0
 8005afc:	61bb      	str	r3, [r7, #24]
 8005afe:	e018      	b.n	8005b32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	031a      	lsls	r2, r3, #12
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	3301      	adds	r3, #1
 8005b18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	3301      	adds	r3, #1
 8005b24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d3e2      	bcc.n	8005b00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3724      	adds	r7, #36	; 0x24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b08b      	sub	sp, #44	; 0x2c
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	4613      	mov	r3, r2
 8005b54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	089b      	lsrs	r3, r3, #2
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b66:	88fb      	ldrh	r3, [r7, #6]
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b6e:	2300      	movs	r3, #0
 8005b70:	623b      	str	r3, [r7, #32]
 8005b72:	e014      	b.n	8005b9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	3301      	adds	r3, #1
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	3301      	adds	r3, #1
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	3301      	adds	r3, #1
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	3301      	adds	r3, #1
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	623b      	str	r3, [r7, #32]
 8005b9e:	6a3a      	ldr	r2, [r7, #32]
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d3e6      	bcc.n	8005b74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ba6:	8bfb      	ldrh	r3, [r7, #30]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01e      	beq.n	8005bea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f107 0310 	add.w	r3, r7, #16
 8005bbc:	6812      	ldr	r2, [r2, #0]
 8005bbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	701a      	strb	r2, [r3, #0]
      i++;
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	3301      	adds	r3, #1
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005bde:	8bfb      	ldrh	r3, [r7, #30]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005be4:	8bfb      	ldrh	r3, [r7, #30]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1ea      	bne.n	8005bc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	372c      	adds	r7, #44	; 0x2c
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d12c      	bne.n	8005c6e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	db12      	blt.n	8005c4c <USB_EPSetStall+0x54>
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00f      	beq.n	8005c4c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c4a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	e02b      	b.n	8005cc6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	db12      	blt.n	8005ca6 <USB_EPSetStall+0xae>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00f      	beq.n	8005ca6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	0151      	lsls	r1, r2, #5
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	440a      	add	r2, r1
 8005c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ca4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	0151      	lsls	r1, r2, #5
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	440a      	add	r2, r1
 8005cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	785b      	ldrb	r3, [r3, #1]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d128      	bne.n	8005d42 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	791b      	ldrb	r3, [r3, #4]
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d003      	beq.n	8005d20 <USB_EPClearStall+0x4c>
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	791b      	ldrb	r3, [r3, #4]
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d138      	bne.n	8005d92 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	0151      	lsls	r1, r2, #5
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	440a      	add	r2, r1
 8005d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d3e:	6013      	str	r3, [r2, #0]
 8005d40:	e027      	b.n	8005d92 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	791b      	ldrb	r3, [r3, #4]
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	d003      	beq.n	8005d72 <USB_EPClearStall+0x9e>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	791b      	ldrb	r3, [r3, #4]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d10f      	bne.n	8005d92 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	0151      	lsls	r1, r2, #5
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	440a      	add	r2, r1
 8005d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d90:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	460b      	mov	r3, r1
 8005daa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dbe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005dc2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	78fb      	ldrb	r3, [r7, #3]
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005dd4:	68f9      	ldr	r1, [r7, #12]
 8005dd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e06:	f023 0303 	bic.w	r3, r3, #3
 8005e0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e1a:	f023 0302 	bic.w	r3, r3, #2
 8005e1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b085      	sub	sp, #20
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e48:	f023 0303 	bic.w	r3, r3, #3
 8005e4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e5c:	f043 0302 	orr.w	r3, r3, #2
 8005e60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4013      	ands	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e88:	68fb      	ldr	r3, [r7, #12]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e96:	b480      	push	{r7}
 8005e98:	b085      	sub	sp, #20
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	0c1b      	lsrs	r3, r3, #16
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b085      	sub	sp, #20
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	4013      	ands	r3, r2
 8005eec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	b29b      	uxth	r3, r3
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b085      	sub	sp, #20
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	460b      	mov	r3, r1
 8005f08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f2c:	68bb      	ldr	r3, [r7, #8]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b087      	sub	sp, #28
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	460b      	mov	r3, r1
 8005f44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	f003 030f 	and.w	r3, r3, #15
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6a:	01db      	lsls	r3, r3, #7
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f74:	78fb      	ldrb	r3, [r7, #3]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4013      	ands	r3, r2
 8005f86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f88:	68bb      	ldr	r3, [r7, #8]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	371c      	adds	r7, #28
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b085      	sub	sp, #20
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fcc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005fd0:	f023 0307 	bic.w	r3, r3, #7
 8005fd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	460b      	mov	r3, r1
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	333c      	adds	r3, #60	; 0x3c
 800600e:	3304      	adds	r3, #4
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	4a26      	ldr	r2, [pc, #152]	; (80060b0 <USB_EP0_OutStart+0xb8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d90a      	bls.n	8006032 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800602c:	d101      	bne.n	8006032 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	e037      	b.n	80060a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006038:	461a      	mov	r2, r3
 800603a:	2300      	movs	r3, #0
 800603c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800604c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006050:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006060:	f043 0318 	orr.w	r3, r3, #24
 8006064:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006074:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006078:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800607a:	7afb      	ldrb	r3, [r7, #11]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d10f      	bne.n	80060a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006086:	461a      	mov	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800609a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800609e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	4f54300a 	.word	0x4f54300a

080060b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	3301      	adds	r3, #1
 80060c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4a13      	ldr	r2, [pc, #76]	; (8006118 <USB_CoreReset+0x64>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d901      	bls.n	80060d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e01b      	b.n	800610a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	daf2      	bge.n	80060c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f043 0201 	orr.w	r2, r3, #1
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3301      	adds	r3, #1
 80060ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4a09      	ldr	r2, [pc, #36]	; (8006118 <USB_CoreReset+0x64>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d901      	bls.n	80060fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e006      	b.n	800610a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b01      	cmp	r3, #1
 8006106:	d0f0      	beq.n	80060ea <USB_CoreReset+0x36>

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	00030d40 	.word	0x00030d40

0800611c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006128:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800612c:	f002 fca2 	bl	8008a74 <USBD_static_malloc>
 8006130:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d109      	bne.n	800614c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	32b0      	adds	r2, #176	; 0xb0
 8006142:	2100      	movs	r1, #0
 8006144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006148:	2302      	movs	r3, #2
 800614a:	e0d4      	b.n	80062f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800614c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006150:	2100      	movs	r1, #0
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f002 fd06 	bl	8008b64 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	32b0      	adds	r2, #176	; 0xb0
 8006162:	68f9      	ldr	r1, [r7, #12]
 8006164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	32b0      	adds	r2, #176	; 0xb0
 8006172:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	7c1b      	ldrb	r3, [r3, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d138      	bne.n	80061f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006184:	4b5e      	ldr	r3, [pc, #376]	; (8006300 <USBD_CDC_Init+0x1e4>)
 8006186:	7819      	ldrb	r1, [r3, #0]
 8006188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800618c:	2202      	movs	r2, #2
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f002 fb4d 	bl	800882e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006194:	4b5a      	ldr	r3, [pc, #360]	; (8006300 <USBD_CDC_Init+0x1e4>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	f003 020f 	and.w	r2, r3, #15
 800619c:	6879      	ldr	r1, [r7, #4]
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	440b      	add	r3, r1
 80061a8:	3324      	adds	r3, #36	; 0x24
 80061aa:	2201      	movs	r2, #1
 80061ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80061ae:	4b55      	ldr	r3, [pc, #340]	; (8006304 <USBD_CDC_Init+0x1e8>)
 80061b0:	7819      	ldrb	r1, [r3, #0]
 80061b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061b6:	2202      	movs	r2, #2
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f002 fb38 	bl	800882e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80061be:	4b51      	ldr	r3, [pc, #324]	; (8006304 <USBD_CDC_Init+0x1e8>)
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	f003 020f 	and.w	r2, r3, #15
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	440b      	add	r3, r1
 80061d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061d6:	2201      	movs	r2, #1
 80061d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80061da:	4b4b      	ldr	r3, [pc, #300]	; (8006308 <USBD_CDC_Init+0x1ec>)
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	f003 020f 	and.w	r2, r3, #15
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	440b      	add	r3, r1
 80061ee:	3326      	adds	r3, #38	; 0x26
 80061f0:	2210      	movs	r2, #16
 80061f2:	801a      	strh	r2, [r3, #0]
 80061f4:	e035      	b.n	8006262 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80061f6:	4b42      	ldr	r3, [pc, #264]	; (8006300 <USBD_CDC_Init+0x1e4>)
 80061f8:	7819      	ldrb	r1, [r3, #0]
 80061fa:	2340      	movs	r3, #64	; 0x40
 80061fc:	2202      	movs	r2, #2
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f002 fb15 	bl	800882e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006204:	4b3e      	ldr	r3, [pc, #248]	; (8006300 <USBD_CDC_Init+0x1e4>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	f003 020f 	and.w	r2, r3, #15
 800620c:	6879      	ldr	r1, [r7, #4]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	440b      	add	r3, r1
 8006218:	3324      	adds	r3, #36	; 0x24
 800621a:	2201      	movs	r2, #1
 800621c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800621e:	4b39      	ldr	r3, [pc, #228]	; (8006304 <USBD_CDC_Init+0x1e8>)
 8006220:	7819      	ldrb	r1, [r3, #0]
 8006222:	2340      	movs	r3, #64	; 0x40
 8006224:	2202      	movs	r2, #2
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f002 fb01 	bl	800882e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800622c:	4b35      	ldr	r3, [pc, #212]	; (8006304 <USBD_CDC_Init+0x1e8>)
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	f003 020f 	and.w	r2, r3, #15
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	440b      	add	r3, r1
 8006240:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006244:	2201      	movs	r2, #1
 8006246:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006248:	4b2f      	ldr	r3, [pc, #188]	; (8006308 <USBD_CDC_Init+0x1ec>)
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	f003 020f 	and.w	r2, r3, #15
 8006250:	6879      	ldr	r1, [r7, #4]
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	3326      	adds	r3, #38	; 0x26
 800625e:	2210      	movs	r2, #16
 8006260:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006262:	4b29      	ldr	r3, [pc, #164]	; (8006308 <USBD_CDC_Init+0x1ec>)
 8006264:	7819      	ldrb	r1, [r3, #0]
 8006266:	2308      	movs	r3, #8
 8006268:	2203      	movs	r2, #3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f002 fadf 	bl	800882e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006270:	4b25      	ldr	r3, [pc, #148]	; (8006308 <USBD_CDC_Init+0x1ec>)
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	f003 020f 	and.w	r2, r3, #15
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	440b      	add	r3, r1
 8006284:	3324      	adds	r3, #36	; 0x24
 8006286:	2201      	movs	r2, #1
 8006288:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	33b0      	adds	r3, #176	; 0xb0
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80062c0:	2302      	movs	r3, #2
 80062c2:	e018      	b.n	80062f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	7c1b      	ldrb	r3, [r3, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062cc:	4b0d      	ldr	r3, [pc, #52]	; (8006304 <USBD_CDC_Init+0x1e8>)
 80062ce:	7819      	ldrb	r1, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f002 fb96 	bl	8008a0c <USBD_LL_PrepareReceive>
 80062e0:	e008      	b.n	80062f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062e2:	4b08      	ldr	r3, [pc, #32]	; (8006304 <USBD_CDC_Init+0x1e8>)
 80062e4:	7819      	ldrb	r1, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062ec:	2340      	movs	r3, #64	; 0x40
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f002 fb8c 	bl	8008a0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000093 	.word	0x20000093
 8006304:	20000094 	.word	0x20000094
 8006308:	20000095 	.word	0x20000095

0800630c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006318:	4b3a      	ldr	r3, [pc, #232]	; (8006404 <USBD_CDC_DeInit+0xf8>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	4619      	mov	r1, r3
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f002 faab 	bl	800887a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006324:	4b37      	ldr	r3, [pc, #220]	; (8006404 <USBD_CDC_DeInit+0xf8>)
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	f003 020f 	and.w	r2, r3, #15
 800632c:	6879      	ldr	r1, [r7, #4]
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	440b      	add	r3, r1
 8006338:	3324      	adds	r3, #36	; 0x24
 800633a:	2200      	movs	r2, #0
 800633c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800633e:	4b32      	ldr	r3, [pc, #200]	; (8006408 <USBD_CDC_DeInit+0xfc>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f002 fa98 	bl	800887a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800634a:	4b2f      	ldr	r3, [pc, #188]	; (8006408 <USBD_CDC_DeInit+0xfc>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	f003 020f 	and.w	r2, r3, #15
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006362:	2200      	movs	r2, #0
 8006364:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006366:	4b29      	ldr	r3, [pc, #164]	; (800640c <USBD_CDC_DeInit+0x100>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	4619      	mov	r1, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f002 fa84 	bl	800887a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006372:	4b26      	ldr	r3, [pc, #152]	; (800640c <USBD_CDC_DeInit+0x100>)
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	f003 020f 	and.w	r2, r3, #15
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	4613      	mov	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	4413      	add	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	3324      	adds	r3, #36	; 0x24
 8006388:	2200      	movs	r2, #0
 800638a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800638c:	4b1f      	ldr	r3, [pc, #124]	; (800640c <USBD_CDC_DeInit+0x100>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	f003 020f 	and.w	r2, r3, #15
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	4613      	mov	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	440b      	add	r3, r1
 80063a0:	3326      	adds	r3, #38	; 0x26
 80063a2:	2200      	movs	r2, #0
 80063a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	32b0      	adds	r2, #176	; 0xb0
 80063b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d01f      	beq.n	80063f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	33b0      	adds	r3, #176	; 0xb0
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	32b0      	adds	r2, #176	; 0xb0
 80063d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063da:	4618      	mov	r0, r3
 80063dc:	f002 fb58 	bl	8008a90 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	32b0      	adds	r2, #176	; 0xb0
 80063ea:	2100      	movs	r1, #0
 80063ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000093 	.word	0x20000093
 8006408:	20000094 	.word	0x20000094
 800640c:	20000095 	.word	0x20000095

08006410 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	32b0      	adds	r2, #176	; 0xb0
 8006424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006428:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800643c:	2303      	movs	r3, #3
 800643e:	e0bf      	b.n	80065c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006448:	2b00      	cmp	r3, #0
 800644a:	d050      	beq.n	80064ee <USBD_CDC_Setup+0xde>
 800644c:	2b20      	cmp	r3, #32
 800644e:	f040 80af 	bne.w	80065b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	88db      	ldrh	r3, [r3, #6]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d03a      	beq.n	80064d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	b25b      	sxtb	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	da1b      	bge.n	800649c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	33b0      	adds	r3, #176	; 0xb0
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800647a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	88d2      	ldrh	r2, [r2, #6]
 8006480:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	88db      	ldrh	r3, [r3, #6]
 8006486:	2b07      	cmp	r3, #7
 8006488:	bf28      	it	cs
 800648a:	2307      	movcs	r3, #7
 800648c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	89fa      	ldrh	r2, [r7, #14]
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 fd89 	bl	8007fac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800649a:	e090      	b.n	80065be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	785a      	ldrb	r2, [r3, #1]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	88db      	ldrh	r3, [r3, #6]
 80064aa:	2b3f      	cmp	r3, #63	; 0x3f
 80064ac:	d803      	bhi.n	80064b6 <USBD_CDC_Setup+0xa6>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	88db      	ldrh	r3, [r3, #6]
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	e000      	b.n	80064b8 <USBD_CDC_Setup+0xa8>
 80064b6:	2240      	movs	r2, #64	; 0x40
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80064be:	6939      	ldr	r1, [r7, #16]
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80064c6:	461a      	mov	r2, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 fd9b 	bl	8008004 <USBD_CtlPrepareRx>
      break;
 80064ce:	e076      	b.n	80065be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	33b0      	adds	r3, #176	; 0xb0
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	7850      	ldrb	r0, [r2, #1]
 80064e6:	2200      	movs	r2, #0
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	4798      	blx	r3
      break;
 80064ec:	e067      	b.n	80065be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	785b      	ldrb	r3, [r3, #1]
 80064f2:	2b0b      	cmp	r3, #11
 80064f4:	d851      	bhi.n	800659a <USBD_CDC_Setup+0x18a>
 80064f6:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <USBD_CDC_Setup+0xec>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	0800652d 	.word	0x0800652d
 8006500:	080065a9 	.word	0x080065a9
 8006504:	0800659b 	.word	0x0800659b
 8006508:	0800659b 	.word	0x0800659b
 800650c:	0800659b 	.word	0x0800659b
 8006510:	0800659b 	.word	0x0800659b
 8006514:	0800659b 	.word	0x0800659b
 8006518:	0800659b 	.word	0x0800659b
 800651c:	0800659b 	.word	0x0800659b
 8006520:	0800659b 	.word	0x0800659b
 8006524:	08006557 	.word	0x08006557
 8006528:	08006581 	.word	0x08006581
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b03      	cmp	r3, #3
 8006536:	d107      	bne.n	8006548 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006538:	f107 030a 	add.w	r3, r7, #10
 800653c:	2202      	movs	r2, #2
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 fd33 	bl	8007fac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006546:	e032      	b.n	80065ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 fcbd 	bl	8007eca <USBD_CtlError>
            ret = USBD_FAIL;
 8006550:	2303      	movs	r3, #3
 8006552:	75fb      	strb	r3, [r7, #23]
          break;
 8006554:	e02b      	b.n	80065ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b03      	cmp	r3, #3
 8006560:	d107      	bne.n	8006572 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006562:	f107 030d 	add.w	r3, r7, #13
 8006566:	2201      	movs	r2, #1
 8006568:	4619      	mov	r1, r3
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f001 fd1e 	bl	8007fac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006570:	e01d      	b.n	80065ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 fca8 	bl	8007eca <USBD_CtlError>
            ret = USBD_FAIL;
 800657a:	2303      	movs	r3, #3
 800657c:	75fb      	strb	r3, [r7, #23]
          break;
 800657e:	e016      	b.n	80065ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b03      	cmp	r3, #3
 800658a:	d00f      	beq.n	80065ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f001 fc9b 	bl	8007eca <USBD_CtlError>
            ret = USBD_FAIL;
 8006594:	2303      	movs	r3, #3
 8006596:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006598:	e008      	b.n	80065ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 fc94 	bl	8007eca <USBD_CtlError>
          ret = USBD_FAIL;
 80065a2:	2303      	movs	r3, #3
 80065a4:	75fb      	strb	r3, [r7, #23]
          break;
 80065a6:	e002      	b.n	80065ae <USBD_CDC_Setup+0x19e>
          break;
 80065a8:	bf00      	nop
 80065aa:	e008      	b.n	80065be <USBD_CDC_Setup+0x1ae>
          break;
 80065ac:	bf00      	nop
      }
      break;
 80065ae:	e006      	b.n	80065be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f001 fc89 	bl	8007eca <USBD_CtlError>
      ret = USBD_FAIL;
 80065b8:	2303      	movs	r3, #3
 80065ba:	75fb      	strb	r3, [r7, #23]
      break;
 80065bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80065be:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80065da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	32b0      	adds	r2, #176	; 0xb0
 80065e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e065      	b.n	80066be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	32b0      	adds	r2, #176	; 0xb0
 80065fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006600:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006602:	78fb      	ldrb	r3, [r7, #3]
 8006604:	f003 020f 	and.w	r2, r3, #15
 8006608:	6879      	ldr	r1, [r7, #4]
 800660a:	4613      	mov	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	440b      	add	r3, r1
 8006614:	3318      	adds	r3, #24
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d02f      	beq.n	800667c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	f003 020f 	and.w	r2, r3, #15
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	3318      	adds	r3, #24
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	78fb      	ldrb	r3, [r7, #3]
 8006634:	f003 010f 	and.w	r1, r3, #15
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	460b      	mov	r3, r1
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	440b      	add	r3, r1
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4403      	add	r3, r0
 8006644:	3348      	adds	r3, #72	; 0x48
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	fbb2 f1f3 	udiv	r1, r2, r3
 800664c:	fb01 f303 	mul.w	r3, r1, r3
 8006650:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006652:	2b00      	cmp	r3, #0
 8006654:	d112      	bne.n	800667c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006656:	78fb      	ldrb	r3, [r7, #3]
 8006658:	f003 020f 	and.w	r2, r3, #15
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	4613      	mov	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	440b      	add	r3, r1
 8006668:	3318      	adds	r3, #24
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800666e:	78f9      	ldrb	r1, [r7, #3]
 8006670:	2300      	movs	r3, #0
 8006672:	2200      	movs	r2, #0
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f002 f9a8 	bl	80089ca <USBD_LL_Transmit>
 800667a:	e01f      	b.n	80066bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2200      	movs	r2, #0
 8006680:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	33b0      	adds	r3, #176	; 0xb0
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d010      	beq.n	80066bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	33b0      	adds	r3, #176	; 0xb0
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80066b8:	78fa      	ldrb	r2, [r7, #3]
 80066ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	460b      	mov	r3, r1
 80066d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	32b0      	adds	r2, #176	; 0xb0
 80066dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	32b0      	adds	r2, #176	; 0xb0
 80066ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e01a      	b.n	800672e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80066f8:	78fb      	ldrb	r3, [r7, #3]
 80066fa:	4619      	mov	r1, r3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f002 f9a6 	bl	8008a4e <USBD_LL_GetRxDataSize>
 8006702:	4602      	mov	r2, r0
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	33b0      	adds	r3, #176	; 0xb0
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006728:	4611      	mov	r1, r2
 800672a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	32b0      	adds	r2, #176	; 0xb0
 8006748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006754:	2303      	movs	r3, #3
 8006756:	e025      	b.n	80067a4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	33b0      	adds	r3, #176	; 0xb0
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01a      	beq.n	80067a2 <USBD_CDC_EP0_RxReady+0x6c>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006772:	2bff      	cmp	r3, #255	; 0xff
 8006774:	d015      	beq.n	80067a2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	33b0      	adds	r3, #176	; 0xb0
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800678e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006796:	b292      	uxth	r2, r2
 8006798:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	22ff      	movs	r2, #255	; 0xff
 800679e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067b4:	2182      	movs	r1, #130	; 0x82
 80067b6:	4818      	ldr	r0, [pc, #96]	; (8006818 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067b8:	f000 fd4f 	bl	800725a <USBD_GetEpDesc>
 80067bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067be:	2101      	movs	r1, #1
 80067c0:	4815      	ldr	r0, [pc, #84]	; (8006818 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067c2:	f000 fd4a 	bl	800725a <USBD_GetEpDesc>
 80067c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067c8:	2181      	movs	r1, #129	; 0x81
 80067ca:	4813      	ldr	r0, [pc, #76]	; (8006818 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067cc:	f000 fd45 	bl	800725a <USBD_GetEpDesc>
 80067d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2210      	movs	r2, #16
 80067dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d006      	beq.n	80067f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ec:	711a      	strb	r2, [r3, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d006      	beq.n	8006806 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006800:	711a      	strb	r2, [r3, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2243      	movs	r2, #67	; 0x43
 800680a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800680c:	4b02      	ldr	r3, [pc, #8]	; (8006818 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800680e:	4618      	mov	r0, r3
 8006810:	3718      	adds	r7, #24
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20000050 	.word	0x20000050

0800681c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006824:	2182      	movs	r1, #130	; 0x82
 8006826:	4818      	ldr	r0, [pc, #96]	; (8006888 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006828:	f000 fd17 	bl	800725a <USBD_GetEpDesc>
 800682c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800682e:	2101      	movs	r1, #1
 8006830:	4815      	ldr	r0, [pc, #84]	; (8006888 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006832:	f000 fd12 	bl	800725a <USBD_GetEpDesc>
 8006836:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006838:	2181      	movs	r1, #129	; 0x81
 800683a:	4813      	ldr	r0, [pc, #76]	; (8006888 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800683c:	f000 fd0d 	bl	800725a <USBD_GetEpDesc>
 8006840:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2210      	movs	r2, #16
 800684c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d006      	beq.n	8006862 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	2200      	movs	r2, #0
 8006858:	711a      	strb	r2, [r3, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f042 0202 	orr.w	r2, r2, #2
 8006860:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d006      	beq.n	8006876 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	711a      	strb	r2, [r3, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f042 0202 	orr.w	r2, r2, #2
 8006874:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2243      	movs	r2, #67	; 0x43
 800687a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800687c:	4b02      	ldr	r3, [pc, #8]	; (8006888 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000050 	.word	0x20000050

0800688c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006894:	2182      	movs	r1, #130	; 0x82
 8006896:	4818      	ldr	r0, [pc, #96]	; (80068f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006898:	f000 fcdf 	bl	800725a <USBD_GetEpDesc>
 800689c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800689e:	2101      	movs	r1, #1
 80068a0:	4815      	ldr	r0, [pc, #84]	; (80068f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80068a2:	f000 fcda 	bl	800725a <USBD_GetEpDesc>
 80068a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80068a8:	2181      	movs	r1, #129	; 0x81
 80068aa:	4813      	ldr	r0, [pc, #76]	; (80068f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80068ac:	f000 fcd5 	bl	800725a <USBD_GetEpDesc>
 80068b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2210      	movs	r2, #16
 80068bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d006      	beq.n	80068d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068cc:	711a      	strb	r2, [r3, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d006      	beq.n	80068e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068e0:	711a      	strb	r2, [r3, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2243      	movs	r2, #67	; 0x43
 80068ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80068ec:	4b02      	ldr	r3, [pc, #8]	; (80068f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20000050 	.word	0x20000050

080068fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	220a      	movs	r2, #10
 8006908:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800690a:	4b03      	ldr	r3, [pc, #12]	; (8006918 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800690c:	4618      	mov	r0, r3
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	2000000c 	.word	0x2000000c

0800691c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800692c:	2303      	movs	r3, #3
 800692e:	e009      	b.n	8006944 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	33b0      	adds	r3, #176	; 0xb0
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	32b0      	adds	r2, #176	; 0xb0
 8006966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006972:	2303      	movs	r3, #3
 8006974:	e008      	b.n	8006988 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	32b0      	adds	r2, #176	; 0xb0
 80069a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e004      	b.n	80069c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
	...

080069d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	32b0      	adds	r2, #176	; 0xb0
 80069e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80069e8:	2301      	movs	r3, #1
 80069ea:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	32b0      	adds	r2, #176	; 0xb0
 80069f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e025      	b.n	8006a4e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d11f      	bne.n	8006a4c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006a14:	4b10      	ldr	r3, [pc, #64]	; (8006a58 <USBD_CDC_TransmitPacket+0x88>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	f003 020f 	and.w	r2, r3, #15
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4403      	add	r3, r0
 8006a2e:	3318      	adds	r3, #24
 8006a30:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006a32:	4b09      	ldr	r3, [pc, #36]	; (8006a58 <USBD_CDC_TransmitPacket+0x88>)
 8006a34:	7819      	ldrb	r1, [r3, #0]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 ffc1 	bl	80089ca <USBD_LL_Transmit>

    ret = USBD_OK;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000093 	.word	0x20000093

08006a5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	32b0      	adds	r2, #176	; 0xb0
 8006a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a72:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	32b0      	adds	r2, #176	; 0xb0
 8006a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e018      	b.n	8006abc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	7c1b      	ldrb	r3, [r3, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a92:	4b0c      	ldr	r3, [pc, #48]	; (8006ac4 <USBD_CDC_ReceivePacket+0x68>)
 8006a94:	7819      	ldrb	r1, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f001 ffb3 	bl	8008a0c <USBD_LL_PrepareReceive>
 8006aa6:	e008      	b.n	8006aba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006aa8:	4b06      	ldr	r3, [pc, #24]	; (8006ac4 <USBD_CDC_ReceivePacket+0x68>)
 8006aaa:	7819      	ldrb	r1, [r3, #0]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ab2:	2340      	movs	r3, #64	; 0x40
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 ffa9 	bl	8008a0c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	20000094 	.word	0x20000094

08006ac8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e01f      	b.n	8006b20 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	79fa      	ldrb	r2, [r7, #7]
 8006b12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f001 fe23 	bl	8008760 <USBD_LL_Init>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d101      	bne.n	8006b40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e025      	b.n	8006b8c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	32ae      	adds	r2, #174	; 0xae
 8006b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00f      	beq.n	8006b7c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	32ae      	adds	r2, #174	; 0xae
 8006b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6c:	f107 020e 	add.w	r2, r7, #14
 8006b70:	4610      	mov	r0, r2
 8006b72:	4798      	blx	r3
 8006b74:	4602      	mov	r2, r0
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 fe2b 	bl	80087f8 <USBD_LL_Start>
 8006ba2:	4603      	mov	r3, r0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bb4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	460b      	mov	r3, r1
 8006bcc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d009      	beq.n	8006bf0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	78fa      	ldrb	r2, [r7, #3]
 8006be6:	4611      	mov	r1, r2
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	4798      	blx	r3
 8006bec:	4603      	mov	r3, r0
 8006bee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	460b      	mov	r3, r1
 8006c04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	78fa      	ldrb	r2, [r7, #3]
 8006c14:	4611      	mov	r1, r2
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	4798      	blx	r3
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006c20:	2303      	movs	r3, #3
 8006c22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f001 f908 	bl	8007e56 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006c54:	461a      	mov	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c62:	f003 031f 	and.w	r3, r3, #31
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d01a      	beq.n	8006ca0 <USBD_LL_SetupStage+0x72>
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d822      	bhi.n	8006cb4 <USBD_LL_SetupStage+0x86>
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <USBD_LL_SetupStage+0x4a>
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d00a      	beq.n	8006c8c <USBD_LL_SetupStage+0x5e>
 8006c76:	e01d      	b.n	8006cb4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c7e:	4619      	mov	r1, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fb5f 	bl	8007344 <USBD_StdDevReq>
 8006c86:	4603      	mov	r3, r0
 8006c88:	73fb      	strb	r3, [r7, #15]
      break;
 8006c8a:	e020      	b.n	8006cce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fbc7 	bl	8007428 <USBD_StdItfReq>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8006c9e:	e016      	b.n	8006cce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fc29 	bl	8007500 <USBD_StdEPReq>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb2:	e00c      	b.n	8006cce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006cba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 fdf8 	bl	80088b8 <USBD_LL_StallEP>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	73fb      	strb	r3, [r7, #15]
      break;
 8006ccc:	bf00      	nop
  }

  return ret;
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	607a      	str	r2, [r7, #4]
 8006ce4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006cea:	7afb      	ldrb	r3, [r7, #11]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d16e      	bne.n	8006dce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006cf6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	f040 8098 	bne.w	8006e34 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d913      	bls.n	8006d38 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	689a      	ldr	r2, [r3, #8]
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	1ad2      	subs	r2, r2, r3
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	4293      	cmp	r3, r2
 8006d28:	bf28      	it	cs
 8006d2a:	4613      	movcs	r3, r2
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f001 f984 	bl	800803e <USBD_CtlContinueRx>
 8006d36:	e07d      	b.n	8006e34 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d3e:	f003 031f 	and.w	r3, r3, #31
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d014      	beq.n	8006d70 <USBD_LL_DataOutStage+0x98>
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d81d      	bhi.n	8006d86 <USBD_LL_DataOutStage+0xae>
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d002      	beq.n	8006d54 <USBD_LL_DataOutStage+0x7c>
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d003      	beq.n	8006d5a <USBD_LL_DataOutStage+0x82>
 8006d52:	e018      	b.n	8006d86 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	75bb      	strb	r3, [r7, #22]
            break;
 8006d58:	e018      	b.n	8006d8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	4619      	mov	r1, r3
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 fa5e 	bl	8007226 <USBD_CoreFindIF>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	75bb      	strb	r3, [r7, #22]
            break;
 8006d6e:	e00d      	b.n	8006d8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	4619      	mov	r1, r3
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f000 fa60 	bl	8007240 <USBD_CoreFindEP>
 8006d80:	4603      	mov	r3, r0
 8006d82:	75bb      	strb	r3, [r7, #22]
            break;
 8006d84:	e002      	b.n	8006d8c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	75bb      	strb	r3, [r7, #22]
            break;
 8006d8a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006d8c:	7dbb      	ldrb	r3, [r7, #22]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d119      	bne.n	8006dc6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d113      	bne.n	8006dc6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006d9e:	7dba      	ldrb	r2, [r7, #22]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	32ae      	adds	r2, #174	; 0xae
 8006da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00b      	beq.n	8006dc6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006dae:	7dba      	ldrb	r2, [r7, #22]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006db6:	7dba      	ldrb	r2, [r7, #22]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	32ae      	adds	r2, #174	; 0xae
 8006dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f001 f94a 	bl	8008060 <USBD_CtlSendStatus>
 8006dcc:	e032      	b.n	8006e34 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006dce:	7afb      	ldrb	r3, [r7, #11]
 8006dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f000 fa31 	bl	8007240 <USBD_CoreFindEP>
 8006dde:	4603      	mov	r3, r0
 8006de0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006de2:	7dbb      	ldrb	r3, [r7, #22]
 8006de4:	2bff      	cmp	r3, #255	; 0xff
 8006de6:	d025      	beq.n	8006e34 <USBD_LL_DataOutStage+0x15c>
 8006de8:	7dbb      	ldrb	r3, [r7, #22]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d122      	bne.n	8006e34 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d117      	bne.n	8006e2a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006dfa:	7dba      	ldrb	r2, [r7, #22]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	32ae      	adds	r2, #174	; 0xae
 8006e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00f      	beq.n	8006e2a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006e0a:	7dba      	ldrb	r2, [r7, #22]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006e12:	7dba      	ldrb	r2, [r7, #22]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	32ae      	adds	r2, #174	; 0xae
 8006e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	7afa      	ldrb	r2, [r7, #11]
 8006e20:	4611      	mov	r1, r2
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	4798      	blx	r3
 8006e26:	4603      	mov	r3, r0
 8006e28:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006e2a:	7dfb      	ldrb	r3, [r7, #23]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
 8006e32:	e000      	b.n	8006e36 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b086      	sub	sp, #24
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	460b      	mov	r3, r1
 8006e48:	607a      	str	r2, [r7, #4]
 8006e4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006e4c:	7afb      	ldrb	r3, [r7, #11]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d16f      	bne.n	8006f32 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3314      	adds	r3, #20
 8006e56:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d15a      	bne.n	8006f18 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d914      	bls.n	8006e98 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	689a      	ldr	r2, [r3, #8]
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	1ad2      	subs	r2, r2, r3
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	461a      	mov	r2, r3
 8006e82:	6879      	ldr	r1, [r7, #4]
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f001 f8ac 	bl	8007fe2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2100      	movs	r1, #0
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f001 fdbb 	bl	8008a0c <USBD_LL_PrepareReceive>
 8006e96:	e03f      	b.n	8006f18 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d11c      	bne.n	8006ede <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d316      	bcc.n	8006ede <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d20f      	bcs.n	8006ede <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f001 f88d 	bl	8007fe2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f001 fd98 	bl	8008a0c <USBD_LL_PrepareReceive>
 8006edc:	e01c      	b.n	8006f18 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d10f      	bne.n	8006f0a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d009      	beq.n	8006f0a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f0a:	2180      	movs	r1, #128	; 0x80
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f001 fcd3 	bl	80088b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f001 f8b7 	bl	8008086 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d03a      	beq.n	8006f98 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f7ff fe42 	bl	8006bac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f30:	e032      	b.n	8006f98 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006f32:	7afb      	ldrb	r3, [r7, #11]
 8006f34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 f97f 	bl	8007240 <USBD_CoreFindEP>
 8006f42:	4603      	mov	r3, r0
 8006f44:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
 8006f48:	2bff      	cmp	r3, #255	; 0xff
 8006f4a:	d025      	beq.n	8006f98 <USBD_LL_DataInStage+0x15a>
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d122      	bne.n	8006f98 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d11c      	bne.n	8006f98 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006f5e:	7dfa      	ldrb	r2, [r7, #23]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	32ae      	adds	r2, #174	; 0xae
 8006f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d014      	beq.n	8006f98 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006f6e:	7dfa      	ldrb	r2, [r7, #23]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006f76:	7dfa      	ldrb	r2, [r7, #23]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	32ae      	adds	r2, #174	; 0xae
 8006f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	7afa      	ldrb	r2, [r7, #11]
 8006f84:	4611      	mov	r1, r2
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	4798      	blx	r3
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006f8e:	7dbb      	ldrb	r3, [r7, #22]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006f94:	7dbb      	ldrb	r3, [r7, #22]
 8006f96:	e000      	b.n	8006f9a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d014      	beq.n	8007008 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00e      	beq.n	8007008 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	6852      	ldr	r2, [r2, #4]
 8006ff6:	b2d2      	uxtb	r2, r2
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	4798      	blx	r3
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007004:	2303      	movs	r3, #3
 8007006:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007008:	2340      	movs	r3, #64	; 0x40
 800700a:	2200      	movs	r2, #0
 800700c:	2100      	movs	r1, #0
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 fc0d 	bl	800882e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2240      	movs	r2, #64	; 0x40
 8007020:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007024:	2340      	movs	r3, #64	; 0x40
 8007026:	2200      	movs	r2, #0
 8007028:	2180      	movs	r1, #128	; 0x80
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 fbff 	bl	800882e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2240      	movs	r2, #64	; 0x40
 800703a:	621a      	str	r2, [r3, #32]

  return ret;
 800703c:	7bfb      	ldrb	r3, [r7, #15]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007046:	b480      	push	{r7}
 8007048:	b083      	sub	sp, #12
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	460b      	mov	r3, r1
 8007050:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	78fa      	ldrb	r2, [r7, #3]
 8007056:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	370c      	adds	r7, #12
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007066:	b480      	push	{r7}
 8007068:	b083      	sub	sp, #12
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007074:	b2da      	uxtb	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2204      	movs	r2, #4
 8007080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b04      	cmp	r3, #4
 80070a4:	d106      	bne.n	80070b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b082      	sub	sp, #8
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d110      	bne.n	80070f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00b      	beq.n	80070f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d005      	beq.n	80070f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b082      	sub	sp, #8
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	460b      	mov	r3, r1
 800710c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	32ae      	adds	r2, #174	; 0xae
 8007118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007120:	2303      	movs	r3, #3
 8007122:	e01c      	b.n	800715e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b03      	cmp	r3, #3
 800712e:	d115      	bne.n	800715c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	32ae      	adds	r2, #174	; 0xae
 800713a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00b      	beq.n	800715c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	32ae      	adds	r2, #174	; 0xae
 800714e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	78fa      	ldrb	r2, [r7, #3]
 8007156:	4611      	mov	r1, r2
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	460b      	mov	r3, r1
 8007170:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	32ae      	adds	r2, #174	; 0xae
 800717c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007184:	2303      	movs	r3, #3
 8007186:	e01c      	b.n	80071c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b03      	cmp	r3, #3
 8007192:	d115      	bne.n	80071c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	32ae      	adds	r2, #174	; 0xae
 800719e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00b      	beq.n	80071c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	32ae      	adds	r2, #174	; 0xae
 80071b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	78fa      	ldrb	r2, [r7, #3]
 80071ba:	4611      	mov	r1, r2
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b083      	sub	sp, #12
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00e      	beq.n	800721c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6852      	ldr	r2, [r2, #4]
 800720a:	b2d2      	uxtb	r2, r2
 800720c:	4611      	mov	r1, r2
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4798      	blx	r3
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d001      	beq.n	800721c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007218:	2303      	movs	r3, #3
 800721a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800721c:	7bfb      	ldrb	r3, [r7, #15]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	460b      	mov	r3, r1
 8007230:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007232:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007234:	4618      	mov	r0, r3
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800724c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800724e:	4618      	mov	r0, r3
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b086      	sub	sp, #24
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	460b      	mov	r3, r1
 8007264:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800726e:	2300      	movs	r3, #0
 8007270:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	885b      	ldrh	r3, [r3, #2]
 8007276:	b29a      	uxth	r2, r3
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	b29b      	uxth	r3, r3
 800727e:	429a      	cmp	r2, r3
 8007280:	d920      	bls.n	80072c4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	b29b      	uxth	r3, r3
 8007288:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800728a:	e013      	b.n	80072b4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800728c:	f107 030a 	add.w	r3, r7, #10
 8007290:	4619      	mov	r1, r3
 8007292:	6978      	ldr	r0, [r7, #20]
 8007294:	f000 f81b 	bl	80072ce <USBD_GetNextDesc>
 8007298:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	785b      	ldrb	r3, [r3, #1]
 800729e:	2b05      	cmp	r3, #5
 80072a0:	d108      	bne.n	80072b4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	789b      	ldrb	r3, [r3, #2]
 80072aa:	78fa      	ldrb	r2, [r7, #3]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d008      	beq.n	80072c2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80072b0:	2300      	movs	r3, #0
 80072b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	885b      	ldrh	r3, [r3, #2]
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	897b      	ldrh	r3, [r7, #10]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d8e5      	bhi.n	800728c <USBD_GetEpDesc+0x32>
 80072c0:	e000      	b.n	80072c4 <USBD_GetEpDesc+0x6a>
          break;
 80072c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80072c4:	693b      	ldr	r3, [r7, #16]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3718      	adds	r7, #24
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b085      	sub	sp, #20
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	881a      	ldrh	r2, [r3, #0]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	4413      	add	r3, r2
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	461a      	mov	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4413      	add	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80072fa:	68fb      	ldr	r3, [r7, #12]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	3301      	adds	r3, #1
 800731e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007326:	8a3b      	ldrh	r3, [r7, #16]
 8007328:	021b      	lsls	r3, r3, #8
 800732a:	b21a      	sxth	r2, r3
 800732c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007330:	4313      	orrs	r3, r2
 8007332:	b21b      	sxth	r3, r3
 8007334:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007336:	89fb      	ldrh	r3, [r7, #14]
}
 8007338:	4618      	mov	r0, r3
 800733a:	371c      	adds	r7, #28
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800735a:	2b40      	cmp	r3, #64	; 0x40
 800735c:	d005      	beq.n	800736a <USBD_StdDevReq+0x26>
 800735e:	2b40      	cmp	r3, #64	; 0x40
 8007360:	d857      	bhi.n	8007412 <USBD_StdDevReq+0xce>
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00f      	beq.n	8007386 <USBD_StdDevReq+0x42>
 8007366:	2b20      	cmp	r3, #32
 8007368:	d153      	bne.n	8007412 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	32ae      	adds	r2, #174	; 0xae
 8007374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	4798      	blx	r3
 8007380:	4603      	mov	r3, r0
 8007382:	73fb      	strb	r3, [r7, #15]
      break;
 8007384:	e04a      	b.n	800741c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	785b      	ldrb	r3, [r3, #1]
 800738a:	2b09      	cmp	r3, #9
 800738c:	d83b      	bhi.n	8007406 <USBD_StdDevReq+0xc2>
 800738e:	a201      	add	r2, pc, #4	; (adr r2, 8007394 <USBD_StdDevReq+0x50>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	080073e9 	.word	0x080073e9
 8007398:	080073fd 	.word	0x080073fd
 800739c:	08007407 	.word	0x08007407
 80073a0:	080073f3 	.word	0x080073f3
 80073a4:	08007407 	.word	0x08007407
 80073a8:	080073c7 	.word	0x080073c7
 80073ac:	080073bd 	.word	0x080073bd
 80073b0:	08007407 	.word	0x08007407
 80073b4:	080073df 	.word	0x080073df
 80073b8:	080073d1 	.word	0x080073d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fa3c 	bl	800783c <USBD_GetDescriptor>
          break;
 80073c4:	e024      	b.n	8007410 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fba1 	bl	8007b10 <USBD_SetAddress>
          break;
 80073ce:	e01f      	b.n	8007410 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fbe0 	bl	8007b98 <USBD_SetConfig>
 80073d8:	4603      	mov	r3, r0
 80073da:	73fb      	strb	r3, [r7, #15]
          break;
 80073dc:	e018      	b.n	8007410 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80073de:	6839      	ldr	r1, [r7, #0]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fc83 	bl	8007cec <USBD_GetConfig>
          break;
 80073e6:	e013      	b.n	8007410 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fcb4 	bl	8007d58 <USBD_GetStatus>
          break;
 80073f0:	e00e      	b.n	8007410 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073f2:	6839      	ldr	r1, [r7, #0]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fce3 	bl	8007dc0 <USBD_SetFeature>
          break;
 80073fa:	e009      	b.n	8007410 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fd07 	bl	8007e12 <USBD_ClrFeature>
          break;
 8007404:	e004      	b.n	8007410 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fd5e 	bl	8007eca <USBD_CtlError>
          break;
 800740e:	bf00      	nop
      }
      break;
 8007410:	e004      	b.n	800741c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007412:	6839      	ldr	r1, [r7, #0]
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fd58 	bl	8007eca <USBD_CtlError>
      break;
 800741a:	bf00      	nop
  }

  return ret;
 800741c:	7bfb      	ldrb	r3, [r7, #15]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop

08007428 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800743e:	2b40      	cmp	r3, #64	; 0x40
 8007440:	d005      	beq.n	800744e <USBD_StdItfReq+0x26>
 8007442:	2b40      	cmp	r3, #64	; 0x40
 8007444:	d852      	bhi.n	80074ec <USBD_StdItfReq+0xc4>
 8007446:	2b00      	cmp	r3, #0
 8007448:	d001      	beq.n	800744e <USBD_StdItfReq+0x26>
 800744a:	2b20      	cmp	r3, #32
 800744c:	d14e      	bne.n	80074ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007454:	b2db      	uxtb	r3, r3
 8007456:	3b01      	subs	r3, #1
 8007458:	2b02      	cmp	r3, #2
 800745a:	d840      	bhi.n	80074de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	889b      	ldrh	r3, [r3, #4]
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b01      	cmp	r3, #1
 8007464:	d836      	bhi.n	80074d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	889b      	ldrh	r3, [r3, #4]
 800746a:	b2db      	uxtb	r3, r3
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7ff fed9 	bl	8007226 <USBD_CoreFindIF>
 8007474:	4603      	mov	r3, r0
 8007476:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007478:	7bbb      	ldrb	r3, [r7, #14]
 800747a:	2bff      	cmp	r3, #255	; 0xff
 800747c:	d01d      	beq.n	80074ba <USBD_StdItfReq+0x92>
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d11a      	bne.n	80074ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007484:	7bba      	ldrb	r2, [r7, #14]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	32ae      	adds	r2, #174	; 0xae
 800748a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d00f      	beq.n	80074b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007494:	7bba      	ldrb	r2, [r7, #14]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800749c:	7bba      	ldrb	r2, [r7, #14]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	32ae      	adds	r2, #174	; 0xae
 80074a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	4798      	blx	r3
 80074ae:	4603      	mov	r3, r0
 80074b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80074b2:	e004      	b.n	80074be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80074b4:	2303      	movs	r3, #3
 80074b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80074b8:	e001      	b.n	80074be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80074ba:	2303      	movs	r3, #3
 80074bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	88db      	ldrh	r3, [r3, #6]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d110      	bne.n	80074e8 <USBD_StdItfReq+0xc0>
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10d      	bne.n	80074e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fdc7 	bl	8008060 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80074d2:	e009      	b.n	80074e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fcf7 	bl	8007eca <USBD_CtlError>
          break;
 80074dc:	e004      	b.n	80074e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fcf2 	bl	8007eca <USBD_CtlError>
          break;
 80074e6:	e000      	b.n	80074ea <USBD_StdItfReq+0xc2>
          break;
 80074e8:	bf00      	nop
      }
      break;
 80074ea:	e004      	b.n	80074f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fceb 	bl	8007eca <USBD_CtlError>
      break;
 80074f4:	bf00      	nop
  }

  return ret;
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	889b      	ldrh	r3, [r3, #4]
 8007512:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800751c:	2b40      	cmp	r3, #64	; 0x40
 800751e:	d007      	beq.n	8007530 <USBD_StdEPReq+0x30>
 8007520:	2b40      	cmp	r3, #64	; 0x40
 8007522:	f200 817f 	bhi.w	8007824 <USBD_StdEPReq+0x324>
 8007526:	2b00      	cmp	r3, #0
 8007528:	d02a      	beq.n	8007580 <USBD_StdEPReq+0x80>
 800752a:	2b20      	cmp	r3, #32
 800752c:	f040 817a 	bne.w	8007824 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007530:	7bbb      	ldrb	r3, [r7, #14]
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff fe83 	bl	8007240 <USBD_CoreFindEP>
 800753a:	4603      	mov	r3, r0
 800753c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800753e:	7b7b      	ldrb	r3, [r7, #13]
 8007540:	2bff      	cmp	r3, #255	; 0xff
 8007542:	f000 8174 	beq.w	800782e <USBD_StdEPReq+0x32e>
 8007546:	7b7b      	ldrb	r3, [r7, #13]
 8007548:	2b00      	cmp	r3, #0
 800754a:	f040 8170 	bne.w	800782e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800754e:	7b7a      	ldrb	r2, [r7, #13]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007556:	7b7a      	ldrb	r2, [r7, #13]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	32ae      	adds	r2, #174	; 0xae
 800755c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 8163 	beq.w	800782e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007568:	7b7a      	ldrb	r2, [r7, #13]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	32ae      	adds	r2, #174	; 0xae
 800756e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	4798      	blx	r3
 800757a:	4603      	mov	r3, r0
 800757c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800757e:	e156      	b.n	800782e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	785b      	ldrb	r3, [r3, #1]
 8007584:	2b03      	cmp	r3, #3
 8007586:	d008      	beq.n	800759a <USBD_StdEPReq+0x9a>
 8007588:	2b03      	cmp	r3, #3
 800758a:	f300 8145 	bgt.w	8007818 <USBD_StdEPReq+0x318>
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 809b 	beq.w	80076ca <USBD_StdEPReq+0x1ca>
 8007594:	2b01      	cmp	r3, #1
 8007596:	d03c      	beq.n	8007612 <USBD_StdEPReq+0x112>
 8007598:	e13e      	b.n	8007818 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d002      	beq.n	80075ac <USBD_StdEPReq+0xac>
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d016      	beq.n	80075d8 <USBD_StdEPReq+0xd8>
 80075aa:	e02c      	b.n	8007606 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00d      	beq.n	80075ce <USBD_StdEPReq+0xce>
 80075b2:	7bbb      	ldrb	r3, [r7, #14]
 80075b4:	2b80      	cmp	r3, #128	; 0x80
 80075b6:	d00a      	beq.n	80075ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075b8:	7bbb      	ldrb	r3, [r7, #14]
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f001 f97b 	bl	80088b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075c2:	2180      	movs	r1, #128	; 0x80
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f001 f977 	bl	80088b8 <USBD_LL_StallEP>
 80075ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075cc:	e020      	b.n	8007610 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fc7a 	bl	8007eca <USBD_CtlError>
              break;
 80075d6:	e01b      	b.n	8007610 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	885b      	ldrh	r3, [r3, #2]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10e      	bne.n	80075fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075e0:	7bbb      	ldrb	r3, [r7, #14]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00b      	beq.n	80075fe <USBD_StdEPReq+0xfe>
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	2b80      	cmp	r3, #128	; 0x80
 80075ea:	d008      	beq.n	80075fe <USBD_StdEPReq+0xfe>
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	88db      	ldrh	r3, [r3, #6]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d104      	bne.n	80075fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f001 f95d 	bl	80088b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 fd2e 	bl	8008060 <USBD_CtlSendStatus>

              break;
 8007604:	e004      	b.n	8007610 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fc5e 	bl	8007eca <USBD_CtlError>
              break;
 800760e:	bf00      	nop
          }
          break;
 8007610:	e107      	b.n	8007822 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b02      	cmp	r3, #2
 800761c:	d002      	beq.n	8007624 <USBD_StdEPReq+0x124>
 800761e:	2b03      	cmp	r3, #3
 8007620:	d016      	beq.n	8007650 <USBD_StdEPReq+0x150>
 8007622:	e04b      	b.n	80076bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007624:	7bbb      	ldrb	r3, [r7, #14]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00d      	beq.n	8007646 <USBD_StdEPReq+0x146>
 800762a:	7bbb      	ldrb	r3, [r7, #14]
 800762c:	2b80      	cmp	r3, #128	; 0x80
 800762e:	d00a      	beq.n	8007646 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f001 f93f 	bl	80088b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800763a:	2180      	movs	r1, #128	; 0x80
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 f93b 	bl	80088b8 <USBD_LL_StallEP>
 8007642:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007644:	e040      	b.n	80076c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fc3e 	bl	8007eca <USBD_CtlError>
              break;
 800764e:	e03b      	b.n	80076c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	885b      	ldrh	r3, [r3, #2]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d136      	bne.n	80076c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007658:	7bbb      	ldrb	r3, [r7, #14]
 800765a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800765e:	2b00      	cmp	r3, #0
 8007660:	d004      	beq.n	800766c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007662:	7bbb      	ldrb	r3, [r7, #14]
 8007664:	4619      	mov	r1, r3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f001 f945 	bl	80088f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fcf7 	bl	8008060 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff fde2 	bl	8007240 <USBD_CoreFindEP>
 800767c:	4603      	mov	r3, r0
 800767e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007680:	7b7b      	ldrb	r3, [r7, #13]
 8007682:	2bff      	cmp	r3, #255	; 0xff
 8007684:	d01f      	beq.n	80076c6 <USBD_StdEPReq+0x1c6>
 8007686:	7b7b      	ldrb	r3, [r7, #13]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d11c      	bne.n	80076c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800768c:	7b7a      	ldrb	r2, [r7, #13]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007694:	7b7a      	ldrb	r2, [r7, #13]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	32ae      	adds	r2, #174	; 0xae
 800769a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d010      	beq.n	80076c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80076a4:	7b7a      	ldrb	r2, [r7, #13]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	32ae      	adds	r2, #174	; 0xae
 80076aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
 80076b6:	4603      	mov	r3, r0
 80076b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80076ba:	e004      	b.n	80076c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fc03 	bl	8007eca <USBD_CtlError>
              break;
 80076c4:	e000      	b.n	80076c8 <USBD_StdEPReq+0x1c8>
              break;
 80076c6:	bf00      	nop
          }
          break;
 80076c8:	e0ab      	b.n	8007822 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d002      	beq.n	80076dc <USBD_StdEPReq+0x1dc>
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d032      	beq.n	8007740 <USBD_StdEPReq+0x240>
 80076da:	e097      	b.n	800780c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d007      	beq.n	80076f2 <USBD_StdEPReq+0x1f2>
 80076e2:	7bbb      	ldrb	r3, [r7, #14]
 80076e4:	2b80      	cmp	r3, #128	; 0x80
 80076e6:	d004      	beq.n	80076f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fbed 	bl	8007eca <USBD_CtlError>
                break;
 80076f0:	e091      	b.n	8007816 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	da0b      	bge.n	8007712 <USBD_StdEPReq+0x212>
 80076fa:	7bbb      	ldrb	r3, [r7, #14]
 80076fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007700:	4613      	mov	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	3310      	adds	r3, #16
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	4413      	add	r3, r2
 800770e:	3304      	adds	r3, #4
 8007710:	e00b      	b.n	800772a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007712:	7bbb      	ldrb	r3, [r7, #14]
 8007714:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007718:	4613      	mov	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4413      	add	r3, r2
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	4413      	add	r3, r2
 8007728:	3304      	adds	r3, #4
 800772a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2200      	movs	r2, #0
 8007730:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2202      	movs	r2, #2
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fc37 	bl	8007fac <USBD_CtlSendData>
              break;
 800773e:	e06a      	b.n	8007816 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007744:	2b00      	cmp	r3, #0
 8007746:	da11      	bge.n	800776c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007748:	7bbb      	ldrb	r3, [r7, #14]
 800774a:	f003 020f 	and.w	r2, r3, #15
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	4613      	mov	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	440b      	add	r3, r1
 800775a:	3324      	adds	r3, #36	; 0x24
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d117      	bne.n	8007792 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fbb0 	bl	8007eca <USBD_CtlError>
                  break;
 800776a:	e054      	b.n	8007816 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800776c:	7bbb      	ldrb	r3, [r7, #14]
 800776e:	f003 020f 	and.w	r2, r3, #15
 8007772:	6879      	ldr	r1, [r7, #4]
 8007774:	4613      	mov	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	440b      	add	r3, r1
 800777e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d104      	bne.n	8007792 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fb9d 	bl	8007eca <USBD_CtlError>
                  break;
 8007790:	e041      	b.n	8007816 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007792:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007796:	2b00      	cmp	r3, #0
 8007798:	da0b      	bge.n	80077b2 <USBD_StdEPReq+0x2b2>
 800779a:	7bbb      	ldrb	r3, [r7, #14]
 800779c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077a0:	4613      	mov	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	3310      	adds	r3, #16
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	4413      	add	r3, r2
 80077ae:	3304      	adds	r3, #4
 80077b0:	e00b      	b.n	80077ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077b8:	4613      	mov	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	4413      	add	r3, r2
 80077c8:	3304      	adds	r3, #4
 80077ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <USBD_StdEPReq+0x2d8>
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	2b80      	cmp	r3, #128	; 0x80
 80077d6:	d103      	bne.n	80077e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2200      	movs	r2, #0
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	e00e      	b.n	80077fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 f8a5 	bl	8008934 <USBD_LL_IsStallEP>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d003      	beq.n	80077f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2201      	movs	r2, #1
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	e002      	b.n	80077fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2200      	movs	r2, #0
 80077fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	2202      	movs	r2, #2
 8007802:	4619      	mov	r1, r3
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fbd1 	bl	8007fac <USBD_CtlSendData>
              break;
 800780a:	e004      	b.n	8007816 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fb5b 	bl	8007eca <USBD_CtlError>
              break;
 8007814:	bf00      	nop
          }
          break;
 8007816:	e004      	b.n	8007822 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fb55 	bl	8007eca <USBD_CtlError>
          break;
 8007820:	bf00      	nop
      }
      break;
 8007822:	e005      	b.n	8007830 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fb4f 	bl	8007eca <USBD_CtlError>
      break;
 800782c:	e000      	b.n	8007830 <USBD_StdEPReq+0x330>
      break;
 800782e:	bf00      	nop
  }

  return ret;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800784a:	2300      	movs	r3, #0
 800784c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	885b      	ldrh	r3, [r3, #2]
 8007856:	0a1b      	lsrs	r3, r3, #8
 8007858:	b29b      	uxth	r3, r3
 800785a:	3b01      	subs	r3, #1
 800785c:	2b06      	cmp	r3, #6
 800785e:	f200 8128 	bhi.w	8007ab2 <USBD_GetDescriptor+0x276>
 8007862:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <USBD_GetDescriptor+0x2c>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	08007885 	.word	0x08007885
 800786c:	0800789d 	.word	0x0800789d
 8007870:	080078dd 	.word	0x080078dd
 8007874:	08007ab3 	.word	0x08007ab3
 8007878:	08007ab3 	.word	0x08007ab3
 800787c:	08007a53 	.word	0x08007a53
 8007880:	08007a7f 	.word	0x08007a7f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	7c12      	ldrb	r2, [r2, #16]
 8007890:	f107 0108 	add.w	r1, r7, #8
 8007894:	4610      	mov	r0, r2
 8007896:	4798      	blx	r3
 8007898:	60f8      	str	r0, [r7, #12]
      break;
 800789a:	e112      	b.n	8007ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7c1b      	ldrb	r3, [r3, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10d      	bne.n	80078c0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ac:	f107 0208 	add.w	r2, r7, #8
 80078b0:	4610      	mov	r0, r2
 80078b2:	4798      	blx	r3
 80078b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3301      	adds	r3, #1
 80078ba:	2202      	movs	r2, #2
 80078bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80078be:	e100      	b.n	8007ac2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c8:	f107 0208 	add.w	r2, r7, #8
 80078cc:	4610      	mov	r0, r2
 80078ce:	4798      	blx	r3
 80078d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3301      	adds	r3, #1
 80078d6:	2202      	movs	r2, #2
 80078d8:	701a      	strb	r2, [r3, #0]
      break;
 80078da:	e0f2      	b.n	8007ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	885b      	ldrh	r3, [r3, #2]
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b05      	cmp	r3, #5
 80078e4:	f200 80ac 	bhi.w	8007a40 <USBD_GetDescriptor+0x204>
 80078e8:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <USBD_GetDescriptor+0xb4>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	08007909 	.word	0x08007909
 80078f4:	0800793d 	.word	0x0800793d
 80078f8:	08007971 	.word	0x08007971
 80078fc:	080079a5 	.word	0x080079a5
 8007900:	080079d9 	.word	0x080079d9
 8007904:	08007a0d 	.word	0x08007a0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	7c12      	ldrb	r2, [r2, #16]
 8007920:	f107 0108 	add.w	r1, r7, #8
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
 8007928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800792a:	e091      	b.n	8007a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 facb 	bl	8007eca <USBD_CtlError>
            err++;
 8007934:	7afb      	ldrb	r3, [r7, #11]
 8007936:	3301      	adds	r3, #1
 8007938:	72fb      	strb	r3, [r7, #11]
          break;
 800793a:	e089      	b.n	8007a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00b      	beq.n	8007960 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	7c12      	ldrb	r2, [r2, #16]
 8007954:	f107 0108 	add.w	r1, r7, #8
 8007958:	4610      	mov	r0, r2
 800795a:	4798      	blx	r3
 800795c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800795e:	e077      	b.n	8007a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 fab1 	bl	8007eca <USBD_CtlError>
            err++;
 8007968:	7afb      	ldrb	r3, [r7, #11]
 800796a:	3301      	adds	r3, #1
 800796c:	72fb      	strb	r3, [r7, #11]
          break;
 800796e:	e06f      	b.n	8007a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00b      	beq.n	8007994 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	7c12      	ldrb	r2, [r2, #16]
 8007988:	f107 0108 	add.w	r1, r7, #8
 800798c:	4610      	mov	r0, r2
 800798e:	4798      	blx	r3
 8007990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007992:	e05d      	b.n	8007a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fa97 	bl	8007eca <USBD_CtlError>
            err++;
 800799c:	7afb      	ldrb	r3, [r7, #11]
 800799e:	3301      	adds	r3, #1
 80079a0:	72fb      	strb	r3, [r7, #11]
          break;
 80079a2:	e055      	b.n	8007a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	7c12      	ldrb	r2, [r2, #16]
 80079bc:	f107 0108 	add.w	r1, r7, #8
 80079c0:	4610      	mov	r0, r2
 80079c2:	4798      	blx	r3
 80079c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079c6:	e043      	b.n	8007a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa7d 	bl	8007eca <USBD_CtlError>
            err++;
 80079d0:	7afb      	ldrb	r3, [r7, #11]
 80079d2:	3301      	adds	r3, #1
 80079d4:	72fb      	strb	r3, [r7, #11]
          break;
 80079d6:	e03b      	b.n	8007a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	7c12      	ldrb	r2, [r2, #16]
 80079f0:	f107 0108 	add.w	r1, r7, #8
 80079f4:	4610      	mov	r0, r2
 80079f6:	4798      	blx	r3
 80079f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079fa:	e029      	b.n	8007a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fa63 	bl	8007eca <USBD_CtlError>
            err++;
 8007a04:	7afb      	ldrb	r3, [r7, #11]
 8007a06:	3301      	adds	r3, #1
 8007a08:	72fb      	strb	r3, [r7, #11]
          break;
 8007a0a:	e021      	b.n	8007a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	7c12      	ldrb	r2, [r2, #16]
 8007a24:	f107 0108 	add.w	r1, r7, #8
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4798      	blx	r3
 8007a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a2e:	e00f      	b.n	8007a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fa49 	bl	8007eca <USBD_CtlError>
            err++;
 8007a38:	7afb      	ldrb	r3, [r7, #11]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a3e:	e007      	b.n	8007a50 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fa41 	bl	8007eca <USBD_CtlError>
          err++;
 8007a48:	7afb      	ldrb	r3, [r7, #11]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007a4e:	bf00      	nop
      }
      break;
 8007a50:	e037      	b.n	8007ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	7c1b      	ldrb	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d109      	bne.n	8007a6e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a62:	f107 0208 	add.w	r2, r7, #8
 8007a66:	4610      	mov	r0, r2
 8007a68:	4798      	blx	r3
 8007a6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a6c:	e029      	b.n	8007ac2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fa2a 	bl	8007eca <USBD_CtlError>
        err++;
 8007a76:	7afb      	ldrb	r3, [r7, #11]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	72fb      	strb	r3, [r7, #11]
      break;
 8007a7c:	e021      	b.n	8007ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	7c1b      	ldrb	r3, [r3, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10d      	bne.n	8007aa2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8e:	f107 0208 	add.w	r2, r7, #8
 8007a92:	4610      	mov	r0, r2
 8007a94:	4798      	blx	r3
 8007a96:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	2207      	movs	r2, #7
 8007a9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007aa0:	e00f      	b.n	8007ac2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fa10 	bl	8007eca <USBD_CtlError>
        err++;
 8007aaa:	7afb      	ldrb	r3, [r7, #11]
 8007aac:	3301      	adds	r3, #1
 8007aae:	72fb      	strb	r3, [r7, #11]
      break;
 8007ab0:	e007      	b.n	8007ac2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fa08 	bl	8007eca <USBD_CtlError>
      err++;
 8007aba:	7afb      	ldrb	r3, [r7, #11]
 8007abc:	3301      	adds	r3, #1
 8007abe:	72fb      	strb	r3, [r7, #11]
      break;
 8007ac0:	bf00      	nop
  }

  if (err != 0U)
 8007ac2:	7afb      	ldrb	r3, [r7, #11]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d11e      	bne.n	8007b06 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	88db      	ldrh	r3, [r3, #6]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d016      	beq.n	8007afe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007ad0:	893b      	ldrh	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00e      	beq.n	8007af4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	88da      	ldrh	r2, [r3, #6]
 8007ada:	893b      	ldrh	r3, [r7, #8]
 8007adc:	4293      	cmp	r3, r2
 8007ade:	bf28      	it	cs
 8007ae0:	4613      	movcs	r3, r2
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ae6:	893b      	ldrh	r3, [r7, #8]
 8007ae8:	461a      	mov	r2, r3
 8007aea:	68f9      	ldr	r1, [r7, #12]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fa5d 	bl	8007fac <USBD_CtlSendData>
 8007af2:	e009      	b.n	8007b08 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f9e7 	bl	8007eca <USBD_CtlError>
 8007afc:	e004      	b.n	8007b08 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 faae 	bl	8008060 <USBD_CtlSendStatus>
 8007b04:	e000      	b.n	8007b08 <USBD_GetDescriptor+0x2cc>
    return;
 8007b06:	bf00      	nop
  }
}
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop

08007b10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	889b      	ldrh	r3, [r3, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d131      	bne.n	8007b86 <USBD_SetAddress+0x76>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	88db      	ldrh	r3, [r3, #6]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d12d      	bne.n	8007b86 <USBD_SetAddress+0x76>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	885b      	ldrh	r3, [r3, #2]
 8007b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8007b30:	d829      	bhi.n	8007b86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	885b      	ldrh	r3, [r3, #2]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d104      	bne.n	8007b54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f9bc 	bl	8007eca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b52:	e01d      	b.n	8007b90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	7bfa      	ldrb	r2, [r7, #15]
 8007b58:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 ff13 	bl	800898c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fa7a 	bl	8008060 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d004      	beq.n	8007b7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2202      	movs	r2, #2
 8007b76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b7a:	e009      	b.n	8007b90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b84:	e004      	b.n	8007b90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f99e 	bl	8007eca <USBD_CtlError>
  }
}
 8007b8e:	bf00      	nop
 8007b90:	bf00      	nop
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	885b      	ldrh	r3, [r3, #2]
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	4b4e      	ldr	r3, [pc, #312]	; (8007ce8 <USBD_SetConfig+0x150>)
 8007bae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007bb0:	4b4d      	ldr	r3, [pc, #308]	; (8007ce8 <USBD_SetConfig+0x150>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d905      	bls.n	8007bc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f985 	bl	8007eca <USBD_CtlError>
    return USBD_FAIL;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e08c      	b.n	8007cde <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d002      	beq.n	8007bd6 <USBD_SetConfig+0x3e>
 8007bd0:	2b03      	cmp	r3, #3
 8007bd2:	d029      	beq.n	8007c28 <USBD_SetConfig+0x90>
 8007bd4:	e075      	b.n	8007cc2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007bd6:	4b44      	ldr	r3, [pc, #272]	; (8007ce8 <USBD_SetConfig+0x150>)
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d020      	beq.n	8007c20 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007bde:	4b42      	ldr	r3, [pc, #264]	; (8007ce8 <USBD_SetConfig+0x150>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007be8:	4b3f      	ldr	r3, [pc, #252]	; (8007ce8 <USBD_SetConfig+0x150>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	4619      	mov	r1, r3
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7fe ffe7 	bl	8006bc2 <USBD_SetClassConfig>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d008      	beq.n	8007c10 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 f962 	bl	8007eca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2202      	movs	r2, #2
 8007c0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c0e:	e065      	b.n	8007cdc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fa25 	bl	8008060 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2203      	movs	r2, #3
 8007c1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c1e:	e05d      	b.n	8007cdc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fa1d 	bl	8008060 <USBD_CtlSendStatus>
      break;
 8007c26:	e059      	b.n	8007cdc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007c28:	4b2f      	ldr	r3, [pc, #188]	; (8007ce8 <USBD_SetConfig+0x150>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d112      	bne.n	8007c56 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007c38:	4b2b      	ldr	r3, [pc, #172]	; (8007ce8 <USBD_SetConfig+0x150>)
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c42:	4b29      	ldr	r3, [pc, #164]	; (8007ce8 <USBD_SetConfig+0x150>)
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7fe ffd6 	bl	8006bfa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fa06 	bl	8008060 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c54:	e042      	b.n	8007cdc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007c56:	4b24      	ldr	r3, [pc, #144]	; (8007ce8 <USBD_SetConfig+0x150>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d02a      	beq.n	8007cba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7fe ffc4 	bl	8006bfa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c72:	4b1d      	ldr	r3, [pc, #116]	; (8007ce8 <USBD_SetConfig+0x150>)
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	461a      	mov	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c7c:	4b1a      	ldr	r3, [pc, #104]	; (8007ce8 <USBD_SetConfig+0x150>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7fe ff9d 	bl	8006bc2 <USBD_SetClassConfig>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00f      	beq.n	8007cb2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f918 	bl	8007eca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f7fe ffa9 	bl	8006bfa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2202      	movs	r2, #2
 8007cac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007cb0:	e014      	b.n	8007cdc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f9d4 	bl	8008060 <USBD_CtlSendStatus>
      break;
 8007cb8:	e010      	b.n	8007cdc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f9d0 	bl	8008060 <USBD_CtlSendStatus>
      break;
 8007cc0:	e00c      	b.n	8007cdc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f900 	bl	8007eca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007cca:	4b07      	ldr	r3, [pc, #28]	; (8007ce8 <USBD_SetConfig+0x150>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7fe ff92 	bl	8006bfa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	73fb      	strb	r3, [r7, #15]
      break;
 8007cda:	bf00      	nop
  }

  return ret;
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	20000378 	.word	0x20000378

08007cec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	88db      	ldrh	r3, [r3, #6]
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d004      	beq.n	8007d08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f8e2 	bl	8007eca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d06:	e023      	b.n	8007d50 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	dc02      	bgt.n	8007d1a <USBD_GetConfig+0x2e>
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	dc03      	bgt.n	8007d20 <USBD_GetConfig+0x34>
 8007d18:	e015      	b.n	8007d46 <USBD_GetConfig+0x5a>
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d00b      	beq.n	8007d36 <USBD_GetConfig+0x4a>
 8007d1e:	e012      	b.n	8007d46 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	3308      	adds	r3, #8
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f93c 	bl	8007fac <USBD_CtlSendData>
        break;
 8007d34:	e00c      	b.n	8007d50 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	3304      	adds	r3, #4
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f934 	bl	8007fac <USBD_CtlSendData>
        break;
 8007d44:	e004      	b.n	8007d50 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f8be 	bl	8007eca <USBD_CtlError>
        break;
 8007d4e:	bf00      	nop
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d81e      	bhi.n	8007dae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	88db      	ldrh	r3, [r3, #6]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d004      	beq.n	8007d82 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f8a5 	bl	8007eca <USBD_CtlError>
        break;
 8007d80:	e01a      	b.n	8007db8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d005      	beq.n	8007d9e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f043 0202 	orr.w	r2, r3, #2
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	330c      	adds	r3, #12
 8007da2:	2202      	movs	r2, #2
 8007da4:	4619      	mov	r1, r3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f900 	bl	8007fac <USBD_CtlSendData>
      break;
 8007dac:	e004      	b.n	8007db8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f88a 	bl	8007eca <USBD_CtlError>
      break;
 8007db6:	bf00      	nop
  }
}
 8007db8:	bf00      	nop
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	885b      	ldrh	r3, [r3, #2]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d107      	bne.n	8007de2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f940 	bl	8008060 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007de0:	e013      	b.n	8007e0a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	885b      	ldrh	r3, [r3, #2]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d10b      	bne.n	8007e02 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	889b      	ldrh	r3, [r3, #4]
 8007dee:	0a1b      	lsrs	r3, r3, #8
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 f930 	bl	8008060 <USBD_CtlSendStatus>
}
 8007e00:	e003      	b.n	8007e0a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f860 	bl	8007eca <USBD_CtlError>
}
 8007e0a:	bf00      	nop
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b082      	sub	sp, #8
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	3b01      	subs	r3, #1
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d80b      	bhi.n	8007e42 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	885b      	ldrh	r3, [r3, #2]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d10c      	bne.n	8007e4c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f910 	bl	8008060 <USBD_CtlSendStatus>
      }
      break;
 8007e40:	e004      	b.n	8007e4c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f840 	bl	8007eca <USBD_CtlError>
      break;
 8007e4a:	e000      	b.n	8007e4e <USBD_ClrFeature+0x3c>
      break;
 8007e4c:	bf00      	nop
  }
}
 8007e4e:	bf00      	nop
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	781a      	ldrb	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	781a      	ldrb	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f7ff fa41 	bl	8007308 <SWAPBYTE>
 8007e86:	4603      	mov	r3, r0
 8007e88:	461a      	mov	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	3301      	adds	r3, #1
 8007e92:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	3301      	adds	r3, #1
 8007e98:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f7ff fa34 	bl	8007308 <SWAPBYTE>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f7ff fa27 	bl	8007308 <SWAPBYTE>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	80da      	strh	r2, [r3, #6]
}
 8007ec2:	bf00      	nop
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b082      	sub	sp, #8
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ed4:	2180      	movs	r1, #128	; 0x80
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fcee 	bl	80088b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007edc:	2100      	movs	r1, #0
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fcea 	bl	80088b8 <USBD_LL_StallEP>
}
 8007ee4:	bf00      	nop
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d036      	beq.n	8007f70 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007f06:	6938      	ldr	r0, [r7, #16]
 8007f08:	f000 f836 	bl	8007f78 <USBD_GetLen>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	3301      	adds	r3, #1
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	4413      	add	r3, r2
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	7812      	ldrb	r2, [r2, #0]
 8007f24:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	4413      	add	r3, r2
 8007f32:	2203      	movs	r2, #3
 8007f34:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007f3c:	e013      	b.n	8007f66 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	4413      	add	r3, r2
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	7812      	ldrb	r2, [r2, #0]
 8007f48:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	613b      	str	r3, [r7, #16]
    idx++;
 8007f50:	7dfb      	ldrb	r3, [r7, #23]
 8007f52:	3301      	adds	r3, #1
 8007f54:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f56:	7dfb      	ldrb	r3, [r7, #23]
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007f60:	7dfb      	ldrb	r3, [r7, #23]
 8007f62:	3301      	adds	r3, #1
 8007f64:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e7      	bne.n	8007f3e <USBD_GetString+0x52>
 8007f6e:	e000      	b.n	8007f72 <USBD_GetString+0x86>
    return;
 8007f70:	bf00      	nop
  }
}
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f88:	e005      	b.n	8007f96 <USBD_GetLen+0x1e>
  {
    len++;
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	3301      	adds	r3, #1
 8007f94:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1f5      	bne.n	8007f8a <USBD_GetLen+0x12>
  }

  return len;
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f000 fcf9 	bl	80089ca <USBD_LL_Transmit>

  return USBD_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 fce8 	bl	80089ca <USBD_LL_Transmit>

  return USBD_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2203      	movs	r2, #3
 8008014:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	2100      	movs	r1, #0
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f000 fcec 	bl	8008a0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b084      	sub	sp, #16
 8008042:	af00      	add	r7, sp, #0
 8008044:	60f8      	str	r0, [r7, #12]
 8008046:	60b9      	str	r1, [r7, #8]
 8008048:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	2100      	movs	r1, #0
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 fcdb 	bl	8008a0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2204      	movs	r2, #4
 800806c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008070:	2300      	movs	r3, #0
 8008072:	2200      	movs	r2, #0
 8008074:	2100      	movs	r1, #0
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fca7 	bl	80089ca <USBD_LL_Transmit>

  return USBD_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b082      	sub	sp, #8
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2205      	movs	r2, #5
 8008092:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008096:	2300      	movs	r3, #0
 8008098:	2200      	movs	r2, #0
 800809a:	2100      	movs	r1, #0
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fcb5 	bl	8008a0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80080b0:	2200      	movs	r2, #0
 80080b2:	4912      	ldr	r1, [pc, #72]	; (80080fc <MX_USB_DEVICE_Init+0x50>)
 80080b4:	4812      	ldr	r0, [pc, #72]	; (8008100 <MX_USB_DEVICE_Init+0x54>)
 80080b6:	f7fe fd07 	bl	8006ac8 <USBD_Init>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80080c0:	f7f8 fde0 	bl	8000c84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80080c4:	490f      	ldr	r1, [pc, #60]	; (8008104 <MX_USB_DEVICE_Init+0x58>)
 80080c6:	480e      	ldr	r0, [pc, #56]	; (8008100 <MX_USB_DEVICE_Init+0x54>)
 80080c8:	f7fe fd2e 	bl	8006b28 <USBD_RegisterClass>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80080d2:	f7f8 fdd7 	bl	8000c84 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80080d6:	490c      	ldr	r1, [pc, #48]	; (8008108 <MX_USB_DEVICE_Init+0x5c>)
 80080d8:	4809      	ldr	r0, [pc, #36]	; (8008100 <MX_USB_DEVICE_Init+0x54>)
 80080da:	f7fe fc1f 	bl	800691c <USBD_CDC_RegisterInterface>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d001      	beq.n	80080e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80080e4:	f7f8 fdce 	bl	8000c84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80080e8:	4805      	ldr	r0, [pc, #20]	; (8008100 <MX_USB_DEVICE_Init+0x54>)
 80080ea:	f7fe fd53 	bl	8006b94 <USBD_Start>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80080f4:	f7f8 fdc6 	bl	8000c84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80080f8:	bf00      	nop
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	200000ac 	.word	0x200000ac
 8008100:	2000037c 	.word	0x2000037c
 8008104:	20000018 	.word	0x20000018
 8008108:	20000098 	.word	0x20000098

0800810c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008110:	2200      	movs	r2, #0
 8008112:	4905      	ldr	r1, [pc, #20]	; (8008128 <CDC_Init_FS+0x1c>)
 8008114:	4805      	ldr	r0, [pc, #20]	; (800812c <CDC_Init_FS+0x20>)
 8008116:	f7fe fc1b 	bl	8006950 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800811a:	4905      	ldr	r1, [pc, #20]	; (8008130 <CDC_Init_FS+0x24>)
 800811c:	4803      	ldr	r0, [pc, #12]	; (800812c <CDC_Init_FS+0x20>)
 800811e:	f7fe fc39 	bl	8006994 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008122:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008124:	4618      	mov	r0, r3
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20000e58 	.word	0x20000e58
 800812c:	2000037c 	.word	0x2000037c
 8008130:	20000658 	.word	0x20000658

08008134 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008134:	b480      	push	{r7}
 8008136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008138:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800813a:	4618      	mov	r0, r3
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	4603      	mov	r3, r0
 800814c:	6039      	str	r1, [r7, #0]
 800814e:	71fb      	strb	r3, [r7, #7]
 8008150:	4613      	mov	r3, r2
 8008152:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008154:	79fb      	ldrb	r3, [r7, #7]
 8008156:	2b23      	cmp	r3, #35	; 0x23
 8008158:	d84a      	bhi.n	80081f0 <CDC_Control_FS+0xac>
 800815a:	a201      	add	r2, pc, #4	; (adr r2, 8008160 <CDC_Control_FS+0x1c>)
 800815c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008160:	080081f1 	.word	0x080081f1
 8008164:	080081f1 	.word	0x080081f1
 8008168:	080081f1 	.word	0x080081f1
 800816c:	080081f1 	.word	0x080081f1
 8008170:	080081f1 	.word	0x080081f1
 8008174:	080081f1 	.word	0x080081f1
 8008178:	080081f1 	.word	0x080081f1
 800817c:	080081f1 	.word	0x080081f1
 8008180:	080081f1 	.word	0x080081f1
 8008184:	080081f1 	.word	0x080081f1
 8008188:	080081f1 	.word	0x080081f1
 800818c:	080081f1 	.word	0x080081f1
 8008190:	080081f1 	.word	0x080081f1
 8008194:	080081f1 	.word	0x080081f1
 8008198:	080081f1 	.word	0x080081f1
 800819c:	080081f1 	.word	0x080081f1
 80081a0:	080081f1 	.word	0x080081f1
 80081a4:	080081f1 	.word	0x080081f1
 80081a8:	080081f1 	.word	0x080081f1
 80081ac:	080081f1 	.word	0x080081f1
 80081b0:	080081f1 	.word	0x080081f1
 80081b4:	080081f1 	.word	0x080081f1
 80081b8:	080081f1 	.word	0x080081f1
 80081bc:	080081f1 	.word	0x080081f1
 80081c0:	080081f1 	.word	0x080081f1
 80081c4:	080081f1 	.word	0x080081f1
 80081c8:	080081f1 	.word	0x080081f1
 80081cc:	080081f1 	.word	0x080081f1
 80081d0:	080081f1 	.word	0x080081f1
 80081d4:	080081f1 	.word	0x080081f1
 80081d8:	080081f1 	.word	0x080081f1
 80081dc:	080081f1 	.word	0x080081f1
 80081e0:	080081f1 	.word	0x080081f1
 80081e4:	080081f1 	.word	0x080081f1
 80081e8:	080081f1 	.word	0x080081f1
 80081ec:	080081f1 	.word	0x080081f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80081f0:	bf00      	nop
  }

  return (USBD_OK);
 80081f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	4805      	ldr	r0, [pc, #20]	; (8008224 <CDC_Receive_FS+0x24>)
 800820e:	f7fe fbc1 	bl	8006994 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008212:	4804      	ldr	r0, [pc, #16]	; (8008224 <CDC_Receive_FS+0x24>)
 8008214:	f7fe fc22 	bl	8006a5c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008218:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800821a:	4618      	mov	r0, r3
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	2000037c 	.word	0x2000037c

08008228 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008238:	4b0d      	ldr	r3, [pc, #52]	; (8008270 <CDC_Transmit_FS+0x48>)
 800823a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800823e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800824a:	2301      	movs	r3, #1
 800824c:	e00b      	b.n	8008266 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800824e:	887b      	ldrh	r3, [r7, #2]
 8008250:	461a      	mov	r2, r3
 8008252:	6879      	ldr	r1, [r7, #4]
 8008254:	4806      	ldr	r0, [pc, #24]	; (8008270 <CDC_Transmit_FS+0x48>)
 8008256:	f7fe fb7b 	bl	8006950 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800825a:	4805      	ldr	r0, [pc, #20]	; (8008270 <CDC_Transmit_FS+0x48>)
 800825c:	f7fe fbb8 	bl	80069d0 <USBD_CDC_TransmitPacket>
 8008260:	4603      	mov	r3, r0
 8008262:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008264:	7bfb      	ldrb	r3, [r7, #15]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	2000037c 	.word	0x2000037c

08008274 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008274:	b480      	push	{r7}
 8008276:	b087      	sub	sp, #28
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	4613      	mov	r3, r2
 8008280:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008286:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800828a:	4618      	mov	r0, r3
 800828c:	371c      	adds	r7, #28
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
	...

08008298 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	4603      	mov	r3, r0
 80082a0:	6039      	str	r1, [r7, #0]
 80082a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2212      	movs	r2, #18
 80082a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80082aa:	4b03      	ldr	r3, [pc, #12]	; (80082b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr
 80082b8:	200000c8 	.word	0x200000c8

080082bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	4603      	mov	r3, r0
 80082c4:	6039      	str	r1, [r7, #0]
 80082c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2204      	movs	r2, #4
 80082cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082ce:	4b03      	ldr	r3, [pc, #12]	; (80082dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	200000dc 	.word	0x200000dc

080082e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	6039      	str	r1, [r7, #0]
 80082ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082ec:	79fb      	ldrb	r3, [r7, #7]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d105      	bne.n	80082fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	4907      	ldr	r1, [pc, #28]	; (8008314 <USBD_FS_ProductStrDescriptor+0x34>)
 80082f6:	4808      	ldr	r0, [pc, #32]	; (8008318 <USBD_FS_ProductStrDescriptor+0x38>)
 80082f8:	f7ff fdf8 	bl	8007eec <USBD_GetString>
 80082fc:	e004      	b.n	8008308 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	4904      	ldr	r1, [pc, #16]	; (8008314 <USBD_FS_ProductStrDescriptor+0x34>)
 8008302:	4805      	ldr	r0, [pc, #20]	; (8008318 <USBD_FS_ProductStrDescriptor+0x38>)
 8008304:	f7ff fdf2 	bl	8007eec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008308:	4b02      	ldr	r3, [pc, #8]	; (8008314 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800830a:	4618      	mov	r0, r3
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	20001658 	.word	0x20001658
 8008318:	080094c4 	.word	0x080094c4

0800831c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b082      	sub	sp, #8
 8008320:	af00      	add	r7, sp, #0
 8008322:	4603      	mov	r3, r0
 8008324:	6039      	str	r1, [r7, #0]
 8008326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	4904      	ldr	r1, [pc, #16]	; (800833c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800832c:	4804      	ldr	r0, [pc, #16]	; (8008340 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800832e:	f7ff fddd 	bl	8007eec <USBD_GetString>
  return USBD_StrDesc;
 8008332:	4b02      	ldr	r3, [pc, #8]	; (800833c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	20001658 	.word	0x20001658
 8008340:	080094e0 	.word	0x080094e0

08008344 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	4603      	mov	r3, r0
 800834c:	6039      	str	r1, [r7, #0]
 800834e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	221a      	movs	r2, #26
 8008354:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008356:	f000 f843 	bl	80083e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800835a:	4b02      	ldr	r3, [pc, #8]	; (8008364 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800835c:	4618      	mov	r0, r3
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	200000e0 	.word	0x200000e0

08008368 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	4603      	mov	r3, r0
 8008370:	6039      	str	r1, [r7, #0]
 8008372:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d105      	bne.n	8008386 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	4907      	ldr	r1, [pc, #28]	; (800839c <USBD_FS_ConfigStrDescriptor+0x34>)
 800837e:	4808      	ldr	r0, [pc, #32]	; (80083a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008380:	f7ff fdb4 	bl	8007eec <USBD_GetString>
 8008384:	e004      	b.n	8008390 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	4904      	ldr	r1, [pc, #16]	; (800839c <USBD_FS_ConfigStrDescriptor+0x34>)
 800838a:	4805      	ldr	r0, [pc, #20]	; (80083a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800838c:	f7ff fdae 	bl	8007eec <USBD_GetString>
  }
  return USBD_StrDesc;
 8008390:	4b02      	ldr	r3, [pc, #8]	; (800839c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008392:	4618      	mov	r0, r3
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	20001658 	.word	0x20001658
 80083a0:	080094f4 	.word	0x080094f4

080083a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	4603      	mov	r3, r0
 80083ac:	6039      	str	r1, [r7, #0]
 80083ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083b0:	79fb      	ldrb	r3, [r7, #7]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d105      	bne.n	80083c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	4907      	ldr	r1, [pc, #28]	; (80083d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083ba:	4808      	ldr	r0, [pc, #32]	; (80083dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083bc:	f7ff fd96 	bl	8007eec <USBD_GetString>
 80083c0:	e004      	b.n	80083cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	4904      	ldr	r1, [pc, #16]	; (80083d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083c6:	4805      	ldr	r0, [pc, #20]	; (80083dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083c8:	f7ff fd90 	bl	8007eec <USBD_GetString>
  }
  return USBD_StrDesc;
 80083cc:	4b02      	ldr	r3, [pc, #8]	; (80083d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	20001658 	.word	0x20001658
 80083dc:	08009500 	.word	0x08009500

080083e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083e6:	4b0f      	ldr	r3, [pc, #60]	; (8008424 <Get_SerialNum+0x44>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80083ec:	4b0e      	ldr	r3, [pc, #56]	; (8008428 <Get_SerialNum+0x48>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80083f2:	4b0e      	ldr	r3, [pc, #56]	; (800842c <Get_SerialNum+0x4c>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4413      	add	r3, r2
 80083fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d009      	beq.n	800841a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008406:	2208      	movs	r2, #8
 8008408:	4909      	ldr	r1, [pc, #36]	; (8008430 <Get_SerialNum+0x50>)
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f000 f814 	bl	8008438 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008410:	2204      	movs	r2, #4
 8008412:	4908      	ldr	r1, [pc, #32]	; (8008434 <Get_SerialNum+0x54>)
 8008414:	68b8      	ldr	r0, [r7, #8]
 8008416:	f000 f80f 	bl	8008438 <IntToUnicode>
  }
}
 800841a:	bf00      	nop
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	1fff7a10 	.word	0x1fff7a10
 8008428:	1fff7a14 	.word	0x1fff7a14
 800842c:	1fff7a18 	.word	0x1fff7a18
 8008430:	200000e2 	.word	0x200000e2
 8008434:	200000f2 	.word	0x200000f2

08008438 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008438:	b480      	push	{r7}
 800843a:	b087      	sub	sp, #28
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	4613      	mov	r3, r2
 8008444:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800844a:	2300      	movs	r3, #0
 800844c:	75fb      	strb	r3, [r7, #23]
 800844e:	e027      	b.n	80084a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	0f1b      	lsrs	r3, r3, #28
 8008454:	2b09      	cmp	r3, #9
 8008456:	d80b      	bhi.n	8008470 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	0f1b      	lsrs	r3, r3, #28
 800845c:	b2da      	uxtb	r2, r3
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	4619      	mov	r1, r3
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	440b      	add	r3, r1
 8008468:	3230      	adds	r2, #48	; 0x30
 800846a:	b2d2      	uxtb	r2, r2
 800846c:	701a      	strb	r2, [r3, #0]
 800846e:	e00a      	b.n	8008486 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	0f1b      	lsrs	r3, r3, #28
 8008474:	b2da      	uxtb	r2, r3
 8008476:	7dfb      	ldrb	r3, [r7, #23]
 8008478:	005b      	lsls	r3, r3, #1
 800847a:	4619      	mov	r1, r3
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	440b      	add	r3, r1
 8008480:	3237      	adds	r2, #55	; 0x37
 8008482:	b2d2      	uxtb	r2, r2
 8008484:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	011b      	lsls	r3, r3, #4
 800848a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800848c:	7dfb      	ldrb	r3, [r7, #23]
 800848e:	005b      	lsls	r3, r3, #1
 8008490:	3301      	adds	r3, #1
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	4413      	add	r3, r2
 8008496:	2200      	movs	r2, #0
 8008498:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800849a:	7dfb      	ldrb	r3, [r7, #23]
 800849c:	3301      	adds	r3, #1
 800849e:	75fb      	strb	r3, [r7, #23]
 80084a0:	7dfa      	ldrb	r2, [r7, #23]
 80084a2:	79fb      	ldrb	r3, [r7, #7]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d3d3      	bcc.n	8008450 <IntToUnicode+0x18>
  }
}
 80084a8:	bf00      	nop
 80084aa:	bf00      	nop
 80084ac:	371c      	adds	r7, #28
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
	...

080084b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08a      	sub	sp, #40	; 0x28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084c0:	f107 0314 	add.w	r3, r7, #20
 80084c4:	2200      	movs	r2, #0
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	605a      	str	r2, [r3, #4]
 80084ca:	609a      	str	r2, [r3, #8]
 80084cc:	60da      	str	r2, [r3, #12]
 80084ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084d8:	d147      	bne.n	800856a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084da:	2300      	movs	r3, #0
 80084dc:	613b      	str	r3, [r7, #16]
 80084de:	4b25      	ldr	r3, [pc, #148]	; (8008574 <HAL_PCD_MspInit+0xbc>)
 80084e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e2:	4a24      	ldr	r2, [pc, #144]	; (8008574 <HAL_PCD_MspInit+0xbc>)
 80084e4:	f043 0301 	orr.w	r3, r3, #1
 80084e8:	6313      	str	r3, [r2, #48]	; 0x30
 80084ea:	4b22      	ldr	r3, [pc, #136]	; (8008574 <HAL_PCD_MspInit+0xbc>)
 80084ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	613b      	str	r3, [r7, #16]
 80084f4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80084f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80084fc:	2300      	movs	r3, #0
 80084fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008500:	2300      	movs	r3, #0
 8008502:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008504:	f107 0314 	add.w	r3, r7, #20
 8008508:	4619      	mov	r1, r3
 800850a:	481b      	ldr	r0, [pc, #108]	; (8008578 <HAL_PCD_MspInit+0xc0>)
 800850c:	f7f8 feb4 	bl	8001278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008510:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008516:	2302      	movs	r3, #2
 8008518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800851a:	2300      	movs	r3, #0
 800851c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800851e:	2300      	movs	r3, #0
 8008520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008522:	230a      	movs	r3, #10
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008526:	f107 0314 	add.w	r3, r7, #20
 800852a:	4619      	mov	r1, r3
 800852c:	4812      	ldr	r0, [pc, #72]	; (8008578 <HAL_PCD_MspInit+0xc0>)
 800852e:	f7f8 fea3 	bl	8001278 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008532:	4b10      	ldr	r3, [pc, #64]	; (8008574 <HAL_PCD_MspInit+0xbc>)
 8008534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008536:	4a0f      	ldr	r2, [pc, #60]	; (8008574 <HAL_PCD_MspInit+0xbc>)
 8008538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800853c:	6353      	str	r3, [r2, #52]	; 0x34
 800853e:	2300      	movs	r3, #0
 8008540:	60fb      	str	r3, [r7, #12]
 8008542:	4b0c      	ldr	r3, [pc, #48]	; (8008574 <HAL_PCD_MspInit+0xbc>)
 8008544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008546:	4a0b      	ldr	r2, [pc, #44]	; (8008574 <HAL_PCD_MspInit+0xbc>)
 8008548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800854c:	6453      	str	r3, [r2, #68]	; 0x44
 800854e:	4b09      	ldr	r3, [pc, #36]	; (8008574 <HAL_PCD_MspInit+0xbc>)
 8008550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800855a:	2200      	movs	r2, #0
 800855c:	2100      	movs	r1, #0
 800855e:	2043      	movs	r0, #67	; 0x43
 8008560:	f7f8 fe53 	bl	800120a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008564:	2043      	movs	r0, #67	; 0x43
 8008566:	f7f8 fe6c 	bl	8001242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800856a:	bf00      	nop
 800856c:	3728      	adds	r7, #40	; 0x28
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	40023800 	.word	0x40023800
 8008578:	40020000 	.word	0x40020000

0800857c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008590:	4619      	mov	r1, r3
 8008592:	4610      	mov	r0, r2
 8008594:	f7fe fb4b 	bl	8006c2e <USBD_LL_SetupStage>
}
 8008598:	bf00      	nop
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80085b2:	78fa      	ldrb	r2, [r7, #3]
 80085b4:	6879      	ldr	r1, [r7, #4]
 80085b6:	4613      	mov	r3, r2
 80085b8:	00db      	lsls	r3, r3, #3
 80085ba:	4413      	add	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	440b      	add	r3, r1
 80085c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	78fb      	ldrb	r3, [r7, #3]
 80085c8:	4619      	mov	r1, r3
 80085ca:	f7fe fb85 	bl	8006cd8 <USBD_LL_DataOutStage>
}
 80085ce:	bf00      	nop
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b082      	sub	sp, #8
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	460b      	mov	r3, r1
 80085e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80085e8:	78fa      	ldrb	r2, [r7, #3]
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	4613      	mov	r3, r2
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	4413      	add	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	440b      	add	r3, r1
 80085f6:	334c      	adds	r3, #76	; 0x4c
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	4619      	mov	r1, r3
 80085fe:	f7fe fc1e 	bl	8006e3e <USBD_LL_DataInStage>
}
 8008602:	bf00      	nop
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800860a:	b580      	push	{r7, lr}
 800860c:	b082      	sub	sp, #8
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008618:	4618      	mov	r0, r3
 800861a:	f7fe fd52 	bl	80070c2 <USBD_LL_SOF>
}
 800861e:	bf00      	nop
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800862e:	2301      	movs	r3, #1
 8008630:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d102      	bne.n	8008640 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800863a:	2300      	movs	r3, #0
 800863c:	73fb      	strb	r3, [r7, #15]
 800863e:	e008      	b.n	8008652 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	2b02      	cmp	r3, #2
 8008646:	d102      	bne.n	800864e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008648:	2301      	movs	r3, #1
 800864a:	73fb      	strb	r3, [r7, #15]
 800864c:	e001      	b.n	8008652 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800864e:	f7f8 fb19 	bl	8000c84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008658:	7bfa      	ldrb	r2, [r7, #15]
 800865a:	4611      	mov	r1, r2
 800865c:	4618      	mov	r0, r3
 800865e:	f7fe fcf2 	bl	8007046 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008668:	4618      	mov	r0, r3
 800866a:	f7fe fc9a 	bl	8006fa2 <USBD_LL_Reset>
}
 800866e:	bf00      	nop
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
	...

08008678 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008686:	4618      	mov	r0, r3
 8008688:	f7fe fced 	bl	8007066 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	6812      	ldr	r2, [r2, #0]
 800869a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800869e:	f043 0301 	orr.w	r3, r3, #1
 80086a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a1b      	ldr	r3, [r3, #32]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d005      	beq.n	80086b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086ac:	4b04      	ldr	r3, [pc, #16]	; (80086c0 <HAL_PCD_SuspendCallback+0x48>)
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	4a03      	ldr	r2, [pc, #12]	; (80086c0 <HAL_PCD_SuspendCallback+0x48>)
 80086b2:	f043 0306 	orr.w	r3, r3, #6
 80086b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086b8:	bf00      	nop
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	e000ed00 	.word	0xe000ed00

080086c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe fcdd 	bl	8007092 <USBD_LL_Resume>
}
 80086d8:	bf00      	nop
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086f2:	78fa      	ldrb	r2, [r7, #3]
 80086f4:	4611      	mov	r1, r2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe fd35 	bl	8007166 <USBD_LL_IsoOUTIncomplete>
}
 80086fc:	bf00      	nop
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	460b      	mov	r3, r1
 800870e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008716:	78fa      	ldrb	r2, [r7, #3]
 8008718:	4611      	mov	r1, r2
 800871a:	4618      	mov	r0, r3
 800871c:	f7fe fcf1 	bl	8007102 <USBD_LL_IsoINIncomplete>
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe fd47 	bl	80071ca <USBD_LL_DevConnected>
}
 800873c:	bf00      	nop
 800873e:	3708      	adds	r7, #8
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008752:	4618      	mov	r0, r3
 8008754:	f7fe fd44 	bl	80071e0 <USBD_LL_DevDisconnected>
}
 8008758:	bf00      	nop
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d13c      	bne.n	80087ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008770:	4a20      	ldr	r2, [pc, #128]	; (80087f4 <USBD_LL_Init+0x94>)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a1e      	ldr	r2, [pc, #120]	; (80087f4 <USBD_LL_Init+0x94>)
 800877c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008780:	4b1c      	ldr	r3, [pc, #112]	; (80087f4 <USBD_LL_Init+0x94>)
 8008782:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008786:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008788:	4b1a      	ldr	r3, [pc, #104]	; (80087f4 <USBD_LL_Init+0x94>)
 800878a:	2204      	movs	r2, #4
 800878c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800878e:	4b19      	ldr	r3, [pc, #100]	; (80087f4 <USBD_LL_Init+0x94>)
 8008790:	2202      	movs	r2, #2
 8008792:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008794:	4b17      	ldr	r3, [pc, #92]	; (80087f4 <USBD_LL_Init+0x94>)
 8008796:	2200      	movs	r2, #0
 8008798:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800879a:	4b16      	ldr	r3, [pc, #88]	; (80087f4 <USBD_LL_Init+0x94>)
 800879c:	2202      	movs	r2, #2
 800879e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80087a0:	4b14      	ldr	r3, [pc, #80]	; (80087f4 <USBD_LL_Init+0x94>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80087a6:	4b13      	ldr	r3, [pc, #76]	; (80087f4 <USBD_LL_Init+0x94>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80087ac:	4b11      	ldr	r3, [pc, #68]	; (80087f4 <USBD_LL_Init+0x94>)
 80087ae:	2200      	movs	r2, #0
 80087b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80087b2:	4b10      	ldr	r3, [pc, #64]	; (80087f4 <USBD_LL_Init+0x94>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80087b8:	4b0e      	ldr	r3, [pc, #56]	; (80087f4 <USBD_LL_Init+0x94>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80087be:	480d      	ldr	r0, [pc, #52]	; (80087f4 <USBD_LL_Init+0x94>)
 80087c0:	f7f9 fd26 	bl	8002210 <HAL_PCD_Init>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80087ca:	f7f8 fa5b 	bl	8000c84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80087ce:	2180      	movs	r1, #128	; 0x80
 80087d0:	4808      	ldr	r0, [pc, #32]	; (80087f4 <USBD_LL_Init+0x94>)
 80087d2:	f7fa ff7e 	bl	80036d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80087d6:	2240      	movs	r2, #64	; 0x40
 80087d8:	2100      	movs	r1, #0
 80087da:	4806      	ldr	r0, [pc, #24]	; (80087f4 <USBD_LL_Init+0x94>)
 80087dc:	f7fa ff32 	bl	8003644 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80087e0:	2280      	movs	r2, #128	; 0x80
 80087e2:	2101      	movs	r1, #1
 80087e4:	4803      	ldr	r0, [pc, #12]	; (80087f4 <USBD_LL_Init+0x94>)
 80087e6:	f7fa ff2d 	bl	8003644 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	20001858 	.word	0x20001858

080087f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800880e:	4618      	mov	r0, r3
 8008810:	f7f9 fe1b 	bl	800244a <HAL_PCD_Start>
 8008814:	4603      	mov	r3, r0
 8008816:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008818:	7bfb      	ldrb	r3, [r7, #15]
 800881a:	4618      	mov	r0, r3
 800881c:	f000 f942 	bl	8008aa4 <USBD_Get_USB_Status>
 8008820:	4603      	mov	r3, r0
 8008822:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008824:	7bbb      	ldrb	r3, [r7, #14]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	4608      	mov	r0, r1
 8008838:	4611      	mov	r1, r2
 800883a:	461a      	mov	r2, r3
 800883c:	4603      	mov	r3, r0
 800883e:	70fb      	strb	r3, [r7, #3]
 8008840:	460b      	mov	r3, r1
 8008842:	70bb      	strb	r3, [r7, #2]
 8008844:	4613      	mov	r3, r2
 8008846:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800884c:	2300      	movs	r3, #0
 800884e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008856:	78bb      	ldrb	r3, [r7, #2]
 8008858:	883a      	ldrh	r2, [r7, #0]
 800885a:	78f9      	ldrb	r1, [r7, #3]
 800885c:	f7fa faec 	bl	8002e38 <HAL_PCD_EP_Open>
 8008860:	4603      	mov	r3, r0
 8008862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008864:	7bfb      	ldrb	r3, [r7, #15]
 8008866:	4618      	mov	r0, r3
 8008868:	f000 f91c 	bl	8008aa4 <USBD_Get_USB_Status>
 800886c:	4603      	mov	r3, r0
 800886e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008870:	7bbb      	ldrb	r3, [r7, #14]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	460b      	mov	r3, r1
 8008884:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008894:	78fa      	ldrb	r2, [r7, #3]
 8008896:	4611      	mov	r1, r2
 8008898:	4618      	mov	r0, r3
 800889a:	f7fa fb35 	bl	8002f08 <HAL_PCD_EP_Close>
 800889e:	4603      	mov	r3, r0
 80088a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f000 f8fd 	bl	8008aa4 <USBD_Get_USB_Status>
 80088aa:	4603      	mov	r3, r0
 80088ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088c8:	2300      	movs	r3, #0
 80088ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088d2:	78fa      	ldrb	r2, [r7, #3]
 80088d4:	4611      	mov	r1, r2
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fa fc0d 	bl	80030f6 <HAL_PCD_EP_SetStall>
 80088dc:	4603      	mov	r3, r0
 80088de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088e0:	7bfb      	ldrb	r3, [r7, #15]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 f8de 	bl	8008aa4 <USBD_Get_USB_Status>
 80088e8:	4603      	mov	r3, r0
 80088ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	460b      	mov	r3, r1
 8008900:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008910:	78fa      	ldrb	r2, [r7, #3]
 8008912:	4611      	mov	r1, r2
 8008914:	4618      	mov	r0, r3
 8008916:	f7fa fc52 	bl	80031be <HAL_PCD_EP_ClrStall>
 800891a:	4603      	mov	r3, r0
 800891c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	4618      	mov	r0, r3
 8008922:	f000 f8bf 	bl	8008aa4 <USBD_Get_USB_Status>
 8008926:	4603      	mov	r3, r0
 8008928:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800892a:	7bbb      	ldrb	r3, [r7, #14]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	460b      	mov	r3, r1
 800893e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008946:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800894c:	2b00      	cmp	r3, #0
 800894e:	da0b      	bge.n	8008968 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008950:	78fb      	ldrb	r3, [r7, #3]
 8008952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008956:	68f9      	ldr	r1, [r7, #12]
 8008958:	4613      	mov	r3, r2
 800895a:	00db      	lsls	r3, r3, #3
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	440b      	add	r3, r1
 8008962:	333e      	adds	r3, #62	; 0x3e
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	e00b      	b.n	8008980 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008968:	78fb      	ldrb	r3, [r7, #3]
 800896a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800896e:	68f9      	ldr	r1, [r7, #12]
 8008970:	4613      	mov	r3, r2
 8008972:	00db      	lsls	r3, r3, #3
 8008974:	4413      	add	r3, r2
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	440b      	add	r3, r1
 800897a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800897e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	460b      	mov	r3, r1
 8008996:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008998:	2300      	movs	r3, #0
 800899a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800899c:	2300      	movs	r3, #0
 800899e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089a6:	78fa      	ldrb	r2, [r7, #3]
 80089a8:	4611      	mov	r1, r2
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fa fa1f 	bl	8002dee <HAL_PCD_SetAddress>
 80089b0:	4603      	mov	r3, r0
 80089b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	4618      	mov	r0, r3
 80089b8:	f000 f874 	bl	8008aa4 <USBD_Get_USB_Status>
 80089bc:	4603      	mov	r3, r0
 80089be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b086      	sub	sp, #24
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	60f8      	str	r0, [r7, #12]
 80089d2:	607a      	str	r2, [r7, #4]
 80089d4:	603b      	str	r3, [r7, #0]
 80089d6:	460b      	mov	r3, r1
 80089d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80089e8:	7af9      	ldrb	r1, [r7, #11]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	f7fa fb38 	bl	8003062 <HAL_PCD_EP_Transmit>
 80089f2:	4603      	mov	r3, r0
 80089f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 f853 	bl	8008aa4 <USBD_Get_USB_Status>
 80089fe:	4603      	mov	r3, r0
 8008a00:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a02:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3718      	adds	r7, #24
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b086      	sub	sp, #24
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	607a      	str	r2, [r7, #4]
 8008a16:	603b      	str	r3, [r7, #0]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008a2a:	7af9      	ldrb	r1, [r7, #11]
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	f7fa fab4 	bl	8002f9c <HAL_PCD_EP_Receive>
 8008a34:	4603      	mov	r3, r0
 8008a36:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 f832 	bl	8008aa4 <USBD_Get_USB_Status>
 8008a40:	4603      	mov	r3, r0
 8008a42:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a44:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b082      	sub	sp, #8
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	460b      	mov	r3, r1
 8008a58:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a60:	78fa      	ldrb	r2, [r7, #3]
 8008a62:	4611      	mov	r1, r2
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fa fae4 	bl	8003032 <HAL_PCD_EP_GetRxCount>
 8008a6a:	4603      	mov	r3, r0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a7c:	4b03      	ldr	r3, [pc, #12]	; (8008a8c <USBD_static_malloc+0x18>)
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	20001d64 	.word	0x20001d64

08008a90 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]

}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ab2:	79fb      	ldrb	r3, [r7, #7]
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d817      	bhi.n	8008ae8 <USBD_Get_USB_Status+0x44>
 8008ab8:	a201      	add	r2, pc, #4	; (adr r2, 8008ac0 <USBD_Get_USB_Status+0x1c>)
 8008aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008abe:	bf00      	nop
 8008ac0:	08008ad1 	.word	0x08008ad1
 8008ac4:	08008ad7 	.word	0x08008ad7
 8008ac8:	08008add 	.word	0x08008add
 8008acc:	08008ae3 	.word	0x08008ae3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad4:	e00b      	b.n	8008aee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	73fb      	strb	r3, [r7, #15]
    break;
 8008ada:	e008      	b.n	8008aee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008adc:	2301      	movs	r3, #1
 8008ade:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae0:	e005      	b.n	8008aee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ae2:	2303      	movs	r3, #3
 8008ae4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae6:	e002      	b.n	8008aee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	73fb      	strb	r3, [r7, #15]
    break;
 8008aec:	bf00      	nop
  }
  return usb_status;
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <sniprintf>:
 8008afc:	b40c      	push	{r2, r3}
 8008afe:	b530      	push	{r4, r5, lr}
 8008b00:	4b17      	ldr	r3, [pc, #92]	; (8008b60 <sniprintf+0x64>)
 8008b02:	1e0c      	subs	r4, r1, #0
 8008b04:	681d      	ldr	r5, [r3, #0]
 8008b06:	b09d      	sub	sp, #116	; 0x74
 8008b08:	da08      	bge.n	8008b1c <sniprintf+0x20>
 8008b0a:	238b      	movs	r3, #139	; 0x8b
 8008b0c:	602b      	str	r3, [r5, #0]
 8008b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b12:	b01d      	add	sp, #116	; 0x74
 8008b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b18:	b002      	add	sp, #8
 8008b1a:	4770      	bx	lr
 8008b1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b24:	bf14      	ite	ne
 8008b26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b2a:	4623      	moveq	r3, r4
 8008b2c:	9304      	str	r3, [sp, #16]
 8008b2e:	9307      	str	r3, [sp, #28]
 8008b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b34:	9002      	str	r0, [sp, #8]
 8008b36:	9006      	str	r0, [sp, #24]
 8008b38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008b3e:	ab21      	add	r3, sp, #132	; 0x84
 8008b40:	a902      	add	r1, sp, #8
 8008b42:	4628      	mov	r0, r5
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	f000 f993 	bl	8008e70 <_svfiprintf_r>
 8008b4a:	1c43      	adds	r3, r0, #1
 8008b4c:	bfbc      	itt	lt
 8008b4e:	238b      	movlt	r3, #139	; 0x8b
 8008b50:	602b      	strlt	r3, [r5, #0]
 8008b52:	2c00      	cmp	r4, #0
 8008b54:	d0dd      	beq.n	8008b12 <sniprintf+0x16>
 8008b56:	9b02      	ldr	r3, [sp, #8]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	701a      	strb	r2, [r3, #0]
 8008b5c:	e7d9      	b.n	8008b12 <sniprintf+0x16>
 8008b5e:	bf00      	nop
 8008b60:	20000148 	.word	0x20000148

08008b64 <memset>:
 8008b64:	4402      	add	r2, r0
 8008b66:	4603      	mov	r3, r0
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d100      	bne.n	8008b6e <memset+0xa>
 8008b6c:	4770      	bx	lr
 8008b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b72:	e7f9      	b.n	8008b68 <memset+0x4>

08008b74 <__errno>:
 8008b74:	4b01      	ldr	r3, [pc, #4]	; (8008b7c <__errno+0x8>)
 8008b76:	6818      	ldr	r0, [r3, #0]
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	20000148 	.word	0x20000148

08008b80 <__libc_init_array>:
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	4d0d      	ldr	r5, [pc, #52]	; (8008bb8 <__libc_init_array+0x38>)
 8008b84:	4c0d      	ldr	r4, [pc, #52]	; (8008bbc <__libc_init_array+0x3c>)
 8008b86:	1b64      	subs	r4, r4, r5
 8008b88:	10a4      	asrs	r4, r4, #2
 8008b8a:	2600      	movs	r6, #0
 8008b8c:	42a6      	cmp	r6, r4
 8008b8e:	d109      	bne.n	8008ba4 <__libc_init_array+0x24>
 8008b90:	4d0b      	ldr	r5, [pc, #44]	; (8008bc0 <__libc_init_array+0x40>)
 8008b92:	4c0c      	ldr	r4, [pc, #48]	; (8008bc4 <__libc_init_array+0x44>)
 8008b94:	f000 fc6a 	bl	800946c <_init>
 8008b98:	1b64      	subs	r4, r4, r5
 8008b9a:	10a4      	asrs	r4, r4, #2
 8008b9c:	2600      	movs	r6, #0
 8008b9e:	42a6      	cmp	r6, r4
 8008ba0:	d105      	bne.n	8008bae <__libc_init_array+0x2e>
 8008ba2:	bd70      	pop	{r4, r5, r6, pc}
 8008ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ba8:	4798      	blx	r3
 8008baa:	3601      	adds	r6, #1
 8008bac:	e7ee      	b.n	8008b8c <__libc_init_array+0xc>
 8008bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bb2:	4798      	blx	r3
 8008bb4:	3601      	adds	r6, #1
 8008bb6:	e7f2      	b.n	8008b9e <__libc_init_array+0x1e>
 8008bb8:	08009564 	.word	0x08009564
 8008bbc:	08009564 	.word	0x08009564
 8008bc0:	08009564 	.word	0x08009564
 8008bc4:	08009568 	.word	0x08009568

08008bc8 <__retarget_lock_acquire_recursive>:
 8008bc8:	4770      	bx	lr

08008bca <__retarget_lock_release_recursive>:
 8008bca:	4770      	bx	lr

08008bcc <_free_r>:
 8008bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bce:	2900      	cmp	r1, #0
 8008bd0:	d044      	beq.n	8008c5c <_free_r+0x90>
 8008bd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bd6:	9001      	str	r0, [sp, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f1a1 0404 	sub.w	r4, r1, #4
 8008bde:	bfb8      	it	lt
 8008be0:	18e4      	addlt	r4, r4, r3
 8008be2:	f000 f8df 	bl	8008da4 <__malloc_lock>
 8008be6:	4a1e      	ldr	r2, [pc, #120]	; (8008c60 <_free_r+0x94>)
 8008be8:	9801      	ldr	r0, [sp, #4]
 8008bea:	6813      	ldr	r3, [r2, #0]
 8008bec:	b933      	cbnz	r3, 8008bfc <_free_r+0x30>
 8008bee:	6063      	str	r3, [r4, #4]
 8008bf0:	6014      	str	r4, [r2, #0]
 8008bf2:	b003      	add	sp, #12
 8008bf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bf8:	f000 b8da 	b.w	8008db0 <__malloc_unlock>
 8008bfc:	42a3      	cmp	r3, r4
 8008bfe:	d908      	bls.n	8008c12 <_free_r+0x46>
 8008c00:	6825      	ldr	r5, [r4, #0]
 8008c02:	1961      	adds	r1, r4, r5
 8008c04:	428b      	cmp	r3, r1
 8008c06:	bf01      	itttt	eq
 8008c08:	6819      	ldreq	r1, [r3, #0]
 8008c0a:	685b      	ldreq	r3, [r3, #4]
 8008c0c:	1949      	addeq	r1, r1, r5
 8008c0e:	6021      	streq	r1, [r4, #0]
 8008c10:	e7ed      	b.n	8008bee <_free_r+0x22>
 8008c12:	461a      	mov	r2, r3
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	b10b      	cbz	r3, 8008c1c <_free_r+0x50>
 8008c18:	42a3      	cmp	r3, r4
 8008c1a:	d9fa      	bls.n	8008c12 <_free_r+0x46>
 8008c1c:	6811      	ldr	r1, [r2, #0]
 8008c1e:	1855      	adds	r5, r2, r1
 8008c20:	42a5      	cmp	r5, r4
 8008c22:	d10b      	bne.n	8008c3c <_free_r+0x70>
 8008c24:	6824      	ldr	r4, [r4, #0]
 8008c26:	4421      	add	r1, r4
 8008c28:	1854      	adds	r4, r2, r1
 8008c2a:	42a3      	cmp	r3, r4
 8008c2c:	6011      	str	r1, [r2, #0]
 8008c2e:	d1e0      	bne.n	8008bf2 <_free_r+0x26>
 8008c30:	681c      	ldr	r4, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	6053      	str	r3, [r2, #4]
 8008c36:	440c      	add	r4, r1
 8008c38:	6014      	str	r4, [r2, #0]
 8008c3a:	e7da      	b.n	8008bf2 <_free_r+0x26>
 8008c3c:	d902      	bls.n	8008c44 <_free_r+0x78>
 8008c3e:	230c      	movs	r3, #12
 8008c40:	6003      	str	r3, [r0, #0]
 8008c42:	e7d6      	b.n	8008bf2 <_free_r+0x26>
 8008c44:	6825      	ldr	r5, [r4, #0]
 8008c46:	1961      	adds	r1, r4, r5
 8008c48:	428b      	cmp	r3, r1
 8008c4a:	bf04      	itt	eq
 8008c4c:	6819      	ldreq	r1, [r3, #0]
 8008c4e:	685b      	ldreq	r3, [r3, #4]
 8008c50:	6063      	str	r3, [r4, #4]
 8008c52:	bf04      	itt	eq
 8008c54:	1949      	addeq	r1, r1, r5
 8008c56:	6021      	streq	r1, [r4, #0]
 8008c58:	6054      	str	r4, [r2, #4]
 8008c5a:	e7ca      	b.n	8008bf2 <_free_r+0x26>
 8008c5c:	b003      	add	sp, #12
 8008c5e:	bd30      	pop	{r4, r5, pc}
 8008c60:	200020c4 	.word	0x200020c4

08008c64 <sbrk_aligned>:
 8008c64:	b570      	push	{r4, r5, r6, lr}
 8008c66:	4e0e      	ldr	r6, [pc, #56]	; (8008ca0 <sbrk_aligned+0x3c>)
 8008c68:	460c      	mov	r4, r1
 8008c6a:	6831      	ldr	r1, [r6, #0]
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	b911      	cbnz	r1, 8008c76 <sbrk_aligned+0x12>
 8008c70:	f000 fba6 	bl	80093c0 <_sbrk_r>
 8008c74:	6030      	str	r0, [r6, #0]
 8008c76:	4621      	mov	r1, r4
 8008c78:	4628      	mov	r0, r5
 8008c7a:	f000 fba1 	bl	80093c0 <_sbrk_r>
 8008c7e:	1c43      	adds	r3, r0, #1
 8008c80:	d00a      	beq.n	8008c98 <sbrk_aligned+0x34>
 8008c82:	1cc4      	adds	r4, r0, #3
 8008c84:	f024 0403 	bic.w	r4, r4, #3
 8008c88:	42a0      	cmp	r0, r4
 8008c8a:	d007      	beq.n	8008c9c <sbrk_aligned+0x38>
 8008c8c:	1a21      	subs	r1, r4, r0
 8008c8e:	4628      	mov	r0, r5
 8008c90:	f000 fb96 	bl	80093c0 <_sbrk_r>
 8008c94:	3001      	adds	r0, #1
 8008c96:	d101      	bne.n	8008c9c <sbrk_aligned+0x38>
 8008c98:	f04f 34ff 	mov.w	r4, #4294967295
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ca0:	200020c8 	.word	0x200020c8

08008ca4 <_malloc_r>:
 8008ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca8:	1ccd      	adds	r5, r1, #3
 8008caa:	f025 0503 	bic.w	r5, r5, #3
 8008cae:	3508      	adds	r5, #8
 8008cb0:	2d0c      	cmp	r5, #12
 8008cb2:	bf38      	it	cc
 8008cb4:	250c      	movcc	r5, #12
 8008cb6:	2d00      	cmp	r5, #0
 8008cb8:	4607      	mov	r7, r0
 8008cba:	db01      	blt.n	8008cc0 <_malloc_r+0x1c>
 8008cbc:	42a9      	cmp	r1, r5
 8008cbe:	d905      	bls.n	8008ccc <_malloc_r+0x28>
 8008cc0:	230c      	movs	r3, #12
 8008cc2:	603b      	str	r3, [r7, #0]
 8008cc4:	2600      	movs	r6, #0
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ccc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008da0 <_malloc_r+0xfc>
 8008cd0:	f000 f868 	bl	8008da4 <__malloc_lock>
 8008cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8008cd8:	461c      	mov	r4, r3
 8008cda:	bb5c      	cbnz	r4, 8008d34 <_malloc_r+0x90>
 8008cdc:	4629      	mov	r1, r5
 8008cde:	4638      	mov	r0, r7
 8008ce0:	f7ff ffc0 	bl	8008c64 <sbrk_aligned>
 8008ce4:	1c43      	adds	r3, r0, #1
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	d155      	bne.n	8008d96 <_malloc_r+0xf2>
 8008cea:	f8d8 4000 	ldr.w	r4, [r8]
 8008cee:	4626      	mov	r6, r4
 8008cf0:	2e00      	cmp	r6, #0
 8008cf2:	d145      	bne.n	8008d80 <_malloc_r+0xdc>
 8008cf4:	2c00      	cmp	r4, #0
 8008cf6:	d048      	beq.n	8008d8a <_malloc_r+0xe6>
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	4631      	mov	r1, r6
 8008cfc:	4638      	mov	r0, r7
 8008cfe:	eb04 0903 	add.w	r9, r4, r3
 8008d02:	f000 fb5d 	bl	80093c0 <_sbrk_r>
 8008d06:	4581      	cmp	r9, r0
 8008d08:	d13f      	bne.n	8008d8a <_malloc_r+0xe6>
 8008d0a:	6821      	ldr	r1, [r4, #0]
 8008d0c:	1a6d      	subs	r5, r5, r1
 8008d0e:	4629      	mov	r1, r5
 8008d10:	4638      	mov	r0, r7
 8008d12:	f7ff ffa7 	bl	8008c64 <sbrk_aligned>
 8008d16:	3001      	adds	r0, #1
 8008d18:	d037      	beq.n	8008d8a <_malloc_r+0xe6>
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	442b      	add	r3, r5
 8008d1e:	6023      	str	r3, [r4, #0]
 8008d20:	f8d8 3000 	ldr.w	r3, [r8]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d038      	beq.n	8008d9a <_malloc_r+0xf6>
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	42a2      	cmp	r2, r4
 8008d2c:	d12b      	bne.n	8008d86 <_malloc_r+0xe2>
 8008d2e:	2200      	movs	r2, #0
 8008d30:	605a      	str	r2, [r3, #4]
 8008d32:	e00f      	b.n	8008d54 <_malloc_r+0xb0>
 8008d34:	6822      	ldr	r2, [r4, #0]
 8008d36:	1b52      	subs	r2, r2, r5
 8008d38:	d41f      	bmi.n	8008d7a <_malloc_r+0xd6>
 8008d3a:	2a0b      	cmp	r2, #11
 8008d3c:	d917      	bls.n	8008d6e <_malloc_r+0xca>
 8008d3e:	1961      	adds	r1, r4, r5
 8008d40:	42a3      	cmp	r3, r4
 8008d42:	6025      	str	r5, [r4, #0]
 8008d44:	bf18      	it	ne
 8008d46:	6059      	strne	r1, [r3, #4]
 8008d48:	6863      	ldr	r3, [r4, #4]
 8008d4a:	bf08      	it	eq
 8008d4c:	f8c8 1000 	streq.w	r1, [r8]
 8008d50:	5162      	str	r2, [r4, r5]
 8008d52:	604b      	str	r3, [r1, #4]
 8008d54:	4638      	mov	r0, r7
 8008d56:	f104 060b 	add.w	r6, r4, #11
 8008d5a:	f000 f829 	bl	8008db0 <__malloc_unlock>
 8008d5e:	f026 0607 	bic.w	r6, r6, #7
 8008d62:	1d23      	adds	r3, r4, #4
 8008d64:	1af2      	subs	r2, r6, r3
 8008d66:	d0ae      	beq.n	8008cc6 <_malloc_r+0x22>
 8008d68:	1b9b      	subs	r3, r3, r6
 8008d6a:	50a3      	str	r3, [r4, r2]
 8008d6c:	e7ab      	b.n	8008cc6 <_malloc_r+0x22>
 8008d6e:	42a3      	cmp	r3, r4
 8008d70:	6862      	ldr	r2, [r4, #4]
 8008d72:	d1dd      	bne.n	8008d30 <_malloc_r+0x8c>
 8008d74:	f8c8 2000 	str.w	r2, [r8]
 8008d78:	e7ec      	b.n	8008d54 <_malloc_r+0xb0>
 8008d7a:	4623      	mov	r3, r4
 8008d7c:	6864      	ldr	r4, [r4, #4]
 8008d7e:	e7ac      	b.n	8008cda <_malloc_r+0x36>
 8008d80:	4634      	mov	r4, r6
 8008d82:	6876      	ldr	r6, [r6, #4]
 8008d84:	e7b4      	b.n	8008cf0 <_malloc_r+0x4c>
 8008d86:	4613      	mov	r3, r2
 8008d88:	e7cc      	b.n	8008d24 <_malloc_r+0x80>
 8008d8a:	230c      	movs	r3, #12
 8008d8c:	603b      	str	r3, [r7, #0]
 8008d8e:	4638      	mov	r0, r7
 8008d90:	f000 f80e 	bl	8008db0 <__malloc_unlock>
 8008d94:	e797      	b.n	8008cc6 <_malloc_r+0x22>
 8008d96:	6025      	str	r5, [r4, #0]
 8008d98:	e7dc      	b.n	8008d54 <_malloc_r+0xb0>
 8008d9a:	605b      	str	r3, [r3, #4]
 8008d9c:	deff      	udf	#255	; 0xff
 8008d9e:	bf00      	nop
 8008da0:	200020c4 	.word	0x200020c4

08008da4 <__malloc_lock>:
 8008da4:	4801      	ldr	r0, [pc, #4]	; (8008dac <__malloc_lock+0x8>)
 8008da6:	f7ff bf0f 	b.w	8008bc8 <__retarget_lock_acquire_recursive>
 8008daa:	bf00      	nop
 8008dac:	200020c0 	.word	0x200020c0

08008db0 <__malloc_unlock>:
 8008db0:	4801      	ldr	r0, [pc, #4]	; (8008db8 <__malloc_unlock+0x8>)
 8008db2:	f7ff bf0a 	b.w	8008bca <__retarget_lock_release_recursive>
 8008db6:	bf00      	nop
 8008db8:	200020c0 	.word	0x200020c0

08008dbc <__ssputs_r>:
 8008dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc0:	688e      	ldr	r6, [r1, #8]
 8008dc2:	461f      	mov	r7, r3
 8008dc4:	42be      	cmp	r6, r7
 8008dc6:	680b      	ldr	r3, [r1, #0]
 8008dc8:	4682      	mov	sl, r0
 8008dca:	460c      	mov	r4, r1
 8008dcc:	4690      	mov	r8, r2
 8008dce:	d82c      	bhi.n	8008e2a <__ssputs_r+0x6e>
 8008dd0:	898a      	ldrh	r2, [r1, #12]
 8008dd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008dd6:	d026      	beq.n	8008e26 <__ssputs_r+0x6a>
 8008dd8:	6965      	ldr	r5, [r4, #20]
 8008dda:	6909      	ldr	r1, [r1, #16]
 8008ddc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008de0:	eba3 0901 	sub.w	r9, r3, r1
 8008de4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008de8:	1c7b      	adds	r3, r7, #1
 8008dea:	444b      	add	r3, r9
 8008dec:	106d      	asrs	r5, r5, #1
 8008dee:	429d      	cmp	r5, r3
 8008df0:	bf38      	it	cc
 8008df2:	461d      	movcc	r5, r3
 8008df4:	0553      	lsls	r3, r2, #21
 8008df6:	d527      	bpl.n	8008e48 <__ssputs_r+0x8c>
 8008df8:	4629      	mov	r1, r5
 8008dfa:	f7ff ff53 	bl	8008ca4 <_malloc_r>
 8008dfe:	4606      	mov	r6, r0
 8008e00:	b360      	cbz	r0, 8008e5c <__ssputs_r+0xa0>
 8008e02:	6921      	ldr	r1, [r4, #16]
 8008e04:	464a      	mov	r2, r9
 8008e06:	f000 faeb 	bl	80093e0 <memcpy>
 8008e0a:	89a3      	ldrh	r3, [r4, #12]
 8008e0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e14:	81a3      	strh	r3, [r4, #12]
 8008e16:	6126      	str	r6, [r4, #16]
 8008e18:	6165      	str	r5, [r4, #20]
 8008e1a:	444e      	add	r6, r9
 8008e1c:	eba5 0509 	sub.w	r5, r5, r9
 8008e20:	6026      	str	r6, [r4, #0]
 8008e22:	60a5      	str	r5, [r4, #8]
 8008e24:	463e      	mov	r6, r7
 8008e26:	42be      	cmp	r6, r7
 8008e28:	d900      	bls.n	8008e2c <__ssputs_r+0x70>
 8008e2a:	463e      	mov	r6, r7
 8008e2c:	6820      	ldr	r0, [r4, #0]
 8008e2e:	4632      	mov	r2, r6
 8008e30:	4641      	mov	r1, r8
 8008e32:	f000 faab 	bl	800938c <memmove>
 8008e36:	68a3      	ldr	r3, [r4, #8]
 8008e38:	1b9b      	subs	r3, r3, r6
 8008e3a:	60a3      	str	r3, [r4, #8]
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	4433      	add	r3, r6
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	2000      	movs	r0, #0
 8008e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e48:	462a      	mov	r2, r5
 8008e4a:	f000 fad7 	bl	80093fc <_realloc_r>
 8008e4e:	4606      	mov	r6, r0
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d1e0      	bne.n	8008e16 <__ssputs_r+0x5a>
 8008e54:	6921      	ldr	r1, [r4, #16]
 8008e56:	4650      	mov	r0, sl
 8008e58:	f7ff feb8 	bl	8008bcc <_free_r>
 8008e5c:	230c      	movs	r3, #12
 8008e5e:	f8ca 3000 	str.w	r3, [sl]
 8008e62:	89a3      	ldrh	r3, [r4, #12]
 8008e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e68:	81a3      	strh	r3, [r4, #12]
 8008e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6e:	e7e9      	b.n	8008e44 <__ssputs_r+0x88>

08008e70 <_svfiprintf_r>:
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	4698      	mov	r8, r3
 8008e76:	898b      	ldrh	r3, [r1, #12]
 8008e78:	061b      	lsls	r3, r3, #24
 8008e7a:	b09d      	sub	sp, #116	; 0x74
 8008e7c:	4607      	mov	r7, r0
 8008e7e:	460d      	mov	r5, r1
 8008e80:	4614      	mov	r4, r2
 8008e82:	d50e      	bpl.n	8008ea2 <_svfiprintf_r+0x32>
 8008e84:	690b      	ldr	r3, [r1, #16]
 8008e86:	b963      	cbnz	r3, 8008ea2 <_svfiprintf_r+0x32>
 8008e88:	2140      	movs	r1, #64	; 0x40
 8008e8a:	f7ff ff0b 	bl	8008ca4 <_malloc_r>
 8008e8e:	6028      	str	r0, [r5, #0]
 8008e90:	6128      	str	r0, [r5, #16]
 8008e92:	b920      	cbnz	r0, 8008e9e <_svfiprintf_r+0x2e>
 8008e94:	230c      	movs	r3, #12
 8008e96:	603b      	str	r3, [r7, #0]
 8008e98:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9c:	e0d0      	b.n	8009040 <_svfiprintf_r+0x1d0>
 8008e9e:	2340      	movs	r3, #64	; 0x40
 8008ea0:	616b      	str	r3, [r5, #20]
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ea6:	2320      	movs	r3, #32
 8008ea8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008eac:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eb0:	2330      	movs	r3, #48	; 0x30
 8008eb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009058 <_svfiprintf_r+0x1e8>
 8008eb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008eba:	f04f 0901 	mov.w	r9, #1
 8008ebe:	4623      	mov	r3, r4
 8008ec0:	469a      	mov	sl, r3
 8008ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ec6:	b10a      	cbz	r2, 8008ecc <_svfiprintf_r+0x5c>
 8008ec8:	2a25      	cmp	r2, #37	; 0x25
 8008eca:	d1f9      	bne.n	8008ec0 <_svfiprintf_r+0x50>
 8008ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8008ed0:	d00b      	beq.n	8008eea <_svfiprintf_r+0x7a>
 8008ed2:	465b      	mov	r3, fp
 8008ed4:	4622      	mov	r2, r4
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	4638      	mov	r0, r7
 8008eda:	f7ff ff6f 	bl	8008dbc <__ssputs_r>
 8008ede:	3001      	adds	r0, #1
 8008ee0:	f000 80a9 	beq.w	8009036 <_svfiprintf_r+0x1c6>
 8008ee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ee6:	445a      	add	r2, fp
 8008ee8:	9209      	str	r2, [sp, #36]	; 0x24
 8008eea:	f89a 3000 	ldrb.w	r3, [sl]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f000 80a1 	beq.w	8009036 <_svfiprintf_r+0x1c6>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8008efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008efe:	f10a 0a01 	add.w	sl, sl, #1
 8008f02:	9304      	str	r3, [sp, #16]
 8008f04:	9307      	str	r3, [sp, #28]
 8008f06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f0a:	931a      	str	r3, [sp, #104]	; 0x68
 8008f0c:	4654      	mov	r4, sl
 8008f0e:	2205      	movs	r2, #5
 8008f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f14:	4850      	ldr	r0, [pc, #320]	; (8009058 <_svfiprintf_r+0x1e8>)
 8008f16:	f7f7 f963 	bl	80001e0 <memchr>
 8008f1a:	9a04      	ldr	r2, [sp, #16]
 8008f1c:	b9d8      	cbnz	r0, 8008f56 <_svfiprintf_r+0xe6>
 8008f1e:	06d0      	lsls	r0, r2, #27
 8008f20:	bf44      	itt	mi
 8008f22:	2320      	movmi	r3, #32
 8008f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f28:	0711      	lsls	r1, r2, #28
 8008f2a:	bf44      	itt	mi
 8008f2c:	232b      	movmi	r3, #43	; 0x2b
 8008f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f32:	f89a 3000 	ldrb.w	r3, [sl]
 8008f36:	2b2a      	cmp	r3, #42	; 0x2a
 8008f38:	d015      	beq.n	8008f66 <_svfiprintf_r+0xf6>
 8008f3a:	9a07      	ldr	r2, [sp, #28]
 8008f3c:	4654      	mov	r4, sl
 8008f3e:	2000      	movs	r0, #0
 8008f40:	f04f 0c0a 	mov.w	ip, #10
 8008f44:	4621      	mov	r1, r4
 8008f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f4a:	3b30      	subs	r3, #48	; 0x30
 8008f4c:	2b09      	cmp	r3, #9
 8008f4e:	d94d      	bls.n	8008fec <_svfiprintf_r+0x17c>
 8008f50:	b1b0      	cbz	r0, 8008f80 <_svfiprintf_r+0x110>
 8008f52:	9207      	str	r2, [sp, #28]
 8008f54:	e014      	b.n	8008f80 <_svfiprintf_r+0x110>
 8008f56:	eba0 0308 	sub.w	r3, r0, r8
 8008f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	9304      	str	r3, [sp, #16]
 8008f62:	46a2      	mov	sl, r4
 8008f64:	e7d2      	b.n	8008f0c <_svfiprintf_r+0x9c>
 8008f66:	9b03      	ldr	r3, [sp, #12]
 8008f68:	1d19      	adds	r1, r3, #4
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	9103      	str	r1, [sp, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	bfbb      	ittet	lt
 8008f72:	425b      	neglt	r3, r3
 8008f74:	f042 0202 	orrlt.w	r2, r2, #2
 8008f78:	9307      	strge	r3, [sp, #28]
 8008f7a:	9307      	strlt	r3, [sp, #28]
 8008f7c:	bfb8      	it	lt
 8008f7e:	9204      	strlt	r2, [sp, #16]
 8008f80:	7823      	ldrb	r3, [r4, #0]
 8008f82:	2b2e      	cmp	r3, #46	; 0x2e
 8008f84:	d10c      	bne.n	8008fa0 <_svfiprintf_r+0x130>
 8008f86:	7863      	ldrb	r3, [r4, #1]
 8008f88:	2b2a      	cmp	r3, #42	; 0x2a
 8008f8a:	d134      	bne.n	8008ff6 <_svfiprintf_r+0x186>
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	1d1a      	adds	r2, r3, #4
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	9203      	str	r2, [sp, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	bfb8      	it	lt
 8008f98:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f9c:	3402      	adds	r4, #2
 8008f9e:	9305      	str	r3, [sp, #20]
 8008fa0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009068 <_svfiprintf_r+0x1f8>
 8008fa4:	7821      	ldrb	r1, [r4, #0]
 8008fa6:	2203      	movs	r2, #3
 8008fa8:	4650      	mov	r0, sl
 8008faa:	f7f7 f919 	bl	80001e0 <memchr>
 8008fae:	b138      	cbz	r0, 8008fc0 <_svfiprintf_r+0x150>
 8008fb0:	9b04      	ldr	r3, [sp, #16]
 8008fb2:	eba0 000a 	sub.w	r0, r0, sl
 8008fb6:	2240      	movs	r2, #64	; 0x40
 8008fb8:	4082      	lsls	r2, r0
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	3401      	adds	r4, #1
 8008fbe:	9304      	str	r3, [sp, #16]
 8008fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc4:	4825      	ldr	r0, [pc, #148]	; (800905c <_svfiprintf_r+0x1ec>)
 8008fc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fca:	2206      	movs	r2, #6
 8008fcc:	f7f7 f908 	bl	80001e0 <memchr>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	d038      	beq.n	8009046 <_svfiprintf_r+0x1d6>
 8008fd4:	4b22      	ldr	r3, [pc, #136]	; (8009060 <_svfiprintf_r+0x1f0>)
 8008fd6:	bb1b      	cbnz	r3, 8009020 <_svfiprintf_r+0x1b0>
 8008fd8:	9b03      	ldr	r3, [sp, #12]
 8008fda:	3307      	adds	r3, #7
 8008fdc:	f023 0307 	bic.w	r3, r3, #7
 8008fe0:	3308      	adds	r3, #8
 8008fe2:	9303      	str	r3, [sp, #12]
 8008fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fe6:	4433      	add	r3, r6
 8008fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8008fea:	e768      	b.n	8008ebe <_svfiprintf_r+0x4e>
 8008fec:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	2001      	movs	r0, #1
 8008ff4:	e7a6      	b.n	8008f44 <_svfiprintf_r+0xd4>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	3401      	adds	r4, #1
 8008ffa:	9305      	str	r3, [sp, #20]
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	f04f 0c0a 	mov.w	ip, #10
 8009002:	4620      	mov	r0, r4
 8009004:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009008:	3a30      	subs	r2, #48	; 0x30
 800900a:	2a09      	cmp	r2, #9
 800900c:	d903      	bls.n	8009016 <_svfiprintf_r+0x1a6>
 800900e:	2b00      	cmp	r3, #0
 8009010:	d0c6      	beq.n	8008fa0 <_svfiprintf_r+0x130>
 8009012:	9105      	str	r1, [sp, #20]
 8009014:	e7c4      	b.n	8008fa0 <_svfiprintf_r+0x130>
 8009016:	fb0c 2101 	mla	r1, ip, r1, r2
 800901a:	4604      	mov	r4, r0
 800901c:	2301      	movs	r3, #1
 800901e:	e7f0      	b.n	8009002 <_svfiprintf_r+0x192>
 8009020:	ab03      	add	r3, sp, #12
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	462a      	mov	r2, r5
 8009026:	4b0f      	ldr	r3, [pc, #60]	; (8009064 <_svfiprintf_r+0x1f4>)
 8009028:	a904      	add	r1, sp, #16
 800902a:	4638      	mov	r0, r7
 800902c:	f3af 8000 	nop.w
 8009030:	1c42      	adds	r2, r0, #1
 8009032:	4606      	mov	r6, r0
 8009034:	d1d6      	bne.n	8008fe4 <_svfiprintf_r+0x174>
 8009036:	89ab      	ldrh	r3, [r5, #12]
 8009038:	065b      	lsls	r3, r3, #25
 800903a:	f53f af2d 	bmi.w	8008e98 <_svfiprintf_r+0x28>
 800903e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009040:	b01d      	add	sp, #116	; 0x74
 8009042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009046:	ab03      	add	r3, sp, #12
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	462a      	mov	r2, r5
 800904c:	4b05      	ldr	r3, [pc, #20]	; (8009064 <_svfiprintf_r+0x1f4>)
 800904e:	a904      	add	r1, sp, #16
 8009050:	4638      	mov	r0, r7
 8009052:	f000 f879 	bl	8009148 <_printf_i>
 8009056:	e7eb      	b.n	8009030 <_svfiprintf_r+0x1c0>
 8009058:	08009528 	.word	0x08009528
 800905c:	08009532 	.word	0x08009532
 8009060:	00000000 	.word	0x00000000
 8009064:	08008dbd 	.word	0x08008dbd
 8009068:	0800952e 	.word	0x0800952e

0800906c <_printf_common>:
 800906c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009070:	4616      	mov	r6, r2
 8009072:	4699      	mov	r9, r3
 8009074:	688a      	ldr	r2, [r1, #8]
 8009076:	690b      	ldr	r3, [r1, #16]
 8009078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800907c:	4293      	cmp	r3, r2
 800907e:	bfb8      	it	lt
 8009080:	4613      	movlt	r3, r2
 8009082:	6033      	str	r3, [r6, #0]
 8009084:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009088:	4607      	mov	r7, r0
 800908a:	460c      	mov	r4, r1
 800908c:	b10a      	cbz	r2, 8009092 <_printf_common+0x26>
 800908e:	3301      	adds	r3, #1
 8009090:	6033      	str	r3, [r6, #0]
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	0699      	lsls	r1, r3, #26
 8009096:	bf42      	ittt	mi
 8009098:	6833      	ldrmi	r3, [r6, #0]
 800909a:	3302      	addmi	r3, #2
 800909c:	6033      	strmi	r3, [r6, #0]
 800909e:	6825      	ldr	r5, [r4, #0]
 80090a0:	f015 0506 	ands.w	r5, r5, #6
 80090a4:	d106      	bne.n	80090b4 <_printf_common+0x48>
 80090a6:	f104 0a19 	add.w	sl, r4, #25
 80090aa:	68e3      	ldr	r3, [r4, #12]
 80090ac:	6832      	ldr	r2, [r6, #0]
 80090ae:	1a9b      	subs	r3, r3, r2
 80090b0:	42ab      	cmp	r3, r5
 80090b2:	dc26      	bgt.n	8009102 <_printf_common+0x96>
 80090b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090b8:	1e13      	subs	r3, r2, #0
 80090ba:	6822      	ldr	r2, [r4, #0]
 80090bc:	bf18      	it	ne
 80090be:	2301      	movne	r3, #1
 80090c0:	0692      	lsls	r2, r2, #26
 80090c2:	d42b      	bmi.n	800911c <_printf_common+0xb0>
 80090c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090c8:	4649      	mov	r1, r9
 80090ca:	4638      	mov	r0, r7
 80090cc:	47c0      	blx	r8
 80090ce:	3001      	adds	r0, #1
 80090d0:	d01e      	beq.n	8009110 <_printf_common+0xa4>
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	6922      	ldr	r2, [r4, #16]
 80090d6:	f003 0306 	and.w	r3, r3, #6
 80090da:	2b04      	cmp	r3, #4
 80090dc:	bf02      	ittt	eq
 80090de:	68e5      	ldreq	r5, [r4, #12]
 80090e0:	6833      	ldreq	r3, [r6, #0]
 80090e2:	1aed      	subeq	r5, r5, r3
 80090e4:	68a3      	ldr	r3, [r4, #8]
 80090e6:	bf0c      	ite	eq
 80090e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090ec:	2500      	movne	r5, #0
 80090ee:	4293      	cmp	r3, r2
 80090f0:	bfc4      	itt	gt
 80090f2:	1a9b      	subgt	r3, r3, r2
 80090f4:	18ed      	addgt	r5, r5, r3
 80090f6:	2600      	movs	r6, #0
 80090f8:	341a      	adds	r4, #26
 80090fa:	42b5      	cmp	r5, r6
 80090fc:	d11a      	bne.n	8009134 <_printf_common+0xc8>
 80090fe:	2000      	movs	r0, #0
 8009100:	e008      	b.n	8009114 <_printf_common+0xa8>
 8009102:	2301      	movs	r3, #1
 8009104:	4652      	mov	r2, sl
 8009106:	4649      	mov	r1, r9
 8009108:	4638      	mov	r0, r7
 800910a:	47c0      	blx	r8
 800910c:	3001      	adds	r0, #1
 800910e:	d103      	bne.n	8009118 <_printf_common+0xac>
 8009110:	f04f 30ff 	mov.w	r0, #4294967295
 8009114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009118:	3501      	adds	r5, #1
 800911a:	e7c6      	b.n	80090aa <_printf_common+0x3e>
 800911c:	18e1      	adds	r1, r4, r3
 800911e:	1c5a      	adds	r2, r3, #1
 8009120:	2030      	movs	r0, #48	; 0x30
 8009122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009126:	4422      	add	r2, r4
 8009128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800912c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009130:	3302      	adds	r3, #2
 8009132:	e7c7      	b.n	80090c4 <_printf_common+0x58>
 8009134:	2301      	movs	r3, #1
 8009136:	4622      	mov	r2, r4
 8009138:	4649      	mov	r1, r9
 800913a:	4638      	mov	r0, r7
 800913c:	47c0      	blx	r8
 800913e:	3001      	adds	r0, #1
 8009140:	d0e6      	beq.n	8009110 <_printf_common+0xa4>
 8009142:	3601      	adds	r6, #1
 8009144:	e7d9      	b.n	80090fa <_printf_common+0x8e>
	...

08009148 <_printf_i>:
 8009148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800914c:	7e0f      	ldrb	r7, [r1, #24]
 800914e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009150:	2f78      	cmp	r7, #120	; 0x78
 8009152:	4691      	mov	r9, r2
 8009154:	4680      	mov	r8, r0
 8009156:	460c      	mov	r4, r1
 8009158:	469a      	mov	sl, r3
 800915a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800915e:	d807      	bhi.n	8009170 <_printf_i+0x28>
 8009160:	2f62      	cmp	r7, #98	; 0x62
 8009162:	d80a      	bhi.n	800917a <_printf_i+0x32>
 8009164:	2f00      	cmp	r7, #0
 8009166:	f000 80d4 	beq.w	8009312 <_printf_i+0x1ca>
 800916a:	2f58      	cmp	r7, #88	; 0x58
 800916c:	f000 80c0 	beq.w	80092f0 <_printf_i+0x1a8>
 8009170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009178:	e03a      	b.n	80091f0 <_printf_i+0xa8>
 800917a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800917e:	2b15      	cmp	r3, #21
 8009180:	d8f6      	bhi.n	8009170 <_printf_i+0x28>
 8009182:	a101      	add	r1, pc, #4	; (adr r1, 8009188 <_printf_i+0x40>)
 8009184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009188:	080091e1 	.word	0x080091e1
 800918c:	080091f5 	.word	0x080091f5
 8009190:	08009171 	.word	0x08009171
 8009194:	08009171 	.word	0x08009171
 8009198:	08009171 	.word	0x08009171
 800919c:	08009171 	.word	0x08009171
 80091a0:	080091f5 	.word	0x080091f5
 80091a4:	08009171 	.word	0x08009171
 80091a8:	08009171 	.word	0x08009171
 80091ac:	08009171 	.word	0x08009171
 80091b0:	08009171 	.word	0x08009171
 80091b4:	080092f9 	.word	0x080092f9
 80091b8:	08009221 	.word	0x08009221
 80091bc:	080092b3 	.word	0x080092b3
 80091c0:	08009171 	.word	0x08009171
 80091c4:	08009171 	.word	0x08009171
 80091c8:	0800931b 	.word	0x0800931b
 80091cc:	08009171 	.word	0x08009171
 80091d0:	08009221 	.word	0x08009221
 80091d4:	08009171 	.word	0x08009171
 80091d8:	08009171 	.word	0x08009171
 80091dc:	080092bb 	.word	0x080092bb
 80091e0:	682b      	ldr	r3, [r5, #0]
 80091e2:	1d1a      	adds	r2, r3, #4
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	602a      	str	r2, [r5, #0]
 80091e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091f0:	2301      	movs	r3, #1
 80091f2:	e09f      	b.n	8009334 <_printf_i+0x1ec>
 80091f4:	6820      	ldr	r0, [r4, #0]
 80091f6:	682b      	ldr	r3, [r5, #0]
 80091f8:	0607      	lsls	r7, r0, #24
 80091fa:	f103 0104 	add.w	r1, r3, #4
 80091fe:	6029      	str	r1, [r5, #0]
 8009200:	d501      	bpl.n	8009206 <_printf_i+0xbe>
 8009202:	681e      	ldr	r6, [r3, #0]
 8009204:	e003      	b.n	800920e <_printf_i+0xc6>
 8009206:	0646      	lsls	r6, r0, #25
 8009208:	d5fb      	bpl.n	8009202 <_printf_i+0xba>
 800920a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800920e:	2e00      	cmp	r6, #0
 8009210:	da03      	bge.n	800921a <_printf_i+0xd2>
 8009212:	232d      	movs	r3, #45	; 0x2d
 8009214:	4276      	negs	r6, r6
 8009216:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800921a:	485a      	ldr	r0, [pc, #360]	; (8009384 <_printf_i+0x23c>)
 800921c:	230a      	movs	r3, #10
 800921e:	e012      	b.n	8009246 <_printf_i+0xfe>
 8009220:	682b      	ldr	r3, [r5, #0]
 8009222:	6820      	ldr	r0, [r4, #0]
 8009224:	1d19      	adds	r1, r3, #4
 8009226:	6029      	str	r1, [r5, #0]
 8009228:	0605      	lsls	r5, r0, #24
 800922a:	d501      	bpl.n	8009230 <_printf_i+0xe8>
 800922c:	681e      	ldr	r6, [r3, #0]
 800922e:	e002      	b.n	8009236 <_printf_i+0xee>
 8009230:	0641      	lsls	r1, r0, #25
 8009232:	d5fb      	bpl.n	800922c <_printf_i+0xe4>
 8009234:	881e      	ldrh	r6, [r3, #0]
 8009236:	4853      	ldr	r0, [pc, #332]	; (8009384 <_printf_i+0x23c>)
 8009238:	2f6f      	cmp	r7, #111	; 0x6f
 800923a:	bf0c      	ite	eq
 800923c:	2308      	moveq	r3, #8
 800923e:	230a      	movne	r3, #10
 8009240:	2100      	movs	r1, #0
 8009242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009246:	6865      	ldr	r5, [r4, #4]
 8009248:	60a5      	str	r5, [r4, #8]
 800924a:	2d00      	cmp	r5, #0
 800924c:	bfa2      	ittt	ge
 800924e:	6821      	ldrge	r1, [r4, #0]
 8009250:	f021 0104 	bicge.w	r1, r1, #4
 8009254:	6021      	strge	r1, [r4, #0]
 8009256:	b90e      	cbnz	r6, 800925c <_printf_i+0x114>
 8009258:	2d00      	cmp	r5, #0
 800925a:	d04b      	beq.n	80092f4 <_printf_i+0x1ac>
 800925c:	4615      	mov	r5, r2
 800925e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009262:	fb03 6711 	mls	r7, r3, r1, r6
 8009266:	5dc7      	ldrb	r7, [r0, r7]
 8009268:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800926c:	4637      	mov	r7, r6
 800926e:	42bb      	cmp	r3, r7
 8009270:	460e      	mov	r6, r1
 8009272:	d9f4      	bls.n	800925e <_printf_i+0x116>
 8009274:	2b08      	cmp	r3, #8
 8009276:	d10b      	bne.n	8009290 <_printf_i+0x148>
 8009278:	6823      	ldr	r3, [r4, #0]
 800927a:	07de      	lsls	r6, r3, #31
 800927c:	d508      	bpl.n	8009290 <_printf_i+0x148>
 800927e:	6923      	ldr	r3, [r4, #16]
 8009280:	6861      	ldr	r1, [r4, #4]
 8009282:	4299      	cmp	r1, r3
 8009284:	bfde      	ittt	le
 8009286:	2330      	movle	r3, #48	; 0x30
 8009288:	f805 3c01 	strble.w	r3, [r5, #-1]
 800928c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009290:	1b52      	subs	r2, r2, r5
 8009292:	6122      	str	r2, [r4, #16]
 8009294:	f8cd a000 	str.w	sl, [sp]
 8009298:	464b      	mov	r3, r9
 800929a:	aa03      	add	r2, sp, #12
 800929c:	4621      	mov	r1, r4
 800929e:	4640      	mov	r0, r8
 80092a0:	f7ff fee4 	bl	800906c <_printf_common>
 80092a4:	3001      	adds	r0, #1
 80092a6:	d14a      	bne.n	800933e <_printf_i+0x1f6>
 80092a8:	f04f 30ff 	mov.w	r0, #4294967295
 80092ac:	b004      	add	sp, #16
 80092ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	f043 0320 	orr.w	r3, r3, #32
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	4833      	ldr	r0, [pc, #204]	; (8009388 <_printf_i+0x240>)
 80092bc:	2778      	movs	r7, #120	; 0x78
 80092be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80092c2:	6823      	ldr	r3, [r4, #0]
 80092c4:	6829      	ldr	r1, [r5, #0]
 80092c6:	061f      	lsls	r7, r3, #24
 80092c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80092cc:	d402      	bmi.n	80092d4 <_printf_i+0x18c>
 80092ce:	065f      	lsls	r7, r3, #25
 80092d0:	bf48      	it	mi
 80092d2:	b2b6      	uxthmi	r6, r6
 80092d4:	07df      	lsls	r7, r3, #31
 80092d6:	bf48      	it	mi
 80092d8:	f043 0320 	orrmi.w	r3, r3, #32
 80092dc:	6029      	str	r1, [r5, #0]
 80092de:	bf48      	it	mi
 80092e0:	6023      	strmi	r3, [r4, #0]
 80092e2:	b91e      	cbnz	r6, 80092ec <_printf_i+0x1a4>
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	f023 0320 	bic.w	r3, r3, #32
 80092ea:	6023      	str	r3, [r4, #0]
 80092ec:	2310      	movs	r3, #16
 80092ee:	e7a7      	b.n	8009240 <_printf_i+0xf8>
 80092f0:	4824      	ldr	r0, [pc, #144]	; (8009384 <_printf_i+0x23c>)
 80092f2:	e7e4      	b.n	80092be <_printf_i+0x176>
 80092f4:	4615      	mov	r5, r2
 80092f6:	e7bd      	b.n	8009274 <_printf_i+0x12c>
 80092f8:	682b      	ldr	r3, [r5, #0]
 80092fa:	6826      	ldr	r6, [r4, #0]
 80092fc:	6961      	ldr	r1, [r4, #20]
 80092fe:	1d18      	adds	r0, r3, #4
 8009300:	6028      	str	r0, [r5, #0]
 8009302:	0635      	lsls	r5, r6, #24
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	d501      	bpl.n	800930c <_printf_i+0x1c4>
 8009308:	6019      	str	r1, [r3, #0]
 800930a:	e002      	b.n	8009312 <_printf_i+0x1ca>
 800930c:	0670      	lsls	r0, r6, #25
 800930e:	d5fb      	bpl.n	8009308 <_printf_i+0x1c0>
 8009310:	8019      	strh	r1, [r3, #0]
 8009312:	2300      	movs	r3, #0
 8009314:	6123      	str	r3, [r4, #16]
 8009316:	4615      	mov	r5, r2
 8009318:	e7bc      	b.n	8009294 <_printf_i+0x14c>
 800931a:	682b      	ldr	r3, [r5, #0]
 800931c:	1d1a      	adds	r2, r3, #4
 800931e:	602a      	str	r2, [r5, #0]
 8009320:	681d      	ldr	r5, [r3, #0]
 8009322:	6862      	ldr	r2, [r4, #4]
 8009324:	2100      	movs	r1, #0
 8009326:	4628      	mov	r0, r5
 8009328:	f7f6 ff5a 	bl	80001e0 <memchr>
 800932c:	b108      	cbz	r0, 8009332 <_printf_i+0x1ea>
 800932e:	1b40      	subs	r0, r0, r5
 8009330:	6060      	str	r0, [r4, #4]
 8009332:	6863      	ldr	r3, [r4, #4]
 8009334:	6123      	str	r3, [r4, #16]
 8009336:	2300      	movs	r3, #0
 8009338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800933c:	e7aa      	b.n	8009294 <_printf_i+0x14c>
 800933e:	6923      	ldr	r3, [r4, #16]
 8009340:	462a      	mov	r2, r5
 8009342:	4649      	mov	r1, r9
 8009344:	4640      	mov	r0, r8
 8009346:	47d0      	blx	sl
 8009348:	3001      	adds	r0, #1
 800934a:	d0ad      	beq.n	80092a8 <_printf_i+0x160>
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	079b      	lsls	r3, r3, #30
 8009350:	d413      	bmi.n	800937a <_printf_i+0x232>
 8009352:	68e0      	ldr	r0, [r4, #12]
 8009354:	9b03      	ldr	r3, [sp, #12]
 8009356:	4298      	cmp	r0, r3
 8009358:	bfb8      	it	lt
 800935a:	4618      	movlt	r0, r3
 800935c:	e7a6      	b.n	80092ac <_printf_i+0x164>
 800935e:	2301      	movs	r3, #1
 8009360:	4632      	mov	r2, r6
 8009362:	4649      	mov	r1, r9
 8009364:	4640      	mov	r0, r8
 8009366:	47d0      	blx	sl
 8009368:	3001      	adds	r0, #1
 800936a:	d09d      	beq.n	80092a8 <_printf_i+0x160>
 800936c:	3501      	adds	r5, #1
 800936e:	68e3      	ldr	r3, [r4, #12]
 8009370:	9903      	ldr	r1, [sp, #12]
 8009372:	1a5b      	subs	r3, r3, r1
 8009374:	42ab      	cmp	r3, r5
 8009376:	dcf2      	bgt.n	800935e <_printf_i+0x216>
 8009378:	e7eb      	b.n	8009352 <_printf_i+0x20a>
 800937a:	2500      	movs	r5, #0
 800937c:	f104 0619 	add.w	r6, r4, #25
 8009380:	e7f5      	b.n	800936e <_printf_i+0x226>
 8009382:	bf00      	nop
 8009384:	08009539 	.word	0x08009539
 8009388:	0800954a 	.word	0x0800954a

0800938c <memmove>:
 800938c:	4288      	cmp	r0, r1
 800938e:	b510      	push	{r4, lr}
 8009390:	eb01 0402 	add.w	r4, r1, r2
 8009394:	d902      	bls.n	800939c <memmove+0x10>
 8009396:	4284      	cmp	r4, r0
 8009398:	4623      	mov	r3, r4
 800939a:	d807      	bhi.n	80093ac <memmove+0x20>
 800939c:	1e43      	subs	r3, r0, #1
 800939e:	42a1      	cmp	r1, r4
 80093a0:	d008      	beq.n	80093b4 <memmove+0x28>
 80093a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093aa:	e7f8      	b.n	800939e <memmove+0x12>
 80093ac:	4402      	add	r2, r0
 80093ae:	4601      	mov	r1, r0
 80093b0:	428a      	cmp	r2, r1
 80093b2:	d100      	bne.n	80093b6 <memmove+0x2a>
 80093b4:	bd10      	pop	{r4, pc}
 80093b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093be:	e7f7      	b.n	80093b0 <memmove+0x24>

080093c0 <_sbrk_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	4d06      	ldr	r5, [pc, #24]	; (80093dc <_sbrk_r+0x1c>)
 80093c4:	2300      	movs	r3, #0
 80093c6:	4604      	mov	r4, r0
 80093c8:	4608      	mov	r0, r1
 80093ca:	602b      	str	r3, [r5, #0]
 80093cc:	f7f7 fd3a 	bl	8000e44 <_sbrk>
 80093d0:	1c43      	adds	r3, r0, #1
 80093d2:	d102      	bne.n	80093da <_sbrk_r+0x1a>
 80093d4:	682b      	ldr	r3, [r5, #0]
 80093d6:	b103      	cbz	r3, 80093da <_sbrk_r+0x1a>
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	bd38      	pop	{r3, r4, r5, pc}
 80093dc:	200020bc 	.word	0x200020bc

080093e0 <memcpy>:
 80093e0:	440a      	add	r2, r1
 80093e2:	4291      	cmp	r1, r2
 80093e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80093e8:	d100      	bne.n	80093ec <memcpy+0xc>
 80093ea:	4770      	bx	lr
 80093ec:	b510      	push	{r4, lr}
 80093ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093f6:	4291      	cmp	r1, r2
 80093f8:	d1f9      	bne.n	80093ee <memcpy+0xe>
 80093fa:	bd10      	pop	{r4, pc}

080093fc <_realloc_r>:
 80093fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009400:	4680      	mov	r8, r0
 8009402:	4614      	mov	r4, r2
 8009404:	460e      	mov	r6, r1
 8009406:	b921      	cbnz	r1, 8009412 <_realloc_r+0x16>
 8009408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800940c:	4611      	mov	r1, r2
 800940e:	f7ff bc49 	b.w	8008ca4 <_malloc_r>
 8009412:	b92a      	cbnz	r2, 8009420 <_realloc_r+0x24>
 8009414:	f7ff fbda 	bl	8008bcc <_free_r>
 8009418:	4625      	mov	r5, r4
 800941a:	4628      	mov	r0, r5
 800941c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009420:	f000 f81b 	bl	800945a <_malloc_usable_size_r>
 8009424:	4284      	cmp	r4, r0
 8009426:	4607      	mov	r7, r0
 8009428:	d802      	bhi.n	8009430 <_realloc_r+0x34>
 800942a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800942e:	d812      	bhi.n	8009456 <_realloc_r+0x5a>
 8009430:	4621      	mov	r1, r4
 8009432:	4640      	mov	r0, r8
 8009434:	f7ff fc36 	bl	8008ca4 <_malloc_r>
 8009438:	4605      	mov	r5, r0
 800943a:	2800      	cmp	r0, #0
 800943c:	d0ed      	beq.n	800941a <_realloc_r+0x1e>
 800943e:	42bc      	cmp	r4, r7
 8009440:	4622      	mov	r2, r4
 8009442:	4631      	mov	r1, r6
 8009444:	bf28      	it	cs
 8009446:	463a      	movcs	r2, r7
 8009448:	f7ff ffca 	bl	80093e0 <memcpy>
 800944c:	4631      	mov	r1, r6
 800944e:	4640      	mov	r0, r8
 8009450:	f7ff fbbc 	bl	8008bcc <_free_r>
 8009454:	e7e1      	b.n	800941a <_realloc_r+0x1e>
 8009456:	4635      	mov	r5, r6
 8009458:	e7df      	b.n	800941a <_realloc_r+0x1e>

0800945a <_malloc_usable_size_r>:
 800945a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800945e:	1f18      	subs	r0, r3, #4
 8009460:	2b00      	cmp	r3, #0
 8009462:	bfbc      	itt	lt
 8009464:	580b      	ldrlt	r3, [r1, r0]
 8009466:	18c0      	addlt	r0, r0, r3
 8009468:	4770      	bx	lr
	...

0800946c <_init>:
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	bf00      	nop
 8009470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009472:	bc08      	pop	{r3}
 8009474:	469e      	mov	lr, r3
 8009476:	4770      	bx	lr

08009478 <_fini>:
 8009478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947a:	bf00      	nop
 800947c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800947e:	bc08      	pop	{r3}
 8009480:	469e      	mov	lr, r3
 8009482:	4770      	bx	lr
