
STM32_SPI_LIS302DL_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08009484  08009484  00019484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800955c  0800955c  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800955c  0800955c  0001955c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009564  08009564  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009564  08009564  00019564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009568  08009568  00019568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800956c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020160  2**0
                  CONTENTS
 10 .bss          00001e48  20000160  20000160  00020160  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001fa8  20001fa8  00020160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   000165e6  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c1c  00000000  00000000  00036776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001248  00000000  00000000  0003a398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001088  00000000  00000000  0003b5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000250e1  00000000  00000000  0003c668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a146  00000000  00000000  00061749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cacd8  00000000  00000000  0007b88f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146567  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e3c  00000000  00000000  001465b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800946c 	.word	0x0800946c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	0800946c 	.word	0x0800946c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	; 0x30
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
 800059e:	4b72      	ldr	r3, [pc, #456]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a71      	ldr	r2, [pc, #452]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005a4:	f043 0310 	orr.w	r3, r3, #16
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b6f      	ldr	r3, [pc, #444]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0310 	and.w	r3, r3, #16
 80005b2:	61bb      	str	r3, [r7, #24]
 80005b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	4b6b      	ldr	r3, [pc, #428]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a6a      	ldr	r2, [pc, #424]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b68      	ldr	r3, [pc, #416]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	4b64      	ldr	r3, [pc, #400]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a63      	ldr	r2, [pc, #396]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b61      	ldr	r3, [pc, #388]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	4b5d      	ldr	r3, [pc, #372]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a5c      	ldr	r2, [pc, #368]	; (8000768 <MX_GPIO_Init+0x1e4>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b5a      	ldr	r3, [pc, #360]	; (8000768 <MX_GPIO_Init+0x1e4>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	4b56      	ldr	r3, [pc, #344]	; (8000768 <MX_GPIO_Init+0x1e4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a55      	ldr	r2, [pc, #340]	; (8000768 <MX_GPIO_Init+0x1e4>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b53      	ldr	r3, [pc, #332]	; (8000768 <MX_GPIO_Init+0x1e4>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <MX_GPIO_Init+0x1e4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a4e      	ldr	r2, [pc, #312]	; (8000768 <MX_GPIO_Init+0x1e4>)
 8000630:	f043 0308 	orr.w	r3, r3, #8
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b4c      	ldr	r3, [pc, #304]	; (8000768 <MX_GPIO_Init+0x1e4>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2108      	movs	r1, #8
 8000646:	4849      	ldr	r0, [pc, #292]	; (800076c <MX_GPIO_Init+0x1e8>)
 8000648:	f000 ffce 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2101      	movs	r1, #1
 8000650:	4847      	ldr	r0, [pc, #284]	; (8000770 <MX_GPIO_Init+0x1ec>)
 8000652:	f000 ffc9 	bl	80015e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000656:	2200      	movs	r2, #0
 8000658:	f24f 0110 	movw	r1, #61456	; 0xf010
 800065c:	4845      	ldr	r0, [pc, #276]	; (8000774 <MX_GPIO_Init+0x1f0>)
 800065e:	f000 ffc3 	bl	80015e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000662:	2308      	movs	r3, #8
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	483c      	ldr	r0, [pc, #240]	; (800076c <MX_GPIO_Init+0x1e8>)
 800067a:	f000 fe01 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800067e:	2301      	movs	r3, #1
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	2301      	movs	r3, #1
 8000684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	4619      	mov	r1, r3
 8000694:	4836      	ldr	r0, [pc, #216]	; (8000770 <MX_GPIO_Init+0x1ec>)
 8000696:	f000 fdf3 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800069a:	2308      	movs	r3, #8
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006aa:	2305      	movs	r3, #5
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4619      	mov	r1, r3
 80006b4:	482e      	ldr	r0, [pc, #184]	; (8000770 <MX_GPIO_Init+0x1ec>)
 80006b6:	f000 fde3 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006be:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	482a      	ldr	r0, [pc, #168]	; (8000778 <MX_GPIO_Init+0x1f4>)
 80006d0:	f000 fdd6 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006d4:	2304      	movs	r3, #4
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d8:	2300      	movs	r3, #0
 80006da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	4825      	ldr	r0, [pc, #148]	; (800077c <MX_GPIO_Init+0x1f8>)
 80006e8:	f000 fdca 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006fe:	2305      	movs	r3, #5
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4619      	mov	r1, r3
 8000708:	481c      	ldr	r0, [pc, #112]	; (800077c <MX_GPIO_Init+0x1f8>)
 800070a:	f000 fdb9 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800070e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000712:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2300      	movs	r3, #0
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	4813      	ldr	r0, [pc, #76]	; (8000774 <MX_GPIO_Init+0x1f0>)
 8000728:	f000 fdaa 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800072c:	2320      	movs	r3, #32
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4619      	mov	r1, r3
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <MX_GPIO_Init+0x1f0>)
 8000740:	f000 fd9e 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000744:	2302      	movs	r3, #2
 8000746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000748:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800074c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4619      	mov	r1, r3
 8000758:	4804      	ldr	r0, [pc, #16]	; (800076c <MX_GPIO_Init+0x1e8>)
 800075a:	f000 fd91 	bl	8001280 <HAL_GPIO_Init>

}
 800075e:	bf00      	nop
 8000760:	3730      	adds	r7, #48	; 0x30
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40021000 	.word	0x40021000
 8000770:	40020800 	.word	0x40020800
 8000774:	40020c00 	.word	0x40020c00
 8000778:	40020000 	.word	0x40020000
 800077c:	40020400 	.word	0x40020400

08000780 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_I2C1_Init+0x50>)
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <MX_I2C1_Init+0x54>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_I2C1_Init+0x50>)
 800078c:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_I2C1_Init+0x58>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_I2C1_Init+0x50>)
 800079e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007be:	f000 ff47 	bl	8001650 <HAL_I2C_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007c8:	f000 fa60 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000017c 	.word	0x2000017c
 80007d4:	40005400 	.word	0x40005400
 80007d8:	000186a0 	.word	0x000186a0

080007dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a19      	ldr	r2, [pc, #100]	; (8000860 <HAL_I2C_MspInit+0x84>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d12c      	bne.n	8000858 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800081a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000820:	2312      	movs	r3, #18
 8000822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000824:	2301      	movs	r3, #1
 8000826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800082c:	2304      	movs	r3, #4
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <HAL_I2C_MspInit+0x8c>)
 8000838:	f000 fd22 	bl	8001280 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <HAL_I2C_MspInit+0x88>)
 8000846:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <HAL_I2C_MspInit+0x88>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40005400 	.word	0x40005400
 8000864:	40023800 	.word	0x40023800
 8000868:	40020400 	.word	0x40020400

0800086c <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000872:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <MX_I2S3_Init+0x58>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <MX_I2S3_Init+0x54>)
 800088c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000890:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_I2S3_Init+0x54>)
 8000894:	4a0c      	ldr	r2, [pc, #48]	; (80008c8 <MX_I2S3_Init+0x5c>)
 8000896:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_I2S3_Init+0x54>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_I2S3_Init+0x54>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_I2S3_Init+0x54>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_I2S3_Init+0x54>)
 80008ac:	f001 f814 	bl	80018d8 <HAL_I2S_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008b6:	f000 f9e9 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200001d0 	.word	0x200001d0
 80008c4:	40003c00 	.word	0x40003c00
 80008c8:	00017700 	.word	0x00017700

080008cc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08e      	sub	sp, #56	; 0x38
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a31      	ldr	r2, [pc, #196]	; (80009bc <HAL_I2S_MspInit+0xf0>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d15a      	bne.n	80009b2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008fc:	2301      	movs	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000900:	23c0      	movs	r3, #192	; 0xc0
 8000902:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000904:	2302      	movs	r3, #2
 8000906:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4618      	mov	r0, r3
 800090e:	f003 fb85 	bl	800401c <HAL_RCCEx_PeriphCLKConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000918:	f000 f9b8 	bl	8000c8c <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a26      	ldr	r2, [pc, #152]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 8000926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	4b20      	ldr	r3, [pc, #128]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000940:	4a1f      	ldr	r2, [pc, #124]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	6313      	str	r3, [r2, #48]	; 0x30
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6313      	str	r3, [r2, #48]	; 0x30
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <HAL_I2S_MspInit+0xf4>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000970:	2310      	movs	r3, #16
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000980:	2306      	movs	r3, #6
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000988:	4619      	mov	r1, r3
 800098a:	480e      	ldr	r0, [pc, #56]	; (80009c4 <HAL_I2S_MspInit+0xf8>)
 800098c:	f000 fc78 	bl	8001280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000990:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009a2:	2306      	movs	r3, #6
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	4806      	ldr	r0, [pc, #24]	; (80009c8 <HAL_I2S_MspInit+0xfc>)
 80009ae:	f000 fc67 	bl	8001280 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009b2:	bf00      	nop
 80009b4:	3738      	adds	r7, #56	; 0x38
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40003c00 	.word	0x40003c00
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000
 80009c8:	40020800 	.word	0x40020800

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b5b0      	push	{r4, r5, r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d2:	f000 faad 	bl	8000f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d6:	f000 f8ef 	bl	8000bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009da:	f7ff fdd3 	bl	8000584 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009de:	f7ff fecf 	bl	8000780 <MX_I2C1_Init>
  MX_I2S3_Init();
 80009e2:	f7ff ff43 	bl	800086c <MX_I2S3_Init>
  MX_SPI1_Init();
 80009e6:	f000 f957 	bl	8000c98 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80009ea:	f007 fb63 	bl	80080b4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // Config accelerometer

  // Read WHOAMI register
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2108      	movs	r1, #8
 80009f2:	4863      	ldr	r0, [pc, #396]	; (8000b80 <main+0x1b4>)
 80009f4:	f000 fdf8 	bl	80015e8 <HAL_GPIO_WritePin>
  outdata[0] = 0x0f | 0x80 ;  // read whoami
 80009f8:	4b62      	ldr	r3, [pc, #392]	; (8000b84 <main+0x1b8>)
 80009fa:	228f      	movs	r2, #143	; 0x8f
 80009fc:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	2302      	movs	r3, #2
 8000a06:	4a60      	ldr	r2, [pc, #384]	; (8000b88 <main+0x1bc>)
 8000a08:	495e      	ldr	r1, [pc, #376]	; (8000b84 <main+0x1b8>)
 8000a0a:	4860      	ldr	r0, [pc, #384]	; (8000b8c <main+0x1c0>)
 8000a0c:	f003 fccf 	bl	80043ae <HAL_SPI_TransmitReceive>
  lis_id = indata[1];
 8000a10:	4b5d      	ldr	r3, [pc, #372]	; (8000b88 <main+0x1bc>)
 8000a12:	785a      	ldrb	r2, [r3, #1]
 8000a14:	4b5e      	ldr	r3, [pc, #376]	; (8000b90 <main+0x1c4>)
 8000a16:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2108      	movs	r1, #8
 8000a1c:	4858      	ldr	r0, [pc, #352]	; (8000b80 <main+0x1b4>)
 8000a1e:	f000 fde3 	bl	80015e8 <HAL_GPIO_WritePin>

  HAL_Delay(500);
 8000a22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a26:	f000 faf5 	bl	8001014 <HAL_Delay>

  // Read WHOAMI register
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2108      	movs	r1, #8
 8000a2e:	4854      	ldr	r0, [pc, #336]	; (8000b80 <main+0x1b4>)
 8000a30:	f000 fdda 	bl	80015e8 <HAL_GPIO_WritePin>
  outdata[0] = 0x20 ;  // switch on axes
 8000a34:	4b53      	ldr	r3, [pc, #332]	; (8000b84 <main+0x1b8>)
 8000a36:	2220      	movs	r2, #32
 8000a38:	701a      	strb	r2, [r3, #0]
  outdata[1] = 0x47 ;
 8000a3a:	4b52      	ldr	r3, [pc, #328]	; (8000b84 <main+0x1b8>)
 8000a3c:	2247      	movs	r2, #71	; 0x47
 8000a3e:	705a      	strb	r2, [r3, #1]
  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2302      	movs	r3, #2
 8000a48:	4a4f      	ldr	r2, [pc, #316]	; (8000b88 <main+0x1bc>)
 8000a4a:	494e      	ldr	r1, [pc, #312]	; (8000b84 <main+0x1b8>)
 8000a4c:	484f      	ldr	r0, [pc, #316]	; (8000b8c <main+0x1c0>)
 8000a4e:	f003 fcae 	bl	80043ae <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000a52:	2201      	movs	r2, #1
 8000a54:	2108      	movs	r1, #8
 8000a56:	484a      	ldr	r0, [pc, #296]	; (8000b80 <main+0x1b4>)
 8000a58:	f000 fdc6 	bl	80015e8 <HAL_GPIO_WritePin>

  HAL_Delay(500);
 8000a5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a60:	f000 fad8 	bl	8001014 <HAL_Delay>
  outdata[1] = 0x00 ;
 8000a64:	4b47      	ldr	r3, [pc, #284]	; (8000b84 <main+0x1b8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	705a      	strb	r2, [r3, #1]
//
//	   HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
		 // beri naklon po x osi -> Naslov 0x29


		  outdata[0] = 0x29 | 0x80  ;  // read x
 8000a6a:	4b46      	ldr	r3, [pc, #280]	; (8000b84 <main+0x1b8>)
 8000a6c:	22a9      	movs	r2, #169	; 0xa9
 8000a6e:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2108      	movs	r1, #8
 8000a74:	4842      	ldr	r0, [pc, #264]	; (8000b80 <main+0x1b4>)
 8000a76:	f000 fdb7 	bl	80015e8 <HAL_GPIO_WritePin>
		  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	2302      	movs	r3, #2
 8000a82:	4a41      	ldr	r2, [pc, #260]	; (8000b88 <main+0x1bc>)
 8000a84:	493f      	ldr	r1, [pc, #252]	; (8000b84 <main+0x1b8>)
 8000a86:	4841      	ldr	r0, [pc, #260]	; (8000b8c <main+0x1c0>)
 8000a88:	f003 fc91 	bl	80043ae <HAL_SPI_TransmitReceive>
//			 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
		  AccelX = indata[1];
 8000a8c:	4b3e      	ldr	r3, [pc, #248]	; (8000b88 <main+0x1bc>)
 8000a8e:	785b      	ldrb	r3, [r3, #1]
 8000a90:	b25a      	sxtb	r2, r3
 8000a92:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <main+0x1c8>)
 8000a94:	701a      	strb	r2, [r3, #0]

		  outdata[0] = 0x2B | 0x80  ;  // read y
 8000a96:	4b3b      	ldr	r3, [pc, #236]	; (8000b84 <main+0x1b8>)
 8000a98:	22ab      	movs	r2, #171	; 0xab
 8000a9a:	701a      	strb	r2, [r3, #0]
//		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
		  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	4a38      	ldr	r2, [pc, #224]	; (8000b88 <main+0x1bc>)
 8000aa6:	4937      	ldr	r1, [pc, #220]	; (8000b84 <main+0x1b8>)
 8000aa8:	4838      	ldr	r0, [pc, #224]	; (8000b8c <main+0x1c0>)
 8000aaa:	f003 fc80 	bl	80043ae <HAL_SPI_TransmitReceive>
//			 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
		  AccelY = indata[1];
 8000aae:	4b36      	ldr	r3, [pc, #216]	; (8000b88 <main+0x1bc>)
 8000ab0:	785b      	ldrb	r3, [r3, #1]
 8000ab2:	b25a      	sxtb	r2, r3
 8000ab4:	4b38      	ldr	r3, [pc, #224]	; (8000b98 <main+0x1cc>)
 8000ab6:	701a      	strb	r2, [r3, #0]

		  outdata[0] = 0x2D | 0x80  ;  // read z
 8000ab8:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <main+0x1b8>)
 8000aba:	22ad      	movs	r2, #173	; 0xad
 8000abc:	701a      	strb	r2, [r3, #0]
//		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
		  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	4a30      	ldr	r2, [pc, #192]	; (8000b88 <main+0x1bc>)
 8000ac8:	492e      	ldr	r1, [pc, #184]	; (8000b84 <main+0x1b8>)
 8000aca:	4830      	ldr	r0, [pc, #192]	; (8000b8c <main+0x1c0>)
 8000acc:	f003 fc6f 	bl	80043ae <HAL_SPI_TransmitReceive>
			 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2108      	movs	r1, #8
 8000ad4:	482a      	ldr	r0, [pc, #168]	; (8000b80 <main+0x1b4>)
 8000ad6:	f000 fd87 	bl	80015e8 <HAL_GPIO_WritePin>
		  AccelZ = indata[1];
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <main+0x1bc>)
 8000adc:	785b      	ldrb	r3, [r3, #1]
 8000ade:	b25a      	sxtb	r2, r3
 8000ae0:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <main+0x1d0>)
 8000ae2:	701a      	strb	r2, [r3, #0]
//	      AccelVal = g_nZAx;
////	      USART_SendNumber(g_nZAx);
//	    }
//

	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000ae4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae8:	482d      	ldr	r0, [pc, #180]	; (8000ba0 <main+0x1d4>)
 8000aea:	f000 fd96 	bl	800161a <HAL_GPIO_TogglePin>
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000aee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af2:	482b      	ldr	r0, [pc, #172]	; (8000ba0 <main+0x1d4>)
 8000af4:	f000 fd91 	bl	800161a <HAL_GPIO_TogglePin>
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000af8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000afc:	4828      	ldr	r0, [pc, #160]	; (8000ba0 <main+0x1d4>)
 8000afe:	f000 fd8c 	bl	800161a <HAL_GPIO_TogglePin>

	 KeyState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000b02:	2101      	movs	r1, #1
 8000b04:	4827      	ldr	r0, [pc, #156]	; (8000ba4 <main+0x1d8>)
 8000b06:	f000 fd57 	bl	80015b8 <HAL_GPIO_ReadPin>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <main+0x1dc>)
 8000b10:	601a      	str	r2, [r3, #0]
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, KeyState);
 8000b12:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <main+0x1dc>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b1e:	4820      	ldr	r0, [pc, #128]	; (8000ba0 <main+0x1d4>)
 8000b20:	f000 fd62 	bl	80015e8 <HAL_GPIO_WritePin>


	  snprintf(SendBuffer,BUFSIZE,"Hello World [%d]: Key:%04d Accel[ID:%02x] X:%04d Y:%d Z:%04d\r\n",Counter++,KeyState,lis_id,AccelX,AccelY,AccelZ);
 8000b24:	4b21      	ldr	r3, [pc, #132]	; (8000bac <main+0x1e0>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	1c5a      	adds	r2, r3, #1
 8000b2a:	4920      	ldr	r1, [pc, #128]	; (8000bac <main+0x1e0>)
 8000b2c:	600a      	str	r2, [r1, #0]
 8000b2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ba8 <main+0x1dc>)
 8000b30:	6812      	ldr	r2, [r2, #0]
 8000b32:	4917      	ldr	r1, [pc, #92]	; (8000b90 <main+0x1c4>)
 8000b34:	7809      	ldrb	r1, [r1, #0]
 8000b36:	4608      	mov	r0, r1
 8000b38:	4916      	ldr	r1, [pc, #88]	; (8000b94 <main+0x1c8>)
 8000b3a:	f991 1000 	ldrsb.w	r1, [r1]
 8000b3e:	460c      	mov	r4, r1
 8000b40:	4915      	ldr	r1, [pc, #84]	; (8000b98 <main+0x1cc>)
 8000b42:	f991 1000 	ldrsb.w	r1, [r1]
 8000b46:	460d      	mov	r5, r1
 8000b48:	4914      	ldr	r1, [pc, #80]	; (8000b9c <main+0x1d0>)
 8000b4a:	f991 1000 	ldrsb.w	r1, [r1]
 8000b4e:	9104      	str	r1, [sp, #16]
 8000b50:	9503      	str	r5, [sp, #12]
 8000b52:	9402      	str	r4, [sp, #8]
 8000b54:	9001      	str	r0, [sp, #4]
 8000b56:	9200      	str	r2, [sp, #0]
 8000b58:	4a15      	ldr	r2, [pc, #84]	; (8000bb0 <main+0x1e4>)
 8000b5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5e:	4815      	ldr	r0, [pc, #84]	; (8000bb4 <main+0x1e8>)
 8000b60:	f008 f802 	bl	8008b68 <sniprintf>
	  CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8000b64:	4813      	ldr	r0, [pc, #76]	; (8000bb4 <main+0x1e8>)
 8000b66:	f7ff fb33 	bl	80001d0 <strlen>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <main+0x1e8>)
 8000b70:	f007 fb5e 	bl	8008230 <CDC_Transmit_FS>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8000b74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b78:	f000 fa4c 	bl	8001014 <HAL_Delay>
  {
 8000b7c:	e775      	b.n	8000a6a <main+0x9e>
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000
 8000b84:	20000324 	.word	0x20000324
 8000b88:	20000320 	.word	0x20000320
 8000b8c:	2000032c 	.word	0x2000032c
 8000b90:	20000326 	.word	0x20000326
 8000b94:	20000327 	.word	0x20000327
 8000b98:	20000328 	.word	0x20000328
 8000b9c:	20000329 	.word	0x20000329
 8000ba0:	40020c00 	.word	0x40020c00
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	2000031c 	.word	0x2000031c
 8000bac:	20000318 	.word	0x20000318
 8000bb0:	08009484 	.word	0x08009484
 8000bb4:	20000218 	.word	0x20000218

08000bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b094      	sub	sp, #80	; 0x50
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	f107 0320 	add.w	r3, r7, #32
 8000bc2:	2230      	movs	r2, #48	; 0x30
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f007 ffc6 	bl	8008b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <SystemClock_Config+0xcc>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	4a27      	ldr	r2, [pc, #156]	; (8000c84 <SystemClock_Config+0xcc>)
 8000be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bea:	6413      	str	r3, [r2, #64]	; 0x40
 8000bec:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <SystemClock_Config+0xcc>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <SystemClock_Config+0xd0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <SystemClock_Config+0xd0>)
 8000c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <SystemClock_Config+0xd0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c14:	2301      	movs	r3, #1
 8000c16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c2c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c36:	2307      	movs	r3, #7
 8000c38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3a:	f107 0320 	add.w	r3, r7, #32
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 fd68 	bl	8003714 <HAL_RCC_OscConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c4a:	f000 f81f 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4e:	230f      	movs	r3, #15
 8000c50:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c52:	2302      	movs	r3, #2
 8000c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c5a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c66:	f107 030c 	add.w	r3, r7, #12
 8000c6a:	2105      	movs	r1, #5
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f002 ffc9 	bl	8003c04 <HAL_RCC_ClockConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c78:	f000 f808 	bl	8000c8c <Error_Handler>
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	3750      	adds	r7, #80	; 0x50
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40007000 	.word	0x40007000

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <Error_Handler+0x8>
	...

08000c98 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000c9e:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <MX_SPI1_Init+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000ca4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000ccc:	2238      	movs	r2, #56	; 0x38
 8000cce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000ce4:	220a      	movs	r2, #10
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_SPI1_Init+0x64>)
 8000cea:	f003 fad7 	bl	800429c <HAL_SPI_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cf4:	f7ff ffca 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000032c 	.word	0x2000032c
 8000d00:	40013000 	.word	0x40013000

08000d04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <HAL_SPI_MspInit+0x84>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d12b      	bne.n	8000d7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a17      	ldr	r2, [pc, #92]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_SPI_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d5e:	23e0      	movs	r3, #224	; 0xe0
 8000d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_SPI_MspInit+0x8c>)
 8000d7a:	f000 fa81 	bl	8001280 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	; 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40013000 	.word	0x40013000
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020000 	.word	0x40020000

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dd2:	2007      	movs	r0, #7
 8000dd4:	f000 fa12 	bl	80011fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40023800 	.word	0x40023800

08000de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <NMI_Handler+0x4>

08000dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <HardFault_Handler+0x4>

08000df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <MemManage_Handler+0x4>

08000df6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e30:	f000 f8d0 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <OTG_FS_IRQHandler+0x10>)
 8000e3e:	f001 fb3b 	bl	80024b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	2000186c 	.word	0x2000186c

08000e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e54:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <_sbrk+0x5c>)
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <_sbrk+0x60>)
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e60:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d102      	bne.n	8000e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <_sbrk+0x64>)
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <_sbrk+0x68>)
 8000e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d207      	bcs.n	8000e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e7c:	f007 fe42 	bl	8008b04 <__errno>
 8000e80:	4603      	mov	r3, r0
 8000e82:	220c      	movs	r2, #12
 8000e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8a:	e009      	b.n	8000ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <_sbrk+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <_sbrk+0x64>)
 8000e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3718      	adds	r7, #24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20020000 	.word	0x20020000
 8000eac:	00000400 	.word	0x00000400
 8000eb0:	20000384 	.word	0x20000384
 8000eb4:	20001fa8 	.word	0x20001fa8

08000eb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <SystemInit+0x20>)
 8000ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ec2:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <SystemInit+0x20>)
 8000ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ee0:	480d      	ldr	r0, [pc, #52]	; (8000f18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ee2:	490e      	ldr	r1, [pc, #56]	; (8000f1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ee4:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee8:	e002      	b.n	8000ef0 <LoopCopyDataInit>

08000eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eee:	3304      	adds	r3, #4

08000ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef4:	d3f9      	bcc.n	8000eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ef6:	4a0b      	ldr	r2, [pc, #44]	; (8000f24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ef8:	4c0b      	ldr	r4, [pc, #44]	; (8000f28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000efc:	e001      	b.n	8000f02 <LoopFillZerobss>

08000efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f00:	3204      	adds	r2, #4

08000f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f04:	d3fb      	bcc.n	8000efe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f06:	f7ff ffd7 	bl	8000eb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f007 fe01 	bl	8008b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f0e:	f7ff fd5d 	bl	80009cc <main>
  bx  lr    
 8000f12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000f20:	0800956c 	.word	0x0800956c
  ldr r2, =_sbss
 8000f24:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000f28:	20001fa8 	.word	0x20001fa8

08000f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC_IRQHandler>
	...

08000f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0d      	ldr	r2, [pc, #52]	; (8000f70 <HAL_Init+0x40>)
 8000f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <HAL_Init+0x40>)
 8000f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <HAL_Init+0x40>)
 8000f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f000 f94f 	bl	80011fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f000 f808 	bl	8000f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f64:	f7ff ff16 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023c00 	.word	0x40023c00

08000f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_InitTick+0x54>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_InitTick+0x58>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f967 	bl	8001266 <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00e      	b.n	8000fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d80a      	bhi.n	8000fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f000 f92f 	bl	8001212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fb4:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <HAL_InitTick+0x5c>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e000      	b.n	8000fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <HAL_IncTick+0x24>)
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000388 	.word	0x20000388

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000388 	.word	0x20000388

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff ffee 	bl	8000ffc <HAL_GetTick>
 8001020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102c:	d005      	beq.n	800103a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_Delay+0x44>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800103a:	bf00      	nop
 800103c:	f7ff ffde 	bl	8000ffc <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d8f7      	bhi.n	800103c <HAL_Delay+0x28>
  {
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	60d3      	str	r3, [r2, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db0b      	blt.n	80010ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 021f 	and.w	r2, r3, #31
 80010d8:	4907      	ldr	r1, [pc, #28]	; (80010f8 <__NVIC_EnableIRQ+0x38>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	2001      	movs	r0, #1
 80010e2:	fa00 f202 	lsl.w	r2, r0, r2
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000e100 	.word	0xe000e100

080010fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	db0a      	blt.n	8001126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	490c      	ldr	r1, [pc, #48]	; (8001148 <__NVIC_SetPriority+0x4c>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	440b      	add	r3, r1
 8001120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001124:	e00a      	b.n	800113c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4908      	ldr	r1, [pc, #32]	; (800114c <__NVIC_SetPriority+0x50>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	3b04      	subs	r3, #4
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	440b      	add	r3, r1
 800113a:	761a      	strb	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f1c3 0307 	rsb	r3, r3, #7
 800116a:	2b04      	cmp	r3, #4
 800116c:	bf28      	it	cs
 800116e:	2304      	movcs	r3, #4
 8001170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	2b06      	cmp	r3, #6
 8001178:	d902      	bls.n	8001180 <NVIC_EncodePriority+0x30>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3b03      	subs	r3, #3
 800117e:	e000      	b.n	8001182 <NVIC_EncodePriority+0x32>
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001198:	f04f 31ff 	mov.w	r1, #4294967295
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43d9      	mvns	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	4313      	orrs	r3, r2
         );
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3724      	adds	r7, #36	; 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c8:	d301      	bcc.n	80011ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00f      	b.n	80011ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <SysTick_Config+0x40>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d6:	210f      	movs	r1, #15
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f7ff ff8e 	bl	80010fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <SysTick_Config+0x40>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <SysTick_Config+0x40>)
 80011e8:	2207      	movs	r2, #7
 80011ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	e000e010 	.word	0xe000e010

080011fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ff29 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001212:	b580      	push	{r7, lr}
 8001214:	b086      	sub	sp, #24
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001224:	f7ff ff3e 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 8001228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff ff8e 	bl	8001150 <NVIC_EncodePriority>
 8001234:	4602      	mov	r2, r0
 8001236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123a:	4611      	mov	r1, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff5d 	bl	80010fc <__NVIC_SetPriority>
}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff31 	bl	80010c0 <__NVIC_EnableIRQ>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffa2 	bl	80011b8 <SysTick_Config>
 8001274:	4603      	mov	r3, r0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
 800129a:	e16b      	b.n	8001574 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800129c:	2201      	movs	r2, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f040 815a 	bne.w	800156e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d005      	beq.n	80012d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d130      	bne.n	8001334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2203      	movs	r2, #3
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001308:	2201      	movs	r2, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	f003 0201 	and.w	r2, r3, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b03      	cmp	r3, #3
 800133e:	d017      	beq.n	8001370 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d123      	bne.n	80013c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	08da      	lsrs	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3208      	adds	r2, #8
 8001384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	69b9      	ldr	r1, [r7, #24]
 80013c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0203 	and.w	r2, r3, #3
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80b4 	beq.w	800156e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b60      	ldr	r3, [pc, #384]	; (800158c <HAL_GPIO_Init+0x30c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	4a5f      	ldr	r2, [pc, #380]	; (800158c <HAL_GPIO_Init+0x30c>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001414:	6453      	str	r3, [r2, #68]	; 0x44
 8001416:	4b5d      	ldr	r3, [pc, #372]	; (800158c <HAL_GPIO_Init+0x30c>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001422:	4a5b      	ldr	r2, [pc, #364]	; (8001590 <HAL_GPIO_Init+0x310>)
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	3302      	adds	r3, #2
 800142a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	220f      	movs	r2, #15
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a52      	ldr	r2, [pc, #328]	; (8001594 <HAL_GPIO_Init+0x314>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d02b      	beq.n	80014a6 <HAL_GPIO_Init+0x226>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a51      	ldr	r2, [pc, #324]	; (8001598 <HAL_GPIO_Init+0x318>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d025      	beq.n	80014a2 <HAL_GPIO_Init+0x222>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a50      	ldr	r2, [pc, #320]	; (800159c <HAL_GPIO_Init+0x31c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d01f      	beq.n	800149e <HAL_GPIO_Init+0x21e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a4f      	ldr	r2, [pc, #316]	; (80015a0 <HAL_GPIO_Init+0x320>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d019      	beq.n	800149a <HAL_GPIO_Init+0x21a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a4e      	ldr	r2, [pc, #312]	; (80015a4 <HAL_GPIO_Init+0x324>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d013      	beq.n	8001496 <HAL_GPIO_Init+0x216>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a4d      	ldr	r2, [pc, #308]	; (80015a8 <HAL_GPIO_Init+0x328>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d00d      	beq.n	8001492 <HAL_GPIO_Init+0x212>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4c      	ldr	r2, [pc, #304]	; (80015ac <HAL_GPIO_Init+0x32c>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d007      	beq.n	800148e <HAL_GPIO_Init+0x20e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4b      	ldr	r2, [pc, #300]	; (80015b0 <HAL_GPIO_Init+0x330>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d101      	bne.n	800148a <HAL_GPIO_Init+0x20a>
 8001486:	2307      	movs	r3, #7
 8001488:	e00e      	b.n	80014a8 <HAL_GPIO_Init+0x228>
 800148a:	2308      	movs	r3, #8
 800148c:	e00c      	b.n	80014a8 <HAL_GPIO_Init+0x228>
 800148e:	2306      	movs	r3, #6
 8001490:	e00a      	b.n	80014a8 <HAL_GPIO_Init+0x228>
 8001492:	2305      	movs	r3, #5
 8001494:	e008      	b.n	80014a8 <HAL_GPIO_Init+0x228>
 8001496:	2304      	movs	r3, #4
 8001498:	e006      	b.n	80014a8 <HAL_GPIO_Init+0x228>
 800149a:	2303      	movs	r3, #3
 800149c:	e004      	b.n	80014a8 <HAL_GPIO_Init+0x228>
 800149e:	2302      	movs	r3, #2
 80014a0:	e002      	b.n	80014a8 <HAL_GPIO_Init+0x228>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <HAL_GPIO_Init+0x228>
 80014a6:	2300      	movs	r3, #0
 80014a8:	69fa      	ldr	r2, [r7, #28]
 80014aa:	f002 0203 	and.w	r2, r2, #3
 80014ae:	0092      	lsls	r2, r2, #2
 80014b0:	4093      	lsls	r3, r2
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014b8:	4935      	ldr	r1, [pc, #212]	; (8001590 <HAL_GPIO_Init+0x310>)
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3302      	adds	r3, #2
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <HAL_GPIO_Init+0x334>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ea:	4a32      	ldr	r2, [pc, #200]	; (80015b4 <HAL_GPIO_Init+0x334>)
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f0:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <HAL_GPIO_Init+0x334>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001514:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <HAL_GPIO_Init+0x334>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <HAL_GPIO_Init+0x334>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800153e:	4a1d      	ldr	r2, [pc, #116]	; (80015b4 <HAL_GPIO_Init+0x334>)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <HAL_GPIO_Init+0x334>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001568:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <HAL_GPIO_Init+0x334>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3301      	adds	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	2b0f      	cmp	r3, #15
 8001578:	f67f ae90 	bls.w	800129c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	3724      	adds	r7, #36	; 0x24
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	40013800 	.word	0x40013800
 8001594:	40020000 	.word	0x40020000
 8001598:	40020400 	.word	0x40020400
 800159c:	40020800 	.word	0x40020800
 80015a0:	40020c00 	.word	0x40020c00
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40021400 	.word	0x40021400
 80015ac:	40021800 	.word	0x40021800
 80015b0:	40021c00 	.word	0x40021c00
 80015b4:	40013c00 	.word	0x40013c00

080015b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	887b      	ldrh	r3, [r7, #2]
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	e001      	b.n	80015da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	807b      	strh	r3, [r7, #2]
 80015f4:	4613      	mov	r3, r2
 80015f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f8:	787b      	ldrb	r3, [r7, #1]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d003      	beq.n	8001606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001604:	e003      	b.n	800160e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	041a      	lsls	r2, r3, #16
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	619a      	str	r2, [r3, #24]
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800161a:	b480      	push	{r7}
 800161c:	b085      	sub	sp, #20
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	460b      	mov	r3, r1
 8001624:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800162c:	887a      	ldrh	r2, [r7, #2]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4013      	ands	r3, r2
 8001632:	041a      	lsls	r2, r3, #16
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	43d9      	mvns	r1, r3
 8001638:	887b      	ldrh	r3, [r7, #2]
 800163a:	400b      	ands	r3, r1
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	619a      	str	r2, [r3, #24]
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e12b      	b.n	80018ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d106      	bne.n	800167c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff f8b0 	bl	80007dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2224      	movs	r2, #36	; 0x24
 8001680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0201 	bic.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016b4:	f002 fc9e 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 80016b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a81      	ldr	r2, [pc, #516]	; (80018c4 <HAL_I2C_Init+0x274>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d807      	bhi.n	80016d4 <HAL_I2C_Init+0x84>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4a80      	ldr	r2, [pc, #512]	; (80018c8 <HAL_I2C_Init+0x278>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	bf94      	ite	ls
 80016cc:	2301      	movls	r3, #1
 80016ce:	2300      	movhi	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	e006      	b.n	80016e2 <HAL_I2C_Init+0x92>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4a7d      	ldr	r2, [pc, #500]	; (80018cc <HAL_I2C_Init+0x27c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	bf94      	ite	ls
 80016dc:	2301      	movls	r3, #1
 80016de:	2300      	movhi	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e0e7      	b.n	80018ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4a78      	ldr	r2, [pc, #480]	; (80018d0 <HAL_I2C_Init+0x280>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	0c9b      	lsrs	r3, r3, #18
 80016f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	430a      	orrs	r2, r1
 8001708:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	4a6a      	ldr	r2, [pc, #424]	; (80018c4 <HAL_I2C_Init+0x274>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d802      	bhi.n	8001724 <HAL_I2C_Init+0xd4>
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	3301      	adds	r3, #1
 8001722:	e009      	b.n	8001738 <HAL_I2C_Init+0xe8>
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	4a69      	ldr	r2, [pc, #420]	; (80018d4 <HAL_I2C_Init+0x284>)
 8001730:	fba2 2303 	umull	r2, r3, r2, r3
 8001734:	099b      	lsrs	r3, r3, #6
 8001736:	3301      	adds	r3, #1
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	430b      	orrs	r3, r1
 800173e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800174a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	495c      	ldr	r1, [pc, #368]	; (80018c4 <HAL_I2C_Init+0x274>)
 8001754:	428b      	cmp	r3, r1
 8001756:	d819      	bhi.n	800178c <HAL_I2C_Init+0x13c>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1e59      	subs	r1, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	fbb1 f3f3 	udiv	r3, r1, r3
 8001766:	1c59      	adds	r1, r3, #1
 8001768:	f640 73fc 	movw	r3, #4092	; 0xffc
 800176c:	400b      	ands	r3, r1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00a      	beq.n	8001788 <HAL_I2C_Init+0x138>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1e59      	subs	r1, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001780:	3301      	adds	r3, #1
 8001782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001786:	e051      	b.n	800182c <HAL_I2C_Init+0x1dc>
 8001788:	2304      	movs	r3, #4
 800178a:	e04f      	b.n	800182c <HAL_I2C_Init+0x1dc>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d111      	bne.n	80017b8 <HAL_I2C_Init+0x168>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1e58      	subs	r0, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6859      	ldr	r1, [r3, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	440b      	add	r3, r1
 80017a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a6:	3301      	adds	r3, #1
 80017a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf0c      	ite	eq
 80017b0:	2301      	moveq	r3, #1
 80017b2:	2300      	movne	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	e012      	b.n	80017de <HAL_I2C_Init+0x18e>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	1e58      	subs	r0, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6859      	ldr	r1, [r3, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	0099      	lsls	r1, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ce:	3301      	adds	r3, #1
 80017d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_I2C_Init+0x196>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e022      	b.n	800182c <HAL_I2C_Init+0x1dc>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10e      	bne.n	800180c <HAL_I2C_Init+0x1bc>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	1e58      	subs	r0, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6859      	ldr	r1, [r3, #4]
 80017f6:	460b      	mov	r3, r1
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	440b      	add	r3, r1
 80017fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001800:	3301      	adds	r3, #1
 8001802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800180a:	e00f      	b.n	800182c <HAL_I2C_Init+0x1dc>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	1e58      	subs	r0, r3, #1
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6859      	ldr	r1, [r3, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	0099      	lsls	r1, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001822:	3301      	adds	r3, #1
 8001824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	6809      	ldr	r1, [r1, #0]
 8001830:	4313      	orrs	r3, r2
 8001832:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69da      	ldr	r2, [r3, #28]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800185a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6911      	ldr	r1, [r2, #16]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	68d2      	ldr	r2, [r2, #12]
 8001866:	4311      	orrs	r1, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	430b      	orrs	r3, r1
 800186e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2220      	movs	r2, #32
 80018a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	000186a0 	.word	0x000186a0
 80018c8:	001e847f 	.word	0x001e847f
 80018cc:	003d08ff 	.word	0x003d08ff
 80018d0:	431bde83 	.word	0x431bde83
 80018d4:	10624dd3 	.word	0x10624dd3

080018d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e128      	b.n	8001b3c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d109      	bne.n	800190a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a90      	ldr	r2, [pc, #576]	; (8001b44 <HAL_I2S_Init+0x26c>)
 8001902:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7fe ffe1 	bl	80008cc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2202      	movs	r2, #2
 800190e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001920:	f023 030f 	bic.w	r3, r3, #15
 8001924:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2202      	movs	r2, #2
 800192c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d060      	beq.n	80019f8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800193e:	2310      	movs	r3, #16
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e001      	b.n	8001948 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001944:	2320      	movs	r3, #32
 8001946:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b20      	cmp	r3, #32
 800194e:	d802      	bhi.n	8001956 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001956:	2001      	movs	r0, #1
 8001958:	f002 fc42 	bl	80041e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800195c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001966:	d125      	bne.n	80019b4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d010      	beq.n	8001992 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	fbb2 f2f3 	udiv	r2, r2, r3
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	461a      	mov	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	3305      	adds	r3, #5
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	e01f      	b.n	80019d2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	fbb2 f2f3 	udiv	r2, r2, r3
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	461a      	mov	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	3305      	adds	r3, #5
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	e00e      	b.n	80019d2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	461a      	mov	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	3305      	adds	r3, #5
 80019d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4a5c      	ldr	r2, [pc, #368]	; (8001b48 <HAL_I2S_Init+0x270>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	08db      	lsrs	r3, r3, #3
 80019dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	085b      	lsrs	r3, r3, #1
 80019ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	e003      	b.n	8001a00 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80019f8:	2302      	movs	r3, #2
 80019fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d902      	bls.n	8001a0c <HAL_I2S_Init+0x134>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	2bff      	cmp	r3, #255	; 0xff
 8001a0a:	d907      	bls.n	8001a1c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a10:	f043 0210 	orr.w	r2, r3, #16
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e08f      	b.n	8001b3c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	ea42 0103 	orr.w	r1, r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	69fa      	ldr	r2, [r7, #28]
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a3a:	f023 030f 	bic.w	r3, r3, #15
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6851      	ldr	r1, [r2, #4]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6892      	ldr	r2, [r2, #8]
 8001a46:	4311      	orrs	r1, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	68d2      	ldr	r2, [r2, #12]
 8001a4c:	4311      	orrs	r1, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6992      	ldr	r2, [r2, #24]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a5e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d161      	bne.n	8001b2c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a38      	ldr	r2, [pc, #224]	; (8001b4c <HAL_I2S_Init+0x274>)
 8001a6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a37      	ldr	r2, [pc, #220]	; (8001b50 <HAL_I2S_Init+0x278>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d101      	bne.n	8001a7c <HAL_I2S_Init+0x1a4>
 8001a78:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <HAL_I2S_Init+0x27c>)
 8001a7a:	e001      	b.n	8001a80 <HAL_I2S_Init+0x1a8>
 8001a7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	4932      	ldr	r1, [pc, #200]	; (8001b50 <HAL_I2S_Init+0x278>)
 8001a88:	428a      	cmp	r2, r1
 8001a8a:	d101      	bne.n	8001a90 <HAL_I2S_Init+0x1b8>
 8001a8c:	4a31      	ldr	r2, [pc, #196]	; (8001b54 <HAL_I2S_Init+0x27c>)
 8001a8e:	e001      	b.n	8001a94 <HAL_I2S_Init+0x1bc>
 8001a90:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a94:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a98:	f023 030f 	bic.w	r3, r3, #15
 8001a9c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a2b      	ldr	r2, [pc, #172]	; (8001b50 <HAL_I2S_Init+0x278>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d101      	bne.n	8001aac <HAL_I2S_Init+0x1d4>
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <HAL_I2S_Init+0x27c>)
 8001aaa:	e001      	b.n	8001ab0 <HAL_I2S_Init+0x1d8>
 8001aac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a25      	ldr	r2, [pc, #148]	; (8001b50 <HAL_I2S_Init+0x278>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_I2S_Init+0x1ea>
 8001abe:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <HAL_I2S_Init+0x27c>)
 8001ac0:	e001      	b.n	8001ac6 <HAL_I2S_Init+0x1ee>
 8001ac2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ac6:	69db      	ldr	r3, [r3, #28]
 8001ac8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad2:	d003      	beq.n	8001adc <HAL_I2S_Init+0x204>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d103      	bne.n	8001ae4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	e001      	b.n	8001ae8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001af2:	4313      	orrs	r3, r2
 8001af4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001afc:	4313      	orrs	r3, r2
 8001afe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	897b      	ldrh	r3, [r7, #10]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b14:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <HAL_I2S_Init+0x278>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_I2S_Init+0x24c>
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_I2S_Init+0x27c>)
 8001b22:	e001      	b.n	8001b28 <HAL_I2S_Init+0x250>
 8001b24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b28:	897a      	ldrh	r2, [r7, #10]
 8001b2a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3720      	adds	r7, #32
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	08001c4f 	.word	0x08001c4f
 8001b48:	cccccccd 	.word	0xcccccccd
 8001b4c:	08001d65 	.word	0x08001d65
 8001b50:	40003800 	.word	0x40003800
 8001b54:	40003400 	.word	0x40003400

08001b58 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	881a      	ldrh	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bac:	1c9a      	adds	r2, r3, #2
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10e      	bne.n	8001be8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001bd8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ffb8 	bl	8001b58 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	b292      	uxth	r2, r2
 8001c04:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	1c9a      	adds	r2, r3, #2
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10e      	bne.n	8001c46 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c36:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ff93 	bl	8001b6c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d13a      	bne.n	8001ce0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d109      	bne.n	8001c88 <I2S_IRQHandler+0x3a>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7e:	2b40      	cmp	r3, #64	; 0x40
 8001c80:	d102      	bne.n	8001c88 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ffb4 	bl	8001bf0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8e:	2b40      	cmp	r3, #64	; 0x40
 8001c90:	d126      	bne.n	8001ce0 <I2S_IRQHandler+0x92>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0320 	and.w	r3, r3, #32
 8001c9c:	2b20      	cmp	r3, #32
 8001c9e:	d11f      	bne.n	8001ce0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	f043 0202 	orr.w	r2, r3, #2
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ff50 	bl	8001b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d136      	bne.n	8001d5a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d109      	bne.n	8001d0a <I2S_IRQHandler+0xbc>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d00:	2b80      	cmp	r3, #128	; 0x80
 8001d02:	d102      	bne.n	8001d0a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ff45 	bl	8001b94 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d122      	bne.n	8001d5a <I2S_IRQHandler+0x10c>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	2b20      	cmp	r3, #32
 8001d20:	d11b      	bne.n	8001d5a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d30:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	f043 0204 	orr.w	r2, r3, #4
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ff13 	bl	8001b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a92      	ldr	r2, [pc, #584]	; (8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d101      	bne.n	8001d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001d7e:	4b92      	ldr	r3, [pc, #584]	; (8001fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d80:	e001      	b.n	8001d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001d82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a8b      	ldr	r2, [pc, #556]	; (8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001d9c:	4b8a      	ldr	r3, [pc, #552]	; (8001fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d9e:	e001      	b.n	8001da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001da0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001db0:	d004      	beq.n	8001dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f040 8099 	bne.w	8001eee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d107      	bne.n	8001dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f925 	bl	8002020 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d107      	bne.n	8001df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d002      	beq.n	8001df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f9c8 	bl	8002180 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df6:	2b40      	cmp	r3, #64	; 0x40
 8001df8:	d13a      	bne.n	8001e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d035      	beq.n	8001e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a6e      	ldr	r2, [pc, #440]	; (8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001e0e:	4b6e      	ldr	r3, [pc, #440]	; (8001fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e10:	e001      	b.n	8001e16 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001e12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4969      	ldr	r1, [pc, #420]	; (8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e1e:	428b      	cmp	r3, r1
 8001e20:	d101      	bne.n	8001e26 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001e22:	4b69      	ldr	r3, [pc, #420]	; (8001fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e24:	e001      	b.n	8001e2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001e26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e2e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e3e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f043 0202 	orr.w	r2, r3, #2
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fe88 	bl	8001b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0308 	and.w	r3, r3, #8
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	f040 80c3 	bne.w	8002002 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f003 0320 	and.w	r3, r3, #32
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 80bd 	beq.w	8002002 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e96:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a49      	ldr	r2, [pc, #292]	; (8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d101      	bne.n	8001ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001ea2:	4b49      	ldr	r3, [pc, #292]	; (8001fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ea4:	e001      	b.n	8001eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001ea6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4944      	ldr	r1, [pc, #272]	; (8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001eb2:	428b      	cmp	r3, r1
 8001eb4:	d101      	bne.n	8001eba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001eb6:	4b44      	ldr	r3, [pc, #272]	; (8001fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001eb8:	e001      	b.n	8001ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001eba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ebe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ec2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f043 0204 	orr.w	r2, r3, #4
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff fe4a 	bl	8001b80 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001eec:	e089      	b.n	8002002 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d107      	bne.n	8001f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f8be 	bl	8002084 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d107      	bne.n	8001f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f8fd 	bl	800211c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f28:	2b40      	cmp	r3, #64	; 0x40
 8001f2a:	d12f      	bne.n	8001f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f003 0320 	and.w	r3, r3, #32
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d02a      	beq.n	8001f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f44:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d101      	bne.n	8001f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001f50:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f52:	e001      	b.n	8001f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001f54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4919      	ldr	r1, [pc, #100]	; (8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f60:	428b      	cmp	r3, r1
 8001f62:	d101      	bne.n	8001f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001f64:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f66:	e001      	b.n	8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001f68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f70:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	f043 0202 	orr.w	r2, r3, #2
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff fdfa 	bl	8001b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d136      	bne.n	8002004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d031      	beq.n	8002004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d101      	bne.n	8001fae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001faa:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fac:	e001      	b.n	8001fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001fae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4902      	ldr	r1, [pc, #8]	; (8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fba:	428b      	cmp	r3, r1
 8001fbc:	d106      	bne.n	8001fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001fbe:	4b02      	ldr	r3, [pc, #8]	; (8001fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fc0:	e006      	b.n	8001fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001fc2:	bf00      	nop
 8001fc4:	40003800 	.word	0x40003800
 8001fc8:	40003400 	.word	0x40003400
 8001fcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fd4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fe4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f043 0204 	orr.w	r2, r3, #4
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fdc0 	bl	8001b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002000:	e000      	b.n	8002004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002002:	bf00      	nop
}
 8002004:	bf00      	nop
 8002006:	3720      	adds	r7, #32
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	1c99      	adds	r1, r3, #2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6251      	str	r1, [r2, #36]	; 0x24
 8002032:	881a      	ldrh	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d113      	bne.n	800207a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002060:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002066:	b29b      	uxth	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d106      	bne.n	800207a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff ffc9 	bl	800200c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	1c99      	adds	r1, r3, #2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6251      	str	r1, [r2, #36]	; 0x24
 8002096:	8819      	ldrh	r1, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <I2SEx_TxISR_I2SExt+0x90>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d101      	bne.n	80020a6 <I2SEx_TxISR_I2SExt+0x22>
 80020a2:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <I2SEx_TxISR_I2SExt+0x94>)
 80020a4:	e001      	b.n	80020aa <I2SEx_TxISR_I2SExt+0x26>
 80020a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020aa:	460a      	mov	r2, r1
 80020ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d121      	bne.n	800210a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a12      	ldr	r2, [pc, #72]	; (8002114 <I2SEx_TxISR_I2SExt+0x90>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d101      	bne.n	80020d4 <I2SEx_TxISR_I2SExt+0x50>
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <I2SEx_TxISR_I2SExt+0x94>)
 80020d2:	e001      	b.n	80020d8 <I2SEx_TxISR_I2SExt+0x54>
 80020d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	490d      	ldr	r1, [pc, #52]	; (8002114 <I2SEx_TxISR_I2SExt+0x90>)
 80020e0:	428b      	cmp	r3, r1
 80020e2:	d101      	bne.n	80020e8 <I2SEx_TxISR_I2SExt+0x64>
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <I2SEx_TxISR_I2SExt+0x94>)
 80020e6:	e001      	b.n	80020ec <I2SEx_TxISR_I2SExt+0x68>
 80020e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d106      	bne.n	800210a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ff81 	bl	800200c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40003800 	.word	0x40003800
 8002118:	40003400 	.word	0x40003400

0800211c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68d8      	ldr	r0, [r3, #12]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	1c99      	adds	r1, r3, #2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002134:	b282      	uxth	r2, r0
 8002136:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800213c:	b29b      	uxth	r3, r3
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800214a:	b29b      	uxth	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d113      	bne.n	8002178 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800215e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ff4a 	bl	800200c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a20      	ldr	r2, [pc, #128]	; (8002210 <I2SEx_RxISR_I2SExt+0x90>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <I2SEx_RxISR_I2SExt+0x16>
 8002192:	4b20      	ldr	r3, [pc, #128]	; (8002214 <I2SEx_RxISR_I2SExt+0x94>)
 8002194:	e001      	b.n	800219a <I2SEx_RxISR_I2SExt+0x1a>
 8002196:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800219a:	68d8      	ldr	r0, [r3, #12]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	1c99      	adds	r1, r3, #2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80021a6:	b282      	uxth	r2, r0
 80021a8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	3b01      	subs	r3, #1
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021bc:	b29b      	uxth	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d121      	bne.n	8002206 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a12      	ldr	r2, [pc, #72]	; (8002210 <I2SEx_RxISR_I2SExt+0x90>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d101      	bne.n	80021d0 <I2SEx_RxISR_I2SExt+0x50>
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <I2SEx_RxISR_I2SExt+0x94>)
 80021ce:	e001      	b.n	80021d4 <I2SEx_RxISR_I2SExt+0x54>
 80021d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	490d      	ldr	r1, [pc, #52]	; (8002210 <I2SEx_RxISR_I2SExt+0x90>)
 80021dc:	428b      	cmp	r3, r1
 80021de:	d101      	bne.n	80021e4 <I2SEx_RxISR_I2SExt+0x64>
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <I2SEx_RxISR_I2SExt+0x94>)
 80021e2:	e001      	b.n	80021e8 <I2SEx_RxISR_I2SExt+0x68>
 80021e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021ec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d106      	bne.n	8002206 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff ff03 	bl	800200c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40003800 	.word	0x40003800
 8002214:	40003400 	.word	0x40003400

08002218 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221a:	b08f      	sub	sp, #60	; 0x3c
 800221c:	af0a      	add	r7, sp, #40	; 0x28
 800221e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e10f      	b.n	800244a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f006 f93b 	bl	80084c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2203      	movs	r2, #3
 800224e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d102      	bne.n	8002264 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f002 fc22 	bl	8004ab2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	687e      	ldr	r6, [r7, #4]
 8002276:	466d      	mov	r5, sp
 8002278:	f106 0410 	add.w	r4, r6, #16
 800227c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800227e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002282:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002284:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002288:	e885 0003 	stmia.w	r5, {r0, r1}
 800228c:	1d33      	adds	r3, r6, #4
 800228e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002290:	6838      	ldr	r0, [r7, #0]
 8002292:	f002 faf9 	bl	8004888 <USB_CoreInit>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2202      	movs	r2, #2
 80022a0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0d0      	b.n	800244a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 fc10 	bl	8004ad4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	73fb      	strb	r3, [r7, #15]
 80022b8:	e04a      	b.n	8002350 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	333d      	adds	r3, #61	; 0x3d
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	333c      	adds	r3, #60	; 0x3c
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	b298      	uxth	r0, r3
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3344      	adds	r3, #68	; 0x44
 80022f6:	4602      	mov	r2, r0
 80022f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	3340      	adds	r3, #64	; 0x40
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	3348      	adds	r3, #72	; 0x48
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	334c      	adds	r3, #76	; 0x4c
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	3354      	adds	r3, #84	; 0x54
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	3301      	adds	r3, #1
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	7bfa      	ldrb	r2, [r7, #15]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	429a      	cmp	r2, r3
 8002358:	d3af      	bcc.n	80022ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800235a:	2300      	movs	r3, #0
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	e044      	b.n	80023ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023a2:	7bfa      	ldrb	r2, [r7, #15]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023b8:	7bfa      	ldrb	r2, [r7, #15]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023ce:	7bfa      	ldrb	r2, [r7, #15]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e4:	7bfb      	ldrb	r3, [r7, #15]
 80023e6:	3301      	adds	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
 80023ea:	7bfa      	ldrb	r2, [r7, #15]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d3b5      	bcc.n	8002360 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	687e      	ldr	r6, [r7, #4]
 80023fc:	466d      	mov	r5, sp
 80023fe:	f106 0410 	add.w	r4, r6, #16
 8002402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002408:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800240a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800240e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002412:	1d33      	adds	r3, r6, #4
 8002414:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002416:	6838      	ldr	r0, [r7, #0]
 8002418:	f002 fba8 	bl	8004b6c <USB_DevInit>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2202      	movs	r2, #2
 8002426:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e00d      	b.n	800244a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f003 fcf7 	bl	8005e36 <USB_DevDisconnect>

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002452 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_PCD_Start+0x1c>
 800246a:	2302      	movs	r3, #2
 800246c:	e020      	b.n	80024b0 <HAL_PCD_Start+0x5e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	2b01      	cmp	r3, #1
 800247c:	d109      	bne.n	8002492 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002482:	2b01      	cmp	r3, #1
 8002484:	d005      	beq.n	8002492 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f002 fafa 	bl	8004a90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f003 fca7 	bl	8005df4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b08d      	sub	sp, #52	; 0x34
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 fd65 	bl	8005f9e <USB_GetMode>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f040 848a 	bne.w	8002df0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f003 fcc9 	bl	8005e78 <USB_ReadInterrupts>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 8480 	beq.w	8002dee <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f003 fcb6 	bl	8005e78 <USB_ReadInterrupts>
 800250c:	4603      	mov	r3, r0
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b02      	cmp	r3, #2
 8002514:	d107      	bne.n	8002526 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695a      	ldr	r2, [r3, #20]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f002 0202 	and.w	r2, r2, #2
 8002524:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f003 fca4 	bl	8005e78 <USB_ReadInterrupts>
 8002530:	4603      	mov	r3, r0
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b10      	cmp	r3, #16
 8002538:	d161      	bne.n	80025fe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0210 	bic.w	r2, r2, #16
 8002548:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	f003 020f 	and.w	r2, r3, #15
 8002556:	4613      	mov	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	3304      	adds	r3, #4
 8002568:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	0c5b      	lsrs	r3, r3, #17
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	2b02      	cmp	r3, #2
 8002574:	d124      	bne.n	80025c0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800257c:	4013      	ands	r3, r2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d035      	beq.n	80025ee <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800258c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002590:	b29b      	uxth	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	6a38      	ldr	r0, [r7, #32]
 8002596:	f003 fadb 	bl	8005b50 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025a6:	441a      	add	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	6a1a      	ldr	r2, [r3, #32]
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	091b      	lsrs	r3, r3, #4
 80025b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025b8:	441a      	add	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	621a      	str	r2, [r3, #32]
 80025be:	e016      	b.n	80025ee <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	0c5b      	lsrs	r3, r3, #17
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	2b06      	cmp	r3, #6
 80025ca:	d110      	bne.n	80025ee <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025d2:	2208      	movs	r2, #8
 80025d4:	4619      	mov	r1, r3
 80025d6:	6a38      	ldr	r0, [r7, #32]
 80025d8:	f003 faba 	bl	8005b50 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	6a1a      	ldr	r2, [r3, #32]
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	091b      	lsrs	r3, r3, #4
 80025e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025e8:	441a      	add	r2, r3
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699a      	ldr	r2, [r3, #24]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 0210 	orr.w	r2, r2, #16
 80025fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f003 fc38 	bl	8005e78 <USB_ReadInterrupts>
 8002608:	4603      	mov	r3, r0
 800260a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800260e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002612:	f040 80a7 	bne.w	8002764 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f003 fc3d 	bl	8005e9e <USB_ReadDevAllOutEpInterrupt>
 8002624:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002626:	e099      	b.n	800275c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 808e 	beq.w	8002750 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f003 fc61 	bl	8005f06 <USB_ReadDevOutEPInterrupt>
 8002644:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00c      	beq.n	800266a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	4413      	add	r3, r2
 8002658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265c:	461a      	mov	r2, r3
 800265e:	2301      	movs	r3, #1
 8002660:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002662:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 fec3 	bl	80033f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00c      	beq.n	800268e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	4413      	add	r3, r2
 800267c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002680:	461a      	mov	r2, r3
 8002682:	2308      	movs	r3, #8
 8002684:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002686:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 ff99 	bl	80035c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a4:	461a      	mov	r2, r3
 80026a6:	2310      	movs	r3, #16
 80026a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d030      	beq.n	8002716 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026bc:	2b80      	cmp	r3, #128	; 0x80
 80026be:	d109      	bne.n	80026d4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	69fa      	ldr	r2, [r7, #28]
 80026ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026d2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	3304      	adds	r3, #4
 80026e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	78db      	ldrb	r3, [r3, #3]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d108      	bne.n	8002704 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2200      	movs	r2, #0
 80026f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	4619      	mov	r1, r3
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f005 fff2 	bl	80086e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	4413      	add	r3, r2
 800270c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002710:	461a      	mov	r2, r3
 8002712:	2302      	movs	r3, #2
 8002714:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	4413      	add	r3, r2
 8002728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272c:	461a      	mov	r2, r3
 800272e:	2320      	movs	r3, #32
 8002730:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d009      	beq.n	8002750 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	4413      	add	r3, r2
 8002744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002748:	461a      	mov	r2, r3
 800274a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800274e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	3301      	adds	r3, #1
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275e:	2b00      	cmp	r3, #0
 8002760:	f47f af62 	bne.w	8002628 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f003 fb85 	bl	8005e78 <USB_ReadInterrupts>
 800276e:	4603      	mov	r3, r0
 8002770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002774:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002778:	f040 80db 	bne.w	8002932 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f003 fba6 	bl	8005ed2 <USB_ReadDevAllInEpInterrupt>
 8002786:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800278c:	e0cd      	b.n	800292a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80c2 	beq.w	800291e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f003 fbcc 	bl	8005f42 <USB_ReadDevInEPInterrupt>
 80027aa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d057      	beq.n	8002866 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	f003 030f 	and.w	r3, r3, #15
 80027bc:	2201      	movs	r2, #1
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69f9      	ldr	r1, [r7, #28]
 80027d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027d6:	4013      	ands	r3, r2
 80027d8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e6:	461a      	mov	r2, r3
 80027e8:	2301      	movs	r3, #1
 80027ea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d132      	bne.n	800285a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f8:	4613      	mov	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	334c      	adds	r3, #76	; 0x4c
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4403      	add	r3, r0
 8002814:	3348      	adds	r3, #72	; 0x48
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4419      	add	r1, r3
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4403      	add	r3, r0
 8002828:	334c      	adds	r3, #76	; 0x4c
 800282a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	2b00      	cmp	r3, #0
 8002830:	d113      	bne.n	800285a <HAL_PCD_IRQHandler+0x3a2>
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	3354      	adds	r3, #84	; 0x54
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d108      	bne.n	800285a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002852:	461a      	mov	r2, r3
 8002854:	2101      	movs	r1, #1
 8002856:	f003 fbd3 	bl	8006000 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4619      	mov	r1, r3
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f005 febc 	bl	80085de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	015a      	lsls	r2, r3, #5
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	4413      	add	r3, r2
 8002878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800287c:	461a      	mov	r2, r3
 800287e:	2308      	movs	r3, #8
 8002880:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	4413      	add	r3, r2
 8002894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002898:	461a      	mov	r2, r3
 800289a:	2310      	movs	r3, #16
 800289c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028b4:	461a      	mov	r2, r3
 80028b6:	2340      	movs	r3, #64	; 0x40
 80028b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d023      	beq.n	800290c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c6:	6a38      	ldr	r0, [r7, #32]
 80028c8:	f002 fab4 	bl	8004e34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	3338      	adds	r3, #56	; 0x38
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	4413      	add	r3, r2
 80028dc:	3304      	adds	r3, #4
 80028de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	78db      	ldrb	r3, [r3, #3]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d108      	bne.n	80028fa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2200      	movs	r2, #0
 80028ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	4619      	mov	r1, r3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f005 ff09 	bl	800870c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	4413      	add	r3, r2
 8002902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002906:	461a      	mov	r2, r3
 8002908:	2302      	movs	r3, #2
 800290a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002916:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 fcdb 	bl	80032d4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	3301      	adds	r3, #1
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002926:	085b      	lsrs	r3, r3, #1
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	2b00      	cmp	r3, #0
 800292e:	f47f af2e 	bne.w	800278e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f003 fa9e 	bl	8005e78 <USB_ReadInterrupts>
 800293c:	4603      	mov	r3, r0
 800293e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002946:	d122      	bne.n	800298e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002956:	f023 0301 	bic.w	r3, r3, #1
 800295a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002962:	2b01      	cmp	r3, #1
 8002964:	d108      	bne.n	8002978 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800296e:	2100      	movs	r1, #0
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fec3 	bl	80036fc <HAL_PCDEx_LPM_Callback>
 8002976:	e002      	b.n	800297e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f005 fea7 	bl	80086cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695a      	ldr	r2, [r3, #20]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800298c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f003 fa70 	bl	8005e78 <USB_ReadInterrupts>
 8002998:	4603      	mov	r3, r0
 800299a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800299e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a2:	d112      	bne.n	80029ca <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d102      	bne.n	80029ba <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f005 fe63 	bl	8008680 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80029c8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f003 fa52 	bl	8005e78 <USB_ReadInterrupts>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029de:	f040 80b7 	bne.w	8002b50 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	69fa      	ldr	r2, [r7, #28]
 80029ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2110      	movs	r1, #16
 80029fc:	4618      	mov	r0, r3
 80029fe:	f002 fa19 	bl	8004e34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a02:	2300      	movs	r3, #0
 8002a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a06:	e046      	b.n	8002a96 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a14:	461a      	mov	r2, r3
 8002a16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a1a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a2c:	0151      	lsls	r1, r2, #5
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	440a      	add	r2, r1
 8002a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a48:	461a      	mov	r2, r3
 8002a4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a4e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a60:	0151      	lsls	r1, r2, #5
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	440a      	add	r2, r1
 8002a66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a80:	0151      	lsls	r1, r2, #5
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	440a      	add	r2, r1
 8002a86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a8e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a92:	3301      	adds	r3, #1
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d3b3      	bcc.n	8002a08 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ab2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d016      	beq.n	8002aea <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002acc:	f043 030b 	orr.w	r3, r3, #11
 8002ad0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ae2:	f043 030b 	orr.w	r3, r3, #11
 8002ae6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae8:	e015      	b.n	8002b16 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002af8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002afc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b00:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b10:	f043 030b 	orr.w	r3, r3, #11
 8002b14:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b24:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b28:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f003 fa60 	bl	8006000 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f003 f98f 	bl	8005e78 <USB_ReadInterrupts>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b64:	d124      	bne.n	8002bb0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f003 fa25 	bl	8005fba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f002 f9da 	bl	8004f2e <USB_GetDevSpeed>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681c      	ldr	r4, [r3, #0]
 8002b86:	f001 fa29 	bl	8003fdc <HAL_RCC_GetHCLKFreq>
 8002b8a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	4620      	mov	r0, r4
 8002b96:	f001 fed9 	bl	800494c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f005 fd47 	bl	800862e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002bae:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f003 f95f 	bl	8005e78 <USB_ReadInterrupts>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d10a      	bne.n	8002bda <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f005 fd24 	bl	8008612 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f002 0208 	and.w	r2, r2, #8
 8002bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f003 f94a 	bl	8005e78 <USB_ReadInterrupts>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	2b80      	cmp	r3, #128	; 0x80
 8002bec:	d122      	bne.n	8002c34 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfe:	e014      	b.n	8002c2a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d105      	bne.n	8002c24 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fb27 	bl	8003272 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	3301      	adds	r3, #1
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d3e5      	bcc.n	8002c00 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f003 f91d 	bl	8005e78 <USB_ReadInterrupts>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c48:	d13b      	bne.n	8002cc2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4e:	e02b      	b.n	8002ca8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c64:	4613      	mov	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3340      	adds	r3, #64	; 0x40
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d115      	bne.n	8002ca2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	da12      	bge.n	8002ca2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c80:	4613      	mov	r3, r2
 8002c82:	00db      	lsls	r3, r3, #3
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	333f      	adds	r3, #63	; 0x3f
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fae8 	bl	8003272 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d3ce      	bcc.n	8002c50 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002cc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f003 f8d6 	bl	8005e78 <USB_ReadInterrupts>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cd6:	d155      	bne.n	8002d84 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cd8:	2301      	movs	r3, #1
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
 8002cdc:	e045      	b.n	8002d6a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d12e      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d06:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	da2b      	bge.n	8002d64 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d18:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d121      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d32:	2201      	movs	r2, #1
 8002d34:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10a      	bne.n	8002d64 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	69fa      	ldr	r2, [r7, #28]
 8002d58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d60:	6053      	str	r3, [r2, #4]
            break;
 8002d62:	e007      	b.n	8002d74 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	3301      	adds	r3, #1
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d3b4      	bcc.n	8002cde <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f003 f875 	bl	8005e78 <USB_ReadInterrupts>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d98:	d10a      	bne.n	8002db0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f005 fcc8 	bl	8008730 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695a      	ldr	r2, [r3, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002dae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f003 f85f 	bl	8005e78 <USB_ReadInterrupts>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d115      	bne.n	8002df0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f005 fcb8 	bl	800874c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6859      	ldr	r1, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	e000      	b.n	8002df0 <HAL_PCD_IRQHandler+0x938>
      return;
 8002dee:	bf00      	nop
    }
  }
}
 8002df0:	3734      	adds	r7, #52	; 0x34
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd90      	pop	{r4, r7, pc}

08002df6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_PCD_SetAddress+0x1a>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e013      	b.n	8002e38 <HAL_PCD_SetAddress+0x42>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f002 ffbd 	bl	8005da8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	4608      	mov	r0, r1
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4603      	mov	r3, r0
 8002e50:	70fb      	strb	r3, [r7, #3]
 8002e52:	460b      	mov	r3, r1
 8002e54:	803b      	strh	r3, [r7, #0]
 8002e56:	4613      	mov	r3, r2
 8002e58:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	da0f      	bge.n	8002e86 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	f003 020f 	and.w	r2, r3, #15
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	3338      	adds	r3, #56	; 0x38
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	4413      	add	r3, r2
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	705a      	strb	r2, [r3, #1]
 8002e84:	e00f      	b.n	8002ea6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	f003 020f 	and.w	r2, r3, #15
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea6:	78fb      	ldrb	r3, [r7, #3]
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002eb2:	883a      	ldrh	r2, [r7, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	78ba      	ldrb	r2, [r7, #2]
 8002ebc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	785b      	ldrb	r3, [r3, #1]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d004      	beq.n	8002ed0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ed0:	78bb      	ldrb	r3, [r7, #2]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d102      	bne.n	8002edc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_PCD_EP_Open+0xaa>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e00e      	b.n	8002f08 <HAL_PCD_EP_Open+0xc8>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68f9      	ldr	r1, [r7, #12]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f002 f83d 	bl	8004f78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002f06:	7afb      	ldrb	r3, [r7, #11]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	da0f      	bge.n	8002f44 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	f003 020f 	and.w	r2, r3, #15
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	3338      	adds	r3, #56	; 0x38
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	4413      	add	r3, r2
 8002f38:	3304      	adds	r3, #4
 8002f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	705a      	strb	r2, [r3, #1]
 8002f42:	e00f      	b.n	8002f64 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	f003 020f 	and.w	r2, r3, #15
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_PCD_EP_Close+0x6e>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e00e      	b.n	8002f9c <HAL_PCD_EP_Close+0x8c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68f9      	ldr	r1, [r7, #12]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f002 f87b 	bl	8005088 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fb4:	7afb      	ldrb	r3, [r7, #11]
 8002fb6:	f003 020f 	and.w	r2, r3, #15
 8002fba:	4613      	mov	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4413      	add	r3, r2
 8002fca:	3304      	adds	r3, #4
 8002fcc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe6:	7afb      	ldrb	r3, [r7, #11]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d102      	bne.n	8003000 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003000:	7afb      	ldrb	r3, [r7, #11]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	461a      	mov	r2, r3
 8003016:	6979      	ldr	r1, [r7, #20]
 8003018:	f002 fb5a 	bl	80056d0 <USB_EP0StartXfer>
 800301c:	e008      	b.n	8003030 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	6979      	ldr	r1, [r7, #20]
 800302c:	f002 f908 	bl	8005240 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	460b      	mov	r3, r1
 8003044:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	f003 020f 	and.w	r2, r3, #15
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800305c:	681b      	ldr	r3, [r3, #0]
}
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b086      	sub	sp, #24
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	607a      	str	r2, [r7, #4]
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	460b      	mov	r3, r1
 8003078:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307a:	7afb      	ldrb	r3, [r7, #11]
 800307c:	f003 020f 	and.w	r2, r3, #15
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	3338      	adds	r3, #56	; 0x38
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4413      	add	r3, r2
 800308e:	3304      	adds	r3, #4
 8003090:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2200      	movs	r2, #0
 80030a2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2201      	movs	r2, #1
 80030a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030aa:	7afb      	ldrb	r3, [r7, #11]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d102      	bne.n	80030c4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030c4:	7afb      	ldrb	r3, [r7, #11]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	6979      	ldr	r1, [r7, #20]
 80030dc:	f002 faf8 	bl	80056d0 <USB_EP0StartXfer>
 80030e0:	e008      	b.n	80030f4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	6979      	ldr	r1, [r7, #20]
 80030f0:	f002 f8a6 	bl	8005240 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3718      	adds	r7, #24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	460b      	mov	r3, r1
 8003108:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	f003 020f 	and.w	r2, r3, #15
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	429a      	cmp	r2, r3
 8003116:	d901      	bls.n	800311c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e050      	b.n	80031be <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800311c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003120:	2b00      	cmp	r3, #0
 8003122:	da0f      	bge.n	8003144 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	f003 020f 	and.w	r2, r3, #15
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	3338      	adds	r3, #56	; 0x38
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	4413      	add	r3, r2
 8003138:	3304      	adds	r3, #4
 800313a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	705a      	strb	r2, [r3, #1]
 8003142:	e00d      	b.n	8003160 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	3304      	adds	r3, #4
 8003158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003166:	78fb      	ldrb	r3, [r7, #3]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	b2da      	uxtb	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_PCD_EP_SetStall+0x82>
 800317c:	2302      	movs	r3, #2
 800317e:	e01e      	b.n	80031be <HAL_PCD_EP_SetStall+0xc0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68f9      	ldr	r1, [r7, #12]
 800318e:	4618      	mov	r0, r3
 8003190:	f002 fd36 	bl	8005c00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10a      	bne.n	80031b4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	b2d9      	uxtb	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031ae:	461a      	mov	r2, r3
 80031b0:	f002 ff26 	bl	8006000 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
 80031ce:	460b      	mov	r3, r1
 80031d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	f003 020f 	and.w	r2, r3, #15
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d901      	bls.n	80031e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e042      	b.n	800326a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	da0f      	bge.n	800320c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	f003 020f 	and.w	r2, r3, #15
 80031f2:	4613      	mov	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	3338      	adds	r3, #56	; 0x38
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	4413      	add	r3, r2
 8003200:	3304      	adds	r3, #4
 8003202:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	705a      	strb	r2, [r3, #1]
 800320a:	e00f      	b.n	800322c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	f003 020f 	and.w	r2, r3, #15
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	3304      	adds	r3, #4
 8003224:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	f003 030f 	and.w	r3, r3, #15
 8003238:	b2da      	uxtb	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_PCD_EP_ClrStall+0x86>
 8003248:	2302      	movs	r3, #2
 800324a:	e00e      	b.n	800326a <HAL_PCD_EP_ClrStall+0xa4>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68f9      	ldr	r1, [r7, #12]
 800325a:	4618      	mov	r0, r3
 800325c:	f002 fd3e 	bl	8005cdc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	460b      	mov	r3, r1
 800327c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800327e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003282:	2b00      	cmp	r3, #0
 8003284:	da0c      	bge.n	80032a0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	f003 020f 	and.w	r2, r3, #15
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	3338      	adds	r3, #56	; 0x38
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	3304      	adds	r3, #4
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	e00c      	b.n	80032ba <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	f003 020f 	and.w	r2, r3, #15
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	3304      	adds	r3, #4
 80032b8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68f9      	ldr	r1, [r7, #12]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f002 fb5d 	bl	8005980 <USB_EPStopXfer>
 80032c6:	4603      	mov	r3, r0
 80032c8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032ca:	7afb      	ldrb	r3, [r7, #11]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08a      	sub	sp, #40	; 0x28
 80032d8:	af02      	add	r7, sp, #8
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	4613      	mov	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	3338      	adds	r3, #56	; 0x38
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4413      	add	r3, r2
 80032f8:	3304      	adds	r3, #4
 80032fa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a1a      	ldr	r2, [r3, #32]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	429a      	cmp	r2, r3
 8003306:	d901      	bls.n	800330c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e06c      	b.n	80033e6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	699a      	ldr	r2, [r3, #24]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	429a      	cmp	r2, r3
 8003320:	d902      	bls.n	8003328 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	3303      	adds	r3, #3
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003330:	e02b      	b.n	800338a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	429a      	cmp	r2, r3
 8003346:	d902      	bls.n	800334e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	3303      	adds	r3, #3
 8003352:	089b      	lsrs	r3, r3, #2
 8003354:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6919      	ldr	r1, [r3, #16]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	b2da      	uxtb	r2, r3
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003366:	b2db      	uxtb	r3, r3
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	4603      	mov	r3, r0
 800336c:	6978      	ldr	r0, [r7, #20]
 800336e:	f002 fbb1 	bl	8005ad4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	691a      	ldr	r2, [r3, #16]
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	441a      	add	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a1a      	ldr	r2, [r3, #32]
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	441a      	add	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	b29b      	uxth	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	429a      	cmp	r2, r3
 800339e:	d809      	bhi.n	80033b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a1a      	ldr	r2, [r3, #32]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d203      	bcs.n	80033b4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1be      	bne.n	8003332 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	699a      	ldr	r2, [r3, #24]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d811      	bhi.n	80033e4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	2201      	movs	r2, #1
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	43db      	mvns	r3, r3
 80033da:	6939      	ldr	r1, [r7, #16]
 80033dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033e0:	4013      	ands	r3, r2
 80033e2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3720      	adds	r7, #32
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	333c      	adds	r3, #60	; 0x3c
 8003408:	3304      	adds	r3, #4
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d17b      	bne.n	800351e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d015      	beq.n	800345c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	4a61      	ldr	r2, [pc, #388]	; (80035b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	f240 80b9 	bls.w	80035ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 80b3 	beq.w	80035ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003452:	461a      	mov	r2, r3
 8003454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003458:	6093      	str	r3, [r2, #8]
 800345a:	e0a7      	b.n	80035ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	4413      	add	r3, r2
 800346e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003472:	461a      	mov	r2, r3
 8003474:	2320      	movs	r3, #32
 8003476:	6093      	str	r3, [r2, #8]
 8003478:	e098      	b.n	80035ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003480:	2b00      	cmp	r3, #0
 8003482:	f040 8093 	bne.w	80035ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	4a4b      	ldr	r2, [pc, #300]	; (80035b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d90f      	bls.n	80034ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a4:	461a      	mov	r2, r3
 80034a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034aa:	6093      	str	r3, [r2, #8]
 80034ac:	e07e      	b.n	80035ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4413      	add	r3, r2
 80034c0:	3304      	adds	r3, #4
 80034c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	69da      	ldr	r2, [r3, #28]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	0159      	lsls	r1, r3, #5
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	440b      	add	r3, r1
 80034d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034da:	1ad2      	subs	r2, r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d114      	bne.n	8003510 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034f8:	461a      	mov	r2, r3
 80034fa:	2101      	movs	r1, #1
 80034fc:	f002 fd80 	bl	8006000 <USB_EP0_OutStart>
 8003500:	e006      	b.n	8003510 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	441a      	add	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	4619      	mov	r1, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f005 f846 	bl	80085a8 <HAL_PCD_DataOutStageCallback>
 800351c:	e046      	b.n	80035ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	4a26      	ldr	r2, [pc, #152]	; (80035bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d124      	bne.n	8003570 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353c:	461a      	mov	r2, r3
 800353e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003542:	6093      	str	r3, [r2, #8]
 8003544:	e032      	b.n	80035ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	d008      	beq.n	8003562 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355c:	461a      	mov	r2, r3
 800355e:	2320      	movs	r3, #32
 8003560:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	4619      	mov	r1, r3
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f005 f81d 	bl	80085a8 <HAL_PCD_DataOutStageCallback>
 800356e:	e01d      	b.n	80035ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d114      	bne.n	80035a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	4613      	mov	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d108      	bne.n	80035a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003598:	461a      	mov	r2, r3
 800359a:	2100      	movs	r1, #0
 800359c:	f002 fd30 	bl	8006000 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	4619      	mov	r1, r3
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f004 fffe 	bl	80085a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3720      	adds	r7, #32
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	4f54300a 	.word	0x4f54300a
 80035bc:	4f54310a 	.word	0x4f54310a

080035c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	333c      	adds	r3, #60	; 0x3c
 80035d8:	3304      	adds	r3, #4
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4a15      	ldr	r2, [pc, #84]	; (8003648 <PCD_EP_OutSetupPacket_int+0x88>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d90e      	bls.n	8003614 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d009      	beq.n	8003614 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360c:	461a      	mov	r2, r3
 800360e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003612:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f004 ffb5 	bl	8008584 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4a0a      	ldr	r2, [pc, #40]	; (8003648 <PCD_EP_OutSetupPacket_int+0x88>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d90c      	bls.n	800363c <PCD_EP_OutSetupPacket_int+0x7c>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d108      	bne.n	800363c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003634:	461a      	mov	r2, r3
 8003636:	2101      	movs	r1, #1
 8003638:	f002 fce2 	bl	8006000 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	4f54300a 	.word	0x4f54300a

0800364c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	70fb      	strb	r3, [r7, #3]
 8003658:	4613      	mov	r3, r2
 800365a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d107      	bne.n	800367a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800366a:	883b      	ldrh	r3, [r7, #0]
 800366c:	0419      	lsls	r1, r3, #16
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	430a      	orrs	r2, r1
 8003676:	629a      	str	r2, [r3, #40]	; 0x28
 8003678:	e028      	b.n	80036cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003680:	0c1b      	lsrs	r3, r3, #16
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	4413      	add	r3, r2
 8003686:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003688:	2300      	movs	r3, #0
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	e00d      	b.n	80036aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	3340      	adds	r3, #64	; 0x40
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	4413      	add	r3, r2
 80036a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	3301      	adds	r3, #1
 80036a8:	73fb      	strb	r3, [r7, #15]
 80036aa:	7bfa      	ldrb	r2, [r7, #15]
 80036ac:	78fb      	ldrb	r3, [r7, #3]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d3ec      	bcc.n	800368e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036b4:	883b      	ldrh	r3, [r7, #0]
 80036b6:	0418      	lsls	r0, r3, #16
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6819      	ldr	r1, [r3, #0]
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	3b01      	subs	r3, #1
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	4302      	orrs	r2, r0
 80036c4:	3340      	adds	r3, #64	; 0x40
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	460b      	mov	r3, r1
 80036e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	887a      	ldrh	r2, [r7, #2]
 80036ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e267      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d075      	beq.n	800381e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003732:	4b88      	ldr	r3, [pc, #544]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 030c 	and.w	r3, r3, #12
 800373a:	2b04      	cmp	r3, #4
 800373c:	d00c      	beq.n	8003758 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800373e:	4b85      	ldr	r3, [pc, #532]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003746:	2b08      	cmp	r3, #8
 8003748:	d112      	bne.n	8003770 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800374a:	4b82      	ldr	r3, [pc, #520]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003756:	d10b      	bne.n	8003770 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003758:	4b7e      	ldr	r3, [pc, #504]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d05b      	beq.n	800381c <HAL_RCC_OscConfig+0x108>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d157      	bne.n	800381c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e242      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003778:	d106      	bne.n	8003788 <HAL_RCC_OscConfig+0x74>
 800377a:	4b76      	ldr	r3, [pc, #472]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a75      	ldr	r2, [pc, #468]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 8003780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e01d      	b.n	80037c4 <HAL_RCC_OscConfig+0xb0>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003790:	d10c      	bne.n	80037ac <HAL_RCC_OscConfig+0x98>
 8003792:	4b70      	ldr	r3, [pc, #448]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a6f      	ldr	r2, [pc, #444]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 8003798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	4b6d      	ldr	r3, [pc, #436]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a6c      	ldr	r2, [pc, #432]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 80037a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e00b      	b.n	80037c4 <HAL_RCC_OscConfig+0xb0>
 80037ac:	4b69      	ldr	r3, [pc, #420]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a68      	ldr	r2, [pc, #416]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 80037b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	4b66      	ldr	r3, [pc, #408]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a65      	ldr	r2, [pc, #404]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 80037be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d013      	beq.n	80037f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037cc:	f7fd fc16 	bl	8000ffc <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d4:	f7fd fc12 	bl	8000ffc <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	; 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e207      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e6:	4b5b      	ldr	r3, [pc, #364]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0xc0>
 80037f2:	e014      	b.n	800381e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fd fc02 	bl	8000ffc <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037fc:	f7fd fbfe 	bl	8000ffc <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	; 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e1f3      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380e:	4b51      	ldr	r3, [pc, #324]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1f0      	bne.n	80037fc <HAL_RCC_OscConfig+0xe8>
 800381a:	e000      	b.n	800381e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800381c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d063      	beq.n	80038f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800382a:	4b4a      	ldr	r3, [pc, #296]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00b      	beq.n	800384e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003836:	4b47      	ldr	r3, [pc, #284]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800383e:	2b08      	cmp	r3, #8
 8003840:	d11c      	bne.n	800387c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003842:	4b44      	ldr	r3, [pc, #272]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d116      	bne.n	800387c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384e:	4b41      	ldr	r3, [pc, #260]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <HAL_RCC_OscConfig+0x152>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d001      	beq.n	8003866 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e1c7      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003866:	4b3b      	ldr	r3, [pc, #236]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4937      	ldr	r1, [pc, #220]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 8003876:	4313      	orrs	r3, r2
 8003878:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387a:	e03a      	b.n	80038f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d020      	beq.n	80038c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003884:	4b34      	ldr	r3, [pc, #208]	; (8003958 <HAL_RCC_OscConfig+0x244>)
 8003886:	2201      	movs	r2, #1
 8003888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388a:	f7fd fbb7 	bl	8000ffc <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003892:	f7fd fbb3 	bl	8000ffc <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e1a8      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a4:	4b2b      	ldr	r3, [pc, #172]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b0:	4b28      	ldr	r3, [pc, #160]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	4925      	ldr	r1, [pc, #148]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	600b      	str	r3, [r1, #0]
 80038c4:	e015      	b.n	80038f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c6:	4b24      	ldr	r3, [pc, #144]	; (8003958 <HAL_RCC_OscConfig+0x244>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fd fb96 	bl	8000ffc <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038d4:	f7fd fb92 	bl	8000ffc <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e187      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e6:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d036      	beq.n	800396c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d016      	beq.n	8003934 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003906:	4b15      	ldr	r3, [pc, #84]	; (800395c <HAL_RCC_OscConfig+0x248>)
 8003908:	2201      	movs	r2, #1
 800390a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fd fb76 	bl	8000ffc <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003914:	f7fd fb72 	bl	8000ffc <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e167      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <HAL_RCC_OscConfig+0x240>)
 8003928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x200>
 8003932:	e01b      	b.n	800396c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <HAL_RCC_OscConfig+0x248>)
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393a:	f7fd fb5f 	bl	8000ffc <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003940:	e00e      	b.n	8003960 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003942:	f7fd fb5b 	bl	8000ffc <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d907      	bls.n	8003960 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e150      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4e2>
 8003954:	40023800 	.word	0x40023800
 8003958:	42470000 	.word	0x42470000
 800395c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003960:	4b88      	ldr	r3, [pc, #544]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1ea      	bne.n	8003942 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 8097 	beq.w	8003aa8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397a:	2300      	movs	r3, #0
 800397c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800397e:	4b81      	ldr	r3, [pc, #516]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10f      	bne.n	80039aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	60bb      	str	r3, [r7, #8]
 800398e:	4b7d      	ldr	r3, [pc, #500]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	4a7c      	ldr	r2, [pc, #496]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003998:	6413      	str	r3, [r2, #64]	; 0x40
 800399a:	4b7a      	ldr	r3, [pc, #488]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a6:	2301      	movs	r3, #1
 80039a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039aa:	4b77      	ldr	r3, [pc, #476]	; (8003b88 <HAL_RCC_OscConfig+0x474>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d118      	bne.n	80039e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039b6:	4b74      	ldr	r3, [pc, #464]	; (8003b88 <HAL_RCC_OscConfig+0x474>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a73      	ldr	r2, [pc, #460]	; (8003b88 <HAL_RCC_OscConfig+0x474>)
 80039bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c2:	f7fd fb1b 	bl	8000ffc <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ca:	f7fd fb17 	bl	8000ffc <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e10c      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039dc:	4b6a      	ldr	r3, [pc, #424]	; (8003b88 <HAL_RCC_OscConfig+0x474>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f0      	beq.n	80039ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d106      	bne.n	80039fe <HAL_RCC_OscConfig+0x2ea>
 80039f0:	4b64      	ldr	r3, [pc, #400]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	4a63      	ldr	r2, [pc, #396]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	6713      	str	r3, [r2, #112]	; 0x70
 80039fc:	e01c      	b.n	8003a38 <HAL_RCC_OscConfig+0x324>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2b05      	cmp	r3, #5
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCC_OscConfig+0x30c>
 8003a06:	4b5f      	ldr	r3, [pc, #380]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	4a5e      	ldr	r2, [pc, #376]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003a0c:	f043 0304 	orr.w	r3, r3, #4
 8003a10:	6713      	str	r3, [r2, #112]	; 0x70
 8003a12:	4b5c      	ldr	r3, [pc, #368]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	4a5b      	ldr	r2, [pc, #364]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1e:	e00b      	b.n	8003a38 <HAL_RCC_OscConfig+0x324>
 8003a20:	4b58      	ldr	r3, [pc, #352]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a24:	4a57      	ldr	r2, [pc, #348]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2c:	4b55      	ldr	r3, [pc, #340]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	4a54      	ldr	r2, [pc, #336]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003a32:	f023 0304 	bic.w	r3, r3, #4
 8003a36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d015      	beq.n	8003a6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7fd fadc 	bl	8000ffc <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a48:	f7fd fad8 	bl	8000ffc <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e0cb      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5e:	4b49      	ldr	r3, [pc, #292]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0ee      	beq.n	8003a48 <HAL_RCC_OscConfig+0x334>
 8003a6a:	e014      	b.n	8003a96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6c:	f7fd fac6 	bl	8000ffc <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a74:	f7fd fac2 	bl	8000ffc <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e0b5      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8a:	4b3e      	ldr	r3, [pc, #248]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1ee      	bne.n	8003a74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d105      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a9c:	4b39      	ldr	r3, [pc, #228]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	4a38      	ldr	r2, [pc, #224]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80a1 	beq.w	8003bf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ab2:	4b34      	ldr	r3, [pc, #208]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d05c      	beq.n	8003b78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d141      	bne.n	8003b4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac6:	4b31      	ldr	r3, [pc, #196]	; (8003b8c <HAL_RCC_OscConfig+0x478>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003acc:	f7fd fa96 	bl	8000ffc <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fd fa92 	bl	8000ffc <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e087      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae6:	4b27      	ldr	r3, [pc, #156]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69da      	ldr	r2, [r3, #28]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	019b      	lsls	r3, r3, #6
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b08:	085b      	lsrs	r3, r3, #1
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	041b      	lsls	r3, r3, #16
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	061b      	lsls	r3, r3, #24
 8003b16:	491b      	ldr	r1, [pc, #108]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <HAL_RCC_OscConfig+0x478>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b22:	f7fd fa6b 	bl	8000ffc <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b2a:	f7fd fa67 	bl	8000ffc <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e05c      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0f0      	beq.n	8003b2a <HAL_RCC_OscConfig+0x416>
 8003b48:	e054      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <HAL_RCC_OscConfig+0x478>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7fd fa54 	bl	8000ffc <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b58:	f7fd fa50 	bl	8000ffc <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e045      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6a:	4b06      	ldr	r3, [pc, #24]	; (8003b84 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x444>
 8003b76:	e03d      	b.n	8003bf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d107      	bne.n	8003b90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e038      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4e2>
 8003b84:	40023800 	.word	0x40023800
 8003b88:	40007000 	.word	0x40007000
 8003b8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b90:	4b1b      	ldr	r3, [pc, #108]	; (8003c00 <HAL_RCC_OscConfig+0x4ec>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d028      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d121      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d11a      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d111      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	085b      	lsrs	r3, r3, #1
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d107      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800

08003c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0cc      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c18:	4b68      	ldr	r3, [pc, #416]	; (8003dbc <HAL_RCC_ClockConfig+0x1b8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d90c      	bls.n	8003c40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	4b65      	ldr	r3, [pc, #404]	; (8003dbc <HAL_RCC_ClockConfig+0x1b8>)
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2e:	4b63      	ldr	r3, [pc, #396]	; (8003dbc <HAL_RCC_ClockConfig+0x1b8>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d001      	beq.n	8003c40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0b8      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d020      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c58:	4b59      	ldr	r3, [pc, #356]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	4a58      	ldr	r2, [pc, #352]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c70:	4b53      	ldr	r3, [pc, #332]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	4a52      	ldr	r2, [pc, #328]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c7c:	4b50      	ldr	r3, [pc, #320]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	494d      	ldr	r1, [pc, #308]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d044      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d107      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca2:	4b47      	ldr	r3, [pc, #284]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d119      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e07f      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d003      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	d107      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc2:	4b3f      	ldr	r3, [pc, #252]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e06f      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd2:	4b3b      	ldr	r3, [pc, #236]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e067      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ce2:	4b37      	ldr	r3, [pc, #220]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f023 0203 	bic.w	r2, r3, #3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	4934      	ldr	r1, [pc, #208]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf4:	f7fd f982 	bl	8000ffc <HAL_GetTick>
 8003cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	e00a      	b.n	8003d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cfc:	f7fd f97e 	bl	8000ffc <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e04f      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	4b2b      	ldr	r3, [pc, #172]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 020c 	and.w	r2, r3, #12
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d1eb      	bne.n	8003cfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d24:	4b25      	ldr	r3, [pc, #148]	; (8003dbc <HAL_RCC_ClockConfig+0x1b8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d20c      	bcs.n	8003d4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d32:	4b22      	ldr	r3, [pc, #136]	; (8003dbc <HAL_RCC_ClockConfig+0x1b8>)
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3a:	4b20      	ldr	r3, [pc, #128]	; (8003dbc <HAL_RCC_ClockConfig+0x1b8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d001      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e032      	b.n	8003db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d58:	4b19      	ldr	r3, [pc, #100]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	4916      	ldr	r1, [pc, #88]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d009      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d76:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	490e      	ldr	r1, [pc, #56]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d8a:	f000 f821 	bl	8003dd0 <HAL_RCC_GetSysClockFreq>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	490a      	ldr	r1, [pc, #40]	; (8003dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d9c:	5ccb      	ldrb	r3, [r1, r3]
 8003d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003da2:	4a09      	ldr	r2, [pc, #36]	; (8003dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003da6:	4b09      	ldr	r3, [pc, #36]	; (8003dcc <HAL_RCC_ClockConfig+0x1c8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fd f8e2 	bl	8000f74 <HAL_InitTick>

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40023c00 	.word	0x40023c00
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	08009510 	.word	0x08009510
 8003dc8:	20000000 	.word	0x20000000
 8003dcc:	20000004 	.word	0x20000004

08003dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dd4:	b094      	sub	sp, #80	; 0x50
 8003dd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	647b      	str	r3, [r7, #68]	; 0x44
 8003ddc:	2300      	movs	r3, #0
 8003dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003de0:	2300      	movs	r3, #0
 8003de2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003de8:	4b79      	ldr	r3, [pc, #484]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 030c 	and.w	r3, r3, #12
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d00d      	beq.n	8003e10 <HAL_RCC_GetSysClockFreq+0x40>
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	f200 80e1 	bhi.w	8003fbc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_RCC_GetSysClockFreq+0x34>
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d003      	beq.n	8003e0a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e02:	e0db      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e04:	4b73      	ldr	r3, [pc, #460]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e08:	e0db      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e0a:	4b73      	ldr	r3, [pc, #460]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e0e:	e0d8      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e10:	4b6f      	ldr	r3, [pc, #444]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e1a:	4b6d      	ldr	r3, [pc, #436]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d063      	beq.n	8003eee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e26:	4b6a      	ldr	r3, [pc, #424]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	099b      	lsrs	r3, r3, #6
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e38:	633b      	str	r3, [r7, #48]	; 0x30
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e42:	4622      	mov	r2, r4
 8003e44:	462b      	mov	r3, r5
 8003e46:	f04f 0000 	mov.w	r0, #0
 8003e4a:	f04f 0100 	mov.w	r1, #0
 8003e4e:	0159      	lsls	r1, r3, #5
 8003e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e54:	0150      	lsls	r0, r2, #5
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	1a51      	subs	r1, r2, r1
 8003e5e:	6139      	str	r1, [r7, #16]
 8003e60:	4629      	mov	r1, r5
 8003e62:	eb63 0301 	sbc.w	r3, r3, r1
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e74:	4659      	mov	r1, fp
 8003e76:	018b      	lsls	r3, r1, #6
 8003e78:	4651      	mov	r1, sl
 8003e7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e7e:	4651      	mov	r1, sl
 8003e80:	018a      	lsls	r2, r1, #6
 8003e82:	4651      	mov	r1, sl
 8003e84:	ebb2 0801 	subs.w	r8, r2, r1
 8003e88:	4659      	mov	r1, fp
 8003e8a:	eb63 0901 	sbc.w	r9, r3, r1
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ea2:	4690      	mov	r8, r2
 8003ea4:	4699      	mov	r9, r3
 8003ea6:	4623      	mov	r3, r4
 8003ea8:	eb18 0303 	adds.w	r3, r8, r3
 8003eac:	60bb      	str	r3, [r7, #8]
 8003eae:	462b      	mov	r3, r5
 8003eb0:	eb49 0303 	adc.w	r3, r9, r3
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	024b      	lsls	r3, r1, #9
 8003ec6:	4621      	mov	r1, r4
 8003ec8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ecc:	4621      	mov	r1, r4
 8003ece:	024a      	lsls	r2, r1, #9
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003edc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ee0:	f7fc f9ce 	bl	8000280 <__aeabi_uldivmod>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4613      	mov	r3, r2
 8003eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eec:	e058      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eee:	4b38      	ldr	r3, [pc, #224]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	099b      	lsrs	r3, r3, #6
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	4611      	mov	r1, r2
 8003efa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003efe:	623b      	str	r3, [r7, #32]
 8003f00:	2300      	movs	r3, #0
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
 8003f04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f08:	4642      	mov	r2, r8
 8003f0a:	464b      	mov	r3, r9
 8003f0c:	f04f 0000 	mov.w	r0, #0
 8003f10:	f04f 0100 	mov.w	r1, #0
 8003f14:	0159      	lsls	r1, r3, #5
 8003f16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f1a:	0150      	lsls	r0, r2, #5
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4641      	mov	r1, r8
 8003f22:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f26:	4649      	mov	r1, r9
 8003f28:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f40:	ebb2 040a 	subs.w	r4, r2, sl
 8003f44:	eb63 050b 	sbc.w	r5, r3, fp
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	00eb      	lsls	r3, r5, #3
 8003f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f56:	00e2      	lsls	r2, r4, #3
 8003f58:	4614      	mov	r4, r2
 8003f5a:	461d      	mov	r5, r3
 8003f5c:	4643      	mov	r3, r8
 8003f5e:	18e3      	adds	r3, r4, r3
 8003f60:	603b      	str	r3, [r7, #0]
 8003f62:	464b      	mov	r3, r9
 8003f64:	eb45 0303 	adc.w	r3, r5, r3
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f76:	4629      	mov	r1, r5
 8003f78:	028b      	lsls	r3, r1, #10
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f80:	4621      	mov	r1, r4
 8003f82:	028a      	lsls	r2, r1, #10
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	61bb      	str	r3, [r7, #24]
 8003f8e:	61fa      	str	r2, [r7, #28]
 8003f90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f94:	f7fc f974 	bl	8000280 <__aeabi_uldivmod>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	0c1b      	lsrs	r3, r3, #16
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	3301      	adds	r3, #1
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003fb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fba:	e002      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3750      	adds	r7, #80	; 0x50
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fce:	bf00      	nop
 8003fd0:	40023800 	.word	0x40023800
 8003fd4:	00f42400 	.word	0x00f42400
 8003fd8:	007a1200 	.word	0x007a1200

08003fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	20000000 	.word	0x20000000

08003ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ff8:	f7ff fff0 	bl	8003fdc <HAL_RCC_GetHCLKFreq>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	4b05      	ldr	r3, [pc, #20]	; (8004014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	0a9b      	lsrs	r3, r3, #10
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	4903      	ldr	r1, [pc, #12]	; (8004018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800400a:	5ccb      	ldrb	r3, [r1, r3]
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004010:	4618      	mov	r0, r3
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40023800 	.word	0x40023800
 8004018:	08009520 	.word	0x08009520

0800401c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d105      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004040:	2b00      	cmp	r3, #0
 8004042:	d035      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004044:	4b62      	ldr	r3, [pc, #392]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800404a:	f7fc ffd7 	bl	8000ffc <HAL_GetTick>
 800404e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004050:	e008      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004052:	f7fc ffd3 	bl	8000ffc <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d901      	bls.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e0b0      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004064:	4b5b      	ldr	r3, [pc, #364]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1f0      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	019a      	lsls	r2, r3, #6
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	071b      	lsls	r3, r3, #28
 800407c:	4955      	ldr	r1, [pc, #340]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004084:	4b52      	ldr	r3, [pc, #328]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004086:	2201      	movs	r2, #1
 8004088:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800408a:	f7fc ffb7 	bl	8000ffc <HAL_GetTick>
 800408e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004092:	f7fc ffb3 	bl	8000ffc <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e090      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040a4:	4b4b      	ldr	r3, [pc, #300]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8083 	beq.w	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	4b44      	ldr	r3, [pc, #272]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	4a43      	ldr	r2, [pc, #268]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040cc:	6413      	str	r3, [r2, #64]	; 0x40
 80040ce:	4b41      	ldr	r3, [pc, #260]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80040da:	4b3f      	ldr	r3, [pc, #252]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a3e      	ldr	r2, [pc, #248]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040e6:	f7fc ff89 	bl	8000ffc <HAL_GetTick>
 80040ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040ec:	e008      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80040ee:	f7fc ff85 	bl	8000ffc <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e062      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004100:	4b35      	ldr	r3, [pc, #212]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0f0      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800410c:	4b31      	ldr	r3, [pc, #196]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800410e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004114:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d02f      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	429a      	cmp	r2, r3
 8004128:	d028      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800412a:	4b2a      	ldr	r3, [pc, #168]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004132:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004134:	4b29      	ldr	r3, [pc, #164]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004136:	2201      	movs	r2, #1
 8004138:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800413a:	4b28      	ldr	r3, [pc, #160]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004140:	4a24      	ldr	r2, [pc, #144]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004146:	4b23      	ldr	r3, [pc, #140]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b01      	cmp	r3, #1
 8004150:	d114      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004152:	f7fc ff53 	bl	8000ffc <HAL_GetTick>
 8004156:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004158:	e00a      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800415a:	f7fc ff4f 	bl	8000ffc <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	f241 3288 	movw	r2, #5000	; 0x1388
 8004168:	4293      	cmp	r3, r2
 800416a:	d901      	bls.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e02a      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004170:	4b18      	ldr	r3, [pc, #96]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0ee      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004184:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004188:	d10d      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800418a:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800419a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419e:	490d      	ldr	r1, [pc, #52]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	608b      	str	r3, [r1, #8]
 80041a4:	e005      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80041a6:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041b0:	6093      	str	r3, [r2, #8]
 80041b2:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041be:	4905      	ldr	r1, [pc, #20]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	42470068 	.word	0x42470068
 80041d4:	40023800 	.word	0x40023800
 80041d8:	40007000 	.word	0x40007000
 80041dc:	42470e40 	.word	0x42470e40

080041e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d13e      	bne.n	800427c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80041fe:	4b23      	ldr	r3, [pc, #140]	; (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d12f      	bne.n	8004274 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004214:	4b1e      	ldr	r3, [pc, #120]	; (8004290 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004216:	617b      	str	r3, [r7, #20]
          break;
 8004218:	e02f      	b.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800421a:	4b1c      	ldr	r3, [pc, #112]	; (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004222:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004226:	d108      	bne.n	800423a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004228:	4b18      	ldr	r3, [pc, #96]	; (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004230:	4a18      	ldr	r2, [pc, #96]	; (8004294 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004232:	fbb2 f3f3 	udiv	r3, r2, r3
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	e007      	b.n	800424a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800423a:	4b14      	ldr	r3, [pc, #80]	; (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004242:	4a15      	ldr	r2, [pc, #84]	; (8004298 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004244:	fbb2 f3f3 	udiv	r3, r2, r3
 8004248:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800424a:	4b10      	ldr	r3, [pc, #64]	; (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800424c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004250:	099b      	lsrs	r3, r3, #6
 8004252:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	fb02 f303 	mul.w	r3, r2, r3
 800425c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800425e:	4b0b      	ldr	r3, [pc, #44]	; (800428c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004264:	0f1b      	lsrs	r3, r3, #28
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004270:	617b      	str	r3, [r7, #20]
          break;
 8004272:	e002      	b.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
          break;
 8004278:	bf00      	nop
        }
      }
      break;
 800427a:	bf00      	nop
    }
  }
  return frequency;
 800427c:	697b      	ldr	r3, [r7, #20]
}
 800427e:	4618      	mov	r0, r3
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40023800 	.word	0x40023800
 8004290:	00bb8000 	.word	0x00bb8000
 8004294:	007a1200 	.word	0x007a1200
 8004298:	00f42400 	.word	0x00f42400

0800429c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e07b      	b.n	80043a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d108      	bne.n	80042c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042be:	d009      	beq.n	80042d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	61da      	str	r2, [r3, #28]
 80042c6:	e005      	b.n	80042d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fc fd08 	bl	8000d04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800430a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800431c:	431a      	orrs	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004358:	ea42 0103 	orr.w	r1, r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004360:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	0c1b      	lsrs	r3, r3, #16
 8004372:	f003 0104 	and.w	r1, r3, #4
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	f003 0210 	and.w	r2, r3, #16
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004394:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b08c      	sub	sp, #48	; 0x30
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
 80043ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043bc:	2301      	movs	r3, #1
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_SPI_TransmitReceive+0x26>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e18a      	b.n	80046ea <HAL_SPI_TransmitReceive+0x33c>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043dc:	f7fc fe0e 	bl	8000ffc <HAL_GetTick>
 80043e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80043f2:	887b      	ldrh	r3, [r7, #2]
 80043f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d00f      	beq.n	800441e <HAL_SPI_TransmitReceive+0x70>
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004404:	d107      	bne.n	8004416 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d103      	bne.n	8004416 <HAL_SPI_TransmitReceive+0x68>
 800440e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004412:	2b04      	cmp	r3, #4
 8004414:	d003      	beq.n	800441e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004416:	2302      	movs	r3, #2
 8004418:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800441c:	e15b      	b.n	80046d6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_SPI_TransmitReceive+0x82>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_SPI_TransmitReceive+0x82>
 800442a:	887b      	ldrh	r3, [r7, #2]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d103      	bne.n	8004438 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004436:	e14e      	b.n	80046d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b04      	cmp	r3, #4
 8004442:	d003      	beq.n	800444c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2205      	movs	r2, #5
 8004448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	887a      	ldrh	r2, [r7, #2]
 800445c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	887a      	ldrh	r2, [r7, #2]
 8004462:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	887a      	ldrh	r2, [r7, #2]
 800446e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	887a      	ldrh	r2, [r7, #2]
 8004474:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448c:	2b40      	cmp	r3, #64	; 0x40
 800448e:	d007      	beq.n	80044a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800449e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a8:	d178      	bne.n	800459c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_SPI_TransmitReceive+0x10a>
 80044b2:	8b7b      	ldrh	r3, [r7, #26]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d166      	bne.n	8004586 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	881a      	ldrh	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	1c9a      	adds	r2, r3, #2
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044dc:	e053      	b.n	8004586 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d11b      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x176>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d016      	beq.n	8004524 <HAL_SPI_TransmitReceive+0x176>
 80044f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d113      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	881a      	ldrh	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	1c9a      	adds	r2, r3, #2
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b01      	cmp	r3, #1
 8004530:	d119      	bne.n	8004566 <HAL_SPI_TransmitReceive+0x1b8>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d014      	beq.n	8004566 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	b292      	uxth	r2, r2
 8004548:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454e:	1c9a      	adds	r2, r3, #2
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004562:	2301      	movs	r3, #1
 8004564:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004566:	f7fc fd49 	bl	8000ffc <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004572:	429a      	cmp	r2, r3
 8004574:	d807      	bhi.n	8004586 <HAL_SPI_TransmitReceive+0x1d8>
 8004576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457c:	d003      	beq.n	8004586 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004584:	e0a7      	b.n	80046d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1a6      	bne.n	80044de <HAL_SPI_TransmitReceive+0x130>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1a1      	bne.n	80044de <HAL_SPI_TransmitReceive+0x130>
 800459a:	e07c      	b.n	8004696 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <HAL_SPI_TransmitReceive+0x1fc>
 80045a4:	8b7b      	ldrh	r3, [r7, #26]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d16b      	bne.n	8004682 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	330c      	adds	r3, #12
 80045b4:	7812      	ldrb	r2, [r2, #0]
 80045b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045d0:	e057      	b.n	8004682 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d11c      	bne.n	800461a <HAL_SPI_TransmitReceive+0x26c>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d017      	beq.n	800461a <HAL_SPI_TransmitReceive+0x26c>
 80045ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d114      	bne.n	800461a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	330c      	adds	r3, #12
 80045fa:	7812      	ldrb	r2, [r2, #0]
 80045fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004616:	2300      	movs	r3, #0
 8004618:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b01      	cmp	r3, #1
 8004626:	d119      	bne.n	800465c <HAL_SPI_TransmitReceive+0x2ae>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d014      	beq.n	800465c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	b2d2      	uxtb	r2, r2
 800463e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004658:	2301      	movs	r3, #1
 800465a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800465c:	f7fc fcce 	bl	8000ffc <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004668:	429a      	cmp	r2, r3
 800466a:	d803      	bhi.n	8004674 <HAL_SPI_TransmitReceive+0x2c6>
 800466c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004672:	d102      	bne.n	800467a <HAL_SPI_TransmitReceive+0x2cc>
 8004674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004676:	2b00      	cmp	r3, #0
 8004678:	d103      	bne.n	8004682 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004680:	e029      	b.n	80046d6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004686:	b29b      	uxth	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1a2      	bne.n	80045d2 <HAL_SPI_TransmitReceive+0x224>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d19d      	bne.n	80045d2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004698:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f8b2 	bl	8004804 <SPI_EndRxTxTransaction>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d006      	beq.n	80046b4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80046b2:	e010      	b.n	80046d6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10b      	bne.n	80046d4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	e000      	b.n	80046d6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80046d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3730      	adds	r7, #48	; 0x30
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	4613      	mov	r3, r2
 8004702:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004704:	f7fc fc7a 	bl	8000ffc <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	1a9b      	subs	r3, r3, r2
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	4413      	add	r3, r2
 8004712:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004714:	f7fc fc72 	bl	8000ffc <HAL_GetTick>
 8004718:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800471a:	4b39      	ldr	r3, [pc, #228]	; (8004800 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	015b      	lsls	r3, r3, #5
 8004720:	0d1b      	lsrs	r3, r3, #20
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	fb02 f303 	mul.w	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800472a:	e054      	b.n	80047d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	d050      	beq.n	80047d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004734:	f7fc fc62 	bl	8000ffc <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	429a      	cmp	r2, r3
 8004742:	d902      	bls.n	800474a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d13d      	bne.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004758:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004762:	d111      	bne.n	8004788 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800476c:	d004      	beq.n	8004778 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004776:	d107      	bne.n	8004788 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004786:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004790:	d10f      	bne.n	80047b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e017      	b.n	80047f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4013      	ands	r3, r2
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	bf0c      	ite	eq
 80047e6:	2301      	moveq	r3, #1
 80047e8:	2300      	movne	r3, #0
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d19b      	bne.n	800472c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3720      	adds	r7, #32
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	20000000 	.word	0x20000000

08004804 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004810:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <SPI_EndRxTxTransaction+0x7c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1b      	ldr	r2, [pc, #108]	; (8004884 <SPI_EndRxTxTransaction+0x80>)
 8004816:	fba2 2303 	umull	r2, r3, r2, r3
 800481a:	0d5b      	lsrs	r3, r3, #21
 800481c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004820:	fb02 f303 	mul.w	r3, r2, r3
 8004824:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800482e:	d112      	bne.n	8004856 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2200      	movs	r2, #0
 8004838:	2180      	movs	r1, #128	; 0x80
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f7ff ff5a 	bl	80046f4 <SPI_WaitFlagStateUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d016      	beq.n	8004874 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484a:	f043 0220 	orr.w	r2, r3, #32
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e00f      	b.n	8004876 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	3b01      	subs	r3, #1
 8004860:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486c:	2b80      	cmp	r3, #128	; 0x80
 800486e:	d0f2      	beq.n	8004856 <SPI_EndRxTxTransaction+0x52>
 8004870:	e000      	b.n	8004874 <SPI_EndRxTxTransaction+0x70>
        break;
 8004872:	bf00      	nop
  }

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000000 	.word	0x20000000
 8004884:	165e9f81 	.word	0x165e9f81

08004888 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004888:	b084      	sub	sp, #16
 800488a:	b580      	push	{r7, lr}
 800488c:	b084      	sub	sp, #16
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	f107 001c 	add.w	r0, r7, #28
 8004896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	2b01      	cmp	r3, #1
 800489e:	d122      	bne.n	80048e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80048b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80048c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d105      	bne.n	80048da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f001 fbee 	bl	80060bc <USB_CoreReset>
 80048e0:	4603      	mov	r3, r0
 80048e2:	73fb      	strb	r3, [r7, #15]
 80048e4:	e01a      	b.n	800491c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f001 fbe2 	bl	80060bc <USB_CoreReset>
 80048f8:	4603      	mov	r3, r0
 80048fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80048fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	639a      	str	r2, [r3, #56]	; 0x38
 800490e:	e005      	b.n	800491c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	2b01      	cmp	r3, #1
 8004920:	d10b      	bne.n	800493a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f043 0206 	orr.w	r2, r3, #6
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f043 0220 	orr.w	r2, r3, #32
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800493a:	7bfb      	ldrb	r3, [r7, #15]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004946:	b004      	add	sp, #16
 8004948:	4770      	bx	lr
	...

0800494c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	4613      	mov	r3, r2
 8004958:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800495a:	79fb      	ldrb	r3, [r7, #7]
 800495c:	2b02      	cmp	r3, #2
 800495e:	d165      	bne.n	8004a2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4a41      	ldr	r2, [pc, #260]	; (8004a68 <USB_SetTurnaroundTime+0x11c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d906      	bls.n	8004976 <USB_SetTurnaroundTime+0x2a>
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4a40      	ldr	r2, [pc, #256]	; (8004a6c <USB_SetTurnaroundTime+0x120>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d202      	bcs.n	8004976 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004970:	230f      	movs	r3, #15
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e062      	b.n	8004a3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	4a3c      	ldr	r2, [pc, #240]	; (8004a6c <USB_SetTurnaroundTime+0x120>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d306      	bcc.n	800498c <USB_SetTurnaroundTime+0x40>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	4a3b      	ldr	r2, [pc, #236]	; (8004a70 <USB_SetTurnaroundTime+0x124>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d202      	bcs.n	800498c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004986:	230e      	movs	r3, #14
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	e057      	b.n	8004a3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4a38      	ldr	r2, [pc, #224]	; (8004a70 <USB_SetTurnaroundTime+0x124>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d306      	bcc.n	80049a2 <USB_SetTurnaroundTime+0x56>
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4a37      	ldr	r2, [pc, #220]	; (8004a74 <USB_SetTurnaroundTime+0x128>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d202      	bcs.n	80049a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800499c:	230d      	movs	r3, #13
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	e04c      	b.n	8004a3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4a33      	ldr	r2, [pc, #204]	; (8004a74 <USB_SetTurnaroundTime+0x128>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d306      	bcc.n	80049b8 <USB_SetTurnaroundTime+0x6c>
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4a32      	ldr	r2, [pc, #200]	; (8004a78 <USB_SetTurnaroundTime+0x12c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d802      	bhi.n	80049b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80049b2:	230c      	movs	r3, #12
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	e041      	b.n	8004a3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4a2f      	ldr	r2, [pc, #188]	; (8004a78 <USB_SetTurnaroundTime+0x12c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d906      	bls.n	80049ce <USB_SetTurnaroundTime+0x82>
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4a2e      	ldr	r2, [pc, #184]	; (8004a7c <USB_SetTurnaroundTime+0x130>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d802      	bhi.n	80049ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80049c8:	230b      	movs	r3, #11
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	e036      	b.n	8004a3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	4a2a      	ldr	r2, [pc, #168]	; (8004a7c <USB_SetTurnaroundTime+0x130>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d906      	bls.n	80049e4 <USB_SetTurnaroundTime+0x98>
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	4a29      	ldr	r2, [pc, #164]	; (8004a80 <USB_SetTurnaroundTime+0x134>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d802      	bhi.n	80049e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80049de:	230a      	movs	r3, #10
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	e02b      	b.n	8004a3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	4a26      	ldr	r2, [pc, #152]	; (8004a80 <USB_SetTurnaroundTime+0x134>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d906      	bls.n	80049fa <USB_SetTurnaroundTime+0xae>
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4a25      	ldr	r2, [pc, #148]	; (8004a84 <USB_SetTurnaroundTime+0x138>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d202      	bcs.n	80049fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80049f4:	2309      	movs	r3, #9
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	e020      	b.n	8004a3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	4a21      	ldr	r2, [pc, #132]	; (8004a84 <USB_SetTurnaroundTime+0x138>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d306      	bcc.n	8004a10 <USB_SetTurnaroundTime+0xc4>
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4a20      	ldr	r2, [pc, #128]	; (8004a88 <USB_SetTurnaroundTime+0x13c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d802      	bhi.n	8004a10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004a0a:	2308      	movs	r3, #8
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	e015      	b.n	8004a3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4a1d      	ldr	r2, [pc, #116]	; (8004a88 <USB_SetTurnaroundTime+0x13c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d906      	bls.n	8004a26 <USB_SetTurnaroundTime+0xda>
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4a1c      	ldr	r2, [pc, #112]	; (8004a8c <USB_SetTurnaroundTime+0x140>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d202      	bcs.n	8004a26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004a20:	2307      	movs	r3, #7
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e00a      	b.n	8004a3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004a26:	2306      	movs	r3, #6
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	e007      	b.n	8004a3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004a2c:	79fb      	ldrb	r3, [r7, #7]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d102      	bne.n	8004a38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004a32:	2309      	movs	r3, #9
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	e001      	b.n	8004a3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004a38:	2309      	movs	r3, #9
 8004a3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	029b      	lsls	r3, r3, #10
 8004a50:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004a54:	431a      	orrs	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	00d8acbf 	.word	0x00d8acbf
 8004a6c:	00e4e1c0 	.word	0x00e4e1c0
 8004a70:	00f42400 	.word	0x00f42400
 8004a74:	01067380 	.word	0x01067380
 8004a78:	011a499f 	.word	0x011a499f
 8004a7c:	01312cff 	.word	0x01312cff
 8004a80:	014ca43f 	.word	0x014ca43f
 8004a84:	016e3600 	.word	0x016e3600
 8004a88:	01a6ab1f 	.word	0x01a6ab1f
 8004a8c:	01e84800 	.word	0x01e84800

08004a90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f043 0201 	orr.w	r2, r3, #1
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f023 0201 	bic.w	r2, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d115      	bne.n	8004b22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b02:	2001      	movs	r0, #1
 8004b04:	f7fc fa86 	bl	8001014 <HAL_Delay>
      ms++;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f001 fa45 	bl	8005f9e <USB_GetMode>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d01e      	beq.n	8004b58 <USB_SetCurrentMode+0x84>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b31      	cmp	r3, #49	; 0x31
 8004b1e:	d9f0      	bls.n	8004b02 <USB_SetCurrentMode+0x2e>
 8004b20:	e01a      	b.n	8004b58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b22:	78fb      	ldrb	r3, [r7, #3]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d115      	bne.n	8004b54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b34:	2001      	movs	r0, #1
 8004b36:	f7fc fa6d 	bl	8001014 <HAL_Delay>
      ms++;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f001 fa2c 	bl	8005f9e <USB_GetMode>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <USB_SetCurrentMode+0x84>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b31      	cmp	r3, #49	; 0x31
 8004b50:	d9f0      	bls.n	8004b34 <USB_SetCurrentMode+0x60>
 8004b52:	e001      	b.n	8004b58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e005      	b.n	8004b64 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b32      	cmp	r3, #50	; 0x32
 8004b5c:	d101      	bne.n	8004b62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b086      	sub	sp, #24
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b86:	2300      	movs	r3, #0
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	e009      	b.n	8004ba0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	3340      	adds	r3, #64	; 0x40
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	2200      	movs	r2, #0
 8004b98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	2b0e      	cmp	r3, #14
 8004ba4:	d9f2      	bls.n	8004b8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d11c      	bne.n	8004be6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bba:	f043 0302 	orr.w	r3, r3, #2
 8004bbe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	639a      	str	r2, [r3, #56]	; 0x38
 8004be4:	e00b      	b.n	8004bfe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c04:	461a      	mov	r2, r3
 8004c06:	2300      	movs	r3, #0
 8004c08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c10:	4619      	mov	r1, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c18:	461a      	mov	r2, r3
 8004c1a:	680b      	ldr	r3, [r1, #0]
 8004c1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d10c      	bne.n	8004c3e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d104      	bne.n	8004c34 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f965 	bl	8004efc <USB_SetDevSpeed>
 8004c32:	e008      	b.n	8004c46 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c34:	2101      	movs	r1, #1
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f960 	bl	8004efc <USB_SetDevSpeed>
 8004c3c:	e003      	b.n	8004c46 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c3e:	2103      	movs	r1, #3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f95b 	bl	8004efc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c46:	2110      	movs	r1, #16
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f8f3 	bl	8004e34 <USB_FlushTxFifo>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f91f 	bl	8004e9c <USB_FlushRxFifo>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6e:	461a      	mov	r2, r3
 8004c70:	2300      	movs	r3, #0
 8004c72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c86:	461a      	mov	r2, r3
 8004c88:	2300      	movs	r3, #0
 8004c8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	613b      	str	r3, [r7, #16]
 8004c90:	e043      	b.n	8004d1a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ca8:	d118      	bne.n	8004cdc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10a      	bne.n	8004cc6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	015a      	lsls	r2, r3, #5
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cc2:	6013      	str	r3, [r2, #0]
 8004cc4:	e013      	b.n	8004cee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	e008      	b.n	8004cee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce8:	461a      	mov	r2, r3
 8004cea:	2300      	movs	r3, #0
 8004cec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	3301      	adds	r3, #1
 8004d18:	613b      	str	r3, [r7, #16]
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d3b7      	bcc.n	8004c92 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d22:	2300      	movs	r3, #0
 8004d24:	613b      	str	r3, [r7, #16]
 8004d26:	e043      	b.n	8004db0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d3e:	d118      	bne.n	8004d72 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10a      	bne.n	8004d5c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d52:	461a      	mov	r2, r3
 8004d54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	e013      	b.n	8004d84 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d68:	461a      	mov	r2, r3
 8004d6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	e008      	b.n	8004d84 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7e:	461a      	mov	r2, r3
 8004d80:	2300      	movs	r3, #0
 8004d82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d90:	461a      	mov	r2, r3
 8004d92:	2300      	movs	r3, #0
 8004d94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da2:	461a      	mov	r2, r3
 8004da4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004da8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	3301      	adds	r3, #1
 8004dae:	613b      	str	r3, [r7, #16]
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d3b7      	bcc.n	8004d28 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004dd8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d105      	bne.n	8004dec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	f043 0210 	orr.w	r2, r3, #16
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699a      	ldr	r2, [r3, #24]
 8004df0:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <USB_DevInit+0x2c4>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	f043 0208 	orr.w	r2, r3, #8
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d107      	bne.n	8004e20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e18:	f043 0304 	orr.w	r3, r3, #4
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e2c:	b004      	add	sp, #16
 8004e2e:	4770      	bx	lr
 8004e30:	803c3800 	.word	0x803c3800

08004e34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	3301      	adds	r3, #1
 8004e46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4a13      	ldr	r2, [pc, #76]	; (8004e98 <USB_FlushTxFifo+0x64>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d901      	bls.n	8004e54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e01b      	b.n	8004e8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	daf2      	bge.n	8004e42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	019b      	lsls	r3, r3, #6
 8004e64:	f043 0220 	orr.w	r2, r3, #32
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4a08      	ldr	r2, [pc, #32]	; (8004e98 <USB_FlushTxFifo+0x64>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e006      	b.n	8004e8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	d0f0      	beq.n	8004e6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	00030d40 	.word	0x00030d40

08004e9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4a11      	ldr	r2, [pc, #68]	; (8004ef8 <USB_FlushRxFifo+0x5c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d901      	bls.n	8004eba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e018      	b.n	8004eec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	daf2      	bge.n	8004ea8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2210      	movs	r2, #16
 8004eca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <USB_FlushRxFifo+0x5c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d901      	bls.n	8004ede <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e006      	b.n	8004eec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	f003 0310 	and.w	r3, r3, #16
 8004ee6:	2b10      	cmp	r3, #16
 8004ee8:	d0f0      	beq.n	8004ecc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	00030d40 	.word	0x00030d40

08004efc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	68f9      	ldr	r1, [r7, #12]
 8004f18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b087      	sub	sp, #28
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 0306 	and.w	r3, r3, #6
 8004f46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d102      	bne.n	8004f54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	75fb      	strb	r3, [r7, #23]
 8004f52:	e00a      	b.n	8004f6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d002      	beq.n	8004f60 <USB_GetDevSpeed+0x32>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b06      	cmp	r3, #6
 8004f5e:	d102      	bne.n	8004f66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004f60:	2302      	movs	r3, #2
 8004f62:	75fb      	strb	r3, [r7, #23]
 8004f64:	e001      	b.n	8004f6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004f66:	230f      	movs	r3, #15
 8004f68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	785b      	ldrb	r3, [r3, #1]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d13a      	bne.n	800500a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	f003 030f 	and.w	r3, r3, #15
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	68f9      	ldr	r1, [r7, #12]
 8004fae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d155      	bne.n	8005078 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	791b      	ldrb	r3, [r3, #4]
 8004fe6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fe8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	059b      	lsls	r3, r3, #22
 8004fee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	0151      	lsls	r1, r2, #5
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	e036      	b.n	8005078 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005010:	69da      	ldr	r2, [r3, #28]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	2101      	movs	r1, #1
 800501c:	fa01 f303 	lsl.w	r3, r1, r3
 8005020:	041b      	lsls	r3, r3, #16
 8005022:	68f9      	ldr	r1, [r7, #12]
 8005024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005028:	4313      	orrs	r3, r2
 800502a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d11a      	bne.n	8005078 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	791b      	ldrb	r3, [r3, #4]
 800505c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800505e:	430b      	orrs	r3, r1
 8005060:	4313      	orrs	r3, r2
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	0151      	lsls	r1, r2, #5
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	440a      	add	r2, r1
 800506a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800506e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005072:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005076:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
	...

08005088 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d161      	bne.n	8005168 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ba:	d11f      	bne.n	80050fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	0151      	lsls	r1, r2, #5
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	440a      	add	r2, r1
 80050d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	0151      	lsls	r1, r2, #5
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	440a      	add	r2, r1
 80050f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	f003 030f 	and.w	r3, r3, #15
 800510c:	2101      	movs	r1, #1
 800510e:	fa01 f303 	lsl.w	r3, r1, r3
 8005112:	b29b      	uxth	r3, r3
 8005114:	43db      	mvns	r3, r3
 8005116:	68f9      	ldr	r1, [r7, #12]
 8005118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800511c:	4013      	ands	r3, r2
 800511e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	2101      	movs	r1, #1
 8005132:	fa01 f303 	lsl.w	r3, r1, r3
 8005136:	b29b      	uxth	r3, r3
 8005138:	43db      	mvns	r3, r3
 800513a:	68f9      	ldr	r1, [r7, #12]
 800513c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005140:	4013      	ands	r3, r2
 8005142:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	0159      	lsls	r1, r3, #5
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	440b      	add	r3, r1
 800515a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515e:	4619      	mov	r1, r3
 8005160:	4b35      	ldr	r3, [pc, #212]	; (8005238 <USB_DeactivateEndpoint+0x1b0>)
 8005162:	4013      	ands	r3, r2
 8005164:	600b      	str	r3, [r1, #0]
 8005166:	e060      	b.n	800522a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800517a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800517e:	d11f      	bne.n	80051c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	0151      	lsls	r1, r2, #5
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	440a      	add	r2, r1
 8005196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800519a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800519e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	f003 030f 	and.w	r3, r3, #15
 80051d0:	2101      	movs	r1, #1
 80051d2:	fa01 f303 	lsl.w	r3, r1, r3
 80051d6:	041b      	lsls	r3, r3, #16
 80051d8:	43db      	mvns	r3, r3
 80051da:	68f9      	ldr	r1, [r7, #12]
 80051dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051e0:	4013      	ands	r3, r2
 80051e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ea:	69da      	ldr	r2, [r3, #28]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	2101      	movs	r1, #1
 80051f6:	fa01 f303 	lsl.w	r3, r1, r3
 80051fa:	041b      	lsls	r3, r3, #16
 80051fc:	43db      	mvns	r3, r3
 80051fe:	68f9      	ldr	r1, [r7, #12]
 8005200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005204:	4013      	ands	r3, r2
 8005206:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	0159      	lsls	r1, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	440b      	add	r3, r1
 800521e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005222:	4619      	mov	r1, r3
 8005224:	4b05      	ldr	r3, [pc, #20]	; (800523c <USB_DeactivateEndpoint+0x1b4>)
 8005226:	4013      	ands	r3, r2
 8005228:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	ec337800 	.word	0xec337800
 800523c:	eff37800 	.word	0xeff37800

08005240 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	; 0x28
 8005244:	af02      	add	r7, sp, #8
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	4613      	mov	r3, r2
 800524c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	2b01      	cmp	r3, #1
 800525e:	f040 815c 	bne.w	800551a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d132      	bne.n	80052d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	440a      	add	r2, r1
 8005280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005284:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005288:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800528c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c8:	0cdb      	lsrs	r3, r3, #19
 80052ca:	04db      	lsls	r3, r3, #19
 80052cc:	6113      	str	r3, [r2, #16]
 80052ce:	e074      	b.n	80053ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ea:	0cdb      	lsrs	r3, r3, #19
 80052ec:	04db      	lsls	r3, r3, #19
 80052ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	0151      	lsls	r1, r2, #5
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	440a      	add	r2, r1
 8005306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800530a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800530e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005312:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005320:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	6999      	ldr	r1, [r3, #24]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	440b      	add	r3, r1
 800532c:	1e59      	subs	r1, r3, #1
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	fbb1 f3f3 	udiv	r3, r1, r3
 8005336:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005338:	4b9d      	ldr	r3, [pc, #628]	; (80055b0 <USB_EPStartXfer+0x370>)
 800533a:	400b      	ands	r3, r1
 800533c:	69b9      	ldr	r1, [r7, #24]
 800533e:	0148      	lsls	r0, r1, #5
 8005340:	69f9      	ldr	r1, [r7, #28]
 8005342:	4401      	add	r1, r0
 8005344:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005348:	4313      	orrs	r3, r2
 800534a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005358:	691a      	ldr	r2, [r3, #16]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005362:	69b9      	ldr	r1, [r7, #24]
 8005364:	0148      	lsls	r0, r1, #5
 8005366:	69f9      	ldr	r1, [r7, #28]
 8005368:	4401      	add	r1, r0
 800536a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800536e:	4313      	orrs	r3, r2
 8005370:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	791b      	ldrb	r3, [r3, #4]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d11f      	bne.n	80053ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	0151      	lsls	r1, r2, #5
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	440a      	add	r2, r1
 8005390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005394:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005398:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	0151      	lsls	r1, r2, #5
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	440a      	add	r2, r1
 80053b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d14b      	bne.n	8005458 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d009      	beq.n	80053dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	015a      	lsls	r2, r3, #5
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	4413      	add	r3, r2
 80053d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d4:	461a      	mov	r2, r3
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	791b      	ldrb	r3, [r3, #4]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d128      	bne.n	8005436 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d110      	bne.n	8005416 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	0151      	lsls	r1, r2, #5
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	440a      	add	r2, r1
 800540a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800540e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	e00f      	b.n	8005436 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	0151      	lsls	r1, r2, #5
 8005428:	69fa      	ldr	r2, [r7, #28]
 800542a:	440a      	add	r2, r1
 800542c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005434:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	0151      	lsls	r1, r2, #5
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	440a      	add	r2, r1
 800544c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005450:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	e133      	b.n	80056c0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005472:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005476:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	791b      	ldrb	r3, [r3, #4]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d015      	beq.n	80054ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 811b 	beq.w	80056c0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	2101      	movs	r1, #1
 800549c:	fa01 f303 	lsl.w	r3, r1, r3
 80054a0:	69f9      	ldr	r1, [r7, #28]
 80054a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054a6:	4313      	orrs	r3, r2
 80054a8:	634b      	str	r3, [r1, #52]	; 0x34
 80054aa:	e109      	b.n	80056c0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d110      	bne.n	80054de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	0151      	lsls	r1, r2, #5
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	440a      	add	r2, r1
 80054d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	e00f      	b.n	80054fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	0151      	lsls	r1, r2, #5
 80054f0:	69fa      	ldr	r2, [r7, #28]
 80054f2:	440a      	add	r2, r1
 80054f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	6919      	ldr	r1, [r3, #16]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	781a      	ldrb	r2, [r3, #0]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	699b      	ldr	r3, [r3, #24]
 800550a:	b298      	uxth	r0, r3
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	4603      	mov	r3, r0
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 fade 	bl	8005ad4 <USB_WritePacket>
 8005518:	e0d2      	b.n	80056c0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	0151      	lsls	r1, r2, #5
 800552c:	69fa      	ldr	r2, [r7, #28]
 800552e:	440a      	add	r2, r1
 8005530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005534:	0cdb      	lsrs	r3, r3, #19
 8005536:	04db      	lsls	r3, r3, #19
 8005538:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	0151      	lsls	r1, r2, #5
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	440a      	add	r2, r1
 8005550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005554:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005558:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800555c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d126      	bne.n	80055b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	4413      	add	r3, r2
 800556e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800557c:	69b9      	ldr	r1, [r7, #24]
 800557e:	0148      	lsls	r0, r1, #5
 8005580:	69f9      	ldr	r1, [r7, #28]
 8005582:	4401      	add	r1, r0
 8005584:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005588:	4313      	orrs	r3, r2
 800558a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	0151      	lsls	r1, r2, #5
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	440a      	add	r2, r1
 80055a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055aa:	6113      	str	r3, [r2, #16]
 80055ac:	e03a      	b.n	8005624 <USB_EPStartXfer+0x3e4>
 80055ae:	bf00      	nop
 80055b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	699a      	ldr	r2, [r3, #24]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	1e5a      	subs	r2, r3, #1
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	8afa      	ldrh	r2, [r7, #22]
 80055d0:	fb03 f202 	mul.w	r2, r3, r2
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e4:	691a      	ldr	r2, [r3, #16]
 80055e6:	8afb      	ldrh	r3, [r7, #22]
 80055e8:	04d9      	lsls	r1, r3, #19
 80055ea:	4b38      	ldr	r3, [pc, #224]	; (80056cc <USB_EPStartXfer+0x48c>)
 80055ec:	400b      	ands	r3, r1
 80055ee:	69b9      	ldr	r1, [r7, #24]
 80055f0:	0148      	lsls	r0, r1, #5
 80055f2:	69f9      	ldr	r1, [r7, #28]
 80055f4:	4401      	add	r1, r0
 80055f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055fa:	4313      	orrs	r3, r2
 80055fc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005614:	69b9      	ldr	r1, [r7, #24]
 8005616:	0148      	lsls	r0, r1, #5
 8005618:	69f9      	ldr	r1, [r7, #28]
 800561a:	4401      	add	r1, r0
 800561c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005620:	4313      	orrs	r3, r2
 8005622:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d10d      	bne.n	8005646 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d009      	beq.n	8005646 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	6919      	ldr	r1, [r3, #16]
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005642:	460a      	mov	r2, r1
 8005644:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	791b      	ldrb	r3, [r3, #4]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d128      	bne.n	80056a0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565a:	2b00      	cmp	r3, #0
 800565c:	d110      	bne.n	8005680 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	4413      	add	r3, r2
 8005666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	0151      	lsls	r1, r2, #5
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	440a      	add	r2, r1
 8005674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005678:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	e00f      	b.n	80056a0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	69fa      	ldr	r2, [r7, #28]
 8005694:	440a      	add	r2, r1
 8005696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800569a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800569e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	0151      	lsls	r1, r2, #5
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	440a      	add	r2, r1
 80056b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3720      	adds	r7, #32
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	1ff80000 	.word	0x1ff80000

080056d0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	4613      	mov	r3, r2
 80056dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	f040 80ce 	bne.w	800588e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d132      	bne.n	8005760 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	0151      	lsls	r1, r2, #5
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	440a      	add	r2, r1
 8005710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005714:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005718:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800571c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	0151      	lsls	r1, r2, #5
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	440a      	add	r2, r1
 8005734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005738:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800573c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	4413      	add	r3, r2
 8005746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	0151      	lsls	r1, r2, #5
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	440a      	add	r2, r1
 8005754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005758:	0cdb      	lsrs	r3, r3, #19
 800575a:	04db      	lsls	r3, r3, #19
 800575c:	6113      	str	r3, [r2, #16]
 800575e:	e04e      	b.n	80057fe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	0151      	lsls	r1, r2, #5
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	440a      	add	r2, r1
 8005776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800577a:	0cdb      	lsrs	r3, r3, #19
 800577c:	04db      	lsls	r3, r3, #19
 800577e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	440a      	add	r2, r1
 8005796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800579a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800579e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057a2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	699a      	ldr	r2, [r3, #24]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d903      	bls.n	80057b8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	68da      	ldr	r2, [r3, #12]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	0151      	lsls	r1, r2, #5
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	440a      	add	r2, r1
 80057ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ee:	6939      	ldr	r1, [r7, #16]
 80057f0:	0148      	lsls	r0, r1, #5
 80057f2:	6979      	ldr	r1, [r7, #20]
 80057f4:	4401      	add	r1, r0
 80057f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057fa:	4313      	orrs	r3, r2
 80057fc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d11e      	bne.n	8005842 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d009      	beq.n	8005820 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	461a      	mov	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	0151      	lsls	r1, r2, #5
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	440a      	add	r2, r1
 8005836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	e097      	b.n	8005972 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	0151      	lsls	r1, r2, #5
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	440a      	add	r2, r1
 8005858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005860:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 8083 	beq.w	8005972 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	f003 030f 	and.w	r3, r3, #15
 800587c:	2101      	movs	r1, #1
 800587e:	fa01 f303 	lsl.w	r3, r1, r3
 8005882:	6979      	ldr	r1, [r7, #20]
 8005884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005888:	4313      	orrs	r3, r2
 800588a:	634b      	str	r3, [r1, #52]	; 0x34
 800588c:	e071      	b.n	8005972 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a8:	0cdb      	lsrs	r3, r3, #19
 80058aa:	04db      	lsls	r3, r3, #19
 80058ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	0151      	lsls	r1, r2, #5
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	0151      	lsls	r1, r2, #5
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	440a      	add	r2, r1
 8005900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005904:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005908:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005916:	691a      	ldr	r2, [r3, #16]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	69db      	ldr	r3, [r3, #28]
 800591c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005920:	6939      	ldr	r1, [r7, #16]
 8005922:	0148      	lsls	r0, r1, #5
 8005924:	6979      	ldr	r1, [r7, #20]
 8005926:	4401      	add	r1, r0
 8005928:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800592c:	4313      	orrs	r3, r2
 800592e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005930:	79fb      	ldrb	r3, [r7, #7]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d10d      	bne.n	8005952 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d009      	beq.n	8005952 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	6919      	ldr	r1, [r3, #16]
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	4413      	add	r3, r2
 800594a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594e:	460a      	mov	r2, r1
 8005950:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	440a      	add	r2, r1
 8005968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800596c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005970:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	371c      	adds	r7, #28
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	785b      	ldrb	r3, [r3, #1]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d14a      	bne.n	8005a34 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b6:	f040 8086 	bne.w	8005ac6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	7812      	ldrb	r2, [r2, #0]
 80059ce:	0151      	lsls	r1, r2, #5
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	440a      	add	r2, r1
 80059d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	7812      	ldrb	r2, [r2, #0]
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3301      	adds	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d902      	bls.n	8005a18 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	75fb      	strb	r3, [r7, #23]
          break;
 8005a16:	e056      	b.n	8005ac6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a30:	d0e7      	beq.n	8005a02 <USB_EPStopXfer+0x82>
 8005a32:	e048      	b.n	8005ac6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a4c:	d13b      	bne.n	8005ac6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	7812      	ldrb	r2, [r2, #0]
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a70:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	7812      	ldrb	r2, [r2, #0]
 8005a86:	0151      	lsls	r1, r2, #5
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	440a      	add	r2, r1
 8005a8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d902      	bls.n	8005aac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	75fb      	strb	r3, [r7, #23]
          break;
 8005aaa:	e00c      	b.n	8005ac6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ac4:	d0e7      	beq.n	8005a96 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b089      	sub	sp, #36	; 0x24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	4611      	mov	r1, r2
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	71fb      	strb	r3, [r7, #7]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005af2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d123      	bne.n	8005b42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005afa:	88bb      	ldrh	r3, [r7, #4]
 8005afc:	3303      	adds	r3, #3
 8005afe:	089b      	lsrs	r3, r3, #2
 8005b00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b02:	2300      	movs	r3, #0
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	e018      	b.n	8005b3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b08:	79fb      	ldrb	r3, [r7, #7]
 8005b0a:	031a      	lsls	r2, r3, #12
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b14:	461a      	mov	r2, r3
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	3301      	adds	r3, #1
 8005b26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	3301      	adds	r3, #1
 8005b32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	3301      	adds	r3, #1
 8005b38:	61bb      	str	r3, [r7, #24]
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d3e2      	bcc.n	8005b08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3724      	adds	r7, #36	; 0x24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b08b      	sub	sp, #44	; 0x2c
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b66:	88fb      	ldrh	r3, [r7, #6]
 8005b68:	089b      	lsrs	r3, r3, #2
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b6e:	88fb      	ldrh	r3, [r7, #6]
 8005b70:	f003 0303 	and.w	r3, r3, #3
 8005b74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b76:	2300      	movs	r3, #0
 8005b78:	623b      	str	r3, [r7, #32]
 8005b7a:	e014      	b.n	8005ba6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	3301      	adds	r3, #1
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	3301      	adds	r3, #1
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	623b      	str	r3, [r7, #32]
 8005ba6:	6a3a      	ldr	r2, [r7, #32]
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d3e6      	bcc.n	8005b7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005bae:	8bfb      	ldrh	r3, [r7, #30]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01e      	beq.n	8005bf2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f107 0310 	add.w	r3, r7, #16
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	701a      	strb	r2, [r3, #0]
      i++;
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	623b      	str	r3, [r7, #32]
      pDest++;
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	3301      	adds	r3, #1
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005be6:	8bfb      	ldrh	r3, [r7, #30]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005bec:	8bfb      	ldrh	r3, [r7, #30]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1ea      	bne.n	8005bc8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	372c      	adds	r7, #44	; 0x2c
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d12c      	bne.n	8005c76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	db12      	blt.n	8005c54 <USB_EPSetStall+0x54>
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00f      	beq.n	8005c54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	e02b      	b.n	8005cce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	db12      	blt.n	8005cae <USB_EPSetStall+0xae>
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00f      	beq.n	8005cae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	015a      	lsls	r2, r3, #5
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4413      	add	r3, r2
 8005c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	0151      	lsls	r1, r2, #5
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	440a      	add	r2, r1
 8005ca4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	0151      	lsls	r1, r2, #5
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ccc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d128      	bne.n	8005d4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	791b      	ldrb	r3, [r3, #4]
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d003      	beq.n	8005d28 <USB_EPClearStall+0x4c>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	791b      	ldrb	r3, [r3, #4]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d138      	bne.n	8005d9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	0151      	lsls	r1, r2, #5
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	440a      	add	r2, r1
 8005d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	e027      	b.n	8005d9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	015a      	lsls	r2, r3, #5
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	4413      	add	r3, r2
 8005d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	0151      	lsls	r1, r2, #5
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	440a      	add	r2, r1
 8005d60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	791b      	ldrb	r3, [r3, #4]
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	d003      	beq.n	8005d7a <USB_EPClearStall+0x9e>
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	791b      	ldrb	r3, [r3, #4]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d10f      	bne.n	8005d9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	0151      	lsls	r1, r2, #5
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	440a      	add	r2, r1
 8005d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dc6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005dca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005ddc:	68f9      	ldr	r1, [r7, #12]
 8005dde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005de2:	4313      	orrs	r3, r2
 8005de4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e0e:	f023 0303 	bic.w	r3, r3, #3
 8005e12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e22:	f023 0302 	bic.w	r3, r3, #2
 8005e26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e50:	f023 0303 	bic.w	r3, r3, #3
 8005e54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e64:	f043 0302 	orr.w	r3, r3, #2
 8005e68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e90:	68fb      	ldr	r3, [r7, #12]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	0c1b      	lsrs	r3, r3, #16
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b085      	sub	sp, #20
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	b29b      	uxth	r3, r3
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	4013      	ands	r3, r2
 8005f32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f34:	68bb      	ldr	r3, [r7, #8]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b087      	sub	sp, #28
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f64:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	f003 030f 	and.w	r3, r3, #15
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f72:	01db      	lsls	r3, r3, #7
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f90:	68bb      	ldr	r3, [r7, #8]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	f003 0301 	and.w	r3, r3, #1
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fd4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005fd8:	f023 0307 	bic.w	r3, r3, #7
 8005fdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	460b      	mov	r3, r1
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	333c      	adds	r3, #60	; 0x3c
 8006016:	3304      	adds	r3, #4
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	4a26      	ldr	r2, [pc, #152]	; (80060b8 <USB_EP0_OutStart+0xb8>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d90a      	bls.n	800603a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006034:	d101      	bne.n	800603a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	e037      	b.n	80060aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006040:	461a      	mov	r2, r3
 8006042:	2300      	movs	r3, #0
 8006044:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006054:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006058:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006068:	f043 0318 	orr.w	r3, r3, #24
 800606c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800607c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006080:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006082:	7afb      	ldrb	r3, [r7, #11]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d10f      	bne.n	80060a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608e:	461a      	mov	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80060a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	371c      	adds	r7, #28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	4f54300a 	.word	0x4f54300a

080060bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	3301      	adds	r3, #1
 80060cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4a13      	ldr	r2, [pc, #76]	; (8006120 <USB_CoreReset+0x64>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d901      	bls.n	80060da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e01b      	b.n	8006112 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	daf2      	bge.n	80060c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f043 0201 	orr.w	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3301      	adds	r3, #1
 80060f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4a09      	ldr	r2, [pc, #36]	; (8006120 <USB_CoreReset+0x64>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d901      	bls.n	8006104 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e006      	b.n	8006112 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b01      	cmp	r3, #1
 800610e:	d0f0      	beq.n	80060f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	00030d40 	.word	0x00030d40

08006124 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006130:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006134:	f002 fca2 	bl	8008a7c <USBD_static_malloc>
 8006138:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d109      	bne.n	8006154 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	32b0      	adds	r2, #176	; 0xb0
 800614a:	2100      	movs	r1, #0
 800614c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006150:	2302      	movs	r3, #2
 8006152:	e0d4      	b.n	80062fe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006154:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006158:	2100      	movs	r1, #0
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f002 fcfc 	bl	8008b58 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	32b0      	adds	r2, #176	; 0xb0
 800616a:	68f9      	ldr	r1, [r7, #12]
 800616c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	32b0      	adds	r2, #176	; 0xb0
 800617a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	7c1b      	ldrb	r3, [r3, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d138      	bne.n	80061fe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800618c:	4b5e      	ldr	r3, [pc, #376]	; (8006308 <USBD_CDC_Init+0x1e4>)
 800618e:	7819      	ldrb	r1, [r3, #0]
 8006190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006194:	2202      	movs	r2, #2
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f002 fb4d 	bl	8008836 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800619c:	4b5a      	ldr	r3, [pc, #360]	; (8006308 <USBD_CDC_Init+0x1e4>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	f003 020f 	and.w	r2, r3, #15
 80061a4:	6879      	ldr	r1, [r7, #4]
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	440b      	add	r3, r1
 80061b0:	3324      	adds	r3, #36	; 0x24
 80061b2:	2201      	movs	r2, #1
 80061b4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80061b6:	4b55      	ldr	r3, [pc, #340]	; (800630c <USBD_CDC_Init+0x1e8>)
 80061b8:	7819      	ldrb	r1, [r3, #0]
 80061ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061be:	2202      	movs	r2, #2
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f002 fb38 	bl	8008836 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80061c6:	4b51      	ldr	r3, [pc, #324]	; (800630c <USBD_CDC_Init+0x1e8>)
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	f003 020f 	and.w	r2, r3, #15
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	440b      	add	r3, r1
 80061da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80061de:	2201      	movs	r2, #1
 80061e0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80061e2:	4b4b      	ldr	r3, [pc, #300]	; (8006310 <USBD_CDC_Init+0x1ec>)
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	f003 020f 	and.w	r2, r3, #15
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	440b      	add	r3, r1
 80061f6:	3326      	adds	r3, #38	; 0x26
 80061f8:	2210      	movs	r2, #16
 80061fa:	801a      	strh	r2, [r3, #0]
 80061fc:	e035      	b.n	800626a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80061fe:	4b42      	ldr	r3, [pc, #264]	; (8006308 <USBD_CDC_Init+0x1e4>)
 8006200:	7819      	ldrb	r1, [r3, #0]
 8006202:	2340      	movs	r3, #64	; 0x40
 8006204:	2202      	movs	r2, #2
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f002 fb15 	bl	8008836 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800620c:	4b3e      	ldr	r3, [pc, #248]	; (8006308 <USBD_CDC_Init+0x1e4>)
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	f003 020f 	and.w	r2, r3, #15
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	440b      	add	r3, r1
 8006220:	3324      	adds	r3, #36	; 0x24
 8006222:	2201      	movs	r2, #1
 8006224:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006226:	4b39      	ldr	r3, [pc, #228]	; (800630c <USBD_CDC_Init+0x1e8>)
 8006228:	7819      	ldrb	r1, [r3, #0]
 800622a:	2340      	movs	r3, #64	; 0x40
 800622c:	2202      	movs	r2, #2
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f002 fb01 	bl	8008836 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006234:	4b35      	ldr	r3, [pc, #212]	; (800630c <USBD_CDC_Init+0x1e8>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	f003 020f 	and.w	r2, r3, #15
 800623c:	6879      	ldr	r1, [r7, #4]
 800623e:	4613      	mov	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	440b      	add	r3, r1
 8006248:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800624c:	2201      	movs	r2, #1
 800624e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006250:	4b2f      	ldr	r3, [pc, #188]	; (8006310 <USBD_CDC_Init+0x1ec>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	f003 020f 	and.w	r2, r3, #15
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	440b      	add	r3, r1
 8006264:	3326      	adds	r3, #38	; 0x26
 8006266:	2210      	movs	r2, #16
 8006268:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800626a:	4b29      	ldr	r3, [pc, #164]	; (8006310 <USBD_CDC_Init+0x1ec>)
 800626c:	7819      	ldrb	r1, [r3, #0]
 800626e:	2308      	movs	r3, #8
 8006270:	2203      	movs	r2, #3
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f002 fadf 	bl	8008836 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006278:	4b25      	ldr	r3, [pc, #148]	; (8006310 <USBD_CDC_Init+0x1ec>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	f003 020f 	and.w	r2, r3, #15
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	4613      	mov	r3, r2
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	440b      	add	r3, r1
 800628c:	3324      	adds	r3, #36	; 0x24
 800628e:	2201      	movs	r2, #1
 8006290:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	33b0      	adds	r3, #176	; 0xb0
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80062c8:	2302      	movs	r3, #2
 80062ca:	e018      	b.n	80062fe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	7c1b      	ldrb	r3, [r3, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10a      	bne.n	80062ea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062d4:	4b0d      	ldr	r3, [pc, #52]	; (800630c <USBD_CDC_Init+0x1e8>)
 80062d6:	7819      	ldrb	r1, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f002 fb96 	bl	8008a14 <USBD_LL_PrepareReceive>
 80062e8:	e008      	b.n	80062fc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80062ea:	4b08      	ldr	r3, [pc, #32]	; (800630c <USBD_CDC_Init+0x1e8>)
 80062ec:	7819      	ldrb	r1, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062f4:	2340      	movs	r3, #64	; 0x40
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f002 fb8c 	bl	8008a14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	20000093 	.word	0x20000093
 800630c:	20000094 	.word	0x20000094
 8006310:	20000095 	.word	0x20000095

08006314 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006320:	4b3a      	ldr	r3, [pc, #232]	; (800640c <USBD_CDC_DeInit+0xf8>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	4619      	mov	r1, r3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f002 faab 	bl	8008882 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800632c:	4b37      	ldr	r3, [pc, #220]	; (800640c <USBD_CDC_DeInit+0xf8>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	f003 020f 	and.w	r2, r3, #15
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	4613      	mov	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	440b      	add	r3, r1
 8006340:	3324      	adds	r3, #36	; 0x24
 8006342:	2200      	movs	r2, #0
 8006344:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006346:	4b32      	ldr	r3, [pc, #200]	; (8006410 <USBD_CDC_DeInit+0xfc>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	4619      	mov	r1, r3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f002 fa98 	bl	8008882 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006352:	4b2f      	ldr	r3, [pc, #188]	; (8006410 <USBD_CDC_DeInit+0xfc>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	f003 020f 	and.w	r2, r3, #15
 800635a:	6879      	ldr	r1, [r7, #4]
 800635c:	4613      	mov	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	440b      	add	r3, r1
 8006366:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800636a:	2200      	movs	r2, #0
 800636c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800636e:	4b29      	ldr	r3, [pc, #164]	; (8006414 <USBD_CDC_DeInit+0x100>)
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f002 fa84 	bl	8008882 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800637a:	4b26      	ldr	r3, [pc, #152]	; (8006414 <USBD_CDC_DeInit+0x100>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	f003 020f 	and.w	r2, r3, #15
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	4613      	mov	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	440b      	add	r3, r1
 800638e:	3324      	adds	r3, #36	; 0x24
 8006390:	2200      	movs	r2, #0
 8006392:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006394:	4b1f      	ldr	r3, [pc, #124]	; (8006414 <USBD_CDC_DeInit+0x100>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	f003 020f 	and.w	r2, r3, #15
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	4613      	mov	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	440b      	add	r3, r1
 80063a8:	3326      	adds	r3, #38	; 0x26
 80063aa:	2200      	movs	r2, #0
 80063ac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	32b0      	adds	r2, #176	; 0xb0
 80063b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01f      	beq.n	8006400 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	33b0      	adds	r3, #176	; 0xb0
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4413      	add	r3, r2
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	32b0      	adds	r2, #176	; 0xb0
 80063de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f002 fb58 	bl	8008a98 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	32b0      	adds	r2, #176	; 0xb0
 80063f2:	2100      	movs	r1, #0
 80063f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20000093 	.word	0x20000093
 8006410:	20000094 	.word	0x20000094
 8006414:	20000095 	.word	0x20000095

08006418 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	32b0      	adds	r2, #176	; 0xb0
 800642c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006430:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006444:	2303      	movs	r3, #3
 8006446:	e0bf      	b.n	80065c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006450:	2b00      	cmp	r3, #0
 8006452:	d050      	beq.n	80064f6 <USBD_CDC_Setup+0xde>
 8006454:	2b20      	cmp	r3, #32
 8006456:	f040 80af 	bne.w	80065b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	88db      	ldrh	r3, [r3, #6]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d03a      	beq.n	80064d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	b25b      	sxtb	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	da1b      	bge.n	80064a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	33b0      	adds	r3, #176	; 0xb0
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006482:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	88d2      	ldrh	r2, [r2, #6]
 8006488:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	88db      	ldrh	r3, [r3, #6]
 800648e:	2b07      	cmp	r3, #7
 8006490:	bf28      	it	cs
 8006492:	2307      	movcs	r3, #7
 8006494:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	89fa      	ldrh	r2, [r7, #14]
 800649a:	4619      	mov	r1, r3
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 fd89 	bl	8007fb4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80064a2:	e090      	b.n	80065c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	785a      	ldrb	r2, [r3, #1]
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	88db      	ldrh	r3, [r3, #6]
 80064b2:	2b3f      	cmp	r3, #63	; 0x3f
 80064b4:	d803      	bhi.n	80064be <USBD_CDC_Setup+0xa6>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	88db      	ldrh	r3, [r3, #6]
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	e000      	b.n	80064c0 <USBD_CDC_Setup+0xa8>
 80064be:	2240      	movs	r2, #64	; 0x40
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80064c6:	6939      	ldr	r1, [r7, #16]
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80064ce:	461a      	mov	r2, r3
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f001 fd9b 	bl	800800c <USBD_CtlPrepareRx>
      break;
 80064d6:	e076      	b.n	80065c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	33b0      	adds	r3, #176	; 0xb0
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	7850      	ldrb	r0, [r2, #1]
 80064ee:	2200      	movs	r2, #0
 80064f0:	6839      	ldr	r1, [r7, #0]
 80064f2:	4798      	blx	r3
      break;
 80064f4:	e067      	b.n	80065c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	785b      	ldrb	r3, [r3, #1]
 80064fa:	2b0b      	cmp	r3, #11
 80064fc:	d851      	bhi.n	80065a2 <USBD_CDC_Setup+0x18a>
 80064fe:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <USBD_CDC_Setup+0xec>)
 8006500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006504:	08006535 	.word	0x08006535
 8006508:	080065b1 	.word	0x080065b1
 800650c:	080065a3 	.word	0x080065a3
 8006510:	080065a3 	.word	0x080065a3
 8006514:	080065a3 	.word	0x080065a3
 8006518:	080065a3 	.word	0x080065a3
 800651c:	080065a3 	.word	0x080065a3
 8006520:	080065a3 	.word	0x080065a3
 8006524:	080065a3 	.word	0x080065a3
 8006528:	080065a3 	.word	0x080065a3
 800652c:	0800655f 	.word	0x0800655f
 8006530:	08006589 	.word	0x08006589
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b03      	cmp	r3, #3
 800653e:	d107      	bne.n	8006550 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006540:	f107 030a 	add.w	r3, r7, #10
 8006544:	2202      	movs	r2, #2
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f001 fd33 	bl	8007fb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800654e:	e032      	b.n	80065b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f001 fcbd 	bl	8007ed2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006558:	2303      	movs	r3, #3
 800655a:	75fb      	strb	r3, [r7, #23]
          break;
 800655c:	e02b      	b.n	80065b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b03      	cmp	r3, #3
 8006568:	d107      	bne.n	800657a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800656a:	f107 030d 	add.w	r3, r7, #13
 800656e:	2201      	movs	r2, #1
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f001 fd1e 	bl	8007fb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006578:	e01d      	b.n	80065b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 fca8 	bl	8007ed2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006582:	2303      	movs	r3, #3
 8006584:	75fb      	strb	r3, [r7, #23]
          break;
 8006586:	e016      	b.n	80065b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b03      	cmp	r3, #3
 8006592:	d00f      	beq.n	80065b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006594:	6839      	ldr	r1, [r7, #0]
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f001 fc9b 	bl	8007ed2 <USBD_CtlError>
            ret = USBD_FAIL;
 800659c:	2303      	movs	r3, #3
 800659e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80065a0:	e008      	b.n	80065b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80065a2:	6839      	ldr	r1, [r7, #0]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 fc94 	bl	8007ed2 <USBD_CtlError>
          ret = USBD_FAIL;
 80065aa:	2303      	movs	r3, #3
 80065ac:	75fb      	strb	r3, [r7, #23]
          break;
 80065ae:	e002      	b.n	80065b6 <USBD_CDC_Setup+0x19e>
          break;
 80065b0:	bf00      	nop
 80065b2:	e008      	b.n	80065c6 <USBD_CDC_Setup+0x1ae>
          break;
 80065b4:	bf00      	nop
      }
      break;
 80065b6:	e006      	b.n	80065c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f001 fc89 	bl	8007ed2 <USBD_CtlError>
      ret = USBD_FAIL;
 80065c0:	2303      	movs	r3, #3
 80065c2:	75fb      	strb	r3, [r7, #23]
      break;
 80065c4:	bf00      	nop
  }

  return (uint8_t)ret;
 80065c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3718      	adds	r7, #24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	460b      	mov	r3, r1
 80065da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80065e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	32b0      	adds	r2, #176	; 0xb0
 80065ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e065      	b.n	80066c6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	32b0      	adds	r2, #176	; 0xb0
 8006604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006608:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800660a:	78fb      	ldrb	r3, [r7, #3]
 800660c:	f003 020f 	and.w	r2, r3, #15
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	4613      	mov	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	440b      	add	r3, r1
 800661c:	3318      	adds	r3, #24
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d02f      	beq.n	8006684 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006624:	78fb      	ldrb	r3, [r7, #3]
 8006626:	f003 020f 	and.w	r2, r3, #15
 800662a:	6879      	ldr	r1, [r7, #4]
 800662c:	4613      	mov	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	440b      	add	r3, r1
 8006636:	3318      	adds	r3, #24
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	f003 010f 	and.w	r1, r3, #15
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	460b      	mov	r3, r1
 8006644:	00db      	lsls	r3, r3, #3
 8006646:	440b      	add	r3, r1
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4403      	add	r3, r0
 800664c:	3348      	adds	r3, #72	; 0x48
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	fbb2 f1f3 	udiv	r1, r2, r3
 8006654:	fb01 f303 	mul.w	r3, r1, r3
 8006658:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800665a:	2b00      	cmp	r3, #0
 800665c:	d112      	bne.n	8006684 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	f003 020f 	and.w	r2, r3, #15
 8006664:	6879      	ldr	r1, [r7, #4]
 8006666:	4613      	mov	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	440b      	add	r3, r1
 8006670:	3318      	adds	r3, #24
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006676:	78f9      	ldrb	r1, [r7, #3]
 8006678:	2300      	movs	r3, #0
 800667a:	2200      	movs	r2, #0
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f002 f9a8 	bl	80089d2 <USBD_LL_Transmit>
 8006682:	e01f      	b.n	80066c4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	2200      	movs	r2, #0
 8006688:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	33b0      	adds	r3, #176	; 0xb0
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d010      	beq.n	80066c4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	33b0      	adds	r3, #176	; 0xb0
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80066ba:	68ba      	ldr	r2, [r7, #8]
 80066bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80066c0:	78fa      	ldrb	r2, [r7, #3]
 80066c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	460b      	mov	r3, r1
 80066d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	32b0      	adds	r2, #176	; 0xb0
 80066e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	32b0      	adds	r2, #176	; 0xb0
 80066f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80066fc:	2303      	movs	r3, #3
 80066fe:	e01a      	b.n	8006736 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f002 f9a6 	bl	8008a56 <USBD_LL_GetRxDataSize>
 800670a:	4602      	mov	r2, r0
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	33b0      	adds	r3, #176	; 0xb0
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006730:	4611      	mov	r1, r2
 8006732:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b084      	sub	sp, #16
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	32b0      	adds	r2, #176	; 0xb0
 8006750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006754:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800675c:	2303      	movs	r3, #3
 800675e:	e025      	b.n	80067ac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	33b0      	adds	r3, #176	; 0xb0
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01a      	beq.n	80067aa <USBD_CDC_EP0_RxReady+0x6c>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800677a:	2bff      	cmp	r3, #255	; 0xff
 800677c:	d015      	beq.n	80067aa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	33b0      	adds	r3, #176	; 0xb0
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006796:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800679e:	b292      	uxth	r2, r2
 80067a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	22ff      	movs	r2, #255	; 0xff
 80067a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80067bc:	2182      	movs	r1, #130	; 0x82
 80067be:	4818      	ldr	r0, [pc, #96]	; (8006820 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067c0:	f000 fd4f 	bl	8007262 <USBD_GetEpDesc>
 80067c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80067c6:	2101      	movs	r1, #1
 80067c8:	4815      	ldr	r0, [pc, #84]	; (8006820 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067ca:	f000 fd4a 	bl	8007262 <USBD_GetEpDesc>
 80067ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067d0:	2181      	movs	r1, #129	; 0x81
 80067d2:	4813      	ldr	r0, [pc, #76]	; (8006820 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80067d4:	f000 fd45 	bl	8007262 <USBD_GetEpDesc>
 80067d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2210      	movs	r2, #16
 80067e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d006      	beq.n	80067fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067f4:	711a      	strb	r2, [r3, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d006      	beq.n	800680e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006808:	711a      	strb	r2, [r3, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2243      	movs	r2, #67	; 0x43
 8006812:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006814:	4b02      	ldr	r3, [pc, #8]	; (8006820 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20000050 	.word	0x20000050

08006824 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800682c:	2182      	movs	r1, #130	; 0x82
 800682e:	4818      	ldr	r0, [pc, #96]	; (8006890 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006830:	f000 fd17 	bl	8007262 <USBD_GetEpDesc>
 8006834:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006836:	2101      	movs	r1, #1
 8006838:	4815      	ldr	r0, [pc, #84]	; (8006890 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800683a:	f000 fd12 	bl	8007262 <USBD_GetEpDesc>
 800683e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006840:	2181      	movs	r1, #129	; 0x81
 8006842:	4813      	ldr	r0, [pc, #76]	; (8006890 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006844:	f000 fd0d 	bl	8007262 <USBD_GetEpDesc>
 8006848:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2210      	movs	r2, #16
 8006854:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d006      	beq.n	800686a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	2200      	movs	r2, #0
 8006860:	711a      	strb	r2, [r3, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	f042 0202 	orr.w	r2, r2, #2
 8006868:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d006      	beq.n	800687e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	711a      	strb	r2, [r3, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f042 0202 	orr.w	r2, r2, #2
 800687c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2243      	movs	r2, #67	; 0x43
 8006882:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006884:	4b02      	ldr	r3, [pc, #8]	; (8006890 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	20000050 	.word	0x20000050

08006894 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800689c:	2182      	movs	r1, #130	; 0x82
 800689e:	4818      	ldr	r0, [pc, #96]	; (8006900 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80068a0:	f000 fcdf 	bl	8007262 <USBD_GetEpDesc>
 80068a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80068a6:	2101      	movs	r1, #1
 80068a8:	4815      	ldr	r0, [pc, #84]	; (8006900 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80068aa:	f000 fcda 	bl	8007262 <USBD_GetEpDesc>
 80068ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80068b0:	2181      	movs	r1, #129	; 0x81
 80068b2:	4813      	ldr	r0, [pc, #76]	; (8006900 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80068b4:	f000 fcd5 	bl	8007262 <USBD_GetEpDesc>
 80068b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d002      	beq.n	80068c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	2210      	movs	r2, #16
 80068c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d006      	beq.n	80068da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068d4:	711a      	strb	r2, [r3, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d006      	beq.n	80068ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068e8:	711a      	strb	r2, [r3, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2243      	movs	r2, #67	; 0x43
 80068f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80068f4:	4b02      	ldr	r3, [pc, #8]	; (8006900 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000050 	.word	0x20000050

08006904 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	220a      	movs	r2, #10
 8006910:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006912:	4b03      	ldr	r3, [pc, #12]	; (8006920 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	2000000c 	.word	0x2000000c

08006924 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006934:	2303      	movs	r3, #3
 8006936:	e009      	b.n	800694c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	33b0      	adds	r3, #176	; 0xb0
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	32b0      	adds	r2, #176	; 0xb0
 800696e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006972:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800697a:	2303      	movs	r3, #3
 800697c:	e008      	b.n	8006990 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	371c      	adds	r7, #28
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	32b0      	adds	r2, #176	; 0xb0
 80069b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80069bc:	2303      	movs	r3, #3
 80069be:	e004      	b.n	80069ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
	...

080069d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	32b0      	adds	r2, #176	; 0xb0
 80069ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80069f0:	2301      	movs	r3, #1
 80069f2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	32b0      	adds	r2, #176	; 0xb0
 80069fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e025      	b.n	8006a56 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d11f      	bne.n	8006a54 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006a1c:	4b10      	ldr	r3, [pc, #64]	; (8006a60 <USBD_CDC_TransmitPacket+0x88>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	f003 020f 	and.w	r2, r3, #15
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4403      	add	r3, r0
 8006a36:	3318      	adds	r3, #24
 8006a38:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006a3a:	4b09      	ldr	r3, [pc, #36]	; (8006a60 <USBD_CDC_TransmitPacket+0x88>)
 8006a3c:	7819      	ldrb	r1, [r3, #0]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 ffc1 	bl	80089d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	20000093 	.word	0x20000093

08006a64 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	32b0      	adds	r2, #176	; 0xb0
 8006a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	32b0      	adds	r2, #176	; 0xb0
 8006a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e018      	b.n	8006ac4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	7c1b      	ldrb	r3, [r3, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10a      	bne.n	8006ab0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a9a:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <USBD_CDC_ReceivePacket+0x68>)
 8006a9c:	7819      	ldrb	r1, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 ffb3 	bl	8008a14 <USBD_LL_PrepareReceive>
 8006aae:	e008      	b.n	8006ac2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ab0:	4b06      	ldr	r3, [pc, #24]	; (8006acc <USBD_CDC_ReceivePacket+0x68>)
 8006ab2:	7819      	ldrb	r1, [r3, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006aba:	2340      	movs	r3, #64	; 0x40
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 ffa9 	bl	8008a14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	20000094 	.word	0x20000094

08006ad0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	4613      	mov	r3, r2
 8006adc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e01f      	b.n	8006b28 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d003      	beq.n	8006b0e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	79fa      	ldrb	r2, [r7, #7]
 8006b1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f001 fe23 	bl	8008768 <USBD_LL_Init>
 8006b22:	4603      	mov	r3, r0
 8006b24:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e025      	b.n	8006b94 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	32ae      	adds	r2, #174	; 0xae
 8006b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00f      	beq.n	8006b84 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	32ae      	adds	r2, #174	; 0xae
 8006b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	f107 020e 	add.w	r2, r7, #14
 8006b78:	4610      	mov	r0, r2
 8006b7a:	4798      	blx	r3
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f001 fe2b 	bl	8008800 <USBD_LL_Start>
 8006baa:	4603      	mov	r3, r0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bbc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d009      	beq.n	8006bf8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	78fa      	ldrb	r2, [r7, #3]
 8006bee:	4611      	mov	r1, r2
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	4798      	blx	r3
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	78fa      	ldrb	r2, [r7, #3]
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	4798      	blx	r3
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b084      	sub	sp, #16
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f001 f908 	bl	8007e5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c6a:	f003 031f 	and.w	r3, r3, #31
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d01a      	beq.n	8006ca8 <USBD_LL_SetupStage+0x72>
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d822      	bhi.n	8006cbc <USBD_LL_SetupStage+0x86>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <USBD_LL_SetupStage+0x4a>
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d00a      	beq.n	8006c94 <USBD_LL_SetupStage+0x5e>
 8006c7e:	e01d      	b.n	8006cbc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fb5f 	bl	800734c <USBD_StdDevReq>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	73fb      	strb	r3, [r7, #15]
      break;
 8006c92:	e020      	b.n	8006cd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fbc7 	bl	8007430 <USBD_StdItfReq>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ca6:	e016      	b.n	8006cd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fc29 	bl	8007508 <USBD_StdEPReq>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8006cba:	e00c      	b.n	8006cd6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006cc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	4619      	mov	r1, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f001 fdf8 	bl	80088c0 <USBD_LL_StallEP>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cd4:	bf00      	nop
  }

  return ret;
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006cf2:	7afb      	ldrb	r3, [r7, #11]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d16e      	bne.n	8006dd6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006cfe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	f040 8098 	bne.w	8006e3c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d913      	bls.n	8006d40 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	1ad2      	subs	r2, r2, r3
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	bf28      	it	cs
 8006d32:	4613      	movcs	r3, r2
 8006d34:	461a      	mov	r2, r3
 8006d36:	6879      	ldr	r1, [r7, #4]
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f001 f984 	bl	8008046 <USBD_CtlContinueRx>
 8006d3e:	e07d      	b.n	8006e3c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d46:	f003 031f 	and.w	r3, r3, #31
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d014      	beq.n	8006d78 <USBD_LL_DataOutStage+0x98>
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d81d      	bhi.n	8006d8e <USBD_LL_DataOutStage+0xae>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <USBD_LL_DataOutStage+0x7c>
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d003      	beq.n	8006d62 <USBD_LL_DataOutStage+0x82>
 8006d5a:	e018      	b.n	8006d8e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	75bb      	strb	r3, [r7, #22]
            break;
 8006d60:	e018      	b.n	8006d94 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 fa5e 	bl	800722e <USBD_CoreFindIF>
 8006d72:	4603      	mov	r3, r0
 8006d74:	75bb      	strb	r3, [r7, #22]
            break;
 8006d76:	e00d      	b.n	8006d94 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	4619      	mov	r1, r3
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f000 fa60 	bl	8007248 <USBD_CoreFindEP>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	75bb      	strb	r3, [r7, #22]
            break;
 8006d8c:	e002      	b.n	8006d94 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	75bb      	strb	r3, [r7, #22]
            break;
 8006d92:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006d94:	7dbb      	ldrb	r3, [r7, #22]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d119      	bne.n	8006dce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d113      	bne.n	8006dce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006da6:	7dba      	ldrb	r2, [r7, #22]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	32ae      	adds	r2, #174	; 0xae
 8006dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00b      	beq.n	8006dce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006db6:	7dba      	ldrb	r2, [r7, #22]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006dbe:	7dba      	ldrb	r2, [r7, #22]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	32ae      	adds	r2, #174	; 0xae
 8006dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f001 f94a 	bl	8008068 <USBD_CtlSendStatus>
 8006dd4:	e032      	b.n	8006e3c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006dd6:	7afb      	ldrb	r3, [r7, #11]
 8006dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	4619      	mov	r1, r3
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 fa31 	bl	8007248 <USBD_CoreFindEP>
 8006de6:	4603      	mov	r3, r0
 8006de8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dea:	7dbb      	ldrb	r3, [r7, #22]
 8006dec:	2bff      	cmp	r3, #255	; 0xff
 8006dee:	d025      	beq.n	8006e3c <USBD_LL_DataOutStage+0x15c>
 8006df0:	7dbb      	ldrb	r3, [r7, #22]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d122      	bne.n	8006e3c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	d117      	bne.n	8006e32 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006e02:	7dba      	ldrb	r2, [r7, #22]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	32ae      	adds	r2, #174	; 0xae
 8006e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00f      	beq.n	8006e32 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006e12:	7dba      	ldrb	r2, [r7, #22]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006e1a:	7dba      	ldrb	r2, [r7, #22]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	32ae      	adds	r2, #174	; 0xae
 8006e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	7afa      	ldrb	r2, [r7, #11]
 8006e28:	4611      	mov	r1, r2
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	4798      	blx	r3
 8006e2e:	4603      	mov	r3, r0
 8006e30:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006e32:	7dfb      	ldrb	r3, [r7, #23]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006e38:	7dfb      	ldrb	r3, [r7, #23]
 8006e3a:	e000      	b.n	8006e3e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b086      	sub	sp, #24
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	607a      	str	r2, [r7, #4]
 8006e52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006e54:	7afb      	ldrb	r3, [r7, #11]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d16f      	bne.n	8006f3a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3314      	adds	r3, #20
 8006e5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d15a      	bne.n	8006f20 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	689a      	ldr	r2, [r3, #8]
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d914      	bls.n	8006ea0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	689a      	ldr	r2, [r3, #8]
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	1ad2      	subs	r2, r2, r3
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	6879      	ldr	r1, [r7, #4]
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f001 f8ac 	bl	8007fea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e92:	2300      	movs	r3, #0
 8006e94:	2200      	movs	r2, #0
 8006e96:	2100      	movs	r1, #0
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f001 fdbb 	bl	8008a14 <USBD_LL_PrepareReceive>
 8006e9e:	e03f      	b.n	8006f20 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d11c      	bne.n	8006ee6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d316      	bcc.n	8006ee6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d20f      	bcs.n	8006ee6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2100      	movs	r1, #0
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f001 f88d 	bl	8007fea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ed8:	2300      	movs	r3, #0
 8006eda:	2200      	movs	r2, #0
 8006edc:	2100      	movs	r1, #0
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f001 fd98 	bl	8008a14 <USBD_LL_PrepareReceive>
 8006ee4:	e01c      	b.n	8006f20 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	d10f      	bne.n	8006f12 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d009      	beq.n	8006f12 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f12:	2180      	movs	r1, #128	; 0x80
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f001 fcd3 	bl	80088c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f001 f8b7 	bl	800808e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d03a      	beq.n	8006fa0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7ff fe42 	bl	8006bb4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006f38:	e032      	b.n	8006fa0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006f3a:	7afb      	ldrb	r3, [r7, #11]
 8006f3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	4619      	mov	r1, r3
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 f97f 	bl	8007248 <USBD_CoreFindEP>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	2bff      	cmp	r3, #255	; 0xff
 8006f52:	d025      	beq.n	8006fa0 <USBD_LL_DataInStage+0x15a>
 8006f54:	7dfb      	ldrb	r3, [r7, #23]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d122      	bne.n	8006fa0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b03      	cmp	r3, #3
 8006f64:	d11c      	bne.n	8006fa0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006f66:	7dfa      	ldrb	r2, [r7, #23]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	32ae      	adds	r2, #174	; 0xae
 8006f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d014      	beq.n	8006fa0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006f76:	7dfa      	ldrb	r2, [r7, #23]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006f7e:	7dfa      	ldrb	r2, [r7, #23]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	32ae      	adds	r2, #174	; 0xae
 8006f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	7afa      	ldrb	r2, [r7, #11]
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	4798      	blx	r3
 8006f92:	4603      	mov	r3, r0
 8006f94:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006f96:	7dbb      	ldrb	r3, [r7, #22]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006f9c:	7dbb      	ldrb	r3, [r7, #22]
 8006f9e:	e000      	b.n	8006fa2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d014      	beq.n	8007010 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00e      	beq.n	8007010 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	6852      	ldr	r2, [r2, #4]
 8006ffe:	b2d2      	uxtb	r2, r2
 8007000:	4611      	mov	r1, r2
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	4798      	blx	r3
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800700c:	2303      	movs	r3, #3
 800700e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007010:	2340      	movs	r3, #64	; 0x40
 8007012:	2200      	movs	r2, #0
 8007014:	2100      	movs	r1, #0
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 fc0d 	bl	8008836 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2240      	movs	r2, #64	; 0x40
 8007028:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800702c:	2340      	movs	r3, #64	; 0x40
 800702e:	2200      	movs	r2, #0
 8007030:	2180      	movs	r1, #128	; 0x80
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f001 fbff 	bl	8008836 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2240      	movs	r2, #64	; 0x40
 8007042:	621a      	str	r2, [r3, #32]

  return ret;
 8007044:	7bfb      	ldrb	r3, [r7, #15]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	78fa      	ldrb	r2, [r7, #3]
 800705e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800706e:	b480      	push	{r7}
 8007070:	b083      	sub	sp, #12
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800707c:	b2da      	uxtb	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2204      	movs	r2, #4
 8007088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	d106      	bne.n	80070bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b082      	sub	sp, #8
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d110      	bne.n	8007100 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00b      	beq.n	8007100 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fa:	69db      	ldr	r3, [r3, #28]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b082      	sub	sp, #8
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	460b      	mov	r3, r1
 8007114:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	32ae      	adds	r2, #174	; 0xae
 8007120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007128:	2303      	movs	r3, #3
 800712a:	e01c      	b.n	8007166 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b03      	cmp	r3, #3
 8007136:	d115      	bne.n	8007164 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	32ae      	adds	r2, #174	; 0xae
 8007142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00b      	beq.n	8007164 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	32ae      	adds	r2, #174	; 0xae
 8007156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800715a:	6a1b      	ldr	r3, [r3, #32]
 800715c:	78fa      	ldrb	r2, [r7, #3]
 800715e:	4611      	mov	r1, r2
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b082      	sub	sp, #8
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	460b      	mov	r3, r1
 8007178:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	32ae      	adds	r2, #174	; 0xae
 8007184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800718c:	2303      	movs	r3, #3
 800718e:	e01c      	b.n	80071ca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b03      	cmp	r3, #3
 800719a:	d115      	bne.n	80071c8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	32ae      	adds	r2, #174	; 0xae
 80071a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00b      	beq.n	80071c8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	32ae      	adds	r2, #174	; 0xae
 80071ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	78fa      	ldrb	r2, [r7, #3]
 80071c2:	4611      	mov	r1, r2
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00e      	beq.n	8007224 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	6852      	ldr	r2, [r2, #4]
 8007212:	b2d2      	uxtb	r2, r2
 8007214:	4611      	mov	r1, r2
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	4798      	blx	r3
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007220:	2303      	movs	r3, #3
 8007222:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007224:	7bfb      	ldrb	r3, [r7, #15]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	460b      	mov	r3, r1
 8007238:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800723a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800723c:	4618      	mov	r0, r3
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007254:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007256:	4618      	mov	r0, r3
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b086      	sub	sp, #24
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	460b      	mov	r3, r1
 800726c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007276:	2300      	movs	r3, #0
 8007278:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	885b      	ldrh	r3, [r3, #2]
 800727e:	b29a      	uxth	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	b29b      	uxth	r3, r3
 8007286:	429a      	cmp	r2, r3
 8007288:	d920      	bls.n	80072cc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	b29b      	uxth	r3, r3
 8007290:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007292:	e013      	b.n	80072bc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007294:	f107 030a 	add.w	r3, r7, #10
 8007298:	4619      	mov	r1, r3
 800729a:	6978      	ldr	r0, [r7, #20]
 800729c:	f000 f81b 	bl	80072d6 <USBD_GetNextDesc>
 80072a0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	785b      	ldrb	r3, [r3, #1]
 80072a6:	2b05      	cmp	r3, #5
 80072a8:	d108      	bne.n	80072bc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	789b      	ldrb	r3, [r3, #2]
 80072b2:	78fa      	ldrb	r2, [r7, #3]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d008      	beq.n	80072ca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80072b8:	2300      	movs	r3, #0
 80072ba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	885b      	ldrh	r3, [r3, #2]
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	897b      	ldrh	r3, [r7, #10]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d8e5      	bhi.n	8007294 <USBD_GetEpDesc+0x32>
 80072c8:	e000      	b.n	80072cc <USBD_GetEpDesc+0x6a>
          break;
 80072ca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80072cc:	693b      	ldr	r3, [r7, #16]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3718      	adds	r7, #24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80072d6:	b480      	push	{r7}
 80072d8:	b085      	sub	sp, #20
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	881a      	ldrh	r2, [r3, #0]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	4413      	add	r3, r2
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4413      	add	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007302:	68fb      	ldr	r3, [r7, #12]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	3301      	adds	r3, #1
 8007326:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800732e:	8a3b      	ldrh	r3, [r7, #16]
 8007330:	021b      	lsls	r3, r3, #8
 8007332:	b21a      	sxth	r2, r3
 8007334:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007338:	4313      	orrs	r3, r2
 800733a:	b21b      	sxth	r3, r3
 800733c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800733e:	89fb      	ldrh	r3, [r7, #14]
}
 8007340:	4618      	mov	r0, r3
 8007342:	371c      	adds	r7, #28
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007356:	2300      	movs	r3, #0
 8007358:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007362:	2b40      	cmp	r3, #64	; 0x40
 8007364:	d005      	beq.n	8007372 <USBD_StdDevReq+0x26>
 8007366:	2b40      	cmp	r3, #64	; 0x40
 8007368:	d857      	bhi.n	800741a <USBD_StdDevReq+0xce>
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00f      	beq.n	800738e <USBD_StdDevReq+0x42>
 800736e:	2b20      	cmp	r3, #32
 8007370:	d153      	bne.n	800741a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	32ae      	adds	r2, #174	; 0xae
 800737c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	4798      	blx	r3
 8007388:	4603      	mov	r3, r0
 800738a:	73fb      	strb	r3, [r7, #15]
      break;
 800738c:	e04a      	b.n	8007424 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	785b      	ldrb	r3, [r3, #1]
 8007392:	2b09      	cmp	r3, #9
 8007394:	d83b      	bhi.n	800740e <USBD_StdDevReq+0xc2>
 8007396:	a201      	add	r2, pc, #4	; (adr r2, 800739c <USBD_StdDevReq+0x50>)
 8007398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739c:	080073f1 	.word	0x080073f1
 80073a0:	08007405 	.word	0x08007405
 80073a4:	0800740f 	.word	0x0800740f
 80073a8:	080073fb 	.word	0x080073fb
 80073ac:	0800740f 	.word	0x0800740f
 80073b0:	080073cf 	.word	0x080073cf
 80073b4:	080073c5 	.word	0x080073c5
 80073b8:	0800740f 	.word	0x0800740f
 80073bc:	080073e7 	.word	0x080073e7
 80073c0:	080073d9 	.word	0x080073d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fa3c 	bl	8007844 <USBD_GetDescriptor>
          break;
 80073cc:	e024      	b.n	8007418 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fba1 	bl	8007b18 <USBD_SetAddress>
          break;
 80073d6:	e01f      	b.n	8007418 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fbe0 	bl	8007ba0 <USBD_SetConfig>
 80073e0:	4603      	mov	r3, r0
 80073e2:	73fb      	strb	r3, [r7, #15]
          break;
 80073e4:	e018      	b.n	8007418 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fc83 	bl	8007cf4 <USBD_GetConfig>
          break;
 80073ee:	e013      	b.n	8007418 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fcb4 	bl	8007d60 <USBD_GetStatus>
          break;
 80073f8:	e00e      	b.n	8007418 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fce3 	bl	8007dc8 <USBD_SetFeature>
          break;
 8007402:	e009      	b.n	8007418 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fd07 	bl	8007e1a <USBD_ClrFeature>
          break;
 800740c:	e004      	b.n	8007418 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fd5e 	bl	8007ed2 <USBD_CtlError>
          break;
 8007416:	bf00      	nop
      }
      break;
 8007418:	e004      	b.n	8007424 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fd58 	bl	8007ed2 <USBD_CtlError>
      break;
 8007422:	bf00      	nop
  }

  return ret;
 8007424:	7bfb      	ldrb	r3, [r7, #15]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop

08007430 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007446:	2b40      	cmp	r3, #64	; 0x40
 8007448:	d005      	beq.n	8007456 <USBD_StdItfReq+0x26>
 800744a:	2b40      	cmp	r3, #64	; 0x40
 800744c:	d852      	bhi.n	80074f4 <USBD_StdItfReq+0xc4>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d001      	beq.n	8007456 <USBD_StdItfReq+0x26>
 8007452:	2b20      	cmp	r3, #32
 8007454:	d14e      	bne.n	80074f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800745c:	b2db      	uxtb	r3, r3
 800745e:	3b01      	subs	r3, #1
 8007460:	2b02      	cmp	r3, #2
 8007462:	d840      	bhi.n	80074e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	889b      	ldrh	r3, [r3, #4]
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b01      	cmp	r3, #1
 800746c:	d836      	bhi.n	80074dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	889b      	ldrh	r3, [r3, #4]
 8007472:	b2db      	uxtb	r3, r3
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7ff fed9 	bl	800722e <USBD_CoreFindIF>
 800747c:	4603      	mov	r3, r0
 800747e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007480:	7bbb      	ldrb	r3, [r7, #14]
 8007482:	2bff      	cmp	r3, #255	; 0xff
 8007484:	d01d      	beq.n	80074c2 <USBD_StdItfReq+0x92>
 8007486:	7bbb      	ldrb	r3, [r7, #14]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d11a      	bne.n	80074c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800748c:	7bba      	ldrb	r2, [r7, #14]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	32ae      	adds	r2, #174	; 0xae
 8007492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00f      	beq.n	80074bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800749c:	7bba      	ldrb	r2, [r7, #14]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80074a4:	7bba      	ldrb	r2, [r7, #14]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	32ae      	adds	r2, #174	; 0xae
 80074aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	4798      	blx	r3
 80074b6:	4603      	mov	r3, r0
 80074b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80074ba:	e004      	b.n	80074c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80074bc:	2303      	movs	r3, #3
 80074be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80074c0:	e001      	b.n	80074c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80074c2:	2303      	movs	r3, #3
 80074c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	88db      	ldrh	r3, [r3, #6]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d110      	bne.n	80074f0 <USBD_StdItfReq+0xc0>
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10d      	bne.n	80074f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fdc7 	bl	8008068 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80074da:	e009      	b.n	80074f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fcf7 	bl	8007ed2 <USBD_CtlError>
          break;
 80074e4:	e004      	b.n	80074f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80074e6:	6839      	ldr	r1, [r7, #0]
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fcf2 	bl	8007ed2 <USBD_CtlError>
          break;
 80074ee:	e000      	b.n	80074f2 <USBD_StdItfReq+0xc2>
          break;
 80074f0:	bf00      	nop
      }
      break;
 80074f2:	e004      	b.n	80074fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fceb 	bl	8007ed2 <USBD_CtlError>
      break;
 80074fc:	bf00      	nop
  }

  return ret;
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	889b      	ldrh	r3, [r3, #4]
 800751a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007524:	2b40      	cmp	r3, #64	; 0x40
 8007526:	d007      	beq.n	8007538 <USBD_StdEPReq+0x30>
 8007528:	2b40      	cmp	r3, #64	; 0x40
 800752a:	f200 817f 	bhi.w	800782c <USBD_StdEPReq+0x324>
 800752e:	2b00      	cmp	r3, #0
 8007530:	d02a      	beq.n	8007588 <USBD_StdEPReq+0x80>
 8007532:	2b20      	cmp	r3, #32
 8007534:	f040 817a 	bne.w	800782c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff fe83 	bl	8007248 <USBD_CoreFindEP>
 8007542:	4603      	mov	r3, r0
 8007544:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007546:	7b7b      	ldrb	r3, [r7, #13]
 8007548:	2bff      	cmp	r3, #255	; 0xff
 800754a:	f000 8174 	beq.w	8007836 <USBD_StdEPReq+0x32e>
 800754e:	7b7b      	ldrb	r3, [r7, #13]
 8007550:	2b00      	cmp	r3, #0
 8007552:	f040 8170 	bne.w	8007836 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007556:	7b7a      	ldrb	r2, [r7, #13]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800755e:	7b7a      	ldrb	r2, [r7, #13]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	32ae      	adds	r2, #174	; 0xae
 8007564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 8163 	beq.w	8007836 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007570:	7b7a      	ldrb	r2, [r7, #13]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	32ae      	adds	r2, #174	; 0xae
 8007576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	4798      	blx	r3
 8007582:	4603      	mov	r3, r0
 8007584:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007586:	e156      	b.n	8007836 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	785b      	ldrb	r3, [r3, #1]
 800758c:	2b03      	cmp	r3, #3
 800758e:	d008      	beq.n	80075a2 <USBD_StdEPReq+0x9a>
 8007590:	2b03      	cmp	r3, #3
 8007592:	f300 8145 	bgt.w	8007820 <USBD_StdEPReq+0x318>
 8007596:	2b00      	cmp	r3, #0
 8007598:	f000 809b 	beq.w	80076d2 <USBD_StdEPReq+0x1ca>
 800759c:	2b01      	cmp	r3, #1
 800759e:	d03c      	beq.n	800761a <USBD_StdEPReq+0x112>
 80075a0:	e13e      	b.n	8007820 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d002      	beq.n	80075b4 <USBD_StdEPReq+0xac>
 80075ae:	2b03      	cmp	r3, #3
 80075b0:	d016      	beq.n	80075e0 <USBD_StdEPReq+0xd8>
 80075b2:	e02c      	b.n	800760e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075b4:	7bbb      	ldrb	r3, [r7, #14]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00d      	beq.n	80075d6 <USBD_StdEPReq+0xce>
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	2b80      	cmp	r3, #128	; 0x80
 80075be:	d00a      	beq.n	80075d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80075c0:	7bbb      	ldrb	r3, [r7, #14]
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f001 f97b 	bl	80088c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80075ca:	2180      	movs	r1, #128	; 0x80
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f001 f977 	bl	80088c0 <USBD_LL_StallEP>
 80075d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075d4:	e020      	b.n	8007618 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fc7a 	bl	8007ed2 <USBD_CtlError>
              break;
 80075de:	e01b      	b.n	8007618 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	885b      	ldrh	r3, [r3, #2]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10e      	bne.n	8007606 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00b      	beq.n	8007606 <USBD_StdEPReq+0xfe>
 80075ee:	7bbb      	ldrb	r3, [r7, #14]
 80075f0:	2b80      	cmp	r3, #128	; 0x80
 80075f2:	d008      	beq.n	8007606 <USBD_StdEPReq+0xfe>
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	88db      	ldrh	r3, [r3, #6]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d104      	bne.n	8007606 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80075fc:	7bbb      	ldrb	r3, [r7, #14]
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 f95d 	bl	80088c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fd2e 	bl	8008068 <USBD_CtlSendStatus>

              break;
 800760c:	e004      	b.n	8007618 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fc5e 	bl	8007ed2 <USBD_CtlError>
              break;
 8007616:	bf00      	nop
          }
          break;
 8007618:	e107      	b.n	800782a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b02      	cmp	r3, #2
 8007624:	d002      	beq.n	800762c <USBD_StdEPReq+0x124>
 8007626:	2b03      	cmp	r3, #3
 8007628:	d016      	beq.n	8007658 <USBD_StdEPReq+0x150>
 800762a:	e04b      	b.n	80076c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800762c:	7bbb      	ldrb	r3, [r7, #14]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00d      	beq.n	800764e <USBD_StdEPReq+0x146>
 8007632:	7bbb      	ldrb	r3, [r7, #14]
 8007634:	2b80      	cmp	r3, #128	; 0x80
 8007636:	d00a      	beq.n	800764e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f001 f93f 	bl	80088c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007642:	2180      	movs	r1, #128	; 0x80
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f001 f93b 	bl	80088c0 <USBD_LL_StallEP>
 800764a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800764c:	e040      	b.n	80076d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fc3e 	bl	8007ed2 <USBD_CtlError>
              break;
 8007656:	e03b      	b.n	80076d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	885b      	ldrh	r3, [r3, #2]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d136      	bne.n	80076ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007660:	7bbb      	ldrb	r3, [r7, #14]
 8007662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007666:	2b00      	cmp	r3, #0
 8007668:	d004      	beq.n	8007674 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800766a:	7bbb      	ldrb	r3, [r7, #14]
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f001 f945 	bl	80088fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fcf7 	bl	8008068 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7ff fde2 	bl	8007248 <USBD_CoreFindEP>
 8007684:	4603      	mov	r3, r0
 8007686:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007688:	7b7b      	ldrb	r3, [r7, #13]
 800768a:	2bff      	cmp	r3, #255	; 0xff
 800768c:	d01f      	beq.n	80076ce <USBD_StdEPReq+0x1c6>
 800768e:	7b7b      	ldrb	r3, [r7, #13]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d11c      	bne.n	80076ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007694:	7b7a      	ldrb	r2, [r7, #13]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800769c:	7b7a      	ldrb	r2, [r7, #13]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	32ae      	adds	r2, #174	; 0xae
 80076a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d010      	beq.n	80076ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80076ac:	7b7a      	ldrb	r2, [r7, #13]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	32ae      	adds	r2, #174	; 0xae
 80076b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	4798      	blx	r3
 80076be:	4603      	mov	r3, r0
 80076c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80076c2:	e004      	b.n	80076ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fc03 	bl	8007ed2 <USBD_CtlError>
              break;
 80076cc:	e000      	b.n	80076d0 <USBD_StdEPReq+0x1c8>
              break;
 80076ce:	bf00      	nop
          }
          break;
 80076d0:	e0ab      	b.n	800782a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d002      	beq.n	80076e4 <USBD_StdEPReq+0x1dc>
 80076de:	2b03      	cmp	r3, #3
 80076e0:	d032      	beq.n	8007748 <USBD_StdEPReq+0x240>
 80076e2:	e097      	b.n	8007814 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076e4:	7bbb      	ldrb	r3, [r7, #14]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d007      	beq.n	80076fa <USBD_StdEPReq+0x1f2>
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	2b80      	cmp	r3, #128	; 0x80
 80076ee:	d004      	beq.n	80076fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fbed 	bl	8007ed2 <USBD_CtlError>
                break;
 80076f8:	e091      	b.n	800781e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	da0b      	bge.n	800771a <USBD_StdEPReq+0x212>
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007708:	4613      	mov	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4413      	add	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	3310      	adds	r3, #16
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	4413      	add	r3, r2
 8007716:	3304      	adds	r3, #4
 8007718:	e00b      	b.n	8007732 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007720:	4613      	mov	r3, r2
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	4413      	add	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	4413      	add	r3, r2
 8007730:	3304      	adds	r3, #4
 8007732:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2202      	movs	r2, #2
 800773e:	4619      	mov	r1, r3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fc37 	bl	8007fb4 <USBD_CtlSendData>
              break;
 8007746:	e06a      	b.n	800781e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007748:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800774c:	2b00      	cmp	r3, #0
 800774e:	da11      	bge.n	8007774 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	f003 020f 	and.w	r2, r3, #15
 8007756:	6879      	ldr	r1, [r7, #4]
 8007758:	4613      	mov	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	440b      	add	r3, r1
 8007762:	3324      	adds	r3, #36	; 0x24
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d117      	bne.n	800779a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800776a:	6839      	ldr	r1, [r7, #0]
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fbb0 	bl	8007ed2 <USBD_CtlError>
                  break;
 8007772:	e054      	b.n	800781e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	f003 020f 	and.w	r2, r3, #15
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	4613      	mov	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	440b      	add	r3, r1
 8007786:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d104      	bne.n	800779a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fb9d 	bl	8007ed2 <USBD_CtlError>
                  break;
 8007798:	e041      	b.n	800781e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800779a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	da0b      	bge.n	80077ba <USBD_StdEPReq+0x2b2>
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
 80077a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077a8:	4613      	mov	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	3310      	adds	r3, #16
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	4413      	add	r3, r2
 80077b6:	3304      	adds	r3, #4
 80077b8:	e00b      	b.n	80077d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077c0:	4613      	mov	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	4413      	add	r3, r2
 80077d0:	3304      	adds	r3, #4
 80077d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <USBD_StdEPReq+0x2d8>
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	2b80      	cmp	r3, #128	; 0x80
 80077de:	d103      	bne.n	80077e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2200      	movs	r2, #0
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	e00e      	b.n	8007806 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f001 f8a5 	bl	800893c <USBD_LL_IsStallEP>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2201      	movs	r2, #1
 80077fc:	601a      	str	r2, [r3, #0]
 80077fe:	e002      	b.n	8007806 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2200      	movs	r2, #0
 8007804:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2202      	movs	r2, #2
 800780a:	4619      	mov	r1, r3
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 fbd1 	bl	8007fb4 <USBD_CtlSendData>
              break;
 8007812:	e004      	b.n	800781e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fb5b 	bl	8007ed2 <USBD_CtlError>
              break;
 800781c:	bf00      	nop
          }
          break;
 800781e:	e004      	b.n	800782a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fb55 	bl	8007ed2 <USBD_CtlError>
          break;
 8007828:	bf00      	nop
      }
      break;
 800782a:	e005      	b.n	8007838 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fb4f 	bl	8007ed2 <USBD_CtlError>
      break;
 8007834:	e000      	b.n	8007838 <USBD_StdEPReq+0x330>
      break;
 8007836:	bf00      	nop
  }

  return ret;
 8007838:	7bfb      	ldrb	r3, [r7, #15]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
	...

08007844 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800784e:	2300      	movs	r3, #0
 8007850:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	885b      	ldrh	r3, [r3, #2]
 800785e:	0a1b      	lsrs	r3, r3, #8
 8007860:	b29b      	uxth	r3, r3
 8007862:	3b01      	subs	r3, #1
 8007864:	2b06      	cmp	r3, #6
 8007866:	f200 8128 	bhi.w	8007aba <USBD_GetDescriptor+0x276>
 800786a:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <USBD_GetDescriptor+0x2c>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	0800788d 	.word	0x0800788d
 8007874:	080078a5 	.word	0x080078a5
 8007878:	080078e5 	.word	0x080078e5
 800787c:	08007abb 	.word	0x08007abb
 8007880:	08007abb 	.word	0x08007abb
 8007884:	08007a5b 	.word	0x08007a5b
 8007888:	08007a87 	.word	0x08007a87
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	7c12      	ldrb	r2, [r2, #16]
 8007898:	f107 0108 	add.w	r1, r7, #8
 800789c:	4610      	mov	r0, r2
 800789e:	4798      	blx	r3
 80078a0:	60f8      	str	r0, [r7, #12]
      break;
 80078a2:	e112      	b.n	8007aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	7c1b      	ldrb	r3, [r3, #16]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10d      	bne.n	80078c8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b4:	f107 0208 	add.w	r2, r7, #8
 80078b8:	4610      	mov	r0, r2
 80078ba:	4798      	blx	r3
 80078bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	3301      	adds	r3, #1
 80078c2:	2202      	movs	r2, #2
 80078c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80078c6:	e100      	b.n	8007aca <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d0:	f107 0208 	add.w	r2, r7, #8
 80078d4:	4610      	mov	r0, r2
 80078d6:	4798      	blx	r3
 80078d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	3301      	adds	r3, #1
 80078de:	2202      	movs	r2, #2
 80078e0:	701a      	strb	r2, [r3, #0]
      break;
 80078e2:	e0f2      	b.n	8007aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	885b      	ldrh	r3, [r3, #2]
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b05      	cmp	r3, #5
 80078ec:	f200 80ac 	bhi.w	8007a48 <USBD_GetDescriptor+0x204>
 80078f0:	a201      	add	r2, pc, #4	; (adr r2, 80078f8 <USBD_GetDescriptor+0xb4>)
 80078f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f6:	bf00      	nop
 80078f8:	08007911 	.word	0x08007911
 80078fc:	08007945 	.word	0x08007945
 8007900:	08007979 	.word	0x08007979
 8007904:	080079ad 	.word	0x080079ad
 8007908:	080079e1 	.word	0x080079e1
 800790c:	08007a15 	.word	0x08007a15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00b      	beq.n	8007934 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	7c12      	ldrb	r2, [r2, #16]
 8007928:	f107 0108 	add.w	r1, r7, #8
 800792c:	4610      	mov	r0, r2
 800792e:	4798      	blx	r3
 8007930:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007932:	e091      	b.n	8007a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 facb 	bl	8007ed2 <USBD_CtlError>
            err++;
 800793c:	7afb      	ldrb	r3, [r7, #11]
 800793e:	3301      	adds	r3, #1
 8007940:	72fb      	strb	r3, [r7, #11]
          break;
 8007942:	e089      	b.n	8007a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00b      	beq.n	8007968 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	7c12      	ldrb	r2, [r2, #16]
 800795c:	f107 0108 	add.w	r1, r7, #8
 8007960:	4610      	mov	r0, r2
 8007962:	4798      	blx	r3
 8007964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007966:	e077      	b.n	8007a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fab1 	bl	8007ed2 <USBD_CtlError>
            err++;
 8007970:	7afb      	ldrb	r3, [r7, #11]
 8007972:	3301      	adds	r3, #1
 8007974:	72fb      	strb	r3, [r7, #11]
          break;
 8007976:	e06f      	b.n	8007a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00b      	beq.n	800799c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	7c12      	ldrb	r2, [r2, #16]
 8007990:	f107 0108 	add.w	r1, r7, #8
 8007994:	4610      	mov	r0, r2
 8007996:	4798      	blx	r3
 8007998:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800799a:	e05d      	b.n	8007a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fa97 	bl	8007ed2 <USBD_CtlError>
            err++;
 80079a4:	7afb      	ldrb	r3, [r7, #11]
 80079a6:	3301      	adds	r3, #1
 80079a8:	72fb      	strb	r3, [r7, #11]
          break;
 80079aa:	e055      	b.n	8007a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00b      	beq.n	80079d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	7c12      	ldrb	r2, [r2, #16]
 80079c4:	f107 0108 	add.w	r1, r7, #8
 80079c8:	4610      	mov	r0, r2
 80079ca:	4798      	blx	r3
 80079cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079ce:	e043      	b.n	8007a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa7d 	bl	8007ed2 <USBD_CtlError>
            err++;
 80079d8:	7afb      	ldrb	r3, [r7, #11]
 80079da:	3301      	adds	r3, #1
 80079dc:	72fb      	strb	r3, [r7, #11]
          break;
 80079de:	e03b      	b.n	8007a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00b      	beq.n	8007a04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f2:	695b      	ldr	r3, [r3, #20]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	7c12      	ldrb	r2, [r2, #16]
 80079f8:	f107 0108 	add.w	r1, r7, #8
 80079fc:	4610      	mov	r0, r2
 80079fe:	4798      	blx	r3
 8007a00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a02:	e029      	b.n	8007a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fa63 	bl	8007ed2 <USBD_CtlError>
            err++;
 8007a0c:	7afb      	ldrb	r3, [r7, #11]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	72fb      	strb	r3, [r7, #11]
          break;
 8007a12:	e021      	b.n	8007a58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00b      	beq.n	8007a38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	7c12      	ldrb	r2, [r2, #16]
 8007a2c:	f107 0108 	add.w	r1, r7, #8
 8007a30:	4610      	mov	r0, r2
 8007a32:	4798      	blx	r3
 8007a34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a36:	e00f      	b.n	8007a58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fa49 	bl	8007ed2 <USBD_CtlError>
            err++;
 8007a40:	7afb      	ldrb	r3, [r7, #11]
 8007a42:	3301      	adds	r3, #1
 8007a44:	72fb      	strb	r3, [r7, #11]
          break;
 8007a46:	e007      	b.n	8007a58 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fa41 	bl	8007ed2 <USBD_CtlError>
          err++;
 8007a50:	7afb      	ldrb	r3, [r7, #11]
 8007a52:	3301      	adds	r3, #1
 8007a54:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007a56:	bf00      	nop
      }
      break;
 8007a58:	e037      	b.n	8007aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	7c1b      	ldrb	r3, [r3, #16]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d109      	bne.n	8007a76 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6a:	f107 0208 	add.w	r2, r7, #8
 8007a6e:	4610      	mov	r0, r2
 8007a70:	4798      	blx	r3
 8007a72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007a74:	e029      	b.n	8007aca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007a76:	6839      	ldr	r1, [r7, #0]
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fa2a 	bl	8007ed2 <USBD_CtlError>
        err++;
 8007a7e:	7afb      	ldrb	r3, [r7, #11]
 8007a80:	3301      	adds	r3, #1
 8007a82:	72fb      	strb	r3, [r7, #11]
      break;
 8007a84:	e021      	b.n	8007aca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	7c1b      	ldrb	r3, [r3, #16]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d10d      	bne.n	8007aaa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a96:	f107 0208 	add.w	r2, r7, #8
 8007a9a:	4610      	mov	r0, r2
 8007a9c:	4798      	blx	r3
 8007a9e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	2207      	movs	r2, #7
 8007aa6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007aa8:	e00f      	b.n	8007aca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fa10 	bl	8007ed2 <USBD_CtlError>
        err++;
 8007ab2:	7afb      	ldrb	r3, [r7, #11]
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ab8:	e007      	b.n	8007aca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fa08 	bl	8007ed2 <USBD_CtlError>
      err++;
 8007ac2:	7afb      	ldrb	r3, [r7, #11]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ac8:	bf00      	nop
  }

  if (err != 0U)
 8007aca:	7afb      	ldrb	r3, [r7, #11]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d11e      	bne.n	8007b0e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	88db      	ldrh	r3, [r3, #6]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d016      	beq.n	8007b06 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007ad8:	893b      	ldrh	r3, [r7, #8]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00e      	beq.n	8007afc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	88da      	ldrh	r2, [r3, #6]
 8007ae2:	893b      	ldrh	r3, [r7, #8]
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	bf28      	it	cs
 8007ae8:	4613      	movcs	r3, r2
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007aee:	893b      	ldrh	r3, [r7, #8]
 8007af0:	461a      	mov	r2, r3
 8007af2:	68f9      	ldr	r1, [r7, #12]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fa5d 	bl	8007fb4 <USBD_CtlSendData>
 8007afa:	e009      	b.n	8007b10 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f9e7 	bl	8007ed2 <USBD_CtlError>
 8007b04:	e004      	b.n	8007b10 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 faae 	bl	8008068 <USBD_CtlSendStatus>
 8007b0c:	e000      	b.n	8007b10 <USBD_GetDescriptor+0x2cc>
    return;
 8007b0e:	bf00      	nop
  }
}
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop

08007b18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	889b      	ldrh	r3, [r3, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d131      	bne.n	8007b8e <USBD_SetAddress+0x76>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	88db      	ldrh	r3, [r3, #6]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d12d      	bne.n	8007b8e <USBD_SetAddress+0x76>
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	885b      	ldrh	r3, [r3, #2]
 8007b36:	2b7f      	cmp	r3, #127	; 0x7f
 8007b38:	d829      	bhi.n	8007b8e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	885b      	ldrh	r3, [r3, #2]
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d104      	bne.n	8007b5c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f9bc 	bl	8007ed2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b5a:	e01d      	b.n	8007b98 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	7bfa      	ldrb	r2, [r7, #15]
 8007b60:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 ff13 	bl	8008994 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fa7a 	bl	8008068 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d004      	beq.n	8007b84 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b82:	e009      	b.n	8007b98 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b8c:	e004      	b.n	8007b98 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f99e 	bl	8007ed2 <USBD_CtlError>
  }
}
 8007b96:	bf00      	nop
 8007b98:	bf00      	nop
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	885b      	ldrh	r3, [r3, #2]
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	4b4e      	ldr	r3, [pc, #312]	; (8007cf0 <USBD_SetConfig+0x150>)
 8007bb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007bb8:	4b4d      	ldr	r3, [pc, #308]	; (8007cf0 <USBD_SetConfig+0x150>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d905      	bls.n	8007bcc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007bc0:	6839      	ldr	r1, [r7, #0]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f985 	bl	8007ed2 <USBD_CtlError>
    return USBD_FAIL;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e08c      	b.n	8007ce6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d002      	beq.n	8007bde <USBD_SetConfig+0x3e>
 8007bd8:	2b03      	cmp	r3, #3
 8007bda:	d029      	beq.n	8007c30 <USBD_SetConfig+0x90>
 8007bdc:	e075      	b.n	8007cca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007bde:	4b44      	ldr	r3, [pc, #272]	; (8007cf0 <USBD_SetConfig+0x150>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d020      	beq.n	8007c28 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007be6:	4b42      	ldr	r3, [pc, #264]	; (8007cf0 <USBD_SetConfig+0x150>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007bf0:	4b3f      	ldr	r3, [pc, #252]	; (8007cf0 <USBD_SetConfig+0x150>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f7fe ffe7 	bl	8006bca <USBD_SetClassConfig>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d008      	beq.n	8007c18 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f962 	bl	8007ed2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2202      	movs	r2, #2
 8007c12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c16:	e065      	b.n	8007ce4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 fa25 	bl	8008068 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2203      	movs	r2, #3
 8007c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007c26:	e05d      	b.n	8007ce4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fa1d 	bl	8008068 <USBD_CtlSendStatus>
      break;
 8007c2e:	e059      	b.n	8007ce4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007c30:	4b2f      	ldr	r3, [pc, #188]	; (8007cf0 <USBD_SetConfig+0x150>)
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d112      	bne.n	8007c5e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007c40:	4b2b      	ldr	r3, [pc, #172]	; (8007cf0 <USBD_SetConfig+0x150>)
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007c4a:	4b29      	ldr	r3, [pc, #164]	; (8007cf0 <USBD_SetConfig+0x150>)
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7fe ffd6 	bl	8006c02 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fa06 	bl	8008068 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007c5c:	e042      	b.n	8007ce4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007c5e:	4b24      	ldr	r3, [pc, #144]	; (8007cf0 <USBD_SetConfig+0x150>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	461a      	mov	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d02a      	beq.n	8007cc2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7fe ffc4 	bl	8006c02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007c7a:	4b1d      	ldr	r3, [pc, #116]	; (8007cf0 <USBD_SetConfig+0x150>)
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c84:	4b1a      	ldr	r3, [pc, #104]	; (8007cf0 <USBD_SetConfig+0x150>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7fe ff9d 	bl	8006bca <USBD_SetClassConfig>
 8007c90:	4603      	mov	r3, r0
 8007c92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00f      	beq.n	8007cba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007c9a:	6839      	ldr	r1, [r7, #0]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f918 	bl	8007ed2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7fe ffa9 	bl	8006c02 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007cb8:	e014      	b.n	8007ce4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f9d4 	bl	8008068 <USBD_CtlSendStatus>
      break;
 8007cc0:	e010      	b.n	8007ce4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f9d0 	bl	8008068 <USBD_CtlSendStatus>
      break;
 8007cc8:	e00c      	b.n	8007ce4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f900 	bl	8007ed2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007cd2:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <USBD_SetConfig+0x150>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7fe ff92 	bl	8006c02 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce2:	bf00      	nop
  }

  return ret;
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	2000038c 	.word	0x2000038c

08007cf4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	88db      	ldrh	r3, [r3, #6]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d004      	beq.n	8007d10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d06:	6839      	ldr	r1, [r7, #0]
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f8e2 	bl	8007ed2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d0e:	e023      	b.n	8007d58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	dc02      	bgt.n	8007d22 <USBD_GetConfig+0x2e>
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	dc03      	bgt.n	8007d28 <USBD_GetConfig+0x34>
 8007d20:	e015      	b.n	8007d4e <USBD_GetConfig+0x5a>
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	d00b      	beq.n	8007d3e <USBD_GetConfig+0x4a>
 8007d26:	e012      	b.n	8007d4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	3308      	adds	r3, #8
 8007d32:	2201      	movs	r2, #1
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f93c 	bl	8007fb4 <USBD_CtlSendData>
        break;
 8007d3c:	e00c      	b.n	8007d58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	3304      	adds	r3, #4
 8007d42:	2201      	movs	r2, #1
 8007d44:	4619      	mov	r1, r3
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f934 	bl	8007fb4 <USBD_CtlSendData>
        break;
 8007d4c:	e004      	b.n	8007d58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007d4e:	6839      	ldr	r1, [r7, #0]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f8be 	bl	8007ed2 <USBD_CtlError>
        break;
 8007d56:	bf00      	nop
}
 8007d58:	bf00      	nop
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	3b01      	subs	r3, #1
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d81e      	bhi.n	8007db6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	88db      	ldrh	r3, [r3, #6]
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d004      	beq.n	8007d8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f8a5 	bl	8007ed2 <USBD_CtlError>
        break;
 8007d88:	e01a      	b.n	8007dc0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d005      	beq.n	8007da6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	f043 0202 	orr.w	r2, r3, #2
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	330c      	adds	r3, #12
 8007daa:	2202      	movs	r2, #2
 8007dac:	4619      	mov	r1, r3
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f900 	bl	8007fb4 <USBD_CtlSendData>
      break;
 8007db4:	e004      	b.n	8007dc0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f88a 	bl	8007ed2 <USBD_CtlError>
      break;
 8007dbe:	bf00      	nop
  }
}
 8007dc0:	bf00      	nop
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	885b      	ldrh	r3, [r3, #2]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d107      	bne.n	8007dea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f940 	bl	8008068 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007de8:	e013      	b.n	8007e12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	885b      	ldrh	r3, [r3, #2]
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d10b      	bne.n	8007e0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	889b      	ldrh	r3, [r3, #4]
 8007df6:	0a1b      	lsrs	r3, r3, #8
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f930 	bl	8008068 <USBD_CtlSendStatus>
}
 8007e08:	e003      	b.n	8007e12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f860 	bl	8007ed2 <USBD_CtlError>
}
 8007e12:	bf00      	nop
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b082      	sub	sp, #8
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d80b      	bhi.n	8007e4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	885b      	ldrh	r3, [r3, #2]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d10c      	bne.n	8007e54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f910 	bl	8008068 <USBD_CtlSendStatus>
      }
      break;
 8007e48:	e004      	b.n	8007e54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f840 	bl	8007ed2 <USBD_CtlError>
      break;
 8007e52:	e000      	b.n	8007e56 <USBD_ClrFeature+0x3c>
      break;
 8007e54:	bf00      	nop
  }
}
 8007e56:	bf00      	nop
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b084      	sub	sp, #16
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	781a      	ldrb	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	3301      	adds	r3, #1
 8007e78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	781a      	ldrb	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3301      	adds	r3, #1
 8007e86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f7ff fa41 	bl	8007310 <SWAPBYTE>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	461a      	mov	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f7ff fa34 	bl	8007310 <SWAPBYTE>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	461a      	mov	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f7ff fa27 	bl	8007310 <SWAPBYTE>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	80da      	strh	r2, [r3, #6]
}
 8007eca:	bf00      	nop
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b082      	sub	sp, #8
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007edc:	2180      	movs	r1, #128	; 0x80
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fcee 	bl	80088c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fcea 	bl	80088c0 <USBD_LL_StallEP>
}
 8007eec:	bf00      	nop
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f00:	2300      	movs	r3, #0
 8007f02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d036      	beq.n	8007f78 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007f0e:	6938      	ldr	r0, [r7, #16]
 8007f10:	f000 f836 	bl	8007f80 <USBD_GetLen>
 8007f14:	4603      	mov	r3, r0
 8007f16:	3301      	adds	r3, #1
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	005b      	lsls	r3, r3, #1
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	4413      	add	r3, r2
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	7812      	ldrb	r2, [r2, #0]
 8007f2c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f2e:	7dfb      	ldrb	r3, [r7, #23]
 8007f30:	3301      	adds	r3, #1
 8007f32:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007f34:	7dfb      	ldrb	r3, [r7, #23]
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	4413      	add	r3, r2
 8007f3a:	2203      	movs	r2, #3
 8007f3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
 8007f40:	3301      	adds	r3, #1
 8007f42:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007f44:	e013      	b.n	8007f6e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	7812      	ldrb	r2, [r2, #0]
 8007f50:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	3301      	adds	r3, #1
 8007f56:	613b      	str	r3, [r7, #16]
    idx++;
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	4413      	add	r3, r2
 8007f64:	2200      	movs	r2, #0
 8007f66:	701a      	strb	r2, [r3, #0]
    idx++;
 8007f68:	7dfb      	ldrb	r3, [r7, #23]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1e7      	bne.n	8007f46 <USBD_GetString+0x52>
 8007f76:	e000      	b.n	8007f7a <USBD_GetString+0x86>
    return;
 8007f78:	bf00      	nop
  }
}
 8007f7a:	3718      	adds	r7, #24
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007f90:	e005      	b.n	8007f9e <USBD_GetLen+0x1e>
  {
    len++;
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
 8007f94:	3301      	adds	r3, #1
 8007f96:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1f5      	bne.n	8007f92 <USBD_GetLen+0x12>
  }

  return len;
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	2100      	movs	r1, #0
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f000 fcf9 	bl	80089d2 <USBD_LL_Transmit>

  return USBD_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	60f8      	str	r0, [r7, #12]
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f000 fce8 	bl	80089d2 <USBD_LL_Transmit>

  return USBD_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2203      	movs	r2, #3
 800801c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	2100      	movs	r1, #0
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 fcec 	bl	8008a14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	2100      	movs	r1, #0
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	f000 fcdb 	bl	8008a14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2204      	movs	r2, #4
 8008074:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008078:	2300      	movs	r3, #0
 800807a:	2200      	movs	r2, #0
 800807c:	2100      	movs	r1, #0
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 fca7 	bl	80089d2 <USBD_LL_Transmit>

  return USBD_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b082      	sub	sp, #8
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2205      	movs	r2, #5
 800809a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800809e:	2300      	movs	r3, #0
 80080a0:	2200      	movs	r2, #0
 80080a2:	2100      	movs	r1, #0
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fcb5 	bl	8008a14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80080b8:	2200      	movs	r2, #0
 80080ba:	4912      	ldr	r1, [pc, #72]	; (8008104 <MX_USB_DEVICE_Init+0x50>)
 80080bc:	4812      	ldr	r0, [pc, #72]	; (8008108 <MX_USB_DEVICE_Init+0x54>)
 80080be:	f7fe fd07 	bl	8006ad0 <USBD_Init>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80080c8:	f7f8 fde0 	bl	8000c8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80080cc:	490f      	ldr	r1, [pc, #60]	; (800810c <MX_USB_DEVICE_Init+0x58>)
 80080ce:	480e      	ldr	r0, [pc, #56]	; (8008108 <MX_USB_DEVICE_Init+0x54>)
 80080d0:	f7fe fd2e 	bl	8006b30 <USBD_RegisterClass>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80080da:	f7f8 fdd7 	bl	8000c8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80080de:	490c      	ldr	r1, [pc, #48]	; (8008110 <MX_USB_DEVICE_Init+0x5c>)
 80080e0:	4809      	ldr	r0, [pc, #36]	; (8008108 <MX_USB_DEVICE_Init+0x54>)
 80080e2:	f7fe fc1f 	bl	8006924 <USBD_CDC_RegisterInterface>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80080ec:	f7f8 fdce 	bl	8000c8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80080f0:	4805      	ldr	r0, [pc, #20]	; (8008108 <MX_USB_DEVICE_Init+0x54>)
 80080f2:	f7fe fd53 	bl	8006b9c <USBD_Start>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80080fc:	f7f8 fdc6 	bl	8000c8c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008100:	bf00      	nop
 8008102:	bd80      	pop	{r7, pc}
 8008104:	200000ac 	.word	0x200000ac
 8008108:	20000390 	.word	0x20000390
 800810c:	20000018 	.word	0x20000018
 8008110:	20000098 	.word	0x20000098

08008114 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008118:	2200      	movs	r2, #0
 800811a:	4905      	ldr	r1, [pc, #20]	; (8008130 <CDC_Init_FS+0x1c>)
 800811c:	4805      	ldr	r0, [pc, #20]	; (8008134 <CDC_Init_FS+0x20>)
 800811e:	f7fe fc1b 	bl	8006958 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008122:	4905      	ldr	r1, [pc, #20]	; (8008138 <CDC_Init_FS+0x24>)
 8008124:	4803      	ldr	r0, [pc, #12]	; (8008134 <CDC_Init_FS+0x20>)
 8008126:	f7fe fc39 	bl	800699c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800812a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800812c:	4618      	mov	r0, r3
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20000e6c 	.word	0x20000e6c
 8008134:	20000390 	.word	0x20000390
 8008138:	2000066c 	.word	0x2000066c

0800813c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800813c:	b480      	push	{r7}
 800813e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008140:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008142:	4618      	mov	r0, r3
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	4603      	mov	r3, r0
 8008154:	6039      	str	r1, [r7, #0]
 8008156:	71fb      	strb	r3, [r7, #7]
 8008158:	4613      	mov	r3, r2
 800815a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800815c:	79fb      	ldrb	r3, [r7, #7]
 800815e:	2b23      	cmp	r3, #35	; 0x23
 8008160:	d84a      	bhi.n	80081f8 <CDC_Control_FS+0xac>
 8008162:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <CDC_Control_FS+0x1c>)
 8008164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008168:	080081f9 	.word	0x080081f9
 800816c:	080081f9 	.word	0x080081f9
 8008170:	080081f9 	.word	0x080081f9
 8008174:	080081f9 	.word	0x080081f9
 8008178:	080081f9 	.word	0x080081f9
 800817c:	080081f9 	.word	0x080081f9
 8008180:	080081f9 	.word	0x080081f9
 8008184:	080081f9 	.word	0x080081f9
 8008188:	080081f9 	.word	0x080081f9
 800818c:	080081f9 	.word	0x080081f9
 8008190:	080081f9 	.word	0x080081f9
 8008194:	080081f9 	.word	0x080081f9
 8008198:	080081f9 	.word	0x080081f9
 800819c:	080081f9 	.word	0x080081f9
 80081a0:	080081f9 	.word	0x080081f9
 80081a4:	080081f9 	.word	0x080081f9
 80081a8:	080081f9 	.word	0x080081f9
 80081ac:	080081f9 	.word	0x080081f9
 80081b0:	080081f9 	.word	0x080081f9
 80081b4:	080081f9 	.word	0x080081f9
 80081b8:	080081f9 	.word	0x080081f9
 80081bc:	080081f9 	.word	0x080081f9
 80081c0:	080081f9 	.word	0x080081f9
 80081c4:	080081f9 	.word	0x080081f9
 80081c8:	080081f9 	.word	0x080081f9
 80081cc:	080081f9 	.word	0x080081f9
 80081d0:	080081f9 	.word	0x080081f9
 80081d4:	080081f9 	.word	0x080081f9
 80081d8:	080081f9 	.word	0x080081f9
 80081dc:	080081f9 	.word	0x080081f9
 80081e0:	080081f9 	.word	0x080081f9
 80081e4:	080081f9 	.word	0x080081f9
 80081e8:	080081f9 	.word	0x080081f9
 80081ec:	080081f9 	.word	0x080081f9
 80081f0:	080081f9 	.word	0x080081f9
 80081f4:	080081f9 	.word	0x080081f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80081f8:	bf00      	nop
  }

  return (USBD_OK);
 80081fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008212:	6879      	ldr	r1, [r7, #4]
 8008214:	4805      	ldr	r0, [pc, #20]	; (800822c <CDC_Receive_FS+0x24>)
 8008216:	f7fe fbc1 	bl	800699c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800821a:	4804      	ldr	r0, [pc, #16]	; (800822c <CDC_Receive_FS+0x24>)
 800821c:	f7fe fc22 	bl	8006a64 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008220:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20000390 	.word	0x20000390

08008230 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	460b      	mov	r3, r1
 800823a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008240:	4b0d      	ldr	r3, [pc, #52]	; (8008278 <CDC_Transmit_FS+0x48>)
 8008242:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008246:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008252:	2301      	movs	r3, #1
 8008254:	e00b      	b.n	800826e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008256:	887b      	ldrh	r3, [r7, #2]
 8008258:	461a      	mov	r2, r3
 800825a:	6879      	ldr	r1, [r7, #4]
 800825c:	4806      	ldr	r0, [pc, #24]	; (8008278 <CDC_Transmit_FS+0x48>)
 800825e:	f7fe fb7b 	bl	8006958 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008262:	4805      	ldr	r0, [pc, #20]	; (8008278 <CDC_Transmit_FS+0x48>)
 8008264:	f7fe fbb8 	bl	80069d8 <USBD_CDC_TransmitPacket>
 8008268:	4603      	mov	r3, r0
 800826a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800826c:	7bfb      	ldrb	r3, [r7, #15]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	20000390 	.word	0x20000390

0800827c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800827c:	b480      	push	{r7}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	4613      	mov	r3, r2
 8008288:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800828e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008292:	4618      	mov	r0, r3
 8008294:	371c      	adds	r7, #28
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
	...

080082a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	4603      	mov	r3, r0
 80082a8:	6039      	str	r1, [r7, #0]
 80082aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	2212      	movs	r2, #18
 80082b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80082b2:	4b03      	ldr	r3, [pc, #12]	; (80082c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	200000c8 	.word	0x200000c8

080082c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	4603      	mov	r3, r0
 80082cc:	6039      	str	r1, [r7, #0]
 80082ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	2204      	movs	r2, #4
 80082d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082d6:	4b03      	ldr	r3, [pc, #12]	; (80082e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082d8:	4618      	mov	r0, r3
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	200000dc 	.word	0x200000dc

080082e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	6039      	str	r1, [r7, #0]
 80082f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082f4:	79fb      	ldrb	r3, [r7, #7]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d105      	bne.n	8008306 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	4907      	ldr	r1, [pc, #28]	; (800831c <USBD_FS_ProductStrDescriptor+0x34>)
 80082fe:	4808      	ldr	r0, [pc, #32]	; (8008320 <USBD_FS_ProductStrDescriptor+0x38>)
 8008300:	f7ff fdf8 	bl	8007ef4 <USBD_GetString>
 8008304:	e004      	b.n	8008310 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	4904      	ldr	r1, [pc, #16]	; (800831c <USBD_FS_ProductStrDescriptor+0x34>)
 800830a:	4805      	ldr	r0, [pc, #20]	; (8008320 <USBD_FS_ProductStrDescriptor+0x38>)
 800830c:	f7ff fdf2 	bl	8007ef4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008310:	4b02      	ldr	r3, [pc, #8]	; (800831c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	2000166c 	.word	0x2000166c
 8008320:	080094c4 	.word	0x080094c4

08008324 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	4603      	mov	r3, r0
 800832c:	6039      	str	r1, [r7, #0]
 800832e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	4904      	ldr	r1, [pc, #16]	; (8008344 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008334:	4804      	ldr	r0, [pc, #16]	; (8008348 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008336:	f7ff fddd 	bl	8007ef4 <USBD_GetString>
  return USBD_StrDesc;
 800833a:	4b02      	ldr	r3, [pc, #8]	; (8008344 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800833c:	4618      	mov	r0, r3
 800833e:	3708      	adds	r7, #8
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	2000166c 	.word	0x2000166c
 8008348:	080094e0 	.word	0x080094e0

0800834c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	6039      	str	r1, [r7, #0]
 8008356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	221a      	movs	r2, #26
 800835c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800835e:	f000 f843 	bl	80083e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008362:	4b02      	ldr	r3, [pc, #8]	; (800836c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	200000e0 	.word	0x200000e0

08008370 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	4603      	mov	r3, r0
 8008378:	6039      	str	r1, [r7, #0]
 800837a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d105      	bne.n	800838e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	4907      	ldr	r1, [pc, #28]	; (80083a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008386:	4808      	ldr	r0, [pc, #32]	; (80083a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008388:	f7ff fdb4 	bl	8007ef4 <USBD_GetString>
 800838c:	e004      	b.n	8008398 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	4904      	ldr	r1, [pc, #16]	; (80083a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008392:	4805      	ldr	r0, [pc, #20]	; (80083a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008394:	f7ff fdae 	bl	8007ef4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008398:	4b02      	ldr	r3, [pc, #8]	; (80083a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	2000166c 	.word	0x2000166c
 80083a8:	080094f4 	.word	0x080094f4

080083ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	6039      	str	r1, [r7, #0]
 80083b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083b8:	79fb      	ldrb	r3, [r7, #7]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d105      	bne.n	80083ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	4907      	ldr	r1, [pc, #28]	; (80083e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083c2:	4808      	ldr	r0, [pc, #32]	; (80083e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083c4:	f7ff fd96 	bl	8007ef4 <USBD_GetString>
 80083c8:	e004      	b.n	80083d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	4904      	ldr	r1, [pc, #16]	; (80083e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083ce:	4805      	ldr	r0, [pc, #20]	; (80083e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083d0:	f7ff fd90 	bl	8007ef4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083d4:	4b02      	ldr	r3, [pc, #8]	; (80083e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	2000166c 	.word	0x2000166c
 80083e4:	08009500 	.word	0x08009500

080083e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083ee:	4b0f      	ldr	r3, [pc, #60]	; (800842c <Get_SerialNum+0x44>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80083f4:	4b0e      	ldr	r3, [pc, #56]	; (8008430 <Get_SerialNum+0x48>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80083fa:	4b0e      	ldr	r3, [pc, #56]	; (8008434 <Get_SerialNum+0x4c>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4413      	add	r3, r2
 8008406:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d009      	beq.n	8008422 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800840e:	2208      	movs	r2, #8
 8008410:	4909      	ldr	r1, [pc, #36]	; (8008438 <Get_SerialNum+0x50>)
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f000 f814 	bl	8008440 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008418:	2204      	movs	r2, #4
 800841a:	4908      	ldr	r1, [pc, #32]	; (800843c <Get_SerialNum+0x54>)
 800841c:	68b8      	ldr	r0, [r7, #8]
 800841e:	f000 f80f 	bl	8008440 <IntToUnicode>
  }
}
 8008422:	bf00      	nop
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	1fff7a10 	.word	0x1fff7a10
 8008430:	1fff7a14 	.word	0x1fff7a14
 8008434:	1fff7a18 	.word	0x1fff7a18
 8008438:	200000e2 	.word	0x200000e2
 800843c:	200000f2 	.word	0x200000f2

08008440 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008440:	b480      	push	{r7}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	4613      	mov	r3, r2
 800844c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008452:	2300      	movs	r3, #0
 8008454:	75fb      	strb	r3, [r7, #23]
 8008456:	e027      	b.n	80084a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	0f1b      	lsrs	r3, r3, #28
 800845c:	2b09      	cmp	r3, #9
 800845e:	d80b      	bhi.n	8008478 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	0f1b      	lsrs	r3, r3, #28
 8008464:	b2da      	uxtb	r2, r3
 8008466:	7dfb      	ldrb	r3, [r7, #23]
 8008468:	005b      	lsls	r3, r3, #1
 800846a:	4619      	mov	r1, r3
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	440b      	add	r3, r1
 8008470:	3230      	adds	r2, #48	; 0x30
 8008472:	b2d2      	uxtb	r2, r2
 8008474:	701a      	strb	r2, [r3, #0]
 8008476:	e00a      	b.n	800848e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	0f1b      	lsrs	r3, r3, #28
 800847c:	b2da      	uxtb	r2, r3
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	005b      	lsls	r3, r3, #1
 8008482:	4619      	mov	r1, r3
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	440b      	add	r3, r1
 8008488:	3237      	adds	r2, #55	; 0x37
 800848a:	b2d2      	uxtb	r2, r2
 800848c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008494:	7dfb      	ldrb	r3, [r7, #23]
 8008496:	005b      	lsls	r3, r3, #1
 8008498:	3301      	adds	r3, #1
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	4413      	add	r3, r2
 800849e:	2200      	movs	r2, #0
 80084a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
 80084a4:	3301      	adds	r3, #1
 80084a6:	75fb      	strb	r3, [r7, #23]
 80084a8:	7dfa      	ldrb	r2, [r7, #23]
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d3d3      	bcc.n	8008458 <IntToUnicode+0x18>
  }
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	371c      	adds	r7, #28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
	...

080084c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08a      	sub	sp, #40	; 0x28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084c8:	f107 0314 	add.w	r3, r7, #20
 80084cc:	2200      	movs	r2, #0
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	605a      	str	r2, [r3, #4]
 80084d2:	609a      	str	r2, [r3, #8]
 80084d4:	60da      	str	r2, [r3, #12]
 80084d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084e0:	d147      	bne.n	8008572 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084e2:	2300      	movs	r3, #0
 80084e4:	613b      	str	r3, [r7, #16]
 80084e6:	4b25      	ldr	r3, [pc, #148]	; (800857c <HAL_PCD_MspInit+0xbc>)
 80084e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ea:	4a24      	ldr	r2, [pc, #144]	; (800857c <HAL_PCD_MspInit+0xbc>)
 80084ec:	f043 0301 	orr.w	r3, r3, #1
 80084f0:	6313      	str	r3, [r2, #48]	; 0x30
 80084f2:	4b22      	ldr	r3, [pc, #136]	; (800857c <HAL_PCD_MspInit+0xbc>)
 80084f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	613b      	str	r3, [r7, #16]
 80084fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80084fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008504:	2300      	movs	r3, #0
 8008506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008508:	2300      	movs	r3, #0
 800850a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800850c:	f107 0314 	add.w	r3, r7, #20
 8008510:	4619      	mov	r1, r3
 8008512:	481b      	ldr	r0, [pc, #108]	; (8008580 <HAL_PCD_MspInit+0xc0>)
 8008514:	f7f8 feb4 	bl	8001280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008518:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800851c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800851e:	2302      	movs	r3, #2
 8008520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008522:	2300      	movs	r3, #0
 8008524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008526:	2300      	movs	r3, #0
 8008528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800852a:	230a      	movs	r3, #10
 800852c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800852e:	f107 0314 	add.w	r3, r7, #20
 8008532:	4619      	mov	r1, r3
 8008534:	4812      	ldr	r0, [pc, #72]	; (8008580 <HAL_PCD_MspInit+0xc0>)
 8008536:	f7f8 fea3 	bl	8001280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800853a:	4b10      	ldr	r3, [pc, #64]	; (800857c <HAL_PCD_MspInit+0xbc>)
 800853c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853e:	4a0f      	ldr	r2, [pc, #60]	; (800857c <HAL_PCD_MspInit+0xbc>)
 8008540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008544:	6353      	str	r3, [r2, #52]	; 0x34
 8008546:	2300      	movs	r3, #0
 8008548:	60fb      	str	r3, [r7, #12]
 800854a:	4b0c      	ldr	r3, [pc, #48]	; (800857c <HAL_PCD_MspInit+0xbc>)
 800854c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854e:	4a0b      	ldr	r2, [pc, #44]	; (800857c <HAL_PCD_MspInit+0xbc>)
 8008550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008554:	6453      	str	r3, [r2, #68]	; 0x44
 8008556:	4b09      	ldr	r3, [pc, #36]	; (800857c <HAL_PCD_MspInit+0xbc>)
 8008558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800855a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008562:	2200      	movs	r2, #0
 8008564:	2100      	movs	r1, #0
 8008566:	2043      	movs	r0, #67	; 0x43
 8008568:	f7f8 fe53 	bl	8001212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800856c:	2043      	movs	r0, #67	; 0x43
 800856e:	f7f8 fe6c 	bl	800124a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008572:	bf00      	nop
 8008574:	3728      	adds	r7, #40	; 0x28
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	40023800 	.word	0x40023800
 8008580:	40020000 	.word	0x40020000

08008584 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008598:	4619      	mov	r1, r3
 800859a:	4610      	mov	r0, r2
 800859c:	f7fe fb4b 	bl	8006c36 <USBD_LL_SetupStage>
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80085ba:	78fa      	ldrb	r2, [r7, #3]
 80085bc:	6879      	ldr	r1, [r7, #4]
 80085be:	4613      	mov	r3, r2
 80085c0:	00db      	lsls	r3, r3, #3
 80085c2:	4413      	add	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	440b      	add	r3, r1
 80085c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	4619      	mov	r1, r3
 80085d2:	f7fe fb85 	bl	8006ce0 <USBD_LL_DataOutStage>
}
 80085d6:	bf00      	nop
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b082      	sub	sp, #8
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	460b      	mov	r3, r1
 80085e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80085f0:	78fa      	ldrb	r2, [r7, #3]
 80085f2:	6879      	ldr	r1, [r7, #4]
 80085f4:	4613      	mov	r3, r2
 80085f6:	00db      	lsls	r3, r3, #3
 80085f8:	4413      	add	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	440b      	add	r3, r1
 80085fe:	334c      	adds	r3, #76	; 0x4c
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	78fb      	ldrb	r3, [r7, #3]
 8008604:	4619      	mov	r1, r3
 8008606:	f7fe fc1e 	bl	8006e46 <USBD_LL_DataInStage>
}
 800860a:	bf00      	nop
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b082      	sub	sp, #8
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008620:	4618      	mov	r0, r3
 8008622:	f7fe fd52 	bl	80070ca <USBD_LL_SOF>
}
 8008626:	bf00      	nop
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b084      	sub	sp, #16
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008636:	2301      	movs	r3, #1
 8008638:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d102      	bne.n	8008648 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008642:	2300      	movs	r3, #0
 8008644:	73fb      	strb	r3, [r7, #15]
 8008646:	e008      	b.n	800865a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	2b02      	cmp	r3, #2
 800864e:	d102      	bne.n	8008656 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008650:	2301      	movs	r3, #1
 8008652:	73fb      	strb	r3, [r7, #15]
 8008654:	e001      	b.n	800865a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008656:	f7f8 fb19 	bl	8000c8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008660:	7bfa      	ldrb	r2, [r7, #15]
 8008662:	4611      	mov	r1, r2
 8008664:	4618      	mov	r0, r3
 8008666:	f7fe fcf2 	bl	800704e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008670:	4618      	mov	r0, r3
 8008672:	f7fe fc9a 	bl	8006faa <USBD_LL_Reset>
}
 8008676:	bf00      	nop
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
	...

08008680 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe fced 	bl	800706e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	6812      	ldr	r2, [r2, #0]
 80086a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80086a6:	f043 0301 	orr.w	r3, r3, #1
 80086aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a1b      	ldr	r3, [r3, #32]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d005      	beq.n	80086c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80086b4:	4b04      	ldr	r3, [pc, #16]	; (80086c8 <HAL_PCD_SuspendCallback+0x48>)
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	4a03      	ldr	r2, [pc, #12]	; (80086c8 <HAL_PCD_SuspendCallback+0x48>)
 80086ba:	f043 0306 	orr.w	r3, r3, #6
 80086be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	e000ed00 	.word	0xe000ed00

080086cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fe fcdd 	bl	800709a <USBD_LL_Resume>
}
 80086e0:	bf00      	nop
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086fa:	78fa      	ldrb	r2, [r7, #3]
 80086fc:	4611      	mov	r1, r2
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe fd35 	bl	800716e <USBD_LL_IsoOUTIncomplete>
}
 8008704:	bf00      	nop
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	460b      	mov	r3, r1
 8008716:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800871e:	78fa      	ldrb	r2, [r7, #3]
 8008720:	4611      	mov	r1, r2
 8008722:	4618      	mov	r0, r3
 8008724:	f7fe fcf1 	bl	800710a <USBD_LL_IsoINIncomplete>
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800873e:	4618      	mov	r0, r3
 8008740:	f7fe fd47 	bl	80071d2 <USBD_LL_DevConnected>
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800875a:	4618      	mov	r0, r3
 800875c:	f7fe fd44 	bl	80071e8 <USBD_LL_DevDisconnected>
}
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d13c      	bne.n	80087f2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008778:	4a20      	ldr	r2, [pc, #128]	; (80087fc <USBD_LL_Init+0x94>)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a1e      	ldr	r2, [pc, #120]	; (80087fc <USBD_LL_Init+0x94>)
 8008784:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008788:	4b1c      	ldr	r3, [pc, #112]	; (80087fc <USBD_LL_Init+0x94>)
 800878a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800878e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008790:	4b1a      	ldr	r3, [pc, #104]	; (80087fc <USBD_LL_Init+0x94>)
 8008792:	2204      	movs	r2, #4
 8008794:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008796:	4b19      	ldr	r3, [pc, #100]	; (80087fc <USBD_LL_Init+0x94>)
 8008798:	2202      	movs	r2, #2
 800879a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800879c:	4b17      	ldr	r3, [pc, #92]	; (80087fc <USBD_LL_Init+0x94>)
 800879e:	2200      	movs	r2, #0
 80087a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80087a2:	4b16      	ldr	r3, [pc, #88]	; (80087fc <USBD_LL_Init+0x94>)
 80087a4:	2202      	movs	r2, #2
 80087a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80087a8:	4b14      	ldr	r3, [pc, #80]	; (80087fc <USBD_LL_Init+0x94>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80087ae:	4b13      	ldr	r3, [pc, #76]	; (80087fc <USBD_LL_Init+0x94>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80087b4:	4b11      	ldr	r3, [pc, #68]	; (80087fc <USBD_LL_Init+0x94>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80087ba:	4b10      	ldr	r3, [pc, #64]	; (80087fc <USBD_LL_Init+0x94>)
 80087bc:	2200      	movs	r2, #0
 80087be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80087c0:	4b0e      	ldr	r3, [pc, #56]	; (80087fc <USBD_LL_Init+0x94>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80087c6:	480d      	ldr	r0, [pc, #52]	; (80087fc <USBD_LL_Init+0x94>)
 80087c8:	f7f9 fd26 	bl	8002218 <HAL_PCD_Init>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80087d2:	f7f8 fa5b 	bl	8000c8c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80087d6:	2180      	movs	r1, #128	; 0x80
 80087d8:	4808      	ldr	r0, [pc, #32]	; (80087fc <USBD_LL_Init+0x94>)
 80087da:	f7fa ff7e 	bl	80036da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80087de:	2240      	movs	r2, #64	; 0x40
 80087e0:	2100      	movs	r1, #0
 80087e2:	4806      	ldr	r0, [pc, #24]	; (80087fc <USBD_LL_Init+0x94>)
 80087e4:	f7fa ff32 	bl	800364c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80087e8:	2280      	movs	r2, #128	; 0x80
 80087ea:	2101      	movs	r1, #1
 80087ec:	4803      	ldr	r0, [pc, #12]	; (80087fc <USBD_LL_Init+0x94>)
 80087ee:	f7fa ff2d 	bl	800364c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	2000186c 	.word	0x2000186c

08008800 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008816:	4618      	mov	r0, r3
 8008818:	f7f9 fe1b 	bl	8002452 <HAL_PCD_Start>
 800881c:	4603      	mov	r3, r0
 800881e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	4618      	mov	r0, r3
 8008824:	f000 f942 	bl	8008aac <USBD_Get_USB_Status>
 8008828:	4603      	mov	r3, r0
 800882a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800882c:	7bbb      	ldrb	r3, [r7, #14]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b084      	sub	sp, #16
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	4608      	mov	r0, r1
 8008840:	4611      	mov	r1, r2
 8008842:	461a      	mov	r2, r3
 8008844:	4603      	mov	r3, r0
 8008846:	70fb      	strb	r3, [r7, #3]
 8008848:	460b      	mov	r3, r1
 800884a:	70bb      	strb	r3, [r7, #2]
 800884c:	4613      	mov	r3, r2
 800884e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800885e:	78bb      	ldrb	r3, [r7, #2]
 8008860:	883a      	ldrh	r2, [r7, #0]
 8008862:	78f9      	ldrb	r1, [r7, #3]
 8008864:	f7fa faec 	bl	8002e40 <HAL_PCD_EP_Open>
 8008868:	4603      	mov	r3, r0
 800886a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800886c:	7bfb      	ldrb	r3, [r7, #15]
 800886e:	4618      	mov	r0, r3
 8008870:	f000 f91c 	bl	8008aac <USBD_Get_USB_Status>
 8008874:	4603      	mov	r3, r0
 8008876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008878:	7bbb      	ldrb	r3, [r7, #14]
}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b084      	sub	sp, #16
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	460b      	mov	r3, r1
 800888c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800889c:	78fa      	ldrb	r2, [r7, #3]
 800889e:	4611      	mov	r1, r2
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7fa fb35 	bl	8002f10 <HAL_PCD_EP_Close>
 80088a6:	4603      	mov	r3, r0
 80088a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 f8fd 	bl	8008aac <USBD_Get_USB_Status>
 80088b2:	4603      	mov	r3, r0
 80088b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	460b      	mov	r3, r1
 80088ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088d0:	2300      	movs	r3, #0
 80088d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088da:	78fa      	ldrb	r2, [r7, #3]
 80088dc:	4611      	mov	r1, r2
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fa fc0d 	bl	80030fe <HAL_PCD_EP_SetStall>
 80088e4:	4603      	mov	r3, r0
 80088e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 f8de 	bl	8008aac <USBD_Get_USB_Status>
 80088f0:	4603      	mov	r3, r0
 80088f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
 8008906:	460b      	mov	r3, r1
 8008908:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008918:	78fa      	ldrb	r2, [r7, #3]
 800891a:	4611      	mov	r1, r2
 800891c:	4618      	mov	r0, r3
 800891e:	f7fa fc52 	bl	80031c6 <HAL_PCD_EP_ClrStall>
 8008922:	4603      	mov	r3, r0
 8008924:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008926:	7bfb      	ldrb	r3, [r7, #15]
 8008928:	4618      	mov	r0, r3
 800892a:	f000 f8bf 	bl	8008aac <USBD_Get_USB_Status>
 800892e:	4603      	mov	r3, r0
 8008930:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008932:	7bbb      	ldrb	r3, [r7, #14]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	460b      	mov	r3, r1
 8008946:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800894e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008954:	2b00      	cmp	r3, #0
 8008956:	da0b      	bge.n	8008970 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008958:	78fb      	ldrb	r3, [r7, #3]
 800895a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800895e:	68f9      	ldr	r1, [r7, #12]
 8008960:	4613      	mov	r3, r2
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	4413      	add	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	440b      	add	r3, r1
 800896a:	333e      	adds	r3, #62	; 0x3e
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	e00b      	b.n	8008988 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008970:	78fb      	ldrb	r3, [r7, #3]
 8008972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008976:	68f9      	ldr	r1, [r7, #12]
 8008978:	4613      	mov	r3, r2
 800897a:	00db      	lsls	r3, r3, #3
 800897c:	4413      	add	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	440b      	add	r3, r1
 8008982:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008986:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008988:	4618      	mov	r0, r3
 800898a:	3714      	adds	r7, #20
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	460b      	mov	r3, r1
 800899e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089ae:	78fa      	ldrb	r2, [r7, #3]
 80089b0:	4611      	mov	r1, r2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fa fa1f 	bl	8002df6 <HAL_PCD_SetAddress>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 f874 	bl	8008aac <USBD_Get_USB_Status>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b086      	sub	sp, #24
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	607a      	str	r2, [r7, #4]
 80089dc:	603b      	str	r3, [r7, #0]
 80089de:	460b      	mov	r3, r1
 80089e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80089f0:	7af9      	ldrb	r1, [r7, #11]
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	f7fa fb38 	bl	800306a <HAL_PCD_EP_Transmit>
 80089fa:	4603      	mov	r3, r0
 80089fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089fe:	7dfb      	ldrb	r3, [r7, #23]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 f853 	bl	8008aac <USBD_Get_USB_Status>
 8008a06:	4603      	mov	r3, r0
 8008a08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3718      	adds	r7, #24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	607a      	str	r2, [r7, #4]
 8008a1e:	603b      	str	r3, [r7, #0]
 8008a20:	460b      	mov	r3, r1
 8008a22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008a32:	7af9      	ldrb	r1, [r7, #11]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	f7fa fab4 	bl	8002fa4 <HAL_PCD_EP_Receive>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a40:	7dfb      	ldrb	r3, [r7, #23]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 f832 	bl	8008aac <USBD_Get_USB_Status>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b082      	sub	sp, #8
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
 8008a5e:	460b      	mov	r3, r1
 8008a60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a68:	78fa      	ldrb	r2, [r7, #3]
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fa fae4 	bl	800303a <HAL_PCD_EP_GetRxCount>
 8008a72:	4603      	mov	r3, r0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008a84:	4b03      	ldr	r3, [pc, #12]	; (8008a94 <USBD_static_malloc+0x18>)
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	20001d78 	.word	0x20001d78

08008a98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]

}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b085      	sub	sp, #20
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008aba:	79fb      	ldrb	r3, [r7, #7]
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d817      	bhi.n	8008af0 <USBD_Get_USB_Status+0x44>
 8008ac0:	a201      	add	r2, pc, #4	; (adr r2, 8008ac8 <USBD_Get_USB_Status+0x1c>)
 8008ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac6:	bf00      	nop
 8008ac8:	08008ad9 	.word	0x08008ad9
 8008acc:	08008adf 	.word	0x08008adf
 8008ad0:	08008ae5 	.word	0x08008ae5
 8008ad4:	08008aeb 	.word	0x08008aeb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	73fb      	strb	r3, [r7, #15]
    break;
 8008adc:	e00b      	b.n	8008af6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae2:	e008      	b.n	8008af6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ae8:	e005      	b.n	8008af6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008aea:	2303      	movs	r3, #3
 8008aec:	73fb      	strb	r3, [r7, #15]
    break;
 8008aee:	e002      	b.n	8008af6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008af0:	2303      	movs	r3, #3
 8008af2:	73fb      	strb	r3, [r7, #15]
    break;
 8008af4:	bf00      	nop
  }
  return usb_status;
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3714      	adds	r7, #20
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr

08008b04 <__errno>:
 8008b04:	4b01      	ldr	r3, [pc, #4]	; (8008b0c <__errno+0x8>)
 8008b06:	6818      	ldr	r0, [r3, #0]
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	200000fc 	.word	0x200000fc

08008b10 <__libc_init_array>:
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	4d0d      	ldr	r5, [pc, #52]	; (8008b48 <__libc_init_array+0x38>)
 8008b14:	4c0d      	ldr	r4, [pc, #52]	; (8008b4c <__libc_init_array+0x3c>)
 8008b16:	1b64      	subs	r4, r4, r5
 8008b18:	10a4      	asrs	r4, r4, #2
 8008b1a:	2600      	movs	r6, #0
 8008b1c:	42a6      	cmp	r6, r4
 8008b1e:	d109      	bne.n	8008b34 <__libc_init_array+0x24>
 8008b20:	4d0b      	ldr	r5, [pc, #44]	; (8008b50 <__libc_init_array+0x40>)
 8008b22:	4c0c      	ldr	r4, [pc, #48]	; (8008b54 <__libc_init_array+0x44>)
 8008b24:	f000 fca2 	bl	800946c <_init>
 8008b28:	1b64      	subs	r4, r4, r5
 8008b2a:	10a4      	asrs	r4, r4, #2
 8008b2c:	2600      	movs	r6, #0
 8008b2e:	42a6      	cmp	r6, r4
 8008b30:	d105      	bne.n	8008b3e <__libc_init_array+0x2e>
 8008b32:	bd70      	pop	{r4, r5, r6, pc}
 8008b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b38:	4798      	blx	r3
 8008b3a:	3601      	adds	r6, #1
 8008b3c:	e7ee      	b.n	8008b1c <__libc_init_array+0xc>
 8008b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b42:	4798      	blx	r3
 8008b44:	3601      	adds	r6, #1
 8008b46:	e7f2      	b.n	8008b2e <__libc_init_array+0x1e>
 8008b48:	08009564 	.word	0x08009564
 8008b4c:	08009564 	.word	0x08009564
 8008b50:	08009564 	.word	0x08009564
 8008b54:	08009568 	.word	0x08009568

08008b58 <memset>:
 8008b58:	4402      	add	r2, r0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d100      	bne.n	8008b62 <memset+0xa>
 8008b60:	4770      	bx	lr
 8008b62:	f803 1b01 	strb.w	r1, [r3], #1
 8008b66:	e7f9      	b.n	8008b5c <memset+0x4>

08008b68 <sniprintf>:
 8008b68:	b40c      	push	{r2, r3}
 8008b6a:	b530      	push	{r4, r5, lr}
 8008b6c:	4b17      	ldr	r3, [pc, #92]	; (8008bcc <sniprintf+0x64>)
 8008b6e:	1e0c      	subs	r4, r1, #0
 8008b70:	681d      	ldr	r5, [r3, #0]
 8008b72:	b09d      	sub	sp, #116	; 0x74
 8008b74:	da08      	bge.n	8008b88 <sniprintf+0x20>
 8008b76:	238b      	movs	r3, #139	; 0x8b
 8008b78:	602b      	str	r3, [r5, #0]
 8008b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b7e:	b01d      	add	sp, #116	; 0x74
 8008b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b84:	b002      	add	sp, #8
 8008b86:	4770      	bx	lr
 8008b88:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b90:	bf14      	ite	ne
 8008b92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b96:	4623      	moveq	r3, r4
 8008b98:	9304      	str	r3, [sp, #16]
 8008b9a:	9307      	str	r3, [sp, #28]
 8008b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ba0:	9002      	str	r0, [sp, #8]
 8008ba2:	9006      	str	r0, [sp, #24]
 8008ba4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ba8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008baa:	ab21      	add	r3, sp, #132	; 0x84
 8008bac:	a902      	add	r1, sp, #8
 8008bae:	4628      	mov	r0, r5
 8008bb0:	9301      	str	r3, [sp, #4]
 8008bb2:	f000 f869 	bl	8008c88 <_svfiprintf_r>
 8008bb6:	1c43      	adds	r3, r0, #1
 8008bb8:	bfbc      	itt	lt
 8008bba:	238b      	movlt	r3, #139	; 0x8b
 8008bbc:	602b      	strlt	r3, [r5, #0]
 8008bbe:	2c00      	cmp	r4, #0
 8008bc0:	d0dd      	beq.n	8008b7e <sniprintf+0x16>
 8008bc2:	9b02      	ldr	r3, [sp, #8]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	701a      	strb	r2, [r3, #0]
 8008bc8:	e7d9      	b.n	8008b7e <sniprintf+0x16>
 8008bca:	bf00      	nop
 8008bcc:	200000fc 	.word	0x200000fc

08008bd0 <__ssputs_r>:
 8008bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd4:	688e      	ldr	r6, [r1, #8]
 8008bd6:	429e      	cmp	r6, r3
 8008bd8:	4682      	mov	sl, r0
 8008bda:	460c      	mov	r4, r1
 8008bdc:	4690      	mov	r8, r2
 8008bde:	461f      	mov	r7, r3
 8008be0:	d838      	bhi.n	8008c54 <__ssputs_r+0x84>
 8008be2:	898a      	ldrh	r2, [r1, #12]
 8008be4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008be8:	d032      	beq.n	8008c50 <__ssputs_r+0x80>
 8008bea:	6825      	ldr	r5, [r4, #0]
 8008bec:	6909      	ldr	r1, [r1, #16]
 8008bee:	eba5 0901 	sub.w	r9, r5, r1
 8008bf2:	6965      	ldr	r5, [r4, #20]
 8008bf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	444b      	add	r3, r9
 8008c00:	106d      	asrs	r5, r5, #1
 8008c02:	429d      	cmp	r5, r3
 8008c04:	bf38      	it	cc
 8008c06:	461d      	movcc	r5, r3
 8008c08:	0553      	lsls	r3, r2, #21
 8008c0a:	d531      	bpl.n	8008c70 <__ssputs_r+0xa0>
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	f000 fb63 	bl	80092d8 <_malloc_r>
 8008c12:	4606      	mov	r6, r0
 8008c14:	b950      	cbnz	r0, 8008c2c <__ssputs_r+0x5c>
 8008c16:	230c      	movs	r3, #12
 8008c18:	f8ca 3000 	str.w	r3, [sl]
 8008c1c:	89a3      	ldrh	r3, [r4, #12]
 8008c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c22:	81a3      	strh	r3, [r4, #12]
 8008c24:	f04f 30ff 	mov.w	r0, #4294967295
 8008c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c2c:	6921      	ldr	r1, [r4, #16]
 8008c2e:	464a      	mov	r2, r9
 8008c30:	f000 fabe 	bl	80091b0 <memcpy>
 8008c34:	89a3      	ldrh	r3, [r4, #12]
 8008c36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c3e:	81a3      	strh	r3, [r4, #12]
 8008c40:	6126      	str	r6, [r4, #16]
 8008c42:	6165      	str	r5, [r4, #20]
 8008c44:	444e      	add	r6, r9
 8008c46:	eba5 0509 	sub.w	r5, r5, r9
 8008c4a:	6026      	str	r6, [r4, #0]
 8008c4c:	60a5      	str	r5, [r4, #8]
 8008c4e:	463e      	mov	r6, r7
 8008c50:	42be      	cmp	r6, r7
 8008c52:	d900      	bls.n	8008c56 <__ssputs_r+0x86>
 8008c54:	463e      	mov	r6, r7
 8008c56:	6820      	ldr	r0, [r4, #0]
 8008c58:	4632      	mov	r2, r6
 8008c5a:	4641      	mov	r1, r8
 8008c5c:	f000 fab6 	bl	80091cc <memmove>
 8008c60:	68a3      	ldr	r3, [r4, #8]
 8008c62:	1b9b      	subs	r3, r3, r6
 8008c64:	60a3      	str	r3, [r4, #8]
 8008c66:	6823      	ldr	r3, [r4, #0]
 8008c68:	4433      	add	r3, r6
 8008c6a:	6023      	str	r3, [r4, #0]
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	e7db      	b.n	8008c28 <__ssputs_r+0x58>
 8008c70:	462a      	mov	r2, r5
 8008c72:	f000 fba5 	bl	80093c0 <_realloc_r>
 8008c76:	4606      	mov	r6, r0
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d1e1      	bne.n	8008c40 <__ssputs_r+0x70>
 8008c7c:	6921      	ldr	r1, [r4, #16]
 8008c7e:	4650      	mov	r0, sl
 8008c80:	f000 fabe 	bl	8009200 <_free_r>
 8008c84:	e7c7      	b.n	8008c16 <__ssputs_r+0x46>
	...

08008c88 <_svfiprintf_r>:
 8008c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8c:	4698      	mov	r8, r3
 8008c8e:	898b      	ldrh	r3, [r1, #12]
 8008c90:	061b      	lsls	r3, r3, #24
 8008c92:	b09d      	sub	sp, #116	; 0x74
 8008c94:	4607      	mov	r7, r0
 8008c96:	460d      	mov	r5, r1
 8008c98:	4614      	mov	r4, r2
 8008c9a:	d50e      	bpl.n	8008cba <_svfiprintf_r+0x32>
 8008c9c:	690b      	ldr	r3, [r1, #16]
 8008c9e:	b963      	cbnz	r3, 8008cba <_svfiprintf_r+0x32>
 8008ca0:	2140      	movs	r1, #64	; 0x40
 8008ca2:	f000 fb19 	bl	80092d8 <_malloc_r>
 8008ca6:	6028      	str	r0, [r5, #0]
 8008ca8:	6128      	str	r0, [r5, #16]
 8008caa:	b920      	cbnz	r0, 8008cb6 <_svfiprintf_r+0x2e>
 8008cac:	230c      	movs	r3, #12
 8008cae:	603b      	str	r3, [r7, #0]
 8008cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb4:	e0d1      	b.n	8008e5a <_svfiprintf_r+0x1d2>
 8008cb6:	2340      	movs	r3, #64	; 0x40
 8008cb8:	616b      	str	r3, [r5, #20]
 8008cba:	2300      	movs	r3, #0
 8008cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8008cbe:	2320      	movs	r3, #32
 8008cc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cc8:	2330      	movs	r3, #48	; 0x30
 8008cca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e74 <_svfiprintf_r+0x1ec>
 8008cce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cd2:	f04f 0901 	mov.w	r9, #1
 8008cd6:	4623      	mov	r3, r4
 8008cd8:	469a      	mov	sl, r3
 8008cda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cde:	b10a      	cbz	r2, 8008ce4 <_svfiprintf_r+0x5c>
 8008ce0:	2a25      	cmp	r2, #37	; 0x25
 8008ce2:	d1f9      	bne.n	8008cd8 <_svfiprintf_r+0x50>
 8008ce4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ce8:	d00b      	beq.n	8008d02 <_svfiprintf_r+0x7a>
 8008cea:	465b      	mov	r3, fp
 8008cec:	4622      	mov	r2, r4
 8008cee:	4629      	mov	r1, r5
 8008cf0:	4638      	mov	r0, r7
 8008cf2:	f7ff ff6d 	bl	8008bd0 <__ssputs_r>
 8008cf6:	3001      	adds	r0, #1
 8008cf8:	f000 80aa 	beq.w	8008e50 <_svfiprintf_r+0x1c8>
 8008cfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cfe:	445a      	add	r2, fp
 8008d00:	9209      	str	r2, [sp, #36]	; 0x24
 8008d02:	f89a 3000 	ldrb.w	r3, [sl]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f000 80a2 	beq.w	8008e50 <_svfiprintf_r+0x1c8>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d16:	f10a 0a01 	add.w	sl, sl, #1
 8008d1a:	9304      	str	r3, [sp, #16]
 8008d1c:	9307      	str	r3, [sp, #28]
 8008d1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d22:	931a      	str	r3, [sp, #104]	; 0x68
 8008d24:	4654      	mov	r4, sl
 8008d26:	2205      	movs	r2, #5
 8008d28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d2c:	4851      	ldr	r0, [pc, #324]	; (8008e74 <_svfiprintf_r+0x1ec>)
 8008d2e:	f7f7 fa57 	bl	80001e0 <memchr>
 8008d32:	9a04      	ldr	r2, [sp, #16]
 8008d34:	b9d8      	cbnz	r0, 8008d6e <_svfiprintf_r+0xe6>
 8008d36:	06d0      	lsls	r0, r2, #27
 8008d38:	bf44      	itt	mi
 8008d3a:	2320      	movmi	r3, #32
 8008d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d40:	0711      	lsls	r1, r2, #28
 8008d42:	bf44      	itt	mi
 8008d44:	232b      	movmi	r3, #43	; 0x2b
 8008d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8008d50:	d015      	beq.n	8008d7e <_svfiprintf_r+0xf6>
 8008d52:	9a07      	ldr	r2, [sp, #28]
 8008d54:	4654      	mov	r4, sl
 8008d56:	2000      	movs	r0, #0
 8008d58:	f04f 0c0a 	mov.w	ip, #10
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d62:	3b30      	subs	r3, #48	; 0x30
 8008d64:	2b09      	cmp	r3, #9
 8008d66:	d94e      	bls.n	8008e06 <_svfiprintf_r+0x17e>
 8008d68:	b1b0      	cbz	r0, 8008d98 <_svfiprintf_r+0x110>
 8008d6a:	9207      	str	r2, [sp, #28]
 8008d6c:	e014      	b.n	8008d98 <_svfiprintf_r+0x110>
 8008d6e:	eba0 0308 	sub.w	r3, r0, r8
 8008d72:	fa09 f303 	lsl.w	r3, r9, r3
 8008d76:	4313      	orrs	r3, r2
 8008d78:	9304      	str	r3, [sp, #16]
 8008d7a:	46a2      	mov	sl, r4
 8008d7c:	e7d2      	b.n	8008d24 <_svfiprintf_r+0x9c>
 8008d7e:	9b03      	ldr	r3, [sp, #12]
 8008d80:	1d19      	adds	r1, r3, #4
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	9103      	str	r1, [sp, #12]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	bfbb      	ittet	lt
 8008d8a:	425b      	neglt	r3, r3
 8008d8c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d90:	9307      	strge	r3, [sp, #28]
 8008d92:	9307      	strlt	r3, [sp, #28]
 8008d94:	bfb8      	it	lt
 8008d96:	9204      	strlt	r2, [sp, #16]
 8008d98:	7823      	ldrb	r3, [r4, #0]
 8008d9a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d9c:	d10c      	bne.n	8008db8 <_svfiprintf_r+0x130>
 8008d9e:	7863      	ldrb	r3, [r4, #1]
 8008da0:	2b2a      	cmp	r3, #42	; 0x2a
 8008da2:	d135      	bne.n	8008e10 <_svfiprintf_r+0x188>
 8008da4:	9b03      	ldr	r3, [sp, #12]
 8008da6:	1d1a      	adds	r2, r3, #4
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	9203      	str	r2, [sp, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	bfb8      	it	lt
 8008db0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008db4:	3402      	adds	r4, #2
 8008db6:	9305      	str	r3, [sp, #20]
 8008db8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e84 <_svfiprintf_r+0x1fc>
 8008dbc:	7821      	ldrb	r1, [r4, #0]
 8008dbe:	2203      	movs	r2, #3
 8008dc0:	4650      	mov	r0, sl
 8008dc2:	f7f7 fa0d 	bl	80001e0 <memchr>
 8008dc6:	b140      	cbz	r0, 8008dda <_svfiprintf_r+0x152>
 8008dc8:	2340      	movs	r3, #64	; 0x40
 8008dca:	eba0 000a 	sub.w	r0, r0, sl
 8008dce:	fa03 f000 	lsl.w	r0, r3, r0
 8008dd2:	9b04      	ldr	r3, [sp, #16]
 8008dd4:	4303      	orrs	r3, r0
 8008dd6:	3401      	adds	r4, #1
 8008dd8:	9304      	str	r3, [sp, #16]
 8008dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dde:	4826      	ldr	r0, [pc, #152]	; (8008e78 <_svfiprintf_r+0x1f0>)
 8008de0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008de4:	2206      	movs	r2, #6
 8008de6:	f7f7 f9fb 	bl	80001e0 <memchr>
 8008dea:	2800      	cmp	r0, #0
 8008dec:	d038      	beq.n	8008e60 <_svfiprintf_r+0x1d8>
 8008dee:	4b23      	ldr	r3, [pc, #140]	; (8008e7c <_svfiprintf_r+0x1f4>)
 8008df0:	bb1b      	cbnz	r3, 8008e3a <_svfiprintf_r+0x1b2>
 8008df2:	9b03      	ldr	r3, [sp, #12]
 8008df4:	3307      	adds	r3, #7
 8008df6:	f023 0307 	bic.w	r3, r3, #7
 8008dfa:	3308      	adds	r3, #8
 8008dfc:	9303      	str	r3, [sp, #12]
 8008dfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e00:	4433      	add	r3, r6
 8008e02:	9309      	str	r3, [sp, #36]	; 0x24
 8008e04:	e767      	b.n	8008cd6 <_svfiprintf_r+0x4e>
 8008e06:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	2001      	movs	r0, #1
 8008e0e:	e7a5      	b.n	8008d5c <_svfiprintf_r+0xd4>
 8008e10:	2300      	movs	r3, #0
 8008e12:	3401      	adds	r4, #1
 8008e14:	9305      	str	r3, [sp, #20]
 8008e16:	4619      	mov	r1, r3
 8008e18:	f04f 0c0a 	mov.w	ip, #10
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e22:	3a30      	subs	r2, #48	; 0x30
 8008e24:	2a09      	cmp	r2, #9
 8008e26:	d903      	bls.n	8008e30 <_svfiprintf_r+0x1a8>
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d0c5      	beq.n	8008db8 <_svfiprintf_r+0x130>
 8008e2c:	9105      	str	r1, [sp, #20]
 8008e2e:	e7c3      	b.n	8008db8 <_svfiprintf_r+0x130>
 8008e30:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e34:	4604      	mov	r4, r0
 8008e36:	2301      	movs	r3, #1
 8008e38:	e7f0      	b.n	8008e1c <_svfiprintf_r+0x194>
 8008e3a:	ab03      	add	r3, sp, #12
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	462a      	mov	r2, r5
 8008e40:	4b0f      	ldr	r3, [pc, #60]	; (8008e80 <_svfiprintf_r+0x1f8>)
 8008e42:	a904      	add	r1, sp, #16
 8008e44:	4638      	mov	r0, r7
 8008e46:	f3af 8000 	nop.w
 8008e4a:	1c42      	adds	r2, r0, #1
 8008e4c:	4606      	mov	r6, r0
 8008e4e:	d1d6      	bne.n	8008dfe <_svfiprintf_r+0x176>
 8008e50:	89ab      	ldrh	r3, [r5, #12]
 8008e52:	065b      	lsls	r3, r3, #25
 8008e54:	f53f af2c 	bmi.w	8008cb0 <_svfiprintf_r+0x28>
 8008e58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e5a:	b01d      	add	sp, #116	; 0x74
 8008e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e60:	ab03      	add	r3, sp, #12
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	462a      	mov	r2, r5
 8008e66:	4b06      	ldr	r3, [pc, #24]	; (8008e80 <_svfiprintf_r+0x1f8>)
 8008e68:	a904      	add	r1, sp, #16
 8008e6a:	4638      	mov	r0, r7
 8008e6c:	f000 f87a 	bl	8008f64 <_printf_i>
 8008e70:	e7eb      	b.n	8008e4a <_svfiprintf_r+0x1c2>
 8008e72:	bf00      	nop
 8008e74:	08009528 	.word	0x08009528
 8008e78:	08009532 	.word	0x08009532
 8008e7c:	00000000 	.word	0x00000000
 8008e80:	08008bd1 	.word	0x08008bd1
 8008e84:	0800952e 	.word	0x0800952e

08008e88 <_printf_common>:
 8008e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e8c:	4616      	mov	r6, r2
 8008e8e:	4699      	mov	r9, r3
 8008e90:	688a      	ldr	r2, [r1, #8]
 8008e92:	690b      	ldr	r3, [r1, #16]
 8008e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	bfb8      	it	lt
 8008e9c:	4613      	movlt	r3, r2
 8008e9e:	6033      	str	r3, [r6, #0]
 8008ea0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ea4:	4607      	mov	r7, r0
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	b10a      	cbz	r2, 8008eae <_printf_common+0x26>
 8008eaa:	3301      	adds	r3, #1
 8008eac:	6033      	str	r3, [r6, #0]
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	0699      	lsls	r1, r3, #26
 8008eb2:	bf42      	ittt	mi
 8008eb4:	6833      	ldrmi	r3, [r6, #0]
 8008eb6:	3302      	addmi	r3, #2
 8008eb8:	6033      	strmi	r3, [r6, #0]
 8008eba:	6825      	ldr	r5, [r4, #0]
 8008ebc:	f015 0506 	ands.w	r5, r5, #6
 8008ec0:	d106      	bne.n	8008ed0 <_printf_common+0x48>
 8008ec2:	f104 0a19 	add.w	sl, r4, #25
 8008ec6:	68e3      	ldr	r3, [r4, #12]
 8008ec8:	6832      	ldr	r2, [r6, #0]
 8008eca:	1a9b      	subs	r3, r3, r2
 8008ecc:	42ab      	cmp	r3, r5
 8008ece:	dc26      	bgt.n	8008f1e <_printf_common+0x96>
 8008ed0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ed4:	1e13      	subs	r3, r2, #0
 8008ed6:	6822      	ldr	r2, [r4, #0]
 8008ed8:	bf18      	it	ne
 8008eda:	2301      	movne	r3, #1
 8008edc:	0692      	lsls	r2, r2, #26
 8008ede:	d42b      	bmi.n	8008f38 <_printf_common+0xb0>
 8008ee0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ee4:	4649      	mov	r1, r9
 8008ee6:	4638      	mov	r0, r7
 8008ee8:	47c0      	blx	r8
 8008eea:	3001      	adds	r0, #1
 8008eec:	d01e      	beq.n	8008f2c <_printf_common+0xa4>
 8008eee:	6823      	ldr	r3, [r4, #0]
 8008ef0:	68e5      	ldr	r5, [r4, #12]
 8008ef2:	6832      	ldr	r2, [r6, #0]
 8008ef4:	f003 0306 	and.w	r3, r3, #6
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	bf08      	it	eq
 8008efc:	1aad      	subeq	r5, r5, r2
 8008efe:	68a3      	ldr	r3, [r4, #8]
 8008f00:	6922      	ldr	r2, [r4, #16]
 8008f02:	bf0c      	ite	eq
 8008f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f08:	2500      	movne	r5, #0
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	bfc4      	itt	gt
 8008f0e:	1a9b      	subgt	r3, r3, r2
 8008f10:	18ed      	addgt	r5, r5, r3
 8008f12:	2600      	movs	r6, #0
 8008f14:	341a      	adds	r4, #26
 8008f16:	42b5      	cmp	r5, r6
 8008f18:	d11a      	bne.n	8008f50 <_printf_common+0xc8>
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	e008      	b.n	8008f30 <_printf_common+0xa8>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	4652      	mov	r2, sl
 8008f22:	4649      	mov	r1, r9
 8008f24:	4638      	mov	r0, r7
 8008f26:	47c0      	blx	r8
 8008f28:	3001      	adds	r0, #1
 8008f2a:	d103      	bne.n	8008f34 <_printf_common+0xac>
 8008f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f34:	3501      	adds	r5, #1
 8008f36:	e7c6      	b.n	8008ec6 <_printf_common+0x3e>
 8008f38:	18e1      	adds	r1, r4, r3
 8008f3a:	1c5a      	adds	r2, r3, #1
 8008f3c:	2030      	movs	r0, #48	; 0x30
 8008f3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f42:	4422      	add	r2, r4
 8008f44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f4c:	3302      	adds	r3, #2
 8008f4e:	e7c7      	b.n	8008ee0 <_printf_common+0x58>
 8008f50:	2301      	movs	r3, #1
 8008f52:	4622      	mov	r2, r4
 8008f54:	4649      	mov	r1, r9
 8008f56:	4638      	mov	r0, r7
 8008f58:	47c0      	blx	r8
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	d0e6      	beq.n	8008f2c <_printf_common+0xa4>
 8008f5e:	3601      	adds	r6, #1
 8008f60:	e7d9      	b.n	8008f16 <_printf_common+0x8e>
	...

08008f64 <_printf_i>:
 8008f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f68:	7e0f      	ldrb	r7, [r1, #24]
 8008f6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f6c:	2f78      	cmp	r7, #120	; 0x78
 8008f6e:	4691      	mov	r9, r2
 8008f70:	4680      	mov	r8, r0
 8008f72:	460c      	mov	r4, r1
 8008f74:	469a      	mov	sl, r3
 8008f76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f7a:	d807      	bhi.n	8008f8c <_printf_i+0x28>
 8008f7c:	2f62      	cmp	r7, #98	; 0x62
 8008f7e:	d80a      	bhi.n	8008f96 <_printf_i+0x32>
 8008f80:	2f00      	cmp	r7, #0
 8008f82:	f000 80d8 	beq.w	8009136 <_printf_i+0x1d2>
 8008f86:	2f58      	cmp	r7, #88	; 0x58
 8008f88:	f000 80a3 	beq.w	80090d2 <_printf_i+0x16e>
 8008f8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f94:	e03a      	b.n	800900c <_printf_i+0xa8>
 8008f96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f9a:	2b15      	cmp	r3, #21
 8008f9c:	d8f6      	bhi.n	8008f8c <_printf_i+0x28>
 8008f9e:	a101      	add	r1, pc, #4	; (adr r1, 8008fa4 <_printf_i+0x40>)
 8008fa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fa4:	08008ffd 	.word	0x08008ffd
 8008fa8:	08009011 	.word	0x08009011
 8008fac:	08008f8d 	.word	0x08008f8d
 8008fb0:	08008f8d 	.word	0x08008f8d
 8008fb4:	08008f8d 	.word	0x08008f8d
 8008fb8:	08008f8d 	.word	0x08008f8d
 8008fbc:	08009011 	.word	0x08009011
 8008fc0:	08008f8d 	.word	0x08008f8d
 8008fc4:	08008f8d 	.word	0x08008f8d
 8008fc8:	08008f8d 	.word	0x08008f8d
 8008fcc:	08008f8d 	.word	0x08008f8d
 8008fd0:	0800911d 	.word	0x0800911d
 8008fd4:	08009041 	.word	0x08009041
 8008fd8:	080090ff 	.word	0x080090ff
 8008fdc:	08008f8d 	.word	0x08008f8d
 8008fe0:	08008f8d 	.word	0x08008f8d
 8008fe4:	0800913f 	.word	0x0800913f
 8008fe8:	08008f8d 	.word	0x08008f8d
 8008fec:	08009041 	.word	0x08009041
 8008ff0:	08008f8d 	.word	0x08008f8d
 8008ff4:	08008f8d 	.word	0x08008f8d
 8008ff8:	08009107 	.word	0x08009107
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	1d1a      	adds	r2, r3, #4
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	602a      	str	r2, [r5, #0]
 8009004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009008:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800900c:	2301      	movs	r3, #1
 800900e:	e0a3      	b.n	8009158 <_printf_i+0x1f4>
 8009010:	6820      	ldr	r0, [r4, #0]
 8009012:	6829      	ldr	r1, [r5, #0]
 8009014:	0606      	lsls	r6, r0, #24
 8009016:	f101 0304 	add.w	r3, r1, #4
 800901a:	d50a      	bpl.n	8009032 <_printf_i+0xce>
 800901c:	680e      	ldr	r6, [r1, #0]
 800901e:	602b      	str	r3, [r5, #0]
 8009020:	2e00      	cmp	r6, #0
 8009022:	da03      	bge.n	800902c <_printf_i+0xc8>
 8009024:	232d      	movs	r3, #45	; 0x2d
 8009026:	4276      	negs	r6, r6
 8009028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800902c:	485e      	ldr	r0, [pc, #376]	; (80091a8 <_printf_i+0x244>)
 800902e:	230a      	movs	r3, #10
 8009030:	e019      	b.n	8009066 <_printf_i+0x102>
 8009032:	680e      	ldr	r6, [r1, #0]
 8009034:	602b      	str	r3, [r5, #0]
 8009036:	f010 0f40 	tst.w	r0, #64	; 0x40
 800903a:	bf18      	it	ne
 800903c:	b236      	sxthne	r6, r6
 800903e:	e7ef      	b.n	8009020 <_printf_i+0xbc>
 8009040:	682b      	ldr	r3, [r5, #0]
 8009042:	6820      	ldr	r0, [r4, #0]
 8009044:	1d19      	adds	r1, r3, #4
 8009046:	6029      	str	r1, [r5, #0]
 8009048:	0601      	lsls	r1, r0, #24
 800904a:	d501      	bpl.n	8009050 <_printf_i+0xec>
 800904c:	681e      	ldr	r6, [r3, #0]
 800904e:	e002      	b.n	8009056 <_printf_i+0xf2>
 8009050:	0646      	lsls	r6, r0, #25
 8009052:	d5fb      	bpl.n	800904c <_printf_i+0xe8>
 8009054:	881e      	ldrh	r6, [r3, #0]
 8009056:	4854      	ldr	r0, [pc, #336]	; (80091a8 <_printf_i+0x244>)
 8009058:	2f6f      	cmp	r7, #111	; 0x6f
 800905a:	bf0c      	ite	eq
 800905c:	2308      	moveq	r3, #8
 800905e:	230a      	movne	r3, #10
 8009060:	2100      	movs	r1, #0
 8009062:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009066:	6865      	ldr	r5, [r4, #4]
 8009068:	60a5      	str	r5, [r4, #8]
 800906a:	2d00      	cmp	r5, #0
 800906c:	bfa2      	ittt	ge
 800906e:	6821      	ldrge	r1, [r4, #0]
 8009070:	f021 0104 	bicge.w	r1, r1, #4
 8009074:	6021      	strge	r1, [r4, #0]
 8009076:	b90e      	cbnz	r6, 800907c <_printf_i+0x118>
 8009078:	2d00      	cmp	r5, #0
 800907a:	d04d      	beq.n	8009118 <_printf_i+0x1b4>
 800907c:	4615      	mov	r5, r2
 800907e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009082:	fb03 6711 	mls	r7, r3, r1, r6
 8009086:	5dc7      	ldrb	r7, [r0, r7]
 8009088:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800908c:	4637      	mov	r7, r6
 800908e:	42bb      	cmp	r3, r7
 8009090:	460e      	mov	r6, r1
 8009092:	d9f4      	bls.n	800907e <_printf_i+0x11a>
 8009094:	2b08      	cmp	r3, #8
 8009096:	d10b      	bne.n	80090b0 <_printf_i+0x14c>
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	07de      	lsls	r6, r3, #31
 800909c:	d508      	bpl.n	80090b0 <_printf_i+0x14c>
 800909e:	6923      	ldr	r3, [r4, #16]
 80090a0:	6861      	ldr	r1, [r4, #4]
 80090a2:	4299      	cmp	r1, r3
 80090a4:	bfde      	ittt	le
 80090a6:	2330      	movle	r3, #48	; 0x30
 80090a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80090b0:	1b52      	subs	r2, r2, r5
 80090b2:	6122      	str	r2, [r4, #16]
 80090b4:	f8cd a000 	str.w	sl, [sp]
 80090b8:	464b      	mov	r3, r9
 80090ba:	aa03      	add	r2, sp, #12
 80090bc:	4621      	mov	r1, r4
 80090be:	4640      	mov	r0, r8
 80090c0:	f7ff fee2 	bl	8008e88 <_printf_common>
 80090c4:	3001      	adds	r0, #1
 80090c6:	d14c      	bne.n	8009162 <_printf_i+0x1fe>
 80090c8:	f04f 30ff 	mov.w	r0, #4294967295
 80090cc:	b004      	add	sp, #16
 80090ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d2:	4835      	ldr	r0, [pc, #212]	; (80091a8 <_printf_i+0x244>)
 80090d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80090d8:	6829      	ldr	r1, [r5, #0]
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80090e0:	6029      	str	r1, [r5, #0]
 80090e2:	061d      	lsls	r5, r3, #24
 80090e4:	d514      	bpl.n	8009110 <_printf_i+0x1ac>
 80090e6:	07df      	lsls	r7, r3, #31
 80090e8:	bf44      	itt	mi
 80090ea:	f043 0320 	orrmi.w	r3, r3, #32
 80090ee:	6023      	strmi	r3, [r4, #0]
 80090f0:	b91e      	cbnz	r6, 80090fa <_printf_i+0x196>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	f023 0320 	bic.w	r3, r3, #32
 80090f8:	6023      	str	r3, [r4, #0]
 80090fa:	2310      	movs	r3, #16
 80090fc:	e7b0      	b.n	8009060 <_printf_i+0xfc>
 80090fe:	6823      	ldr	r3, [r4, #0]
 8009100:	f043 0320 	orr.w	r3, r3, #32
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	2378      	movs	r3, #120	; 0x78
 8009108:	4828      	ldr	r0, [pc, #160]	; (80091ac <_printf_i+0x248>)
 800910a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800910e:	e7e3      	b.n	80090d8 <_printf_i+0x174>
 8009110:	0659      	lsls	r1, r3, #25
 8009112:	bf48      	it	mi
 8009114:	b2b6      	uxthmi	r6, r6
 8009116:	e7e6      	b.n	80090e6 <_printf_i+0x182>
 8009118:	4615      	mov	r5, r2
 800911a:	e7bb      	b.n	8009094 <_printf_i+0x130>
 800911c:	682b      	ldr	r3, [r5, #0]
 800911e:	6826      	ldr	r6, [r4, #0]
 8009120:	6961      	ldr	r1, [r4, #20]
 8009122:	1d18      	adds	r0, r3, #4
 8009124:	6028      	str	r0, [r5, #0]
 8009126:	0635      	lsls	r5, r6, #24
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	d501      	bpl.n	8009130 <_printf_i+0x1cc>
 800912c:	6019      	str	r1, [r3, #0]
 800912e:	e002      	b.n	8009136 <_printf_i+0x1d2>
 8009130:	0670      	lsls	r0, r6, #25
 8009132:	d5fb      	bpl.n	800912c <_printf_i+0x1c8>
 8009134:	8019      	strh	r1, [r3, #0]
 8009136:	2300      	movs	r3, #0
 8009138:	6123      	str	r3, [r4, #16]
 800913a:	4615      	mov	r5, r2
 800913c:	e7ba      	b.n	80090b4 <_printf_i+0x150>
 800913e:	682b      	ldr	r3, [r5, #0]
 8009140:	1d1a      	adds	r2, r3, #4
 8009142:	602a      	str	r2, [r5, #0]
 8009144:	681d      	ldr	r5, [r3, #0]
 8009146:	6862      	ldr	r2, [r4, #4]
 8009148:	2100      	movs	r1, #0
 800914a:	4628      	mov	r0, r5
 800914c:	f7f7 f848 	bl	80001e0 <memchr>
 8009150:	b108      	cbz	r0, 8009156 <_printf_i+0x1f2>
 8009152:	1b40      	subs	r0, r0, r5
 8009154:	6060      	str	r0, [r4, #4]
 8009156:	6863      	ldr	r3, [r4, #4]
 8009158:	6123      	str	r3, [r4, #16]
 800915a:	2300      	movs	r3, #0
 800915c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009160:	e7a8      	b.n	80090b4 <_printf_i+0x150>
 8009162:	6923      	ldr	r3, [r4, #16]
 8009164:	462a      	mov	r2, r5
 8009166:	4649      	mov	r1, r9
 8009168:	4640      	mov	r0, r8
 800916a:	47d0      	blx	sl
 800916c:	3001      	adds	r0, #1
 800916e:	d0ab      	beq.n	80090c8 <_printf_i+0x164>
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	079b      	lsls	r3, r3, #30
 8009174:	d413      	bmi.n	800919e <_printf_i+0x23a>
 8009176:	68e0      	ldr	r0, [r4, #12]
 8009178:	9b03      	ldr	r3, [sp, #12]
 800917a:	4298      	cmp	r0, r3
 800917c:	bfb8      	it	lt
 800917e:	4618      	movlt	r0, r3
 8009180:	e7a4      	b.n	80090cc <_printf_i+0x168>
 8009182:	2301      	movs	r3, #1
 8009184:	4632      	mov	r2, r6
 8009186:	4649      	mov	r1, r9
 8009188:	4640      	mov	r0, r8
 800918a:	47d0      	blx	sl
 800918c:	3001      	adds	r0, #1
 800918e:	d09b      	beq.n	80090c8 <_printf_i+0x164>
 8009190:	3501      	adds	r5, #1
 8009192:	68e3      	ldr	r3, [r4, #12]
 8009194:	9903      	ldr	r1, [sp, #12]
 8009196:	1a5b      	subs	r3, r3, r1
 8009198:	42ab      	cmp	r3, r5
 800919a:	dcf2      	bgt.n	8009182 <_printf_i+0x21e>
 800919c:	e7eb      	b.n	8009176 <_printf_i+0x212>
 800919e:	2500      	movs	r5, #0
 80091a0:	f104 0619 	add.w	r6, r4, #25
 80091a4:	e7f5      	b.n	8009192 <_printf_i+0x22e>
 80091a6:	bf00      	nop
 80091a8:	08009539 	.word	0x08009539
 80091ac:	0800954a 	.word	0x0800954a

080091b0 <memcpy>:
 80091b0:	440a      	add	r2, r1
 80091b2:	4291      	cmp	r1, r2
 80091b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80091b8:	d100      	bne.n	80091bc <memcpy+0xc>
 80091ba:	4770      	bx	lr
 80091bc:	b510      	push	{r4, lr}
 80091be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091c6:	4291      	cmp	r1, r2
 80091c8:	d1f9      	bne.n	80091be <memcpy+0xe>
 80091ca:	bd10      	pop	{r4, pc}

080091cc <memmove>:
 80091cc:	4288      	cmp	r0, r1
 80091ce:	b510      	push	{r4, lr}
 80091d0:	eb01 0402 	add.w	r4, r1, r2
 80091d4:	d902      	bls.n	80091dc <memmove+0x10>
 80091d6:	4284      	cmp	r4, r0
 80091d8:	4623      	mov	r3, r4
 80091da:	d807      	bhi.n	80091ec <memmove+0x20>
 80091dc:	1e43      	subs	r3, r0, #1
 80091de:	42a1      	cmp	r1, r4
 80091e0:	d008      	beq.n	80091f4 <memmove+0x28>
 80091e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091ea:	e7f8      	b.n	80091de <memmove+0x12>
 80091ec:	4402      	add	r2, r0
 80091ee:	4601      	mov	r1, r0
 80091f0:	428a      	cmp	r2, r1
 80091f2:	d100      	bne.n	80091f6 <memmove+0x2a>
 80091f4:	bd10      	pop	{r4, pc}
 80091f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091fe:	e7f7      	b.n	80091f0 <memmove+0x24>

08009200 <_free_r>:
 8009200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009202:	2900      	cmp	r1, #0
 8009204:	d044      	beq.n	8009290 <_free_r+0x90>
 8009206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800920a:	9001      	str	r0, [sp, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	f1a1 0404 	sub.w	r4, r1, #4
 8009212:	bfb8      	it	lt
 8009214:	18e4      	addlt	r4, r4, r3
 8009216:	f000 f913 	bl	8009440 <__malloc_lock>
 800921a:	4a1e      	ldr	r2, [pc, #120]	; (8009294 <_free_r+0x94>)
 800921c:	9801      	ldr	r0, [sp, #4]
 800921e:	6813      	ldr	r3, [r2, #0]
 8009220:	b933      	cbnz	r3, 8009230 <_free_r+0x30>
 8009222:	6063      	str	r3, [r4, #4]
 8009224:	6014      	str	r4, [r2, #0]
 8009226:	b003      	add	sp, #12
 8009228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800922c:	f000 b90e 	b.w	800944c <__malloc_unlock>
 8009230:	42a3      	cmp	r3, r4
 8009232:	d908      	bls.n	8009246 <_free_r+0x46>
 8009234:	6825      	ldr	r5, [r4, #0]
 8009236:	1961      	adds	r1, r4, r5
 8009238:	428b      	cmp	r3, r1
 800923a:	bf01      	itttt	eq
 800923c:	6819      	ldreq	r1, [r3, #0]
 800923e:	685b      	ldreq	r3, [r3, #4]
 8009240:	1949      	addeq	r1, r1, r5
 8009242:	6021      	streq	r1, [r4, #0]
 8009244:	e7ed      	b.n	8009222 <_free_r+0x22>
 8009246:	461a      	mov	r2, r3
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	b10b      	cbz	r3, 8009250 <_free_r+0x50>
 800924c:	42a3      	cmp	r3, r4
 800924e:	d9fa      	bls.n	8009246 <_free_r+0x46>
 8009250:	6811      	ldr	r1, [r2, #0]
 8009252:	1855      	adds	r5, r2, r1
 8009254:	42a5      	cmp	r5, r4
 8009256:	d10b      	bne.n	8009270 <_free_r+0x70>
 8009258:	6824      	ldr	r4, [r4, #0]
 800925a:	4421      	add	r1, r4
 800925c:	1854      	adds	r4, r2, r1
 800925e:	42a3      	cmp	r3, r4
 8009260:	6011      	str	r1, [r2, #0]
 8009262:	d1e0      	bne.n	8009226 <_free_r+0x26>
 8009264:	681c      	ldr	r4, [r3, #0]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	6053      	str	r3, [r2, #4]
 800926a:	4421      	add	r1, r4
 800926c:	6011      	str	r1, [r2, #0]
 800926e:	e7da      	b.n	8009226 <_free_r+0x26>
 8009270:	d902      	bls.n	8009278 <_free_r+0x78>
 8009272:	230c      	movs	r3, #12
 8009274:	6003      	str	r3, [r0, #0]
 8009276:	e7d6      	b.n	8009226 <_free_r+0x26>
 8009278:	6825      	ldr	r5, [r4, #0]
 800927a:	1961      	adds	r1, r4, r5
 800927c:	428b      	cmp	r3, r1
 800927e:	bf04      	itt	eq
 8009280:	6819      	ldreq	r1, [r3, #0]
 8009282:	685b      	ldreq	r3, [r3, #4]
 8009284:	6063      	str	r3, [r4, #4]
 8009286:	bf04      	itt	eq
 8009288:	1949      	addeq	r1, r1, r5
 800928a:	6021      	streq	r1, [r4, #0]
 800928c:	6054      	str	r4, [r2, #4]
 800928e:	e7ca      	b.n	8009226 <_free_r+0x26>
 8009290:	b003      	add	sp, #12
 8009292:	bd30      	pop	{r4, r5, pc}
 8009294:	20001f98 	.word	0x20001f98

08009298 <sbrk_aligned>:
 8009298:	b570      	push	{r4, r5, r6, lr}
 800929a:	4e0e      	ldr	r6, [pc, #56]	; (80092d4 <sbrk_aligned+0x3c>)
 800929c:	460c      	mov	r4, r1
 800929e:	6831      	ldr	r1, [r6, #0]
 80092a0:	4605      	mov	r5, r0
 80092a2:	b911      	cbnz	r1, 80092aa <sbrk_aligned+0x12>
 80092a4:	f000 f8bc 	bl	8009420 <_sbrk_r>
 80092a8:	6030      	str	r0, [r6, #0]
 80092aa:	4621      	mov	r1, r4
 80092ac:	4628      	mov	r0, r5
 80092ae:	f000 f8b7 	bl	8009420 <_sbrk_r>
 80092b2:	1c43      	adds	r3, r0, #1
 80092b4:	d00a      	beq.n	80092cc <sbrk_aligned+0x34>
 80092b6:	1cc4      	adds	r4, r0, #3
 80092b8:	f024 0403 	bic.w	r4, r4, #3
 80092bc:	42a0      	cmp	r0, r4
 80092be:	d007      	beq.n	80092d0 <sbrk_aligned+0x38>
 80092c0:	1a21      	subs	r1, r4, r0
 80092c2:	4628      	mov	r0, r5
 80092c4:	f000 f8ac 	bl	8009420 <_sbrk_r>
 80092c8:	3001      	adds	r0, #1
 80092ca:	d101      	bne.n	80092d0 <sbrk_aligned+0x38>
 80092cc:	f04f 34ff 	mov.w	r4, #4294967295
 80092d0:	4620      	mov	r0, r4
 80092d2:	bd70      	pop	{r4, r5, r6, pc}
 80092d4:	20001f9c 	.word	0x20001f9c

080092d8 <_malloc_r>:
 80092d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092dc:	1ccd      	adds	r5, r1, #3
 80092de:	f025 0503 	bic.w	r5, r5, #3
 80092e2:	3508      	adds	r5, #8
 80092e4:	2d0c      	cmp	r5, #12
 80092e6:	bf38      	it	cc
 80092e8:	250c      	movcc	r5, #12
 80092ea:	2d00      	cmp	r5, #0
 80092ec:	4607      	mov	r7, r0
 80092ee:	db01      	blt.n	80092f4 <_malloc_r+0x1c>
 80092f0:	42a9      	cmp	r1, r5
 80092f2:	d905      	bls.n	8009300 <_malloc_r+0x28>
 80092f4:	230c      	movs	r3, #12
 80092f6:	603b      	str	r3, [r7, #0]
 80092f8:	2600      	movs	r6, #0
 80092fa:	4630      	mov	r0, r6
 80092fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009300:	4e2e      	ldr	r6, [pc, #184]	; (80093bc <_malloc_r+0xe4>)
 8009302:	f000 f89d 	bl	8009440 <__malloc_lock>
 8009306:	6833      	ldr	r3, [r6, #0]
 8009308:	461c      	mov	r4, r3
 800930a:	bb34      	cbnz	r4, 800935a <_malloc_r+0x82>
 800930c:	4629      	mov	r1, r5
 800930e:	4638      	mov	r0, r7
 8009310:	f7ff ffc2 	bl	8009298 <sbrk_aligned>
 8009314:	1c43      	adds	r3, r0, #1
 8009316:	4604      	mov	r4, r0
 8009318:	d14d      	bne.n	80093b6 <_malloc_r+0xde>
 800931a:	6834      	ldr	r4, [r6, #0]
 800931c:	4626      	mov	r6, r4
 800931e:	2e00      	cmp	r6, #0
 8009320:	d140      	bne.n	80093a4 <_malloc_r+0xcc>
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	4631      	mov	r1, r6
 8009326:	4638      	mov	r0, r7
 8009328:	eb04 0803 	add.w	r8, r4, r3
 800932c:	f000 f878 	bl	8009420 <_sbrk_r>
 8009330:	4580      	cmp	r8, r0
 8009332:	d13a      	bne.n	80093aa <_malloc_r+0xd2>
 8009334:	6821      	ldr	r1, [r4, #0]
 8009336:	3503      	adds	r5, #3
 8009338:	1a6d      	subs	r5, r5, r1
 800933a:	f025 0503 	bic.w	r5, r5, #3
 800933e:	3508      	adds	r5, #8
 8009340:	2d0c      	cmp	r5, #12
 8009342:	bf38      	it	cc
 8009344:	250c      	movcc	r5, #12
 8009346:	4629      	mov	r1, r5
 8009348:	4638      	mov	r0, r7
 800934a:	f7ff ffa5 	bl	8009298 <sbrk_aligned>
 800934e:	3001      	adds	r0, #1
 8009350:	d02b      	beq.n	80093aa <_malloc_r+0xd2>
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	442b      	add	r3, r5
 8009356:	6023      	str	r3, [r4, #0]
 8009358:	e00e      	b.n	8009378 <_malloc_r+0xa0>
 800935a:	6822      	ldr	r2, [r4, #0]
 800935c:	1b52      	subs	r2, r2, r5
 800935e:	d41e      	bmi.n	800939e <_malloc_r+0xc6>
 8009360:	2a0b      	cmp	r2, #11
 8009362:	d916      	bls.n	8009392 <_malloc_r+0xba>
 8009364:	1961      	adds	r1, r4, r5
 8009366:	42a3      	cmp	r3, r4
 8009368:	6025      	str	r5, [r4, #0]
 800936a:	bf18      	it	ne
 800936c:	6059      	strne	r1, [r3, #4]
 800936e:	6863      	ldr	r3, [r4, #4]
 8009370:	bf08      	it	eq
 8009372:	6031      	streq	r1, [r6, #0]
 8009374:	5162      	str	r2, [r4, r5]
 8009376:	604b      	str	r3, [r1, #4]
 8009378:	4638      	mov	r0, r7
 800937a:	f104 060b 	add.w	r6, r4, #11
 800937e:	f000 f865 	bl	800944c <__malloc_unlock>
 8009382:	f026 0607 	bic.w	r6, r6, #7
 8009386:	1d23      	adds	r3, r4, #4
 8009388:	1af2      	subs	r2, r6, r3
 800938a:	d0b6      	beq.n	80092fa <_malloc_r+0x22>
 800938c:	1b9b      	subs	r3, r3, r6
 800938e:	50a3      	str	r3, [r4, r2]
 8009390:	e7b3      	b.n	80092fa <_malloc_r+0x22>
 8009392:	6862      	ldr	r2, [r4, #4]
 8009394:	42a3      	cmp	r3, r4
 8009396:	bf0c      	ite	eq
 8009398:	6032      	streq	r2, [r6, #0]
 800939a:	605a      	strne	r2, [r3, #4]
 800939c:	e7ec      	b.n	8009378 <_malloc_r+0xa0>
 800939e:	4623      	mov	r3, r4
 80093a0:	6864      	ldr	r4, [r4, #4]
 80093a2:	e7b2      	b.n	800930a <_malloc_r+0x32>
 80093a4:	4634      	mov	r4, r6
 80093a6:	6876      	ldr	r6, [r6, #4]
 80093a8:	e7b9      	b.n	800931e <_malloc_r+0x46>
 80093aa:	230c      	movs	r3, #12
 80093ac:	603b      	str	r3, [r7, #0]
 80093ae:	4638      	mov	r0, r7
 80093b0:	f000 f84c 	bl	800944c <__malloc_unlock>
 80093b4:	e7a1      	b.n	80092fa <_malloc_r+0x22>
 80093b6:	6025      	str	r5, [r4, #0]
 80093b8:	e7de      	b.n	8009378 <_malloc_r+0xa0>
 80093ba:	bf00      	nop
 80093bc:	20001f98 	.word	0x20001f98

080093c0 <_realloc_r>:
 80093c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c4:	4680      	mov	r8, r0
 80093c6:	4614      	mov	r4, r2
 80093c8:	460e      	mov	r6, r1
 80093ca:	b921      	cbnz	r1, 80093d6 <_realloc_r+0x16>
 80093cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093d0:	4611      	mov	r1, r2
 80093d2:	f7ff bf81 	b.w	80092d8 <_malloc_r>
 80093d6:	b92a      	cbnz	r2, 80093e4 <_realloc_r+0x24>
 80093d8:	f7ff ff12 	bl	8009200 <_free_r>
 80093dc:	4625      	mov	r5, r4
 80093de:	4628      	mov	r0, r5
 80093e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e4:	f000 f838 	bl	8009458 <_malloc_usable_size_r>
 80093e8:	4284      	cmp	r4, r0
 80093ea:	4607      	mov	r7, r0
 80093ec:	d802      	bhi.n	80093f4 <_realloc_r+0x34>
 80093ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80093f2:	d812      	bhi.n	800941a <_realloc_r+0x5a>
 80093f4:	4621      	mov	r1, r4
 80093f6:	4640      	mov	r0, r8
 80093f8:	f7ff ff6e 	bl	80092d8 <_malloc_r>
 80093fc:	4605      	mov	r5, r0
 80093fe:	2800      	cmp	r0, #0
 8009400:	d0ed      	beq.n	80093de <_realloc_r+0x1e>
 8009402:	42bc      	cmp	r4, r7
 8009404:	4622      	mov	r2, r4
 8009406:	4631      	mov	r1, r6
 8009408:	bf28      	it	cs
 800940a:	463a      	movcs	r2, r7
 800940c:	f7ff fed0 	bl	80091b0 <memcpy>
 8009410:	4631      	mov	r1, r6
 8009412:	4640      	mov	r0, r8
 8009414:	f7ff fef4 	bl	8009200 <_free_r>
 8009418:	e7e1      	b.n	80093de <_realloc_r+0x1e>
 800941a:	4635      	mov	r5, r6
 800941c:	e7df      	b.n	80093de <_realloc_r+0x1e>
	...

08009420 <_sbrk_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	4d06      	ldr	r5, [pc, #24]	; (800943c <_sbrk_r+0x1c>)
 8009424:	2300      	movs	r3, #0
 8009426:	4604      	mov	r4, r0
 8009428:	4608      	mov	r0, r1
 800942a:	602b      	str	r3, [r5, #0]
 800942c:	f7f7 fd0e 	bl	8000e4c <_sbrk>
 8009430:	1c43      	adds	r3, r0, #1
 8009432:	d102      	bne.n	800943a <_sbrk_r+0x1a>
 8009434:	682b      	ldr	r3, [r5, #0]
 8009436:	b103      	cbz	r3, 800943a <_sbrk_r+0x1a>
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	bd38      	pop	{r3, r4, r5, pc}
 800943c:	20001fa0 	.word	0x20001fa0

08009440 <__malloc_lock>:
 8009440:	4801      	ldr	r0, [pc, #4]	; (8009448 <__malloc_lock+0x8>)
 8009442:	f000 b811 	b.w	8009468 <__retarget_lock_acquire_recursive>
 8009446:	bf00      	nop
 8009448:	20001fa4 	.word	0x20001fa4

0800944c <__malloc_unlock>:
 800944c:	4801      	ldr	r0, [pc, #4]	; (8009454 <__malloc_unlock+0x8>)
 800944e:	f000 b80c 	b.w	800946a <__retarget_lock_release_recursive>
 8009452:	bf00      	nop
 8009454:	20001fa4 	.word	0x20001fa4

08009458 <_malloc_usable_size_r>:
 8009458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800945c:	1f18      	subs	r0, r3, #4
 800945e:	2b00      	cmp	r3, #0
 8009460:	bfbc      	itt	lt
 8009462:	580b      	ldrlt	r3, [r1, r0]
 8009464:	18c0      	addlt	r0, r0, r3
 8009466:	4770      	bx	lr

08009468 <__retarget_lock_acquire_recursive>:
 8009468:	4770      	bx	lr

0800946a <__retarget_lock_release_recursive>:
 800946a:	4770      	bx	lr

0800946c <_init>:
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800946e:	bf00      	nop
 8009470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009472:	bc08      	pop	{r3}
 8009474:	469e      	mov	lr, r3
 8009476:	4770      	bx	lr

08009478 <_fini>:
 8009478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800947a:	bf00      	nop
 800947c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800947e:	bc08      	pop	{r3}
 8009480:	469e      	mov	lr, r3
 8009482:	4770      	bx	lr
