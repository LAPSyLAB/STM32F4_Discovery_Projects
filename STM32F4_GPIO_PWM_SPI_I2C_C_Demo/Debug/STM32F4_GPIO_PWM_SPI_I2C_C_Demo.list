
STM32F4_GPIO_PWM_SPI_I2C_C_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b67c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800b80c  0800b80c  0001b80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b914  0800b914  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800b914  0800b914  0001b914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b91c  0800b91c  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b91c  0800b91c  0001b91c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b920  0800b920  0001b920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800b924  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020150  2**0
                  CONTENTS
 10 .bss          00002044  20000150  20000150  00020150  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002194  20002194  00020150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c0f1  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000492f  00000000  00000000  0003c2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018f0  00000000  00000000  00040be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001328  00000000  00000000  000424d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002780b  00000000  00000000  00043800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023677  00000000  00000000  0006b00b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dfd91  00000000  00000000  0008e682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006d14  00000000  00000000  0016e414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  00175128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b7f4 	.word	0x0800b7f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	0800b7f4 	.word	0x0800b7f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000582:	463b      	mov	r3, r7
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800058e:	4b21      	ldr	r3, [pc, #132]	; (8000614 <MX_ADC1_Init+0x98>)
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <MX_ADC1_Init+0x9c>)
 8000592:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000594:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <MX_ADC1_Init+0x98>)
 8000596:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800059a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800059c:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <MX_ADC1_Init+0x98>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005a2:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <MX_ADC1_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a8:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <MX_ADC1_Init+0x98>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ae:	4b19      	ldr	r3, [pc, #100]	; (8000614 <MX_ADC1_Init+0x98>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b6:	4b17      	ldr	r3, [pc, #92]	; (8000614 <MX_ADC1_Init+0x98>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005bc:	4b15      	ldr	r3, [pc, #84]	; (8000614 <MX_ADC1_Init+0x98>)
 80005be:	4a17      	ldr	r2, [pc, #92]	; (800061c <MX_ADC1_Init+0xa0>)
 80005c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <MX_ADC1_Init+0x98>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <MX_ADC1_Init+0x98>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_ADC1_Init+0x98>)
 80005d8:	2201      	movs	r2, #1
 80005da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <MX_ADC1_Init+0x98>)
 80005de:	f001 f859 	bl	8001694 <HAL_ADC_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005e8:	f000 fcca 	bl	8000f80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005f0:	2301      	movs	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	4619      	mov	r1, r3
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <MX_ADC1_Init+0x98>)
 80005fe:	f001 f9f7 	bl	80019f0 <HAL_ADC_ConfigChannel>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000608:	f000 fcba 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	2000016c 	.word	0x2000016c
 8000618:	40012000 	.word	0x40012000
 800061c:	0f000001 	.word	0x0f000001

08000620 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a17      	ldr	r2, [pc, #92]	; (800069c <HAL_ADC_MspInit+0x7c>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d127      	bne.n	8000692 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <HAL_ADC_MspInit+0x80>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800064a:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <HAL_ADC_MspInit+0x80>)
 800064c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000650:	6453      	str	r3, [r2, #68]	; 0x44
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <HAL_ADC_MspInit+0x80>)
 8000654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <HAL_ADC_MspInit+0x80>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <HAL_ADC_MspInit+0x80>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <HAL_ADC_MspInit+0x80>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800067a:	230e      	movs	r3, #14
 800067c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067e:	2303      	movs	r3, #3
 8000680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <HAL_ADC_MspInit+0x84>)
 800068e:	f001 fcdf 	bl	8002050 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000692:	bf00      	nop
 8000694:	3728      	adds	r7, #40	; 0x28
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40012000 	.word	0x40012000
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020000 	.word	0x40020000

080006a8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	; 0x30
 80006ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
 80006c2:	4b71      	ldr	r3, [pc, #452]	; (8000888 <MX_GPIO_Init+0x1e0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a70      	ldr	r2, [pc, #448]	; (8000888 <MX_GPIO_Init+0x1e0>)
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b6e      	ldr	r3, [pc, #440]	; (8000888 <MX_GPIO_Init+0x1e0>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0310 	and.w	r3, r3, #16
 80006d6:	61bb      	str	r3, [r7, #24]
 80006d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	4b6a      	ldr	r3, [pc, #424]	; (8000888 <MX_GPIO_Init+0x1e0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a69      	ldr	r2, [pc, #420]	; (8000888 <MX_GPIO_Init+0x1e0>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b67      	ldr	r3, [pc, #412]	; (8000888 <MX_GPIO_Init+0x1e0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b63      	ldr	r3, [pc, #396]	; (8000888 <MX_GPIO_Init+0x1e0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a62      	ldr	r2, [pc, #392]	; (8000888 <MX_GPIO_Init+0x1e0>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b60      	ldr	r3, [pc, #384]	; (8000888 <MX_GPIO_Init+0x1e0>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b5c      	ldr	r3, [pc, #368]	; (8000888 <MX_GPIO_Init+0x1e0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a5b      	ldr	r2, [pc, #364]	; (8000888 <MX_GPIO_Init+0x1e0>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b59      	ldr	r3, [pc, #356]	; (8000888 <MX_GPIO_Init+0x1e0>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b55      	ldr	r3, [pc, #340]	; (8000888 <MX_GPIO_Init+0x1e0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a54      	ldr	r2, [pc, #336]	; (8000888 <MX_GPIO_Init+0x1e0>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b52      	ldr	r3, [pc, #328]	; (8000888 <MX_GPIO_Init+0x1e0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b4e      	ldr	r3, [pc, #312]	; (8000888 <MX_GPIO_Init+0x1e0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a4d      	ldr	r2, [pc, #308]	; (8000888 <MX_GPIO_Init+0x1e0>)
 8000754:	f043 0308 	orr.w	r3, r3, #8
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b4b      	ldr	r3, [pc, #300]	; (8000888 <MX_GPIO_Init+0x1e0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0308 	and.w	r3, r3, #8
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2108      	movs	r1, #8
 800076a:	4848      	ldr	r0, [pc, #288]	; (800088c <MX_GPIO_Init+0x1e4>)
 800076c:	f001 fe24 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2101      	movs	r1, #1
 8000774:	4846      	ldr	r0, [pc, #280]	; (8000890 <MX_GPIO_Init+0x1e8>)
 8000776:	f001 fe1f 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2110      	movs	r1, #16
 800077e:	4845      	ldr	r0, [pc, #276]	; (8000894 <MX_GPIO_Init+0x1ec>)
 8000780:	f001 fe1a 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000784:	2308      	movs	r3, #8
 8000786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000788:	2301      	movs	r3, #1
 800078a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	2300      	movs	r3, #0
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4619      	mov	r1, r3
 800079a:	483c      	ldr	r0, [pc, #240]	; (800088c <MX_GPIO_Init+0x1e4>)
 800079c:	f001 fc58 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007a0:	2301      	movs	r3, #1
 80007a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4619      	mov	r1, r3
 80007b6:	4836      	ldr	r0, [pc, #216]	; (8000890 <MX_GPIO_Init+0x1e8>)
 80007b8:	f001 fc4a 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007bc:	2308      	movs	r3, #8
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007cc:	2305      	movs	r3, #5
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	482e      	ldr	r0, [pc, #184]	; (8000890 <MX_GPIO_Init+0x1e8>)
 80007d8:	f001 fc3a 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007dc:	2301      	movs	r3, #1
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007e0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	4829      	ldr	r0, [pc, #164]	; (8000898 <MX_GPIO_Init+0x1f0>)
 80007f2:	f001 fc2d 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007f6:	2304      	movs	r3, #4
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	4824      	ldr	r0, [pc, #144]	; (800089c <MX_GPIO_Init+0x1f4>)
 800080a:	f001 fc21 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800080e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000820:	2305      	movs	r3, #5
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	481c      	ldr	r0, [pc, #112]	; (800089c <MX_GPIO_Init+0x1f4>)
 800082c:	f001 fc10 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8000830:	2310      	movs	r3, #16
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000834:	2301      	movs	r3, #1
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	4813      	ldr	r0, [pc, #76]	; (8000894 <MX_GPIO_Init+0x1ec>)
 8000848:	f001 fc02 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800084c:	2320      	movs	r3, #32
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	480d      	ldr	r0, [pc, #52]	; (8000894 <MX_GPIO_Init+0x1ec>)
 8000860:	f001 fbf6 	bl	8002050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000864:	2302      	movs	r3, #2
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000868:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_GPIO_Init+0x1e4>)
 800087a:	f001 fbe9 	bl	8002050 <HAL_GPIO_Init>

}
 800087e:	bf00      	nop
 8000880:	3730      	adds	r7, #48	; 0x30
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40021000 	.word	0x40021000
 8000890:	40020800 	.word	0x40020800
 8000894:	40020c00 	.word	0x40020c00
 8000898:	40020000 	.word	0x40020000
 800089c:	40020400 	.word	0x40020400

080008a0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008a6:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <MX_I2C1_Init+0x54>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008ac:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <MX_I2C1_Init+0x58>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008de:	f001 fd85 	bl	80023ec <HAL_I2C_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008e8:	f000 fb4a 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200001b4 	.word	0x200001b4
 80008f4:	40005400 	.word	0x40005400
 80008f8:	000186a0 	.word	0x000186a0

080008fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a19      	ldr	r2, [pc, #100]	; (8000980 <HAL_I2C_MspInit+0x84>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d12c      	bne.n	8000978 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <HAL_I2C_MspInit+0x88>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a17      	ldr	r2, [pc, #92]	; (8000984 <HAL_I2C_MspInit+0x88>)
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_I2C_MspInit+0x88>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800093a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800093e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000940:	2312      	movs	r3, #18
 8000942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000944:	2301      	movs	r3, #1
 8000946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800094c:	2304      	movs	r3, #4
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	480c      	ldr	r0, [pc, #48]	; (8000988 <HAL_I2C_MspInit+0x8c>)
 8000958:	f001 fb7a 	bl	8002050 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_I2C_MspInit+0x88>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a07      	ldr	r2, [pc, #28]	; (8000984 <HAL_I2C_MspInit+0x88>)
 8000966:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800096a:	6413      	str	r3, [r2, #64]	; 0x40
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_I2C_MspInit+0x88>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000978:	bf00      	nop
 800097a:	3728      	adds	r7, #40	; 0x28
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40005400 	.word	0x40005400
 8000984:	40023800 	.word	0x40023800
 8000988:	40020400 	.word	0x40020400

0800098c <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_I2S3_Init+0x54>)
 8000992:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <MX_I2S3_Init+0x58>)
 8000994:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_I2S3_Init+0x54>)
 8000998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800099c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_I2S3_Init+0x54>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_I2S3_Init+0x54>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <MX_I2S3_Init+0x54>)
 80009ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_I2S3_Init+0x54>)
 80009b4:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <MX_I2S3_Init+0x5c>)
 80009b6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_I2S3_Init+0x54>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_I2S3_Init+0x54>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_I2S3_Init+0x54>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_I2S3_Init+0x54>)
 80009cc:	f002 fb5a 	bl	8003084 <HAL_I2S_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80009d6:	f000 fad3 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000208 	.word	0x20000208
 80009e4:	40003c00 	.word	0x40003c00
 80009e8:	00017700 	.word	0x00017700

080009ec <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08e      	sub	sp, #56	; 0x38
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a31      	ldr	r2, [pc, #196]	; (8000adc <HAL_I2S_MspInit+0xf0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d15a      	bne.n	8000ad2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a20:	23c0      	movs	r3, #192	; 0xc0
 8000a22:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f004 fe9d 	bl	800576c <HAL_RCCEx_PeriphCLKConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a38:	f000 faa2 	bl	8000f80 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	4b27      	ldr	r3, [pc, #156]	; (8000ae0 <HAL_I2S_MspInit+0xf4>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	4a26      	ldr	r2, [pc, #152]	; (8000ae0 <HAL_I2S_MspInit+0xf4>)
 8000a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4c:	4b24      	ldr	r3, [pc, #144]	; (8000ae0 <HAL_I2S_MspInit+0xf4>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <HAL_I2S_MspInit+0xf4>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	4a1f      	ldr	r2, [pc, #124]	; (8000ae0 <HAL_I2S_MspInit+0xf4>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6313      	str	r3, [r2, #48]	; 0x30
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <HAL_I2S_MspInit+0xf4>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <HAL_I2S_MspInit+0xf4>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7c:	4a18      	ldr	r2, [pc, #96]	; (8000ae0 <HAL_I2S_MspInit+0xf4>)
 8000a7e:	f043 0304 	orr.w	r3, r3, #4
 8000a82:	6313      	str	r3, [r2, #48]	; 0x30
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <HAL_I2S_MspInit+0xf4>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	60bb      	str	r3, [r7, #8]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a90:	2310      	movs	r3, #16
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aa0:	2306      	movs	r3, #6
 8000aa2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480e      	ldr	r0, [pc, #56]	; (8000ae4 <HAL_I2S_MspInit+0xf8>)
 8000aac:	f001 fad0 	bl	8002050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ab0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ac2:	2306      	movs	r3, #6
 8000ac4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aca:	4619      	mov	r1, r3
 8000acc:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <HAL_I2S_MspInit+0xfc>)
 8000ace:	f001 fabf 	bl	8002050 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	3738      	adds	r7, #56	; 0x38
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40003c00 	.word	0x40003c00
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	40020800 	.word	0x40020800

08000aec <setPWM>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 8000aec:	b084      	sub	sp, #16
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b088      	sub	sp, #32
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000af8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 8000afc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000afe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000b02:	f005 fbfb 	bl	80062fc <HAL_TIM_PWM_Stop>
	 TIM_OC_InitTypeDef sConfigOC;
	 timer.Init.Period = period; // set the period duration
 8000b06:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
	 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 8000b0c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000b10:	f005 fad3 	bl	80060ba <HAL_TIM_PWM_Init>
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b14:	2360      	movs	r3, #96	; 0x60
 8000b16:	607b      	str	r3, [r7, #4]
	 sConfigOC.Pulse = pulse; // set the pulse duration
 8000b18:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000b1c:	60bb      	str	r3, [r7, #8]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
	 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000b30:	f005 fc54 	bl	80063dc <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 8000b34:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000b36:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000b3a:	f005 fb17 	bl	800616c <HAL_TIM_PWM_Start>
}
 8000b3e:	bf00      	nop
 8000b40:	3720      	adds	r7, #32
 8000b42:	46bd      	mov	sp, r7
 8000b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4e:	b097      	sub	sp, #92	; 0x5c
 8000b50:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b52:	f000 fd09 	bl	8001568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b56:	f000 f9a9 	bl	8000eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5a:	f7ff fda5 	bl	80006a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b5e:	f7ff fe9f 	bl	80008a0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b62:	f7ff ff13 	bl	800098c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b66:	f000 fa11 	bl	8000f8c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000b6a:	f009 fc63 	bl	800a434 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000b6e:	f000 fba3 	bl	80012b8 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000b72:	f000 fb2d 	bl	80011d0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000b76:	f7ff fd01 	bl	800057c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	48aa      	ldr	r0, [pc, #680]	; (8000e28 <main+0x2dc>)
 8000b7e:	f005 faf5 	bl	800616c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000b82:	2104      	movs	r1, #4
 8000b84:	48a8      	ldr	r0, [pc, #672]	; (8000e28 <main+0x2dc>)
 8000b86:	f005 faf1 	bl	800616c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000b8a:	2108      	movs	r1, #8
 8000b8c:	48a6      	ldr	r0, [pc, #664]	; (8000e28 <main+0x2dc>)
 8000b8e:	f005 faed 	bl	800616c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000b92:	210c      	movs	r1, #12
 8000b94:	48a4      	ldr	r0, [pc, #656]	; (8000e28 <main+0x2dc>)
 8000b96:	f005 fae9 	bl	800616c <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	48a3      	ldr	r0, [pc, #652]	; (8000e2c <main+0x2e0>)
 8000b9e:	f005 fae5 	bl	800616c <HAL_TIM_PWM_Start>


  // Config accelerometer
  // Read WHOAMI register
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	48a2      	ldr	r0, [pc, #648]	; (8000e30 <main+0x2e4>)
 8000ba8:	f001 fc06 	bl	80023b8 <HAL_GPIO_WritePin>
  outdata[0] = 0x0f | 0x80 ;  // read whoami
 8000bac:	4ba1      	ldr	r3, [pc, #644]	; (8000e34 <main+0x2e8>)
 8000bae:	228f      	movs	r2, #143	; 0x8f
 8000bb0:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	2302      	movs	r3, #2
 8000bba:	4a9f      	ldr	r2, [pc, #636]	; (8000e38 <main+0x2ec>)
 8000bbc:	499d      	ldr	r1, [pc, #628]	; (8000e34 <main+0x2e8>)
 8000bbe:	489f      	ldr	r0, [pc, #636]	; (8000e3c <main+0x2f0>)
 8000bc0:	f004 ff9f 	bl	8005b02 <HAL_SPI_TransmitReceive>
  lis_id = indata[1];
 8000bc4:	4b9c      	ldr	r3, [pc, #624]	; (8000e38 <main+0x2ec>)
 8000bc6:	785a      	ldrb	r2, [r3, #1]
 8000bc8:	4b9d      	ldr	r3, [pc, #628]	; (8000e40 <main+0x2f4>)
 8000bca:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2108      	movs	r1, #8
 8000bd0:	4897      	ldr	r0, [pc, #604]	; (8000e30 <main+0x2e4>)
 8000bd2:	f001 fbf1 	bl	80023b8 <HAL_GPIO_WritePin>

  HAL_Delay(500);
 8000bd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bda:	f000 fd37 	bl	800164c <HAL_Delay>

  // Set CTRL register 0x47 -> [0x20]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2108      	movs	r1, #8
 8000be2:	4893      	ldr	r0, [pc, #588]	; (8000e30 <main+0x2e4>)
 8000be4:	f001 fbe8 	bl	80023b8 <HAL_GPIO_WritePin>
  outdata[0] = 0x20 ;  // switch on axes
 8000be8:	4b92      	ldr	r3, [pc, #584]	; (8000e34 <main+0x2e8>)
 8000bea:	2220      	movs	r2, #32
 8000bec:	701a      	strb	r2, [r3, #0]
  outdata[1] = 0x47 ;
 8000bee:	4b91      	ldr	r3, [pc, #580]	; (8000e34 <main+0x2e8>)
 8000bf0:	2247      	movs	r2, #71	; 0x47
 8000bf2:	705a      	strb	r2, [r3, #1]
  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf8:	9300      	str	r3, [sp, #0]
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	4a8e      	ldr	r2, [pc, #568]	; (8000e38 <main+0x2ec>)
 8000bfe:	498d      	ldr	r1, [pc, #564]	; (8000e34 <main+0x2e8>)
 8000c00:	488e      	ldr	r0, [pc, #568]	; (8000e3c <main+0x2f0>)
 8000c02:	f004 ff7e 	bl	8005b02 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	2108      	movs	r1, #8
 8000c0a:	4889      	ldr	r0, [pc, #548]	; (8000e30 <main+0x2e4>)
 8000c0c:	f001 fbd4 	bl	80023b8 <HAL_GPIO_WritePin>

  HAL_Delay(500);
 8000c10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c14:	f000 fd1a 	bl	800164c <HAL_Delay>
  outdata[1] = 0x00 ;
 8000c18:	4b86      	ldr	r3, [pc, #536]	; (8000e34 <main+0x2e8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	705a      	strb	r2, [r3, #1]

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4,GPIO_PIN_SET);   // Set Reset line to 1 (switch device on)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	2110      	movs	r1, #16
 8000c22:	4888      	ldr	r0, [pc, #544]	; (8000e44 <main+0x2f8>)
 8000c24:	f001 fbc8 	bl	80023b8 <HAL_GPIO_WritePin>

  HAL_Delay(1000);   // recomended by datasheet
 8000c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c2c:	f000 fd0e 	bl	800164c <HAL_Delay>

  HAL_ADC_Start(&hadc1);
 8000c30:	4885      	ldr	r0, [pc, #532]	; (8000e48 <main+0x2fc>)
 8000c32:	f000 fd73 	bl	800171c <HAL_ADC_Start>

  TickLast = HAL_GetTick();
 8000c36:	f000 fcfd 	bl	8001634 <HAL_GetTick>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a83      	ldr	r2, [pc, #524]	; (8000e4c <main+0x300>)
 8000c3e:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    htim4.Instance->CCR1 = Duty;
 8000c40:	4b83      	ldr	r3, [pc, #524]	; (8000e50 <main+0x304>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b78      	ldr	r3, [pc, #480]	; (8000e28 <main+0x2dc>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	635a      	str	r2, [r3, #52]	; 0x34
	    htim4.Instance->CCR2 = 100-Duty;
 8000c4a:	4b81      	ldr	r3, [pc, #516]	; (8000e50 <main+0x304>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000c52:	4b75      	ldr	r3, [pc, #468]	; (8000e28 <main+0x2dc>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	639a      	str	r2, [r3, #56]	; 0x38
	    htim4.Instance->CCR3 = Duty;
 8000c58:	4b7d      	ldr	r3, [pc, #500]	; (8000e50 <main+0x304>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b72      	ldr	r3, [pc, #456]	; (8000e28 <main+0x2dc>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	63da      	str	r2, [r3, #60]	; 0x3c
	    htim4.Instance->CCR4 = 100-Duty;
 8000c62:	4b7b      	ldr	r3, [pc, #492]	; (8000e50 <main+0x304>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000c6a:	4b6f      	ldr	r3, [pc, #444]	; (8000e28 <main+0x2dc>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	641a      	str	r2, [r3, #64]	; 0x40

	    KeyState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000c70:	2101      	movs	r1, #1
 8000c72:	4878      	ldr	r0, [pc, #480]	; (8000e54 <main+0x308>)
 8000c74:	f001 fb88 	bl	8002388 <HAL_GPIO_ReadPin>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b76      	ldr	r3, [pc, #472]	; (8000e58 <main+0x30c>)
 8000c7e:	601a      	str	r2, [r3, #0]


	    // Read x,y,z axes
	      outdata[0] = 0x29 | 0x80  ;  // read x
 8000c80:	4b6c      	ldr	r3, [pc, #432]	; (8000e34 <main+0x2e8>)
 8000c82:	22a9      	movs	r2, #169	; 0xa9
 8000c84:	701a      	strb	r2, [r3, #0]
	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2108      	movs	r1, #8
 8000c8a:	4869      	ldr	r0, [pc, #420]	; (8000e30 <main+0x2e4>)
 8000c8c:	f001 fb94 	bl	80023b8 <HAL_GPIO_WritePin>
	      HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000c90:	f04f 33ff 	mov.w	r3, #4294967295
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	2302      	movs	r3, #2
 8000c98:	4a67      	ldr	r2, [pc, #412]	; (8000e38 <main+0x2ec>)
 8000c9a:	4966      	ldr	r1, [pc, #408]	; (8000e34 <main+0x2e8>)
 8000c9c:	4867      	ldr	r0, [pc, #412]	; (8000e3c <main+0x2f0>)
 8000c9e:	f004 ff30 	bl	8005b02 <HAL_SPI_TransmitReceive>
	      AccelX = indata[1];
 8000ca2:	4b65      	ldr	r3, [pc, #404]	; (8000e38 <main+0x2ec>)
 8000ca4:	785b      	ldrb	r3, [r3, #1]
 8000ca6:	b25a      	sxtb	r2, r3
 8000ca8:	4b6c      	ldr	r3, [pc, #432]	; (8000e5c <main+0x310>)
 8000caa:	701a      	strb	r2, [r3, #0]

	      outdata[0] = 0x2B | 0x80  ;  // read y
 8000cac:	4b61      	ldr	r3, [pc, #388]	; (8000e34 <main+0x2e8>)
 8000cae:	22ab      	movs	r2, #171	; 0xab
 8000cb0:	701a      	strb	r2, [r3, #0]
	      HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	2302      	movs	r3, #2
 8000cba:	4a5f      	ldr	r2, [pc, #380]	; (8000e38 <main+0x2ec>)
 8000cbc:	495d      	ldr	r1, [pc, #372]	; (8000e34 <main+0x2e8>)
 8000cbe:	485f      	ldr	r0, [pc, #380]	; (8000e3c <main+0x2f0>)
 8000cc0:	f004 ff1f 	bl	8005b02 <HAL_SPI_TransmitReceive>
	      AccelY = indata[1];
 8000cc4:	4b5c      	ldr	r3, [pc, #368]	; (8000e38 <main+0x2ec>)
 8000cc6:	785b      	ldrb	r3, [r3, #1]
 8000cc8:	b25a      	sxtb	r2, r3
 8000cca:	4b65      	ldr	r3, [pc, #404]	; (8000e60 <main+0x314>)
 8000ccc:	701a      	strb	r2, [r3, #0]

	      outdata[0] = 0x2D | 0x80  ;  // read z
 8000cce:	4b59      	ldr	r3, [pc, #356]	; (8000e34 <main+0x2e8>)
 8000cd0:	22ad      	movs	r2, #173	; 0xad
 8000cd2:	701a      	strb	r2, [r3, #0]
	      HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2302      	movs	r3, #2
 8000cdc:	4a56      	ldr	r2, [pc, #344]	; (8000e38 <main+0x2ec>)
 8000cde:	4955      	ldr	r1, [pc, #340]	; (8000e34 <main+0x2e8>)
 8000ce0:	4856      	ldr	r0, [pc, #344]	; (8000e3c <main+0x2f0>)
 8000ce2:	f004 ff0e 	bl	8005b02 <HAL_SPI_TransmitReceive>
	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	2108      	movs	r1, #8
 8000cea:	4851      	ldr	r0, [pc, #324]	; (8000e30 <main+0x2e4>)
 8000cec:	f001 fb64 	bl	80023b8 <HAL_GPIO_WritePin>
	      AccelZ = indata[1];
 8000cf0:	4b51      	ldr	r3, [pc, #324]	; (8000e38 <main+0x2ec>)
 8000cf2:	785b      	ldrb	r3, [r3, #1]
 8000cf4:	b25a      	sxtb	r2, r3
 8000cf6:	4b5b      	ldr	r3, [pc, #364]	; (8000e64 <main+0x318>)
 8000cf8:	701a      	strb	r2, [r3, #0]


	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000cfa:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfe:	4852      	ldr	r0, [pc, #328]	; (8000e48 <main+0x2fc>)
 8000d00:	f000 fdde 	bl	80018c0 <HAL_ADC_PollForConversion>
	      AnalogValue1 = HAL_ADC_GetValue(&hadc1);
 8000d04:	4850      	ldr	r0, [pc, #320]	; (8000e48 <main+0x2fc>)
 8000d06:	f000 fe66 	bl	80019d6 <HAL_ADC_GetValue>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b56      	ldr	r3, [pc, #344]	; (8000e68 <main+0x31c>)
 8000d10:	601a      	str	r2, [r3, #0]
	      HAL_ADC_Start(&hadc1);
 8000d12:	484d      	ldr	r0, [pc, #308]	; (8000e48 <main+0x2fc>)
 8000d14:	f000 fd02 	bl	800171c <HAL_ADC_Start>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	      if ( (HAL_GetTick() - TickLast) > 1000) {   // Do this each second !
 8000d18:	f000 fc8c 	bl	8001634 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	4b4b      	ldr	r3, [pc, #300]	; (8000e4c <main+0x300>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d28:	d98a      	bls.n	8000c40 <main+0xf4>
	    	  Duty = (Duty + 10) ; // Add 10 if delay 1 sec, add 1 on shorter delay...
 8000d2a:	4b49      	ldr	r3, [pc, #292]	; (8000e50 <main+0x304>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	330a      	adds	r3, #10
 8000d30:	4a47      	ldr	r2, [pc, #284]	; (8000e50 <main+0x304>)
 8000d32:	6013      	str	r3, [r2, #0]
	    	  if (Duty > 100 )
 8000d34:	4b46      	ldr	r3, [pc, #280]	; (8000e50 <main+0x304>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b64      	cmp	r3, #100	; 0x64
 8000d3a:	dd02      	ble.n	8000d42 <main+0x1f6>
	    		  Duty = 1;
 8000d3c:	4b44      	ldr	r3, [pc, #272]	; (8000e50 <main+0x304>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	601a      	str	r2, [r3, #0]

		      // From Device with address=0x94, Read register with address 0x01 and put value in ChipID
		      // DevAddress_0x94, tMemAddress=0x01, MemAddSize=8b, *pData,Size, Timeout);
		      retval = HAL_I2C_Mem_Read(&hi2c1, 0x94, 0x01, I2C_MEMADD_SIZE_8BIT, &ChipID, 1, 1000);
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	9302      	str	r3, [sp, #8]
 8000d48:	2301      	movs	r3, #1
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	4b47      	ldr	r3, [pc, #284]	; (8000e6c <main+0x320>)
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2301      	movs	r3, #1
 8000d52:	2201      	movs	r2, #1
 8000d54:	2194      	movs	r1, #148	; 0x94
 8000d56:	4846      	ldr	r0, [pc, #280]	; (8000e70 <main+0x324>)
 8000d58:	f001 fc8c 	bl	8002674 <HAL_I2C_Mem_Read>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b44      	ldr	r3, [pc, #272]	; (8000e74 <main+0x328>)
 8000d62:	701a      	strb	r2, [r3, #0]

		      // Change Period and set 50% duty for buzzer PWM output
			  NotePeriod = (int)(1000000/NoteFreq);  //Already prescaled to 1 MHz
 8000d64:	4b44      	ldr	r3, [pc, #272]	; (8000e78 <main+0x32c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a44      	ldr	r2, [pc, #272]	; (8000e7c <main+0x330>)
 8000d6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d6e:	4a44      	ldr	r2, [pc, #272]	; (8000e80 <main+0x334>)
 8000d70:	6013      	str	r3, [r2, #0]
			  setPWM(htim2, TIM_CHANNEL_1, NotePeriod, NotePeriod/2);
 8000d72:	4b43      	ldr	r3, [pc, #268]	; (8000e80 <main+0x334>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	4b41      	ldr	r3, [pc, #260]	; (8000e80 <main+0x334>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	0fd9      	lsrs	r1, r3, #31
 8000d7e:	440b      	add	r3, r1
 8000d80:	105b      	asrs	r3, r3, #1
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	4e29      	ldr	r6, [pc, #164]	; (8000e2c <main+0x2e0>)
 8000d86:	9310      	str	r3, [sp, #64]	; 0x40
 8000d88:	920f      	str	r2, [sp, #60]	; 0x3c
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	930e      	str	r3, [sp, #56]	; 0x38
 8000d8e:	466d      	mov	r5, sp
 8000d90:	f106 0410 	add.w	r4, r6, #16
 8000d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000da0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000da4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000da8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000dac:	f7ff fe9e 	bl	8000aec <setPWM>

		      // Print values on USB VComPort
		      snprintf(SendBuffer,BUFSIZE,"Hello World [%d]: Key:%d Duty:%d PWM-Freq:%d PWM-Period:%d Accel[ID:%02x] X:%04d Y:%d Z:%04d ChipID:%02x ADC1:%d\r\n",Counter++,KeyState,Duty,NoteFreq,NotePeriod,lis_id,AccelX,AccelY,AccelZ,ChipID,AnalogValue1);
 8000db0:	4b34      	ldr	r3, [pc, #208]	; (8000e84 <main+0x338>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	4933      	ldr	r1, [pc, #204]	; (8000e84 <main+0x338>)
 8000db8:	600a      	str	r2, [r1, #0]
 8000dba:	4a27      	ldr	r2, [pc, #156]	; (8000e58 <main+0x30c>)
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	4924      	ldr	r1, [pc, #144]	; (8000e50 <main+0x304>)
 8000dc0:	6809      	ldr	r1, [r1, #0]
 8000dc2:	482d      	ldr	r0, [pc, #180]	; (8000e78 <main+0x32c>)
 8000dc4:	6800      	ldr	r0, [r0, #0]
 8000dc6:	4c2e      	ldr	r4, [pc, #184]	; (8000e80 <main+0x334>)
 8000dc8:	6824      	ldr	r4, [r4, #0]
 8000dca:	4d1d      	ldr	r5, [pc, #116]	; (8000e40 <main+0x2f4>)
 8000dcc:	782d      	ldrb	r5, [r5, #0]
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4d22      	ldr	r5, [pc, #136]	; (8000e5c <main+0x310>)
 8000dd2:	f995 5000 	ldrsb.w	r5, [r5]
 8000dd6:	60fd      	str	r5, [r7, #12]
 8000dd8:	4d21      	ldr	r5, [pc, #132]	; (8000e60 <main+0x314>)
 8000dda:	f995 5000 	ldrsb.w	r5, [r5]
 8000dde:	60bd      	str	r5, [r7, #8]
 8000de0:	4d20      	ldr	r5, [pc, #128]	; (8000e64 <main+0x318>)
 8000de2:	f995 5000 	ldrsb.w	r5, [r5]
 8000de6:	607d      	str	r5, [r7, #4]
 8000de8:	4d20      	ldr	r5, [pc, #128]	; (8000e6c <main+0x320>)
 8000dea:	782d      	ldrb	r5, [r5, #0]
 8000dec:	603d      	str	r5, [r7, #0]
 8000dee:	4d1e      	ldr	r5, [pc, #120]	; (8000e68 <main+0x31c>)
 8000df0:	682d      	ldr	r5, [r5, #0]
 8000df2:	9509      	str	r5, [sp, #36]	; 0x24
 8000df4:	683d      	ldr	r5, [r7, #0]
 8000df6:	9508      	str	r5, [sp, #32]
 8000df8:	687d      	ldr	r5, [r7, #4]
 8000dfa:	9507      	str	r5, [sp, #28]
 8000dfc:	68bd      	ldr	r5, [r7, #8]
 8000dfe:	9506      	str	r5, [sp, #24]
 8000e00:	68fd      	ldr	r5, [r7, #12]
 8000e02:	9505      	str	r5, [sp, #20]
 8000e04:	9604      	str	r6, [sp, #16]
 8000e06:	9403      	str	r4, [sp, #12]
 8000e08:	9002      	str	r0, [sp, #8]
 8000e0a:	9101      	str	r1, [sp, #4]
 8000e0c:	9200      	str	r2, [sp, #0]
 8000e0e:	4a1e      	ldr	r2, [pc, #120]	; (8000e88 <main+0x33c>)
 8000e10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e14:	481d      	ldr	r0, [pc, #116]	; (8000e8c <main+0x340>)
 8000e16:	f00a f835 	bl	800ae84 <sniprintf>
	    	  CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
 8000e1a:	481c      	ldr	r0, [pc, #112]	; (8000e8c <main+0x340>)
 8000e1c:	f7ff f9d8 	bl	80001d0 <strlen>
 8000e20:	4603      	mov	r3, r0
 8000e22:	4619      	mov	r1, r3
 8000e24:	e034      	b.n	8000e90 <main+0x344>
 8000e26:	bf00      	nop
 8000e28:	2000041c 	.word	0x2000041c
 8000e2c:	200003d4 	.word	0x200003d4
 8000e30:	40021000 	.word	0x40021000
 8000e34:	2000036c 	.word	0x2000036c
 8000e38:	20000368 	.word	0x20000368
 8000e3c:	20000378 	.word	0x20000378
 8000e40:	2000036e 	.word	0x2000036e
 8000e44:	40020c00 	.word	0x40020c00
 8000e48:	2000016c 	.word	0x2000016c
 8000e4c:	20000364 	.word	0x20000364
 8000e50:	20000358 	.word	0x20000358
 8000e54:	40020000 	.word	0x40020000
 8000e58:	20000354 	.word	0x20000354
 8000e5c:	2000036f 	.word	0x2000036f
 8000e60:	20000370 	.word	0x20000370
 8000e64:	20000371 	.word	0x20000371
 8000e68:	20000374 	.word	0x20000374
 8000e6c:	20000360 	.word	0x20000360
 8000e70:	200001b4 	.word	0x200001b4
 8000e74:	20000372 	.word	0x20000372
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	000f4240 	.word	0x000f4240
 8000e80:	2000035c 	.word	0x2000035c
 8000e84:	20000350 	.word	0x20000350
 8000e88:	0800b80c 	.word	0x0800b80c
 8000e8c:	20000250 	.word	0x20000250
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <main+0x358>)
 8000e92:	f009 fb8d 	bl	800a5b0 <CDC_Transmit_FS>

	    	  TickLast = HAL_GetTick();  // Reset counter
 8000e96:	f000 fbcd 	bl	8001634 <HAL_GetTick>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4a02      	ldr	r2, [pc, #8]	; (8000ea8 <main+0x35c>)
 8000e9e:	6013      	str	r3, [r2, #0]
	    htim4.Instance->CCR1 = Duty;
 8000ea0:	e6ce      	b.n	8000c40 <main+0xf4>
 8000ea2:	bf00      	nop
 8000ea4:	20000250 	.word	0x20000250
 8000ea8:	20000364 	.word	0x20000364

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b094      	sub	sp, #80	; 0x50
 8000eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb2:	f107 0320 	add.w	r3, r7, #32
 8000eb6:	2230      	movs	r2, #48	; 0x30
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f00a f816 	bl	800aeec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <SystemClock_Config+0xcc>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	4a27      	ldr	r2, [pc, #156]	; (8000f78 <SystemClock_Config+0xcc>)
 8000eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ede:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee0:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <SystemClock_Config+0xcc>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <SystemClock_Config+0xd0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a21      	ldr	r2, [pc, #132]	; (8000f7c <SystemClock_Config+0xd0>)
 8000ef6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <SystemClock_Config+0xd0>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f04:	607b      	str	r3, [r7, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f12:	2302      	movs	r3, #2
 8000f14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f20:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f26:	2302      	movs	r3, #2
 8000f28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2e:	f107 0320 	add.w	r3, r7, #32
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 ff96 	bl	8004e64 <HAL_RCC_OscConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f3e:	f000 f81f 	bl	8000f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f42:	230f      	movs	r3, #15
 8000f44:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f46:	2302      	movs	r3, #2
 8000f48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f4e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f58:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	2105      	movs	r1, #5
 8000f60:	4618      	mov	r0, r3
 8000f62:	f004 f9f7 	bl	8005354 <HAL_RCC_ClockConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f6c:	f000 f808 	bl	8000f80 <Error_Handler>
  }
}
 8000f70:	bf00      	nop
 8000f72:	3750      	adds	r7, #80	; 0x50
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40007000 	.word	0x40007000

08000f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f84:	b672      	cpsid	i
}
 8000f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <Error_Handler+0x8>
	...

08000f8c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <MX_SPI1_Init+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000f98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fc0:	2238      	movs	r2, #56	; 0x38
 8000fc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fd8:	220a      	movs	r2, #10
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <MX_SPI1_Init+0x64>)
 8000fde:	f004 fd07 	bl	80059f0 <HAL_SPI_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fe8:	f7ff ffca 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000378 	.word	0x20000378
 8000ff4:	40013000 	.word	0x40013000

08000ff8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a19      	ldr	r2, [pc, #100]	; (800107c <HAL_SPI_MspInit+0x84>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d12b      	bne.n	8001072 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <HAL_SPI_MspInit+0x88>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a17      	ldr	r2, [pc, #92]	; (8001080 <HAL_SPI_MspInit+0x88>)
 8001024:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_SPI_MspInit+0x88>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_SPI_MspInit+0x88>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a10      	ldr	r2, [pc, #64]	; (8001080 <HAL_SPI_MspInit+0x88>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_SPI_MspInit+0x88>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001052:	23e0      	movs	r3, #224	; 0xe0
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001062:	2305      	movs	r3, #5
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <HAL_SPI_MspInit+0x8c>)
 800106e:	f000 ffef 	bl	8002050 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	; 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40013000 	.word	0x40013000
 8001080:	40023800 	.word	0x40023800
 8001084:	40020000 	.word	0x40020000

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <HAL_MspInit+0x4c>)
 8001098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_MspInit+0x4c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_MspInit+0x4c>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_MspInit+0x4c>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_MspInit+0x4c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010c6:	2007      	movs	r0, #7
 80010c8:	f000 ff80 	bl	8001fcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40023800 	.word	0x40023800

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010dc:	e7fe      	b.n	80010dc <NMI_Handler+0x4>

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <MemManage_Handler+0x4>

080010ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001124:	f000 fa72 	bl	800160c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <OTG_FS_IRQHandler+0x10>)
 8001132:	f002 fd8b 	bl	8003c4c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20001948 	.word	0x20001948

08001140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001148:	4a14      	ldr	r2, [pc, #80]	; (800119c <_sbrk+0x5c>)
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <_sbrk+0x60>)
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <_sbrk+0x64>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <_sbrk+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	429a      	cmp	r2, r3
 800116e:	d207      	bcs.n	8001180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001170:	f009 fec4 	bl	800aefc <__errno>
 8001174:	4603      	mov	r3, r0
 8001176:	220c      	movs	r2, #12
 8001178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	e009      	b.n	8001194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <_sbrk+0x64>)
 8001190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001192:	68fb      	ldr	r3, [r7, #12]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20020000 	.word	0x20020000
 80011a0:	00000400 	.word	0x00000400
 80011a4:	200003d0 	.word	0x200003d0
 80011a8:	20002198 	.word	0x20002198

080011ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <SystemInit+0x20>)
 80011b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <SystemInit+0x20>)
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08e      	sub	sp, #56	; 0x38
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	f107 0320 	add.w	r3, r7, #32
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	615a      	str	r2, [r3, #20]
 80011fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001200:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <MX_TIM2_Init+0xe4>)
 8001202:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001206:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001208:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <MX_TIM2_Init+0xe4>)
 800120a:	2253      	movs	r2, #83	; 0x53
 800120c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <MX_TIM2_Init+0xe4>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001214:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <MX_TIM2_Init+0xe4>)
 8001216:	2263      	movs	r2, #99	; 0x63
 8001218:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <MX_TIM2_Init+0xe4>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <MX_TIM2_Init+0xe4>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001226:	4823      	ldr	r0, [pc, #140]	; (80012b4 <MX_TIM2_Init+0xe4>)
 8001228:	f004 fef8 	bl	800601c <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001232:	f7ff fea5 	bl	8000f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800123c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001240:	4619      	mov	r1, r3
 8001242:	481c      	ldr	r0, [pc, #112]	; (80012b4 <MX_TIM2_Init+0xe4>)
 8001244:	f005 f98c 	bl	8006560 <HAL_TIM_ConfigClockSource>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800124e:	f7ff fe97 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001252:	4818      	ldr	r0, [pc, #96]	; (80012b4 <MX_TIM2_Init+0xe4>)
 8001254:	f004 ff31 	bl	80060ba <HAL_TIM_PWM_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800125e:	f7ff fe8f 	bl	8000f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800126a:	f107 0320 	add.w	r3, r7, #32
 800126e:	4619      	mov	r1, r3
 8001270:	4810      	ldr	r0, [pc, #64]	; (80012b4 <MX_TIM2_Init+0xe4>)
 8001272:	f005 fd59 	bl	8006d28 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800127c:	f7ff fe80 	bl	8000f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001280:	2360      	movs	r3, #96	; 0x60
 8001282:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2200      	movs	r2, #0
 8001294:	4619      	mov	r1, r3
 8001296:	4807      	ldr	r0, [pc, #28]	; (80012b4 <MX_TIM2_Init+0xe4>)
 8001298:	f005 f8a0 	bl	80063dc <HAL_TIM_PWM_ConfigChannel>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80012a2:	f7ff fe6d 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012a6:	4803      	ldr	r0, [pc, #12]	; (80012b4 <MX_TIM2_Init+0xe4>)
 80012a8:	f000 f8d2 	bl	8001450 <HAL_TIM_MspPostInit>

}
 80012ac:	bf00      	nop
 80012ae:	3738      	adds	r7, #56	; 0x38
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200003d4 	.word	0x200003d4

080012b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08e      	sub	sp, #56	; 0x38
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	f107 0320 	add.w	r3, r7, #32
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
 80012e4:	615a      	str	r2, [r3, #20]
 80012e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012e8:	4b3c      	ldr	r3, [pc, #240]	; (80013dc <MX_TIM4_Init+0x124>)
 80012ea:	4a3d      	ldr	r2, [pc, #244]	; (80013e0 <MX_TIM4_Init+0x128>)
 80012ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80012ee:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <MX_TIM4_Init+0x124>)
 80012f0:	2253      	movs	r2, #83	; 0x53
 80012f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f4:	4b39      	ldr	r3, [pc, #228]	; (80013dc <MX_TIM4_Init+0x124>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 80012fa:	4b38      	ldr	r3, [pc, #224]	; (80013dc <MX_TIM4_Init+0x124>)
 80012fc:	2263      	movs	r2, #99	; 0x63
 80012fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001300:	4b36      	ldr	r3, [pc, #216]	; (80013dc <MX_TIM4_Init+0x124>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <MX_TIM4_Init+0x124>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800130c:	4833      	ldr	r0, [pc, #204]	; (80013dc <MX_TIM4_Init+0x124>)
 800130e:	f004 fe85 	bl	800601c <HAL_TIM_Base_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001318:	f7ff fe32 	bl	8000f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001326:	4619      	mov	r1, r3
 8001328:	482c      	ldr	r0, [pc, #176]	; (80013dc <MX_TIM4_Init+0x124>)
 800132a:	f005 f919 	bl	8006560 <HAL_TIM_ConfigClockSource>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001334:	f7ff fe24 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001338:	4828      	ldr	r0, [pc, #160]	; (80013dc <MX_TIM4_Init+0x124>)
 800133a:	f004 febe 	bl	80060ba <HAL_TIM_PWM_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001344:	f7ff fe1c 	bl	8000f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001350:	f107 0320 	add.w	r3, r7, #32
 8001354:	4619      	mov	r1, r3
 8001356:	4821      	ldr	r0, [pc, #132]	; (80013dc <MX_TIM4_Init+0x124>)
 8001358:	f005 fce6 	bl	8006d28 <HAL_TIMEx_MasterConfigSynchronization>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001362:	f7ff fe0d 	bl	8000f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001366:	2360      	movs	r3, #96	; 0x60
 8001368:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2200      	movs	r2, #0
 800137a:	4619      	mov	r1, r3
 800137c:	4817      	ldr	r0, [pc, #92]	; (80013dc <MX_TIM4_Init+0x124>)
 800137e:	f005 f82d 	bl	80063dc <HAL_TIM_PWM_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001388:	f7ff fdfa 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2204      	movs	r2, #4
 8001390:	4619      	mov	r1, r3
 8001392:	4812      	ldr	r0, [pc, #72]	; (80013dc <MX_TIM4_Init+0x124>)
 8001394:	f005 f822 	bl	80063dc <HAL_TIM_PWM_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 800139e:	f7ff fdef 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2208      	movs	r2, #8
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <MX_TIM4_Init+0x124>)
 80013aa:	f005 f817 	bl	80063dc <HAL_TIM_PWM_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 80013b4:	f7ff fde4 	bl	8000f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	220c      	movs	r2, #12
 80013bc:	4619      	mov	r1, r3
 80013be:	4807      	ldr	r0, [pc, #28]	; (80013dc <MX_TIM4_Init+0x124>)
 80013c0:	f005 f80c 	bl	80063dc <HAL_TIM_PWM_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 80013ca:	f7ff fdd9 	bl	8000f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013ce:	4803      	ldr	r0, [pc, #12]	; (80013dc <MX_TIM4_Init+0x124>)
 80013d0:	f000 f83e 	bl	8001450 <HAL_TIM_MspPostInit>

}
 80013d4:	bf00      	nop
 80013d6:	3738      	adds	r7, #56	; 0x38
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2000041c 	.word	0x2000041c
 80013e0:	40000800 	.word	0x40000800

080013e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f4:	d10e      	bne.n	8001414 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <HAL_TIM_Base_MspInit+0x64>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a12      	ldr	r2, [pc, #72]	; (8001448 <HAL_TIM_Base_MspInit+0x64>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_TIM_Base_MspInit+0x64>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001412:	e012      	b.n	800143a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0c      	ldr	r2, [pc, #48]	; (800144c <HAL_TIM_Base_MspInit+0x68>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d10d      	bne.n	800143a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_TIM_Base_MspInit+0x64>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a08      	ldr	r2, [pc, #32]	; (8001448 <HAL_TIM_Base_MspInit+0x64>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_TIM_Base_MspInit+0x64>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
}
 800143a:	bf00      	nop
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40000800 	.word	0x40000800

08001450 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001470:	d11f      	bne.n	80014b2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <HAL_TIM_MspPostInit+0xb4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a22      	ldr	r2, [pc, #136]	; (8001504 <HAL_TIM_MspPostInit+0xb4>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <HAL_TIM_MspPostInit+0xb4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800148e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014a0:	2301      	movs	r3, #1
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4817      	ldr	r0, [pc, #92]	; (8001508 <HAL_TIM_MspPostInit+0xb8>)
 80014ac:	f000 fdd0 	bl	8002050 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014b0:	e023      	b.n	80014fa <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM4)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a15      	ldr	r2, [pc, #84]	; (800150c <HAL_TIM_MspPostInit+0xbc>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d11e      	bne.n	80014fa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <HAL_TIM_MspPostInit+0xb4>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <HAL_TIM_MspPostInit+0xb4>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	6313      	str	r3, [r2, #48]	; 0x30
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <HAL_TIM_MspPostInit+0xb4>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80014d8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014ea:	2302      	movs	r3, #2
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	4806      	ldr	r0, [pc, #24]	; (8001510 <HAL_TIM_MspPostInit+0xc0>)
 80014f6:	f000 fdab 	bl	8002050 <HAL_GPIO_Init>
}
 80014fa:	bf00      	nop
 80014fc:	3728      	adds	r7, #40	; 0x28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	40020000 	.word	0x40020000
 800150c:	40000800 	.word	0x40000800
 8001510:	40020c00 	.word	0x40020c00

08001514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001514:	f8df d034 	ldr.w	sp, [pc, #52]	; 800154c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001518:	f7ff fe48 	bl	80011ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800151e:	490d      	ldr	r1, [pc, #52]	; (8001554 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001524:	e002      	b.n	800152c <LoopCopyDataInit>

08001526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152a:	3304      	adds	r3, #4

0800152c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800152c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001530:	d3f9      	bcc.n	8001526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001534:	4c0a      	ldr	r4, [pc, #40]	; (8001560 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001538:	e001      	b.n	800153e <LoopFillZerobss>

0800153a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800153c:	3204      	adds	r2, #4

0800153e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001540:	d3fb      	bcc.n	800153a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001542:	f009 fce1 	bl	800af08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001546:	f7ff fb01 	bl	8000b4c <main>
  bx  lr    
 800154a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800154c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001554:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8001558:	0800b924 	.word	0x0800b924
  ldr r2, =_sbss
 800155c:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001560:	20002194 	.word	0x20002194

08001564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC_IRQHandler>
	...

08001568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <HAL_Init+0x40>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a0d      	ldr	r2, [pc, #52]	; (80015a8 <HAL_Init+0x40>)
 8001572:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001576:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <HAL_Init+0x40>)
 800157e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001582:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <HAL_Init+0x40>)
 800158a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001590:	2003      	movs	r0, #3
 8001592:	f000 fd1b 	bl	8001fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001596:	2000      	movs	r0, #0
 8001598:	f000 f808 	bl	80015ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800159c:	f7ff fd74 	bl	8001088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40023c00 	.word	0x40023c00

080015ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_InitTick+0x54>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_InitTick+0x58>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fd33 	bl	8002036 <HAL_SYSTICK_Config>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00e      	b.n	80015f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	d80a      	bhi.n	80015f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e0:	2200      	movs	r2, #0
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f000 fcfb 	bl	8001fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ec:	4a06      	ldr	r2, [pc, #24]	; (8001608 <HAL_InitTick+0x5c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e000      	b.n	80015f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000004 	.word	0x20000004
 8001604:	2000000c 	.word	0x2000000c
 8001608:	20000008 	.word	0x20000008

0800160c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_IncTick+0x20>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	461a      	mov	r2, r3
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_IncTick+0x24>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4413      	add	r3, r2
 800161c:	4a04      	ldr	r2, [pc, #16]	; (8001630 <HAL_IncTick+0x24>)
 800161e:	6013      	str	r3, [r2, #0]
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	2000000c 	.word	0x2000000c
 8001630:	20000464 	.word	0x20000464

08001634 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  return uwTick;
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <HAL_GetTick+0x14>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000464 	.word	0x20000464

0800164c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001654:	f7ff ffee 	bl	8001634 <HAL_GetTick>
 8001658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001664:	d005      	beq.n	8001672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_Delay+0x44>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4413      	add	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001672:	bf00      	nop
 8001674:	f7ff ffde 	bl	8001634 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	429a      	cmp	r2, r3
 8001682:	d8f7      	bhi.n	8001674 <HAL_Delay+0x28>
  {
  }
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000000c 	.word	0x2000000c

08001694 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e033      	b.n	8001712 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d109      	bne.n	80016c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7fe ffb4 	bl	8000620 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d118      	bne.n	8001704 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016da:	f023 0302 	bic.w	r3, r3, #2
 80016de:	f043 0202 	orr.w	r2, r3, #2
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 faa4 	bl	8001c34 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f023 0303 	bic.w	r3, r3, #3
 80016fa:	f043 0201 	orr.w	r2, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	641a      	str	r2, [r3, #64]	; 0x40
 8001702:	e001      	b.n	8001708 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_ADC_Start+0x1a>
 8001732:	2302      	movs	r3, #2
 8001734:	e0b2      	b.n	800189c <HAL_ADC_Start+0x180>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b01      	cmp	r3, #1
 800174a:	d018      	beq.n	800177e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800175c:	4b52      	ldr	r3, [pc, #328]	; (80018a8 <HAL_ADC_Start+0x18c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a52      	ldr	r2, [pc, #328]	; (80018ac <HAL_ADC_Start+0x190>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	0c9a      	lsrs	r2, r3, #18
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001770:	e002      	b.n	8001778 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3b01      	subs	r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f9      	bne.n	8001772 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b01      	cmp	r3, #1
 800178a:	d17a      	bne.n	8001882 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001794:	f023 0301 	bic.w	r3, r3, #1
 8001798:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d007      	beq.n	80017be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017ca:	d106      	bne.n	80017da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d0:	f023 0206 	bic.w	r2, r3, #6
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	645a      	str	r2, [r3, #68]	; 0x44
 80017d8:	e002      	b.n	80017e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017e8:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <HAL_ADC_Start+0x194>)
 80017ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80017f4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 031f 	and.w	r3, r3, #31
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d12a      	bne.n	8001858 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a2b      	ldr	r2, [pc, #172]	; (80018b4 <HAL_ADC_Start+0x198>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d015      	beq.n	8001838 <HAL_ADC_Start+0x11c>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a29      	ldr	r2, [pc, #164]	; (80018b8 <HAL_ADC_Start+0x19c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d105      	bne.n	8001822 <HAL_ADC_Start+0x106>
 8001816:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <HAL_ADC_Start+0x194>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00a      	beq.n	8001838 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a25      	ldr	r2, [pc, #148]	; (80018bc <HAL_ADC_Start+0x1a0>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d136      	bne.n	800189a <HAL_ADC_Start+0x17e>
 800182c:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_ADC_Start+0x194>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	2b00      	cmp	r3, #0
 8001836:	d130      	bne.n	800189a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d129      	bne.n	800189a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	e020      	b.n	800189a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <HAL_ADC_Start+0x198>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d11b      	bne.n	800189a <HAL_ADC_Start+0x17e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d114      	bne.n	800189a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	e00b      	b.n	800189a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f043 0210 	orr.w	r2, r3, #16
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f043 0201 	orr.w	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	20000004 	.word	0x20000004
 80018ac:	431bde83 	.word	0x431bde83
 80018b0:	40012300 	.word	0x40012300
 80018b4:	40012000 	.word	0x40012000
 80018b8:	40012100 	.word	0x40012100
 80018bc:	40012200 	.word	0x40012200

080018c0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018dc:	d113      	bne.n	8001906 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80018e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ec:	d10b      	bne.n	8001906 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f043 0220 	orr.w	r2, r3, #32
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e063      	b.n	80019ce <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001906:	f7ff fe95 	bl	8001634 <HAL_GetTick>
 800190a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800190c:	e021      	b.n	8001952 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001914:	d01d      	beq.n	8001952 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <HAL_ADC_PollForConversion+0x6c>
 800191c:	f7ff fe8a 	bl	8001634 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d212      	bcs.n	8001952 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b02      	cmp	r3, #2
 8001938:	d00b      	beq.n	8001952 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f043 0204 	orr.w	r2, r3, #4
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e03d      	b.n	80019ce <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b02      	cmp	r3, #2
 800195e:	d1d6      	bne.n	800190e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f06f 0212 	mvn.w	r2, #18
 8001968:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d123      	bne.n	80019cc <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001988:	2b00      	cmp	r3, #0
 800198a:	d11f      	bne.n	80019cc <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001996:	2b00      	cmp	r3, #0
 8001998:	d006      	beq.n	80019a8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d111      	bne.n	80019cc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d105      	bne.n	80019cc <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	f043 0201 	orr.w	r2, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x1c>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e105      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x228>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b09      	cmp	r3, #9
 8001a1a:	d925      	bls.n	8001a68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68d9      	ldr	r1, [r3, #12]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	3b1e      	subs	r3, #30
 8001a32:	2207      	movs	r2, #7
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43da      	mvns	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	400a      	ands	r2, r1
 8001a40:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68d9      	ldr	r1, [r3, #12]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	4603      	mov	r3, r0
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4403      	add	r3, r0
 8001a5a:	3b1e      	subs	r3, #30
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	e022      	b.n	8001aae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6919      	ldr	r1, [r3, #16]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	461a      	mov	r2, r3
 8001a76:	4613      	mov	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4413      	add	r3, r2
 8001a7c:	2207      	movs	r2, #7
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	400a      	ands	r2, r1
 8001a8a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6919      	ldr	r1, [r3, #16]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4403      	add	r3, r0
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d824      	bhi.n	8001b00 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3b05      	subs	r3, #5
 8001ac8:	221f      	movs	r2, #31
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43da      	mvns	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	3b05      	subs	r3, #5
 8001af2:	fa00 f203 	lsl.w	r2, r0, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	635a      	str	r2, [r3, #52]	; 0x34
 8001afe:	e04c      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b0c      	cmp	r3, #12
 8001b06:	d824      	bhi.n	8001b52 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	3b23      	subs	r3, #35	; 0x23
 8001b1a:	221f      	movs	r2, #31
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43da      	mvns	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	400a      	ands	r2, r1
 8001b28:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	4618      	mov	r0, r3
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	3b23      	subs	r3, #35	; 0x23
 8001b44:	fa00 f203 	lsl.w	r2, r0, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b50:	e023      	b.n	8001b9a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	3b41      	subs	r3, #65	; 0x41
 8001b64:	221f      	movs	r2, #31
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	400a      	ands	r2, r1
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	4618      	mov	r0, r3
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b41      	subs	r3, #65	; 0x41
 8001b8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b9a:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <HAL_ADC_ConfigChannel+0x234>)
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a21      	ldr	r2, [pc, #132]	; (8001c28 <HAL_ADC_ConfigChannel+0x238>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d109      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x1cc>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b12      	cmp	r3, #18
 8001bae:	d105      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_ADC_ConfigChannel+0x238>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d123      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x21e>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2b10      	cmp	r3, #16
 8001bcc:	d003      	beq.n	8001bd6 <HAL_ADC_ConfigChannel+0x1e6>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b11      	cmp	r3, #17
 8001bd4:	d11b      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b10      	cmp	r3, #16
 8001be8:	d111      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <HAL_ADC_ConfigChannel+0x23c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a10      	ldr	r2, [pc, #64]	; (8001c30 <HAL_ADC_ConfigChannel+0x240>)
 8001bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf4:	0c9a      	lsrs	r2, r3, #18
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c00:	e002      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f9      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	40012300 	.word	0x40012300
 8001c28:	40012000 	.word	0x40012000
 8001c2c:	20000004 	.word	0x20000004
 8001c30:	431bde83 	.word	0x431bde83

08001c34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c3c:	4b79      	ldr	r3, [pc, #484]	; (8001e24 <ADC_Init+0x1f0>)
 8001c3e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	431a      	orrs	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6859      	ldr	r1, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	021a      	lsls	r2, r3, #8
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6899      	ldr	r1, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	4a58      	ldr	r2, [pc, #352]	; (8001e28 <ADC_Init+0x1f4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d022      	beq.n	8001d12 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6899      	ldr	r1, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6899      	ldr	r1, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	e00f      	b.n	8001d32 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d30:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0202 	bic.w	r2, r2, #2
 8001d40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6899      	ldr	r1, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7e1b      	ldrb	r3, [r3, #24]
 8001d4c:	005a      	lsls	r2, r3, #1
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01b      	beq.n	8001d98 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d6e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6859      	ldr	r1, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	035a      	lsls	r2, r3, #13
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	e007      	b.n	8001da8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001da6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	051a      	lsls	r2, r3, #20
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ddc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6899      	ldr	r1, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001dea:	025a      	lsls	r2, r3, #9
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6899      	ldr	r1, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	029a      	lsls	r2, r3, #10
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	609a      	str	r2, [r3, #8]
}
 8001e18:	bf00      	nop
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	40012300 	.word	0x40012300
 8001e28:	0f000001 	.word	0x0f000001

08001e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5e:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	60d3      	str	r3, [r2, #12]
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e78:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <__NVIC_GetPriorityGrouping+0x18>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	f003 0307 	and.w	r3, r3, #7
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	db0b      	blt.n	8001eba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	f003 021f 	and.w	r2, r3, #31
 8001ea8:	4907      	ldr	r1, [pc, #28]	; (8001ec8 <__NVIC_EnableIRQ+0x38>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	095b      	lsrs	r3, r3, #5
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000e100 	.word	0xe000e100

08001ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	db0a      	blt.n	8001ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	490c      	ldr	r1, [pc, #48]	; (8001f18 <__NVIC_SetPriority+0x4c>)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	0112      	lsls	r2, r2, #4
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef4:	e00a      	b.n	8001f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4908      	ldr	r1, [pc, #32]	; (8001f1c <__NVIC_SetPriority+0x50>)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	3b04      	subs	r3, #4
 8001f04:	0112      	lsls	r2, r2, #4
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	440b      	add	r3, r1
 8001f0a:	761a      	strb	r2, [r3, #24]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000e100 	.word	0xe000e100
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	; 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f1c3 0307 	rsb	r3, r3, #7
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	bf28      	it	cs
 8001f3e:	2304      	movcs	r3, #4
 8001f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3304      	adds	r3, #4
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d902      	bls.n	8001f50 <NVIC_EncodePriority+0x30>
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3b03      	subs	r3, #3
 8001f4e:	e000      	b.n	8001f52 <NVIC_EncodePriority+0x32>
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	f04f 32ff 	mov.w	r2, #4294967295
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	401a      	ands	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	43d9      	mvns	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	4313      	orrs	r3, r2
         );
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3724      	adds	r7, #36	; 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f98:	d301      	bcc.n	8001f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e00f      	b.n	8001fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <SysTick_Config+0x40>)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa6:	210f      	movs	r1, #15
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f7ff ff8e 	bl	8001ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <SysTick_Config+0x40>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb6:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <SysTick_Config+0x40>)
 8001fb8:	2207      	movs	r2, #7
 8001fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	e000e010 	.word	0xe000e010

08001fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ff29 	bl	8001e2c <__NVIC_SetPriorityGrouping>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff4:	f7ff ff3e 	bl	8001e74 <__NVIC_GetPriorityGrouping>
 8001ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	6978      	ldr	r0, [r7, #20]
 8002000:	f7ff ff8e 	bl	8001f20 <NVIC_EncodePriority>
 8002004:	4602      	mov	r2, r0
 8002006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff5d 	bl	8001ecc <__NVIC_SetPriority>
}
 8002012:	bf00      	nop
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	4603      	mov	r3, r0
 8002022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff31 	bl	8001e90 <__NVIC_EnableIRQ>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ffa2 	bl	8001f88 <SysTick_Config>
 8002044:	4603      	mov	r3, r0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	e16b      	b.n	8002344 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800206c:	2201      	movs	r2, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	429a      	cmp	r2, r3
 8002086:	f040 815a 	bne.w	800233e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b01      	cmp	r3, #1
 8002094:	d005      	beq.n	80020a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d130      	bne.n	8002104 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	2203      	movs	r2, #3
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d8:	2201      	movs	r2, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	091b      	lsrs	r3, r3, #4
 80020ee:	f003 0201 	and.w	r2, r3, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b03      	cmp	r3, #3
 800210e:	d017      	beq.n	8002140 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d123      	bne.n	8002194 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	08da      	lsrs	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3208      	adds	r2, #8
 8002154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	220f      	movs	r2, #15
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	08da      	lsrs	r2, r3, #3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3208      	adds	r2, #8
 800218e:	69b9      	ldr	r1, [r7, #24]
 8002190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2203      	movs	r2, #3
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0203 	and.w	r2, r3, #3
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80b4 	beq.w	800233e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b60      	ldr	r3, [pc, #384]	; (800235c <HAL_GPIO_Init+0x30c>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	4a5f      	ldr	r2, [pc, #380]	; (800235c <HAL_GPIO_Init+0x30c>)
 80021e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e4:	6453      	str	r3, [r2, #68]	; 0x44
 80021e6:	4b5d      	ldr	r3, [pc, #372]	; (800235c <HAL_GPIO_Init+0x30c>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021f2:	4a5b      	ldr	r2, [pc, #364]	; (8002360 <HAL_GPIO_Init+0x310>)
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	089b      	lsrs	r3, r3, #2
 80021f8:	3302      	adds	r3, #2
 80021fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	220f      	movs	r2, #15
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a52      	ldr	r2, [pc, #328]	; (8002364 <HAL_GPIO_Init+0x314>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d02b      	beq.n	8002276 <HAL_GPIO_Init+0x226>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a51      	ldr	r2, [pc, #324]	; (8002368 <HAL_GPIO_Init+0x318>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d025      	beq.n	8002272 <HAL_GPIO_Init+0x222>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a50      	ldr	r2, [pc, #320]	; (800236c <HAL_GPIO_Init+0x31c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01f      	beq.n	800226e <HAL_GPIO_Init+0x21e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4f      	ldr	r2, [pc, #316]	; (8002370 <HAL_GPIO_Init+0x320>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d019      	beq.n	800226a <HAL_GPIO_Init+0x21a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4e      	ldr	r2, [pc, #312]	; (8002374 <HAL_GPIO_Init+0x324>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_GPIO_Init+0x216>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4d      	ldr	r2, [pc, #308]	; (8002378 <HAL_GPIO_Init+0x328>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00d      	beq.n	8002262 <HAL_GPIO_Init+0x212>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4c      	ldr	r2, [pc, #304]	; (800237c <HAL_GPIO_Init+0x32c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d007      	beq.n	800225e <HAL_GPIO_Init+0x20e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4b      	ldr	r2, [pc, #300]	; (8002380 <HAL_GPIO_Init+0x330>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d101      	bne.n	800225a <HAL_GPIO_Init+0x20a>
 8002256:	2307      	movs	r3, #7
 8002258:	e00e      	b.n	8002278 <HAL_GPIO_Init+0x228>
 800225a:	2308      	movs	r3, #8
 800225c:	e00c      	b.n	8002278 <HAL_GPIO_Init+0x228>
 800225e:	2306      	movs	r3, #6
 8002260:	e00a      	b.n	8002278 <HAL_GPIO_Init+0x228>
 8002262:	2305      	movs	r3, #5
 8002264:	e008      	b.n	8002278 <HAL_GPIO_Init+0x228>
 8002266:	2304      	movs	r3, #4
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x228>
 800226a:	2303      	movs	r3, #3
 800226c:	e004      	b.n	8002278 <HAL_GPIO_Init+0x228>
 800226e:	2302      	movs	r3, #2
 8002270:	e002      	b.n	8002278 <HAL_GPIO_Init+0x228>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <HAL_GPIO_Init+0x228>
 8002276:	2300      	movs	r3, #0
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	f002 0203 	and.w	r2, r2, #3
 800227e:	0092      	lsls	r2, r2, #2
 8002280:	4093      	lsls	r3, r2
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002288:	4935      	ldr	r1, [pc, #212]	; (8002360 <HAL_GPIO_Init+0x310>)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	3302      	adds	r3, #2
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002296:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <HAL_GPIO_Init+0x334>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ba:	4a32      	ldr	r2, [pc, #200]	; (8002384 <HAL_GPIO_Init+0x334>)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c0:	4b30      	ldr	r3, [pc, #192]	; (8002384 <HAL_GPIO_Init+0x334>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e4:	4a27      	ldr	r2, [pc, #156]	; (8002384 <HAL_GPIO_Init+0x334>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ea:	4b26      	ldr	r3, [pc, #152]	; (8002384 <HAL_GPIO_Init+0x334>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800230e:	4a1d      	ldr	r2, [pc, #116]	; (8002384 <HAL_GPIO_Init+0x334>)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <HAL_GPIO_Init+0x334>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002338:	4a12      	ldr	r2, [pc, #72]	; (8002384 <HAL_GPIO_Init+0x334>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3301      	adds	r3, #1
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b0f      	cmp	r3, #15
 8002348:	f67f ae90 	bls.w	800206c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3724      	adds	r7, #36	; 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	40013800 	.word	0x40013800
 8002364:	40020000 	.word	0x40020000
 8002368:	40020400 	.word	0x40020400
 800236c:	40020800 	.word	0x40020800
 8002370:	40020c00 	.word	0x40020c00
 8002374:	40021000 	.word	0x40021000
 8002378:	40021400 	.word	0x40021400
 800237c:	40021800 	.word	0x40021800
 8002380:	40021c00 	.word	0x40021c00
 8002384:	40013c00 	.word	0x40013c00

08002388 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	887b      	ldrh	r3, [r7, #2]
 800239a:	4013      	ands	r3, r2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e001      	b.n	80023aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023a6:	2300      	movs	r3, #0
 80023a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	807b      	strh	r3, [r7, #2]
 80023c4:	4613      	mov	r3, r2
 80023c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c8:	787b      	ldrb	r3, [r7, #1]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d4:	e003      	b.n	80023de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023d6:	887b      	ldrh	r3, [r7, #2]
 80023d8:	041a      	lsls	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	619a      	str	r2, [r3, #24]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e12b      	b.n	8002656 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe fa72 	bl	80008fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2224      	movs	r2, #36	; 0x24
 800241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0201 	bic.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800243e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800244e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002450:	f003 f978 	bl	8005744 <HAL_RCC_GetPCLK1Freq>
 8002454:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4a81      	ldr	r2, [pc, #516]	; (8002660 <HAL_I2C_Init+0x274>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d807      	bhi.n	8002470 <HAL_I2C_Init+0x84>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4a80      	ldr	r2, [pc, #512]	; (8002664 <HAL_I2C_Init+0x278>)
 8002464:	4293      	cmp	r3, r2
 8002466:	bf94      	ite	ls
 8002468:	2301      	movls	r3, #1
 800246a:	2300      	movhi	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	e006      	b.n	800247e <HAL_I2C_Init+0x92>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4a7d      	ldr	r2, [pc, #500]	; (8002668 <HAL_I2C_Init+0x27c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	bf94      	ite	ls
 8002478:	2301      	movls	r3, #1
 800247a:	2300      	movhi	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e0e7      	b.n	8002656 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4a78      	ldr	r2, [pc, #480]	; (800266c <HAL_I2C_Init+0x280>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	0c9b      	lsrs	r3, r3, #18
 8002490:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4a6a      	ldr	r2, [pc, #424]	; (8002660 <HAL_I2C_Init+0x274>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d802      	bhi.n	80024c0 <HAL_I2C_Init+0xd4>
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	3301      	adds	r3, #1
 80024be:	e009      	b.n	80024d4 <HAL_I2C_Init+0xe8>
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024c6:	fb02 f303 	mul.w	r3, r2, r3
 80024ca:	4a69      	ldr	r2, [pc, #420]	; (8002670 <HAL_I2C_Init+0x284>)
 80024cc:	fba2 2303 	umull	r2, r3, r2, r3
 80024d0:	099b      	lsrs	r3, r3, #6
 80024d2:	3301      	adds	r3, #1
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	430b      	orrs	r3, r1
 80024da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	495c      	ldr	r1, [pc, #368]	; (8002660 <HAL_I2C_Init+0x274>)
 80024f0:	428b      	cmp	r3, r1
 80024f2:	d819      	bhi.n	8002528 <HAL_I2C_Init+0x13c>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1e59      	subs	r1, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002502:	1c59      	adds	r1, r3, #1
 8002504:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002508:	400b      	ands	r3, r1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_I2C_Init+0x138>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1e59      	subs	r1, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fbb1 f3f3 	udiv	r3, r1, r3
 800251c:	3301      	adds	r3, #1
 800251e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002522:	e051      	b.n	80025c8 <HAL_I2C_Init+0x1dc>
 8002524:	2304      	movs	r3, #4
 8002526:	e04f      	b.n	80025c8 <HAL_I2C_Init+0x1dc>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d111      	bne.n	8002554 <HAL_I2C_Init+0x168>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1e58      	subs	r0, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	440b      	add	r3, r1
 800253e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002542:	3301      	adds	r3, #1
 8002544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	e012      	b.n	800257a <HAL_I2C_Init+0x18e>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1e58      	subs	r0, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	0099      	lsls	r1, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	fbb0 f3f3 	udiv	r3, r0, r3
 800256a:	3301      	adds	r3, #1
 800256c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf0c      	ite	eq
 8002574:	2301      	moveq	r3, #1
 8002576:	2300      	movne	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_I2C_Init+0x196>
 800257e:	2301      	movs	r3, #1
 8002580:	e022      	b.n	80025c8 <HAL_I2C_Init+0x1dc>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10e      	bne.n	80025a8 <HAL_I2C_Init+0x1bc>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1e58      	subs	r0, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6859      	ldr	r1, [r3, #4]
 8002592:	460b      	mov	r3, r1
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	440b      	add	r3, r1
 8002598:	fbb0 f3f3 	udiv	r3, r0, r3
 800259c:	3301      	adds	r3, #1
 800259e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a6:	e00f      	b.n	80025c8 <HAL_I2C_Init+0x1dc>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1e58      	subs	r0, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6859      	ldr	r1, [r3, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	0099      	lsls	r1, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80025be:	3301      	adds	r3, #1
 80025c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	6809      	ldr	r1, [r1, #0]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69da      	ldr	r2, [r3, #28]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6911      	ldr	r1, [r2, #16]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68d2      	ldr	r2, [r2, #12]
 8002602:	4311      	orrs	r1, r2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	430b      	orrs	r3, r1
 800260a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2220      	movs	r2, #32
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	000186a0 	.word	0x000186a0
 8002664:	001e847f 	.word	0x001e847f
 8002668:	003d08ff 	.word	0x003d08ff
 800266c:	431bde83 	.word	0x431bde83
 8002670:	10624dd3 	.word	0x10624dd3

08002674 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08c      	sub	sp, #48	; 0x30
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	4608      	mov	r0, r1
 800267e:	4611      	mov	r1, r2
 8002680:	461a      	mov	r2, r3
 8002682:	4603      	mov	r3, r0
 8002684:	817b      	strh	r3, [r7, #10]
 8002686:	460b      	mov	r3, r1
 8002688:	813b      	strh	r3, [r7, #8]
 800268a:	4613      	mov	r3, r2
 800268c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800268e:	f7fe ffd1 	bl	8001634 <HAL_GetTick>
 8002692:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b20      	cmp	r3, #32
 800269e:	f040 8214 	bne.w	8002aca <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2319      	movs	r3, #25
 80026a8:	2201      	movs	r2, #1
 80026aa:	497b      	ldr	r1, [pc, #492]	; (8002898 <HAL_I2C_Mem_Read+0x224>)
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fafb 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80026b8:	2302      	movs	r3, #2
 80026ba:	e207      	b.n	8002acc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_I2C_Mem_Read+0x56>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e200      	b.n	8002acc <HAL_I2C_Mem_Read+0x458>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d007      	beq.n	80026f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2222      	movs	r2, #34	; 0x22
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2240      	movs	r2, #64	; 0x40
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800271a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002720:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	4a5b      	ldr	r2, [pc, #364]	; (800289c <HAL_I2C_Mem_Read+0x228>)
 8002730:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002732:	88f8      	ldrh	r0, [r7, #6]
 8002734:	893a      	ldrh	r2, [r7, #8]
 8002736:	8979      	ldrh	r1, [r7, #10]
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	4603      	mov	r3, r0
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f9c8 	bl	8002ad8 <I2C_RequestMemoryRead>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e1bc      	b.n	8002acc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002756:	2b00      	cmp	r3, #0
 8002758:	d113      	bne.n	8002782 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275a:	2300      	movs	r3, #0
 800275c:	623b      	str	r3, [r7, #32]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	623b      	str	r3, [r7, #32]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	623b      	str	r3, [r7, #32]
 800276e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e190      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002786:	2b01      	cmp	r3, #1
 8002788:	d11b      	bne.n	80027c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002798:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e170      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d11b      	bne.n	8002802 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	e150      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002818:	e144      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281e:	2b03      	cmp	r3, #3
 8002820:	f200 80f1 	bhi.w	8002a06 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002828:	2b01      	cmp	r3, #1
 800282a:	d123      	bne.n	8002874 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 fb9b 	bl	8002f6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e145      	b.n	8002acc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691a      	ldr	r2, [r3, #16]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002868:	b29b      	uxth	r3, r3
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002872:	e117      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002878:	2b02      	cmp	r3, #2
 800287a:	d14e      	bne.n	800291a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002882:	2200      	movs	r2, #0
 8002884:	4906      	ldr	r1, [pc, #24]	; (80028a0 <HAL_I2C_Mem_Read+0x22c>)
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 fa0e 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d008      	beq.n	80028a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e11a      	b.n	8002acc <HAL_I2C_Mem_Read+0x458>
 8002896:	bf00      	nop
 8002898:	00100002 	.word	0x00100002
 800289c:	ffff0000 	.word	0xffff0000
 80028a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290e:	b29b      	uxth	r3, r3
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002918:	e0c4      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002920:	2200      	movs	r2, #0
 8002922:	496c      	ldr	r1, [pc, #432]	; (8002ad4 <HAL_I2C_Mem_Read+0x460>)
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 f9bf 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0cb      	b.n	8002acc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002942:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297c:	2200      	movs	r2, #0
 800297e:	4955      	ldr	r1, [pc, #340]	; (8002ad4 <HAL_I2C_Mem_Read+0x460>)
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f991 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e09d      	b.n	8002acc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800299e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a04:	e04e      	b.n	8002aa4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 faae 	bl	8002f6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e058      	b.n	8002acc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d124      	bne.n	8002aa4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d107      	bne.n	8002a72 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a70:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f47f aeb6 	bne.w	800281a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e000      	b.n	8002acc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
  }
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3728      	adds	r7, #40	; 0x28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	00010004 	.word	0x00010004

08002ad8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	4608      	mov	r0, r1
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	817b      	strh	r3, [r7, #10]
 8002aea:	460b      	mov	r3, r1
 8002aec:	813b      	strh	r3, [r7, #8]
 8002aee:	4613      	mov	r3, r2
 8002af0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f8c2 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00d      	beq.n	8002b46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b38:	d103      	bne.n	8002b42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e0aa      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b46:	897b      	ldrh	r3, [r7, #10]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	6a3a      	ldr	r2, [r7, #32]
 8002b5a:	4952      	ldr	r1, [pc, #328]	; (8002ca4 <I2C_RequestMemoryRead+0x1cc>)
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f91d 	bl	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e097      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	617b      	str	r3, [r7, #20]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b84:	6a39      	ldr	r1, [r7, #32]
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f9a8 	bl	8002edc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00d      	beq.n	8002bae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d107      	bne.n	8002baa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e076      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bae:	88fb      	ldrh	r3, [r7, #6]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d105      	bne.n	8002bc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bb4:	893b      	ldrh	r3, [r7, #8]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	611a      	str	r2, [r3, #16]
 8002bbe:	e021      	b.n	8002c04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bc0:	893b      	ldrh	r3, [r7, #8]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd0:	6a39      	ldr	r1, [r7, #32]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 f982 	bl	8002edc <I2C_WaitOnTXEFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00d      	beq.n	8002bfa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d107      	bne.n	8002bf6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e050      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bfa:	893b      	ldrh	r3, [r7, #8]
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c06:	6a39      	ldr	r1, [r7, #32]
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f967 	bl	8002edc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00d      	beq.n	8002c30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d107      	bne.n	8002c2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e035      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f82b 	bl	8002ca8 <I2C_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00d      	beq.n	8002c74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c66:	d103      	bne.n	8002c70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e013      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c74:	897b      	ldrh	r3, [r7, #10]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	6a3a      	ldr	r2, [r7, #32]
 8002c88:	4906      	ldr	r1, [pc, #24]	; (8002ca4 <I2C_RequestMemoryRead+0x1cc>)
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f886 	bl	8002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	00010002 	.word	0x00010002

08002ca8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cb8:	e048      	b.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d044      	beq.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc2:	f7fe fcb7 	bl	8001634 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d302      	bcc.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d139      	bne.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	0c1b      	lsrs	r3, r3, #16
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d10d      	bne.n	8002cfe <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	4013      	ands	r3, r2
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	e00c      	b.n	8002d18 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	43da      	mvns	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	79fb      	ldrb	r3, [r7, #7]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d116      	bne.n	8002d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	f043 0220 	orr.w	r2, r3, #32
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e023      	b.n	8002d94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	0c1b      	lsrs	r3, r3, #16
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d10d      	bne.n	8002d72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	43da      	mvns	r2, r3
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	4013      	ands	r3, r2
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	bf0c      	ite	eq
 8002d68:	2301      	moveq	r3, #1
 8002d6a:	2300      	movne	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	e00c      	b.n	8002d8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	43da      	mvns	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d093      	beq.n	8002cba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002daa:	e071      	b.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dba:	d123      	bne.n	8002e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df0:	f043 0204 	orr.w	r2, r3, #4
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e067      	b.n	8002ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0a:	d041      	beq.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0c:	f7fe fc12 	bl	8001634 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d302      	bcc.n	8002e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d136      	bne.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	0c1b      	lsrs	r3, r3, #16
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d10c      	bne.n	8002e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	43da      	mvns	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4013      	ands	r3, r2
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bf14      	ite	ne
 8002e3e:	2301      	movne	r3, #1
 8002e40:	2300      	moveq	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	e00b      	b.n	8002e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	43da      	mvns	r2, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	4013      	ands	r3, r2
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	bf14      	ite	ne
 8002e58:	2301      	movne	r3, #1
 8002e5a:	2300      	moveq	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d016      	beq.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e021      	b.n	8002ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	0c1b      	lsrs	r3, r3, #16
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d10c      	bne.n	8002eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	43da      	mvns	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	e00b      	b.n	8002ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf14      	ite	ne
 8002ec6:	2301      	movne	r3, #1
 8002ec8:	2300      	moveq	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f47f af6d 	bne.w	8002dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee8:	e034      	b.n	8002f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f89b 	bl	8003026 <I2C_IsAcknowledgeFailed>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e034      	b.n	8002f64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d028      	beq.n	8002f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f02:	f7fe fb97 	bl	8001634 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d302      	bcc.n	8002f18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d11d      	bne.n	8002f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f22:	2b80      	cmp	r3, #128	; 0x80
 8002f24:	d016      	beq.n	8002f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e007      	b.n	8002f64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5e:	2b80      	cmp	r3, #128	; 0x80
 8002f60:	d1c3      	bne.n	8002eea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f78:	e049      	b.n	800300e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b10      	cmp	r3, #16
 8002f86:	d119      	bne.n	8002fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0210 	mvn.w	r2, #16
 8002f90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e030      	b.n	800301e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbc:	f7fe fb3a 	bl	8001634 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d302      	bcc.n	8002fd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d11d      	bne.n	800300e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fdc:	2b40      	cmp	r3, #64	; 0x40
 8002fde:	d016      	beq.n	800300e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	f043 0220 	orr.w	r2, r3, #32
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e007      	b.n	800301e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d1ae      	bne.n	8002f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800303c:	d11b      	bne.n	8003076 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003046:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f043 0204 	orr.w	r2, r3, #4
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e128      	b.n	80032e8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a90      	ldr	r2, [pc, #576]	; (80032f0 <HAL_I2S_Init+0x26c>)
 80030ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7fd fc9b 	bl	80009ec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2202      	movs	r2, #2
 80030ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030cc:	f023 030f 	bic.w	r3, r3, #15
 80030d0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2202      	movs	r2, #2
 80030d8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d060      	beq.n	80031a4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d102      	bne.n	80030f0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80030ea:	2310      	movs	r3, #16
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	e001      	b.n	80030f4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80030f0:	2320      	movs	r3, #32
 80030f2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d802      	bhi.n	8003102 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003102:	2001      	movs	r0, #1
 8003104:	f002 fc14 	bl	8005930 <HAL_RCCEx_GetPeriphCLKFreq>
 8003108:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003112:	d125      	bne.n	8003160 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d010      	beq.n	800313e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	fbb2 f2f3 	udiv	r2, r2, r3
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	461a      	mov	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	3305      	adds	r3, #5
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	e01f      	b.n	800317e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	fbb2 f2f3 	udiv	r2, r2, r3
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	461a      	mov	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	3305      	adds	r3, #5
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	e00e      	b.n	800317e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	fbb2 f2f3 	udiv	r2, r2, r3
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	461a      	mov	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	fbb2 f3f3 	udiv	r3, r2, r3
 800317a:	3305      	adds	r3, #5
 800317c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4a5c      	ldr	r2, [pc, #368]	; (80032f4 <HAL_I2S_Init+0x270>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	08db      	lsrs	r3, r3, #3
 8003188:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	61bb      	str	r3, [r7, #24]
 80031a2:	e003      	b.n	80031ac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031a4:	2302      	movs	r3, #2
 80031a6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d902      	bls.n	80031b8 <HAL_I2S_Init+0x134>
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	2bff      	cmp	r3, #255	; 0xff
 80031b6:	d907      	bls.n	80031c8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	f043 0210 	orr.w	r2, r3, #16
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e08f      	b.n	80032e8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	ea42 0103 	orr.w	r1, r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	430a      	orrs	r2, r1
 80031da:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031e6:	f023 030f 	bic.w	r3, r3, #15
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6851      	ldr	r1, [r2, #4]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6892      	ldr	r2, [r2, #8]
 80031f2:	4311      	orrs	r1, r2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	68d2      	ldr	r2, [r2, #12]
 80031f8:	4311      	orrs	r1, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6992      	ldr	r2, [r2, #24]
 80031fe:	430a      	orrs	r2, r1
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800320a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d161      	bne.n	80032d8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a38      	ldr	r2, [pc, #224]	; (80032f8 <HAL_I2S_Init+0x274>)
 8003218:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a37      	ldr	r2, [pc, #220]	; (80032fc <HAL_I2S_Init+0x278>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d101      	bne.n	8003228 <HAL_I2S_Init+0x1a4>
 8003224:	4b36      	ldr	r3, [pc, #216]	; (8003300 <HAL_I2S_Init+0x27c>)
 8003226:	e001      	b.n	800322c <HAL_I2S_Init+0x1a8>
 8003228:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	4932      	ldr	r1, [pc, #200]	; (80032fc <HAL_I2S_Init+0x278>)
 8003234:	428a      	cmp	r2, r1
 8003236:	d101      	bne.n	800323c <HAL_I2S_Init+0x1b8>
 8003238:	4a31      	ldr	r2, [pc, #196]	; (8003300 <HAL_I2S_Init+0x27c>)
 800323a:	e001      	b.n	8003240 <HAL_I2S_Init+0x1bc>
 800323c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003240:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003244:	f023 030f 	bic.w	r3, r3, #15
 8003248:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a2b      	ldr	r2, [pc, #172]	; (80032fc <HAL_I2S_Init+0x278>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d101      	bne.n	8003258 <HAL_I2S_Init+0x1d4>
 8003254:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <HAL_I2S_Init+0x27c>)
 8003256:	e001      	b.n	800325c <HAL_I2S_Init+0x1d8>
 8003258:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800325c:	2202      	movs	r2, #2
 800325e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a25      	ldr	r2, [pc, #148]	; (80032fc <HAL_I2S_Init+0x278>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d101      	bne.n	800326e <HAL_I2S_Init+0x1ea>
 800326a:	4b25      	ldr	r3, [pc, #148]	; (8003300 <HAL_I2S_Init+0x27c>)
 800326c:	e001      	b.n	8003272 <HAL_I2S_Init+0x1ee>
 800326e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327e:	d003      	beq.n	8003288 <HAL_I2S_Init+0x204>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d103      	bne.n	8003290 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003288:	f44f 7380 	mov.w	r3, #256	; 0x100
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	e001      	b.n	8003294 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800329e:	4313      	orrs	r3, r2
 80032a0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032a8:	4313      	orrs	r3, r2
 80032aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032b2:	4313      	orrs	r3, r2
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	897b      	ldrh	r3, [r7, #10]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032c0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a0d      	ldr	r2, [pc, #52]	; (80032fc <HAL_I2S_Init+0x278>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d101      	bne.n	80032d0 <HAL_I2S_Init+0x24c>
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_I2S_Init+0x27c>)
 80032ce:	e001      	b.n	80032d4 <HAL_I2S_Init+0x250>
 80032d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032d4:	897a      	ldrh	r2, [r7, #10]
 80032d6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3720      	adds	r7, #32
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	080033fb 	.word	0x080033fb
 80032f4:	cccccccd 	.word	0xcccccccd
 80032f8:	08003511 	.word	0x08003511
 80032fc:	40003800 	.word	0x40003800
 8003300:	40003400 	.word	0x40003400

08003304 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	881a      	ldrh	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	1c9a      	adds	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10e      	bne.n	8003394 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003384:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ffb8 	bl	8003304 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	b292      	uxth	r2, r2
 80033b0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	1c9a      	adds	r2, r3, #2
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10e      	bne.n	80033f2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ff93 	bl	8003318 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b086      	sub	sp, #24
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b04      	cmp	r3, #4
 8003414:	d13a      	bne.n	800348c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b01      	cmp	r3, #1
 800341e:	d109      	bne.n	8003434 <I2S_IRQHandler+0x3a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	d102      	bne.n	8003434 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff ffb4 	bl	800339c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343a:	2b40      	cmp	r3, #64	; 0x40
 800343c:	d126      	bne.n	800348c <I2S_IRQHandler+0x92>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b20      	cmp	r3, #32
 800344a:	d11f      	bne.n	800348c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800345a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	f043 0202 	orr.w	r2, r3, #2
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ff50 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b03      	cmp	r3, #3
 8003496:	d136      	bne.n	8003506 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d109      	bne.n	80034b6 <I2S_IRQHandler+0xbc>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ac:	2b80      	cmp	r3, #128	; 0x80
 80034ae:	d102      	bne.n	80034b6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff ff45 	bl	8003340 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d122      	bne.n	8003506 <I2S_IRQHandler+0x10c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b20      	cmp	r3, #32
 80034cc:	d11b      	bne.n	8003506 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034dc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f8:	f043 0204 	orr.w	r2, r3, #4
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ff13 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003506:	bf00      	nop
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a92      	ldr	r2, [pc, #584]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d101      	bne.n	800352e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800352a:	4b92      	ldr	r3, [pc, #584]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800352c:	e001      	b.n	8003532 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800352e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a8b      	ldr	r2, [pc, #556]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d101      	bne.n	800354c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003548:	4b8a      	ldr	r3, [pc, #552]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800354a:	e001      	b.n	8003550 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800354c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800355c:	d004      	beq.n	8003568 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 8099 	bne.w	800369a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b02      	cmp	r3, #2
 8003570:	d107      	bne.n	8003582 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f925 	bl	80037cc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	d107      	bne.n	800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f9c8 	bl	800392c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a2:	2b40      	cmp	r3, #64	; 0x40
 80035a4:	d13a      	bne.n	800361c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d035      	beq.n	800361c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a6e      	ldr	r2, [pc, #440]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d101      	bne.n	80035be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80035ba:	4b6e      	ldr	r3, [pc, #440]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035bc:	e001      	b.n	80035c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80035be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4969      	ldr	r1, [pc, #420]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035ca:	428b      	cmp	r3, r1
 80035cc:	d101      	bne.n	80035d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80035ce:	4b69      	ldr	r3, [pc, #420]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035d0:	e001      	b.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80035d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f043 0202 	orr.w	r2, r3, #2
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff fe88 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b08      	cmp	r3, #8
 8003624:	f040 80c3 	bne.w	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 80bd 	beq.w	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003642:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a49      	ldr	r2, [pc, #292]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d101      	bne.n	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800364e:	4b49      	ldr	r3, [pc, #292]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003650:	e001      	b.n	8003656 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003652:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4944      	ldr	r1, [pc, #272]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800365e:	428b      	cmp	r3, r1
 8003660:	d101      	bne.n	8003666 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003662:	4b44      	ldr	r3, [pc, #272]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003664:	e001      	b.n	800366a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003666:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800366a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800366e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003670:	2300      	movs	r3, #0
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	f043 0204 	orr.w	r2, r3, #4
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff fe4a 	bl	800332c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003698:	e089      	b.n	80037ae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d107      	bne.n	80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f8be 	bl	8003830 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d107      	bne.n	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f8fd 	bl	80038c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	d12f      	bne.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d02a      	beq.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036f0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a1e      	ldr	r2, [pc, #120]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d101      	bne.n	8003700 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80036fc:	4b1d      	ldr	r3, [pc, #116]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036fe:	e001      	b.n	8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003700:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4919      	ldr	r1, [pc, #100]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800370c:	428b      	cmp	r3, r1
 800370e:	d101      	bne.n	8003714 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003710:	4b18      	ldr	r3, [pc, #96]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003712:	e001      	b.n	8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003714:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003718:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800371c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	f043 0202 	orr.w	r2, r3, #2
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff fdfa 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b08      	cmp	r3, #8
 8003740:	d136      	bne.n	80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d031      	beq.n	80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a07      	ldr	r2, [pc, #28]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003758:	e001      	b.n	800375e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800375a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4902      	ldr	r1, [pc, #8]	; (8003770 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003766:	428b      	cmp	r3, r1
 8003768:	d106      	bne.n	8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800376a:	4b02      	ldr	r3, [pc, #8]	; (8003774 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800376c:	e006      	b.n	800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800376e:	bf00      	nop
 8003770:	40003800 	.word	0x40003800
 8003774:	40003400 	.word	0x40003400
 8003778:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003780:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003790:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	f043 0204 	orr.w	r2, r3, #4
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff fdc0 	bl	800332c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ac:	e000      	b.n	80037b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037ae:	bf00      	nop
}
 80037b0:	bf00      	nop
 80037b2:	3720      	adds	r7, #32
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	1c99      	adds	r1, r3, #2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6251      	str	r1, [r2, #36]	; 0x24
 80037de:	881a      	ldrh	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d113      	bne.n	8003826 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800380c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d106      	bne.n	8003826 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff ffc9 	bl	80037b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	1c99      	adds	r1, r3, #2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6251      	str	r1, [r2, #36]	; 0x24
 8003842:	8819      	ldrh	r1, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1d      	ldr	r2, [pc, #116]	; (80038c0 <I2SEx_TxISR_I2SExt+0x90>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <I2SEx_TxISR_I2SExt+0x22>
 800384e:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <I2SEx_TxISR_I2SExt+0x94>)
 8003850:	e001      	b.n	8003856 <I2SEx_TxISR_I2SExt+0x26>
 8003852:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003856:	460a      	mov	r2, r1
 8003858:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d121      	bne.n	80038b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a12      	ldr	r2, [pc, #72]	; (80038c0 <I2SEx_TxISR_I2SExt+0x90>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d101      	bne.n	8003880 <I2SEx_TxISR_I2SExt+0x50>
 800387c:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <I2SEx_TxISR_I2SExt+0x94>)
 800387e:	e001      	b.n	8003884 <I2SEx_TxISR_I2SExt+0x54>
 8003880:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	490d      	ldr	r1, [pc, #52]	; (80038c0 <I2SEx_TxISR_I2SExt+0x90>)
 800388c:	428b      	cmp	r3, r1
 800388e:	d101      	bne.n	8003894 <I2SEx_TxISR_I2SExt+0x64>
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <I2SEx_TxISR_I2SExt+0x94>)
 8003892:	e001      	b.n	8003898 <I2SEx_TxISR_I2SExt+0x68>
 8003894:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003898:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800389c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d106      	bne.n	80038b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ff81 	bl	80037b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40003800 	.word	0x40003800
 80038c4:	40003400 	.word	0x40003400

080038c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68d8      	ldr	r0, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	1c99      	adds	r1, r3, #2
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038e0:	b282      	uxth	r2, r0
 80038e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d113      	bne.n	8003924 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800390a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7ff ff4a 	bl	80037b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a20      	ldr	r2, [pc, #128]	; (80039bc <I2SEx_RxISR_I2SExt+0x90>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d101      	bne.n	8003942 <I2SEx_RxISR_I2SExt+0x16>
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <I2SEx_RxISR_I2SExt+0x94>)
 8003940:	e001      	b.n	8003946 <I2SEx_RxISR_I2SExt+0x1a>
 8003942:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003946:	68d8      	ldr	r0, [r3, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	1c99      	adds	r1, r3, #2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003952:	b282      	uxth	r2, r0
 8003954:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d121      	bne.n	80039b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a12      	ldr	r2, [pc, #72]	; (80039bc <I2SEx_RxISR_I2SExt+0x90>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <I2SEx_RxISR_I2SExt+0x50>
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <I2SEx_RxISR_I2SExt+0x94>)
 800397a:	e001      	b.n	8003980 <I2SEx_RxISR_I2SExt+0x54>
 800397c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	490d      	ldr	r1, [pc, #52]	; (80039bc <I2SEx_RxISR_I2SExt+0x90>)
 8003988:	428b      	cmp	r3, r1
 800398a:	d101      	bne.n	8003990 <I2SEx_RxISR_I2SExt+0x64>
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <I2SEx_RxISR_I2SExt+0x94>)
 800398e:	e001      	b.n	8003994 <I2SEx_RxISR_I2SExt+0x68>
 8003990:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003994:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003998:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d106      	bne.n	80039b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff ff03 	bl	80037b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40003800 	.word	0x40003800
 80039c0:	40003400 	.word	0x40003400

080039c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e101      	b.n	8003bda <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d106      	bne.n	80039f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f006 ff25 	bl	800a840 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2203      	movs	r2, #3
 80039fa:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a04:	d102      	bne.n	8003a0c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f003 fb1c 	bl	800704e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	7c1a      	ldrb	r2, [r3, #16]
 8003a1e:	f88d 2000 	strb.w	r2, [sp]
 8003a22:	3304      	adds	r3, #4
 8003a24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a26:	f003 f9fb 	bl	8006e20 <USB_CoreInit>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0ce      	b.n	8003bda <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2100      	movs	r1, #0
 8003a42:	4618      	mov	r0, r3
 8003a44:	f003 fb14 	bl	8007070 <USB_SetCurrentMode>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e0bf      	b.n	8003bda <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	73fb      	strb	r3, [r7, #15]
 8003a5e:	e04a      	b.n	8003af6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a60:	7bfa      	ldrb	r2, [r7, #15]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3315      	adds	r3, #21
 8003a70:	2201      	movs	r2, #1
 8003a72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a74:	7bfa      	ldrb	r2, [r7, #15]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	3314      	adds	r3, #20
 8003a84:	7bfa      	ldrb	r2, [r7, #15]
 8003a86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a88:	7bfa      	ldrb	r2, [r7, #15]
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	b298      	uxth	r0, r3
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	332e      	adds	r3, #46	; 0x2e
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	3318      	adds	r3, #24
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	331c      	adds	r3, #28
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ac8:	7bfa      	ldrb	r2, [r7, #15]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3320      	adds	r3, #32
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003adc:	7bfa      	ldrb	r2, [r7, #15]
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	3324      	adds	r3, #36	; 0x24
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	3301      	adds	r3, #1
 8003af4:	73fb      	strb	r3, [r7, #15]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	791b      	ldrb	r3, [r3, #4]
 8003afa:	7bfa      	ldrb	r2, [r7, #15]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d3af      	bcc.n	8003a60 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b00:	2300      	movs	r3, #0
 8003b02:	73fb      	strb	r3, [r7, #15]
 8003b04:	e044      	b.n	8003b90 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b06:	7bfa      	ldrb	r2, [r7, #15]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003b2e:	7bfa      	ldrb	r2, [r7, #15]
 8003b30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b32:	7bfa      	ldrb	r2, [r7, #15]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b48:	7bfa      	ldrb	r2, [r7, #15]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b5e:	7bfa      	ldrb	r2, [r7, #15]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	791b      	ldrb	r3, [r3, #4]
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d3b5      	bcc.n	8003b06 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	7c1a      	ldrb	r2, [r3, #16]
 8003ba2:	f88d 2000 	strb.w	r2, [sp]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003baa:	f003 faad 	bl	8007108 <USB_DevInit>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e00c      	b.n	8003bda <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f004 faf1 	bl	80081ba <USB_DevDisconnect>

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_PCD_Start+0x1c>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e022      	b.n	8003c44 <HAL_PCD_Start+0x62>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d009      	beq.n	8003c26 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d105      	bne.n	8003c26 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f003 f9fe 	bl	800702c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f004 fa9f 	bl	8008178 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c4c:	b590      	push	{r4, r7, lr}
 8003c4e:	b08d      	sub	sp, #52	; 0x34
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f004 fb5d 	bl	8008322 <USB_GetMode>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f040 848c 	bne.w	8004588 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f004 fac1 	bl	80081fc <USB_ReadInterrupts>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8482 	beq.w	8004586 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	0a1b      	lsrs	r3, r3, #8
 8003c8c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f004 faae 	bl	80081fc <USB_ReadInterrupts>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d107      	bne.n	8003cba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f002 0202 	and.w	r2, r2, #2
 8003cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f004 fa9c 	bl	80081fc <USB_ReadInterrupts>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b10      	cmp	r3, #16
 8003ccc:	d161      	bne.n	8003d92 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699a      	ldr	r2, [r3, #24]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0210 	bic.w	r2, r2, #16
 8003cdc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	f003 020f 	and.w	r2, r3, #15
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	0c5b      	lsrs	r3, r3, #17
 8003d02:	f003 030f 	and.w	r3, r3, #15
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d124      	bne.n	8003d54 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d035      	beq.n	8003d82 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	6a38      	ldr	r0, [r7, #32]
 8003d2a:	f004 f8d3 	bl	8007ed4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d3a:	441a      	add	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	695a      	ldr	r2, [r3, #20]
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d4c:	441a      	add	r2, r3
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	615a      	str	r2, [r3, #20]
 8003d52:	e016      	b.n	8003d82 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	0c5b      	lsrs	r3, r3, #17
 8003d58:	f003 030f 	and.w	r3, r3, #15
 8003d5c:	2b06      	cmp	r3, #6
 8003d5e:	d110      	bne.n	8003d82 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003d66:	2208      	movs	r2, #8
 8003d68:	4619      	mov	r1, r3
 8003d6a:	6a38      	ldr	r0, [r7, #32]
 8003d6c:	f004 f8b2 	bl	8007ed4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	091b      	lsrs	r3, r3, #4
 8003d78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d7c:	441a      	add	r2, r3
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699a      	ldr	r2, [r3, #24]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0210 	orr.w	r2, r2, #16
 8003d90:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f004 fa30 	bl	80081fc <USB_ReadInterrupts>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003da2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003da6:	f040 80a7 	bne.w	8003ef8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f004 fa35 	bl	8008222 <USB_ReadDevAllOutEpInterrupt>
 8003db8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003dba:	e099      	b.n	8003ef0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 808e 	beq.w	8003ee4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f004 fa59 	bl	800828a <USB_ReadDevOutEPInterrupt>
 8003dd8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00c      	beq.n	8003dfe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df0:	461a      	mov	r2, r3
 8003df2:	2301      	movs	r3, #1
 8003df4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003df6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 fea1 	bl	8004b40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00c      	beq.n	8003e22 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e14:	461a      	mov	r2, r3
 8003e16:	2308      	movs	r3, #8
 8003e18:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 ff77 	bl	8004d10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e38:	461a      	mov	r2, r3
 8003e3a:	2310      	movs	r3, #16
 8003e3c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d030      	beq.n	8003eaa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e50:	2b80      	cmp	r3, #128	; 0x80
 8003e52:	d109      	bne.n	8003e68 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e66:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	78db      	ldrb	r3, [r3, #3]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d108      	bne.n	8003e98 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f006 fde8 	bl	800aa68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2320      	movs	r3, #32
 8003ec4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d009      	beq.n	8003ee4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003edc:	461a      	mov	r2, r3
 8003ede:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ee2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eec:	085b      	lsrs	r3, r3, #1
 8003eee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f47f af62 	bne.w	8003dbc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f004 f97d 	bl	80081fc <USB_ReadInterrupts>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f0c:	f040 80db 	bne.w	80040c6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f004 f99e 	bl	8008256 <USB_ReadDevAllInEpInterrupt>
 8003f1a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f20:	e0cd      	b.n	80040be <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 80c2 	beq.w	80040b2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	4611      	mov	r1, r2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f004 f9c4 	bl	80082c6 <USB_ReadDevInEPInterrupt>
 8003f3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d057      	beq.n	8003ffa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	2201      	movs	r2, #1
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69f9      	ldr	r1, [r7, #28]
 8003f66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	799b      	ldrb	r3, [r3, #6]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d132      	bne.n	8003fee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	3320      	adds	r3, #32
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4403      	add	r3, r0
 8003fa8:	331c      	adds	r3, #28
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4419      	add	r1, r3
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4403      	add	r3, r0
 8003fbc:	3320      	adds	r3, #32
 8003fbe:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d113      	bne.n	8003fee <HAL_PCD_IRQHandler+0x3a2>
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fca:	4613      	mov	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	3324      	adds	r3, #36	; 0x24
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d108      	bne.n	8003fee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2101      	movs	r1, #1
 8003fea:	f004 f9cb 	bl	8008384 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f006 fcb2 	bl	800a95e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004010:	461a      	mov	r2, r3
 8004012:	2308      	movs	r3, #8
 8004014:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402c:	461a      	mov	r2, r3
 800402e:	2310      	movs	r3, #16
 8004030:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004048:	461a      	mov	r2, r3
 800404a:	2340      	movs	r3, #64	; 0x40
 800404c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d023      	beq.n	80040a0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004058:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800405a:	6a38      	ldr	r0, [r7, #32]
 800405c:	f003 f9b8 	bl	80073d0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	3310      	adds	r3, #16
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	4413      	add	r3, r2
 8004070:	3304      	adds	r3, #4
 8004072:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	78db      	ldrb	r3, [r3, #3]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d108      	bne.n	800408e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	2200      	movs	r2, #0
 8004080:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	b2db      	uxtb	r3, r3
 8004086:	4619      	mov	r1, r3
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f006 fcff 	bl	800aa8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409a:	461a      	mov	r2, r3
 800409c:	2302      	movs	r3, #2
 800409e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80040aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fcbb 	bl	8004a28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	3301      	adds	r3, #1
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	085b      	lsrs	r3, r3, #1
 80040bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f47f af2e 	bne.w	8003f22 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f004 f896 	bl	80081fc <USB_ReadInterrupts>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040da:	d122      	bne.n	8004122 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d108      	bne.n	800410c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004102:	2100      	movs	r1, #0
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fea1 	bl	8004e4c <HAL_PCDEx_LPM_Callback>
 800410a:	e002      	b.n	8004112 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f006 fc9d 	bl	800aa4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695a      	ldr	r2, [r3, #20]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f004 f868 	bl	80081fc <USB_ReadInterrupts>
 800412c:	4603      	mov	r3, r0
 800412e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004136:	d112      	bne.n	800415e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d102      	bne.n	800414e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f006 fc59 	bl	800aa00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800415c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f004 f84a 	bl	80081fc <USB_ReadInterrupts>
 8004168:	4603      	mov	r3, r0
 800416a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800416e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004172:	f040 80b7 	bne.w	80042e4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2110      	movs	r1, #16
 8004190:	4618      	mov	r0, r3
 8004192:	f003 f91d 	bl	80073d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004196:	2300      	movs	r3, #0
 8004198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800419a:	e046      	b.n	800422a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a8:	461a      	mov	r2, r3
 80041aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c0:	0151      	lsls	r1, r2, #5
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	440a      	add	r2, r1
 80041c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041dc:	461a      	mov	r2, r3
 80041de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f4:	0151      	lsls	r1, r2, #5
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	440a      	add	r2, r1
 80041fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004202:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004214:	0151      	lsls	r1, r2, #5
 8004216:	69fa      	ldr	r2, [r7, #28]
 8004218:	440a      	add	r2, r1
 800421a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800421e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004222:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004226:	3301      	adds	r3, #1
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	791b      	ldrb	r3, [r3, #4]
 800422e:	461a      	mov	r2, r3
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004232:	4293      	cmp	r3, r2
 8004234:	d3b2      	bcc.n	800419c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004244:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004248:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	7bdb      	ldrb	r3, [r3, #15]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d016      	beq.n	8004280 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004262:	f043 030b 	orr.w	r3, r3, #11
 8004266:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004278:	f043 030b 	orr.w	r3, r3, #11
 800427c:	6453      	str	r3, [r2, #68]	; 0x44
 800427e:	e015      	b.n	80042ac <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800428e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004292:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004296:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a6:	f043 030b 	orr.w	r3, r3, #11
 80042aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042ce:	461a      	mov	r2, r3
 80042d0:	f004 f858 	bl	8008384 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80042e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f003 ff87 	bl	80081fc <USB_ReadInterrupts>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f8:	d123      	bne.n	8004342 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f004 f81d 	bl	800833e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f003 f8da 	bl	80074c2 <USB_GetDevSpeed>
 800430e:	4603      	mov	r3, r0
 8004310:	461a      	mov	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681c      	ldr	r4, [r3, #0]
 800431a:	f001 fa07 	bl	800572c <HAL_RCC_GetHCLKFreq>
 800431e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004324:	461a      	mov	r2, r3
 8004326:	4620      	mov	r0, r4
 8004328:	f002 fdde 	bl	8006ee8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f006 fb3e 	bl	800a9ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695a      	ldr	r2, [r3, #20]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004340:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f003 ff58 	bl	80081fc <USB_ReadInterrupts>
 800434c:	4603      	mov	r3, r0
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b08      	cmp	r3, #8
 8004354:	d10a      	bne.n	800436c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f006 fb1b 	bl	800a992 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695a      	ldr	r2, [r3, #20]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f002 0208 	and.w	r2, r2, #8
 800436a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f003 ff43 	bl	80081fc <USB_ReadInterrupts>
 8004376:	4603      	mov	r3, r0
 8004378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437c:	2b80      	cmp	r3, #128	; 0x80
 800437e:	d123      	bne.n	80043c8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800438c:	2301      	movs	r3, #1
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
 8004390:	e014      	b.n	80043bc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004396:	4613      	mov	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	f203 2357 	addw	r3, r3, #599	; 0x257
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d105      	bne.n	80043b6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	4619      	mov	r1, r3
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fb08 	bl	80049c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	3301      	adds	r3, #1
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	791b      	ldrb	r3, [r3, #4]
 80043c0:	461a      	mov	r2, r3
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d3e4      	bcc.n	8004392 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f003 ff15 	bl	80081fc <USB_ReadInterrupts>
 80043d2:	4603      	mov	r3, r0
 80043d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043dc:	d13c      	bne.n	8004458 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043de:	2301      	movs	r3, #1
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
 80043e2:	e02b      	b.n	800443c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f8:	4613      	mov	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	4413      	add	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	3318      	adds	r3, #24
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d115      	bne.n	8004436 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800440a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800440c:	2b00      	cmp	r3, #0
 800440e:	da12      	bge.n	8004436 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	3317      	adds	r3, #23
 8004420:	2201      	movs	r2, #1
 8004422:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	b2db      	uxtb	r3, r3
 8004428:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800442c:	b2db      	uxtb	r3, r3
 800442e:	4619      	mov	r1, r3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fac8 	bl	80049c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	3301      	adds	r3, #1
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	791b      	ldrb	r3, [r3, #4]
 8004440:	461a      	mov	r2, r3
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	4293      	cmp	r3, r2
 8004446:	d3cd      	bcc.n	80043e4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695a      	ldr	r2, [r3, #20]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004456:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f003 fecd 	bl	80081fc <USB_ReadInterrupts>
 8004462:	4603      	mov	r3, r0
 8004464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004468:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800446c:	d156      	bne.n	800451c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800446e:	2301      	movs	r3, #1
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
 8004472:	e045      	b.n	8004500 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004488:	4613      	mov	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d12e      	bne.n	80044fa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800449c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800449e:	2b00      	cmp	r3, #0
 80044a0:	da2b      	bge.n	80044fa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80044ae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d121      	bne.n	80044fa <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ba:	4613      	mov	r3, r2
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	f203 2357 	addw	r3, r3, #599	; 0x257
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044f6:	6053      	str	r3, [r2, #4]
            break;
 80044f8:	e008      	b.n	800450c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	3301      	adds	r3, #1
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	791b      	ldrb	r3, [r3, #4]
 8004504:	461a      	mov	r2, r3
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	4293      	cmp	r3, r2
 800450a:	d3b3      	bcc.n	8004474 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695a      	ldr	r2, [r3, #20]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800451a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f003 fe6b 	bl	80081fc <USB_ReadInterrupts>
 8004526:	4603      	mov	r3, r0
 8004528:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800452c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004530:	d10a      	bne.n	8004548 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f006 fabc 	bl	800aab0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004546:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f003 fe55 	bl	80081fc <USB_ReadInterrupts>
 8004552:	4603      	mov	r3, r0
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b04      	cmp	r3, #4
 800455a:	d115      	bne.n	8004588 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f006 faac 	bl	800aacc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6859      	ldr	r1, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	430a      	orrs	r2, r1
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	e000      	b.n	8004588 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004586:	bf00      	nop
    }
  }
}
 8004588:	3734      	adds	r7, #52	; 0x34
 800458a:	46bd      	mov	sp, r7
 800458c:	bd90      	pop	{r4, r7, pc}

0800458e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b082      	sub	sp, #8
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	460b      	mov	r3, r1
 8004598:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_PCD_SetAddress+0x1a>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e012      	b.n	80045ce <HAL_PCD_SetAddress+0x40>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	4611      	mov	r1, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	f003 fdb4 	bl	800812c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	4608      	mov	r0, r1
 80045e0:	4611      	mov	r1, r2
 80045e2:	461a      	mov	r2, r3
 80045e4:	4603      	mov	r3, r0
 80045e6:	70fb      	strb	r3, [r7, #3]
 80045e8:	460b      	mov	r3, r1
 80045ea:	803b      	strh	r3, [r7, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	da0f      	bge.n	800461c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	f003 020f 	and.w	r2, r3, #15
 8004602:	4613      	mov	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	3310      	adds	r3, #16
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	4413      	add	r3, r2
 8004610:	3304      	adds	r3, #4
 8004612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2201      	movs	r2, #1
 8004618:	705a      	strb	r2, [r3, #1]
 800461a:	e00f      	b.n	800463c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	f003 020f 	and.w	r2, r3, #15
 8004622:	4613      	mov	r3, r2
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	4413      	add	r3, r2
 8004632:	3304      	adds	r3, #4
 8004634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	b2da      	uxtb	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004648:	883a      	ldrh	r2, [r7, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	78ba      	ldrb	r2, [r7, #2]
 8004652:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	785b      	ldrb	r3, [r3, #1]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d004      	beq.n	8004666 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004666:	78bb      	ldrb	r3, [r7, #2]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d102      	bne.n	8004672 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_PCD_EP_Open+0xaa>
 800467c:	2302      	movs	r3, #2
 800467e:	e00e      	b.n	800469e <HAL_PCD_EP_Open+0xc8>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68f9      	ldr	r1, [r7, #12]
 800468e:	4618      	mov	r0, r3
 8004690:	f002 ff3c 	bl	800750c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800469c:	7afb      	ldrb	r3, [r7, #11]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	460b      	mov	r3, r1
 80046b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	da0f      	bge.n	80046da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046ba:	78fb      	ldrb	r3, [r7, #3]
 80046bc:	f003 020f 	and.w	r2, r3, #15
 80046c0:	4613      	mov	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4413      	add	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	3310      	adds	r3, #16
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	4413      	add	r3, r2
 80046ce:	3304      	adds	r3, #4
 80046d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	705a      	strb	r2, [r3, #1]
 80046d8:	e00f      	b.n	80046fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046da:	78fb      	ldrb	r3, [r7, #3]
 80046dc:	f003 020f 	and.w	r2, r3, #15
 80046e0:	4613      	mov	r3, r2
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	4413      	add	r3, r2
 80046f0:	3304      	adds	r3, #4
 80046f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80046fa:	78fb      	ldrb	r3, [r7, #3]
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	b2da      	uxtb	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <HAL_PCD_EP_Close+0x6e>
 8004710:	2302      	movs	r3, #2
 8004712:	e00e      	b.n	8004732 <HAL_PCD_EP_Close+0x8c>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68f9      	ldr	r1, [r7, #12]
 8004722:	4618      	mov	r0, r3
 8004724:	f002 ff7a 	bl	800761c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b086      	sub	sp, #24
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
 8004746:	460b      	mov	r3, r1
 8004748:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800474a:	7afb      	ldrb	r3, [r7, #11]
 800474c:	f003 020f 	and.w	r2, r3, #15
 8004750:	4613      	mov	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	3304      	adds	r3, #4
 8004762:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2200      	movs	r2, #0
 8004774:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2200      	movs	r2, #0
 800477a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800477c:	7afb      	ldrb	r3, [r7, #11]
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	b2da      	uxtb	r2, r3
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	799b      	ldrb	r3, [r3, #6]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d102      	bne.n	8004796 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6818      	ldr	r0, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	799b      	ldrb	r3, [r3, #6]
 800479e:	461a      	mov	r2, r3
 80047a0:	6979      	ldr	r1, [r7, #20]
 80047a2:	f003 f817 	bl	80077d4 <USB_EPStartXfer>

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3718      	adds	r7, #24
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047bc:	78fb      	ldrb	r3, [r7, #3]
 80047be:	f003 020f 	and.w	r2, r3, #15
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80047d2:	681b      	ldr	r3, [r3, #0]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	607a      	str	r2, [r7, #4]
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	460b      	mov	r3, r1
 80047ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047f0:	7afb      	ldrb	r3, [r7, #11]
 80047f2:	f003 020f 	and.w	r2, r3, #15
 80047f6:	4613      	mov	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	3310      	adds	r3, #16
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	3304      	adds	r3, #4
 8004806:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2200      	movs	r2, #0
 8004818:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2201      	movs	r2, #1
 800481e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004820:	7afb      	ldrb	r3, [r7, #11]
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	b2da      	uxtb	r2, r3
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	799b      	ldrb	r3, [r3, #6]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d102      	bne.n	800483a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6818      	ldr	r0, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	799b      	ldrb	r3, [r3, #6]
 8004842:	461a      	mov	r2, r3
 8004844:	6979      	ldr	r1, [r7, #20]
 8004846:	f002 ffc5 	bl	80077d4 <USB_EPStartXfer>

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	7912      	ldrb	r2, [r2, #4]
 800486a:	4293      	cmp	r3, r2
 800486c:	d901      	bls.n	8004872 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e04f      	b.n	8004912 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004872:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004876:	2b00      	cmp	r3, #0
 8004878:	da0f      	bge.n	800489a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800487a:	78fb      	ldrb	r3, [r7, #3]
 800487c:	f003 020f 	and.w	r2, r3, #15
 8004880:	4613      	mov	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	3310      	adds	r3, #16
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	4413      	add	r3, r2
 800488e:	3304      	adds	r3, #4
 8004890:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	705a      	strb	r2, [r3, #1]
 8004898:	e00d      	b.n	80048b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800489a:	78fa      	ldrb	r2, [r7, #3]
 800489c:	4613      	mov	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	4413      	add	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	4413      	add	r3, r2
 80048ac:	3304      	adds	r3, #4
 80048ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <HAL_PCD_EP_SetStall+0x82>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e01d      	b.n	8004912 <HAL_PCD_EP_SetStall+0xbe>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68f9      	ldr	r1, [r7, #12]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f003 fb4d 	bl	8007f84 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048ea:	78fb      	ldrb	r3, [r7, #3]
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d109      	bne.n	8004908 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6818      	ldr	r0, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	7999      	ldrb	r1, [r3, #6]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004902:	461a      	mov	r2, r3
 8004904:	f003 fd3e 	bl	8008384 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b084      	sub	sp, #16
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	460b      	mov	r3, r1
 8004924:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	7912      	ldrb	r2, [r2, #4]
 8004930:	4293      	cmp	r3, r2
 8004932:	d901      	bls.n	8004938 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e042      	b.n	80049be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800493c:	2b00      	cmp	r3, #0
 800493e:	da0f      	bge.n	8004960 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004940:	78fb      	ldrb	r3, [r7, #3]
 8004942:	f003 020f 	and.w	r2, r3, #15
 8004946:	4613      	mov	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	3310      	adds	r3, #16
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	4413      	add	r3, r2
 8004954:	3304      	adds	r3, #4
 8004956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2201      	movs	r2, #1
 800495c:	705a      	strb	r2, [r3, #1]
 800495e:	e00f      	b.n	8004980 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	f003 020f 	and.w	r2, r3, #15
 8004966:	4613      	mov	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	4413      	add	r3, r2
 8004976:	3304      	adds	r3, #4
 8004978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004986:	78fb      	ldrb	r3, [r7, #3]
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	b2da      	uxtb	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_PCD_EP_ClrStall+0x86>
 800499c:	2302      	movs	r3, #2
 800499e:	e00e      	b.n	80049be <HAL_PCD_EP_ClrStall+0xa4>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68f9      	ldr	r1, [r7, #12]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f003 fb56 	bl	8008060 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	460b      	mov	r3, r1
 80049d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	da0c      	bge.n	80049f4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	f003 020f 	and.w	r2, r3, #15
 80049e0:	4613      	mov	r3, r2
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	4413      	add	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	3310      	adds	r3, #16
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4413      	add	r3, r2
 80049ee:	3304      	adds	r3, #4
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	e00c      	b.n	8004a0e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	f003 020f 	and.w	r2, r3, #15
 80049fa:	4613      	mov	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	4413      	add	r3, r2
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68f9      	ldr	r1, [r7, #12]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f003 f975 	bl	8007d04 <USB_EPStopXfer>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a1e:	7afb      	ldrb	r3, [r7, #11]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08a      	sub	sp, #40	; 0x28
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	3310      	adds	r3, #16
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	695a      	ldr	r2, [r3, #20]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d901      	bls.n	8004a60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e06b      	b.n	8004b38 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d902      	bls.n	8004a7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	3303      	adds	r3, #3
 8004a80:	089b      	lsrs	r3, r3, #2
 8004a82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a84:	e02a      	b.n	8004adc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d902      	bls.n	8004aa2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	3303      	adds	r3, #3
 8004aa6:	089b      	lsrs	r3, r3, #2
 8004aa8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	68d9      	ldr	r1, [r3, #12]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	4603      	mov	r3, r0
 8004abe:	6978      	ldr	r0, [r7, #20]
 8004ac0:	f003 f9ca 	bl	8007e58 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	68da      	ldr	r2, [r3, #12]
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	441a      	add	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	695a      	ldr	r2, [r3, #20]
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	441a      	add	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d809      	bhi.n	8004b06 <PCD_WriteEmptyTxFifo+0xde>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	695a      	ldr	r2, [r3, #20]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d203      	bcs.n	8004b06 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1bf      	bne.n	8004a86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	691a      	ldr	r2, [r3, #16]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d811      	bhi.n	8004b36 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	2201      	movs	r2, #1
 8004b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	6939      	ldr	r1, [r7, #16]
 8004b2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b32:	4013      	ands	r3, r2
 8004b34:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3720      	adds	r7, #32
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	333c      	adds	r3, #60	; 0x3c
 8004b58:	3304      	adds	r3, #4
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	799b      	ldrb	r3, [r3, #6]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d17b      	bne.n	8004c6e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d015      	beq.n	8004bac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	4a61      	ldr	r2, [pc, #388]	; (8004d08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	f240 80b9 	bls.w	8004cfc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80b3 	beq.w	8004cfc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ba8:	6093      	str	r3, [r2, #8]
 8004baa:	e0a7      	b.n	8004cfc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d009      	beq.n	8004bca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	2320      	movs	r3, #32
 8004bc6:	6093      	str	r3, [r2, #8]
 8004bc8:	e098      	b.n	8004cfc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f040 8093 	bne.w	8004cfc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	4a4b      	ldr	r2, [pc, #300]	; (8004d08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d90f      	bls.n	8004bfe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bfa:	6093      	str	r3, [r2, #8]
 8004bfc:	e07e      	b.n	8004cfc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	4413      	add	r3, r2
 8004c10:	3304      	adds	r3, #4
 8004c12:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a1a      	ldr	r2, [r3, #32]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	0159      	lsls	r1, r3, #5
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	440b      	add	r3, r1
 8004c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c2a:	1ad2      	subs	r2, r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d114      	bne.n	8004c60 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d109      	bne.n	8004c52 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6818      	ldr	r0, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004c48:	461a      	mov	r2, r3
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	f003 fb9a 	bl	8008384 <USB_EP0_OutStart>
 8004c50:	e006      	b.n	8004c60 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	441a      	add	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f005 fe5e 	bl	800a928 <HAL_PCD_DataOutStageCallback>
 8004c6c:	e046      	b.n	8004cfc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	4a26      	ldr	r2, [pc, #152]	; (8004d0c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d124      	bne.n	8004cc0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c92:	6093      	str	r3, [r2, #8]
 8004c94:	e032      	b.n	8004cfc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cac:	461a      	mov	r2, r3
 8004cae:	2320      	movs	r3, #32
 8004cb0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f005 fe35 	bl	800a928 <HAL_PCD_DataOutStageCallback>
 8004cbe:	e01d      	b.n	8004cfc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d114      	bne.n	8004cf0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d108      	bne.n	8004cf0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6818      	ldr	r0, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004ce8:	461a      	mov	r2, r3
 8004cea:	2100      	movs	r1, #0
 8004cec:	f003 fb4a 	bl	8008384 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f005 fe16 	bl	800a928 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	4f54300a 	.word	0x4f54300a
 8004d0c:	4f54310a 	.word	0x4f54310a

08004d10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	333c      	adds	r3, #60	; 0x3c
 8004d28:	3304      	adds	r3, #4
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d90e      	bls.n	8004d64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d009      	beq.n	8004d64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f005 fdcd 	bl	800a904 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4a0a      	ldr	r2, [pc, #40]	; (8004d98 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d90c      	bls.n	8004d8c <PCD_EP_OutSetupPacket_int+0x7c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	799b      	ldrb	r3, [r3, #6]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d108      	bne.n	8004d8c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004d84:	461a      	mov	r2, r3
 8004d86:	2101      	movs	r1, #1
 8004d88:	f003 fafc 	bl	8008384 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	4f54300a 	.word	0x4f54300a

08004d9c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	70fb      	strb	r3, [r7, #3]
 8004da8:	4613      	mov	r3, r2
 8004daa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004db4:	78fb      	ldrb	r3, [r7, #3]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d107      	bne.n	8004dca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004dba:	883b      	ldrh	r3, [r7, #0]
 8004dbc:	0419      	lsls	r1, r3, #16
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	629a      	str	r2, [r3, #40]	; 0x28
 8004dc8:	e028      	b.n	8004e1c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd0:	0c1b      	lsrs	r3, r3, #16
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004dd8:	2300      	movs	r3, #0
 8004dda:	73fb      	strb	r3, [r7, #15]
 8004ddc:	e00d      	b.n	8004dfa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	3340      	adds	r3, #64	; 0x40
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	0c1b      	lsrs	r3, r3, #16
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	4413      	add	r3, r2
 8004df2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	3301      	adds	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
 8004dfa:	7bfa      	ldrb	r2, [r7, #15]
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d3ec      	bcc.n	8004dde <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e04:	883b      	ldrh	r3, [r7, #0]
 8004e06:	0418      	lsls	r0, r3, #16
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6819      	ldr	r1, [r3, #0]
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	4302      	orrs	r2, r0
 8004e14:	3340      	adds	r3, #64	; 0x40
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	440b      	add	r3, r1
 8004e1a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	460b      	mov	r3, r1
 8004e34:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	887a      	ldrh	r2, [r7, #2]
 8004e3c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e267      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d075      	beq.n	8004f6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e82:	4b88      	ldr	r3, [pc, #544]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 030c 	and.w	r3, r3, #12
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d00c      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e8e:	4b85      	ldr	r3, [pc, #532]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e96:	2b08      	cmp	r3, #8
 8004e98:	d112      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e9a:	4b82      	ldr	r3, [pc, #520]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ea6:	d10b      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea8:	4b7e      	ldr	r3, [pc, #504]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d05b      	beq.n	8004f6c <HAL_RCC_OscConfig+0x108>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d157      	bne.n	8004f6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e242      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec8:	d106      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x74>
 8004eca:	4b76      	ldr	r3, [pc, #472]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a75      	ldr	r2, [pc, #468]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e01d      	b.n	8004f14 <HAL_RCC_OscConfig+0xb0>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ee0:	d10c      	bne.n	8004efc <HAL_RCC_OscConfig+0x98>
 8004ee2:	4b70      	ldr	r3, [pc, #448]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a6f      	ldr	r2, [pc, #444]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	4b6d      	ldr	r3, [pc, #436]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a6c      	ldr	r2, [pc, #432]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	e00b      	b.n	8004f14 <HAL_RCC_OscConfig+0xb0>
 8004efc:	4b69      	ldr	r3, [pc, #420]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a68      	ldr	r2, [pc, #416]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	4b66      	ldr	r3, [pc, #408]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a65      	ldr	r2, [pc, #404]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d013      	beq.n	8004f44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1c:	f7fc fb8a 	bl	8001634 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f24:	f7fc fb86 	bl	8001634 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b64      	cmp	r3, #100	; 0x64
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e207      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f36:	4b5b      	ldr	r3, [pc, #364]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0f0      	beq.n	8004f24 <HAL_RCC_OscConfig+0xc0>
 8004f42:	e014      	b.n	8004f6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f44:	f7fc fb76 	bl	8001634 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f4c:	f7fc fb72 	bl	8001634 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b64      	cmp	r3, #100	; 0x64
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e1f3      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f5e:	4b51      	ldr	r3, [pc, #324]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0xe8>
 8004f6a:	e000      	b.n	8004f6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d063      	beq.n	8005042 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f7a:	4b4a      	ldr	r3, [pc, #296]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 030c 	and.w	r3, r3, #12
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00b      	beq.n	8004f9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f86:	4b47      	ldr	r3, [pc, #284]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d11c      	bne.n	8004fcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f92:	4b44      	ldr	r3, [pc, #272]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d116      	bne.n	8004fcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f9e:	4b41      	ldr	r3, [pc, #260]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x152>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d001      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e1c7      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb6:	4b3b      	ldr	r3, [pc, #236]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4937      	ldr	r1, [pc, #220]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fca:	e03a      	b.n	8005042 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d020      	beq.n	8005016 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fd4:	4b34      	ldr	r3, [pc, #208]	; (80050a8 <HAL_RCC_OscConfig+0x244>)
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fda:	f7fc fb2b 	bl	8001634 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fe2:	f7fc fb27 	bl	8001634 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e1a8      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff4:	4b2b      	ldr	r3, [pc, #172]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0f0      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005000:	4b28      	ldr	r3, [pc, #160]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	4925      	ldr	r1, [pc, #148]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8005010:	4313      	orrs	r3, r2
 8005012:	600b      	str	r3, [r1, #0]
 8005014:	e015      	b.n	8005042 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005016:	4b24      	ldr	r3, [pc, #144]	; (80050a8 <HAL_RCC_OscConfig+0x244>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fc fb0a 	bl	8001634 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005024:	f7fc fb06 	bl	8001634 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e187      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005036:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d036      	beq.n	80050bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d016      	beq.n	8005084 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005056:	4b15      	ldr	r3, [pc, #84]	; (80050ac <HAL_RCC_OscConfig+0x248>)
 8005058:	2201      	movs	r2, #1
 800505a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505c:	f7fc faea 	bl	8001634 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005064:	f7fc fae6 	bl	8001634 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e167      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005076:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <HAL_RCC_OscConfig+0x240>)
 8005078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0f0      	beq.n	8005064 <HAL_RCC_OscConfig+0x200>
 8005082:	e01b      	b.n	80050bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005084:	4b09      	ldr	r3, [pc, #36]	; (80050ac <HAL_RCC_OscConfig+0x248>)
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800508a:	f7fc fad3 	bl	8001634 <HAL_GetTick>
 800508e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005090:	e00e      	b.n	80050b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005092:	f7fc facf 	bl	8001634 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d907      	bls.n	80050b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e150      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
 80050a4:	40023800 	.word	0x40023800
 80050a8:	42470000 	.word	0x42470000
 80050ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b0:	4b88      	ldr	r3, [pc, #544]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 80050b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1ea      	bne.n	8005092 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 8097 	beq.w	80051f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ca:	2300      	movs	r3, #0
 80050cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ce:	4b81      	ldr	r3, [pc, #516]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10f      	bne.n	80050fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050da:	2300      	movs	r3, #0
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	4b7d      	ldr	r3, [pc, #500]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	4a7c      	ldr	r2, [pc, #496]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 80050e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e8:	6413      	str	r3, [r2, #64]	; 0x40
 80050ea:	4b7a      	ldr	r3, [pc, #488]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f2:	60bb      	str	r3, [r7, #8]
 80050f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050f6:	2301      	movs	r3, #1
 80050f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fa:	4b77      	ldr	r3, [pc, #476]	; (80052d8 <HAL_RCC_OscConfig+0x474>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005102:	2b00      	cmp	r3, #0
 8005104:	d118      	bne.n	8005138 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005106:	4b74      	ldr	r3, [pc, #464]	; (80052d8 <HAL_RCC_OscConfig+0x474>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a73      	ldr	r2, [pc, #460]	; (80052d8 <HAL_RCC_OscConfig+0x474>)
 800510c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005112:	f7fc fa8f 	bl	8001634 <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800511a:	f7fc fa8b 	bl	8001634 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e10c      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512c:	4b6a      	ldr	r3, [pc, #424]	; (80052d8 <HAL_RCC_OscConfig+0x474>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0f0      	beq.n	800511a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d106      	bne.n	800514e <HAL_RCC_OscConfig+0x2ea>
 8005140:	4b64      	ldr	r3, [pc, #400]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005144:	4a63      	ldr	r2, [pc, #396]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	6713      	str	r3, [r2, #112]	; 0x70
 800514c:	e01c      	b.n	8005188 <HAL_RCC_OscConfig+0x324>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	2b05      	cmp	r3, #5
 8005154:	d10c      	bne.n	8005170 <HAL_RCC_OscConfig+0x30c>
 8005156:	4b5f      	ldr	r3, [pc, #380]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800515a:	4a5e      	ldr	r2, [pc, #376]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 800515c:	f043 0304 	orr.w	r3, r3, #4
 8005160:	6713      	str	r3, [r2, #112]	; 0x70
 8005162:	4b5c      	ldr	r3, [pc, #368]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005166:	4a5b      	ldr	r2, [pc, #364]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005168:	f043 0301 	orr.w	r3, r3, #1
 800516c:	6713      	str	r3, [r2, #112]	; 0x70
 800516e:	e00b      	b.n	8005188 <HAL_RCC_OscConfig+0x324>
 8005170:	4b58      	ldr	r3, [pc, #352]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005174:	4a57      	ldr	r2, [pc, #348]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005176:	f023 0301 	bic.w	r3, r3, #1
 800517a:	6713      	str	r3, [r2, #112]	; 0x70
 800517c:	4b55      	ldr	r3, [pc, #340]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 800517e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005180:	4a54      	ldr	r2, [pc, #336]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005182:	f023 0304 	bic.w	r3, r3, #4
 8005186:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d015      	beq.n	80051bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005190:	f7fc fa50 	bl	8001634 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005196:	e00a      	b.n	80051ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005198:	f7fc fa4c 	bl	8001634 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e0cb      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ae:	4b49      	ldr	r3, [pc, #292]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 80051b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0ee      	beq.n	8005198 <HAL_RCC_OscConfig+0x334>
 80051ba:	e014      	b.n	80051e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051bc:	f7fc fa3a 	bl	8001634 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c2:	e00a      	b.n	80051da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c4:	f7fc fa36 	bl	8001634 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e0b5      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051da:	4b3e      	ldr	r3, [pc, #248]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1ee      	bne.n	80051c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051e6:	7dfb      	ldrb	r3, [r7, #23]
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d105      	bne.n	80051f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ec:	4b39      	ldr	r3, [pc, #228]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	4a38      	ldr	r2, [pc, #224]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 80051f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 80a1 	beq.w	8005344 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005202:	4b34      	ldr	r3, [pc, #208]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 030c 	and.w	r3, r3, #12
 800520a:	2b08      	cmp	r3, #8
 800520c:	d05c      	beq.n	80052c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	2b02      	cmp	r3, #2
 8005214:	d141      	bne.n	800529a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005216:	4b31      	ldr	r3, [pc, #196]	; (80052dc <HAL_RCC_OscConfig+0x478>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521c:	f7fc fa0a 	bl	8001634 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005224:	f7fc fa06 	bl	8001634 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e087      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005236:	4b27      	ldr	r3, [pc, #156]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f0      	bne.n	8005224 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69da      	ldr	r2, [r3, #28]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	431a      	orrs	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	019b      	lsls	r3, r3, #6
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	085b      	lsrs	r3, r3, #1
 800525a:	3b01      	subs	r3, #1
 800525c:	041b      	lsls	r3, r3, #16
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	061b      	lsls	r3, r3, #24
 8005266:	491b      	ldr	r1, [pc, #108]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 8005268:	4313      	orrs	r3, r2
 800526a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800526c:	4b1b      	ldr	r3, [pc, #108]	; (80052dc <HAL_RCC_OscConfig+0x478>)
 800526e:	2201      	movs	r2, #1
 8005270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005272:	f7fc f9df 	bl	8001634 <HAL_GetTick>
 8005276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800527a:	f7fc f9db 	bl	8001634 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e05c      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800528c:	4b11      	ldr	r3, [pc, #68]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0f0      	beq.n	800527a <HAL_RCC_OscConfig+0x416>
 8005298:	e054      	b.n	8005344 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529a:	4b10      	ldr	r3, [pc, #64]	; (80052dc <HAL_RCC_OscConfig+0x478>)
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a0:	f7fc f9c8 	bl	8001634 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a8:	f7fc f9c4 	bl	8001634 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e045      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ba:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <HAL_RCC_OscConfig+0x470>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f0      	bne.n	80052a8 <HAL_RCC_OscConfig+0x444>
 80052c6:	e03d      	b.n	8005344 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d107      	bne.n	80052e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e038      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
 80052d4:	40023800 	.word	0x40023800
 80052d8:	40007000 	.word	0x40007000
 80052dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052e0:	4b1b      	ldr	r3, [pc, #108]	; (8005350 <HAL_RCC_OscConfig+0x4ec>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d028      	beq.n	8005340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d121      	bne.n	8005340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005306:	429a      	cmp	r2, r3
 8005308:	d11a      	bne.n	8005340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005310:	4013      	ands	r3, r2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005318:	4293      	cmp	r3, r2
 800531a:	d111      	bne.n	8005340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005326:	085b      	lsrs	r3, r3, #1
 8005328:	3b01      	subs	r3, #1
 800532a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800532c:	429a      	cmp	r2, r3
 800532e:	d107      	bne.n	8005340 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800533c:	429a      	cmp	r2, r3
 800533e:	d001      	beq.n	8005344 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e000      	b.n	8005346 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40023800 	.word	0x40023800

08005354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0cc      	b.n	8005502 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005368:	4b68      	ldr	r3, [pc, #416]	; (800550c <HAL_RCC_ClockConfig+0x1b8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d90c      	bls.n	8005390 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005376:	4b65      	ldr	r3, [pc, #404]	; (800550c <HAL_RCC_ClockConfig+0x1b8>)
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800537e:	4b63      	ldr	r3, [pc, #396]	; (800550c <HAL_RCC_ClockConfig+0x1b8>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d001      	beq.n	8005390 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0b8      	b.n	8005502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d020      	beq.n	80053de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053a8:	4b59      	ldr	r3, [pc, #356]	; (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	4a58      	ldr	r2, [pc, #352]	; (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053c0:	4b53      	ldr	r3, [pc, #332]	; (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	4a52      	ldr	r2, [pc, #328]	; (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80053c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053cc:	4b50      	ldr	r3, [pc, #320]	; (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	494d      	ldr	r1, [pc, #308]	; (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d044      	beq.n	8005474 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d107      	bne.n	8005402 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f2:	4b47      	ldr	r3, [pc, #284]	; (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d119      	bne.n	8005432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e07f      	b.n	8005502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d003      	beq.n	8005412 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800540e:	2b03      	cmp	r3, #3
 8005410:	d107      	bne.n	8005422 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005412:	4b3f      	ldr	r3, [pc, #252]	; (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d109      	bne.n	8005432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e06f      	b.n	8005502 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005422:	4b3b      	ldr	r3, [pc, #236]	; (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e067      	b.n	8005502 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005432:	4b37      	ldr	r3, [pc, #220]	; (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f023 0203 	bic.w	r2, r3, #3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	4934      	ldr	r1, [pc, #208]	; (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 8005440:	4313      	orrs	r3, r2
 8005442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005444:	f7fc f8f6 	bl	8001634 <HAL_GetTick>
 8005448:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544a:	e00a      	b.n	8005462 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800544c:	f7fc f8f2 	bl	8001634 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f241 3288 	movw	r2, #5000	; 0x1388
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e04f      	b.n	8005502 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005462:	4b2b      	ldr	r3, [pc, #172]	; (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 020c 	and.w	r2, r3, #12
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	429a      	cmp	r2, r3
 8005472:	d1eb      	bne.n	800544c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005474:	4b25      	ldr	r3, [pc, #148]	; (800550c <HAL_RCC_ClockConfig+0x1b8>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d20c      	bcs.n	800549c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005482:	4b22      	ldr	r3, [pc, #136]	; (800550c <HAL_RCC_ClockConfig+0x1b8>)
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800548a:	4b20      	ldr	r3, [pc, #128]	; (800550c <HAL_RCC_ClockConfig+0x1b8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d001      	beq.n	800549c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e032      	b.n	8005502 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d008      	beq.n	80054ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054a8:	4b19      	ldr	r3, [pc, #100]	; (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	4916      	ldr	r1, [pc, #88]	; (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d009      	beq.n	80054da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054c6:	4b12      	ldr	r3, [pc, #72]	; (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	490e      	ldr	r1, [pc, #56]	; (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054da:	f000 f821 	bl	8005520 <HAL_RCC_GetSysClockFreq>
 80054de:	4602      	mov	r2, r0
 80054e0:	4b0b      	ldr	r3, [pc, #44]	; (8005510 <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	091b      	lsrs	r3, r3, #4
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	490a      	ldr	r1, [pc, #40]	; (8005514 <HAL_RCC_ClockConfig+0x1c0>)
 80054ec:	5ccb      	ldrb	r3, [r1, r3]
 80054ee:	fa22 f303 	lsr.w	r3, r2, r3
 80054f2:	4a09      	ldr	r2, [pc, #36]	; (8005518 <HAL_RCC_ClockConfig+0x1c4>)
 80054f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054f6:	4b09      	ldr	r3, [pc, #36]	; (800551c <HAL_RCC_ClockConfig+0x1c8>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fc f856 	bl	80015ac <HAL_InitTick>

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40023c00 	.word	0x40023c00
 8005510:	40023800 	.word	0x40023800
 8005514:	0800b8c8 	.word	0x0800b8c8
 8005518:	20000004 	.word	0x20000004
 800551c:	20000008 	.word	0x20000008

08005520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005524:	b094      	sub	sp, #80	; 0x50
 8005526:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	647b      	str	r3, [r7, #68]	; 0x44
 800552c:	2300      	movs	r3, #0
 800552e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005530:	2300      	movs	r3, #0
 8005532:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005538:	4b79      	ldr	r3, [pc, #484]	; (8005720 <HAL_RCC_GetSysClockFreq+0x200>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f003 030c 	and.w	r3, r3, #12
 8005540:	2b08      	cmp	r3, #8
 8005542:	d00d      	beq.n	8005560 <HAL_RCC_GetSysClockFreq+0x40>
 8005544:	2b08      	cmp	r3, #8
 8005546:	f200 80e1 	bhi.w	800570c <HAL_RCC_GetSysClockFreq+0x1ec>
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <HAL_RCC_GetSysClockFreq+0x34>
 800554e:	2b04      	cmp	r3, #4
 8005550:	d003      	beq.n	800555a <HAL_RCC_GetSysClockFreq+0x3a>
 8005552:	e0db      	b.n	800570c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005554:	4b73      	ldr	r3, [pc, #460]	; (8005724 <HAL_RCC_GetSysClockFreq+0x204>)
 8005556:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005558:	e0db      	b.n	8005712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800555a:	4b73      	ldr	r3, [pc, #460]	; (8005728 <HAL_RCC_GetSysClockFreq+0x208>)
 800555c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800555e:	e0d8      	b.n	8005712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005560:	4b6f      	ldr	r3, [pc, #444]	; (8005720 <HAL_RCC_GetSysClockFreq+0x200>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005568:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800556a:	4b6d      	ldr	r3, [pc, #436]	; (8005720 <HAL_RCC_GetSysClockFreq+0x200>)
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d063      	beq.n	800563e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005576:	4b6a      	ldr	r3, [pc, #424]	; (8005720 <HAL_RCC_GetSysClockFreq+0x200>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	099b      	lsrs	r3, r3, #6
 800557c:	2200      	movs	r2, #0
 800557e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005580:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005584:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005588:	633b      	str	r3, [r7, #48]	; 0x30
 800558a:	2300      	movs	r3, #0
 800558c:	637b      	str	r3, [r7, #52]	; 0x34
 800558e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005592:	4622      	mov	r2, r4
 8005594:	462b      	mov	r3, r5
 8005596:	f04f 0000 	mov.w	r0, #0
 800559a:	f04f 0100 	mov.w	r1, #0
 800559e:	0159      	lsls	r1, r3, #5
 80055a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055a4:	0150      	lsls	r0, r2, #5
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4621      	mov	r1, r4
 80055ac:	1a51      	subs	r1, r2, r1
 80055ae:	6139      	str	r1, [r7, #16]
 80055b0:	4629      	mov	r1, r5
 80055b2:	eb63 0301 	sbc.w	r3, r3, r1
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055c4:	4659      	mov	r1, fp
 80055c6:	018b      	lsls	r3, r1, #6
 80055c8:	4651      	mov	r1, sl
 80055ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055ce:	4651      	mov	r1, sl
 80055d0:	018a      	lsls	r2, r1, #6
 80055d2:	4651      	mov	r1, sl
 80055d4:	ebb2 0801 	subs.w	r8, r2, r1
 80055d8:	4659      	mov	r1, fp
 80055da:	eb63 0901 	sbc.w	r9, r3, r1
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055f2:	4690      	mov	r8, r2
 80055f4:	4699      	mov	r9, r3
 80055f6:	4623      	mov	r3, r4
 80055f8:	eb18 0303 	adds.w	r3, r8, r3
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	462b      	mov	r3, r5
 8005600:	eb49 0303 	adc.w	r3, r9, r3
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005612:	4629      	mov	r1, r5
 8005614:	024b      	lsls	r3, r1, #9
 8005616:	4621      	mov	r1, r4
 8005618:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800561c:	4621      	mov	r1, r4
 800561e:	024a      	lsls	r2, r1, #9
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005626:	2200      	movs	r2, #0
 8005628:	62bb      	str	r3, [r7, #40]	; 0x28
 800562a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800562c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005630:	f7fa fe26 	bl	8000280 <__aeabi_uldivmod>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4613      	mov	r3, r2
 800563a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800563c:	e058      	b.n	80056f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800563e:	4b38      	ldr	r3, [pc, #224]	; (8005720 <HAL_RCC_GetSysClockFreq+0x200>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	099b      	lsrs	r3, r3, #6
 8005644:	2200      	movs	r2, #0
 8005646:	4618      	mov	r0, r3
 8005648:	4611      	mov	r1, r2
 800564a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800564e:	623b      	str	r3, [r7, #32]
 8005650:	2300      	movs	r3, #0
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
 8005654:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005658:	4642      	mov	r2, r8
 800565a:	464b      	mov	r3, r9
 800565c:	f04f 0000 	mov.w	r0, #0
 8005660:	f04f 0100 	mov.w	r1, #0
 8005664:	0159      	lsls	r1, r3, #5
 8005666:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800566a:	0150      	lsls	r0, r2, #5
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4641      	mov	r1, r8
 8005672:	ebb2 0a01 	subs.w	sl, r2, r1
 8005676:	4649      	mov	r1, r9
 8005678:	eb63 0b01 	sbc.w	fp, r3, r1
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005688:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800568c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005690:	ebb2 040a 	subs.w	r4, r2, sl
 8005694:	eb63 050b 	sbc.w	r5, r3, fp
 8005698:	f04f 0200 	mov.w	r2, #0
 800569c:	f04f 0300 	mov.w	r3, #0
 80056a0:	00eb      	lsls	r3, r5, #3
 80056a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056a6:	00e2      	lsls	r2, r4, #3
 80056a8:	4614      	mov	r4, r2
 80056aa:	461d      	mov	r5, r3
 80056ac:	4643      	mov	r3, r8
 80056ae:	18e3      	adds	r3, r4, r3
 80056b0:	603b      	str	r3, [r7, #0]
 80056b2:	464b      	mov	r3, r9
 80056b4:	eb45 0303 	adc.w	r3, r5, r3
 80056b8:	607b      	str	r3, [r7, #4]
 80056ba:	f04f 0200 	mov.w	r2, #0
 80056be:	f04f 0300 	mov.w	r3, #0
 80056c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056c6:	4629      	mov	r1, r5
 80056c8:	028b      	lsls	r3, r1, #10
 80056ca:	4621      	mov	r1, r4
 80056cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056d0:	4621      	mov	r1, r4
 80056d2:	028a      	lsls	r2, r1, #10
 80056d4:	4610      	mov	r0, r2
 80056d6:	4619      	mov	r1, r3
 80056d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056da:	2200      	movs	r2, #0
 80056dc:	61bb      	str	r3, [r7, #24]
 80056de:	61fa      	str	r2, [r7, #28]
 80056e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056e4:	f7fa fdcc 	bl	8000280 <__aeabi_uldivmod>
 80056e8:	4602      	mov	r2, r0
 80056ea:	460b      	mov	r3, r1
 80056ec:	4613      	mov	r3, r2
 80056ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056f0:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <HAL_RCC_GetSysClockFreq+0x200>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	0c1b      	lsrs	r3, r3, #16
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	3301      	adds	r3, #1
 80056fc:	005b      	lsls	r3, r3, #1
 80056fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005700:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005704:	fbb2 f3f3 	udiv	r3, r2, r3
 8005708:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800570a:	e002      	b.n	8005712 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <HAL_RCC_GetSysClockFreq+0x204>)
 800570e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005710:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005714:	4618      	mov	r0, r3
 8005716:	3750      	adds	r7, #80	; 0x50
 8005718:	46bd      	mov	sp, r7
 800571a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800571e:	bf00      	nop
 8005720:	40023800 	.word	0x40023800
 8005724:	00f42400 	.word	0x00f42400
 8005728:	007a1200 	.word	0x007a1200

0800572c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005730:	4b03      	ldr	r3, [pc, #12]	; (8005740 <HAL_RCC_GetHCLKFreq+0x14>)
 8005732:	681b      	ldr	r3, [r3, #0]
}
 8005734:	4618      	mov	r0, r3
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	20000004 	.word	0x20000004

08005744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005748:	f7ff fff0 	bl	800572c <HAL_RCC_GetHCLKFreq>
 800574c:	4602      	mov	r2, r0
 800574e:	4b05      	ldr	r3, [pc, #20]	; (8005764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	0a9b      	lsrs	r3, r3, #10
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	4903      	ldr	r1, [pc, #12]	; (8005768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800575a:	5ccb      	ldrb	r3, [r1, r3]
 800575c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005760:	4618      	mov	r0, r3
 8005762:	bd80      	pop	{r7, pc}
 8005764:	40023800 	.word	0x40023800
 8005768:	0800b8d8 	.word	0x0800b8d8

0800576c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	d105      	bne.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005790:	2b00      	cmp	r3, #0
 8005792:	d035      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005794:	4b62      	ldr	r3, [pc, #392]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005796:	2200      	movs	r2, #0
 8005798:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800579a:	f7fb ff4b 	bl	8001634 <HAL_GetTick>
 800579e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057a0:	e008      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057a2:	f7fb ff47 	bl	8001634 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e0b0      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057b4:	4b5b      	ldr	r3, [pc, #364]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1f0      	bne.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	019a      	lsls	r2, r3, #6
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	071b      	lsls	r3, r3, #28
 80057cc:	4955      	ldr	r1, [pc, #340]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057d4:	4b52      	ldr	r3, [pc, #328]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80057d6:	2201      	movs	r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057da:	f7fb ff2b 	bl	8001634 <HAL_GetTick>
 80057de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057e0:	e008      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057e2:	f7fb ff27 	bl	8001634 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e090      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057f4:	4b4b      	ldr	r3, [pc, #300]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f0      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 8083 	beq.w	8005914 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	4b44      	ldr	r3, [pc, #272]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	4a43      	ldr	r2, [pc, #268]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800581c:	6413      	str	r3, [r2, #64]	; 0x40
 800581e:	4b41      	ldr	r3, [pc, #260]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800582a:	4b3f      	ldr	r3, [pc, #252]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a3e      	ldr	r2, [pc, #248]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005834:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005836:	f7fb fefd 	bl	8001634 <HAL_GetTick>
 800583a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800583c:	e008      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800583e:	f7fb fef9 	bl	8001634 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e062      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005850:	4b35      	ldr	r3, [pc, #212]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0f0      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800585c:	4b31      	ldr	r3, [pc, #196]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800585e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005864:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d02f      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	429a      	cmp	r2, r3
 8005878:	d028      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800587a:	4b2a      	ldr	r3, [pc, #168]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005882:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005884:	4b29      	ldr	r3, [pc, #164]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005886:	2201      	movs	r2, #1
 8005888:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800588a:	4b28      	ldr	r3, [pc, #160]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800588c:	2200      	movs	r2, #0
 800588e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005890:	4a24      	ldr	r2, [pc, #144]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005896:	4b23      	ldr	r3, [pc, #140]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d114      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80058a2:	f7fb fec7 	bl	8001634 <HAL_GetTick>
 80058a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058a8:	e00a      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058aa:	f7fb fec3 	bl	8001634 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e02a      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c0:	4b18      	ldr	r3, [pc, #96]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0ee      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058d8:	d10d      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80058da:	4b12      	ldr	r3, [pc, #72]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80058ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ee:	490d      	ldr	r1, [pc, #52]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	608b      	str	r3, [r1, #8]
 80058f4:	e005      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80058f6:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	4a0a      	ldr	r2, [pc, #40]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005900:	6093      	str	r3, [r2, #8]
 8005902:	4b08      	ldr	r3, [pc, #32]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005904:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800590e:	4905      	ldr	r1, [pc, #20]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005910:	4313      	orrs	r3, r2
 8005912:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	42470068 	.word	0x42470068
 8005924:	40023800 	.word	0x40023800
 8005928:	40007000 	.word	0x40007000
 800592c:	42470e40 	.word	0x42470e40

08005930 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d13f      	bne.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800594e:	4b24      	ldr	r3, [pc, #144]	; (80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d006      	beq.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005964:	d12f      	bne.n	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005966:	4b1f      	ldr	r3, [pc, #124]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005968:	617b      	str	r3, [r7, #20]
          break;
 800596a:	e02f      	b.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800596c:	4b1c      	ldr	r3, [pc, #112]	; (80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005978:	d108      	bne.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800597a:	4b19      	ldr	r3, [pc, #100]	; (80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005982:	4a19      	ldr	r2, [pc, #100]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005984:	fbb2 f3f3 	udiv	r3, r2, r3
 8005988:	613b      	str	r3, [r7, #16]
 800598a:	e007      	b.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800598c:	4b14      	ldr	r3, [pc, #80]	; (80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005994:	4a15      	ldr	r2, [pc, #84]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005996:	fbb2 f3f3 	udiv	r3, r2, r3
 800599a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800599c:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800599e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059a2:	099b      	lsrs	r3, r3, #6
 80059a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	fb02 f303 	mul.w	r3, r2, r3
 80059ae:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80059b0:	4b0b      	ldr	r3, [pc, #44]	; (80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80059b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b6:	0f1b      	lsrs	r3, r3, #28
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c2:	617b      	str	r3, [r7, #20]
          break;
 80059c4:	e002      	b.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]
          break;
 80059ca:	bf00      	nop
        }
      }
      break;
 80059cc:	e000      	b.n	80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80059ce:	bf00      	nop
    }
  }
  return frequency;
 80059d0:	697b      	ldr	r3, [r7, #20]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	371c      	adds	r7, #28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	40023800 	.word	0x40023800
 80059e4:	00bb8000 	.word	0x00bb8000
 80059e8:	007a1200 	.word	0x007a1200
 80059ec:	00f42400 	.word	0x00f42400

080059f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d101      	bne.n	8005a02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e07b      	b.n	8005afa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d108      	bne.n	8005a1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a12:	d009      	beq.n	8005a28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	61da      	str	r2, [r3, #28]
 8005a1a:	e005      	b.n	8005a28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d106      	bne.n	8005a48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7fb fad8 	bl	8000ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a70:	431a      	orrs	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aac:	ea42 0103 	orr.w	r1, r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	0c1b      	lsrs	r3, r3, #16
 8005ac6:	f003 0104 	and.w	r1, r3, #4
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	f003 0210 	and.w	r2, r3, #16
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ae8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b08c      	sub	sp, #48	; 0x30
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	607a      	str	r2, [r7, #4]
 8005b0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005b10:	2301      	movs	r3, #1
 8005b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_SPI_TransmitReceive+0x26>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e198      	b.n	8005e5a <HAL_SPI_TransmitReceive+0x358>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b30:	f7fb fd80 	bl	8001634 <HAL_GetTick>
 8005b34:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005b46:	887b      	ldrh	r3, [r7, #2]
 8005b48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005b4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d00f      	beq.n	8005b72 <HAL_SPI_TransmitReceive+0x70>
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b58:	d107      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d103      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0x68>
 8005b62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d003      	beq.n	8005b72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b70:	e16d      	b.n	8005e4e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <HAL_SPI_TransmitReceive+0x82>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <HAL_SPI_TransmitReceive+0x82>
 8005b7e:	887b      	ldrh	r3, [r7, #2]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d103      	bne.n	8005b8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005b8a:	e160      	b.n	8005e4e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d003      	beq.n	8005ba0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2205      	movs	r2, #5
 8005b9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	887a      	ldrh	r2, [r7, #2]
 8005bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	887a      	ldrh	r2, [r7, #2]
 8005bb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	887a      	ldrh	r2, [r7, #2]
 8005bc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	887a      	ldrh	r2, [r7, #2]
 8005bc8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d007      	beq.n	8005bf4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bfc:	d17c      	bne.n	8005cf8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <HAL_SPI_TransmitReceive+0x10a>
 8005c06:	8b7b      	ldrh	r3, [r7, #26]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d16a      	bne.n	8005ce2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c10:	881a      	ldrh	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1c:	1c9a      	adds	r2, r3, #2
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c30:	e057      	b.n	8005ce2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d11b      	bne.n	8005c78 <HAL_SPI_TransmitReceive+0x176>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d016      	beq.n	8005c78 <HAL_SPI_TransmitReceive+0x176>
 8005c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d113      	bne.n	8005c78 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c54:	881a      	ldrh	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	1c9a      	adds	r2, r3, #2
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d119      	bne.n	8005cba <HAL_SPI_TransmitReceive+0x1b8>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d014      	beq.n	8005cba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9a:	b292      	uxth	r2, r2
 8005c9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	1c9a      	adds	r2, r3, #2
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005cba:	f7fb fcbb 	bl	8001634 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d80b      	bhi.n	8005ce2 <HAL_SPI_TransmitReceive+0x1e0>
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd0:	d007      	beq.n	8005ce2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005ce0:	e0b5      	b.n	8005e4e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1a2      	bne.n	8005c32 <HAL_SPI_TransmitReceive+0x130>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d19d      	bne.n	8005c32 <HAL_SPI_TransmitReceive+0x130>
 8005cf6:	e080      	b.n	8005dfa <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <HAL_SPI_TransmitReceive+0x204>
 8005d00:	8b7b      	ldrh	r3, [r7, #26]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d16f      	bne.n	8005de6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	330c      	adds	r3, #12
 8005d10:	7812      	ldrb	r2, [r2, #0]
 8005d12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d2c:	e05b      	b.n	8005de6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d11c      	bne.n	8005d76 <HAL_SPI_TransmitReceive+0x274>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d017      	beq.n	8005d76 <HAL_SPI_TransmitReceive+0x274>
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d114      	bne.n	8005d76 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	330c      	adds	r3, #12
 8005d56:	7812      	ldrb	r2, [r2, #0]
 8005d58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d119      	bne.n	8005db8 <HAL_SPI_TransmitReceive+0x2b6>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d014      	beq.n	8005db8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68da      	ldr	r2, [r3, #12]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29a      	uxth	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005db4:	2301      	movs	r3, #1
 8005db6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005db8:	f7fb fc3c 	bl	8001634 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d803      	bhi.n	8005dd0 <HAL_SPI_TransmitReceive+0x2ce>
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dce:	d102      	bne.n	8005dd6 <HAL_SPI_TransmitReceive+0x2d4>
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d107      	bne.n	8005de6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005de4:	e033      	b.n	8005e4e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d19e      	bne.n	8005d2e <HAL_SPI_TransmitReceive+0x22c>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d199      	bne.n	8005d2e <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 f8b8 	bl	8005f74 <SPI_EndRxTxTransaction>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d006      	beq.n	8005e18 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2220      	movs	r2, #32
 8005e14:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005e16:	e01a      	b.n	8005e4e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10a      	bne.n	8005e36 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e20:	2300      	movs	r3, #0
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e44:	e003      	b.n	8005e4e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3730      	adds	r7, #48	; 0x30
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	603b      	str	r3, [r7, #0]
 8005e70:	4613      	mov	r3, r2
 8005e72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e74:	f7fb fbde 	bl	8001634 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	1a9b      	subs	r3, r3, r2
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	4413      	add	r3, r2
 8005e82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e84:	f7fb fbd6 	bl	8001634 <HAL_GetTick>
 8005e88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e8a:	4b39      	ldr	r3, [pc, #228]	; (8005f70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	015b      	lsls	r3, r3, #5
 8005e90:	0d1b      	lsrs	r3, r3, #20
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	fb02 f303 	mul.w	r3, r2, r3
 8005e98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e9a:	e054      	b.n	8005f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea2:	d050      	beq.n	8005f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ea4:	f7fb fbc6 	bl	8001634 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d902      	bls.n	8005eba <SPI_WaitFlagStateUntilTimeout+0x56>
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d13d      	bne.n	8005f36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ec8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ed2:	d111      	bne.n	8005ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005edc:	d004      	beq.n	8005ee8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ee6:	d107      	bne.n	8005ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ef6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f00:	d10f      	bne.n	8005f22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e017      	b.n	8005f66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	bf0c      	ite	eq
 8005f56:	2301      	moveq	r3, #1
 8005f58:	2300      	movne	r3, #0
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d19b      	bne.n	8005e9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3720      	adds	r7, #32
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000004 	.word	0x20000004

08005f74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b088      	sub	sp, #32
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2201      	movs	r2, #1
 8005f88:	2102      	movs	r1, #2
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f7ff ff6a 	bl	8005e64 <SPI_WaitFlagStateUntilTimeout>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d007      	beq.n	8005fa6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9a:	f043 0220 	orr.w	r2, r3, #32
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e032      	b.n	800600c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005fa6:	4b1b      	ldr	r3, [pc, #108]	; (8006014 <SPI_EndRxTxTransaction+0xa0>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a1b      	ldr	r2, [pc, #108]	; (8006018 <SPI_EndRxTxTransaction+0xa4>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	0d5b      	lsrs	r3, r3, #21
 8005fb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005fb6:	fb02 f303 	mul.w	r3, r2, r3
 8005fba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fc4:	d112      	bne.n	8005fec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2180      	movs	r1, #128	; 0x80
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f7ff ff47 	bl	8005e64 <SPI_WaitFlagStateUntilTimeout>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d016      	beq.n	800600a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe0:	f043 0220 	orr.w	r2, r3, #32
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e00f      	b.n	800600c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00a      	beq.n	8006008 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006002:	2b80      	cmp	r3, #128	; 0x80
 8006004:	d0f2      	beq.n	8005fec <SPI_EndRxTxTransaction+0x78>
 8006006:	e000      	b.n	800600a <SPI_EndRxTxTransaction+0x96>
        break;
 8006008:	bf00      	nop
  }

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20000004 	.word	0x20000004
 8006018:	165e9f81 	.word	0x165e9f81

0800601c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e041      	b.n	80060b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d106      	bne.n	8006048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7fb f9ce 	bl	80013e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	3304      	adds	r3, #4
 8006058:	4619      	mov	r1, r3
 800605a:	4610      	mov	r0, r2
 800605c:	f000 fb48 	bl	80066f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e041      	b.n	8006150 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d106      	bne.n	80060e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f839 	bl	8006158 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2202      	movs	r2, #2
 80060ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3304      	adds	r3, #4
 80060f6:	4619      	mov	r1, r3
 80060f8:	4610      	mov	r0, r2
 80060fa:	f000 faf9 	bl	80066f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d109      	bne.n	8006190 <HAL_TIM_PWM_Start+0x24>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b01      	cmp	r3, #1
 8006186:	bf14      	ite	ne
 8006188:	2301      	movne	r3, #1
 800618a:	2300      	moveq	r3, #0
 800618c:	b2db      	uxtb	r3, r3
 800618e:	e022      	b.n	80061d6 <HAL_TIM_PWM_Start+0x6a>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2b04      	cmp	r3, #4
 8006194:	d109      	bne.n	80061aa <HAL_TIM_PWM_Start+0x3e>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b01      	cmp	r3, #1
 80061a0:	bf14      	ite	ne
 80061a2:	2301      	movne	r3, #1
 80061a4:	2300      	moveq	r3, #0
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	e015      	b.n	80061d6 <HAL_TIM_PWM_Start+0x6a>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	d109      	bne.n	80061c4 <HAL_TIM_PWM_Start+0x58>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	bf14      	ite	ne
 80061bc:	2301      	movne	r3, #1
 80061be:	2300      	moveq	r3, #0
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	e008      	b.n	80061d6 <HAL_TIM_PWM_Start+0x6a>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	bf14      	ite	ne
 80061d0:	2301      	movne	r3, #1
 80061d2:	2300      	moveq	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e07c      	b.n	80062d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d104      	bne.n	80061ee <HAL_TIM_PWM_Start+0x82>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061ec:	e013      	b.n	8006216 <HAL_TIM_PWM_Start+0xaa>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b04      	cmp	r3, #4
 80061f2:	d104      	bne.n	80061fe <HAL_TIM_PWM_Start+0x92>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061fc:	e00b      	b.n	8006216 <HAL_TIM_PWM_Start+0xaa>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b08      	cmp	r3, #8
 8006202:	d104      	bne.n	800620e <HAL_TIM_PWM_Start+0xa2>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800620c:	e003      	b.n	8006216 <HAL_TIM_PWM_Start+0xaa>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2202      	movs	r2, #2
 8006212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2201      	movs	r2, #1
 800621c:	6839      	ldr	r1, [r7, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fd5c 	bl	8006cdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a2d      	ldr	r2, [pc, #180]	; (80062e0 <HAL_TIM_PWM_Start+0x174>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d004      	beq.n	8006238 <HAL_TIM_PWM_Start+0xcc>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a2c      	ldr	r2, [pc, #176]	; (80062e4 <HAL_TIM_PWM_Start+0x178>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d101      	bne.n	800623c <HAL_TIM_PWM_Start+0xd0>
 8006238:	2301      	movs	r3, #1
 800623a:	e000      	b.n	800623e <HAL_TIM_PWM_Start+0xd2>
 800623c:	2300      	movs	r3, #0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d007      	beq.n	8006252 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006250:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a22      	ldr	r2, [pc, #136]	; (80062e0 <HAL_TIM_PWM_Start+0x174>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d022      	beq.n	80062a2 <HAL_TIM_PWM_Start+0x136>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006264:	d01d      	beq.n	80062a2 <HAL_TIM_PWM_Start+0x136>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a1f      	ldr	r2, [pc, #124]	; (80062e8 <HAL_TIM_PWM_Start+0x17c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d018      	beq.n	80062a2 <HAL_TIM_PWM_Start+0x136>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a1d      	ldr	r2, [pc, #116]	; (80062ec <HAL_TIM_PWM_Start+0x180>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <HAL_TIM_PWM_Start+0x136>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a1c      	ldr	r2, [pc, #112]	; (80062f0 <HAL_TIM_PWM_Start+0x184>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00e      	beq.n	80062a2 <HAL_TIM_PWM_Start+0x136>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a16      	ldr	r2, [pc, #88]	; (80062e4 <HAL_TIM_PWM_Start+0x178>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d009      	beq.n	80062a2 <HAL_TIM_PWM_Start+0x136>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a18      	ldr	r2, [pc, #96]	; (80062f4 <HAL_TIM_PWM_Start+0x188>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d004      	beq.n	80062a2 <HAL_TIM_PWM_Start+0x136>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a16      	ldr	r2, [pc, #88]	; (80062f8 <HAL_TIM_PWM_Start+0x18c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d111      	bne.n	80062c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b06      	cmp	r3, #6
 80062b2:	d010      	beq.n	80062d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f042 0201 	orr.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c4:	e007      	b.n	80062d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f042 0201 	orr.w	r2, r2, #1
 80062d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40010000 	.word	0x40010000
 80062e4:	40010400 	.word	0x40010400
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000800 	.word	0x40000800
 80062f0:	40000c00 	.word	0x40000c00
 80062f4:	40014000 	.word	0x40014000
 80062f8:	40001800 	.word	0x40001800

080062fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2200      	movs	r2, #0
 800630c:	6839      	ldr	r1, [r7, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fce4 	bl	8006cdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a2e      	ldr	r2, [pc, #184]	; (80063d4 <HAL_TIM_PWM_Stop+0xd8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d004      	beq.n	8006328 <HAL_TIM_PWM_Stop+0x2c>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a2d      	ldr	r2, [pc, #180]	; (80063d8 <HAL_TIM_PWM_Stop+0xdc>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d101      	bne.n	800632c <HAL_TIM_PWM_Stop+0x30>
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <HAL_TIM_PWM_Stop+0x32>
 800632c:	2300      	movs	r3, #0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d017      	beq.n	8006362 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6a1a      	ldr	r2, [r3, #32]
 8006338:	f241 1311 	movw	r3, #4369	; 0x1111
 800633c:	4013      	ands	r3, r2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10f      	bne.n	8006362 <HAL_TIM_PWM_Stop+0x66>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6a1a      	ldr	r2, [r3, #32]
 8006348:	f240 4344 	movw	r3, #1092	; 0x444
 800634c:	4013      	ands	r3, r2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d107      	bne.n	8006362 <HAL_TIM_PWM_Stop+0x66>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006360:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6a1a      	ldr	r2, [r3, #32]
 8006368:	f241 1311 	movw	r3, #4369	; 0x1111
 800636c:	4013      	ands	r3, r2
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10f      	bne.n	8006392 <HAL_TIM_PWM_Stop+0x96>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6a1a      	ldr	r2, [r3, #32]
 8006378:	f240 4344 	movw	r3, #1092	; 0x444
 800637c:	4013      	ands	r3, r2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d107      	bne.n	8006392 <HAL_TIM_PWM_Stop+0x96>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0201 	bic.w	r2, r2, #1
 8006390:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d104      	bne.n	80063a2 <HAL_TIM_PWM_Stop+0xa6>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063a0:	e013      	b.n	80063ca <HAL_TIM_PWM_Stop+0xce>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d104      	bne.n	80063b2 <HAL_TIM_PWM_Stop+0xb6>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063b0:	e00b      	b.n	80063ca <HAL_TIM_PWM_Stop+0xce>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d104      	bne.n	80063c2 <HAL_TIM_PWM_Stop+0xc6>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063c0:	e003      	b.n	80063ca <HAL_TIM_PWM_Stop+0xce>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	40010000 	.word	0x40010000
 80063d8:	40010400 	.word	0x40010400

080063dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d101      	bne.n	80063fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80063f6:	2302      	movs	r3, #2
 80063f8:	e0ae      	b.n	8006558 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b0c      	cmp	r3, #12
 8006406:	f200 809f 	bhi.w	8006548 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800640a:	a201      	add	r2, pc, #4	; (adr r2, 8006410 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	08006445 	.word	0x08006445
 8006414:	08006549 	.word	0x08006549
 8006418:	08006549 	.word	0x08006549
 800641c:	08006549 	.word	0x08006549
 8006420:	08006485 	.word	0x08006485
 8006424:	08006549 	.word	0x08006549
 8006428:	08006549 	.word	0x08006549
 800642c:	08006549 	.word	0x08006549
 8006430:	080064c7 	.word	0x080064c7
 8006434:	08006549 	.word	0x08006549
 8006438:	08006549 	.word	0x08006549
 800643c:	08006549 	.word	0x08006549
 8006440:	08006507 	.word	0x08006507
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68b9      	ldr	r1, [r7, #8]
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f9fc 	bl	8006848 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0208 	orr.w	r2, r2, #8
 800645e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699a      	ldr	r2, [r3, #24]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0204 	bic.w	r2, r2, #4
 800646e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6999      	ldr	r1, [r3, #24]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	691a      	ldr	r2, [r3, #16]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	619a      	str	r2, [r3, #24]
      break;
 8006482:	e064      	b.n	800654e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fa4c 	bl	8006928 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800649e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	699a      	ldr	r2, [r3, #24]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6999      	ldr	r1, [r3, #24]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	021a      	lsls	r2, r3, #8
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	619a      	str	r2, [r3, #24]
      break;
 80064c4:	e043      	b.n	800654e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68b9      	ldr	r1, [r7, #8]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 faa1 	bl	8006a14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69da      	ldr	r2, [r3, #28]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0208 	orr.w	r2, r2, #8
 80064e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69da      	ldr	r2, [r3, #28]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0204 	bic.w	r2, r2, #4
 80064f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69d9      	ldr	r1, [r3, #28]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	61da      	str	r2, [r3, #28]
      break;
 8006504:	e023      	b.n	800654e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	4618      	mov	r0, r3
 800650e:	f000 faf5 	bl	8006afc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006520:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69da      	ldr	r2, [r3, #28]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006530:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69d9      	ldr	r1, [r3, #28]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	021a      	lsls	r2, r3, #8
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	61da      	str	r2, [r3, #28]
      break;
 8006546:	e002      	b.n	800654e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	75fb      	strb	r3, [r7, #23]
      break;
 800654c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006556:	7dfb      	ldrb	r3, [r7, #23]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <HAL_TIM_ConfigClockSource+0x1c>
 8006578:	2302      	movs	r3, #2
 800657a:	e0b4      	b.n	80066e6 <HAL_TIM_ConfigClockSource+0x186>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800659a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b4:	d03e      	beq.n	8006634 <HAL_TIM_ConfigClockSource+0xd4>
 80065b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ba:	f200 8087 	bhi.w	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c2:	f000 8086 	beq.w	80066d2 <HAL_TIM_ConfigClockSource+0x172>
 80065c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ca:	d87f      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065cc:	2b70      	cmp	r3, #112	; 0x70
 80065ce:	d01a      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0xa6>
 80065d0:	2b70      	cmp	r3, #112	; 0x70
 80065d2:	d87b      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065d4:	2b60      	cmp	r3, #96	; 0x60
 80065d6:	d050      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x11a>
 80065d8:	2b60      	cmp	r3, #96	; 0x60
 80065da:	d877      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065dc:	2b50      	cmp	r3, #80	; 0x50
 80065de:	d03c      	beq.n	800665a <HAL_TIM_ConfigClockSource+0xfa>
 80065e0:	2b50      	cmp	r3, #80	; 0x50
 80065e2:	d873      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	d058      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x13a>
 80065e8:	2b40      	cmp	r3, #64	; 0x40
 80065ea:	d86f      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065ec:	2b30      	cmp	r3, #48	; 0x30
 80065ee:	d064      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15a>
 80065f0:	2b30      	cmp	r3, #48	; 0x30
 80065f2:	d86b      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	d060      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15a>
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d867      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d05c      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15a>
 8006600:	2b10      	cmp	r3, #16
 8006602:	d05a      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15a>
 8006604:	e062      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006616:	f000 fb41 	bl	8006c9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	609a      	str	r2, [r3, #8]
      break;
 8006632:	e04f      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006644:	f000 fb2a 	bl	8006c9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006656:	609a      	str	r2, [r3, #8]
      break;
 8006658:	e03c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006666:	461a      	mov	r2, r3
 8006668:	f000 fa9e 	bl	8006ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2150      	movs	r1, #80	; 0x50
 8006672:	4618      	mov	r0, r3
 8006674:	f000 faf7 	bl	8006c66 <TIM_ITRx_SetConfig>
      break;
 8006678:	e02c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006686:	461a      	mov	r2, r3
 8006688:	f000 fabd 	bl	8006c06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2160      	movs	r1, #96	; 0x60
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fae7 	bl	8006c66 <TIM_ITRx_SetConfig>
      break;
 8006698:	e01c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066a6:	461a      	mov	r2, r3
 80066a8:	f000 fa7e 	bl	8006ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2140      	movs	r1, #64	; 0x40
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fad7 	bl	8006c66 <TIM_ITRx_SetConfig>
      break;
 80066b8:	e00c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4619      	mov	r1, r3
 80066c4:	4610      	mov	r0, r2
 80066c6:	f000 face 	bl	8006c66 <TIM_ITRx_SetConfig>
      break;
 80066ca:	e003      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	73fb      	strb	r3, [r7, #15]
      break;
 80066d0:	e000      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a46      	ldr	r2, [pc, #280]	; (800681c <TIM_Base_SetConfig+0x12c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d013      	beq.n	8006730 <TIM_Base_SetConfig+0x40>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800670e:	d00f      	beq.n	8006730 <TIM_Base_SetConfig+0x40>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a43      	ldr	r2, [pc, #268]	; (8006820 <TIM_Base_SetConfig+0x130>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00b      	beq.n	8006730 <TIM_Base_SetConfig+0x40>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a42      	ldr	r2, [pc, #264]	; (8006824 <TIM_Base_SetConfig+0x134>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d007      	beq.n	8006730 <TIM_Base_SetConfig+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a41      	ldr	r2, [pc, #260]	; (8006828 <TIM_Base_SetConfig+0x138>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d003      	beq.n	8006730 <TIM_Base_SetConfig+0x40>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a40      	ldr	r2, [pc, #256]	; (800682c <TIM_Base_SetConfig+0x13c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d108      	bne.n	8006742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a35      	ldr	r2, [pc, #212]	; (800681c <TIM_Base_SetConfig+0x12c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d02b      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006750:	d027      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a32      	ldr	r2, [pc, #200]	; (8006820 <TIM_Base_SetConfig+0x130>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d023      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a31      	ldr	r2, [pc, #196]	; (8006824 <TIM_Base_SetConfig+0x134>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01f      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a30      	ldr	r2, [pc, #192]	; (8006828 <TIM_Base_SetConfig+0x138>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d01b      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a2f      	ldr	r2, [pc, #188]	; (800682c <TIM_Base_SetConfig+0x13c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d017      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a2e      	ldr	r2, [pc, #184]	; (8006830 <TIM_Base_SetConfig+0x140>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d013      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2d      	ldr	r2, [pc, #180]	; (8006834 <TIM_Base_SetConfig+0x144>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00f      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a2c      	ldr	r2, [pc, #176]	; (8006838 <TIM_Base_SetConfig+0x148>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00b      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a2b      	ldr	r2, [pc, #172]	; (800683c <TIM_Base_SetConfig+0x14c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d007      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a2a      	ldr	r2, [pc, #168]	; (8006840 <TIM_Base_SetConfig+0x150>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d003      	beq.n	80067a2 <TIM_Base_SetConfig+0xb2>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a29      	ldr	r2, [pc, #164]	; (8006844 <TIM_Base_SetConfig+0x154>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d108      	bne.n	80067b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a10      	ldr	r2, [pc, #64]	; (800681c <TIM_Base_SetConfig+0x12c>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d003      	beq.n	80067e8 <TIM_Base_SetConfig+0xf8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a12      	ldr	r2, [pc, #72]	; (800682c <TIM_Base_SetConfig+0x13c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d103      	bne.n	80067f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	691a      	ldr	r2, [r3, #16]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d105      	bne.n	800680e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f023 0201 	bic.w	r2, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	611a      	str	r2, [r3, #16]
  }
}
 800680e:	bf00      	nop
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40010000 	.word	0x40010000
 8006820:	40000400 	.word	0x40000400
 8006824:	40000800 	.word	0x40000800
 8006828:	40000c00 	.word	0x40000c00
 800682c:	40010400 	.word	0x40010400
 8006830:	40014000 	.word	0x40014000
 8006834:	40014400 	.word	0x40014400
 8006838:	40014800 	.word	0x40014800
 800683c:	40001800 	.word	0x40001800
 8006840:	40001c00 	.word	0x40001c00
 8006844:	40002000 	.word	0x40002000

08006848 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	f023 0201 	bic.w	r2, r3, #1
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0303 	bic.w	r3, r3, #3
 800687e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f023 0302 	bic.w	r3, r3, #2
 8006890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4313      	orrs	r3, r2
 800689a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a20      	ldr	r2, [pc, #128]	; (8006920 <TIM_OC1_SetConfig+0xd8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d003      	beq.n	80068ac <TIM_OC1_SetConfig+0x64>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a1f      	ldr	r2, [pc, #124]	; (8006924 <TIM_OC1_SetConfig+0xdc>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d10c      	bne.n	80068c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f023 0308 	bic.w	r3, r3, #8
 80068b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f023 0304 	bic.w	r3, r3, #4
 80068c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a15      	ldr	r2, [pc, #84]	; (8006920 <TIM_OC1_SetConfig+0xd8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d003      	beq.n	80068d6 <TIM_OC1_SetConfig+0x8e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a14      	ldr	r2, [pc, #80]	; (8006924 <TIM_OC1_SetConfig+0xdc>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d111      	bne.n	80068fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	621a      	str	r2, [r3, #32]
}
 8006914:	bf00      	nop
 8006916:	371c      	adds	r7, #28
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	40010000 	.word	0x40010000
 8006924:	40010400 	.word	0x40010400

08006928 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	f023 0210 	bic.w	r2, r3, #16
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800695e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	021b      	lsls	r3, r3, #8
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	4313      	orrs	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f023 0320 	bic.w	r3, r3, #32
 8006972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	011b      	lsls	r3, r3, #4
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	4313      	orrs	r3, r2
 800697e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a22      	ldr	r2, [pc, #136]	; (8006a0c <TIM_OC2_SetConfig+0xe4>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d003      	beq.n	8006990 <TIM_OC2_SetConfig+0x68>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a21      	ldr	r2, [pc, #132]	; (8006a10 <TIM_OC2_SetConfig+0xe8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d10d      	bne.n	80069ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	011b      	lsls	r3, r3, #4
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a17      	ldr	r2, [pc, #92]	; (8006a0c <TIM_OC2_SetConfig+0xe4>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d003      	beq.n	80069bc <TIM_OC2_SetConfig+0x94>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a16      	ldr	r2, [pc, #88]	; (8006a10 <TIM_OC2_SetConfig+0xe8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d113      	bne.n	80069e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40010000 	.word	0x40010000
 8006a10:	40010400 	.word	0x40010400

08006a14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f023 0303 	bic.w	r3, r3, #3
 8006a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	021b      	lsls	r3, r3, #8
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a21      	ldr	r2, [pc, #132]	; (8006af4 <TIM_OC3_SetConfig+0xe0>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d003      	beq.n	8006a7a <TIM_OC3_SetConfig+0x66>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a20      	ldr	r2, [pc, #128]	; (8006af8 <TIM_OC3_SetConfig+0xe4>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d10d      	bne.n	8006a96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	021b      	lsls	r3, r3, #8
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a16      	ldr	r2, [pc, #88]	; (8006af4 <TIM_OC3_SetConfig+0xe0>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d003      	beq.n	8006aa6 <TIM_OC3_SetConfig+0x92>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a15      	ldr	r2, [pc, #84]	; (8006af8 <TIM_OC3_SetConfig+0xe4>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d113      	bne.n	8006ace <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	011b      	lsls	r3, r3, #4
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685a      	ldr	r2, [r3, #4]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	621a      	str	r2, [r3, #32]
}
 8006ae8:	bf00      	nop
 8006aea:	371c      	adds	r7, #28
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	40010000 	.word	0x40010000
 8006af8:	40010400 	.word	0x40010400

08006afc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	031b      	lsls	r3, r3, #12
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a12      	ldr	r2, [pc, #72]	; (8006ba0 <TIM_OC4_SetConfig+0xa4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d003      	beq.n	8006b64 <TIM_OC4_SetConfig+0x68>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a11      	ldr	r2, [pc, #68]	; (8006ba4 <TIM_OC4_SetConfig+0xa8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d109      	bne.n	8006b78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	019b      	lsls	r3, r3, #6
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	621a      	str	r2, [r3, #32]
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	40010000 	.word	0x40010000
 8006ba4:	40010400 	.word	0x40010400

08006ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	f023 0201 	bic.w	r2, r3, #1
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	011b      	lsls	r3, r3, #4
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f023 030a 	bic.w	r3, r3, #10
 8006be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	621a      	str	r2, [r3, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b087      	sub	sp, #28
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	60f8      	str	r0, [r7, #12]
 8006c0e:	60b9      	str	r1, [r7, #8]
 8006c10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	f023 0210 	bic.w	r2, r3, #16
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	031b      	lsls	r3, r3, #12
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	621a      	str	r2, [r3, #32]
}
 8006c5a:	bf00      	nop
 8006c5c:	371c      	adds	r7, #28
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b085      	sub	sp, #20
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	f043 0307 	orr.w	r3, r3, #7
 8006c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	609a      	str	r2, [r3, #8]
}
 8006c90:	bf00      	nop
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
 8006ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	021a      	lsls	r2, r3, #8
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	609a      	str	r2, [r3, #8]
}
 8006cd0:	bf00      	nop
 8006cd2:	371c      	adds	r7, #28
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f003 031f 	and.w	r3, r3, #31
 8006cee:	2201      	movs	r2, #1
 8006cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a1a      	ldr	r2, [r3, #32]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	43db      	mvns	r3, r3
 8006cfe:	401a      	ands	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6a1a      	ldr	r2, [r3, #32]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f003 031f 	and.w	r3, r3, #31
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	fa01 f303 	lsl.w	r3, r1, r3
 8006d14:	431a      	orrs	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	621a      	str	r2, [r3, #32]
}
 8006d1a:	bf00      	nop
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
	...

08006d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d101      	bne.n	8006d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	e05a      	b.n	8006df6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a21      	ldr	r2, [pc, #132]	; (8006e04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d022      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d8c:	d01d      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1d      	ldr	r2, [pc, #116]	; (8006e08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d018      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a1b      	ldr	r2, [pc, #108]	; (8006e0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d013      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1a      	ldr	r2, [pc, #104]	; (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00e      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a18      	ldr	r2, [pc, #96]	; (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d009      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a17      	ldr	r2, [pc, #92]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d004      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a15      	ldr	r2, [pc, #84]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d10c      	bne.n	8006de4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	40010000 	.word	0x40010000
 8006e08:	40000400 	.word	0x40000400
 8006e0c:	40000800 	.word	0x40000800
 8006e10:	40000c00 	.word	0x40000c00
 8006e14:	40010400 	.word	0x40010400
 8006e18:	40014000 	.word	0x40014000
 8006e1c:	40001800 	.word	0x40001800

08006e20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e20:	b084      	sub	sp, #16
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
 8006e2a:	f107 001c 	add.w	r0, r7, #28
 8006e2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e32:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d123      	bne.n	8006e82 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d105      	bne.n	8006e76 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f001 fae2 	bl	8008440 <USB_CoreReset>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	73fb      	strb	r3, [r7, #15]
 8006e80:	e01b      	b.n	8006eba <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 fad6 	bl	8008440 <USB_CoreReset>
 8006e94:	4603      	mov	r3, r0
 8006e96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e98:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d106      	bne.n	8006eae <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	639a      	str	r2, [r3, #56]	; 0x38
 8006eac:	e005      	b.n	8006eba <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006eba:	7fbb      	ldrb	r3, [r7, #30]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d10b      	bne.n	8006ed8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f043 0206 	orr.w	r2, r3, #6
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f043 0220 	orr.w	r2, r3, #32
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ee4:	b004      	add	sp, #16
 8006ee6:	4770      	bx	lr

08006ee8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006ef6:	79fb      	ldrb	r3, [r7, #7]
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d165      	bne.n	8006fc8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	4a41      	ldr	r2, [pc, #260]	; (8007004 <USB_SetTurnaroundTime+0x11c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d906      	bls.n	8006f12 <USB_SetTurnaroundTime+0x2a>
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	4a40      	ldr	r2, [pc, #256]	; (8007008 <USB_SetTurnaroundTime+0x120>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d202      	bcs.n	8006f12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f0c:	230f      	movs	r3, #15
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	e062      	b.n	8006fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	4a3c      	ldr	r2, [pc, #240]	; (8007008 <USB_SetTurnaroundTime+0x120>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d306      	bcc.n	8006f28 <USB_SetTurnaroundTime+0x40>
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	4a3b      	ldr	r2, [pc, #236]	; (800700c <USB_SetTurnaroundTime+0x124>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d202      	bcs.n	8006f28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f22:	230e      	movs	r3, #14
 8006f24:	617b      	str	r3, [r7, #20]
 8006f26:	e057      	b.n	8006fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4a38      	ldr	r2, [pc, #224]	; (800700c <USB_SetTurnaroundTime+0x124>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d306      	bcc.n	8006f3e <USB_SetTurnaroundTime+0x56>
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	4a37      	ldr	r2, [pc, #220]	; (8007010 <USB_SetTurnaroundTime+0x128>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d202      	bcs.n	8006f3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f38:	230d      	movs	r3, #13
 8006f3a:	617b      	str	r3, [r7, #20]
 8006f3c:	e04c      	b.n	8006fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	4a33      	ldr	r2, [pc, #204]	; (8007010 <USB_SetTurnaroundTime+0x128>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d306      	bcc.n	8006f54 <USB_SetTurnaroundTime+0x6c>
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	4a32      	ldr	r2, [pc, #200]	; (8007014 <USB_SetTurnaroundTime+0x12c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d802      	bhi.n	8006f54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f4e:	230c      	movs	r3, #12
 8006f50:	617b      	str	r3, [r7, #20]
 8006f52:	e041      	b.n	8006fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4a2f      	ldr	r2, [pc, #188]	; (8007014 <USB_SetTurnaroundTime+0x12c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d906      	bls.n	8006f6a <USB_SetTurnaroundTime+0x82>
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	4a2e      	ldr	r2, [pc, #184]	; (8007018 <USB_SetTurnaroundTime+0x130>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d802      	bhi.n	8006f6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006f64:	230b      	movs	r3, #11
 8006f66:	617b      	str	r3, [r7, #20]
 8006f68:	e036      	b.n	8006fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	4a2a      	ldr	r2, [pc, #168]	; (8007018 <USB_SetTurnaroundTime+0x130>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d906      	bls.n	8006f80 <USB_SetTurnaroundTime+0x98>
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	4a29      	ldr	r2, [pc, #164]	; (800701c <USB_SetTurnaroundTime+0x134>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d802      	bhi.n	8006f80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006f7a:	230a      	movs	r3, #10
 8006f7c:	617b      	str	r3, [r7, #20]
 8006f7e:	e02b      	b.n	8006fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4a26      	ldr	r2, [pc, #152]	; (800701c <USB_SetTurnaroundTime+0x134>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d906      	bls.n	8006f96 <USB_SetTurnaroundTime+0xae>
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4a25      	ldr	r2, [pc, #148]	; (8007020 <USB_SetTurnaroundTime+0x138>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d202      	bcs.n	8006f96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006f90:	2309      	movs	r3, #9
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	e020      	b.n	8006fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4a21      	ldr	r2, [pc, #132]	; (8007020 <USB_SetTurnaroundTime+0x138>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d306      	bcc.n	8006fac <USB_SetTurnaroundTime+0xc4>
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	4a20      	ldr	r2, [pc, #128]	; (8007024 <USB_SetTurnaroundTime+0x13c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d802      	bhi.n	8006fac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006fa6:	2308      	movs	r3, #8
 8006fa8:	617b      	str	r3, [r7, #20]
 8006faa:	e015      	b.n	8006fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	4a1d      	ldr	r2, [pc, #116]	; (8007024 <USB_SetTurnaroundTime+0x13c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d906      	bls.n	8006fc2 <USB_SetTurnaroundTime+0xda>
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	4a1c      	ldr	r2, [pc, #112]	; (8007028 <USB_SetTurnaroundTime+0x140>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d202      	bcs.n	8006fc2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006fbc:	2307      	movs	r3, #7
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	e00a      	b.n	8006fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006fc2:	2306      	movs	r3, #6
 8006fc4:	617b      	str	r3, [r7, #20]
 8006fc6:	e007      	b.n	8006fd8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006fc8:	79fb      	ldrb	r3, [r7, #7]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d102      	bne.n	8006fd4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006fce:	2309      	movs	r3, #9
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	e001      	b.n	8006fd8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006fd4:	2309      	movs	r3, #9
 8006fd6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	68da      	ldr	r2, [r3, #12]
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	029b      	lsls	r3, r3, #10
 8006fec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006ff0:	431a      	orrs	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	371c      	adds	r7, #28
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	00d8acbf 	.word	0x00d8acbf
 8007008:	00e4e1c0 	.word	0x00e4e1c0
 800700c:	00f42400 	.word	0x00f42400
 8007010:	01067380 	.word	0x01067380
 8007014:	011a499f 	.word	0x011a499f
 8007018:	01312cff 	.word	0x01312cff
 800701c:	014ca43f 	.word	0x014ca43f
 8007020:	016e3600 	.word	0x016e3600
 8007024:	01a6ab1f 	.word	0x01a6ab1f
 8007028:	01e84800 	.word	0x01e84800

0800702c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f043 0201 	orr.w	r2, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f023 0201 	bic.w	r2, r3, #1
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	460b      	mov	r3, r1
 800707a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800708c:	78fb      	ldrb	r3, [r7, #3]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d115      	bne.n	80070be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800709e:	200a      	movs	r0, #10
 80070a0:	f7fa fad4 	bl	800164c <HAL_Delay>
      ms += 10U;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	330a      	adds	r3, #10
 80070a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 f939 	bl	8008322 <USB_GetMode>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d01e      	beq.n	80070f4 <USB_SetCurrentMode+0x84>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2bc7      	cmp	r3, #199	; 0xc7
 80070ba:	d9f0      	bls.n	800709e <USB_SetCurrentMode+0x2e>
 80070bc:	e01a      	b.n	80070f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80070be:	78fb      	ldrb	r3, [r7, #3]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d115      	bne.n	80070f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80070d0:	200a      	movs	r0, #10
 80070d2:	f7fa fabb 	bl	800164c <HAL_Delay>
      ms += 10U;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	330a      	adds	r3, #10
 80070da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 f920 	bl	8008322 <USB_GetMode>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <USB_SetCurrentMode+0x84>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2bc7      	cmp	r3, #199	; 0xc7
 80070ec:	d9f0      	bls.n	80070d0 <USB_SetCurrentMode+0x60>
 80070ee:	e001      	b.n	80070f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e005      	b.n	8007100 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2bc8      	cmp	r3, #200	; 0xc8
 80070f8:	d101      	bne.n	80070fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e000      	b.n	8007100 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007108:	b084      	sub	sp, #16
 800710a:	b580      	push	{r7, lr}
 800710c:	b086      	sub	sp, #24
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007122:	2300      	movs	r3, #0
 8007124:	613b      	str	r3, [r7, #16]
 8007126:	e009      	b.n	800713c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	3340      	adds	r3, #64	; 0x40
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	2200      	movs	r2, #0
 8007134:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	3301      	adds	r3, #1
 800713a:	613b      	str	r3, [r7, #16]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	2b0e      	cmp	r3, #14
 8007140:	d9f2      	bls.n	8007128 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007142:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007146:	2b00      	cmp	r3, #0
 8007148:	d11c      	bne.n	8007184 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007158:	f043 0302 	orr.w	r3, r3, #2
 800715c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007162:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	639a      	str	r2, [r3, #56]	; 0x38
 8007182:	e00b      	b.n	800719c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007188:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071a2:	461a      	mov	r2, r3
 80071a4:	2300      	movs	r3, #0
 80071a6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071a8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d10d      	bne.n	80071cc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80071b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d104      	bne.n	80071c2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80071b8:	2100      	movs	r1, #0
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f968 	bl	8007490 <USB_SetDevSpeed>
 80071c0:	e008      	b.n	80071d4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80071c2:	2101      	movs	r1, #1
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f963 	bl	8007490 <USB_SetDevSpeed>
 80071ca:	e003      	b.n	80071d4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80071cc:	2103      	movs	r1, #3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f95e 	bl	8007490 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071d4:	2110      	movs	r1, #16
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f8fa 	bl	80073d0 <USB_FlushTxFifo>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f924 	bl	8007434 <USB_FlushRxFifo>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fc:	461a      	mov	r2, r3
 80071fe:	2300      	movs	r3, #0
 8007200:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007208:	461a      	mov	r2, r3
 800720a:	2300      	movs	r3, #0
 800720c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007214:	461a      	mov	r2, r3
 8007216:	2300      	movs	r3, #0
 8007218:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800721a:	2300      	movs	r3, #0
 800721c:	613b      	str	r3, [r7, #16]
 800721e:	e043      	b.n	80072a8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007232:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007236:	d118      	bne.n	800726a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10a      	bne.n	8007254 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4413      	add	r3, r2
 8007246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724a:	461a      	mov	r2, r3
 800724c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	e013      	b.n	800727c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	015a      	lsls	r2, r3, #5
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	4413      	add	r3, r2
 800725c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007260:	461a      	mov	r2, r3
 8007262:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007266:	6013      	str	r3, [r2, #0]
 8007268:	e008      	b.n	800727c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4413      	add	r3, r2
 8007272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007276:	461a      	mov	r2, r3
 8007278:	2300      	movs	r3, #0
 800727a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007288:	461a      	mov	r2, r3
 800728a:	2300      	movs	r3, #0
 800728c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729a:	461a      	mov	r2, r3
 800729c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	3301      	adds	r3, #1
 80072a6:	613b      	str	r3, [r7, #16]
 80072a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072ac:	461a      	mov	r2, r3
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d3b5      	bcc.n	8007220 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072b4:	2300      	movs	r3, #0
 80072b6:	613b      	str	r3, [r7, #16]
 80072b8:	e043      	b.n	8007342 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072d0:	d118      	bne.n	8007304 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10a      	bne.n	80072ee <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e4:	461a      	mov	r2, r3
 80072e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072ea:	6013      	str	r3, [r2, #0]
 80072ec:	e013      	b.n	8007316 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fa:	461a      	mov	r2, r3
 80072fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007300:	6013      	str	r3, [r2, #0]
 8007302:	e008      	b.n	8007316 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007310:	461a      	mov	r2, r3
 8007312:	2300      	movs	r3, #0
 8007314:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	4413      	add	r3, r2
 800731e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007322:	461a      	mov	r2, r3
 8007324:	2300      	movs	r3, #0
 8007326:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007334:	461a      	mov	r2, r3
 8007336:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800733a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	3301      	adds	r3, #1
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007346:	461a      	mov	r2, r3
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	4293      	cmp	r3, r2
 800734c:	d3b5      	bcc.n	80072ba <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800735c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007360:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800736e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007370:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007374:	2b00      	cmp	r3, #0
 8007376:	d105      	bne.n	8007384 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	699b      	ldr	r3, [r3, #24]
 800737c:	f043 0210 	orr.w	r2, r3, #16
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	699a      	ldr	r2, [r3, #24]
 8007388:	4b10      	ldr	r3, [pc, #64]	; (80073cc <USB_DevInit+0x2c4>)
 800738a:	4313      	orrs	r3, r2
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007390:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007394:	2b00      	cmp	r3, #0
 8007396:	d005      	beq.n	80073a4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	f043 0208 	orr.w	r2, r3, #8
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80073a4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d107      	bne.n	80073bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073b4:	f043 0304 	orr.w	r3, r3, #4
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80073bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073c8:	b004      	add	sp, #16
 80073ca:	4770      	bx	lr
 80073cc:	803c3800 	.word	0x803c3800

080073d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	3301      	adds	r3, #1
 80073e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80073ea:	d901      	bls.n	80073f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e01b      	b.n	8007428 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	daf2      	bge.n	80073de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80073f8:	2300      	movs	r3, #0
 80073fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	019b      	lsls	r3, r3, #6
 8007400:	f043 0220 	orr.w	r2, r3, #32
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3301      	adds	r3, #1
 800740c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007414:	d901      	bls.n	800741a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e006      	b.n	8007428 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	f003 0320 	and.w	r3, r3, #32
 8007422:	2b20      	cmp	r3, #32
 8007424:	d0f0      	beq.n	8007408 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800743c:	2300      	movs	r3, #0
 800743e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	3301      	adds	r3, #1
 8007444:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800744c:	d901      	bls.n	8007452 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e018      	b.n	8007484 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	daf2      	bge.n	8007440 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2210      	movs	r2, #16
 8007462:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	3301      	adds	r3, #1
 8007468:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007470:	d901      	bls.n	8007476 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e006      	b.n	8007484 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f003 0310 	and.w	r3, r3, #16
 800747e:	2b10      	cmp	r3, #16
 8007480:	d0f0      	beq.n	8007464 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3714      	adds	r7, #20
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	78fb      	ldrb	r3, [r7, #3]
 80074aa:	68f9      	ldr	r1, [r7, #12]
 80074ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074b0:	4313      	orrs	r3, r2
 80074b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b087      	sub	sp, #28
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f003 0306 	and.w	r3, r3, #6
 80074da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d102      	bne.n	80074e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80074e2:	2300      	movs	r3, #0
 80074e4:	75fb      	strb	r3, [r7, #23]
 80074e6:	e00a      	b.n	80074fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d002      	beq.n	80074f4 <USB_GetDevSpeed+0x32>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b06      	cmp	r3, #6
 80074f2:	d102      	bne.n	80074fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80074f4:	2302      	movs	r3, #2
 80074f6:	75fb      	strb	r3, [r7, #23]
 80074f8:	e001      	b.n	80074fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80074fa:	230f      	movs	r3, #15
 80074fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80074fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007500:	4618      	mov	r0, r3
 8007502:	371c      	adds	r7, #28
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	785b      	ldrb	r3, [r3, #1]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d13a      	bne.n	800759e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752e:	69da      	ldr	r2, [r3, #28]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	f003 030f 	and.w	r3, r3, #15
 8007538:	2101      	movs	r1, #1
 800753a:	fa01 f303 	lsl.w	r3, r1, r3
 800753e:	b29b      	uxth	r3, r3
 8007540:	68f9      	ldr	r1, [r7, #12]
 8007542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007546:	4313      	orrs	r3, r2
 8007548:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	015a      	lsls	r2, r3, #5
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4413      	add	r3, r2
 8007552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d155      	bne.n	800760c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	015a      	lsls	r2, r3, #5
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4413      	add	r3, r2
 8007568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	791b      	ldrb	r3, [r3, #4]
 800757a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800757c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	059b      	lsls	r3, r3, #22
 8007582:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007584:	4313      	orrs	r3, r2
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	0151      	lsls	r1, r2, #5
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	440a      	add	r2, r1
 800758e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800759a:	6013      	str	r3, [r2, #0]
 800759c:	e036      	b.n	800760c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a4:	69da      	ldr	r2, [r3, #28]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	f003 030f 	and.w	r3, r3, #15
 80075ae:	2101      	movs	r1, #1
 80075b0:	fa01 f303 	lsl.w	r3, r1, r3
 80075b4:	041b      	lsls	r3, r3, #16
 80075b6:	68f9      	ldr	r1, [r7, #12]
 80075b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075bc:	4313      	orrs	r3, r2
 80075be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d11a      	bne.n	800760c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	791b      	ldrb	r3, [r3, #4]
 80075f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80075f2:	430b      	orrs	r3, r1
 80075f4:	4313      	orrs	r3, r2
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	0151      	lsls	r1, r2, #5
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	440a      	add	r2, r1
 80075fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800760a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
	...

0800761c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	785b      	ldrb	r3, [r3, #1]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d161      	bne.n	80076fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4413      	add	r3, r2
 8007640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800764a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800764e:	d11f      	bne.n	8007690 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	0151      	lsls	r1, r2, #5
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	440a      	add	r2, r1
 8007666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800766a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800766e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	0151      	lsls	r1, r2, #5
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	440a      	add	r2, r1
 8007686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800768a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800768e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	f003 030f 	and.w	r3, r3, #15
 80076a0:	2101      	movs	r1, #1
 80076a2:	fa01 f303 	lsl.w	r3, r1, r3
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	43db      	mvns	r3, r3
 80076aa:	68f9      	ldr	r1, [r7, #12]
 80076ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076b0:	4013      	ands	r3, r2
 80076b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ba:	69da      	ldr	r2, [r3, #28]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	f003 030f 	and.w	r3, r3, #15
 80076c4:	2101      	movs	r1, #1
 80076c6:	fa01 f303 	lsl.w	r3, r1, r3
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	43db      	mvns	r3, r3
 80076ce:	68f9      	ldr	r1, [r7, #12]
 80076d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076d4:	4013      	ands	r3, r2
 80076d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	0159      	lsls	r1, r3, #5
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	440b      	add	r3, r1
 80076ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f2:	4619      	mov	r1, r3
 80076f4:	4b35      	ldr	r3, [pc, #212]	; (80077cc <USB_DeactivateEndpoint+0x1b0>)
 80076f6:	4013      	ands	r3, r2
 80076f8:	600b      	str	r3, [r1, #0]
 80076fa:	e060      	b.n	80077be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	015a      	lsls	r2, r3, #5
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	4413      	add	r3, r2
 8007704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800770e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007712:	d11f      	bne.n	8007754 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	0151      	lsls	r1, r2, #5
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	440a      	add	r2, r1
 800772a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800772e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007732:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4413      	add	r3, r2
 800773c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	0151      	lsls	r1, r2, #5
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	440a      	add	r2, r1
 800774a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800774e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007752:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	f003 030f 	and.w	r3, r3, #15
 8007764:	2101      	movs	r1, #1
 8007766:	fa01 f303 	lsl.w	r3, r1, r3
 800776a:	041b      	lsls	r3, r3, #16
 800776c:	43db      	mvns	r3, r3
 800776e:	68f9      	ldr	r1, [r7, #12]
 8007770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007774:	4013      	ands	r3, r2
 8007776:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800777e:	69da      	ldr	r2, [r3, #28]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	f003 030f 	and.w	r3, r3, #15
 8007788:	2101      	movs	r1, #1
 800778a:	fa01 f303 	lsl.w	r3, r1, r3
 800778e:	041b      	lsls	r3, r3, #16
 8007790:	43db      	mvns	r3, r3
 8007792:	68f9      	ldr	r1, [r7, #12]
 8007794:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007798:	4013      	ands	r3, r2
 800779a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	0159      	lsls	r1, r3, #5
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	440b      	add	r3, r1
 80077b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b6:	4619      	mov	r1, r3
 80077b8:	4b05      	ldr	r3, [pc, #20]	; (80077d0 <USB_DeactivateEndpoint+0x1b4>)
 80077ba:	4013      	ands	r3, r2
 80077bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	ec337800 	.word	0xec337800
 80077d0:	eff37800 	.word	0xeff37800

080077d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08a      	sub	sp, #40	; 0x28
 80077d8:	af02      	add	r7, sp, #8
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	4613      	mov	r3, r2
 80077e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	785b      	ldrb	r3, [r3, #1]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	f040 817a 	bne.w	8007aea <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d132      	bne.n	8007864 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	4413      	add	r3, r2
 8007806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	0151      	lsls	r1, r2, #5
 8007810:	69fa      	ldr	r2, [r7, #28]
 8007812:	440a      	add	r2, r1
 8007814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007818:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800781c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007820:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	4413      	add	r3, r2
 800782a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	0151      	lsls	r1, r2, #5
 8007834:	69fa      	ldr	r2, [r7, #28]
 8007836:	440a      	add	r2, r1
 8007838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800783c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007840:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	4413      	add	r3, r2
 800784a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	69ba      	ldr	r2, [r7, #24]
 8007852:	0151      	lsls	r1, r2, #5
 8007854:	69fa      	ldr	r2, [r7, #28]
 8007856:	440a      	add	r2, r1
 8007858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800785c:	0cdb      	lsrs	r3, r3, #19
 800785e:	04db      	lsls	r3, r3, #19
 8007860:	6113      	str	r3, [r2, #16]
 8007862:	e092      	b.n	800798a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	4413      	add	r3, r2
 800786c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	0151      	lsls	r1, r2, #5
 8007876:	69fa      	ldr	r2, [r7, #28]
 8007878:	440a      	add	r2, r1
 800787a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800787e:	0cdb      	lsrs	r3, r3, #19
 8007880:	04db      	lsls	r3, r3, #19
 8007882:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	4413      	add	r3, r2
 800788c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	69ba      	ldr	r2, [r7, #24]
 8007894:	0151      	lsls	r1, r2, #5
 8007896:	69fa      	ldr	r2, [r7, #28]
 8007898:	440a      	add	r2, r1
 800789a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800789e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078a6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d11a      	bne.n	80078e4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	691a      	ldr	r2, [r3, #16]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d903      	bls.n	80078c2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	689a      	ldr	r2, [r3, #8]
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	0151      	lsls	r1, r2, #5
 80078d4:	69fa      	ldr	r2, [r7, #28]
 80078d6:	440a      	add	r2, r1
 80078d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078e0:	6113      	str	r3, [r2, #16]
 80078e2:	e01b      	b.n	800791c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	6919      	ldr	r1, [r3, #16]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	440b      	add	r3, r1
 80078fc:	1e59      	subs	r1, r3, #1
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	fbb1 f3f3 	udiv	r3, r1, r3
 8007906:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007908:	4ba2      	ldr	r3, [pc, #648]	; (8007b94 <USB_EPStartXfer+0x3c0>)
 800790a:	400b      	ands	r3, r1
 800790c:	69b9      	ldr	r1, [r7, #24]
 800790e:	0148      	lsls	r0, r1, #5
 8007910:	69f9      	ldr	r1, [r7, #28]
 8007912:	4401      	add	r1, r0
 8007914:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007918:	4313      	orrs	r3, r2
 800791a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	4413      	add	r3, r2
 8007924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007928:	691a      	ldr	r2, [r3, #16]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007932:	69b9      	ldr	r1, [r7, #24]
 8007934:	0148      	lsls	r0, r1, #5
 8007936:	69f9      	ldr	r1, [r7, #28]
 8007938:	4401      	add	r1, r0
 800793a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800793e:	4313      	orrs	r3, r2
 8007940:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	791b      	ldrb	r3, [r3, #4]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d11f      	bne.n	800798a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	4413      	add	r3, r2
 8007952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	0151      	lsls	r1, r2, #5
 800795c:	69fa      	ldr	r2, [r7, #28]
 800795e:	440a      	add	r2, r1
 8007960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007964:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007968:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	4413      	add	r3, r2
 8007972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	0151      	lsls	r1, r2, #5
 800797c:	69fa      	ldr	r2, [r7, #28]
 800797e:	440a      	add	r2, r1
 8007980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007984:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007988:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800798a:	79fb      	ldrb	r3, [r7, #7]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d14b      	bne.n	8007a28 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d009      	beq.n	80079ac <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a4:	461a      	mov	r2, r3
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	791b      	ldrb	r3, [r3, #4]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d128      	bne.n	8007a06 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d110      	bne.n	80079e6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	0151      	lsls	r1, r2, #5
 80079d6:	69fa      	ldr	r2, [r7, #28]
 80079d8:	440a      	add	r2, r1
 80079da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	e00f      	b.n	8007a06 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	015a      	lsls	r2, r3, #5
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	0151      	lsls	r1, r2, #5
 80079f8:	69fa      	ldr	r2, [r7, #28]
 80079fa:	440a      	add	r2, r1
 80079fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a04:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	0151      	lsls	r1, r2, #5
 8007a18:	69fa      	ldr	r2, [r7, #28]
 8007a1a:	440a      	add	r2, r1
 8007a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a24:	6013      	str	r3, [r2, #0]
 8007a26:	e165      	b.n	8007cf4 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	0151      	lsls	r1, r2, #5
 8007a3a:	69fa      	ldr	r2, [r7, #28]
 8007a3c:	440a      	add	r2, r1
 8007a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a46:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	791b      	ldrb	r3, [r3, #4]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d015      	beq.n	8007a7c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 814d 	beq.w	8007cf4 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	f003 030f 	and.w	r3, r3, #15
 8007a6a:	2101      	movs	r1, #1
 8007a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a70:	69f9      	ldr	r1, [r7, #28]
 8007a72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a76:	4313      	orrs	r3, r2
 8007a78:	634b      	str	r3, [r1, #52]	; 0x34
 8007a7a:	e13b      	b.n	8007cf4 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d110      	bne.n	8007aae <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	69ba      	ldr	r2, [r7, #24]
 8007a9c:	0151      	lsls	r1, r2, #5
 8007a9e:	69fa      	ldr	r2, [r7, #28]
 8007aa0:	440a      	add	r2, r1
 8007aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007aaa:	6013      	str	r3, [r2, #0]
 8007aac:	e00f      	b.n	8007ace <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	0151      	lsls	r1, r2, #5
 8007ac0:	69fa      	ldr	r2, [r7, #28]
 8007ac2:	440a      	add	r2, r1
 8007ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007acc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	68d9      	ldr	r1, [r3, #12]
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	781a      	ldrb	r2, [r3, #0]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	b298      	uxth	r0, r3
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 f9b8 	bl	8007e58 <USB_WritePacket>
 8007ae8:	e104      	b.n	8007cf4 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	69ba      	ldr	r2, [r7, #24]
 8007afa:	0151      	lsls	r1, r2, #5
 8007afc:	69fa      	ldr	r2, [r7, #28]
 8007afe:	440a      	add	r2, r1
 8007b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b04:	0cdb      	lsrs	r3, r3, #19
 8007b06:	04db      	lsls	r3, r3, #19
 8007b08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	0151      	lsls	r1, r2, #5
 8007b1c:	69fa      	ldr	r2, [r7, #28]
 8007b1e:	440a      	add	r2, r1
 8007b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b2c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d131      	bne.n	8007b98 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	689a      	ldr	r2, [r3, #8]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b58:	691a      	ldr	r2, [r3, #16]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b62:	69b9      	ldr	r1, [r7, #24]
 8007b64:	0148      	lsls	r0, r1, #5
 8007b66:	69f9      	ldr	r1, [r7, #28]
 8007b68:	4401      	add	r1, r0
 8007b6a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	69fb      	ldr	r3, [r7, #28]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	69ba      	ldr	r2, [r7, #24]
 8007b82:	0151      	lsls	r1, r2, #5
 8007b84:	69fa      	ldr	r2, [r7, #28]
 8007b86:	440a      	add	r2, r1
 8007b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b90:	6113      	str	r3, [r2, #16]
 8007b92:	e061      	b.n	8007c58 <USB_EPStartXfer+0x484>
 8007b94:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d123      	bne.n	8007be8 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bac:	691a      	ldr	r2, [r3, #16]
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bb6:	69b9      	ldr	r1, [r7, #24]
 8007bb8:	0148      	lsls	r0, r1, #5
 8007bba:	69f9      	ldr	r1, [r7, #28]
 8007bbc:	4401      	add	r1, r0
 8007bbe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	0151      	lsls	r1, r2, #5
 8007bd8:	69fa      	ldr	r2, [r7, #28]
 8007bda:	440a      	add	r2, r1
 8007bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007be0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007be4:	6113      	str	r3, [r2, #16]
 8007be6:	e037      	b.n	8007c58 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	691a      	ldr	r2, [r3, #16]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	1e5a      	subs	r2, r3, #1
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bfc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	8afa      	ldrh	r2, [r7, #22]
 8007c04:	fb03 f202 	mul.w	r2, r3, r2
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	015a      	lsls	r2, r3, #5
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c18:	691a      	ldr	r2, [r3, #16]
 8007c1a:	8afb      	ldrh	r3, [r7, #22]
 8007c1c:	04d9      	lsls	r1, r3, #19
 8007c1e:	4b38      	ldr	r3, [pc, #224]	; (8007d00 <USB_EPStartXfer+0x52c>)
 8007c20:	400b      	ands	r3, r1
 8007c22:	69b9      	ldr	r1, [r7, #24]
 8007c24:	0148      	lsls	r0, r1, #5
 8007c26:	69f9      	ldr	r1, [r7, #28]
 8007c28:	4401      	add	r1, r0
 8007c2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3e:	691a      	ldr	r2, [r3, #16]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c48:	69b9      	ldr	r1, [r7, #24]
 8007c4a:	0148      	lsls	r0, r1, #5
 8007c4c:	69f9      	ldr	r1, [r7, #28]
 8007c4e:	4401      	add	r1, r0
 8007c50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c54:	4313      	orrs	r3, r2
 8007c56:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007c58:	79fb      	ldrb	r3, [r7, #7]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d10d      	bne.n	8007c7a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d009      	beq.n	8007c7a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	68d9      	ldr	r1, [r3, #12]
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	015a      	lsls	r2, r3, #5
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c76:	460a      	mov	r2, r1
 8007c78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	791b      	ldrb	r3, [r3, #4]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d128      	bne.n	8007cd4 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d110      	bne.n	8007cb4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	0151      	lsls	r1, r2, #5
 8007ca4:	69fa      	ldr	r2, [r7, #28]
 8007ca6:	440a      	add	r2, r1
 8007ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	e00f      	b.n	8007cd4 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	0151      	lsls	r1, r2, #5
 8007cc6:	69fa      	ldr	r2, [r7, #28]
 8007cc8:	440a      	add	r2, r1
 8007cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cd2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	0151      	lsls	r1, r2, #5
 8007ce6:	69fa      	ldr	r2, [r7, #28]
 8007ce8:	440a      	add	r2, r1
 8007cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3720      	adds	r7, #32
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	1ff80000 	.word	0x1ff80000

08007d04 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b087      	sub	sp, #28
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	785b      	ldrb	r3, [r3, #1]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d14a      	bne.n	8007db8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d3a:	f040 8086 	bne.w	8007e4a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	7812      	ldrb	r2, [r2, #0]
 8007d52:	0151      	lsls	r1, r2, #5
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	440a      	add	r2, r1
 8007d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d60:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	015a      	lsls	r2, r3, #5
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	7812      	ldrb	r2, [r2, #0]
 8007d76:	0151      	lsls	r1, r2, #5
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	440a      	add	r2, r1
 8007d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d902      	bls.n	8007d9c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	75fb      	strb	r3, [r7, #23]
          break;
 8007d9a:	e056      	b.n	8007e4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	015a      	lsls	r2, r3, #5
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	4413      	add	r3, r2
 8007da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007db4:	d0e7      	beq.n	8007d86 <USB_EPStopXfer+0x82>
 8007db6:	e048      	b.n	8007e4a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dd0:	d13b      	bne.n	8007e4a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	7812      	ldrb	r2, [r2, #0]
 8007de6:	0151      	lsls	r1, r2, #5
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	440a      	add	r2, r1
 8007dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007df0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007df4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	7812      	ldrb	r2, [r2, #0]
 8007e0a:	0151      	lsls	r1, r2, #5
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	440a      	add	r2, r1
 8007e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f242 7210 	movw	r2, #10000	; 0x2710
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d902      	bls.n	8007e30 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e2e:	e00c      	b.n	8007e4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e48:	d0e7      	beq.n	8007e1a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	371c      	adds	r7, #28
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b089      	sub	sp, #36	; 0x24
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	4611      	mov	r1, r2
 8007e64:	461a      	mov	r2, r3
 8007e66:	460b      	mov	r3, r1
 8007e68:	71fb      	strb	r3, [r7, #7]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007e76:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d123      	bne.n	8007ec6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e7e:	88bb      	ldrh	r3, [r7, #4]
 8007e80:	3303      	adds	r3, #3
 8007e82:	089b      	lsrs	r3, r3, #2
 8007e84:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e86:	2300      	movs	r3, #0
 8007e88:	61bb      	str	r3, [r7, #24]
 8007e8a:	e018      	b.n	8007ebe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e8c:	79fb      	ldrb	r3, [r7, #7]
 8007e8e:	031a      	lsls	r2, r3, #12
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e98:	461a      	mov	r2, r3
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	61bb      	str	r3, [r7, #24]
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d3e2      	bcc.n	8007e8c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3724      	adds	r7, #36	; 0x24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b08b      	sub	sp, #44	; 0x2c
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007eea:	88fb      	ldrh	r3, [r7, #6]
 8007eec:	089b      	lsrs	r3, r3, #2
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ef2:	88fb      	ldrh	r3, [r7, #6]
 8007ef4:	f003 0303 	and.w	r3, r3, #3
 8007ef8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007efa:	2300      	movs	r3, #0
 8007efc:	623b      	str	r3, [r7, #32]
 8007efe:	e014      	b.n	8007f2a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0e:	3301      	adds	r3, #1
 8007f10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	3301      	adds	r3, #1
 8007f16:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	3301      	adds	r3, #1
 8007f22:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	3301      	adds	r3, #1
 8007f28:	623b      	str	r3, [r7, #32]
 8007f2a:	6a3a      	ldr	r2, [r7, #32]
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d3e6      	bcc.n	8007f00 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f32:	8bfb      	ldrh	r3, [r7, #30]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d01e      	beq.n	8007f76 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f42:	461a      	mov	r2, r3
 8007f44:	f107 0310 	add.w	r3, r7, #16
 8007f48:	6812      	ldr	r2, [r2, #0]
 8007f4a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	00db      	lsls	r3, r3, #3
 8007f54:	fa22 f303 	lsr.w	r3, r2, r3
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	701a      	strb	r2, [r3, #0]
      i++;
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	3301      	adds	r3, #1
 8007f62:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f66:	3301      	adds	r3, #1
 8007f68:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007f6a:	8bfb      	ldrh	r3, [r7, #30]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f70:	8bfb      	ldrh	r3, [r7, #30]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1ea      	bne.n	8007f4c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	372c      	adds	r7, #44	; 0x2c
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	785b      	ldrb	r3, [r3, #1]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d12c      	bne.n	8007ffa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	db12      	blt.n	8007fd8 <USB_EPSetStall+0x54>
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00f      	beq.n	8007fd8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	0151      	lsls	r1, r2, #5
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	440a      	add	r2, r1
 8007fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fd6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	0151      	lsls	r1, r2, #5
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	440a      	add	r2, r1
 8007fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ff2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	e02b      	b.n	8008052 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	4413      	add	r3, r2
 8008002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	db12      	blt.n	8008032 <USB_EPSetStall+0xae>
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00f      	beq.n	8008032 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	0151      	lsls	r1, r2, #5
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	440a      	add	r2, r1
 8008028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800802c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008030:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	4413      	add	r3, r2
 800803a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	0151      	lsls	r1, r2, #5
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	440a      	add	r2, r1
 8008048:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800804c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008050:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	785b      	ldrb	r3, [r3, #1]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d128      	bne.n	80080ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	0151      	lsls	r1, r2, #5
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	440a      	add	r2, r1
 8008092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008096:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800809a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	791b      	ldrb	r3, [r3, #4]
 80080a0:	2b03      	cmp	r3, #3
 80080a2:	d003      	beq.n	80080ac <USB_EPClearStall+0x4c>
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	791b      	ldrb	r3, [r3, #4]
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d138      	bne.n	800811e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	0151      	lsls	r1, r2, #5
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	440a      	add	r2, r1
 80080c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	e027      	b.n	800811e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	0151      	lsls	r1, r2, #5
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	440a      	add	r2, r1
 80080e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	791b      	ldrb	r3, [r3, #4]
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d003      	beq.n	80080fe <USB_EPClearStall+0x9e>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	791b      	ldrb	r3, [r3, #4]
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d10f      	bne.n	800811e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	4413      	add	r3, r2
 8008106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	0151      	lsls	r1, r2, #5
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	440a      	add	r2, r1
 8008114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800811c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	460b      	mov	r3, r1
 8008136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800814a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800814e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	78fb      	ldrb	r3, [r7, #3]
 800815a:	011b      	lsls	r3, r3, #4
 800815c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008160:	68f9      	ldr	r1, [r7, #12]
 8008162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008166:	4313      	orrs	r3, r2
 8008168:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008192:	f023 0303 	bic.w	r3, r3, #3
 8008196:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081a6:	f023 0302 	bic.w	r3, r3, #2
 80081aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b085      	sub	sp, #20
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081d4:	f023 0303 	bic.w	r3, r3, #3
 80081d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081e8:	f043 0302 	orr.w	r3, r3, #2
 80081ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	4013      	ands	r3, r2
 8008212:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008214:	68fb      	ldr	r3, [r7, #12]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008222:	b480      	push	{r7}
 8008224:	b085      	sub	sp, #20
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800823e:	69db      	ldr	r3, [r3, #28]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	4013      	ands	r3, r2
 8008244:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	0c1b      	lsrs	r3, r3, #16
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008256:	b480      	push	{r7}
 8008258:	b085      	sub	sp, #20
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008272:	69db      	ldr	r3, [r3, #28]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	4013      	ands	r3, r2
 8008278:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	b29b      	uxth	r3, r3
}
 800827e:	4618      	mov	r0, r3
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800828a:	b480      	push	{r7}
 800828c:	b085      	sub	sp, #20
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	015a      	lsls	r2, r3, #5
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4413      	add	r3, r2
 80082a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	4013      	ands	r3, r2
 80082b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082b8:	68bb      	ldr	r3, [r7, #8]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082c6:	b480      	push	{r7}
 80082c8:	b087      	sub	sp, #28
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	460b      	mov	r3, r1
 80082d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80082ea:	78fb      	ldrb	r3, [r7, #3]
 80082ec:	f003 030f 	and.w	r3, r3, #15
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	fa22 f303 	lsr.w	r3, r2, r3
 80082f6:	01db      	lsls	r3, r3, #7
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	4413      	add	r3, r2
 8008308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	4013      	ands	r3, r2
 8008312:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008314:	68bb      	ldr	r3, [r7, #8]
}
 8008316:	4618      	mov	r0, r3
 8008318:	371c      	adds	r7, #28
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008322:	b480      	push	{r7}
 8008324:	b083      	sub	sp, #12
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	f003 0301 	and.w	r3, r3, #1
}
 8008332:	4618      	mov	r0, r3
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800833e:	b480      	push	{r7}
 8008340:	b085      	sub	sp, #20
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008358:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800835c:	f023 0307 	bic.w	r3, r3, #7
 8008360:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008374:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3714      	adds	r7, #20
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008384:	b480      	push	{r7}
 8008386:	b087      	sub	sp, #28
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	460b      	mov	r3, r1
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	333c      	adds	r3, #60	; 0x3c
 800839a:	3304      	adds	r3, #4
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	4a26      	ldr	r2, [pc, #152]	; (800843c <USB_EP0_OutStart+0xb8>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d90a      	bls.n	80083be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083b8:	d101      	bne.n	80083be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	e037      	b.n	800842e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c4:	461a      	mov	r2, r3
 80083c6:	2300      	movs	r3, #0
 80083c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ec:	f043 0318 	orr.w	r3, r3, #24
 80083f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008400:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008404:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008406:	7afb      	ldrb	r3, [r7, #11]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d10f      	bne.n	800842c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008412:	461a      	mov	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008426:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800842a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	371c      	adds	r7, #28
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	4f54300a 	.word	0x4f54300a

08008440 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008448:	2300      	movs	r3, #0
 800844a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	3301      	adds	r3, #1
 8008450:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008458:	d901      	bls.n	800845e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e01b      	b.n	8008496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	daf2      	bge.n	800844c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008466:	2300      	movs	r3, #0
 8008468:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	f043 0201 	orr.w	r2, r3, #1
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3301      	adds	r3, #1
 800847a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008482:	d901      	bls.n	8008488 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e006      	b.n	8008496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	2b01      	cmp	r3, #1
 8008492:	d0f0      	beq.n	8008476 <USB_CoreReset+0x36>

  return HAL_OK;
 8008494:	2300      	movs	r3, #0
}
 8008496:	4618      	mov	r0, r3
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
	...

080084a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	460b      	mov	r3, r1
 80084ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80084b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80084b4:	f002 fca2 	bl	800adfc <USBD_static_malloc>
 80084b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d109      	bne.n	80084d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	32b0      	adds	r2, #176	; 0xb0
 80084ca:	2100      	movs	r1, #0
 80084cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80084d0:	2302      	movs	r3, #2
 80084d2:	e0d4      	b.n	800867e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80084d4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80084d8:	2100      	movs	r1, #0
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f002 fd06 	bl	800aeec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	32b0      	adds	r2, #176	; 0xb0
 80084ea:	68f9      	ldr	r1, [r7, #12]
 80084ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	32b0      	adds	r2, #176	; 0xb0
 80084fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	7c1b      	ldrb	r3, [r3, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d138      	bne.n	800857e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800850c:	4b5e      	ldr	r3, [pc, #376]	; (8008688 <USBD_CDC_Init+0x1e4>)
 800850e:	7819      	ldrb	r1, [r3, #0]
 8008510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008514:	2202      	movs	r2, #2
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f002 fb4d 	bl	800abb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800851c:	4b5a      	ldr	r3, [pc, #360]	; (8008688 <USBD_CDC_Init+0x1e4>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	f003 020f 	and.w	r2, r3, #15
 8008524:	6879      	ldr	r1, [r7, #4]
 8008526:	4613      	mov	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	440b      	add	r3, r1
 8008530:	3324      	adds	r3, #36	; 0x24
 8008532:	2201      	movs	r2, #1
 8008534:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008536:	4b55      	ldr	r3, [pc, #340]	; (800868c <USBD_CDC_Init+0x1e8>)
 8008538:	7819      	ldrb	r1, [r3, #0]
 800853a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800853e:	2202      	movs	r2, #2
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f002 fb38 	bl	800abb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008546:	4b51      	ldr	r3, [pc, #324]	; (800868c <USBD_CDC_Init+0x1e8>)
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	f003 020f 	and.w	r2, r3, #15
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	4613      	mov	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	440b      	add	r3, r1
 800855a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800855e:	2201      	movs	r2, #1
 8008560:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008562:	4b4b      	ldr	r3, [pc, #300]	; (8008690 <USBD_CDC_Init+0x1ec>)
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	f003 020f 	and.w	r2, r3, #15
 800856a:	6879      	ldr	r1, [r7, #4]
 800856c:	4613      	mov	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	440b      	add	r3, r1
 8008576:	3326      	adds	r3, #38	; 0x26
 8008578:	2210      	movs	r2, #16
 800857a:	801a      	strh	r2, [r3, #0]
 800857c:	e035      	b.n	80085ea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800857e:	4b42      	ldr	r3, [pc, #264]	; (8008688 <USBD_CDC_Init+0x1e4>)
 8008580:	7819      	ldrb	r1, [r3, #0]
 8008582:	2340      	movs	r3, #64	; 0x40
 8008584:	2202      	movs	r2, #2
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f002 fb15 	bl	800abb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800858c:	4b3e      	ldr	r3, [pc, #248]	; (8008688 <USBD_CDC_Init+0x1e4>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	f003 020f 	and.w	r2, r3, #15
 8008594:	6879      	ldr	r1, [r7, #4]
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	440b      	add	r3, r1
 80085a0:	3324      	adds	r3, #36	; 0x24
 80085a2:	2201      	movs	r2, #1
 80085a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80085a6:	4b39      	ldr	r3, [pc, #228]	; (800868c <USBD_CDC_Init+0x1e8>)
 80085a8:	7819      	ldrb	r1, [r3, #0]
 80085aa:	2340      	movs	r3, #64	; 0x40
 80085ac:	2202      	movs	r2, #2
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f002 fb01 	bl	800abb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80085b4:	4b35      	ldr	r3, [pc, #212]	; (800868c <USBD_CDC_Init+0x1e8>)
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	f003 020f 	and.w	r2, r3, #15
 80085bc:	6879      	ldr	r1, [r7, #4]
 80085be:	4613      	mov	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	440b      	add	r3, r1
 80085c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085cc:	2201      	movs	r2, #1
 80085ce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80085d0:	4b2f      	ldr	r3, [pc, #188]	; (8008690 <USBD_CDC_Init+0x1ec>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	f003 020f 	and.w	r2, r3, #15
 80085d8:	6879      	ldr	r1, [r7, #4]
 80085da:	4613      	mov	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	440b      	add	r3, r1
 80085e4:	3326      	adds	r3, #38	; 0x26
 80085e6:	2210      	movs	r2, #16
 80085e8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80085ea:	4b29      	ldr	r3, [pc, #164]	; (8008690 <USBD_CDC_Init+0x1ec>)
 80085ec:	7819      	ldrb	r1, [r3, #0]
 80085ee:	2308      	movs	r3, #8
 80085f0:	2203      	movs	r2, #3
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f002 fadf 	bl	800abb6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80085f8:	4b25      	ldr	r3, [pc, #148]	; (8008690 <USBD_CDC_Init+0x1ec>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	f003 020f 	and.w	r2, r3, #15
 8008600:	6879      	ldr	r1, [r7, #4]
 8008602:	4613      	mov	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	440b      	add	r3, r1
 800860c:	3324      	adds	r3, #36	; 0x24
 800860e:	2201      	movs	r2, #1
 8008610:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	33b0      	adds	r3, #176	; 0xb0
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008648:	2302      	movs	r3, #2
 800864a:	e018      	b.n	800867e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	7c1b      	ldrb	r3, [r3, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10a      	bne.n	800866a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008654:	4b0d      	ldr	r3, [pc, #52]	; (800868c <USBD_CDC_Init+0x1e8>)
 8008656:	7819      	ldrb	r1, [r3, #0]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800865e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f002 fb96 	bl	800ad94 <USBD_LL_PrepareReceive>
 8008668:	e008      	b.n	800867c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800866a:	4b08      	ldr	r3, [pc, #32]	; (800868c <USBD_CDC_Init+0x1e8>)
 800866c:	7819      	ldrb	r1, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008674:	2340      	movs	r3, #64	; 0x40
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f002 fb8c 	bl	800ad94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	20000097 	.word	0x20000097
 800868c:	20000098 	.word	0x20000098
 8008690:	20000099 	.word	0x20000099

08008694 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	460b      	mov	r3, r1
 800869e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80086a0:	4b3a      	ldr	r3, [pc, #232]	; (800878c <USBD_CDC_DeInit+0xf8>)
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	4619      	mov	r1, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f002 faab 	bl	800ac02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80086ac:	4b37      	ldr	r3, [pc, #220]	; (800878c <USBD_CDC_DeInit+0xf8>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	f003 020f 	and.w	r2, r3, #15
 80086b4:	6879      	ldr	r1, [r7, #4]
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	440b      	add	r3, r1
 80086c0:	3324      	adds	r3, #36	; 0x24
 80086c2:	2200      	movs	r2, #0
 80086c4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80086c6:	4b32      	ldr	r3, [pc, #200]	; (8008790 <USBD_CDC_DeInit+0xfc>)
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f002 fa98 	bl	800ac02 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80086d2:	4b2f      	ldr	r3, [pc, #188]	; (8008790 <USBD_CDC_DeInit+0xfc>)
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	f003 020f 	and.w	r2, r3, #15
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	4613      	mov	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	440b      	add	r3, r1
 80086e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80086ea:	2200      	movs	r2, #0
 80086ec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80086ee:	4b29      	ldr	r3, [pc, #164]	; (8008794 <USBD_CDC_DeInit+0x100>)
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f002 fa84 	bl	800ac02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80086fa:	4b26      	ldr	r3, [pc, #152]	; (8008794 <USBD_CDC_DeInit+0x100>)
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	f003 020f 	and.w	r2, r3, #15
 8008702:	6879      	ldr	r1, [r7, #4]
 8008704:	4613      	mov	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4413      	add	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	440b      	add	r3, r1
 800870e:	3324      	adds	r3, #36	; 0x24
 8008710:	2200      	movs	r2, #0
 8008712:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008714:	4b1f      	ldr	r3, [pc, #124]	; (8008794 <USBD_CDC_DeInit+0x100>)
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	f003 020f 	and.w	r2, r3, #15
 800871c:	6879      	ldr	r1, [r7, #4]
 800871e:	4613      	mov	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	440b      	add	r3, r1
 8008728:	3326      	adds	r3, #38	; 0x26
 800872a:	2200      	movs	r2, #0
 800872c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	32b0      	adds	r2, #176	; 0xb0
 8008738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d01f      	beq.n	8008780 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	33b0      	adds	r3, #176	; 0xb0
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	32b0      	adds	r2, #176	; 0xb0
 800875e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008762:	4618      	mov	r0, r3
 8008764:	f002 fb58 	bl	800ae18 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	32b0      	adds	r2, #176	; 0xb0
 8008772:	2100      	movs	r1, #0
 8008774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	20000097 	.word	0x20000097
 8008790:	20000098 	.word	0x20000098
 8008794:	20000099 	.word	0x20000099

08008798 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	32b0      	adds	r2, #176	; 0xb0
 80087ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80087b2:	2300      	movs	r3, #0
 80087b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80087b6:	2300      	movs	r3, #0
 80087b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e0bf      	b.n	8008948 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d050      	beq.n	8008876 <USBD_CDC_Setup+0xde>
 80087d4:	2b20      	cmp	r3, #32
 80087d6:	f040 80af 	bne.w	8008938 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	88db      	ldrh	r3, [r3, #6]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d03a      	beq.n	8008858 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	b25b      	sxtb	r3, r3
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	da1b      	bge.n	8008824 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	33b0      	adds	r3, #176	; 0xb0
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	4413      	add	r3, r2
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008802:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	88d2      	ldrh	r2, [r2, #6]
 8008808:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	88db      	ldrh	r3, [r3, #6]
 800880e:	2b07      	cmp	r3, #7
 8008810:	bf28      	it	cs
 8008812:	2307      	movcs	r3, #7
 8008814:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	89fa      	ldrh	r2, [r7, #14]
 800881a:	4619      	mov	r1, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f001 fd89 	bl	800a334 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008822:	e090      	b.n	8008946 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	785a      	ldrb	r2, [r3, #1]
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	88db      	ldrh	r3, [r3, #6]
 8008832:	2b3f      	cmp	r3, #63	; 0x3f
 8008834:	d803      	bhi.n	800883e <USBD_CDC_Setup+0xa6>
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	88db      	ldrh	r3, [r3, #6]
 800883a:	b2da      	uxtb	r2, r3
 800883c:	e000      	b.n	8008840 <USBD_CDC_Setup+0xa8>
 800883e:	2240      	movs	r2, #64	; 0x40
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008846:	6939      	ldr	r1, [r7, #16]
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800884e:	461a      	mov	r2, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f001 fd9b 	bl	800a38c <USBD_CtlPrepareRx>
      break;
 8008856:	e076      	b.n	8008946 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	33b0      	adds	r3, #176	; 0xb0
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4413      	add	r3, r2
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	7850      	ldrb	r0, [r2, #1]
 800886e:	2200      	movs	r2, #0
 8008870:	6839      	ldr	r1, [r7, #0]
 8008872:	4798      	blx	r3
      break;
 8008874:	e067      	b.n	8008946 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	785b      	ldrb	r3, [r3, #1]
 800887a:	2b0b      	cmp	r3, #11
 800887c:	d851      	bhi.n	8008922 <USBD_CDC_Setup+0x18a>
 800887e:	a201      	add	r2, pc, #4	; (adr r2, 8008884 <USBD_CDC_Setup+0xec>)
 8008880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008884:	080088b5 	.word	0x080088b5
 8008888:	08008931 	.word	0x08008931
 800888c:	08008923 	.word	0x08008923
 8008890:	08008923 	.word	0x08008923
 8008894:	08008923 	.word	0x08008923
 8008898:	08008923 	.word	0x08008923
 800889c:	08008923 	.word	0x08008923
 80088a0:	08008923 	.word	0x08008923
 80088a4:	08008923 	.word	0x08008923
 80088a8:	08008923 	.word	0x08008923
 80088ac:	080088df 	.word	0x080088df
 80088b0:	08008909 	.word	0x08008909
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	2b03      	cmp	r3, #3
 80088be:	d107      	bne.n	80088d0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80088c0:	f107 030a 	add.w	r3, r7, #10
 80088c4:	2202      	movs	r2, #2
 80088c6:	4619      	mov	r1, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f001 fd33 	bl	800a334 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088ce:	e032      	b.n	8008936 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f001 fcbd 	bl	800a252 <USBD_CtlError>
            ret = USBD_FAIL;
 80088d8:	2303      	movs	r3, #3
 80088da:	75fb      	strb	r3, [r7, #23]
          break;
 80088dc:	e02b      	b.n	8008936 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	d107      	bne.n	80088fa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80088ea:	f107 030d 	add.w	r3, r7, #13
 80088ee:	2201      	movs	r2, #1
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f001 fd1e 	bl	800a334 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088f8:	e01d      	b.n	8008936 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 fca8 	bl	800a252 <USBD_CtlError>
            ret = USBD_FAIL;
 8008902:	2303      	movs	r3, #3
 8008904:	75fb      	strb	r3, [r7, #23]
          break;
 8008906:	e016      	b.n	8008936 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b03      	cmp	r3, #3
 8008912:	d00f      	beq.n	8008934 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f001 fc9b 	bl	800a252 <USBD_CtlError>
            ret = USBD_FAIL;
 800891c:	2303      	movs	r3, #3
 800891e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008920:	e008      	b.n	8008934 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008922:	6839      	ldr	r1, [r7, #0]
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f001 fc94 	bl	800a252 <USBD_CtlError>
          ret = USBD_FAIL;
 800892a:	2303      	movs	r3, #3
 800892c:	75fb      	strb	r3, [r7, #23]
          break;
 800892e:	e002      	b.n	8008936 <USBD_CDC_Setup+0x19e>
          break;
 8008930:	bf00      	nop
 8008932:	e008      	b.n	8008946 <USBD_CDC_Setup+0x1ae>
          break;
 8008934:	bf00      	nop
      }
      break;
 8008936:	e006      	b.n	8008946 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f001 fc89 	bl	800a252 <USBD_CtlError>
      ret = USBD_FAIL;
 8008940:	2303      	movs	r3, #3
 8008942:	75fb      	strb	r3, [r7, #23]
      break;
 8008944:	bf00      	nop
  }

  return (uint8_t)ret;
 8008946:	7dfb      	ldrb	r3, [r7, #23]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3718      	adds	r7, #24
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	460b      	mov	r3, r1
 800895a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008962:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	32b0      	adds	r2, #176	; 0xb0
 800896e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008976:	2303      	movs	r3, #3
 8008978:	e065      	b.n	8008a46 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	32b0      	adds	r2, #176	; 0xb0
 8008984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008988:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800898a:	78fb      	ldrb	r3, [r7, #3]
 800898c:	f003 020f 	and.w	r2, r3, #15
 8008990:	6879      	ldr	r1, [r7, #4]
 8008992:	4613      	mov	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	440b      	add	r3, r1
 800899c:	3318      	adds	r3, #24
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d02f      	beq.n	8008a04 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80089a4:	78fb      	ldrb	r3, [r7, #3]
 80089a6:	f003 020f 	and.w	r2, r3, #15
 80089aa:	6879      	ldr	r1, [r7, #4]
 80089ac:	4613      	mov	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4413      	add	r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	440b      	add	r3, r1
 80089b6:	3318      	adds	r3, #24
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	78fb      	ldrb	r3, [r7, #3]
 80089bc:	f003 010f 	and.w	r1, r3, #15
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	460b      	mov	r3, r1
 80089c4:	00db      	lsls	r3, r3, #3
 80089c6:	440b      	add	r3, r1
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4403      	add	r3, r0
 80089cc:	331c      	adds	r3, #28
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80089d4:	fb01 f303 	mul.w	r3, r1, r3
 80089d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d112      	bne.n	8008a04 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80089de:	78fb      	ldrb	r3, [r7, #3]
 80089e0:	f003 020f 	and.w	r2, r3, #15
 80089e4:	6879      	ldr	r1, [r7, #4]
 80089e6:	4613      	mov	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	440b      	add	r3, r1
 80089f0:	3318      	adds	r3, #24
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80089f6:	78f9      	ldrb	r1, [r7, #3]
 80089f8:	2300      	movs	r3, #0
 80089fa:	2200      	movs	r2, #0
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f002 f9a8 	bl	800ad52 <USBD_LL_Transmit>
 8008a02:	e01f      	b.n	8008a44 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	33b0      	adds	r3, #176	; 0xb0
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	4413      	add	r3, r2
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d010      	beq.n	8008a44 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	33b0      	adds	r3, #176	; 0xb0
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008a40:	78fa      	ldrb	r2, [r7, #3]
 8008a42:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	460b      	mov	r3, r1
 8008a58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	32b0      	adds	r2, #176	; 0xb0
 8008a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	32b0      	adds	r2, #176	; 0xb0
 8008a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	e01a      	b.n	8008ab6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f002 f9a6 	bl	800add6 <USBD_LL_GetRxDataSize>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	33b0      	adds	r3, #176	; 0xb0
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	32b0      	adds	r2, #176	; 0xb0
 8008ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d101      	bne.n	8008ae0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e025      	b.n	8008b2c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	33b0      	adds	r3, #176	; 0xb0
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	4413      	add	r3, r2
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d01a      	beq.n	8008b2a <USBD_CDC_EP0_RxReady+0x6c>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008afa:	2bff      	cmp	r3, #255	; 0xff
 8008afc:	d015      	beq.n	8008b2a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	33b0      	adds	r3, #176	; 0xb0
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008b16:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b1e:	b292      	uxth	r2, r2
 8008b20:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	22ff      	movs	r2, #255	; 0xff
 8008b26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b3c:	2182      	movs	r1, #130	; 0x82
 8008b3e:	4818      	ldr	r0, [pc, #96]	; (8008ba0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b40:	f000 fd4f 	bl	80095e2 <USBD_GetEpDesc>
 8008b44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b46:	2101      	movs	r1, #1
 8008b48:	4815      	ldr	r0, [pc, #84]	; (8008ba0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b4a:	f000 fd4a 	bl	80095e2 <USBD_GetEpDesc>
 8008b4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008b50:	2181      	movs	r1, #129	; 0x81
 8008b52:	4813      	ldr	r0, [pc, #76]	; (8008ba0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b54:	f000 fd45 	bl	80095e2 <USBD_GetEpDesc>
 8008b58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	2210      	movs	r2, #16
 8008b64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d006      	beq.n	8008b7a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b74:	711a      	strb	r2, [r3, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d006      	beq.n	8008b8e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b88:	711a      	strb	r2, [r3, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2243      	movs	r2, #67	; 0x43
 8008b92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008b94:	4b02      	ldr	r3, [pc, #8]	; (8008ba0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3718      	adds	r7, #24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	20000054 	.word	0x20000054

08008ba4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008bac:	2182      	movs	r1, #130	; 0x82
 8008bae:	4818      	ldr	r0, [pc, #96]	; (8008c10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008bb0:	f000 fd17 	bl	80095e2 <USBD_GetEpDesc>
 8008bb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008bb6:	2101      	movs	r1, #1
 8008bb8:	4815      	ldr	r0, [pc, #84]	; (8008c10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008bba:	f000 fd12 	bl	80095e2 <USBD_GetEpDesc>
 8008bbe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008bc0:	2181      	movs	r1, #129	; 0x81
 8008bc2:	4813      	ldr	r0, [pc, #76]	; (8008c10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008bc4:	f000 fd0d 	bl	80095e2 <USBD_GetEpDesc>
 8008bc8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2210      	movs	r2, #16
 8008bd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d006      	beq.n	8008bea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	2200      	movs	r2, #0
 8008be0:	711a      	strb	r2, [r3, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f042 0202 	orr.w	r2, r2, #2
 8008be8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d006      	beq.n	8008bfe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	711a      	strb	r2, [r3, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f042 0202 	orr.w	r2, r2, #2
 8008bfc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2243      	movs	r2, #67	; 0x43
 8008c02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c04:	4b02      	ldr	r3, [pc, #8]	; (8008c10 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3718      	adds	r7, #24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	20000054 	.word	0x20000054

08008c14 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c1c:	2182      	movs	r1, #130	; 0x82
 8008c1e:	4818      	ldr	r0, [pc, #96]	; (8008c80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c20:	f000 fcdf 	bl	80095e2 <USBD_GetEpDesc>
 8008c24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c26:	2101      	movs	r1, #1
 8008c28:	4815      	ldr	r0, [pc, #84]	; (8008c80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c2a:	f000 fcda 	bl	80095e2 <USBD_GetEpDesc>
 8008c2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c30:	2181      	movs	r1, #129	; 0x81
 8008c32:	4813      	ldr	r0, [pc, #76]	; (8008c80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c34:	f000 fcd5 	bl	80095e2 <USBD_GetEpDesc>
 8008c38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	2210      	movs	r2, #16
 8008c44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d006      	beq.n	8008c5a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c54:	711a      	strb	r2, [r3, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d006      	beq.n	8008c6e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c68:	711a      	strb	r2, [r3, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2243      	movs	r2, #67	; 0x43
 8008c72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c74:	4b02      	ldr	r3, [pc, #8]	; (8008c80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20000054 	.word	0x20000054

08008c84 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	220a      	movs	r2, #10
 8008c90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008c92:	4b03      	ldr	r3, [pc, #12]	; (8008ca0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	20000010 	.word	0x20000010

08008ca4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d101      	bne.n	8008cb8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e009      	b.n	8008ccc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	33b0      	adds	r3, #176	; 0xb0
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	32b0      	adds	r2, #176	; 0xb0
 8008cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e008      	b.n	8008d10 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	371c      	adds	r7, #28
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	32b0      	adds	r2, #176	; 0xb0
 8008d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d101      	bne.n	8008d40 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	e004      	b.n	8008d4a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
	...

08008d58 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	32b0      	adds	r2, #176	; 0xb0
 8008d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d6e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008d70:	2301      	movs	r3, #1
 8008d72:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d101      	bne.n	8008d7e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e025      	b.n	8008dca <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d11f      	bne.n	8008dc8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008d90:	4b10      	ldr	r3, [pc, #64]	; (8008dd4 <USBD_CDC_TransmitPacket+0x7c>)
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	f003 020f 	and.w	r2, r3, #15
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	4613      	mov	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	4413      	add	r3, r2
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4403      	add	r3, r0
 8008daa:	3318      	adds	r3, #24
 8008dac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008dae:	4b09      	ldr	r3, [pc, #36]	; (8008dd4 <USBD_CDC_TransmitPacket+0x7c>)
 8008db0:	7819      	ldrb	r1, [r3, #0]
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f001 ffc7 	bl	800ad52 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20000097 	.word	0x20000097

08008dd8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	32b0      	adds	r2, #176	; 0xb0
 8008dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	32b0      	adds	r2, #176	; 0xb0
 8008dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d101      	bne.n	8008e06 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e018      	b.n	8008e38 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	7c1b      	ldrb	r3, [r3, #16]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10a      	bne.n	8008e24 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e0e:	4b0c      	ldr	r3, [pc, #48]	; (8008e40 <USBD_CDC_ReceivePacket+0x68>)
 8008e10:	7819      	ldrb	r1, [r3, #0]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f001 ffb9 	bl	800ad94 <USBD_LL_PrepareReceive>
 8008e22:	e008      	b.n	8008e36 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e24:	4b06      	ldr	r3, [pc, #24]	; (8008e40 <USBD_CDC_ReceivePacket+0x68>)
 8008e26:	7819      	ldrb	r1, [r3, #0]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e2e:	2340      	movs	r3, #64	; 0x40
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f001 ffaf 	bl	800ad94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	20000098 	.word	0x20000098

08008e44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d101      	bne.n	8008e5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e01f      	b.n	8008e9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d003      	beq.n	8008e82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	79fa      	ldrb	r2, [r7, #7]
 8008e8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f001 fe29 	bl	800aae8 <USBD_LL_Init>
 8008e96:	4603      	mov	r3, r0
 8008e98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e025      	b.n	8008f08 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	32ae      	adds	r2, #174	; 0xae
 8008ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00f      	beq.n	8008ef8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	32ae      	adds	r2, #174	; 0xae
 8008ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee8:	f107 020e 	add.w	r2, r7, #14
 8008eec:	4610      	mov	r0, r2
 8008eee:	4798      	blx	r3
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008efe:	1c5a      	adds	r2, r3, #1
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f001 fe31 	bl	800ab80 <USBD_LL_Start>
 8008f1e:	4603      	mov	r3, r0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f30:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	370c      	adds	r7, #12
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr

08008f3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b084      	sub	sp, #16
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
 8008f46:	460b      	mov	r3, r1
 8008f48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d009      	beq.n	8008f6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	78fa      	ldrb	r2, [r7, #3]
 8008f62:	4611      	mov	r1, r2
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	4798      	blx	r3
 8008f68:	4603      	mov	r3, r0
 8008f6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b084      	sub	sp, #16
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	460b      	mov	r3, r1
 8008f80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f82:	2300      	movs	r3, #0
 8008f84:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	78fa      	ldrb	r2, [r7, #3]
 8008f90:	4611      	mov	r1, r2
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	4798      	blx	r3
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f001 f90e 	bl	800a1de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008fde:	f003 031f 	and.w	r3, r3, #31
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d01a      	beq.n	800901c <USBD_LL_SetupStage+0x72>
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d822      	bhi.n	8009030 <USBD_LL_SetupStage+0x86>
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d002      	beq.n	8008ff4 <USBD_LL_SetupStage+0x4a>
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d00a      	beq.n	8009008 <USBD_LL_SetupStage+0x5e>
 8008ff2:	e01d      	b.n	8009030 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 fb65 	bl	80096cc <USBD_StdDevReq>
 8009002:	4603      	mov	r3, r0
 8009004:	73fb      	strb	r3, [r7, #15]
      break;
 8009006:	e020      	b.n	800904a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fbcd 	bl	80097b0 <USBD_StdItfReq>
 8009016:	4603      	mov	r3, r0
 8009018:	73fb      	strb	r3, [r7, #15]
      break;
 800901a:	e016      	b.n	800904a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009022:	4619      	mov	r1, r3
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fc2f 	bl	8009888 <USBD_StdEPReq>
 800902a:	4603      	mov	r3, r0
 800902c:	73fb      	strb	r3, [r7, #15]
      break;
 800902e:	e00c      	b.n	800904a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009036:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800903a:	b2db      	uxtb	r3, r3
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f001 fdfe 	bl	800ac40 <USBD_LL_StallEP>
 8009044:	4603      	mov	r3, r0
 8009046:	73fb      	strb	r3, [r7, #15]
      break;
 8009048:	bf00      	nop
  }

  return ret;
 800904a:	7bfb      	ldrb	r3, [r7, #15]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	460b      	mov	r3, r1
 800905e:	607a      	str	r2, [r7, #4]
 8009060:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009062:	2300      	movs	r3, #0
 8009064:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009066:	7afb      	ldrb	r3, [r7, #11]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d16e      	bne.n	800914a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009072:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800907a:	2b03      	cmp	r3, #3
 800907c:	f040 8098 	bne.w	80091b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	689a      	ldr	r2, [r3, #8]
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	429a      	cmp	r2, r3
 800908a:	d913      	bls.n	80090b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	1ad2      	subs	r2, r2, r3
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	68da      	ldr	r2, [r3, #12]
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	4293      	cmp	r3, r2
 80090a4:	bf28      	it	cs
 80090a6:	4613      	movcs	r3, r2
 80090a8:	461a      	mov	r2, r3
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f001 f98a 	bl	800a3c6 <USBD_CtlContinueRx>
 80090b2:	e07d      	b.n	80091b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80090ba:	f003 031f 	and.w	r3, r3, #31
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d014      	beq.n	80090ec <USBD_LL_DataOutStage+0x98>
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d81d      	bhi.n	8009102 <USBD_LL_DataOutStage+0xae>
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d002      	beq.n	80090d0 <USBD_LL_DataOutStage+0x7c>
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d003      	beq.n	80090d6 <USBD_LL_DataOutStage+0x82>
 80090ce:	e018      	b.n	8009102 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80090d0:	2300      	movs	r3, #0
 80090d2:	75bb      	strb	r3, [r7, #22]
            break;
 80090d4:	e018      	b.n	8009108 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	4619      	mov	r1, r3
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 fa64 	bl	80095ae <USBD_CoreFindIF>
 80090e6:	4603      	mov	r3, r0
 80090e8:	75bb      	strb	r3, [r7, #22]
            break;
 80090ea:	e00d      	b.n	8009108 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	4619      	mov	r1, r3
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f000 fa66 	bl	80095c8 <USBD_CoreFindEP>
 80090fc:	4603      	mov	r3, r0
 80090fe:	75bb      	strb	r3, [r7, #22]
            break;
 8009100:	e002      	b.n	8009108 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009102:	2300      	movs	r3, #0
 8009104:	75bb      	strb	r3, [r7, #22]
            break;
 8009106:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009108:	7dbb      	ldrb	r3, [r7, #22]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d119      	bne.n	8009142 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b03      	cmp	r3, #3
 8009118:	d113      	bne.n	8009142 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800911a:	7dba      	ldrb	r2, [r7, #22]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	32ae      	adds	r2, #174	; 0xae
 8009120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00b      	beq.n	8009142 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800912a:	7dba      	ldrb	r2, [r7, #22]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009132:	7dba      	ldrb	r2, [r7, #22]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	32ae      	adds	r2, #174	; 0xae
 8009138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f001 f950 	bl	800a3e8 <USBD_CtlSendStatus>
 8009148:	e032      	b.n	80091b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800914a:	7afb      	ldrb	r3, [r7, #11]
 800914c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009150:	b2db      	uxtb	r3, r3
 8009152:	4619      	mov	r1, r3
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f000 fa37 	bl	80095c8 <USBD_CoreFindEP>
 800915a:	4603      	mov	r3, r0
 800915c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800915e:	7dbb      	ldrb	r3, [r7, #22]
 8009160:	2bff      	cmp	r3, #255	; 0xff
 8009162:	d025      	beq.n	80091b0 <USBD_LL_DataOutStage+0x15c>
 8009164:	7dbb      	ldrb	r3, [r7, #22]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d122      	bne.n	80091b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b03      	cmp	r3, #3
 8009174:	d117      	bne.n	80091a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009176:	7dba      	ldrb	r2, [r7, #22]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	32ae      	adds	r2, #174	; 0xae
 800917c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009180:	699b      	ldr	r3, [r3, #24]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00f      	beq.n	80091a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009186:	7dba      	ldrb	r2, [r7, #22]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800918e:	7dba      	ldrb	r2, [r7, #22]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	32ae      	adds	r2, #174	; 0xae
 8009194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	7afa      	ldrb	r2, [r7, #11]
 800919c:	4611      	mov	r1, r2
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	4798      	blx	r3
 80091a2:	4603      	mov	r3, r0
 80091a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80091ac:	7dfb      	ldrb	r3, [r7, #23]
 80091ae:	e000      	b.n	80091b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3718      	adds	r7, #24
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b086      	sub	sp, #24
 80091be:	af00      	add	r7, sp, #0
 80091c0:	60f8      	str	r0, [r7, #12]
 80091c2:	460b      	mov	r3, r1
 80091c4:	607a      	str	r2, [r7, #4]
 80091c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80091c8:	7afb      	ldrb	r3, [r7, #11]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d16f      	bne.n	80092ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	3314      	adds	r3, #20
 80091d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d15a      	bne.n	8009294 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	689a      	ldr	r2, [r3, #8]
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d914      	bls.n	8009214 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	689a      	ldr	r2, [r3, #8]
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	1ad2      	subs	r2, r2, r3
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	461a      	mov	r2, r3
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f001 f8b2 	bl	800a36a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009206:	2300      	movs	r3, #0
 8009208:	2200      	movs	r2, #0
 800920a:	2100      	movs	r1, #0
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f001 fdc1 	bl	800ad94 <USBD_LL_PrepareReceive>
 8009212:	e03f      	b.n	8009294 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	68da      	ldr	r2, [r3, #12]
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	429a      	cmp	r2, r3
 800921e:	d11c      	bne.n	800925a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	693b      	ldr	r3, [r7, #16]
 8009226:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009228:	429a      	cmp	r2, r3
 800922a:	d316      	bcc.n	800925a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	685a      	ldr	r2, [r3, #4]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009236:	429a      	cmp	r2, r3
 8009238:	d20f      	bcs.n	800925a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800923a:	2200      	movs	r2, #0
 800923c:	2100      	movs	r1, #0
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f001 f893 	bl	800a36a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800924c:	2300      	movs	r3, #0
 800924e:	2200      	movs	r2, #0
 8009250:	2100      	movs	r1, #0
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f001 fd9e 	bl	800ad94 <USBD_LL_PrepareReceive>
 8009258:	e01c      	b.n	8009294 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009260:	b2db      	uxtb	r3, r3
 8009262:	2b03      	cmp	r3, #3
 8009264:	d10f      	bne.n	8009286 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d009      	beq.n	8009286 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2200      	movs	r2, #0
 8009276:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009286:	2180      	movs	r1, #128	; 0x80
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f001 fcd9 	bl	800ac40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f001 f8bd 	bl	800a40e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800929a:	2b00      	cmp	r3, #0
 800929c:	d03a      	beq.n	8009314 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800929e:	68f8      	ldr	r0, [r7, #12]
 80092a0:	f7ff fe42 	bl	8008f28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80092ac:	e032      	b.n	8009314 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80092ae:	7afb      	ldrb	r3, [r7, #11]
 80092b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	4619      	mov	r1, r3
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 f985 	bl	80095c8 <USBD_CoreFindEP>
 80092be:	4603      	mov	r3, r0
 80092c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092c2:	7dfb      	ldrb	r3, [r7, #23]
 80092c4:	2bff      	cmp	r3, #255	; 0xff
 80092c6:	d025      	beq.n	8009314 <USBD_LL_DataInStage+0x15a>
 80092c8:	7dfb      	ldrb	r3, [r7, #23]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d122      	bne.n	8009314 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b03      	cmp	r3, #3
 80092d8:	d11c      	bne.n	8009314 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80092da:	7dfa      	ldrb	r2, [r7, #23]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	32ae      	adds	r2, #174	; 0xae
 80092e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e4:	695b      	ldr	r3, [r3, #20]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d014      	beq.n	8009314 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80092ea:	7dfa      	ldrb	r2, [r7, #23]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80092f2:	7dfa      	ldrb	r2, [r7, #23]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	32ae      	adds	r2, #174	; 0xae
 80092f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	7afa      	ldrb	r2, [r7, #11]
 8009300:	4611      	mov	r1, r2
 8009302:	68f8      	ldr	r0, [r7, #12]
 8009304:	4798      	blx	r3
 8009306:	4603      	mov	r3, r0
 8009308:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800930a:	7dbb      	ldrb	r3, [r7, #22]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009310:	7dbb      	ldrb	r3, [r7, #22]
 8009312:	e000      	b.n	8009316 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3718      	adds	r7, #24
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b084      	sub	sp, #16
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009326:	2300      	movs	r3, #0
 8009328:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009356:	2b00      	cmp	r3, #0
 8009358:	d014      	beq.n	8009384 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00e      	beq.n	8009384 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	6852      	ldr	r2, [r2, #4]
 8009372:	b2d2      	uxtb	r2, r2
 8009374:	4611      	mov	r1, r2
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	4798      	blx	r3
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d001      	beq.n	8009384 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009380:	2303      	movs	r3, #3
 8009382:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009384:	2340      	movs	r3, #64	; 0x40
 8009386:	2200      	movs	r2, #0
 8009388:	2100      	movs	r1, #0
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f001 fc13 	bl	800abb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2240      	movs	r2, #64	; 0x40
 800939c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093a0:	2340      	movs	r3, #64	; 0x40
 80093a2:	2200      	movs	r2, #0
 80093a4:	2180      	movs	r1, #128	; 0x80
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f001 fc05 	bl	800abb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2240      	movs	r2, #64	; 0x40
 80093b6:	621a      	str	r2, [r3, #32]

  return ret;
 80093b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b083      	sub	sp, #12
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	460b      	mov	r3, r1
 80093cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	78fa      	ldrb	r2, [r7, #3]
 80093d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b04      	cmp	r3, #4
 80093f4:	d006      	beq.n	8009404 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093fc:	b2da      	uxtb	r2, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2204      	movs	r2, #4
 8009408:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr

0800941a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800941a:	b480      	push	{r7}
 800941c:	b083      	sub	sp, #12
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b04      	cmp	r3, #4
 800942c:	d106      	bne.n	800943c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009434:	b2da      	uxtb	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b082      	sub	sp, #8
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b03      	cmp	r3, #3
 800945c:	d110      	bne.n	8009480 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00b      	beq.n	8009480 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800946e:	69db      	ldr	r3, [r3, #28]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d005      	beq.n	8009480 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800947a:	69db      	ldr	r3, [r3, #28]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3708      	adds	r7, #8
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800948a:	b580      	push	{r7, lr}
 800948c:	b082      	sub	sp, #8
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	460b      	mov	r3, r1
 8009494:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	32ae      	adds	r2, #174	; 0xae
 80094a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d101      	bne.n	80094ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e01c      	b.n	80094e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	2b03      	cmp	r3, #3
 80094b6:	d115      	bne.n	80094e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	32ae      	adds	r2, #174	; 0xae
 80094c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c6:	6a1b      	ldr	r3, [r3, #32]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00b      	beq.n	80094e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	32ae      	adds	r2, #174	; 0xae
 80094d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094da:	6a1b      	ldr	r3, [r3, #32]
 80094dc:	78fa      	ldrb	r2, [r7, #3]
 80094de:	4611      	mov	r1, r2
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b082      	sub	sp, #8
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	460b      	mov	r3, r1
 80094f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	32ae      	adds	r2, #174	; 0xae
 8009504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d101      	bne.n	8009510 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800950c:	2303      	movs	r3, #3
 800950e:	e01c      	b.n	800954a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009516:	b2db      	uxtb	r3, r3
 8009518:	2b03      	cmp	r3, #3
 800951a:	d115      	bne.n	8009548 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	32ae      	adds	r2, #174	; 0xae
 8009526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00b      	beq.n	8009548 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	32ae      	adds	r2, #174	; 0xae
 800953a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800953e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009540:	78fa      	ldrb	r2, [r7, #3]
 8009542:	4611      	mov	r1, r2
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009552:	b480      	push	{r7}
 8009554:	b083      	sub	sp, #12
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009570:	2300      	movs	r3, #0
 8009572:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00e      	beq.n	80095a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	6852      	ldr	r2, [r2, #4]
 8009592:	b2d2      	uxtb	r2, r2
 8009594:	4611      	mov	r1, r2
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	4798      	blx	r3
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80095a0:	2303      	movs	r3, #3
 80095a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b083      	sub	sp, #12
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
 80095b6:	460b      	mov	r3, r1
 80095b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80095ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80095bc:	4618      	mov	r0, r3
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80095d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	370c      	adds	r7, #12
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b086      	sub	sp, #24
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	460b      	mov	r3, r1
 80095ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80095f6:	2300      	movs	r3, #0
 80095f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	885b      	ldrh	r3, [r3, #2]
 80095fe:	b29a      	uxth	r2, r3
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	b29b      	uxth	r3, r3
 8009606:	429a      	cmp	r2, r3
 8009608:	d920      	bls.n	800964c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	b29b      	uxth	r3, r3
 8009610:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009612:	e013      	b.n	800963c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009614:	f107 030a 	add.w	r3, r7, #10
 8009618:	4619      	mov	r1, r3
 800961a:	6978      	ldr	r0, [r7, #20]
 800961c:	f000 f81b 	bl	8009656 <USBD_GetNextDesc>
 8009620:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	785b      	ldrb	r3, [r3, #1]
 8009626:	2b05      	cmp	r3, #5
 8009628:	d108      	bne.n	800963c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	789b      	ldrb	r3, [r3, #2]
 8009632:	78fa      	ldrb	r2, [r7, #3]
 8009634:	429a      	cmp	r2, r3
 8009636:	d008      	beq.n	800964a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009638:	2300      	movs	r3, #0
 800963a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	885b      	ldrh	r3, [r3, #2]
 8009640:	b29a      	uxth	r2, r3
 8009642:	897b      	ldrh	r3, [r7, #10]
 8009644:	429a      	cmp	r2, r3
 8009646:	d8e5      	bhi.n	8009614 <USBD_GetEpDesc+0x32>
 8009648:	e000      	b.n	800964c <USBD_GetEpDesc+0x6a>
          break;
 800964a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800964c:	693b      	ldr	r3, [r7, #16]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3718      	adds	r7, #24
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009656:	b480      	push	{r7}
 8009658:	b085      	sub	sp, #20
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	881a      	ldrh	r2, [r3, #0]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	b29b      	uxth	r3, r3
 800966e:	4413      	add	r3, r2
 8009670:	b29a      	uxth	r2, r3
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4413      	add	r3, r2
 8009680:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009682:	68fb      	ldr	r3, [r7, #12]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3714      	adds	r7, #20
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009690:	b480      	push	{r7}
 8009692:	b087      	sub	sp, #28
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	3301      	adds	r3, #1
 80096a6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80096ae:	8a3b      	ldrh	r3, [r7, #16]
 80096b0:	021b      	lsls	r3, r3, #8
 80096b2:	b21a      	sxth	r2, r3
 80096b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	b21b      	sxth	r3, r3
 80096bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80096be:	89fb      	ldrh	r3, [r7, #14]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	371c      	adds	r7, #28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096e2:	2b40      	cmp	r3, #64	; 0x40
 80096e4:	d005      	beq.n	80096f2 <USBD_StdDevReq+0x26>
 80096e6:	2b40      	cmp	r3, #64	; 0x40
 80096e8:	d857      	bhi.n	800979a <USBD_StdDevReq+0xce>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00f      	beq.n	800970e <USBD_StdDevReq+0x42>
 80096ee:	2b20      	cmp	r3, #32
 80096f0:	d153      	bne.n	800979a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	32ae      	adds	r2, #174	; 0xae
 80096fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	4798      	blx	r3
 8009708:	4603      	mov	r3, r0
 800970a:	73fb      	strb	r3, [r7, #15]
      break;
 800970c:	e04a      	b.n	80097a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	785b      	ldrb	r3, [r3, #1]
 8009712:	2b09      	cmp	r3, #9
 8009714:	d83b      	bhi.n	800978e <USBD_StdDevReq+0xc2>
 8009716:	a201      	add	r2, pc, #4	; (adr r2, 800971c <USBD_StdDevReq+0x50>)
 8009718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971c:	08009771 	.word	0x08009771
 8009720:	08009785 	.word	0x08009785
 8009724:	0800978f 	.word	0x0800978f
 8009728:	0800977b 	.word	0x0800977b
 800972c:	0800978f 	.word	0x0800978f
 8009730:	0800974f 	.word	0x0800974f
 8009734:	08009745 	.word	0x08009745
 8009738:	0800978f 	.word	0x0800978f
 800973c:	08009767 	.word	0x08009767
 8009740:	08009759 	.word	0x08009759
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009744:	6839      	ldr	r1, [r7, #0]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fa3c 	bl	8009bc4 <USBD_GetDescriptor>
          break;
 800974c:	e024      	b.n	8009798 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fba1 	bl	8009e98 <USBD_SetAddress>
          break;
 8009756:	e01f      	b.n	8009798 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fbe0 	bl	8009f20 <USBD_SetConfig>
 8009760:	4603      	mov	r3, r0
 8009762:	73fb      	strb	r3, [r7, #15]
          break;
 8009764:	e018      	b.n	8009798 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009766:	6839      	ldr	r1, [r7, #0]
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fc83 	bl	800a074 <USBD_GetConfig>
          break;
 800976e:	e013      	b.n	8009798 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fcb4 	bl	800a0e0 <USBD_GetStatus>
          break;
 8009778:	e00e      	b.n	8009798 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 fce3 	bl	800a148 <USBD_SetFeature>
          break;
 8009782:	e009      	b.n	8009798 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fd07 	bl	800a19a <USBD_ClrFeature>
          break;
 800978c:	e004      	b.n	8009798 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fd5e 	bl	800a252 <USBD_CtlError>
          break;
 8009796:	bf00      	nop
      }
      break;
 8009798:	e004      	b.n	80097a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fd58 	bl	800a252 <USBD_CtlError>
      break;
 80097a2:	bf00      	nop
  }

  return ret;
 80097a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop

080097b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80097c6:	2b40      	cmp	r3, #64	; 0x40
 80097c8:	d005      	beq.n	80097d6 <USBD_StdItfReq+0x26>
 80097ca:	2b40      	cmp	r3, #64	; 0x40
 80097cc:	d852      	bhi.n	8009874 <USBD_StdItfReq+0xc4>
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <USBD_StdItfReq+0x26>
 80097d2:	2b20      	cmp	r3, #32
 80097d4:	d14e      	bne.n	8009874 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	3b01      	subs	r3, #1
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d840      	bhi.n	8009866 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	889b      	ldrh	r3, [r3, #4]
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d836      	bhi.n	800985c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	889b      	ldrh	r3, [r3, #4]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	4619      	mov	r1, r3
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7ff fed9 	bl	80095ae <USBD_CoreFindIF>
 80097fc:	4603      	mov	r3, r0
 80097fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009800:	7bbb      	ldrb	r3, [r7, #14]
 8009802:	2bff      	cmp	r3, #255	; 0xff
 8009804:	d01d      	beq.n	8009842 <USBD_StdItfReq+0x92>
 8009806:	7bbb      	ldrb	r3, [r7, #14]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d11a      	bne.n	8009842 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800980c:	7bba      	ldrb	r2, [r7, #14]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	32ae      	adds	r2, #174	; 0xae
 8009812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00f      	beq.n	800983c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800981c:	7bba      	ldrb	r2, [r7, #14]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009824:	7bba      	ldrb	r2, [r7, #14]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	32ae      	adds	r2, #174	; 0xae
 800982a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	4798      	blx	r3
 8009836:	4603      	mov	r3, r0
 8009838:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800983a:	e004      	b.n	8009846 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800983c:	2303      	movs	r3, #3
 800983e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009840:	e001      	b.n	8009846 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009842:	2303      	movs	r3, #3
 8009844:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	88db      	ldrh	r3, [r3, #6]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d110      	bne.n	8009870 <USBD_StdItfReq+0xc0>
 800984e:	7bfb      	ldrb	r3, [r7, #15]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10d      	bne.n	8009870 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fdc7 	bl	800a3e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800985a:	e009      	b.n	8009870 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800985c:	6839      	ldr	r1, [r7, #0]
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 fcf7 	bl	800a252 <USBD_CtlError>
          break;
 8009864:	e004      	b.n	8009870 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fcf2 	bl	800a252 <USBD_CtlError>
          break;
 800986e:	e000      	b.n	8009872 <USBD_StdItfReq+0xc2>
          break;
 8009870:	bf00      	nop
      }
      break;
 8009872:	e004      	b.n	800987e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fceb 	bl	800a252 <USBD_CtlError>
      break;
 800987c:	bf00      	nop
  }

  return ret;
 800987e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009880:	4618      	mov	r0, r3
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	889b      	ldrh	r3, [r3, #4]
 800989a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098a4:	2b40      	cmp	r3, #64	; 0x40
 80098a6:	d007      	beq.n	80098b8 <USBD_StdEPReq+0x30>
 80098a8:	2b40      	cmp	r3, #64	; 0x40
 80098aa:	f200 817f 	bhi.w	8009bac <USBD_StdEPReq+0x324>
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d02a      	beq.n	8009908 <USBD_StdEPReq+0x80>
 80098b2:	2b20      	cmp	r3, #32
 80098b4:	f040 817a 	bne.w	8009bac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7ff fe83 	bl	80095c8 <USBD_CoreFindEP>
 80098c2:	4603      	mov	r3, r0
 80098c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098c6:	7b7b      	ldrb	r3, [r7, #13]
 80098c8:	2bff      	cmp	r3, #255	; 0xff
 80098ca:	f000 8174 	beq.w	8009bb6 <USBD_StdEPReq+0x32e>
 80098ce:	7b7b      	ldrb	r3, [r7, #13]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f040 8170 	bne.w	8009bb6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80098d6:	7b7a      	ldrb	r2, [r7, #13]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80098de:	7b7a      	ldrb	r2, [r7, #13]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	32ae      	adds	r2, #174	; 0xae
 80098e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 8163 	beq.w	8009bb6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80098f0:	7b7a      	ldrb	r2, [r7, #13]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	32ae      	adds	r2, #174	; 0xae
 80098f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	4798      	blx	r3
 8009902:	4603      	mov	r3, r0
 8009904:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009906:	e156      	b.n	8009bb6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	785b      	ldrb	r3, [r3, #1]
 800990c:	2b03      	cmp	r3, #3
 800990e:	d008      	beq.n	8009922 <USBD_StdEPReq+0x9a>
 8009910:	2b03      	cmp	r3, #3
 8009912:	f300 8145 	bgt.w	8009ba0 <USBD_StdEPReq+0x318>
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 809b 	beq.w	8009a52 <USBD_StdEPReq+0x1ca>
 800991c:	2b01      	cmp	r3, #1
 800991e:	d03c      	beq.n	800999a <USBD_StdEPReq+0x112>
 8009920:	e13e      	b.n	8009ba0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b02      	cmp	r3, #2
 800992c:	d002      	beq.n	8009934 <USBD_StdEPReq+0xac>
 800992e:	2b03      	cmp	r3, #3
 8009930:	d016      	beq.n	8009960 <USBD_StdEPReq+0xd8>
 8009932:	e02c      	b.n	800998e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009934:	7bbb      	ldrb	r3, [r7, #14]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00d      	beq.n	8009956 <USBD_StdEPReq+0xce>
 800993a:	7bbb      	ldrb	r3, [r7, #14]
 800993c:	2b80      	cmp	r3, #128	; 0x80
 800993e:	d00a      	beq.n	8009956 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009940:	7bbb      	ldrb	r3, [r7, #14]
 8009942:	4619      	mov	r1, r3
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f001 f97b 	bl	800ac40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800994a:	2180      	movs	r1, #128	; 0x80
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f001 f977 	bl	800ac40 <USBD_LL_StallEP>
 8009952:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009954:	e020      	b.n	8009998 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009956:	6839      	ldr	r1, [r7, #0]
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fc7a 	bl	800a252 <USBD_CtlError>
              break;
 800995e:	e01b      	b.n	8009998 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	885b      	ldrh	r3, [r3, #2]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10e      	bne.n	8009986 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009968:	7bbb      	ldrb	r3, [r7, #14]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00b      	beq.n	8009986 <USBD_StdEPReq+0xfe>
 800996e:	7bbb      	ldrb	r3, [r7, #14]
 8009970:	2b80      	cmp	r3, #128	; 0x80
 8009972:	d008      	beq.n	8009986 <USBD_StdEPReq+0xfe>
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	88db      	ldrh	r3, [r3, #6]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d104      	bne.n	8009986 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800997c:	7bbb      	ldrb	r3, [r7, #14]
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f001 f95d 	bl	800ac40 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fd2e 	bl	800a3e8 <USBD_CtlSendStatus>

              break;
 800998c:	e004      	b.n	8009998 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fc5e 	bl	800a252 <USBD_CtlError>
              break;
 8009996:	bf00      	nop
          }
          break;
 8009998:	e107      	b.n	8009baa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d002      	beq.n	80099ac <USBD_StdEPReq+0x124>
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d016      	beq.n	80099d8 <USBD_StdEPReq+0x150>
 80099aa:	e04b      	b.n	8009a44 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099ac:	7bbb      	ldrb	r3, [r7, #14]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00d      	beq.n	80099ce <USBD_StdEPReq+0x146>
 80099b2:	7bbb      	ldrb	r3, [r7, #14]
 80099b4:	2b80      	cmp	r3, #128	; 0x80
 80099b6:	d00a      	beq.n	80099ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80099b8:	7bbb      	ldrb	r3, [r7, #14]
 80099ba:	4619      	mov	r1, r3
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f001 f93f 	bl	800ac40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80099c2:	2180      	movs	r1, #128	; 0x80
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f001 f93b 	bl	800ac40 <USBD_LL_StallEP>
 80099ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099cc:	e040      	b.n	8009a50 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fc3e 	bl	800a252 <USBD_CtlError>
              break;
 80099d6:	e03b      	b.n	8009a50 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	885b      	ldrh	r3, [r3, #2]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d136      	bne.n	8009a4e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80099e0:	7bbb      	ldrb	r3, [r7, #14]
 80099e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d004      	beq.n	80099f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80099ea:	7bbb      	ldrb	r3, [r7, #14]
 80099ec:	4619      	mov	r1, r3
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f001 f945 	bl	800ac7e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fcf7 	bl	800a3e8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80099fa:	7bbb      	ldrb	r3, [r7, #14]
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7ff fde2 	bl	80095c8 <USBD_CoreFindEP>
 8009a04:	4603      	mov	r3, r0
 8009a06:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a08:	7b7b      	ldrb	r3, [r7, #13]
 8009a0a:	2bff      	cmp	r3, #255	; 0xff
 8009a0c:	d01f      	beq.n	8009a4e <USBD_StdEPReq+0x1c6>
 8009a0e:	7b7b      	ldrb	r3, [r7, #13]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d11c      	bne.n	8009a4e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009a14:	7b7a      	ldrb	r2, [r7, #13]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009a1c:	7b7a      	ldrb	r2, [r7, #13]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	32ae      	adds	r2, #174	; 0xae
 8009a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d010      	beq.n	8009a4e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a2c:	7b7a      	ldrb	r2, [r7, #13]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	32ae      	adds	r2, #174	; 0xae
 8009a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	4798      	blx	r3
 8009a3e:	4603      	mov	r3, r0
 8009a40:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009a42:	e004      	b.n	8009a4e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fc03 	bl	800a252 <USBD_CtlError>
              break;
 8009a4c:	e000      	b.n	8009a50 <USBD_StdEPReq+0x1c8>
              break;
 8009a4e:	bf00      	nop
          }
          break;
 8009a50:	e0ab      	b.n	8009baa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d002      	beq.n	8009a64 <USBD_StdEPReq+0x1dc>
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d032      	beq.n	8009ac8 <USBD_StdEPReq+0x240>
 8009a62:	e097      	b.n	8009b94 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a64:	7bbb      	ldrb	r3, [r7, #14]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d007      	beq.n	8009a7a <USBD_StdEPReq+0x1f2>
 8009a6a:	7bbb      	ldrb	r3, [r7, #14]
 8009a6c:	2b80      	cmp	r3, #128	; 0x80
 8009a6e:	d004      	beq.n	8009a7a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fbed 	bl	800a252 <USBD_CtlError>
                break;
 8009a78:	e091      	b.n	8009b9e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	da0b      	bge.n	8009a9a <USBD_StdEPReq+0x212>
 8009a82:	7bbb      	ldrb	r3, [r7, #14]
 8009a84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a88:	4613      	mov	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4413      	add	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	3310      	adds	r3, #16
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	4413      	add	r3, r2
 8009a96:	3304      	adds	r3, #4
 8009a98:	e00b      	b.n	8009ab2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a9a:	7bbb      	ldrb	r3, [r7, #14]
 8009a9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	4413      	add	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	4413      	add	r3, r2
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	2202      	movs	r2, #2
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fc37 	bl	800a334 <USBD_CtlSendData>
              break;
 8009ac6:	e06a      	b.n	8009b9e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009ac8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	da11      	bge.n	8009af4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009ad0:	7bbb      	ldrb	r3, [r7, #14]
 8009ad2:	f003 020f 	and.w	r2, r3, #15
 8009ad6:	6879      	ldr	r1, [r7, #4]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	440b      	add	r3, r1
 8009ae2:	3324      	adds	r3, #36	; 0x24
 8009ae4:	881b      	ldrh	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d117      	bne.n	8009b1a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009aea:	6839      	ldr	r1, [r7, #0]
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 fbb0 	bl	800a252 <USBD_CtlError>
                  break;
 8009af2:	e054      	b.n	8009b9e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009af4:	7bbb      	ldrb	r3, [r7, #14]
 8009af6:	f003 020f 	and.w	r2, r3, #15
 8009afa:	6879      	ldr	r1, [r7, #4]
 8009afc:	4613      	mov	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4413      	add	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	440b      	add	r3, r1
 8009b06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009b0a:	881b      	ldrh	r3, [r3, #0]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d104      	bne.n	8009b1a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fb9d 	bl	800a252 <USBD_CtlError>
                  break;
 8009b18:	e041      	b.n	8009b9e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	da0b      	bge.n	8009b3a <USBD_StdEPReq+0x2b2>
 8009b22:	7bbb      	ldrb	r3, [r7, #14]
 8009b24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b28:	4613      	mov	r3, r2
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	3310      	adds	r3, #16
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	4413      	add	r3, r2
 8009b36:	3304      	adds	r3, #4
 8009b38:	e00b      	b.n	8009b52 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b3a:	7bbb      	ldrb	r3, [r7, #14]
 8009b3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b40:	4613      	mov	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	4413      	add	r3, r2
 8009b50:	3304      	adds	r3, #4
 8009b52:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b54:	7bbb      	ldrb	r3, [r7, #14]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d002      	beq.n	8009b60 <USBD_StdEPReq+0x2d8>
 8009b5a:	7bbb      	ldrb	r3, [r7, #14]
 8009b5c:	2b80      	cmp	r3, #128	; 0x80
 8009b5e:	d103      	bne.n	8009b68 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	2200      	movs	r2, #0
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	e00e      	b.n	8009b86 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009b68:	7bbb      	ldrb	r3, [r7, #14]
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f001 f8a5 	bl	800acbc <USBD_LL_IsStallEP>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d003      	beq.n	8009b80 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	601a      	str	r2, [r3, #0]
 8009b7e:	e002      	b.n	8009b86 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	2200      	movs	r2, #0
 8009b84:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	2202      	movs	r2, #2
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fbd1 	bl	800a334 <USBD_CtlSendData>
              break;
 8009b92:	e004      	b.n	8009b9e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fb5b 	bl	800a252 <USBD_CtlError>
              break;
 8009b9c:	bf00      	nop
          }
          break;
 8009b9e:	e004      	b.n	8009baa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fb55 	bl	800a252 <USBD_CtlError>
          break;
 8009ba8:	bf00      	nop
      }
      break;
 8009baa:	e005      	b.n	8009bb8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009bac:	6839      	ldr	r1, [r7, #0]
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 fb4f 	bl	800a252 <USBD_CtlError>
      break;
 8009bb4:	e000      	b.n	8009bb8 <USBD_StdEPReq+0x330>
      break;
 8009bb6:	bf00      	nop
  }

  return ret;
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
	...

08009bc4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	885b      	ldrh	r3, [r3, #2]
 8009bde:	0a1b      	lsrs	r3, r3, #8
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	3b01      	subs	r3, #1
 8009be4:	2b06      	cmp	r3, #6
 8009be6:	f200 8128 	bhi.w	8009e3a <USBD_GetDescriptor+0x276>
 8009bea:	a201      	add	r2, pc, #4	; (adr r2, 8009bf0 <USBD_GetDescriptor+0x2c>)
 8009bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf0:	08009c0d 	.word	0x08009c0d
 8009bf4:	08009c25 	.word	0x08009c25
 8009bf8:	08009c65 	.word	0x08009c65
 8009bfc:	08009e3b 	.word	0x08009e3b
 8009c00:	08009e3b 	.word	0x08009e3b
 8009c04:	08009ddb 	.word	0x08009ddb
 8009c08:	08009e07 	.word	0x08009e07
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	7c12      	ldrb	r2, [r2, #16]
 8009c18:	f107 0108 	add.w	r1, r7, #8
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	4798      	blx	r3
 8009c20:	60f8      	str	r0, [r7, #12]
      break;
 8009c22:	e112      	b.n	8009e4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	7c1b      	ldrb	r3, [r3, #16]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d10d      	bne.n	8009c48 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c34:	f107 0208 	add.w	r2, r7, #8
 8009c38:	4610      	mov	r0, r2
 8009c3a:	4798      	blx	r3
 8009c3c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	3301      	adds	r3, #1
 8009c42:	2202      	movs	r2, #2
 8009c44:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c46:	e100      	b.n	8009e4a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c50:	f107 0208 	add.w	r2, r7, #8
 8009c54:	4610      	mov	r0, r2
 8009c56:	4798      	blx	r3
 8009c58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	2202      	movs	r2, #2
 8009c60:	701a      	strb	r2, [r3, #0]
      break;
 8009c62:	e0f2      	b.n	8009e4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	885b      	ldrh	r3, [r3, #2]
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b05      	cmp	r3, #5
 8009c6c:	f200 80ac 	bhi.w	8009dc8 <USBD_GetDescriptor+0x204>
 8009c70:	a201      	add	r2, pc, #4	; (adr r2, 8009c78 <USBD_GetDescriptor+0xb4>)
 8009c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c76:	bf00      	nop
 8009c78:	08009c91 	.word	0x08009c91
 8009c7c:	08009cc5 	.word	0x08009cc5
 8009c80:	08009cf9 	.word	0x08009cf9
 8009c84:	08009d2d 	.word	0x08009d2d
 8009c88:	08009d61 	.word	0x08009d61
 8009c8c:	08009d95 	.word	0x08009d95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00b      	beq.n	8009cb4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	7c12      	ldrb	r2, [r2, #16]
 8009ca8:	f107 0108 	add.w	r1, r7, #8
 8009cac:	4610      	mov	r0, r2
 8009cae:	4798      	blx	r3
 8009cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cb2:	e091      	b.n	8009dd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 facb 	bl	800a252 <USBD_CtlError>
            err++;
 8009cbc:	7afb      	ldrb	r3, [r7, #11]
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8009cc2:	e089      	b.n	8009dd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00b      	beq.n	8009ce8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	7c12      	ldrb	r2, [r2, #16]
 8009cdc:	f107 0108 	add.w	r1, r7, #8
 8009ce0:	4610      	mov	r0, r2
 8009ce2:	4798      	blx	r3
 8009ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ce6:	e077      	b.n	8009dd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fab1 	bl	800a252 <USBD_CtlError>
            err++;
 8009cf0:	7afb      	ldrb	r3, [r7, #11]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8009cf6:	e06f      	b.n	8009dd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00b      	beq.n	8009d1c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	7c12      	ldrb	r2, [r2, #16]
 8009d10:	f107 0108 	add.w	r1, r7, #8
 8009d14:	4610      	mov	r0, r2
 8009d16:	4798      	blx	r3
 8009d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d1a:	e05d      	b.n	8009dd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d1c:	6839      	ldr	r1, [r7, #0]
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fa97 	bl	800a252 <USBD_CtlError>
            err++;
 8009d24:	7afb      	ldrb	r3, [r7, #11]
 8009d26:	3301      	adds	r3, #1
 8009d28:	72fb      	strb	r3, [r7, #11]
          break;
 8009d2a:	e055      	b.n	8009dd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00b      	beq.n	8009d50 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	7c12      	ldrb	r2, [r2, #16]
 8009d44:	f107 0108 	add.w	r1, r7, #8
 8009d48:	4610      	mov	r0, r2
 8009d4a:	4798      	blx	r3
 8009d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d4e:	e043      	b.n	8009dd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fa7d 	bl	800a252 <USBD_CtlError>
            err++;
 8009d58:	7afb      	ldrb	r3, [r7, #11]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d5e:	e03b      	b.n	8009dd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d66:	695b      	ldr	r3, [r3, #20]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00b      	beq.n	8009d84 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d72:	695b      	ldr	r3, [r3, #20]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	7c12      	ldrb	r2, [r2, #16]
 8009d78:	f107 0108 	add.w	r1, r7, #8
 8009d7c:	4610      	mov	r0, r2
 8009d7e:	4798      	blx	r3
 8009d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d82:	e029      	b.n	8009dd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d84:	6839      	ldr	r1, [r7, #0]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fa63 	bl	800a252 <USBD_CtlError>
            err++;
 8009d8c:	7afb      	ldrb	r3, [r7, #11]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	72fb      	strb	r3, [r7, #11]
          break;
 8009d92:	e021      	b.n	8009dd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d9a:	699b      	ldr	r3, [r3, #24]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00b      	beq.n	8009db8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	7c12      	ldrb	r2, [r2, #16]
 8009dac:	f107 0108 	add.w	r1, r7, #8
 8009db0:	4610      	mov	r0, r2
 8009db2:	4798      	blx	r3
 8009db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009db6:	e00f      	b.n	8009dd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009db8:	6839      	ldr	r1, [r7, #0]
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 fa49 	bl	800a252 <USBD_CtlError>
            err++;
 8009dc0:	7afb      	ldrb	r3, [r7, #11]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8009dc6:	e007      	b.n	8009dd8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009dc8:	6839      	ldr	r1, [r7, #0]
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 fa41 	bl	800a252 <USBD_CtlError>
          err++;
 8009dd0:	7afb      	ldrb	r3, [r7, #11]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009dd6:	bf00      	nop
      }
      break;
 8009dd8:	e037      	b.n	8009e4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	7c1b      	ldrb	r3, [r3, #16]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d109      	bne.n	8009df6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dea:	f107 0208 	add.w	r2, r7, #8
 8009dee:	4610      	mov	r0, r2
 8009df0:	4798      	blx	r3
 8009df2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009df4:	e029      	b.n	8009e4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fa2a 	bl	800a252 <USBD_CtlError>
        err++;
 8009dfe:	7afb      	ldrb	r3, [r7, #11]
 8009e00:	3301      	adds	r3, #1
 8009e02:	72fb      	strb	r3, [r7, #11]
      break;
 8009e04:	e021      	b.n	8009e4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	7c1b      	ldrb	r3, [r3, #16]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10d      	bne.n	8009e2a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e16:	f107 0208 	add.w	r2, r7, #8
 8009e1a:	4610      	mov	r0, r2
 8009e1c:	4798      	blx	r3
 8009e1e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	3301      	adds	r3, #1
 8009e24:	2207      	movs	r2, #7
 8009e26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e28:	e00f      	b.n	8009e4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009e2a:	6839      	ldr	r1, [r7, #0]
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 fa10 	bl	800a252 <USBD_CtlError>
        err++;
 8009e32:	7afb      	ldrb	r3, [r7, #11]
 8009e34:	3301      	adds	r3, #1
 8009e36:	72fb      	strb	r3, [r7, #11]
      break;
 8009e38:	e007      	b.n	8009e4a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e3a:	6839      	ldr	r1, [r7, #0]
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 fa08 	bl	800a252 <USBD_CtlError>
      err++;
 8009e42:	7afb      	ldrb	r3, [r7, #11]
 8009e44:	3301      	adds	r3, #1
 8009e46:	72fb      	strb	r3, [r7, #11]
      break;
 8009e48:	bf00      	nop
  }

  if (err != 0U)
 8009e4a:	7afb      	ldrb	r3, [r7, #11]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d11e      	bne.n	8009e8e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	88db      	ldrh	r3, [r3, #6]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d016      	beq.n	8009e86 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009e58:	893b      	ldrh	r3, [r7, #8]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00e      	beq.n	8009e7c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	88da      	ldrh	r2, [r3, #6]
 8009e62:	893b      	ldrh	r3, [r7, #8]
 8009e64:	4293      	cmp	r3, r2
 8009e66:	bf28      	it	cs
 8009e68:	4613      	movcs	r3, r2
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e6e:	893b      	ldrh	r3, [r7, #8]
 8009e70:	461a      	mov	r2, r3
 8009e72:	68f9      	ldr	r1, [r7, #12]
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 fa5d 	bl	800a334 <USBD_CtlSendData>
 8009e7a:	e009      	b.n	8009e90 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009e7c:	6839      	ldr	r1, [r7, #0]
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 f9e7 	bl	800a252 <USBD_CtlError>
 8009e84:	e004      	b.n	8009e90 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 faae 	bl	800a3e8 <USBD_CtlSendStatus>
 8009e8c:	e000      	b.n	8009e90 <USBD_GetDescriptor+0x2cc>
    return;
 8009e8e:	bf00      	nop
  }
}
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop

08009e98 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	889b      	ldrh	r3, [r3, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d131      	bne.n	8009f0e <USBD_SetAddress+0x76>
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	88db      	ldrh	r3, [r3, #6]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d12d      	bne.n	8009f0e <USBD_SetAddress+0x76>
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	885b      	ldrh	r3, [r3, #2]
 8009eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8009eb8:	d829      	bhi.n	8009f0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	885b      	ldrh	r3, [r3, #2]
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ec4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	2b03      	cmp	r3, #3
 8009ed0:	d104      	bne.n	8009edc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009ed2:	6839      	ldr	r1, [r7, #0]
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f9bc 	bl	800a252 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eda:	e01d      	b.n	8009f18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	7bfa      	ldrb	r2, [r7, #15]
 8009ee0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 ff13 	bl	800ad14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fa7a 	bl	800a3e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d004      	beq.n	8009f04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2202      	movs	r2, #2
 8009efe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f02:	e009      	b.n	8009f18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f0c:	e004      	b.n	8009f18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f99e 	bl	800a252 <USBD_CtlError>
  }
}
 8009f16:	bf00      	nop
 8009f18:	bf00      	nop
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	885b      	ldrh	r3, [r3, #2]
 8009f32:	b2da      	uxtb	r2, r3
 8009f34:	4b4e      	ldr	r3, [pc, #312]	; (800a070 <USBD_SetConfig+0x150>)
 8009f36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f38:	4b4d      	ldr	r3, [pc, #308]	; (800a070 <USBD_SetConfig+0x150>)
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d905      	bls.n	8009f4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 f985 	bl	800a252 <USBD_CtlError>
    return USBD_FAIL;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	e08c      	b.n	800a066 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d002      	beq.n	8009f5e <USBD_SetConfig+0x3e>
 8009f58:	2b03      	cmp	r3, #3
 8009f5a:	d029      	beq.n	8009fb0 <USBD_SetConfig+0x90>
 8009f5c:	e075      	b.n	800a04a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009f5e:	4b44      	ldr	r3, [pc, #272]	; (800a070 <USBD_SetConfig+0x150>)
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d020      	beq.n	8009fa8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009f66:	4b42      	ldr	r3, [pc, #264]	; (800a070 <USBD_SetConfig+0x150>)
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f70:	4b3f      	ldr	r3, [pc, #252]	; (800a070 <USBD_SetConfig+0x150>)
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	4619      	mov	r1, r3
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f7fe ffe1 	bl	8008f3e <USBD_SetClassConfig>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009f80:	7bfb      	ldrb	r3, [r7, #15]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d008      	beq.n	8009f98 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f962 	bl	800a252 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2202      	movs	r2, #2
 8009f92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f96:	e065      	b.n	800a064 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 fa25 	bl	800a3e8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2203      	movs	r2, #3
 8009fa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009fa6:	e05d      	b.n	800a064 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fa1d 	bl	800a3e8 <USBD_CtlSendStatus>
      break;
 8009fae:	e059      	b.n	800a064 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009fb0:	4b2f      	ldr	r3, [pc, #188]	; (800a070 <USBD_SetConfig+0x150>)
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d112      	bne.n	8009fde <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009fc0:	4b2b      	ldr	r3, [pc, #172]	; (800a070 <USBD_SetConfig+0x150>)
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009fca:	4b29      	ldr	r3, [pc, #164]	; (800a070 <USBD_SetConfig+0x150>)
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7fe ffd0 	bl	8008f76 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 fa06 	bl	800a3e8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009fdc:	e042      	b.n	800a064 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009fde:	4b24      	ldr	r3, [pc, #144]	; (800a070 <USBD_SetConfig+0x150>)
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d02a      	beq.n	800a042 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7fe ffbe 	bl	8008f76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009ffa:	4b1d      	ldr	r3, [pc, #116]	; (800a070 <USBD_SetConfig+0x150>)
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	461a      	mov	r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a004:	4b1a      	ldr	r3, [pc, #104]	; (800a070 <USBD_SetConfig+0x150>)
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	4619      	mov	r1, r3
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7fe ff97 	bl	8008f3e <USBD_SetClassConfig>
 800a010:	4603      	mov	r3, r0
 800a012:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a014:	7bfb      	ldrb	r3, [r7, #15]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00f      	beq.n	800a03a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a01a:	6839      	ldr	r1, [r7, #0]
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 f918 	bl	800a252 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	b2db      	uxtb	r3, r3
 800a028:	4619      	mov	r1, r3
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7fe ffa3 	bl	8008f76 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2202      	movs	r2, #2
 800a034:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a038:	e014      	b.n	800a064 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f9d4 	bl	800a3e8 <USBD_CtlSendStatus>
      break;
 800a040:	e010      	b.n	800a064 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f9d0 	bl	800a3e8 <USBD_CtlSendStatus>
      break;
 800a048:	e00c      	b.n	800a064 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a04a:	6839      	ldr	r1, [r7, #0]
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f900 	bl	800a252 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a052:	4b07      	ldr	r3, [pc, #28]	; (800a070 <USBD_SetConfig+0x150>)
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	4619      	mov	r1, r3
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f7fe ff8c 	bl	8008f76 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a05e:	2303      	movs	r3, #3
 800a060:	73fb      	strb	r3, [r7, #15]
      break;
 800a062:	bf00      	nop
  }

  return ret;
 800a064:	7bfb      	ldrb	r3, [r7, #15]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	20000468 	.word	0x20000468

0800a074 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	88db      	ldrh	r3, [r3, #6]
 800a082:	2b01      	cmp	r3, #1
 800a084:	d004      	beq.n	800a090 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a086:	6839      	ldr	r1, [r7, #0]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f8e2 	bl	800a252 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a08e:	e023      	b.n	800a0d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a096:	b2db      	uxtb	r3, r3
 800a098:	2b02      	cmp	r3, #2
 800a09a:	dc02      	bgt.n	800a0a2 <USBD_GetConfig+0x2e>
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	dc03      	bgt.n	800a0a8 <USBD_GetConfig+0x34>
 800a0a0:	e015      	b.n	800a0ce <USBD_GetConfig+0x5a>
 800a0a2:	2b03      	cmp	r3, #3
 800a0a4:	d00b      	beq.n	800a0be <USBD_GetConfig+0x4a>
 800a0a6:	e012      	b.n	800a0ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	3308      	adds	r3, #8
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f93c 	bl	800a334 <USBD_CtlSendData>
        break;
 800a0bc:	e00c      	b.n	800a0d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 f934 	bl	800a334 <USBD_CtlSendData>
        break;
 800a0cc:	e004      	b.n	800a0d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a0ce:	6839      	ldr	r1, [r7, #0]
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 f8be 	bl	800a252 <USBD_CtlError>
        break;
 800a0d6:	bf00      	nop
}
 800a0d8:	bf00      	nop
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	2b02      	cmp	r3, #2
 800a0f6:	d81e      	bhi.n	800a136 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	88db      	ldrh	r3, [r3, #6]
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d004      	beq.n	800a10a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a100:	6839      	ldr	r1, [r7, #0]
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f8a5 	bl	800a252 <USBD_CtlError>
        break;
 800a108:	e01a      	b.n	800a140 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a116:	2b00      	cmp	r3, #0
 800a118:	d005      	beq.n	800a126 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	f043 0202 	orr.w	r2, r3, #2
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	330c      	adds	r3, #12
 800a12a:	2202      	movs	r2, #2
 800a12c:	4619      	mov	r1, r3
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f900 	bl	800a334 <USBD_CtlSendData>
      break;
 800a134:	e004      	b.n	800a140 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a136:	6839      	ldr	r1, [r7, #0]
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f88a 	bl	800a252 <USBD_CtlError>
      break;
 800a13e:	bf00      	nop
  }
}
 800a140:	bf00      	nop
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	885b      	ldrh	r3, [r3, #2]
 800a156:	2b01      	cmp	r3, #1
 800a158:	d107      	bne.n	800a16a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f940 	bl	800a3e8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a168:	e013      	b.n	800a192 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	885b      	ldrh	r3, [r3, #2]
 800a16e:	2b02      	cmp	r3, #2
 800a170:	d10b      	bne.n	800a18a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	889b      	ldrh	r3, [r3, #4]
 800a176:	0a1b      	lsrs	r3, r3, #8
 800a178:	b29b      	uxth	r3, r3
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f930 	bl	800a3e8 <USBD_CtlSendStatus>
}
 800a188:	e003      	b.n	800a192 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a18a:	6839      	ldr	r1, [r7, #0]
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 f860 	bl	800a252 <USBD_CtlError>
}
 800a192:	bf00      	nop
 800a194:	3708      	adds	r7, #8
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b082      	sub	sp, #8
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	d80b      	bhi.n	800a1ca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	885b      	ldrh	r3, [r3, #2]
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d10c      	bne.n	800a1d4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f910 	bl	800a3e8 <USBD_CtlSendStatus>
      }
      break;
 800a1c8:	e004      	b.n	800a1d4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 f840 	bl	800a252 <USBD_CtlError>
      break;
 800a1d2:	e000      	b.n	800a1d6 <USBD_ClrFeature+0x3c>
      break;
 800a1d4:	bf00      	nop
  }
}
 800a1d6:	bf00      	nop
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
 800a1e6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	781a      	ldrb	r2, [r3, #0]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	781a      	ldrb	r2, [r3, #0]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	3301      	adds	r3, #1
 800a206:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f7ff fa41 	bl	8009690 <SWAPBYTE>
 800a20e:	4603      	mov	r3, r0
 800a210:	461a      	mov	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	3301      	adds	r3, #1
 800a21a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	3301      	adds	r3, #1
 800a220:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f7ff fa34 	bl	8009690 <SWAPBYTE>
 800a228:	4603      	mov	r3, r0
 800a22a:	461a      	mov	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	3301      	adds	r3, #1
 800a234:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	3301      	adds	r3, #1
 800a23a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f7ff fa27 	bl	8009690 <SWAPBYTE>
 800a242:	4603      	mov	r3, r0
 800a244:	461a      	mov	r2, r3
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	80da      	strh	r2, [r3, #6]
}
 800a24a:	bf00      	nop
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b082      	sub	sp, #8
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
 800a25a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a25c:	2180      	movs	r1, #128	; 0x80
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fcee 	bl	800ac40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a264:	2100      	movs	r1, #0
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fcea 	bl	800ac40 <USBD_LL_StallEP>
}
 800a26c:	bf00      	nop
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a280:	2300      	movs	r3, #0
 800a282:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d036      	beq.n	800a2f8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a28e:	6938      	ldr	r0, [r7, #16]
 800a290:	f000 f836 	bl	800a300 <USBD_GetLen>
 800a294:	4603      	mov	r3, r0
 800a296:	3301      	adds	r3, #1
 800a298:	b29b      	uxth	r3, r3
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
 800a2a4:	68ba      	ldr	r2, [r7, #8]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	7812      	ldrb	r2, [r2, #0]
 800a2ac:	701a      	strb	r2, [r3, #0]
  idx++;
 800a2ae:	7dfb      	ldrb	r3, [r7, #23]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a2b4:	7dfb      	ldrb	r3, [r7, #23]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	2203      	movs	r2, #3
 800a2bc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a2be:	7dfb      	ldrb	r3, [r7, #23]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a2c4:	e013      	b.n	800a2ee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a2c6:	7dfb      	ldrb	r3, [r7, #23]
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	693a      	ldr	r2, [r7, #16]
 800a2ce:	7812      	ldrb	r2, [r2, #0]
 800a2d0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	613b      	str	r3, [r7, #16]
    idx++;
 800a2d8:	7dfb      	ldrb	r3, [r7, #23]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a2de:	7dfb      	ldrb	r3, [r7, #23]
 800a2e0:	68ba      	ldr	r2, [r7, #8]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	701a      	strb	r2, [r3, #0]
    idx++;
 800a2e8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1e7      	bne.n	800a2c6 <USBD_GetString+0x52>
 800a2f6:	e000      	b.n	800a2fa <USBD_GetString+0x86>
    return;
 800a2f8:	bf00      	nop
  }
}
 800a2fa:	3718      	adds	r7, #24
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a300:	b480      	push	{r7}
 800a302:	b085      	sub	sp, #20
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a308:	2300      	movs	r3, #0
 800a30a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a310:	e005      	b.n	800a31e <USBD_GetLen+0x1e>
  {
    len++;
 800a312:	7bfb      	ldrb	r3, [r7, #15]
 800a314:	3301      	adds	r3, #1
 800a316:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	3301      	adds	r3, #1
 800a31c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d1f5      	bne.n	800a312 <USBD_GetLen+0x12>
  }

  return len;
 800a326:	7bfb      	ldrb	r3, [r7, #15]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2202      	movs	r2, #2
 800a344:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	68ba      	ldr	r2, [r7, #8]
 800a358:	2100      	movs	r1, #0
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f000 fcf9 	bl	800ad52 <USBD_LL_Transmit>

  return USBD_OK;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b084      	sub	sp, #16
 800a36e:	af00      	add	r7, sp, #0
 800a370:	60f8      	str	r0, [r7, #12]
 800a372:	60b9      	str	r1, [r7, #8]
 800a374:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	2100      	movs	r1, #0
 800a37c:	68f8      	ldr	r0, [r7, #12]
 800a37e:	f000 fce8 	bl	800ad52 <USBD_LL_Transmit>

  return USBD_OK;
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	3710      	adds	r7, #16
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2203      	movs	r2, #3
 800a39c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f000 fcec 	bl	800ad94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b084      	sub	sp, #16
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	60f8      	str	r0, [r7, #12]
 800a3ce:	60b9      	str	r1, [r7, #8]
 800a3d0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	68ba      	ldr	r2, [r7, #8]
 800a3d6:	2100      	movs	r1, #0
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f000 fcdb 	bl	800ad94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2204      	movs	r2, #4
 800a3f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 fca7 	bl	800ad52 <USBD_LL_Transmit>

  return USBD_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b082      	sub	sp, #8
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2205      	movs	r2, #5
 800a41a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a41e:	2300      	movs	r3, #0
 800a420:	2200      	movs	r2, #0
 800a422:	2100      	movs	r1, #0
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 fcb5 	bl	800ad94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a438:	2200      	movs	r2, #0
 800a43a:	4912      	ldr	r1, [pc, #72]	; (800a484 <MX_USB_DEVICE_Init+0x50>)
 800a43c:	4812      	ldr	r0, [pc, #72]	; (800a488 <MX_USB_DEVICE_Init+0x54>)
 800a43e:	f7fe fd01 	bl	8008e44 <USBD_Init>
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d001      	beq.n	800a44c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a448:	f7f6 fd9a 	bl	8000f80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a44c:	490f      	ldr	r1, [pc, #60]	; (800a48c <MX_USB_DEVICE_Init+0x58>)
 800a44e:	480e      	ldr	r0, [pc, #56]	; (800a488 <MX_USB_DEVICE_Init+0x54>)
 800a450:	f7fe fd28 	bl	8008ea4 <USBD_RegisterClass>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d001      	beq.n	800a45e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a45a:	f7f6 fd91 	bl	8000f80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a45e:	490c      	ldr	r1, [pc, #48]	; (800a490 <MX_USB_DEVICE_Init+0x5c>)
 800a460:	4809      	ldr	r0, [pc, #36]	; (800a488 <MX_USB_DEVICE_Init+0x54>)
 800a462:	f7fe fc1f 	bl	8008ca4 <USBD_CDC_RegisterInterface>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d001      	beq.n	800a470 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a46c:	f7f6 fd88 	bl	8000f80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a470:	4805      	ldr	r0, [pc, #20]	; (800a488 <MX_USB_DEVICE_Init+0x54>)
 800a472:	f7fe fd4d 	bl	8008f10 <USBD_Start>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d001      	beq.n	800a480 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a47c:	f7f6 fd80 	bl	8000f80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a480:	bf00      	nop
 800a482:	bd80      	pop	{r7, pc}
 800a484:	200000b0 	.word	0x200000b0
 800a488:	2000046c 	.word	0x2000046c
 800a48c:	2000001c 	.word	0x2000001c
 800a490:	2000009c 	.word	0x2000009c

0800a494 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a498:	2200      	movs	r2, #0
 800a49a:	4905      	ldr	r1, [pc, #20]	; (800a4b0 <CDC_Init_FS+0x1c>)
 800a49c:	4805      	ldr	r0, [pc, #20]	; (800a4b4 <CDC_Init_FS+0x20>)
 800a49e:	f7fe fc1b 	bl	8008cd8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a4a2:	4905      	ldr	r1, [pc, #20]	; (800a4b8 <CDC_Init_FS+0x24>)
 800a4a4:	4803      	ldr	r0, [pc, #12]	; (800a4b4 <CDC_Init_FS+0x20>)
 800a4a6:	f7fe fc39 	bl	8008d1c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a4aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	20000f48 	.word	0x20000f48
 800a4b4:	2000046c 	.word	0x2000046c
 800a4b8:	20000748 	.word	0x20000748

0800a4bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a4c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	6039      	str	r1, [r7, #0]
 800a4d6:	71fb      	strb	r3, [r7, #7]
 800a4d8:	4613      	mov	r3, r2
 800a4da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a4dc:	79fb      	ldrb	r3, [r7, #7]
 800a4de:	2b23      	cmp	r3, #35	; 0x23
 800a4e0:	d84a      	bhi.n	800a578 <CDC_Control_FS+0xac>
 800a4e2:	a201      	add	r2, pc, #4	; (adr r2, 800a4e8 <CDC_Control_FS+0x1c>)
 800a4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e8:	0800a579 	.word	0x0800a579
 800a4ec:	0800a579 	.word	0x0800a579
 800a4f0:	0800a579 	.word	0x0800a579
 800a4f4:	0800a579 	.word	0x0800a579
 800a4f8:	0800a579 	.word	0x0800a579
 800a4fc:	0800a579 	.word	0x0800a579
 800a500:	0800a579 	.word	0x0800a579
 800a504:	0800a579 	.word	0x0800a579
 800a508:	0800a579 	.word	0x0800a579
 800a50c:	0800a579 	.word	0x0800a579
 800a510:	0800a579 	.word	0x0800a579
 800a514:	0800a579 	.word	0x0800a579
 800a518:	0800a579 	.word	0x0800a579
 800a51c:	0800a579 	.word	0x0800a579
 800a520:	0800a579 	.word	0x0800a579
 800a524:	0800a579 	.word	0x0800a579
 800a528:	0800a579 	.word	0x0800a579
 800a52c:	0800a579 	.word	0x0800a579
 800a530:	0800a579 	.word	0x0800a579
 800a534:	0800a579 	.word	0x0800a579
 800a538:	0800a579 	.word	0x0800a579
 800a53c:	0800a579 	.word	0x0800a579
 800a540:	0800a579 	.word	0x0800a579
 800a544:	0800a579 	.word	0x0800a579
 800a548:	0800a579 	.word	0x0800a579
 800a54c:	0800a579 	.word	0x0800a579
 800a550:	0800a579 	.word	0x0800a579
 800a554:	0800a579 	.word	0x0800a579
 800a558:	0800a579 	.word	0x0800a579
 800a55c:	0800a579 	.word	0x0800a579
 800a560:	0800a579 	.word	0x0800a579
 800a564:	0800a579 	.word	0x0800a579
 800a568:	0800a579 	.word	0x0800a579
 800a56c:	0800a579 	.word	0x0800a579
 800a570:	0800a579 	.word	0x0800a579
 800a574:	0800a579 	.word	0x0800a579
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a578:	bf00      	nop
  }

  return (USBD_OK);
 800a57a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a592:	6879      	ldr	r1, [r7, #4]
 800a594:	4805      	ldr	r0, [pc, #20]	; (800a5ac <CDC_Receive_FS+0x24>)
 800a596:	f7fe fbc1 	bl	8008d1c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a59a:	4804      	ldr	r0, [pc, #16]	; (800a5ac <CDC_Receive_FS+0x24>)
 800a59c:	f7fe fc1c 	bl	8008dd8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a5a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	2000046c 	.word	0x2000046c

0800a5b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a5c0:	4b0d      	ldr	r3, [pc, #52]	; (800a5f8 <CDC_Transmit_FS+0x48>)
 800a5c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d001      	beq.n	800a5d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e00b      	b.n	800a5ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a5d6:	887b      	ldrh	r3, [r7, #2]
 800a5d8:	461a      	mov	r2, r3
 800a5da:	6879      	ldr	r1, [r7, #4]
 800a5dc:	4806      	ldr	r0, [pc, #24]	; (800a5f8 <CDC_Transmit_FS+0x48>)
 800a5de:	f7fe fb7b 	bl	8008cd8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a5e2:	4805      	ldr	r0, [pc, #20]	; (800a5f8 <CDC_Transmit_FS+0x48>)
 800a5e4:	f7fe fbb8 	bl	8008d58 <USBD_CDC_TransmitPacket>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a5ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	2000046c 	.word	0x2000046c

0800a5fc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b087      	sub	sp, #28
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	4613      	mov	r3, r2
 800a608:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a60e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a612:	4618      	mov	r0, r3
 800a614:	371c      	adds	r7, #28
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr
	...

0800a620 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	4603      	mov	r3, r0
 800a628:	6039      	str	r1, [r7, #0]
 800a62a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	2212      	movs	r2, #18
 800a630:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a632:	4b03      	ldr	r3, [pc, #12]	; (800a640 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a634:	4618      	mov	r0, r3
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr
 800a640:	200000cc 	.word	0x200000cc

0800a644 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	4603      	mov	r3, r0
 800a64c:	6039      	str	r1, [r7, #0]
 800a64e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	2204      	movs	r2, #4
 800a654:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a656:	4b03      	ldr	r3, [pc, #12]	; (800a664 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a658:	4618      	mov	r0, r3
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr
 800a664:	200000e0 	.word	0x200000e0

0800a668 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	4603      	mov	r3, r0
 800a670:	6039      	str	r1, [r7, #0]
 800a672:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a674:	79fb      	ldrb	r3, [r7, #7]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d105      	bne.n	800a686 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a67a:	683a      	ldr	r2, [r7, #0]
 800a67c:	4907      	ldr	r1, [pc, #28]	; (800a69c <USBD_FS_ProductStrDescriptor+0x34>)
 800a67e:	4808      	ldr	r0, [pc, #32]	; (800a6a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a680:	f7ff fdf8 	bl	800a274 <USBD_GetString>
 800a684:	e004      	b.n	800a690 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	4904      	ldr	r1, [pc, #16]	; (800a69c <USBD_FS_ProductStrDescriptor+0x34>)
 800a68a:	4805      	ldr	r0, [pc, #20]	; (800a6a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a68c:	f7ff fdf2 	bl	800a274 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a690:	4b02      	ldr	r3, [pc, #8]	; (800a69c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a692:	4618      	mov	r0, r3
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	20001748 	.word	0x20001748
 800a6a0:	0800b880 	.word	0x0800b880

0800a6a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	6039      	str	r1, [r7, #0]
 800a6ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a6b0:	683a      	ldr	r2, [r7, #0]
 800a6b2:	4904      	ldr	r1, [pc, #16]	; (800a6c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a6b4:	4804      	ldr	r0, [pc, #16]	; (800a6c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a6b6:	f7ff fddd 	bl	800a274 <USBD_GetString>
  return USBD_StrDesc;
 800a6ba:	4b02      	ldr	r3, [pc, #8]	; (800a6c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	20001748 	.word	0x20001748
 800a6c8:	0800b898 	.word	0x0800b898

0800a6cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	6039      	str	r1, [r7, #0]
 800a6d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	221a      	movs	r2, #26
 800a6dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a6de:	f000 f843 	bl	800a768 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a6e2:	4b02      	ldr	r3, [pc, #8]	; (800a6ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	200000e4 	.word	0x200000e4

0800a6f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	6039      	str	r1, [r7, #0]
 800a6fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a6fc:	79fb      	ldrb	r3, [r7, #7]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d105      	bne.n	800a70e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	4907      	ldr	r1, [pc, #28]	; (800a724 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a706:	4808      	ldr	r0, [pc, #32]	; (800a728 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a708:	f7ff fdb4 	bl	800a274 <USBD_GetString>
 800a70c:	e004      	b.n	800a718 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	4904      	ldr	r1, [pc, #16]	; (800a724 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a712:	4805      	ldr	r0, [pc, #20]	; (800a728 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a714:	f7ff fdae 	bl	800a274 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a718:	4b02      	ldr	r3, [pc, #8]	; (800a724 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	20001748 	.word	0x20001748
 800a728:	0800b8ac 	.word	0x0800b8ac

0800a72c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	4603      	mov	r3, r0
 800a734:	6039      	str	r1, [r7, #0]
 800a736:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a738:	79fb      	ldrb	r3, [r7, #7]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d105      	bne.n	800a74a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	4907      	ldr	r1, [pc, #28]	; (800a760 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a742:	4808      	ldr	r0, [pc, #32]	; (800a764 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a744:	f7ff fd96 	bl	800a274 <USBD_GetString>
 800a748:	e004      	b.n	800a754 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	4904      	ldr	r1, [pc, #16]	; (800a760 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a74e:	4805      	ldr	r0, [pc, #20]	; (800a764 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a750:	f7ff fd90 	bl	800a274 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a754:	4b02      	ldr	r3, [pc, #8]	; (800a760 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a756:	4618      	mov	r0, r3
 800a758:	3708      	adds	r7, #8
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	20001748 	.word	0x20001748
 800a764:	0800b8b8 	.word	0x0800b8b8

0800a768 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b084      	sub	sp, #16
 800a76c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a76e:	4b0f      	ldr	r3, [pc, #60]	; (800a7ac <Get_SerialNum+0x44>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a774:	4b0e      	ldr	r3, [pc, #56]	; (800a7b0 <Get_SerialNum+0x48>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a77a:	4b0e      	ldr	r3, [pc, #56]	; (800a7b4 <Get_SerialNum+0x4c>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4413      	add	r3, r2
 800a786:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d009      	beq.n	800a7a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a78e:	2208      	movs	r2, #8
 800a790:	4909      	ldr	r1, [pc, #36]	; (800a7b8 <Get_SerialNum+0x50>)
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f000 f814 	bl	800a7c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a798:	2204      	movs	r2, #4
 800a79a:	4908      	ldr	r1, [pc, #32]	; (800a7bc <Get_SerialNum+0x54>)
 800a79c:	68b8      	ldr	r0, [r7, #8]
 800a79e:	f000 f80f 	bl	800a7c0 <IntToUnicode>
  }
}
 800a7a2:	bf00      	nop
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	1fff7a10 	.word	0x1fff7a10
 800a7b0:	1fff7a14 	.word	0x1fff7a14
 800a7b4:	1fff7a18 	.word	0x1fff7a18
 800a7b8:	200000e6 	.word	0x200000e6
 800a7bc:	200000f6 	.word	0x200000f6

0800a7c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b087      	sub	sp, #28
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	75fb      	strb	r3, [r7, #23]
 800a7d6:	e027      	b.n	800a828 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	0f1b      	lsrs	r3, r3, #28
 800a7dc:	2b09      	cmp	r3, #9
 800a7de:	d80b      	bhi.n	800a7f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	0f1b      	lsrs	r3, r3, #28
 800a7e4:	b2da      	uxtb	r2, r3
 800a7e6:	7dfb      	ldrb	r3, [r7, #23]
 800a7e8:	005b      	lsls	r3, r3, #1
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	440b      	add	r3, r1
 800a7f0:	3230      	adds	r2, #48	; 0x30
 800a7f2:	b2d2      	uxtb	r2, r2
 800a7f4:	701a      	strb	r2, [r3, #0]
 800a7f6:	e00a      	b.n	800a80e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	0f1b      	lsrs	r3, r3, #28
 800a7fc:	b2da      	uxtb	r2, r3
 800a7fe:	7dfb      	ldrb	r3, [r7, #23]
 800a800:	005b      	lsls	r3, r3, #1
 800a802:	4619      	mov	r1, r3
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	440b      	add	r3, r1
 800a808:	3237      	adds	r2, #55	; 0x37
 800a80a:	b2d2      	uxtb	r2, r2
 800a80c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	011b      	lsls	r3, r3, #4
 800a812:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a814:	7dfb      	ldrb	r3, [r7, #23]
 800a816:	005b      	lsls	r3, r3, #1
 800a818:	3301      	adds	r3, #1
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	4413      	add	r3, r2
 800a81e:	2200      	movs	r2, #0
 800a820:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a822:	7dfb      	ldrb	r3, [r7, #23]
 800a824:	3301      	adds	r3, #1
 800a826:	75fb      	strb	r3, [r7, #23]
 800a828:	7dfa      	ldrb	r2, [r7, #23]
 800a82a:	79fb      	ldrb	r3, [r7, #7]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d3d3      	bcc.n	800a7d8 <IntToUnicode+0x18>
  }
}
 800a830:	bf00      	nop
 800a832:	bf00      	nop
 800a834:	371c      	adds	r7, #28
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr
	...

0800a840 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b08a      	sub	sp, #40	; 0x28
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a848:	f107 0314 	add.w	r3, r7, #20
 800a84c:	2200      	movs	r2, #0
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	605a      	str	r2, [r3, #4]
 800a852:	609a      	str	r2, [r3, #8]
 800a854:	60da      	str	r2, [r3, #12]
 800a856:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a860:	d147      	bne.n	800a8f2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a862:	2300      	movs	r3, #0
 800a864:	613b      	str	r3, [r7, #16]
 800a866:	4b25      	ldr	r3, [pc, #148]	; (800a8fc <HAL_PCD_MspInit+0xbc>)
 800a868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a86a:	4a24      	ldr	r2, [pc, #144]	; (800a8fc <HAL_PCD_MspInit+0xbc>)
 800a86c:	f043 0301 	orr.w	r3, r3, #1
 800a870:	6313      	str	r3, [r2, #48]	; 0x30
 800a872:	4b22      	ldr	r3, [pc, #136]	; (800a8fc <HAL_PCD_MspInit+0xbc>)
 800a874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	613b      	str	r3, [r7, #16]
 800a87c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a87e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a884:	2300      	movs	r3, #0
 800a886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a888:	2300      	movs	r3, #0
 800a88a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a88c:	f107 0314 	add.w	r3, r7, #20
 800a890:	4619      	mov	r1, r3
 800a892:	481b      	ldr	r0, [pc, #108]	; (800a900 <HAL_PCD_MspInit+0xc0>)
 800a894:	f7f7 fbdc 	bl	8002050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a898:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a89c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a89e:	2302      	movs	r3, #2
 800a8a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a8aa:	230a      	movs	r3, #10
 800a8ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8ae:	f107 0314 	add.w	r3, r7, #20
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	4812      	ldr	r0, [pc, #72]	; (800a900 <HAL_PCD_MspInit+0xc0>)
 800a8b6:	f7f7 fbcb 	bl	8002050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a8ba:	4b10      	ldr	r3, [pc, #64]	; (800a8fc <HAL_PCD_MspInit+0xbc>)
 800a8bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8be:	4a0f      	ldr	r2, [pc, #60]	; (800a8fc <HAL_PCD_MspInit+0xbc>)
 800a8c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8c4:	6353      	str	r3, [r2, #52]	; 0x34
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]
 800a8ca:	4b0c      	ldr	r3, [pc, #48]	; (800a8fc <HAL_PCD_MspInit+0xbc>)
 800a8cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ce:	4a0b      	ldr	r2, [pc, #44]	; (800a8fc <HAL_PCD_MspInit+0xbc>)
 800a8d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8d4:	6453      	str	r3, [r2, #68]	; 0x44
 800a8d6:	4b09      	ldr	r3, [pc, #36]	; (800a8fc <HAL_PCD_MspInit+0xbc>)
 800a8d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8de:	60fb      	str	r3, [r7, #12]
 800a8e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	2043      	movs	r0, #67	; 0x43
 800a8e8:	f7f7 fb7b 	bl	8001fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a8ec:	2043      	movs	r0, #67	; 0x43
 800a8ee:	f7f7 fb94 	bl	800201a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a8f2:	bf00      	nop
 800a8f4:	3728      	adds	r7, #40	; 0x28
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	40023800 	.word	0x40023800
 800a900:	40020000 	.word	0x40020000

0800a904 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a918:	4619      	mov	r1, r3
 800a91a:	4610      	mov	r0, r2
 800a91c:	f7fe fb45 	bl	8008faa <USBD_LL_SetupStage>
}
 800a920:	bf00      	nop
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	460b      	mov	r3, r1
 800a932:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a93a:	78fa      	ldrb	r2, [r7, #3]
 800a93c:	6879      	ldr	r1, [r7, #4]
 800a93e:	4613      	mov	r3, r2
 800a940:	00db      	lsls	r3, r3, #3
 800a942:	4413      	add	r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	440b      	add	r3, r1
 800a948:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	78fb      	ldrb	r3, [r7, #3]
 800a950:	4619      	mov	r1, r3
 800a952:	f7fe fb7f 	bl	8009054 <USBD_LL_DataOutStage>
}
 800a956:	bf00      	nop
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b082      	sub	sp, #8
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
 800a966:	460b      	mov	r3, r1
 800a968:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a970:	78fa      	ldrb	r2, [r7, #3]
 800a972:	6879      	ldr	r1, [r7, #4]
 800a974:	4613      	mov	r3, r2
 800a976:	00db      	lsls	r3, r3, #3
 800a978:	4413      	add	r3, r2
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	440b      	add	r3, r1
 800a97e:	3320      	adds	r3, #32
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	78fb      	ldrb	r3, [r7, #3]
 800a984:	4619      	mov	r1, r3
 800a986:	f7fe fc18 	bl	80091ba <USBD_LL_DataInStage>
}
 800a98a:	bf00      	nop
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b082      	sub	sp, #8
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fe fd52 	bl	800944a <USBD_LL_SOF>
}
 800a9a6:	bf00      	nop
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b084      	sub	sp, #16
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	79db      	ldrb	r3, [r3, #7]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d102      	bne.n	800a9c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	73fb      	strb	r3, [r7, #15]
 800a9c6:	e008      	b.n	800a9da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	79db      	ldrb	r3, [r3, #7]
 800a9cc:	2b02      	cmp	r3, #2
 800a9ce:	d102      	bne.n	800a9d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	73fb      	strb	r3, [r7, #15]
 800a9d4:	e001      	b.n	800a9da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a9d6:	f7f6 fad3 	bl	8000f80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a9e0:	7bfa      	ldrb	r2, [r7, #15]
 800a9e2:	4611      	mov	r1, r2
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7fe fcec 	bl	80093c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7fe fc94 	bl	800931e <USBD_LL_Reset>
}
 800a9f6:	bf00      	nop
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
	...

0800aa00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fe fce7 	bl	80093e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	6812      	ldr	r2, [r2, #0]
 800aa22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa26:	f043 0301 	orr.w	r3, r3, #1
 800aa2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	7adb      	ldrb	r3, [r3, #11]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d005      	beq.n	800aa40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa34:	4b04      	ldr	r3, [pc, #16]	; (800aa48 <HAL_PCD_SuspendCallback+0x48>)
 800aa36:	691b      	ldr	r3, [r3, #16]
 800aa38:	4a03      	ldr	r2, [pc, #12]	; (800aa48 <HAL_PCD_SuspendCallback+0x48>)
 800aa3a:	f043 0306 	orr.w	r3, r3, #6
 800aa3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa40:	bf00      	nop
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	e000ed00 	.word	0xe000ed00

0800aa4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fe fcdd 	bl	800941a <USBD_LL_Resume>
}
 800aa60:	bf00      	nop
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	460b      	mov	r3, r1
 800aa72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800aa7a:	78fa      	ldrb	r2, [r7, #3]
 800aa7c:	4611      	mov	r1, r2
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fe fd35 	bl	80094ee <USBD_LL_IsoOUTIncomplete>
}
 800aa84:	bf00      	nop
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	460b      	mov	r3, r1
 800aa96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800aa9e:	78fa      	ldrb	r2, [r7, #3]
 800aaa0:	4611      	mov	r1, r2
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7fe fcf1 	bl	800948a <USBD_LL_IsoINIncomplete>
}
 800aaa8:	bf00      	nop
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fe fd47 	bl	8009552 <USBD_LL_DevConnected>
}
 800aac4:	bf00      	nop
 800aac6:	3708      	adds	r7, #8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800aada:	4618      	mov	r0, r3
 800aadc:	f7fe fd44 	bl	8009568 <USBD_LL_DevDisconnected>
}
 800aae0:	bf00      	nop
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d13c      	bne.n	800ab72 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aaf8:	4a20      	ldr	r2, [pc, #128]	; (800ab7c <USBD_LL_Init+0x94>)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a1e      	ldr	r2, [pc, #120]	; (800ab7c <USBD_LL_Init+0x94>)
 800ab04:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ab08:	4b1c      	ldr	r3, [pc, #112]	; (800ab7c <USBD_LL_Init+0x94>)
 800ab0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ab0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ab10:	4b1a      	ldr	r3, [pc, #104]	; (800ab7c <USBD_LL_Init+0x94>)
 800ab12:	2204      	movs	r2, #4
 800ab14:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ab16:	4b19      	ldr	r3, [pc, #100]	; (800ab7c <USBD_LL_Init+0x94>)
 800ab18:	2202      	movs	r2, #2
 800ab1a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ab1c:	4b17      	ldr	r3, [pc, #92]	; (800ab7c <USBD_LL_Init+0x94>)
 800ab1e:	2200      	movs	r2, #0
 800ab20:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ab22:	4b16      	ldr	r3, [pc, #88]	; (800ab7c <USBD_LL_Init+0x94>)
 800ab24:	2202      	movs	r2, #2
 800ab26:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ab28:	4b14      	ldr	r3, [pc, #80]	; (800ab7c <USBD_LL_Init+0x94>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ab2e:	4b13      	ldr	r3, [pc, #76]	; (800ab7c <USBD_LL_Init+0x94>)
 800ab30:	2200      	movs	r2, #0
 800ab32:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ab34:	4b11      	ldr	r3, [pc, #68]	; (800ab7c <USBD_LL_Init+0x94>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ab3a:	4b10      	ldr	r3, [pc, #64]	; (800ab7c <USBD_LL_Init+0x94>)
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ab40:	4b0e      	ldr	r3, [pc, #56]	; (800ab7c <USBD_LL_Init+0x94>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ab46:	480d      	ldr	r0, [pc, #52]	; (800ab7c <USBD_LL_Init+0x94>)
 800ab48:	f7f8 ff3c 	bl	80039c4 <HAL_PCD_Init>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d001      	beq.n	800ab56 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ab52:	f7f6 fa15 	bl	8000f80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ab56:	2180      	movs	r1, #128	; 0x80
 800ab58:	4808      	ldr	r0, [pc, #32]	; (800ab7c <USBD_LL_Init+0x94>)
 800ab5a:	f7fa f966 	bl	8004e2a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ab5e:	2240      	movs	r2, #64	; 0x40
 800ab60:	2100      	movs	r1, #0
 800ab62:	4806      	ldr	r0, [pc, #24]	; (800ab7c <USBD_LL_Init+0x94>)
 800ab64:	f7fa f91a 	bl	8004d9c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ab68:	2280      	movs	r2, #128	; 0x80
 800ab6a:	2101      	movs	r1, #1
 800ab6c:	4803      	ldr	r0, [pc, #12]	; (800ab7c <USBD_LL_Init+0x94>)
 800ab6e:	f7fa f915 	bl	8004d9c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	20001948 	.word	0x20001948

0800ab80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7f9 f823 	bl	8003be2 <HAL_PCD_Start>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aba0:	7bfb      	ldrb	r3, [r7, #15]
 800aba2:	4618      	mov	r0, r3
 800aba4:	f000 f942 	bl	800ae2c <USBD_Get_USB_Status>
 800aba8:	4603      	mov	r3, r0
 800abaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abac:	7bbb      	ldrb	r3, [r7, #14]
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3710      	adds	r7, #16
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}

0800abb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b084      	sub	sp, #16
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
 800abbe:	4608      	mov	r0, r1
 800abc0:	4611      	mov	r1, r2
 800abc2:	461a      	mov	r2, r3
 800abc4:	4603      	mov	r3, r0
 800abc6:	70fb      	strb	r3, [r7, #3]
 800abc8:	460b      	mov	r3, r1
 800abca:	70bb      	strb	r3, [r7, #2]
 800abcc:	4613      	mov	r3, r2
 800abce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abd0:	2300      	movs	r3, #0
 800abd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800abde:	78bb      	ldrb	r3, [r7, #2]
 800abe0:	883a      	ldrh	r2, [r7, #0]
 800abe2:	78f9      	ldrb	r1, [r7, #3]
 800abe4:	f7f9 fcf7 	bl	80045d6 <HAL_PCD_EP_Open>
 800abe8:	4603      	mov	r3, r0
 800abea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abec:	7bfb      	ldrb	r3, [r7, #15]
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 f91c 	bl	800ae2c <USBD_Get_USB_Status>
 800abf4:	4603      	mov	r3, r0
 800abf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b084      	sub	sp, #16
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac12:	2300      	movs	r3, #0
 800ac14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac1c:	78fa      	ldrb	r2, [r7, #3]
 800ac1e:	4611      	mov	r1, r2
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7f9 fd40 	bl	80046a6 <HAL_PCD_EP_Close>
 800ac26:	4603      	mov	r3, r0
 800ac28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac2a:	7bfb      	ldrb	r3, [r7, #15]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 f8fd 	bl	800ae2c <USBD_Get_USB_Status>
 800ac32:	4603      	mov	r3, r0
 800ac34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac36:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	460b      	mov	r3, r1
 800ac4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac50:	2300      	movs	r3, #0
 800ac52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac5a:	78fa      	ldrb	r2, [r7, #3]
 800ac5c:	4611      	mov	r1, r2
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7f9 fdf8 	bl	8004854 <HAL_PCD_EP_SetStall>
 800ac64:	4603      	mov	r3, r0
 800ac66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac68:	7bfb      	ldrb	r3, [r7, #15]
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f000 f8de 	bl	800ae2c <USBD_Get_USB_Status>
 800ac70:	4603      	mov	r3, r0
 800ac72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b084      	sub	sp, #16
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	460b      	mov	r3, r1
 800ac88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac98:	78fa      	ldrb	r2, [r7, #3]
 800ac9a:	4611      	mov	r1, r2
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7f9 fe3c 	bl	800491a <HAL_PCD_EP_ClrStall>
 800aca2:	4603      	mov	r3, r0
 800aca4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aca6:	7bfb      	ldrb	r3, [r7, #15]
 800aca8:	4618      	mov	r0, r3
 800acaa:	f000 f8bf 	bl	800ae2c <USBD_Get_USB_Status>
 800acae:	4603      	mov	r3, r0
 800acb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	460b      	mov	r3, r1
 800acc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800acd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	da0b      	bge.n	800acf0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800acd8:	78fb      	ldrb	r3, [r7, #3]
 800acda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acde:	68f9      	ldr	r1, [r7, #12]
 800ace0:	4613      	mov	r3, r2
 800ace2:	00db      	lsls	r3, r3, #3
 800ace4:	4413      	add	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	440b      	add	r3, r1
 800acea:	3316      	adds	r3, #22
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	e00b      	b.n	800ad08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800acf0:	78fb      	ldrb	r3, [r7, #3]
 800acf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acf6:	68f9      	ldr	r1, [r7, #12]
 800acf8:	4613      	mov	r3, r2
 800acfa:	00db      	lsls	r3, r3, #3
 800acfc:	4413      	add	r3, r2
 800acfe:	009b      	lsls	r3, r3, #2
 800ad00:	440b      	add	r3, r1
 800ad02:	f203 2356 	addw	r3, r3, #598	; 0x256
 800ad06:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3714      	adds	r7, #20
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad20:	2300      	movs	r3, #0
 800ad22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad24:	2300      	movs	r3, #0
 800ad26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad2e:	78fa      	ldrb	r2, [r7, #3]
 800ad30:	4611      	mov	r1, r2
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7f9 fc2b 	bl	800458e <HAL_PCD_SetAddress>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad3c:	7bfb      	ldrb	r3, [r7, #15]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f000 f874 	bl	800ae2c <USBD_Get_USB_Status>
 800ad44:	4603      	mov	r3, r0
 800ad46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b086      	sub	sp, #24
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	60f8      	str	r0, [r7, #12]
 800ad5a:	607a      	str	r2, [r7, #4]
 800ad5c:	603b      	str	r3, [r7, #0]
 800ad5e:	460b      	mov	r3, r1
 800ad60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad62:	2300      	movs	r3, #0
 800ad64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad66:	2300      	movs	r3, #0
 800ad68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ad70:	7af9      	ldrb	r1, [r7, #11]
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	f7f9 fd33 	bl	80047e0 <HAL_PCD_EP_Transmit>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad7e:	7dfb      	ldrb	r3, [r7, #23]
 800ad80:	4618      	mov	r0, r3
 800ad82:	f000 f853 	bl	800ae2c <USBD_Get_USB_Status>
 800ad86:	4603      	mov	r3, r0
 800ad88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad8a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3718      	adds	r7, #24
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b086      	sub	sp, #24
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	607a      	str	r2, [r7, #4]
 800ad9e:	603b      	str	r3, [r7, #0]
 800ada0:	460b      	mov	r3, r1
 800ada2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ada4:	2300      	movs	r3, #0
 800ada6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ada8:	2300      	movs	r3, #0
 800adaa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800adb2:	7af9      	ldrb	r1, [r7, #11]
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	687a      	ldr	r2, [r7, #4]
 800adb8:	f7f9 fcbf 	bl	800473a <HAL_PCD_EP_Receive>
 800adbc:	4603      	mov	r3, r0
 800adbe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adc0:	7dfb      	ldrb	r3, [r7, #23]
 800adc2:	4618      	mov	r0, r3
 800adc4:	f000 f832 	bl	800ae2c <USBD_Get_USB_Status>
 800adc8:	4603      	mov	r3, r0
 800adca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adcc:	7dbb      	ldrb	r3, [r7, #22]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3718      	adds	r7, #24
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b082      	sub	sp, #8
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
 800adde:	460b      	mov	r3, r1
 800ade0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ade8:	78fa      	ldrb	r2, [r7, #3]
 800adea:	4611      	mov	r1, r2
 800adec:	4618      	mov	r0, r3
 800adee:	f7f9 fcdf 	bl	80047b0 <HAL_PCD_EP_GetRxCount>
 800adf2:	4603      	mov	r3, r0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3708      	adds	r7, #8
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae04:	4b03      	ldr	r3, [pc, #12]	; (800ae14 <USBD_static_malloc+0x18>)
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	370c      	adds	r7, #12
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	20001e2c 	.word	0x20001e2c

0800ae18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b083      	sub	sp, #12
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]

}
 800ae20:	bf00      	nop
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	4603      	mov	r3, r0
 800ae34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae36:	2300      	movs	r3, #0
 800ae38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae3a:	79fb      	ldrb	r3, [r7, #7]
 800ae3c:	2b03      	cmp	r3, #3
 800ae3e:	d817      	bhi.n	800ae70 <USBD_Get_USB_Status+0x44>
 800ae40:	a201      	add	r2, pc, #4	; (adr r2, 800ae48 <USBD_Get_USB_Status+0x1c>)
 800ae42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae46:	bf00      	nop
 800ae48:	0800ae59 	.word	0x0800ae59
 800ae4c:	0800ae5f 	.word	0x0800ae5f
 800ae50:	0800ae65 	.word	0x0800ae65
 800ae54:	0800ae6b 	.word	0x0800ae6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae5c:	e00b      	b.n	800ae76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae5e:	2303      	movs	r3, #3
 800ae60:	73fb      	strb	r3, [r7, #15]
    break;
 800ae62:	e008      	b.n	800ae76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae64:	2301      	movs	r3, #1
 800ae66:	73fb      	strb	r3, [r7, #15]
    break;
 800ae68:	e005      	b.n	800ae76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae6a:	2303      	movs	r3, #3
 800ae6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae6e:	e002      	b.n	800ae76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ae70:	2303      	movs	r3, #3
 800ae72:	73fb      	strb	r3, [r7, #15]
    break;
 800ae74:	bf00      	nop
  }
  return usb_status;
 800ae76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <sniprintf>:
 800ae84:	b40c      	push	{r2, r3}
 800ae86:	b530      	push	{r4, r5, lr}
 800ae88:	4b17      	ldr	r3, [pc, #92]	; (800aee8 <sniprintf+0x64>)
 800ae8a:	1e0c      	subs	r4, r1, #0
 800ae8c:	681d      	ldr	r5, [r3, #0]
 800ae8e:	b09d      	sub	sp, #116	; 0x74
 800ae90:	da08      	bge.n	800aea4 <sniprintf+0x20>
 800ae92:	238b      	movs	r3, #139	; 0x8b
 800ae94:	602b      	str	r3, [r5, #0]
 800ae96:	f04f 30ff 	mov.w	r0, #4294967295
 800ae9a:	b01d      	add	sp, #116	; 0x74
 800ae9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aea0:	b002      	add	sp, #8
 800aea2:	4770      	bx	lr
 800aea4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aea8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800aeac:	bf14      	ite	ne
 800aeae:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aeb2:	4623      	moveq	r3, r4
 800aeb4:	9304      	str	r3, [sp, #16]
 800aeb6:	9307      	str	r3, [sp, #28]
 800aeb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aebc:	9002      	str	r0, [sp, #8]
 800aebe:	9006      	str	r0, [sp, #24]
 800aec0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800aec4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aec6:	ab21      	add	r3, sp, #132	; 0x84
 800aec8:	a902      	add	r1, sp, #8
 800aeca:	4628      	mov	r0, r5
 800aecc:	9301      	str	r3, [sp, #4]
 800aece:	f000 f993 	bl	800b1f8 <_svfiprintf_r>
 800aed2:	1c43      	adds	r3, r0, #1
 800aed4:	bfbc      	itt	lt
 800aed6:	238b      	movlt	r3, #139	; 0x8b
 800aed8:	602b      	strlt	r3, [r5, #0]
 800aeda:	2c00      	cmp	r4, #0
 800aedc:	d0dd      	beq.n	800ae9a <sniprintf+0x16>
 800aede:	9b02      	ldr	r3, [sp, #8]
 800aee0:	2200      	movs	r2, #0
 800aee2:	701a      	strb	r2, [r3, #0]
 800aee4:	e7d9      	b.n	800ae9a <sniprintf+0x16>
 800aee6:	bf00      	nop
 800aee8:	2000014c 	.word	0x2000014c

0800aeec <memset>:
 800aeec:	4402      	add	r2, r0
 800aeee:	4603      	mov	r3, r0
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d100      	bne.n	800aef6 <memset+0xa>
 800aef4:	4770      	bx	lr
 800aef6:	f803 1b01 	strb.w	r1, [r3], #1
 800aefa:	e7f9      	b.n	800aef0 <memset+0x4>

0800aefc <__errno>:
 800aefc:	4b01      	ldr	r3, [pc, #4]	; (800af04 <__errno+0x8>)
 800aefe:	6818      	ldr	r0, [r3, #0]
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	2000014c 	.word	0x2000014c

0800af08 <__libc_init_array>:
 800af08:	b570      	push	{r4, r5, r6, lr}
 800af0a:	4d0d      	ldr	r5, [pc, #52]	; (800af40 <__libc_init_array+0x38>)
 800af0c:	4c0d      	ldr	r4, [pc, #52]	; (800af44 <__libc_init_array+0x3c>)
 800af0e:	1b64      	subs	r4, r4, r5
 800af10:	10a4      	asrs	r4, r4, #2
 800af12:	2600      	movs	r6, #0
 800af14:	42a6      	cmp	r6, r4
 800af16:	d109      	bne.n	800af2c <__libc_init_array+0x24>
 800af18:	4d0b      	ldr	r5, [pc, #44]	; (800af48 <__libc_init_array+0x40>)
 800af1a:	4c0c      	ldr	r4, [pc, #48]	; (800af4c <__libc_init_array+0x44>)
 800af1c:	f000 fc6a 	bl	800b7f4 <_init>
 800af20:	1b64      	subs	r4, r4, r5
 800af22:	10a4      	asrs	r4, r4, #2
 800af24:	2600      	movs	r6, #0
 800af26:	42a6      	cmp	r6, r4
 800af28:	d105      	bne.n	800af36 <__libc_init_array+0x2e>
 800af2a:	bd70      	pop	{r4, r5, r6, pc}
 800af2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800af30:	4798      	blx	r3
 800af32:	3601      	adds	r6, #1
 800af34:	e7ee      	b.n	800af14 <__libc_init_array+0xc>
 800af36:	f855 3b04 	ldr.w	r3, [r5], #4
 800af3a:	4798      	blx	r3
 800af3c:	3601      	adds	r6, #1
 800af3e:	e7f2      	b.n	800af26 <__libc_init_array+0x1e>
 800af40:	0800b91c 	.word	0x0800b91c
 800af44:	0800b91c 	.word	0x0800b91c
 800af48:	0800b91c 	.word	0x0800b91c
 800af4c:	0800b920 	.word	0x0800b920

0800af50 <__retarget_lock_acquire_recursive>:
 800af50:	4770      	bx	lr

0800af52 <__retarget_lock_release_recursive>:
 800af52:	4770      	bx	lr

0800af54 <_free_r>:
 800af54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af56:	2900      	cmp	r1, #0
 800af58:	d044      	beq.n	800afe4 <_free_r+0x90>
 800af5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af5e:	9001      	str	r0, [sp, #4]
 800af60:	2b00      	cmp	r3, #0
 800af62:	f1a1 0404 	sub.w	r4, r1, #4
 800af66:	bfb8      	it	lt
 800af68:	18e4      	addlt	r4, r4, r3
 800af6a:	f000 f8df 	bl	800b12c <__malloc_lock>
 800af6e:	4a1e      	ldr	r2, [pc, #120]	; (800afe8 <_free_r+0x94>)
 800af70:	9801      	ldr	r0, [sp, #4]
 800af72:	6813      	ldr	r3, [r2, #0]
 800af74:	b933      	cbnz	r3, 800af84 <_free_r+0x30>
 800af76:	6063      	str	r3, [r4, #4]
 800af78:	6014      	str	r4, [r2, #0]
 800af7a:	b003      	add	sp, #12
 800af7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af80:	f000 b8da 	b.w	800b138 <__malloc_unlock>
 800af84:	42a3      	cmp	r3, r4
 800af86:	d908      	bls.n	800af9a <_free_r+0x46>
 800af88:	6825      	ldr	r5, [r4, #0]
 800af8a:	1961      	adds	r1, r4, r5
 800af8c:	428b      	cmp	r3, r1
 800af8e:	bf01      	itttt	eq
 800af90:	6819      	ldreq	r1, [r3, #0]
 800af92:	685b      	ldreq	r3, [r3, #4]
 800af94:	1949      	addeq	r1, r1, r5
 800af96:	6021      	streq	r1, [r4, #0]
 800af98:	e7ed      	b.n	800af76 <_free_r+0x22>
 800af9a:	461a      	mov	r2, r3
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	b10b      	cbz	r3, 800afa4 <_free_r+0x50>
 800afa0:	42a3      	cmp	r3, r4
 800afa2:	d9fa      	bls.n	800af9a <_free_r+0x46>
 800afa4:	6811      	ldr	r1, [r2, #0]
 800afa6:	1855      	adds	r5, r2, r1
 800afa8:	42a5      	cmp	r5, r4
 800afaa:	d10b      	bne.n	800afc4 <_free_r+0x70>
 800afac:	6824      	ldr	r4, [r4, #0]
 800afae:	4421      	add	r1, r4
 800afb0:	1854      	adds	r4, r2, r1
 800afb2:	42a3      	cmp	r3, r4
 800afb4:	6011      	str	r1, [r2, #0]
 800afb6:	d1e0      	bne.n	800af7a <_free_r+0x26>
 800afb8:	681c      	ldr	r4, [r3, #0]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	6053      	str	r3, [r2, #4]
 800afbe:	440c      	add	r4, r1
 800afc0:	6014      	str	r4, [r2, #0]
 800afc2:	e7da      	b.n	800af7a <_free_r+0x26>
 800afc4:	d902      	bls.n	800afcc <_free_r+0x78>
 800afc6:	230c      	movs	r3, #12
 800afc8:	6003      	str	r3, [r0, #0]
 800afca:	e7d6      	b.n	800af7a <_free_r+0x26>
 800afcc:	6825      	ldr	r5, [r4, #0]
 800afce:	1961      	adds	r1, r4, r5
 800afd0:	428b      	cmp	r3, r1
 800afd2:	bf04      	itt	eq
 800afd4:	6819      	ldreq	r1, [r3, #0]
 800afd6:	685b      	ldreq	r3, [r3, #4]
 800afd8:	6063      	str	r3, [r4, #4]
 800afda:	bf04      	itt	eq
 800afdc:	1949      	addeq	r1, r1, r5
 800afde:	6021      	streq	r1, [r4, #0]
 800afe0:	6054      	str	r4, [r2, #4]
 800afe2:	e7ca      	b.n	800af7a <_free_r+0x26>
 800afe4:	b003      	add	sp, #12
 800afe6:	bd30      	pop	{r4, r5, pc}
 800afe8:	2000218c 	.word	0x2000218c

0800afec <sbrk_aligned>:
 800afec:	b570      	push	{r4, r5, r6, lr}
 800afee:	4e0e      	ldr	r6, [pc, #56]	; (800b028 <sbrk_aligned+0x3c>)
 800aff0:	460c      	mov	r4, r1
 800aff2:	6831      	ldr	r1, [r6, #0]
 800aff4:	4605      	mov	r5, r0
 800aff6:	b911      	cbnz	r1, 800affe <sbrk_aligned+0x12>
 800aff8:	f000 fba6 	bl	800b748 <_sbrk_r>
 800affc:	6030      	str	r0, [r6, #0]
 800affe:	4621      	mov	r1, r4
 800b000:	4628      	mov	r0, r5
 800b002:	f000 fba1 	bl	800b748 <_sbrk_r>
 800b006:	1c43      	adds	r3, r0, #1
 800b008:	d00a      	beq.n	800b020 <sbrk_aligned+0x34>
 800b00a:	1cc4      	adds	r4, r0, #3
 800b00c:	f024 0403 	bic.w	r4, r4, #3
 800b010:	42a0      	cmp	r0, r4
 800b012:	d007      	beq.n	800b024 <sbrk_aligned+0x38>
 800b014:	1a21      	subs	r1, r4, r0
 800b016:	4628      	mov	r0, r5
 800b018:	f000 fb96 	bl	800b748 <_sbrk_r>
 800b01c:	3001      	adds	r0, #1
 800b01e:	d101      	bne.n	800b024 <sbrk_aligned+0x38>
 800b020:	f04f 34ff 	mov.w	r4, #4294967295
 800b024:	4620      	mov	r0, r4
 800b026:	bd70      	pop	{r4, r5, r6, pc}
 800b028:	20002190 	.word	0x20002190

0800b02c <_malloc_r>:
 800b02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b030:	1ccd      	adds	r5, r1, #3
 800b032:	f025 0503 	bic.w	r5, r5, #3
 800b036:	3508      	adds	r5, #8
 800b038:	2d0c      	cmp	r5, #12
 800b03a:	bf38      	it	cc
 800b03c:	250c      	movcc	r5, #12
 800b03e:	2d00      	cmp	r5, #0
 800b040:	4607      	mov	r7, r0
 800b042:	db01      	blt.n	800b048 <_malloc_r+0x1c>
 800b044:	42a9      	cmp	r1, r5
 800b046:	d905      	bls.n	800b054 <_malloc_r+0x28>
 800b048:	230c      	movs	r3, #12
 800b04a:	603b      	str	r3, [r7, #0]
 800b04c:	2600      	movs	r6, #0
 800b04e:	4630      	mov	r0, r6
 800b050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b054:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b128 <_malloc_r+0xfc>
 800b058:	f000 f868 	bl	800b12c <__malloc_lock>
 800b05c:	f8d8 3000 	ldr.w	r3, [r8]
 800b060:	461c      	mov	r4, r3
 800b062:	bb5c      	cbnz	r4, 800b0bc <_malloc_r+0x90>
 800b064:	4629      	mov	r1, r5
 800b066:	4638      	mov	r0, r7
 800b068:	f7ff ffc0 	bl	800afec <sbrk_aligned>
 800b06c:	1c43      	adds	r3, r0, #1
 800b06e:	4604      	mov	r4, r0
 800b070:	d155      	bne.n	800b11e <_malloc_r+0xf2>
 800b072:	f8d8 4000 	ldr.w	r4, [r8]
 800b076:	4626      	mov	r6, r4
 800b078:	2e00      	cmp	r6, #0
 800b07a:	d145      	bne.n	800b108 <_malloc_r+0xdc>
 800b07c:	2c00      	cmp	r4, #0
 800b07e:	d048      	beq.n	800b112 <_malloc_r+0xe6>
 800b080:	6823      	ldr	r3, [r4, #0]
 800b082:	4631      	mov	r1, r6
 800b084:	4638      	mov	r0, r7
 800b086:	eb04 0903 	add.w	r9, r4, r3
 800b08a:	f000 fb5d 	bl	800b748 <_sbrk_r>
 800b08e:	4581      	cmp	r9, r0
 800b090:	d13f      	bne.n	800b112 <_malloc_r+0xe6>
 800b092:	6821      	ldr	r1, [r4, #0]
 800b094:	1a6d      	subs	r5, r5, r1
 800b096:	4629      	mov	r1, r5
 800b098:	4638      	mov	r0, r7
 800b09a:	f7ff ffa7 	bl	800afec <sbrk_aligned>
 800b09e:	3001      	adds	r0, #1
 800b0a0:	d037      	beq.n	800b112 <_malloc_r+0xe6>
 800b0a2:	6823      	ldr	r3, [r4, #0]
 800b0a4:	442b      	add	r3, r5
 800b0a6:	6023      	str	r3, [r4, #0]
 800b0a8:	f8d8 3000 	ldr.w	r3, [r8]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d038      	beq.n	800b122 <_malloc_r+0xf6>
 800b0b0:	685a      	ldr	r2, [r3, #4]
 800b0b2:	42a2      	cmp	r2, r4
 800b0b4:	d12b      	bne.n	800b10e <_malloc_r+0xe2>
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	605a      	str	r2, [r3, #4]
 800b0ba:	e00f      	b.n	800b0dc <_malloc_r+0xb0>
 800b0bc:	6822      	ldr	r2, [r4, #0]
 800b0be:	1b52      	subs	r2, r2, r5
 800b0c0:	d41f      	bmi.n	800b102 <_malloc_r+0xd6>
 800b0c2:	2a0b      	cmp	r2, #11
 800b0c4:	d917      	bls.n	800b0f6 <_malloc_r+0xca>
 800b0c6:	1961      	adds	r1, r4, r5
 800b0c8:	42a3      	cmp	r3, r4
 800b0ca:	6025      	str	r5, [r4, #0]
 800b0cc:	bf18      	it	ne
 800b0ce:	6059      	strne	r1, [r3, #4]
 800b0d0:	6863      	ldr	r3, [r4, #4]
 800b0d2:	bf08      	it	eq
 800b0d4:	f8c8 1000 	streq.w	r1, [r8]
 800b0d8:	5162      	str	r2, [r4, r5]
 800b0da:	604b      	str	r3, [r1, #4]
 800b0dc:	4638      	mov	r0, r7
 800b0de:	f104 060b 	add.w	r6, r4, #11
 800b0e2:	f000 f829 	bl	800b138 <__malloc_unlock>
 800b0e6:	f026 0607 	bic.w	r6, r6, #7
 800b0ea:	1d23      	adds	r3, r4, #4
 800b0ec:	1af2      	subs	r2, r6, r3
 800b0ee:	d0ae      	beq.n	800b04e <_malloc_r+0x22>
 800b0f0:	1b9b      	subs	r3, r3, r6
 800b0f2:	50a3      	str	r3, [r4, r2]
 800b0f4:	e7ab      	b.n	800b04e <_malloc_r+0x22>
 800b0f6:	42a3      	cmp	r3, r4
 800b0f8:	6862      	ldr	r2, [r4, #4]
 800b0fa:	d1dd      	bne.n	800b0b8 <_malloc_r+0x8c>
 800b0fc:	f8c8 2000 	str.w	r2, [r8]
 800b100:	e7ec      	b.n	800b0dc <_malloc_r+0xb0>
 800b102:	4623      	mov	r3, r4
 800b104:	6864      	ldr	r4, [r4, #4]
 800b106:	e7ac      	b.n	800b062 <_malloc_r+0x36>
 800b108:	4634      	mov	r4, r6
 800b10a:	6876      	ldr	r6, [r6, #4]
 800b10c:	e7b4      	b.n	800b078 <_malloc_r+0x4c>
 800b10e:	4613      	mov	r3, r2
 800b110:	e7cc      	b.n	800b0ac <_malloc_r+0x80>
 800b112:	230c      	movs	r3, #12
 800b114:	603b      	str	r3, [r7, #0]
 800b116:	4638      	mov	r0, r7
 800b118:	f000 f80e 	bl	800b138 <__malloc_unlock>
 800b11c:	e797      	b.n	800b04e <_malloc_r+0x22>
 800b11e:	6025      	str	r5, [r4, #0]
 800b120:	e7dc      	b.n	800b0dc <_malloc_r+0xb0>
 800b122:	605b      	str	r3, [r3, #4]
 800b124:	deff      	udf	#255	; 0xff
 800b126:	bf00      	nop
 800b128:	2000218c 	.word	0x2000218c

0800b12c <__malloc_lock>:
 800b12c:	4801      	ldr	r0, [pc, #4]	; (800b134 <__malloc_lock+0x8>)
 800b12e:	f7ff bf0f 	b.w	800af50 <__retarget_lock_acquire_recursive>
 800b132:	bf00      	nop
 800b134:	20002188 	.word	0x20002188

0800b138 <__malloc_unlock>:
 800b138:	4801      	ldr	r0, [pc, #4]	; (800b140 <__malloc_unlock+0x8>)
 800b13a:	f7ff bf0a 	b.w	800af52 <__retarget_lock_release_recursive>
 800b13e:	bf00      	nop
 800b140:	20002188 	.word	0x20002188

0800b144 <__ssputs_r>:
 800b144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b148:	688e      	ldr	r6, [r1, #8]
 800b14a:	461f      	mov	r7, r3
 800b14c:	42be      	cmp	r6, r7
 800b14e:	680b      	ldr	r3, [r1, #0]
 800b150:	4682      	mov	sl, r0
 800b152:	460c      	mov	r4, r1
 800b154:	4690      	mov	r8, r2
 800b156:	d82c      	bhi.n	800b1b2 <__ssputs_r+0x6e>
 800b158:	898a      	ldrh	r2, [r1, #12]
 800b15a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b15e:	d026      	beq.n	800b1ae <__ssputs_r+0x6a>
 800b160:	6965      	ldr	r5, [r4, #20]
 800b162:	6909      	ldr	r1, [r1, #16]
 800b164:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b168:	eba3 0901 	sub.w	r9, r3, r1
 800b16c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b170:	1c7b      	adds	r3, r7, #1
 800b172:	444b      	add	r3, r9
 800b174:	106d      	asrs	r5, r5, #1
 800b176:	429d      	cmp	r5, r3
 800b178:	bf38      	it	cc
 800b17a:	461d      	movcc	r5, r3
 800b17c:	0553      	lsls	r3, r2, #21
 800b17e:	d527      	bpl.n	800b1d0 <__ssputs_r+0x8c>
 800b180:	4629      	mov	r1, r5
 800b182:	f7ff ff53 	bl	800b02c <_malloc_r>
 800b186:	4606      	mov	r6, r0
 800b188:	b360      	cbz	r0, 800b1e4 <__ssputs_r+0xa0>
 800b18a:	6921      	ldr	r1, [r4, #16]
 800b18c:	464a      	mov	r2, r9
 800b18e:	f000 faeb 	bl	800b768 <memcpy>
 800b192:	89a3      	ldrh	r3, [r4, #12]
 800b194:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b19c:	81a3      	strh	r3, [r4, #12]
 800b19e:	6126      	str	r6, [r4, #16]
 800b1a0:	6165      	str	r5, [r4, #20]
 800b1a2:	444e      	add	r6, r9
 800b1a4:	eba5 0509 	sub.w	r5, r5, r9
 800b1a8:	6026      	str	r6, [r4, #0]
 800b1aa:	60a5      	str	r5, [r4, #8]
 800b1ac:	463e      	mov	r6, r7
 800b1ae:	42be      	cmp	r6, r7
 800b1b0:	d900      	bls.n	800b1b4 <__ssputs_r+0x70>
 800b1b2:	463e      	mov	r6, r7
 800b1b4:	6820      	ldr	r0, [r4, #0]
 800b1b6:	4632      	mov	r2, r6
 800b1b8:	4641      	mov	r1, r8
 800b1ba:	f000 faab 	bl	800b714 <memmove>
 800b1be:	68a3      	ldr	r3, [r4, #8]
 800b1c0:	1b9b      	subs	r3, r3, r6
 800b1c2:	60a3      	str	r3, [r4, #8]
 800b1c4:	6823      	ldr	r3, [r4, #0]
 800b1c6:	4433      	add	r3, r6
 800b1c8:	6023      	str	r3, [r4, #0]
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1d0:	462a      	mov	r2, r5
 800b1d2:	f000 fad7 	bl	800b784 <_realloc_r>
 800b1d6:	4606      	mov	r6, r0
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	d1e0      	bne.n	800b19e <__ssputs_r+0x5a>
 800b1dc:	6921      	ldr	r1, [r4, #16]
 800b1de:	4650      	mov	r0, sl
 800b1e0:	f7ff feb8 	bl	800af54 <_free_r>
 800b1e4:	230c      	movs	r3, #12
 800b1e6:	f8ca 3000 	str.w	r3, [sl]
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1f0:	81a3      	strh	r3, [r4, #12]
 800b1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f6:	e7e9      	b.n	800b1cc <__ssputs_r+0x88>

0800b1f8 <_svfiprintf_r>:
 800b1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fc:	4698      	mov	r8, r3
 800b1fe:	898b      	ldrh	r3, [r1, #12]
 800b200:	061b      	lsls	r3, r3, #24
 800b202:	b09d      	sub	sp, #116	; 0x74
 800b204:	4607      	mov	r7, r0
 800b206:	460d      	mov	r5, r1
 800b208:	4614      	mov	r4, r2
 800b20a:	d50e      	bpl.n	800b22a <_svfiprintf_r+0x32>
 800b20c:	690b      	ldr	r3, [r1, #16]
 800b20e:	b963      	cbnz	r3, 800b22a <_svfiprintf_r+0x32>
 800b210:	2140      	movs	r1, #64	; 0x40
 800b212:	f7ff ff0b 	bl	800b02c <_malloc_r>
 800b216:	6028      	str	r0, [r5, #0]
 800b218:	6128      	str	r0, [r5, #16]
 800b21a:	b920      	cbnz	r0, 800b226 <_svfiprintf_r+0x2e>
 800b21c:	230c      	movs	r3, #12
 800b21e:	603b      	str	r3, [r7, #0]
 800b220:	f04f 30ff 	mov.w	r0, #4294967295
 800b224:	e0d0      	b.n	800b3c8 <_svfiprintf_r+0x1d0>
 800b226:	2340      	movs	r3, #64	; 0x40
 800b228:	616b      	str	r3, [r5, #20]
 800b22a:	2300      	movs	r3, #0
 800b22c:	9309      	str	r3, [sp, #36]	; 0x24
 800b22e:	2320      	movs	r3, #32
 800b230:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b234:	f8cd 800c 	str.w	r8, [sp, #12]
 800b238:	2330      	movs	r3, #48	; 0x30
 800b23a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b3e0 <_svfiprintf_r+0x1e8>
 800b23e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b242:	f04f 0901 	mov.w	r9, #1
 800b246:	4623      	mov	r3, r4
 800b248:	469a      	mov	sl, r3
 800b24a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b24e:	b10a      	cbz	r2, 800b254 <_svfiprintf_r+0x5c>
 800b250:	2a25      	cmp	r2, #37	; 0x25
 800b252:	d1f9      	bne.n	800b248 <_svfiprintf_r+0x50>
 800b254:	ebba 0b04 	subs.w	fp, sl, r4
 800b258:	d00b      	beq.n	800b272 <_svfiprintf_r+0x7a>
 800b25a:	465b      	mov	r3, fp
 800b25c:	4622      	mov	r2, r4
 800b25e:	4629      	mov	r1, r5
 800b260:	4638      	mov	r0, r7
 800b262:	f7ff ff6f 	bl	800b144 <__ssputs_r>
 800b266:	3001      	adds	r0, #1
 800b268:	f000 80a9 	beq.w	800b3be <_svfiprintf_r+0x1c6>
 800b26c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b26e:	445a      	add	r2, fp
 800b270:	9209      	str	r2, [sp, #36]	; 0x24
 800b272:	f89a 3000 	ldrb.w	r3, [sl]
 800b276:	2b00      	cmp	r3, #0
 800b278:	f000 80a1 	beq.w	800b3be <_svfiprintf_r+0x1c6>
 800b27c:	2300      	movs	r3, #0
 800b27e:	f04f 32ff 	mov.w	r2, #4294967295
 800b282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b286:	f10a 0a01 	add.w	sl, sl, #1
 800b28a:	9304      	str	r3, [sp, #16]
 800b28c:	9307      	str	r3, [sp, #28]
 800b28e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b292:	931a      	str	r3, [sp, #104]	; 0x68
 800b294:	4654      	mov	r4, sl
 800b296:	2205      	movs	r2, #5
 800b298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b29c:	4850      	ldr	r0, [pc, #320]	; (800b3e0 <_svfiprintf_r+0x1e8>)
 800b29e:	f7f4 ff9f 	bl	80001e0 <memchr>
 800b2a2:	9a04      	ldr	r2, [sp, #16]
 800b2a4:	b9d8      	cbnz	r0, 800b2de <_svfiprintf_r+0xe6>
 800b2a6:	06d0      	lsls	r0, r2, #27
 800b2a8:	bf44      	itt	mi
 800b2aa:	2320      	movmi	r3, #32
 800b2ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2b0:	0711      	lsls	r1, r2, #28
 800b2b2:	bf44      	itt	mi
 800b2b4:	232b      	movmi	r3, #43	; 0x2b
 800b2b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b2be:	2b2a      	cmp	r3, #42	; 0x2a
 800b2c0:	d015      	beq.n	800b2ee <_svfiprintf_r+0xf6>
 800b2c2:	9a07      	ldr	r2, [sp, #28]
 800b2c4:	4654      	mov	r4, sl
 800b2c6:	2000      	movs	r0, #0
 800b2c8:	f04f 0c0a 	mov.w	ip, #10
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2d2:	3b30      	subs	r3, #48	; 0x30
 800b2d4:	2b09      	cmp	r3, #9
 800b2d6:	d94d      	bls.n	800b374 <_svfiprintf_r+0x17c>
 800b2d8:	b1b0      	cbz	r0, 800b308 <_svfiprintf_r+0x110>
 800b2da:	9207      	str	r2, [sp, #28]
 800b2dc:	e014      	b.n	800b308 <_svfiprintf_r+0x110>
 800b2de:	eba0 0308 	sub.w	r3, r0, r8
 800b2e2:	fa09 f303 	lsl.w	r3, r9, r3
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	9304      	str	r3, [sp, #16]
 800b2ea:	46a2      	mov	sl, r4
 800b2ec:	e7d2      	b.n	800b294 <_svfiprintf_r+0x9c>
 800b2ee:	9b03      	ldr	r3, [sp, #12]
 800b2f0:	1d19      	adds	r1, r3, #4
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	9103      	str	r1, [sp, #12]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	bfbb      	ittet	lt
 800b2fa:	425b      	neglt	r3, r3
 800b2fc:	f042 0202 	orrlt.w	r2, r2, #2
 800b300:	9307      	strge	r3, [sp, #28]
 800b302:	9307      	strlt	r3, [sp, #28]
 800b304:	bfb8      	it	lt
 800b306:	9204      	strlt	r2, [sp, #16]
 800b308:	7823      	ldrb	r3, [r4, #0]
 800b30a:	2b2e      	cmp	r3, #46	; 0x2e
 800b30c:	d10c      	bne.n	800b328 <_svfiprintf_r+0x130>
 800b30e:	7863      	ldrb	r3, [r4, #1]
 800b310:	2b2a      	cmp	r3, #42	; 0x2a
 800b312:	d134      	bne.n	800b37e <_svfiprintf_r+0x186>
 800b314:	9b03      	ldr	r3, [sp, #12]
 800b316:	1d1a      	adds	r2, r3, #4
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	9203      	str	r2, [sp, #12]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	bfb8      	it	lt
 800b320:	f04f 33ff 	movlt.w	r3, #4294967295
 800b324:	3402      	adds	r4, #2
 800b326:	9305      	str	r3, [sp, #20]
 800b328:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b3f0 <_svfiprintf_r+0x1f8>
 800b32c:	7821      	ldrb	r1, [r4, #0]
 800b32e:	2203      	movs	r2, #3
 800b330:	4650      	mov	r0, sl
 800b332:	f7f4 ff55 	bl	80001e0 <memchr>
 800b336:	b138      	cbz	r0, 800b348 <_svfiprintf_r+0x150>
 800b338:	9b04      	ldr	r3, [sp, #16]
 800b33a:	eba0 000a 	sub.w	r0, r0, sl
 800b33e:	2240      	movs	r2, #64	; 0x40
 800b340:	4082      	lsls	r2, r0
 800b342:	4313      	orrs	r3, r2
 800b344:	3401      	adds	r4, #1
 800b346:	9304      	str	r3, [sp, #16]
 800b348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b34c:	4825      	ldr	r0, [pc, #148]	; (800b3e4 <_svfiprintf_r+0x1ec>)
 800b34e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b352:	2206      	movs	r2, #6
 800b354:	f7f4 ff44 	bl	80001e0 <memchr>
 800b358:	2800      	cmp	r0, #0
 800b35a:	d038      	beq.n	800b3ce <_svfiprintf_r+0x1d6>
 800b35c:	4b22      	ldr	r3, [pc, #136]	; (800b3e8 <_svfiprintf_r+0x1f0>)
 800b35e:	bb1b      	cbnz	r3, 800b3a8 <_svfiprintf_r+0x1b0>
 800b360:	9b03      	ldr	r3, [sp, #12]
 800b362:	3307      	adds	r3, #7
 800b364:	f023 0307 	bic.w	r3, r3, #7
 800b368:	3308      	adds	r3, #8
 800b36a:	9303      	str	r3, [sp, #12]
 800b36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b36e:	4433      	add	r3, r6
 800b370:	9309      	str	r3, [sp, #36]	; 0x24
 800b372:	e768      	b.n	800b246 <_svfiprintf_r+0x4e>
 800b374:	fb0c 3202 	mla	r2, ip, r2, r3
 800b378:	460c      	mov	r4, r1
 800b37a:	2001      	movs	r0, #1
 800b37c:	e7a6      	b.n	800b2cc <_svfiprintf_r+0xd4>
 800b37e:	2300      	movs	r3, #0
 800b380:	3401      	adds	r4, #1
 800b382:	9305      	str	r3, [sp, #20]
 800b384:	4619      	mov	r1, r3
 800b386:	f04f 0c0a 	mov.w	ip, #10
 800b38a:	4620      	mov	r0, r4
 800b38c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b390:	3a30      	subs	r2, #48	; 0x30
 800b392:	2a09      	cmp	r2, #9
 800b394:	d903      	bls.n	800b39e <_svfiprintf_r+0x1a6>
 800b396:	2b00      	cmp	r3, #0
 800b398:	d0c6      	beq.n	800b328 <_svfiprintf_r+0x130>
 800b39a:	9105      	str	r1, [sp, #20]
 800b39c:	e7c4      	b.n	800b328 <_svfiprintf_r+0x130>
 800b39e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e7f0      	b.n	800b38a <_svfiprintf_r+0x192>
 800b3a8:	ab03      	add	r3, sp, #12
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	462a      	mov	r2, r5
 800b3ae:	4b0f      	ldr	r3, [pc, #60]	; (800b3ec <_svfiprintf_r+0x1f4>)
 800b3b0:	a904      	add	r1, sp, #16
 800b3b2:	4638      	mov	r0, r7
 800b3b4:	f3af 8000 	nop.w
 800b3b8:	1c42      	adds	r2, r0, #1
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	d1d6      	bne.n	800b36c <_svfiprintf_r+0x174>
 800b3be:	89ab      	ldrh	r3, [r5, #12]
 800b3c0:	065b      	lsls	r3, r3, #25
 800b3c2:	f53f af2d 	bmi.w	800b220 <_svfiprintf_r+0x28>
 800b3c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3c8:	b01d      	add	sp, #116	; 0x74
 800b3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ce:	ab03      	add	r3, sp, #12
 800b3d0:	9300      	str	r3, [sp, #0]
 800b3d2:	462a      	mov	r2, r5
 800b3d4:	4b05      	ldr	r3, [pc, #20]	; (800b3ec <_svfiprintf_r+0x1f4>)
 800b3d6:	a904      	add	r1, sp, #16
 800b3d8:	4638      	mov	r0, r7
 800b3da:	f000 f879 	bl	800b4d0 <_printf_i>
 800b3de:	e7eb      	b.n	800b3b8 <_svfiprintf_r+0x1c0>
 800b3e0:	0800b8e0 	.word	0x0800b8e0
 800b3e4:	0800b8ea 	.word	0x0800b8ea
 800b3e8:	00000000 	.word	0x00000000
 800b3ec:	0800b145 	.word	0x0800b145
 800b3f0:	0800b8e6 	.word	0x0800b8e6

0800b3f4 <_printf_common>:
 800b3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3f8:	4616      	mov	r6, r2
 800b3fa:	4699      	mov	r9, r3
 800b3fc:	688a      	ldr	r2, [r1, #8]
 800b3fe:	690b      	ldr	r3, [r1, #16]
 800b400:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b404:	4293      	cmp	r3, r2
 800b406:	bfb8      	it	lt
 800b408:	4613      	movlt	r3, r2
 800b40a:	6033      	str	r3, [r6, #0]
 800b40c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b410:	4607      	mov	r7, r0
 800b412:	460c      	mov	r4, r1
 800b414:	b10a      	cbz	r2, 800b41a <_printf_common+0x26>
 800b416:	3301      	adds	r3, #1
 800b418:	6033      	str	r3, [r6, #0]
 800b41a:	6823      	ldr	r3, [r4, #0]
 800b41c:	0699      	lsls	r1, r3, #26
 800b41e:	bf42      	ittt	mi
 800b420:	6833      	ldrmi	r3, [r6, #0]
 800b422:	3302      	addmi	r3, #2
 800b424:	6033      	strmi	r3, [r6, #0]
 800b426:	6825      	ldr	r5, [r4, #0]
 800b428:	f015 0506 	ands.w	r5, r5, #6
 800b42c:	d106      	bne.n	800b43c <_printf_common+0x48>
 800b42e:	f104 0a19 	add.w	sl, r4, #25
 800b432:	68e3      	ldr	r3, [r4, #12]
 800b434:	6832      	ldr	r2, [r6, #0]
 800b436:	1a9b      	subs	r3, r3, r2
 800b438:	42ab      	cmp	r3, r5
 800b43a:	dc26      	bgt.n	800b48a <_printf_common+0x96>
 800b43c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b440:	1e13      	subs	r3, r2, #0
 800b442:	6822      	ldr	r2, [r4, #0]
 800b444:	bf18      	it	ne
 800b446:	2301      	movne	r3, #1
 800b448:	0692      	lsls	r2, r2, #26
 800b44a:	d42b      	bmi.n	800b4a4 <_printf_common+0xb0>
 800b44c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b450:	4649      	mov	r1, r9
 800b452:	4638      	mov	r0, r7
 800b454:	47c0      	blx	r8
 800b456:	3001      	adds	r0, #1
 800b458:	d01e      	beq.n	800b498 <_printf_common+0xa4>
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	6922      	ldr	r2, [r4, #16]
 800b45e:	f003 0306 	and.w	r3, r3, #6
 800b462:	2b04      	cmp	r3, #4
 800b464:	bf02      	ittt	eq
 800b466:	68e5      	ldreq	r5, [r4, #12]
 800b468:	6833      	ldreq	r3, [r6, #0]
 800b46a:	1aed      	subeq	r5, r5, r3
 800b46c:	68a3      	ldr	r3, [r4, #8]
 800b46e:	bf0c      	ite	eq
 800b470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b474:	2500      	movne	r5, #0
 800b476:	4293      	cmp	r3, r2
 800b478:	bfc4      	itt	gt
 800b47a:	1a9b      	subgt	r3, r3, r2
 800b47c:	18ed      	addgt	r5, r5, r3
 800b47e:	2600      	movs	r6, #0
 800b480:	341a      	adds	r4, #26
 800b482:	42b5      	cmp	r5, r6
 800b484:	d11a      	bne.n	800b4bc <_printf_common+0xc8>
 800b486:	2000      	movs	r0, #0
 800b488:	e008      	b.n	800b49c <_printf_common+0xa8>
 800b48a:	2301      	movs	r3, #1
 800b48c:	4652      	mov	r2, sl
 800b48e:	4649      	mov	r1, r9
 800b490:	4638      	mov	r0, r7
 800b492:	47c0      	blx	r8
 800b494:	3001      	adds	r0, #1
 800b496:	d103      	bne.n	800b4a0 <_printf_common+0xac>
 800b498:	f04f 30ff 	mov.w	r0, #4294967295
 800b49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a0:	3501      	adds	r5, #1
 800b4a2:	e7c6      	b.n	800b432 <_printf_common+0x3e>
 800b4a4:	18e1      	adds	r1, r4, r3
 800b4a6:	1c5a      	adds	r2, r3, #1
 800b4a8:	2030      	movs	r0, #48	; 0x30
 800b4aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4ae:	4422      	add	r2, r4
 800b4b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4b8:	3302      	adds	r3, #2
 800b4ba:	e7c7      	b.n	800b44c <_printf_common+0x58>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	4622      	mov	r2, r4
 800b4c0:	4649      	mov	r1, r9
 800b4c2:	4638      	mov	r0, r7
 800b4c4:	47c0      	blx	r8
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	d0e6      	beq.n	800b498 <_printf_common+0xa4>
 800b4ca:	3601      	adds	r6, #1
 800b4cc:	e7d9      	b.n	800b482 <_printf_common+0x8e>
	...

0800b4d0 <_printf_i>:
 800b4d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d4:	7e0f      	ldrb	r7, [r1, #24]
 800b4d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4d8:	2f78      	cmp	r7, #120	; 0x78
 800b4da:	4691      	mov	r9, r2
 800b4dc:	4680      	mov	r8, r0
 800b4de:	460c      	mov	r4, r1
 800b4e0:	469a      	mov	sl, r3
 800b4e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4e6:	d807      	bhi.n	800b4f8 <_printf_i+0x28>
 800b4e8:	2f62      	cmp	r7, #98	; 0x62
 800b4ea:	d80a      	bhi.n	800b502 <_printf_i+0x32>
 800b4ec:	2f00      	cmp	r7, #0
 800b4ee:	f000 80d4 	beq.w	800b69a <_printf_i+0x1ca>
 800b4f2:	2f58      	cmp	r7, #88	; 0x58
 800b4f4:	f000 80c0 	beq.w	800b678 <_printf_i+0x1a8>
 800b4f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b500:	e03a      	b.n	800b578 <_printf_i+0xa8>
 800b502:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b506:	2b15      	cmp	r3, #21
 800b508:	d8f6      	bhi.n	800b4f8 <_printf_i+0x28>
 800b50a:	a101      	add	r1, pc, #4	; (adr r1, 800b510 <_printf_i+0x40>)
 800b50c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b510:	0800b569 	.word	0x0800b569
 800b514:	0800b57d 	.word	0x0800b57d
 800b518:	0800b4f9 	.word	0x0800b4f9
 800b51c:	0800b4f9 	.word	0x0800b4f9
 800b520:	0800b4f9 	.word	0x0800b4f9
 800b524:	0800b4f9 	.word	0x0800b4f9
 800b528:	0800b57d 	.word	0x0800b57d
 800b52c:	0800b4f9 	.word	0x0800b4f9
 800b530:	0800b4f9 	.word	0x0800b4f9
 800b534:	0800b4f9 	.word	0x0800b4f9
 800b538:	0800b4f9 	.word	0x0800b4f9
 800b53c:	0800b681 	.word	0x0800b681
 800b540:	0800b5a9 	.word	0x0800b5a9
 800b544:	0800b63b 	.word	0x0800b63b
 800b548:	0800b4f9 	.word	0x0800b4f9
 800b54c:	0800b4f9 	.word	0x0800b4f9
 800b550:	0800b6a3 	.word	0x0800b6a3
 800b554:	0800b4f9 	.word	0x0800b4f9
 800b558:	0800b5a9 	.word	0x0800b5a9
 800b55c:	0800b4f9 	.word	0x0800b4f9
 800b560:	0800b4f9 	.word	0x0800b4f9
 800b564:	0800b643 	.word	0x0800b643
 800b568:	682b      	ldr	r3, [r5, #0]
 800b56a:	1d1a      	adds	r2, r3, #4
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	602a      	str	r2, [r5, #0]
 800b570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b578:	2301      	movs	r3, #1
 800b57a:	e09f      	b.n	800b6bc <_printf_i+0x1ec>
 800b57c:	6820      	ldr	r0, [r4, #0]
 800b57e:	682b      	ldr	r3, [r5, #0]
 800b580:	0607      	lsls	r7, r0, #24
 800b582:	f103 0104 	add.w	r1, r3, #4
 800b586:	6029      	str	r1, [r5, #0]
 800b588:	d501      	bpl.n	800b58e <_printf_i+0xbe>
 800b58a:	681e      	ldr	r6, [r3, #0]
 800b58c:	e003      	b.n	800b596 <_printf_i+0xc6>
 800b58e:	0646      	lsls	r6, r0, #25
 800b590:	d5fb      	bpl.n	800b58a <_printf_i+0xba>
 800b592:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b596:	2e00      	cmp	r6, #0
 800b598:	da03      	bge.n	800b5a2 <_printf_i+0xd2>
 800b59a:	232d      	movs	r3, #45	; 0x2d
 800b59c:	4276      	negs	r6, r6
 800b59e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5a2:	485a      	ldr	r0, [pc, #360]	; (800b70c <_printf_i+0x23c>)
 800b5a4:	230a      	movs	r3, #10
 800b5a6:	e012      	b.n	800b5ce <_printf_i+0xfe>
 800b5a8:	682b      	ldr	r3, [r5, #0]
 800b5aa:	6820      	ldr	r0, [r4, #0]
 800b5ac:	1d19      	adds	r1, r3, #4
 800b5ae:	6029      	str	r1, [r5, #0]
 800b5b0:	0605      	lsls	r5, r0, #24
 800b5b2:	d501      	bpl.n	800b5b8 <_printf_i+0xe8>
 800b5b4:	681e      	ldr	r6, [r3, #0]
 800b5b6:	e002      	b.n	800b5be <_printf_i+0xee>
 800b5b8:	0641      	lsls	r1, r0, #25
 800b5ba:	d5fb      	bpl.n	800b5b4 <_printf_i+0xe4>
 800b5bc:	881e      	ldrh	r6, [r3, #0]
 800b5be:	4853      	ldr	r0, [pc, #332]	; (800b70c <_printf_i+0x23c>)
 800b5c0:	2f6f      	cmp	r7, #111	; 0x6f
 800b5c2:	bf0c      	ite	eq
 800b5c4:	2308      	moveq	r3, #8
 800b5c6:	230a      	movne	r3, #10
 800b5c8:	2100      	movs	r1, #0
 800b5ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5ce:	6865      	ldr	r5, [r4, #4]
 800b5d0:	60a5      	str	r5, [r4, #8]
 800b5d2:	2d00      	cmp	r5, #0
 800b5d4:	bfa2      	ittt	ge
 800b5d6:	6821      	ldrge	r1, [r4, #0]
 800b5d8:	f021 0104 	bicge.w	r1, r1, #4
 800b5dc:	6021      	strge	r1, [r4, #0]
 800b5de:	b90e      	cbnz	r6, 800b5e4 <_printf_i+0x114>
 800b5e0:	2d00      	cmp	r5, #0
 800b5e2:	d04b      	beq.n	800b67c <_printf_i+0x1ac>
 800b5e4:	4615      	mov	r5, r2
 800b5e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5ea:	fb03 6711 	mls	r7, r3, r1, r6
 800b5ee:	5dc7      	ldrb	r7, [r0, r7]
 800b5f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5f4:	4637      	mov	r7, r6
 800b5f6:	42bb      	cmp	r3, r7
 800b5f8:	460e      	mov	r6, r1
 800b5fa:	d9f4      	bls.n	800b5e6 <_printf_i+0x116>
 800b5fc:	2b08      	cmp	r3, #8
 800b5fe:	d10b      	bne.n	800b618 <_printf_i+0x148>
 800b600:	6823      	ldr	r3, [r4, #0]
 800b602:	07de      	lsls	r6, r3, #31
 800b604:	d508      	bpl.n	800b618 <_printf_i+0x148>
 800b606:	6923      	ldr	r3, [r4, #16]
 800b608:	6861      	ldr	r1, [r4, #4]
 800b60a:	4299      	cmp	r1, r3
 800b60c:	bfde      	ittt	le
 800b60e:	2330      	movle	r3, #48	; 0x30
 800b610:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b614:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b618:	1b52      	subs	r2, r2, r5
 800b61a:	6122      	str	r2, [r4, #16]
 800b61c:	f8cd a000 	str.w	sl, [sp]
 800b620:	464b      	mov	r3, r9
 800b622:	aa03      	add	r2, sp, #12
 800b624:	4621      	mov	r1, r4
 800b626:	4640      	mov	r0, r8
 800b628:	f7ff fee4 	bl	800b3f4 <_printf_common>
 800b62c:	3001      	adds	r0, #1
 800b62e:	d14a      	bne.n	800b6c6 <_printf_i+0x1f6>
 800b630:	f04f 30ff 	mov.w	r0, #4294967295
 800b634:	b004      	add	sp, #16
 800b636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	f043 0320 	orr.w	r3, r3, #32
 800b640:	6023      	str	r3, [r4, #0]
 800b642:	4833      	ldr	r0, [pc, #204]	; (800b710 <_printf_i+0x240>)
 800b644:	2778      	movs	r7, #120	; 0x78
 800b646:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b64a:	6823      	ldr	r3, [r4, #0]
 800b64c:	6829      	ldr	r1, [r5, #0]
 800b64e:	061f      	lsls	r7, r3, #24
 800b650:	f851 6b04 	ldr.w	r6, [r1], #4
 800b654:	d402      	bmi.n	800b65c <_printf_i+0x18c>
 800b656:	065f      	lsls	r7, r3, #25
 800b658:	bf48      	it	mi
 800b65a:	b2b6      	uxthmi	r6, r6
 800b65c:	07df      	lsls	r7, r3, #31
 800b65e:	bf48      	it	mi
 800b660:	f043 0320 	orrmi.w	r3, r3, #32
 800b664:	6029      	str	r1, [r5, #0]
 800b666:	bf48      	it	mi
 800b668:	6023      	strmi	r3, [r4, #0]
 800b66a:	b91e      	cbnz	r6, 800b674 <_printf_i+0x1a4>
 800b66c:	6823      	ldr	r3, [r4, #0]
 800b66e:	f023 0320 	bic.w	r3, r3, #32
 800b672:	6023      	str	r3, [r4, #0]
 800b674:	2310      	movs	r3, #16
 800b676:	e7a7      	b.n	800b5c8 <_printf_i+0xf8>
 800b678:	4824      	ldr	r0, [pc, #144]	; (800b70c <_printf_i+0x23c>)
 800b67a:	e7e4      	b.n	800b646 <_printf_i+0x176>
 800b67c:	4615      	mov	r5, r2
 800b67e:	e7bd      	b.n	800b5fc <_printf_i+0x12c>
 800b680:	682b      	ldr	r3, [r5, #0]
 800b682:	6826      	ldr	r6, [r4, #0]
 800b684:	6961      	ldr	r1, [r4, #20]
 800b686:	1d18      	adds	r0, r3, #4
 800b688:	6028      	str	r0, [r5, #0]
 800b68a:	0635      	lsls	r5, r6, #24
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	d501      	bpl.n	800b694 <_printf_i+0x1c4>
 800b690:	6019      	str	r1, [r3, #0]
 800b692:	e002      	b.n	800b69a <_printf_i+0x1ca>
 800b694:	0670      	lsls	r0, r6, #25
 800b696:	d5fb      	bpl.n	800b690 <_printf_i+0x1c0>
 800b698:	8019      	strh	r1, [r3, #0]
 800b69a:	2300      	movs	r3, #0
 800b69c:	6123      	str	r3, [r4, #16]
 800b69e:	4615      	mov	r5, r2
 800b6a0:	e7bc      	b.n	800b61c <_printf_i+0x14c>
 800b6a2:	682b      	ldr	r3, [r5, #0]
 800b6a4:	1d1a      	adds	r2, r3, #4
 800b6a6:	602a      	str	r2, [r5, #0]
 800b6a8:	681d      	ldr	r5, [r3, #0]
 800b6aa:	6862      	ldr	r2, [r4, #4]
 800b6ac:	2100      	movs	r1, #0
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f7f4 fd96 	bl	80001e0 <memchr>
 800b6b4:	b108      	cbz	r0, 800b6ba <_printf_i+0x1ea>
 800b6b6:	1b40      	subs	r0, r0, r5
 800b6b8:	6060      	str	r0, [r4, #4]
 800b6ba:	6863      	ldr	r3, [r4, #4]
 800b6bc:	6123      	str	r3, [r4, #16]
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6c4:	e7aa      	b.n	800b61c <_printf_i+0x14c>
 800b6c6:	6923      	ldr	r3, [r4, #16]
 800b6c8:	462a      	mov	r2, r5
 800b6ca:	4649      	mov	r1, r9
 800b6cc:	4640      	mov	r0, r8
 800b6ce:	47d0      	blx	sl
 800b6d0:	3001      	adds	r0, #1
 800b6d2:	d0ad      	beq.n	800b630 <_printf_i+0x160>
 800b6d4:	6823      	ldr	r3, [r4, #0]
 800b6d6:	079b      	lsls	r3, r3, #30
 800b6d8:	d413      	bmi.n	800b702 <_printf_i+0x232>
 800b6da:	68e0      	ldr	r0, [r4, #12]
 800b6dc:	9b03      	ldr	r3, [sp, #12]
 800b6de:	4298      	cmp	r0, r3
 800b6e0:	bfb8      	it	lt
 800b6e2:	4618      	movlt	r0, r3
 800b6e4:	e7a6      	b.n	800b634 <_printf_i+0x164>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	4632      	mov	r2, r6
 800b6ea:	4649      	mov	r1, r9
 800b6ec:	4640      	mov	r0, r8
 800b6ee:	47d0      	blx	sl
 800b6f0:	3001      	adds	r0, #1
 800b6f2:	d09d      	beq.n	800b630 <_printf_i+0x160>
 800b6f4:	3501      	adds	r5, #1
 800b6f6:	68e3      	ldr	r3, [r4, #12]
 800b6f8:	9903      	ldr	r1, [sp, #12]
 800b6fa:	1a5b      	subs	r3, r3, r1
 800b6fc:	42ab      	cmp	r3, r5
 800b6fe:	dcf2      	bgt.n	800b6e6 <_printf_i+0x216>
 800b700:	e7eb      	b.n	800b6da <_printf_i+0x20a>
 800b702:	2500      	movs	r5, #0
 800b704:	f104 0619 	add.w	r6, r4, #25
 800b708:	e7f5      	b.n	800b6f6 <_printf_i+0x226>
 800b70a:	bf00      	nop
 800b70c:	0800b8f1 	.word	0x0800b8f1
 800b710:	0800b902 	.word	0x0800b902

0800b714 <memmove>:
 800b714:	4288      	cmp	r0, r1
 800b716:	b510      	push	{r4, lr}
 800b718:	eb01 0402 	add.w	r4, r1, r2
 800b71c:	d902      	bls.n	800b724 <memmove+0x10>
 800b71e:	4284      	cmp	r4, r0
 800b720:	4623      	mov	r3, r4
 800b722:	d807      	bhi.n	800b734 <memmove+0x20>
 800b724:	1e43      	subs	r3, r0, #1
 800b726:	42a1      	cmp	r1, r4
 800b728:	d008      	beq.n	800b73c <memmove+0x28>
 800b72a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b72e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b732:	e7f8      	b.n	800b726 <memmove+0x12>
 800b734:	4402      	add	r2, r0
 800b736:	4601      	mov	r1, r0
 800b738:	428a      	cmp	r2, r1
 800b73a:	d100      	bne.n	800b73e <memmove+0x2a>
 800b73c:	bd10      	pop	{r4, pc}
 800b73e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b746:	e7f7      	b.n	800b738 <memmove+0x24>

0800b748 <_sbrk_r>:
 800b748:	b538      	push	{r3, r4, r5, lr}
 800b74a:	4d06      	ldr	r5, [pc, #24]	; (800b764 <_sbrk_r+0x1c>)
 800b74c:	2300      	movs	r3, #0
 800b74e:	4604      	mov	r4, r0
 800b750:	4608      	mov	r0, r1
 800b752:	602b      	str	r3, [r5, #0]
 800b754:	f7f5 fcf4 	bl	8001140 <_sbrk>
 800b758:	1c43      	adds	r3, r0, #1
 800b75a:	d102      	bne.n	800b762 <_sbrk_r+0x1a>
 800b75c:	682b      	ldr	r3, [r5, #0]
 800b75e:	b103      	cbz	r3, 800b762 <_sbrk_r+0x1a>
 800b760:	6023      	str	r3, [r4, #0]
 800b762:	bd38      	pop	{r3, r4, r5, pc}
 800b764:	20002184 	.word	0x20002184

0800b768 <memcpy>:
 800b768:	440a      	add	r2, r1
 800b76a:	4291      	cmp	r1, r2
 800b76c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b770:	d100      	bne.n	800b774 <memcpy+0xc>
 800b772:	4770      	bx	lr
 800b774:	b510      	push	{r4, lr}
 800b776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b77a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b77e:	4291      	cmp	r1, r2
 800b780:	d1f9      	bne.n	800b776 <memcpy+0xe>
 800b782:	bd10      	pop	{r4, pc}

0800b784 <_realloc_r>:
 800b784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b788:	4680      	mov	r8, r0
 800b78a:	4614      	mov	r4, r2
 800b78c:	460e      	mov	r6, r1
 800b78e:	b921      	cbnz	r1, 800b79a <_realloc_r+0x16>
 800b790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b794:	4611      	mov	r1, r2
 800b796:	f7ff bc49 	b.w	800b02c <_malloc_r>
 800b79a:	b92a      	cbnz	r2, 800b7a8 <_realloc_r+0x24>
 800b79c:	f7ff fbda 	bl	800af54 <_free_r>
 800b7a0:	4625      	mov	r5, r4
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7a8:	f000 f81b 	bl	800b7e2 <_malloc_usable_size_r>
 800b7ac:	4284      	cmp	r4, r0
 800b7ae:	4607      	mov	r7, r0
 800b7b0:	d802      	bhi.n	800b7b8 <_realloc_r+0x34>
 800b7b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7b6:	d812      	bhi.n	800b7de <_realloc_r+0x5a>
 800b7b8:	4621      	mov	r1, r4
 800b7ba:	4640      	mov	r0, r8
 800b7bc:	f7ff fc36 	bl	800b02c <_malloc_r>
 800b7c0:	4605      	mov	r5, r0
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d0ed      	beq.n	800b7a2 <_realloc_r+0x1e>
 800b7c6:	42bc      	cmp	r4, r7
 800b7c8:	4622      	mov	r2, r4
 800b7ca:	4631      	mov	r1, r6
 800b7cc:	bf28      	it	cs
 800b7ce:	463a      	movcs	r2, r7
 800b7d0:	f7ff ffca 	bl	800b768 <memcpy>
 800b7d4:	4631      	mov	r1, r6
 800b7d6:	4640      	mov	r0, r8
 800b7d8:	f7ff fbbc 	bl	800af54 <_free_r>
 800b7dc:	e7e1      	b.n	800b7a2 <_realloc_r+0x1e>
 800b7de:	4635      	mov	r5, r6
 800b7e0:	e7df      	b.n	800b7a2 <_realloc_r+0x1e>

0800b7e2 <_malloc_usable_size_r>:
 800b7e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7e6:	1f18      	subs	r0, r3, #4
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	bfbc      	itt	lt
 800b7ec:	580b      	ldrlt	r3, [r1, r0]
 800b7ee:	18c0      	addlt	r0, r0, r3
 800b7f0:	4770      	bx	lr
	...

0800b7f4 <_init>:
 800b7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f6:	bf00      	nop
 800b7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7fa:	bc08      	pop	{r3}
 800b7fc:	469e      	mov	lr, r3
 800b7fe:	4770      	bx	lr

0800b800 <_fini>:
 800b800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b802:	bf00      	nop
 800b804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b806:	bc08      	pop	{r3}
 800b808:	469e      	mov	lr, r3
 800b80a:	4770      	bx	lr
