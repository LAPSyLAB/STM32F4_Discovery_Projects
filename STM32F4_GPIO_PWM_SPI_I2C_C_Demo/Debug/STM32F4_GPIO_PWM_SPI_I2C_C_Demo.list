
STM32F4_GPIO_PWM_SPI_I2C_C_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aabc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800ac44  0800ac44  0001ac44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aca4  0800aca4  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800aca4  0800aca4  0001aca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acac  0800acac  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acac  0800acac  0001acac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acb0  0800acb0  0001acb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800acb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          00001df0  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ef0  20001ef0  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001beec  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004843  00000000  00000000  0003c05f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018d0  00000000  00000000  000408a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001315  00000000  00000000  00042178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000274d0  00000000  00000000  0004348d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000230db  00000000  00000000  0006a95d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000df89c  00000000  00000000  0008da38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006798  00000000  00000000  0016d2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  00173a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000100 	.word	0x20000100
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ac2c 	.word	0x0800ac2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000104 	.word	0x20000104
 80001c4:	0800ac2c 	.word	0x0800ac2c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004d6:	4b21      	ldr	r3, [pc, #132]	; (800055c <MX_ADC1_Init+0x98>)
 80004d8:	4a21      	ldr	r2, [pc, #132]	; (8000560 <MX_ADC1_Init+0x9c>)
 80004da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004dc:	4b1f      	ldr	r3, [pc, #124]	; (800055c <MX_ADC1_Init+0x98>)
 80004de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004e4:	4b1d      	ldr	r3, [pc, #116]	; (800055c <MX_ADC1_Init+0x98>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004ea:	4b1c      	ldr	r3, [pc, #112]	; (800055c <MX_ADC1_Init+0x98>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f0:	4b1a      	ldr	r3, [pc, #104]	; (800055c <MX_ADC1_Init+0x98>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f6:	4b19      	ldr	r3, [pc, #100]	; (800055c <MX_ADC1_Init+0x98>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_ADC1_Init+0x98>)
 8000500:	2200      	movs	r2, #0
 8000502:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <MX_ADC1_Init+0x98>)
 8000506:	4a17      	ldr	r2, [pc, #92]	; (8000564 <MX_ADC1_Init+0xa0>)
 8000508:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_ADC1_Init+0x98>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_ADC1_Init+0x98>)
 8000512:	2201      	movs	r2, #1
 8000514:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_ADC1_Init+0x98>)
 8000518:	2200      	movs	r2, #0
 800051a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_ADC1_Init+0x98>)
 8000520:	2201      	movs	r2, #1
 8000522:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <MX_ADC1_Init+0x98>)
 8000526:	f000 ffc3 	bl	80014b0 <HAL_ADC_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000530:	f000 fc6a 	bl	8000e08 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000534:	2302      	movs	r3, #2
 8000536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000538:	2301      	movs	r3, #1
 800053a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000540:	463b      	mov	r3, r7
 8000542:	4619      	mov	r1, r3
 8000544:	4805      	ldr	r0, [pc, #20]	; (800055c <MX_ADC1_Init+0x98>)
 8000546:	f001 f961 	bl	800180c <HAL_ADC_ConfigChannel>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000550:	f000 fc5a 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	2000011c 	.word	0x2000011c
 8000560:	40012000 	.word	0x40012000
 8000564:	0f000001 	.word	0x0f000001

08000568 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a17      	ldr	r2, [pc, #92]	; (80005e4 <HAL_ADC_MspInit+0x7c>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d127      	bne.n	80005da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <HAL_ADC_MspInit+0x80>)
 8000590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000592:	4a15      	ldr	r2, [pc, #84]	; (80005e8 <HAL_ADC_MspInit+0x80>)
 8000594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000598:	6453      	str	r3, [r2, #68]	; 0x44
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <HAL_ADC_MspInit+0x80>)
 800059c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800059e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005a2:	613b      	str	r3, [r7, #16]
 80005a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <HAL_ADC_MspInit+0x80>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a0e      	ldr	r2, [pc, #56]	; (80005e8 <HAL_ADC_MspInit+0x80>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <HAL_ADC_MspInit+0x80>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80005c2:	230e      	movs	r3, #14
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c6:	2303      	movs	r3, #3
 80005c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	; (80005ec <HAL_ADC_MspInit+0x84>)
 80005d6:	f001 fc49 	bl	8001e6c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005da:	bf00      	nop
 80005dc:	3728      	adds	r7, #40	; 0x28
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40012000 	.word	0x40012000
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020000 	.word	0x40020000

080005f0 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08c      	sub	sp, #48	; 0x30
 80005f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
 800060a:	4b71      	ldr	r3, [pc, #452]	; (80007d0 <MX_GPIO_Init+0x1e0>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a70      	ldr	r2, [pc, #448]	; (80007d0 <MX_GPIO_Init+0x1e0>)
 8000610:	f043 0310 	orr.w	r3, r3, #16
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b6e      	ldr	r3, [pc, #440]	; (80007d0 <MX_GPIO_Init+0x1e0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0310 	and.w	r3, r3, #16
 800061e:	61bb      	str	r3, [r7, #24]
 8000620:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	4b6a      	ldr	r3, [pc, #424]	; (80007d0 <MX_GPIO_Init+0x1e0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a69      	ldr	r2, [pc, #420]	; (80007d0 <MX_GPIO_Init+0x1e0>)
 800062c:	f043 0304 	orr.w	r3, r3, #4
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b67      	ldr	r3, [pc, #412]	; (80007d0 <MX_GPIO_Init+0x1e0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0304 	and.w	r3, r3, #4
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
 8000642:	4b63      	ldr	r3, [pc, #396]	; (80007d0 <MX_GPIO_Init+0x1e0>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a62      	ldr	r2, [pc, #392]	; (80007d0 <MX_GPIO_Init+0x1e0>)
 8000648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b60      	ldr	r3, [pc, #384]	; (80007d0 <MX_GPIO_Init+0x1e0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	4b5c      	ldr	r3, [pc, #368]	; (80007d0 <MX_GPIO_Init+0x1e0>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a5b      	ldr	r2, [pc, #364]	; (80007d0 <MX_GPIO_Init+0x1e0>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b59      	ldr	r3, [pc, #356]	; (80007d0 <MX_GPIO_Init+0x1e0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	4b55      	ldr	r3, [pc, #340]	; (80007d0 <MX_GPIO_Init+0x1e0>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a54      	ldr	r2, [pc, #336]	; (80007d0 <MX_GPIO_Init+0x1e0>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b52      	ldr	r3, [pc, #328]	; (80007d0 <MX_GPIO_Init+0x1e0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	4b4e      	ldr	r3, [pc, #312]	; (80007d0 <MX_GPIO_Init+0x1e0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a4d      	ldr	r2, [pc, #308]	; (80007d0 <MX_GPIO_Init+0x1e0>)
 800069c:	f043 0308 	orr.w	r3, r3, #8
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b4b      	ldr	r3, [pc, #300]	; (80007d0 <MX_GPIO_Init+0x1e0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0308 	and.w	r3, r3, #8
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2108      	movs	r1, #8
 80006b2:	4848      	ldr	r0, [pc, #288]	; (80007d4 <MX_GPIO_Init+0x1e4>)
 80006b4:	f001 fd8e 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2101      	movs	r1, #1
 80006bc:	4846      	ldr	r0, [pc, #280]	; (80007d8 <MX_GPIO_Init+0x1e8>)
 80006be:	f001 fd89 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2110      	movs	r1, #16
 80006c6:	4845      	ldr	r0, [pc, #276]	; (80007dc <MX_GPIO_Init+0x1ec>)
 80006c8:	f001 fd84 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80006cc:	2308      	movs	r3, #8
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4619      	mov	r1, r3
 80006e2:	483c      	ldr	r0, [pc, #240]	; (80007d4 <MX_GPIO_Init+0x1e4>)
 80006e4:	f001 fbc2 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80006e8:	2301      	movs	r3, #1
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	4836      	ldr	r0, [pc, #216]	; (80007d8 <MX_GPIO_Init+0x1e8>)
 8000700:	f001 fbb4 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000704:	2308      	movs	r3, #8
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000714:	2305      	movs	r3, #5
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	482e      	ldr	r0, [pc, #184]	; (80007d8 <MX_GPIO_Init+0x1e8>)
 8000720:	f001 fba4 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000724:	2301      	movs	r3, #1
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000728:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800072c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	4829      	ldr	r0, [pc, #164]	; (80007e0 <MX_GPIO_Init+0x1f0>)
 800073a:	f001 fb97 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800073e:	2304      	movs	r3, #4
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000742:	2300      	movs	r3, #0
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4824      	ldr	r0, [pc, #144]	; (80007e4 <MX_GPIO_Init+0x1f4>)
 8000752:	f001 fb8b 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075c:	2302      	movs	r3, #2
 800075e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000768:	2305      	movs	r3, #5
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4619      	mov	r1, r3
 8000772:	481c      	ldr	r0, [pc, #112]	; (80007e4 <MX_GPIO_Init+0x1f4>)
 8000774:	f001 fb7a 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8000778:	2310      	movs	r3, #16
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	4813      	ldr	r0, [pc, #76]	; (80007dc <MX_GPIO_Init+0x1ec>)
 8000790:	f001 fb6c 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000794:	2320      	movs	r3, #32
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	480d      	ldr	r0, [pc, #52]	; (80007dc <MX_GPIO_Init+0x1ec>)
 80007a8:	f001 fb60 	bl	8001e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007b0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_GPIO_Init+0x1e4>)
 80007c2:	f001 fb53 	bl	8001e6c <HAL_GPIO_Init>

}
 80007c6:	bf00      	nop
 80007c8:	3730      	adds	r7, #48	; 0x30
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40020800 	.word	0x40020800
 80007dc:	40020c00 	.word	0x40020c00
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020400 	.word	0x40020400

080007e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_I2C1_Init+0x50>)
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <MX_I2C1_Init+0x54>)
 80007f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_I2C1_Init+0x50>)
 80007f4:	4a12      	ldr	r2, [pc, #72]	; (8000840 <MX_I2C1_Init+0x58>)
 80007f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_I2C1_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_I2C1_Init+0x50>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_I2C1_Init+0x50>)
 8000806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800080a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <MX_I2C1_Init+0x50>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_I2C1_Init+0x50>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <MX_I2C1_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_I2C1_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_I2C1_Init+0x50>)
 8000826:	f001 fcef 	bl	8002208 <HAL_I2C_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000830:	f000 faea 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000164 	.word	0x20000164
 800083c:	40005400 	.word	0x40005400
 8000840:	000186a0 	.word	0x000186a0

08000844 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a19      	ldr	r2, [pc, #100]	; (80008c8 <HAL_I2C_MspInit+0x84>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d12c      	bne.n	80008c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <HAL_I2C_MspInit+0x88>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <HAL_I2C_MspInit+0x88>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <HAL_I2C_MspInit+0x88>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000882:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000888:	2312      	movs	r3, #18
 800088a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088c:	2301      	movs	r3, #1
 800088e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000894:	2304      	movs	r3, #4
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <HAL_I2C_MspInit+0x8c>)
 80008a0:	f001 fae4 	bl	8001e6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_I2C_MspInit+0x88>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	4a07      	ldr	r2, [pc, #28]	; (80008cc <HAL_I2C_MspInit+0x88>)
 80008ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008b2:	6413      	str	r3, [r2, #64]	; 0x40
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <HAL_I2C_MspInit+0x88>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40005400 	.word	0x40005400
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020400 	.word	0x40020400

080008d4 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_I2S3_Init+0x54>)
 80008da:	4a14      	ldr	r2, [pc, #80]	; (800092c <MX_I2S3_Init+0x58>)
 80008dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008de:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_I2S3_Init+0x54>)
 80008e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008e6:	4b10      	ldr	r3, [pc, #64]	; (8000928 <MX_I2S3_Init+0x54>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_I2S3_Init+0x54>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <MX_I2S3_Init+0x54>)
 80008f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_I2S3_Init+0x54>)
 80008fc:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <MX_I2S3_Init+0x5c>)
 80008fe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_I2S3_Init+0x54>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_I2S3_Init+0x54>)
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_I2S3_Init+0x54>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_I2S3_Init+0x54>)
 8000914:	f002 fac4 	bl	8002ea0 <HAL_I2S_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800091e:	f000 fa73 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200001b8 	.word	0x200001b8
 800092c:	40003c00 	.word	0x40003c00
 8000930:	00017700 	.word	0x00017700

08000934 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08e      	sub	sp, #56	; 0x38
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a31      	ldr	r2, [pc, #196]	; (8000a24 <HAL_I2S_MspInit+0xf0>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d15a      	bne.n	8000a1a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000964:	2301      	movs	r3, #1
 8000966:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000968:	23c0      	movs	r3, #192	; 0xc0
 800096a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800096c:	2302      	movs	r3, #2
 800096e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4618      	mov	r0, r3
 8000976:	f004 fe07 	bl	8005588 <HAL_RCCEx_PeriphCLKConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000980:	f000 fa42 	bl	8000e08 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <HAL_I2S_MspInit+0xf4>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a26      	ldr	r2, [pc, #152]	; (8000a28 <HAL_I2S_MspInit+0xf4>)
 800098e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000992:	6413      	str	r3, [r2, #64]	; 0x40
 8000994:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <HAL_I2S_MspInit+0xf4>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <HAL_I2S_MspInit+0xf4>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a8:	4a1f      	ldr	r2, [pc, #124]	; (8000a28 <HAL_I2S_MspInit+0xf4>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6313      	str	r3, [r2, #48]	; 0x30
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <HAL_I2S_MspInit+0xf4>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <HAL_I2S_MspInit+0xf4>)
 80009c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c4:	4a18      	ldr	r2, [pc, #96]	; (8000a28 <HAL_I2S_MspInit+0xf4>)
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	6313      	str	r3, [r2, #48]	; 0x30
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <HAL_I2S_MspInit+0xf4>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	f003 0304 	and.w	r3, r3, #4
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009d8:	2310      	movs	r3, #16
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009e8:	2306      	movs	r3, #6
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f0:	4619      	mov	r1, r3
 80009f2:	480e      	ldr	r0, [pc, #56]	; (8000a2c <HAL_I2S_MspInit+0xf8>)
 80009f4:	f001 fa3a 	bl	8001e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009f8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a0a:	2306      	movs	r3, #6
 8000a0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a12:	4619      	mov	r1, r3
 8000a14:	4806      	ldr	r0, [pc, #24]	; (8000a30 <HAL_I2S_MspInit+0xfc>)
 8000a16:	f001 fa29 	bl	8001e6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	3738      	adds	r7, #56	; 0x38
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40003c00 	.word	0x40003c00
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000
 8000a30:	40020800 	.word	0x40020800

08000a34 <setPWM>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period, uint16_t pulse)
{
 8000a34:	b084      	sub	sp, #16
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b088      	sub	sp, #32
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000a40:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 8000a44:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000a46:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000a4a:	f005 fb65 	bl	8006118 <HAL_TIM_PWM_Stop>
	 TIM_OC_InitTypeDef sConfigOC;
	 timer.Init.Period = period; // set the period duration
 8000a4e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
	 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 8000a54:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000a58:	f005 fa3d 	bl	8005ed6 <HAL_TIM_PWM_Init>
	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a5c:	2360      	movs	r3, #96	; 0x60
 8000a5e:	607b      	str	r3, [r7, #4]
	 sConfigOC.Pulse = pulse; // set the pulse duration
 8000a60:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8000a64:	60bb      	str	r3, [r7, #8]
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
	 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000a72:	4619      	mov	r1, r3
 8000a74:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000a78:	f005 fbbe 	bl	80061f8 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 8000a7c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000a7e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000a82:	f005 fa81 	bl	8005f88 <HAL_TIM_PWM_Start>
}
 8000a86:	bf00      	nop
 8000a88:	3720      	adds	r7, #32
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a96:	b093      	sub	sp, #76	; 0x4c
 8000a98:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9a:	f000 fc73 	bl	8001384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9e:	f000 f949 	bl	8000d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa2:	f7ff fda5 	bl	80005f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000aa6:	f7ff fe9f 	bl	80007e8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000aaa:	f7ff ff13 	bl	80008d4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000aae:	f000 f9b1 	bl	8000e14 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000ab2:	f009 fb8d 	bl	800a1d0 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 8000ab6:	f000 fb0d 	bl	80010d4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000aba:	f000 fa97 	bl	8000fec <MX_TIM2_Init>
  MX_ADC1_Init();
 8000abe:	f7ff fd01 	bl	80004c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4885      	ldr	r0, [pc, #532]	; (8000cdc <main+0x248>)
 8000ac6:	f005 fa5f 	bl	8005f88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000aca:	2104      	movs	r1, #4
 8000acc:	4883      	ldr	r0, [pc, #524]	; (8000cdc <main+0x248>)
 8000ace:	f005 fa5b 	bl	8005f88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000ad2:	2108      	movs	r1, #8
 8000ad4:	4881      	ldr	r0, [pc, #516]	; (8000cdc <main+0x248>)
 8000ad6:	f005 fa57 	bl	8005f88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000ada:	210c      	movs	r1, #12
 8000adc:	487f      	ldr	r0, [pc, #508]	; (8000cdc <main+0x248>)
 8000ade:	f005 fa53 	bl	8005f88 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	487e      	ldr	r0, [pc, #504]	; (8000ce0 <main+0x24c>)
 8000ae6:	f005 fa4f 	bl	8005f88 <HAL_TIM_PWM_Start>


  // Config accelerometer
  // Read WHOAMI register
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2108      	movs	r1, #8
 8000aee:	487d      	ldr	r0, [pc, #500]	; (8000ce4 <main+0x250>)
 8000af0:	f001 fb70 	bl	80021d4 <HAL_GPIO_WritePin>
  outdata[0] = 0x0f | 0x80 ;  // read whoami
 8000af4:	4b7c      	ldr	r3, [pc, #496]	; (8000ce8 <main+0x254>)
 8000af6:	228f      	movs	r2, #143	; 0x8f
 8000af8:	701a      	strb	r2, [r3, #0]
  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2302      	movs	r3, #2
 8000b02:	4a7a      	ldr	r2, [pc, #488]	; (8000cec <main+0x258>)
 8000b04:	4978      	ldr	r1, [pc, #480]	; (8000ce8 <main+0x254>)
 8000b06:	487a      	ldr	r0, [pc, #488]	; (8000cf0 <main+0x25c>)
 8000b08:	f004 ff09 	bl	800591e <HAL_SPI_TransmitReceive>
  lis_id = indata[1];
 8000b0c:	4b77      	ldr	r3, [pc, #476]	; (8000cec <main+0x258>)
 8000b0e:	785a      	ldrb	r2, [r3, #1]
 8000b10:	4b78      	ldr	r3, [pc, #480]	; (8000cf4 <main+0x260>)
 8000b12:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	2108      	movs	r1, #8
 8000b18:	4872      	ldr	r0, [pc, #456]	; (8000ce4 <main+0x250>)
 8000b1a:	f001 fb5b 	bl	80021d4 <HAL_GPIO_WritePin>

  HAL_Delay(500);
 8000b1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b22:	f000 fca1 	bl	8001468 <HAL_Delay>

  // Set CTRL register 0x47 -> [0x20]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2108      	movs	r1, #8
 8000b2a:	486e      	ldr	r0, [pc, #440]	; (8000ce4 <main+0x250>)
 8000b2c:	f001 fb52 	bl	80021d4 <HAL_GPIO_WritePin>
  outdata[0] = 0x20 ;  // switch on axes
 8000b30:	4b6d      	ldr	r3, [pc, #436]	; (8000ce8 <main+0x254>)
 8000b32:	2220      	movs	r2, #32
 8000b34:	701a      	strb	r2, [r3, #0]
  outdata[1] = 0x47 ;
 8000b36:	4b6c      	ldr	r3, [pc, #432]	; (8000ce8 <main+0x254>)
 8000b38:	2247      	movs	r2, #71	; 0x47
 8000b3a:	705a      	strb	r2, [r3, #1]
  HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	2302      	movs	r3, #2
 8000b44:	4a69      	ldr	r2, [pc, #420]	; (8000cec <main+0x258>)
 8000b46:	4968      	ldr	r1, [pc, #416]	; (8000ce8 <main+0x254>)
 8000b48:	4869      	ldr	r0, [pc, #420]	; (8000cf0 <main+0x25c>)
 8000b4a:	f004 fee8 	bl	800591e <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2108      	movs	r1, #8
 8000b52:	4864      	ldr	r0, [pc, #400]	; (8000ce4 <main+0x250>)
 8000b54:	f001 fb3e 	bl	80021d4 <HAL_GPIO_WritePin>

  HAL_Delay(500);
 8000b58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b5c:	f000 fc84 	bl	8001468 <HAL_Delay>
  outdata[1] = 0x00 ;
 8000b60:	4b61      	ldr	r3, [pc, #388]	; (8000ce8 <main+0x254>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	705a      	strb	r2, [r3, #1]

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4,GPIO_PIN_SET);   // Set Reset line to 1 (switch device on)
 8000b66:	2201      	movs	r2, #1
 8000b68:	2110      	movs	r1, #16
 8000b6a:	4863      	ldr	r0, [pc, #396]	; (8000cf8 <main+0x264>)
 8000b6c:	f001 fb32 	bl	80021d4 <HAL_GPIO_WritePin>

  HAL_Delay(1000);   // recomended by datasheet
 8000b70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b74:	f000 fc78 	bl	8001468 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    htim4.Instance->CCR1 = Duty;
 8000b78:	4b60      	ldr	r3, [pc, #384]	; (8000cfc <main+0x268>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b57      	ldr	r3, [pc, #348]	; (8000cdc <main+0x248>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	635a      	str	r2, [r3, #52]	; 0x34
	    htim4.Instance->CCR2 = 100-Duty;
 8000b82:	4b5e      	ldr	r3, [pc, #376]	; (8000cfc <main+0x268>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000b8a:	4b54      	ldr	r3, [pc, #336]	; (8000cdc <main+0x248>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	639a      	str	r2, [r3, #56]	; 0x38
	    htim4.Instance->CCR3 = Duty;
 8000b90:	4b5a      	ldr	r3, [pc, #360]	; (8000cfc <main+0x268>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b51      	ldr	r3, [pc, #324]	; (8000cdc <main+0x248>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	63da      	str	r2, [r3, #60]	; 0x3c
	    htim4.Instance->CCR4 = 100-Duty;
 8000b9a:	4b58      	ldr	r3, [pc, #352]	; (8000cfc <main+0x268>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 8000ba2:	4b4e      	ldr	r3, [pc, #312]	; (8000cdc <main+0x248>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	641a      	str	r2, [r3, #64]	; 0x40

	    KeyState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4855      	ldr	r0, [pc, #340]	; (8000d00 <main+0x26c>)
 8000bac:	f001 fafa 	bl	80021a4 <HAL_GPIO_ReadPin>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	4b53      	ldr	r3, [pc, #332]	; (8000d04 <main+0x270>)
 8000bb6:	601a      	str	r2, [r3, #0]

	    NotePeriod = (int)(1000000/NoteFreq);  //Already prescaled to 1 MHz
 8000bb8:	4b53      	ldr	r3, [pc, #332]	; (8000d08 <main+0x274>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a53      	ldr	r2, [pc, #332]	; (8000d0c <main+0x278>)
 8000bbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bc2:	4a53      	ldr	r2, [pc, #332]	; (8000d10 <main+0x27c>)
 8000bc4:	6013      	str	r3, [r2, #0]
	    setPWM(htim2, TIM_CHANNEL_1, NotePeriod, NotePeriod/2);
 8000bc6:	4b52      	ldr	r3, [pc, #328]	; (8000d10 <main+0x27c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	4b50      	ldr	r3, [pc, #320]	; (8000d10 <main+0x27c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	0fd9      	lsrs	r1, r3, #31
 8000bd2:	440b      	add	r3, r1
 8000bd4:	105b      	asrs	r3, r3, #1
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	4e41      	ldr	r6, [pc, #260]	; (8000ce0 <main+0x24c>)
 8000bda:	9310      	str	r3, [sp, #64]	; 0x40
 8000bdc:	920f      	str	r2, [sp, #60]	; 0x3c
 8000bde:	2300      	movs	r3, #0
 8000be0:	930e      	str	r3, [sp, #56]	; 0x38
 8000be2:	466d      	mov	r5, sp
 8000be4:	f106 0410 	add.w	r4, r6, #16
 8000be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bf8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bfc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c00:	f7ff ff18 	bl	8000a34 <setPWM>

	    // Read x,y,z axes
	      outdata[0] = 0x29 | 0x80  ;  // read x
 8000c04:	4b38      	ldr	r3, [pc, #224]	; (8000ce8 <main+0x254>)
 8000c06:	22a9      	movs	r2, #169	; 0xa9
 8000c08:	701a      	strb	r2, [r3, #0]
	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2108      	movs	r1, #8
 8000c0e:	4835      	ldr	r0, [pc, #212]	; (8000ce4 <main+0x250>)
 8000c10:	f001 fae0 	bl	80021d4 <HAL_GPIO_WritePin>
	      HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
 8000c18:	9300      	str	r3, [sp, #0]
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	4a33      	ldr	r2, [pc, #204]	; (8000cec <main+0x258>)
 8000c1e:	4932      	ldr	r1, [pc, #200]	; (8000ce8 <main+0x254>)
 8000c20:	4833      	ldr	r0, [pc, #204]	; (8000cf0 <main+0x25c>)
 8000c22:	f004 fe7c 	bl	800591e <HAL_SPI_TransmitReceive>
	      AccelX = indata[1];
 8000c26:	4b31      	ldr	r3, [pc, #196]	; (8000cec <main+0x258>)
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	b25a      	sxtb	r2, r3
 8000c2c:	4b39      	ldr	r3, [pc, #228]	; (8000d14 <main+0x280>)
 8000c2e:	701a      	strb	r2, [r3, #0]

	      outdata[0] = 0x2B | 0x80  ;  // read y
 8000c30:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <main+0x254>)
 8000c32:	22ab      	movs	r2, #171	; 0xab
 8000c34:	701a      	strb	r2, [r3, #0]
	      HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	4a2b      	ldr	r2, [pc, #172]	; (8000cec <main+0x258>)
 8000c40:	4929      	ldr	r1, [pc, #164]	; (8000ce8 <main+0x254>)
 8000c42:	482b      	ldr	r0, [pc, #172]	; (8000cf0 <main+0x25c>)
 8000c44:	f004 fe6b 	bl	800591e <HAL_SPI_TransmitReceive>
	      AccelY = indata[1];
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <main+0x258>)
 8000c4a:	785b      	ldrb	r3, [r3, #1]
 8000c4c:	b25a      	sxtb	r2, r3
 8000c4e:	4b32      	ldr	r3, [pc, #200]	; (8000d18 <main+0x284>)
 8000c50:	701a      	strb	r2, [r3, #0]

	      outdata[0] = 0x2D | 0x80  ;  // read z
 8000c52:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <main+0x254>)
 8000c54:	22ad      	movs	r2, #173	; 0xad
 8000c56:	701a      	strb	r2, [r3, #0]
	      HAL_SPI_TransmitReceive(&hspi1, &outdata, &indata, 2, HAL_MAX_DELAY);
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	2302      	movs	r3, #2
 8000c60:	4a22      	ldr	r2, [pc, #136]	; (8000cec <main+0x258>)
 8000c62:	4921      	ldr	r1, [pc, #132]	; (8000ce8 <main+0x254>)
 8000c64:	4822      	ldr	r0, [pc, #136]	; (8000cf0 <main+0x25c>)
 8000c66:	f004 fe5a 	bl	800591e <HAL_SPI_TransmitReceive>
	      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	481d      	ldr	r0, [pc, #116]	; (8000ce4 <main+0x250>)
 8000c70:	f001 fab0 	bl	80021d4 <HAL_GPIO_WritePin>
	      AccelZ = indata[1];
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <main+0x258>)
 8000c76:	785b      	ldrb	r3, [r3, #1]
 8000c78:	b25a      	sxtb	r2, r3
 8000c7a:	4b28      	ldr	r3, [pc, #160]	; (8000d1c <main+0x288>)
 8000c7c:	701a      	strb	r2, [r3, #0]

	      // From Device with address=0x94, Read register with address 0x01 and put value in ChipID
	      // DevAddress_0x94, tMemAddress=0x01, MemAddSize=8b, *pData,Size, Timeout);
	      retval = HAL_I2C_Mem_Read(&hi2c1, 0x94, 0x01, I2C_MEMADD_SIZE_8BIT, &ChipID, 1, 1000);
 8000c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c82:	9302      	str	r3, [sp, #8]
 8000c84:	2301      	movs	r3, #1
 8000c86:	9301      	str	r3, [sp, #4]
 8000c88:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <main+0x28c>)
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2194      	movs	r1, #148	; 0x94
 8000c92:	4824      	ldr	r0, [pc, #144]	; (8000d24 <main+0x290>)
 8000c94:	f001 fbfc 	bl	8002490 <HAL_I2C_Mem_Read>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <main+0x294>)
 8000c9e:	701a      	strb	r2, [r3, #0]

	      HAL_ADC_Start(&hadc1);
 8000ca0:	4822      	ldr	r0, [pc, #136]	; (8000d2c <main+0x298>)
 8000ca2:	f000 fc49 	bl	8001538 <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8000caa:	4820      	ldr	r0, [pc, #128]	; (8000d2c <main+0x298>)
 8000cac:	f000 fd16 	bl	80016dc <HAL_ADC_PollForConversion>
	      AnalogValue1 = HAL_ADC_GetValue(&hadc1);
 8000cb0:	481e      	ldr	r0, [pc, #120]	; (8000d2c <main+0x298>)
 8000cb2:	f000 fd9e 	bl	80017f2 <HAL_ADC_GetValue>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <main+0x29c>)
 8000cbc:	601a      	str	r2, [r3, #0]
//	      snprintf(SendBuffer,BUFSIZE,"Hello World [%d]: Key:%d Duty:%d PWM-Freq:%d PWM-Period:%d Accel[ID:%02x] X:%04d Y:%d Z:%04d ChipID:%02x ADC1:%d\r\n",Counter++,KeyState,Duty,NoteFreq,NotePeriod,lis_id,AccelX,AccelY,AccelZ,ChipID,AnalogValue1);
//	      CDC_Transmit_FS(SendBuffer,strlen(SendBuffer));
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		Duty = (Duty + 1) ;
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <main+0x268>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <main+0x268>)
 8000cc6:	6013      	str	r3, [r2, #0]
	      if (Duty > 100 )
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <main+0x268>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b64      	cmp	r3, #100	; 0x64
 8000cce:	f77f af53 	ble.w	8000b78 <main+0xe4>
	        Duty = 0;
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <main+0x268>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
	    htim4.Instance->CCR1 = Duty;
 8000cd8:	e74e      	b.n	8000b78 <main+0xe4>
 8000cda:	bf00      	nop
 8000cdc:	200002c0 	.word	0x200002c0
 8000ce0:	20000278 	.word	0x20000278
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	20000214 	.word	0x20000214
 8000cec:	20000210 	.word	0x20000210
 8000cf0:	20000220 	.word	0x20000220
 8000cf4:	20000216 	.word	0x20000216
 8000cf8:	40020c00 	.word	0x40020c00
 8000cfc:	20000204 	.word	0x20000204
 8000d00:	40020000 	.word	0x40020000
 8000d04:	20000200 	.word	0x20000200
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	000f4240 	.word	0x000f4240
 8000d10:	20000208 	.word	0x20000208
 8000d14:	20000217 	.word	0x20000217
 8000d18:	20000218 	.word	0x20000218
 8000d1c:	20000219 	.word	0x20000219
 8000d20:	2000020c 	.word	0x2000020c
 8000d24:	20000164 	.word	0x20000164
 8000d28:	2000021a 	.word	0x2000021a
 8000d2c:	2000011c 	.word	0x2000011c
 8000d30:	2000021c 	.word	0x2000021c

08000d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b094      	sub	sp, #80	; 0x50
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 0320 	add.w	r3, r7, #32
 8000d3e:	2230      	movs	r2, #48	; 0x30
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f009 ff46 	bl	800abd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <SystemClock_Config+0xcc>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	4a27      	ldr	r2, [pc, #156]	; (8000e00 <SystemClock_Config+0xcc>)
 8000d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d66:	6413      	str	r3, [r2, #64]	; 0x40
 8000d68:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <SystemClock_Config+0xcc>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <SystemClock_Config+0xd0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <SystemClock_Config+0xd0>)
 8000d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <SystemClock_Config+0xd0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d90:	2301      	movs	r3, #1
 8000d92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000da4:	2308      	movs	r3, #8
 8000da6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000da8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000db2:	2307      	movs	r3, #7
 8000db4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f003 ff60 	bl	8004c80 <HAL_RCC_OscConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dc6:	f000 f81f 	bl	8000e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	230f      	movs	r3, #15
 8000dcc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dd6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	2105      	movs	r1, #5
 8000de8:	4618      	mov	r0, r3
 8000dea:	f004 f9c1 	bl	8005170 <HAL_RCC_ClockConfig>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000df4:	f000 f808 	bl	8000e08 <Error_Handler>
  }
}
 8000df8:	bf00      	nop
 8000dfa:	3750      	adds	r7, #80	; 0x50
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40007000 	.word	0x40007000

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <Error_Handler+0x8>
	...

08000e14 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e1a:	4a18      	ldr	r2, [pc, #96]	; (8000e7c <MX_SPI1_Init+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e48:	2238      	movs	r2, #56	; 0x38
 8000e4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e60:	220a      	movs	r2, #10
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e64:	4804      	ldr	r0, [pc, #16]	; (8000e78 <MX_SPI1_Init+0x64>)
 8000e66:	f004 fcd1 	bl	800580c <HAL_SPI_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e70:	f7ff ffca 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000220 	.word	0x20000220
 8000e7c:	40013000 	.word	0x40013000

08000e80 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <HAL_SPI_MspInit+0x84>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d12b      	bne.n	8000efa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <HAL_SPI_MspInit+0x88>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <HAL_SPI_MspInit+0x88>)
 8000eac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_SPI_MspInit+0x88>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_SPI_MspInit+0x88>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a10      	ldr	r2, [pc, #64]	; (8000f08 <HAL_SPI_MspInit+0x88>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_SPI_MspInit+0x88>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000eda:	23e0      	movs	r3, #224	; 0xe0
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eea:	2305      	movs	r3, #5
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <HAL_SPI_MspInit+0x8c>)
 8000ef6:	f000 ffb9 	bl	8001e6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000efa:	bf00      	nop
 8000efc:	3728      	adds	r7, #40	; 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40013000 	.word	0x40013000
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a0f      	ldr	r2, [pc, #60]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	6413      	str	r3, [r2, #64]	; 0x40
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f4e:	2007      	movs	r0, #7
 8000f50:	f000 ff4a 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f64:	e7fe      	b.n	8000f64 <NMI_Handler+0x4>

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <MemManage_Handler+0x4>

08000f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <BusFault_Handler+0x4>

08000f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <UsageFault_Handler+0x4>

08000f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fac:	f000 fa3c 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <OTG_FS_IRQHandler+0x10>)
 8000fba:	f002 fd55 	bl	8003a68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200017ec 	.word	0x200017ec

08000fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <SystemInit+0x20>)
 8000fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <SystemInit+0x20>)
 8000fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08e      	sub	sp, #56	; 0x38
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001000:	f107 0320 	add.w	r3, r7, #32
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
 8001018:	615a      	str	r2, [r3, #20]
 800101a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800101c:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <MX_TIM2_Init+0xe4>)
 800101e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001022:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001024:	4b2a      	ldr	r3, [pc, #168]	; (80010d0 <MX_TIM2_Init+0xe4>)
 8001026:	2253      	movs	r2, #83	; 0x53
 8001028:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102a:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <MX_TIM2_Init+0xe4>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8001030:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <MX_TIM2_Init+0xe4>)
 8001032:	2263      	movs	r2, #99	; 0x63
 8001034:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <MX_TIM2_Init+0xe4>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103c:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <MX_TIM2_Init+0xe4>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001042:	4823      	ldr	r0, [pc, #140]	; (80010d0 <MX_TIM2_Init+0xe4>)
 8001044:	f004 fef8 	bl	8005e38 <HAL_TIM_Base_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800104e:	f7ff fedb 	bl	8000e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001058:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800105c:	4619      	mov	r1, r3
 800105e:	481c      	ldr	r0, [pc, #112]	; (80010d0 <MX_TIM2_Init+0xe4>)
 8001060:	f005 f98c 	bl	800637c <HAL_TIM_ConfigClockSource>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800106a:	f7ff fecd 	bl	8000e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800106e:	4818      	ldr	r0, [pc, #96]	; (80010d0 <MX_TIM2_Init+0xe4>)
 8001070:	f004 ff31 	bl	8005ed6 <HAL_TIM_PWM_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800107a:	f7ff fec5 	bl	8000e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	4619      	mov	r1, r3
 800108c:	4810      	ldr	r0, [pc, #64]	; (80010d0 <MX_TIM2_Init+0xe4>)
 800108e:	f005 fd59 	bl	8006b44 <HAL_TIMEx_MasterConfigSynchronization>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001098:	f7ff feb6 	bl	8000e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800109c:	2360      	movs	r3, #96	; 0x60
 800109e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2200      	movs	r2, #0
 80010b0:	4619      	mov	r1, r3
 80010b2:	4807      	ldr	r0, [pc, #28]	; (80010d0 <MX_TIM2_Init+0xe4>)
 80010b4:	f005 f8a0 	bl	80061f8 <HAL_TIM_PWM_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80010be:	f7ff fea3 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <MX_TIM2_Init+0xe4>)
 80010c4:	f000 f8d2 	bl	800126c <HAL_TIM_MspPostInit>

}
 80010c8:	bf00      	nop
 80010ca:	3738      	adds	r7, #56	; 0x38
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000278 	.word	0x20000278

080010d4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08e      	sub	sp, #56	; 0x38
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	615a      	str	r2, [r3, #20]
 8001102:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001104:	4b3c      	ldr	r3, [pc, #240]	; (80011f8 <MX_TIM4_Init+0x124>)
 8001106:	4a3d      	ldr	r2, [pc, #244]	; (80011fc <MX_TIM4_Init+0x128>)
 8001108:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800110a:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <MX_TIM4_Init+0x124>)
 800110c:	2253      	movs	r2, #83	; 0x53
 800110e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b39      	ldr	r3, [pc, #228]	; (80011f8 <MX_TIM4_Init+0x124>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001116:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <MX_TIM4_Init+0x124>)
 8001118:	2263      	movs	r2, #99	; 0x63
 800111a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111c:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <MX_TIM4_Init+0x124>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001122:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <MX_TIM4_Init+0x124>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001128:	4833      	ldr	r0, [pc, #204]	; (80011f8 <MX_TIM4_Init+0x124>)
 800112a:	f004 fe85 	bl	8005e38 <HAL_TIM_Base_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001134:	f7ff fe68 	bl	8000e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800113e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001142:	4619      	mov	r1, r3
 8001144:	482c      	ldr	r0, [pc, #176]	; (80011f8 <MX_TIM4_Init+0x124>)
 8001146:	f005 f919 	bl	800637c <HAL_TIM_ConfigClockSource>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001150:	f7ff fe5a 	bl	8000e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001154:	4828      	ldr	r0, [pc, #160]	; (80011f8 <MX_TIM4_Init+0x124>)
 8001156:	f004 febe 	bl	8005ed6 <HAL_TIM_PWM_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001160:	f7ff fe52 	bl	8000e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800116c:	f107 0320 	add.w	r3, r7, #32
 8001170:	4619      	mov	r1, r3
 8001172:	4821      	ldr	r0, [pc, #132]	; (80011f8 <MX_TIM4_Init+0x124>)
 8001174:	f005 fce6 	bl	8006b44 <HAL_TIMEx_MasterConfigSynchronization>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800117e:	f7ff fe43 	bl	8000e08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001182:	2360      	movs	r3, #96	; 0x60
 8001184:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	4619      	mov	r1, r3
 8001198:	4817      	ldr	r0, [pc, #92]	; (80011f8 <MX_TIM4_Init+0x124>)
 800119a:	f005 f82d 	bl	80061f8 <HAL_TIM_PWM_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80011a4:	f7ff fe30 	bl	8000e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2204      	movs	r2, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4812      	ldr	r0, [pc, #72]	; (80011f8 <MX_TIM4_Init+0x124>)
 80011b0:	f005 f822 	bl	80061f8 <HAL_TIM_PWM_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM4_Init+0xea>
  {
    Error_Handler();
 80011ba:	f7ff fe25 	bl	8000e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2208      	movs	r2, #8
 80011c2:	4619      	mov	r1, r3
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <MX_TIM4_Init+0x124>)
 80011c6:	f005 f817 	bl	80061f8 <HAL_TIM_PWM_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 80011d0:	f7ff fe1a 	bl	8000e08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	220c      	movs	r2, #12
 80011d8:	4619      	mov	r1, r3
 80011da:	4807      	ldr	r0, [pc, #28]	; (80011f8 <MX_TIM4_Init+0x124>)
 80011dc:	f005 f80c 	bl	80061f8 <HAL_TIM_PWM_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 80011e6:	f7ff fe0f 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <MX_TIM4_Init+0x124>)
 80011ec:	f000 f83e 	bl	800126c <HAL_TIM_MspPostInit>

}
 80011f0:	bf00      	nop
 80011f2:	3738      	adds	r7, #56	; 0x38
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200002c0 	.word	0x200002c0
 80011fc:	40000800 	.word	0x40000800

08001200 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001210:	d10e      	bne.n	8001230 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_TIM_Base_MspInit+0x64>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <HAL_TIM_Base_MspInit+0x64>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_TIM_Base_MspInit+0x64>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800122e:	e012      	b.n	8001256 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <HAL_TIM_Base_MspInit+0x68>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d10d      	bne.n	8001256 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_TIM_Base_MspInit+0x64>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_TIM_Base_MspInit+0x64>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_TIM_Base_MspInit+0x64>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	40000800 	.word	0x40000800

0800126c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800128c:	d11f      	bne.n	80012ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b23      	ldr	r3, [pc, #140]	; (8001320 <HAL_TIM_MspPostInit+0xb4>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a22      	ldr	r2, [pc, #136]	; (8001320 <HAL_TIM_MspPostInit+0xb4>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b20      	ldr	r3, [pc, #128]	; (8001320 <HAL_TIM_MspPostInit+0xb4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012bc:	2301      	movs	r3, #1
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4817      	ldr	r0, [pc, #92]	; (8001324 <HAL_TIM_MspPostInit+0xb8>)
 80012c8:	f000 fdd0 	bl	8001e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012cc:	e023      	b.n	8001316 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM4)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a15      	ldr	r2, [pc, #84]	; (8001328 <HAL_TIM_MspPostInit+0xbc>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d11e      	bne.n	8001316 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	4b10      	ldr	r3, [pc, #64]	; (8001320 <HAL_TIM_MspPostInit+0xb4>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	4a0f      	ldr	r2, [pc, #60]	; (8001320 <HAL_TIM_MspPostInit+0xb4>)
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	6313      	str	r3, [r2, #48]	; 0x30
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <HAL_TIM_MspPostInit+0xb4>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80012f4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001306:	2302      	movs	r3, #2
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	4806      	ldr	r0, [pc, #24]	; (800132c <HAL_TIM_MspPostInit+0xc0>)
 8001312:	f000 fdab 	bl	8001e6c <HAL_GPIO_Init>
}
 8001316:	bf00      	nop
 8001318:	3728      	adds	r7, #40	; 0x28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40020000 	.word	0x40020000
 8001328:	40000800 	.word	0x40000800
 800132c:	40020c00 	.word	0x40020c00

08001330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001368 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001334:	f7ff fe48 	bl	8000fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001338:	480c      	ldr	r0, [pc, #48]	; (800136c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800133a:	490d      	ldr	r1, [pc, #52]	; (8001370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001350:	4c0a      	ldr	r4, [pc, #40]	; (800137c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135e:	f009 fc41 	bl	800abe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001362:	f7ff fb97 	bl	8000a94 <main>
  bx  lr    
 8001366:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001374:	0800acb4 	.word	0x0800acb4
  ldr r2, =_sbss
 8001378:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 800137c:	20001ef0 	.word	0x20001ef0

08001380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC_IRQHandler>
	...

08001384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <HAL_Init+0x40>)
 800138e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <HAL_Init+0x40>)
 800139a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_Init+0x40>)
 80013a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 fd1b 	bl	8001de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 f808 	bl	80013c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff fdaa 	bl	8000f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023c00 	.word	0x40023c00

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x54>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 fd33 	bl	8001e52 <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 fcfb 	bl	8001dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_InitTick+0x5c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000004 	.word	0x20000004
 8001420:	2000000c 	.word	0x2000000c
 8001424:	20000008 	.word	0x20000008

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	2000000c 	.word	0x2000000c
 800144c:	20000308 	.word	0x20000308

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000308 	.word	0x20000308

08001468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001470:	f7ff ffee 	bl	8001450 <HAL_GetTick>
 8001474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001480:	d005      	beq.n	800148e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_Delay+0x44>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800148e:	bf00      	nop
 8001490:	f7ff ffde 	bl	8001450 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d8f7      	bhi.n	8001490 <HAL_Delay+0x28>
  {
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2000000c 	.word	0x2000000c

080014b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e033      	b.n	800152e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d109      	bne.n	80014e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff f84a 	bl	8000568 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d118      	bne.n	8001520 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014f6:	f023 0302 	bic.w	r3, r3, #2
 80014fa:	f043 0202 	orr.w	r2, r3, #2
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 faa4 	bl	8001a50 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f023 0303 	bic.w	r3, r3, #3
 8001516:	f043 0201 	orr.w	r2, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	641a      	str	r2, [r3, #64]	; 0x40
 800151e:	e001      	b.n	8001524 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800152c:	7bfb      	ldrb	r3, [r7, #15]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800154a:	2b01      	cmp	r3, #1
 800154c:	d101      	bne.n	8001552 <HAL_ADC_Start+0x1a>
 800154e:	2302      	movs	r3, #2
 8001550:	e0b2      	b.n	80016b8 <HAL_ADC_Start+0x180>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2201      	movs	r2, #1
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b01      	cmp	r3, #1
 8001566:	d018      	beq.n	800159a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0201 	orr.w	r2, r2, #1
 8001576:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001578:	4b52      	ldr	r3, [pc, #328]	; (80016c4 <HAL_ADC_Start+0x18c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a52      	ldr	r2, [pc, #328]	; (80016c8 <HAL_ADC_Start+0x190>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	0c9a      	lsrs	r2, r3, #18
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800158c:	e002      	b.n	8001594 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	3b01      	subs	r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f9      	bne.n	800158e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d17a      	bne.n	800169e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015b0:	f023 0301 	bic.w	r3, r3, #1
 80015b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d007      	beq.n	80015da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015e6:	d106      	bne.n	80015f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	f023 0206 	bic.w	r2, r3, #6
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	645a      	str	r2, [r3, #68]	; 0x44
 80015f4:	e002      	b.n	80015fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001604:	4b31      	ldr	r3, [pc, #196]	; (80016cc <HAL_ADC_Start+0x194>)
 8001606:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001610:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 031f 	and.w	r3, r3, #31
 800161a:	2b00      	cmp	r3, #0
 800161c:	d12a      	bne.n	8001674 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a2b      	ldr	r2, [pc, #172]	; (80016d0 <HAL_ADC_Start+0x198>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d015      	beq.n	8001654 <HAL_ADC_Start+0x11c>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a29      	ldr	r2, [pc, #164]	; (80016d4 <HAL_ADC_Start+0x19c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d105      	bne.n	800163e <HAL_ADC_Start+0x106>
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <HAL_ADC_Start+0x194>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 031f 	and.w	r3, r3, #31
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00a      	beq.n	8001654 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a25      	ldr	r2, [pc, #148]	; (80016d8 <HAL_ADC_Start+0x1a0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d136      	bne.n	80016b6 <HAL_ADC_Start+0x17e>
 8001648:	4b20      	ldr	r3, [pc, #128]	; (80016cc <HAL_ADC_Start+0x194>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	2b00      	cmp	r3, #0
 8001652:	d130      	bne.n	80016b6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d129      	bne.n	80016b6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	e020      	b.n	80016b6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a15      	ldr	r2, [pc, #84]	; (80016d0 <HAL_ADC_Start+0x198>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d11b      	bne.n	80016b6 <HAL_ADC_Start+0x17e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d114      	bne.n	80016b6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	e00b      	b.n	80016b6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f043 0210 	orr.w	r2, r3, #16
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f043 0201 	orr.w	r2, r3, #1
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	20000004 	.word	0x20000004
 80016c8:	431bde83 	.word	0x431bde83
 80016cc:	40012300 	.word	0x40012300
 80016d0:	40012000 	.word	0x40012000
 80016d4:	40012100 	.word	0x40012100
 80016d8:	40012200 	.word	0x40012200

080016dc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f8:	d113      	bne.n	8001722 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001708:	d10b      	bne.n	8001722 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f043 0220 	orr.w	r2, r3, #32
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e063      	b.n	80017ea <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001722:	f7ff fe95 	bl	8001450 <HAL_GetTick>
 8001726:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001728:	e021      	b.n	800176e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001730:	d01d      	beq.n	800176e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d007      	beq.n	8001748 <HAL_ADC_PollForConversion+0x6c>
 8001738:	f7ff fe8a 	bl	8001450 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d212      	bcs.n	800176e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b02      	cmp	r3, #2
 8001754:	d00b      	beq.n	800176e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f043 0204 	orr.w	r2, r3, #4
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e03d      	b.n	80017ea <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b02      	cmp	r3, #2
 800177a:	d1d6      	bne.n	800172a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f06f 0212 	mvn.w	r2, #18
 8001784:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d123      	bne.n	80017e8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d11f      	bne.n	80017e8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d111      	bne.n	80017e8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f043 0201 	orr.w	r2, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_ADC_ConfigChannel+0x1c>
 8001824:	2302      	movs	r3, #2
 8001826:	e105      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x228>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b09      	cmp	r3, #9
 8001836:	d925      	bls.n	8001884 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68d9      	ldr	r1, [r3, #12]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	3b1e      	subs	r3, #30
 800184e:	2207      	movs	r2, #7
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43da      	mvns	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	400a      	ands	r2, r1
 800185c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68d9      	ldr	r1, [r3, #12]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	4618      	mov	r0, r3
 8001870:	4603      	mov	r3, r0
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4403      	add	r3, r0
 8001876:	3b1e      	subs	r3, #30
 8001878:	409a      	lsls	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	e022      	b.n	80018ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6919      	ldr	r1, [r3, #16]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	b29b      	uxth	r3, r3
 8001890:	461a      	mov	r2, r3
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	2207      	movs	r2, #7
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	400a      	ands	r2, r1
 80018a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6919      	ldr	r1, [r3, #16]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	4618      	mov	r0, r3
 80018ba:	4603      	mov	r3, r0
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4403      	add	r3, r0
 80018c0:	409a      	lsls	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d824      	bhi.n	800191c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	3b05      	subs	r3, #5
 80018e4:	221f      	movs	r2, #31
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	400a      	ands	r2, r1
 80018f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	4618      	mov	r0, r3
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	3b05      	subs	r3, #5
 800190e:	fa00 f203 	lsl.w	r2, r0, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	635a      	str	r2, [r3, #52]	; 0x34
 800191a:	e04c      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b0c      	cmp	r3, #12
 8001922:	d824      	bhi.n	800196e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	3b23      	subs	r3, #35	; 0x23
 8001936:	221f      	movs	r2, #31
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43da      	mvns	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	400a      	ands	r2, r1
 8001944:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	b29b      	uxth	r3, r3
 8001952:	4618      	mov	r0, r3
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	3b23      	subs	r3, #35	; 0x23
 8001960:	fa00 f203 	lsl.w	r2, r0, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	631a      	str	r2, [r3, #48]	; 0x30
 800196c:	e023      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	3b41      	subs	r3, #65	; 0x41
 8001980:	221f      	movs	r2, #31
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	400a      	ands	r2, r1
 800198e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	b29b      	uxth	r3, r3
 800199c:	4618      	mov	r0, r3
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	3b41      	subs	r3, #65	; 0x41
 80019aa:	fa00 f203 	lsl.w	r2, r0, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019b6:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <HAL_ADC_ConfigChannel+0x234>)
 80019b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a21      	ldr	r2, [pc, #132]	; (8001a44 <HAL_ADC_ConfigChannel+0x238>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d109      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x1cc>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b12      	cmp	r3, #18
 80019ca:	d105      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a19      	ldr	r2, [pc, #100]	; (8001a44 <HAL_ADC_ConfigChannel+0x238>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d123      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x21e>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b10      	cmp	r3, #16
 80019e8:	d003      	beq.n	80019f2 <HAL_ADC_ConfigChannel+0x1e6>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b11      	cmp	r3, #17
 80019f0:	d11b      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b10      	cmp	r3, #16
 8001a04:	d111      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_ADC_ConfigChannel+0x23c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_ADC_ConfigChannel+0x240>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	0c9a      	lsrs	r2, r3, #18
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a1c:	e002      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f9      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	40012300 	.word	0x40012300
 8001a44:	40012000 	.word	0x40012000
 8001a48:	20000004 	.word	0x20000004
 8001a4c:	431bde83 	.word	0x431bde83

08001a50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a58:	4b79      	ldr	r3, [pc, #484]	; (8001c40 <ADC_Init+0x1f0>)
 8001a5a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	431a      	orrs	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	021a      	lsls	r2, r3, #8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001aa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6859      	ldr	r1, [r3, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6899      	ldr	r1, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae2:	4a58      	ldr	r2, [pc, #352]	; (8001c44 <ADC_Init+0x1f4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d022      	beq.n	8001b2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001af6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6899      	ldr	r1, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6899      	ldr	r1, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	e00f      	b.n	8001b4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b4c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0202 	bic.w	r2, r2, #2
 8001b5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6899      	ldr	r1, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7e1b      	ldrb	r3, [r3, #24]
 8001b68:	005a      	lsls	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d01b      	beq.n	8001bb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b8a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6859      	ldr	r1, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	035a      	lsls	r2, r3, #13
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	e007      	b.n	8001bc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bc2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	051a      	lsls	r2, r3, #20
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6899      	ldr	r1, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c06:	025a      	lsls	r2, r3, #9
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6899      	ldr	r1, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	029a      	lsls	r2, r3, #10
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	609a      	str	r2, [r3, #8]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40012300 	.word	0x40012300
 8001c44:	0f000001 	.word	0x0f000001

08001c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7a:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	60d3      	str	r3, [r2, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	db0b      	blt.n	8001cd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	4907      	ldr	r1, [pc, #28]	; (8001ce4 <__NVIC_EnableIRQ+0x38>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2001      	movs	r0, #1
 8001cce:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e100 	.word	0xe000e100

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db0a      	blt.n	8001d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	490c      	ldr	r1, [pc, #48]	; (8001d34 <__NVIC_SetPriority+0x4c>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d10:	e00a      	b.n	8001d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4908      	ldr	r1, [pc, #32]	; (8001d38 <__NVIC_SetPriority+0x50>)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3b04      	subs	r3, #4
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f1c3 0307 	rsb	r3, r3, #7
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf28      	it	cs
 8001d5a:	2304      	movcs	r3, #4
 8001d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3304      	adds	r3, #4
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d902      	bls.n	8001d6c <NVIC_EncodePriority+0x30>
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3b03      	subs	r3, #3
 8001d6a:	e000      	b.n	8001d6e <NVIC_EncodePriority+0x32>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	401a      	ands	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	4313      	orrs	r3, r2
         );
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db4:	d301      	bcc.n	8001dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00f      	b.n	8001dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dba:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <SysTick_Config+0x40>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc8:	f7ff ff8e 	bl	8001ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <SysTick_Config+0x40>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <SysTick_Config+0x40>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff29 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e10:	f7ff ff3e 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	68b9      	ldr	r1, [r7, #8]
 8001e1a:	6978      	ldr	r0, [r7, #20]
 8001e1c:	f7ff ff8e 	bl	8001d3c <NVIC_EncodePriority>
 8001e20:	4602      	mov	r2, r0
 8001e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff5d 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001e2e:	bf00      	nop
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff31 	bl	8001cac <__NVIC_EnableIRQ>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ffa2 	bl	8001da4 <SysTick_Config>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	e16b      	b.n	8002160 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e88:	2201      	movs	r2, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	f040 815a 	bne.w	800215a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d005      	beq.n	8001ebe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d130      	bne.n	8001f20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	2203      	movs	r2, #3
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 0201 	and.w	r2, r3, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d017      	beq.n	8001f5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d123      	bne.n	8001fb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	08da      	lsrs	r2, r3, #3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3208      	adds	r2, #8
 8001f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	08da      	lsrs	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3208      	adds	r2, #8
 8001faa:	69b9      	ldr	r1, [r7, #24]
 8001fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0203 	and.w	r2, r3, #3
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80b4 	beq.w	800215a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b60      	ldr	r3, [pc, #384]	; (8002178 <HAL_GPIO_Init+0x30c>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	4a5f      	ldr	r2, [pc, #380]	; (8002178 <HAL_GPIO_Init+0x30c>)
 8001ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002000:	6453      	str	r3, [r2, #68]	; 0x44
 8002002:	4b5d      	ldr	r3, [pc, #372]	; (8002178 <HAL_GPIO_Init+0x30c>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800200e:	4a5b      	ldr	r2, [pc, #364]	; (800217c <HAL_GPIO_Init+0x310>)
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	089b      	lsrs	r3, r3, #2
 8002014:	3302      	adds	r3, #2
 8002016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	220f      	movs	r2, #15
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a52      	ldr	r2, [pc, #328]	; (8002180 <HAL_GPIO_Init+0x314>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d02b      	beq.n	8002092 <HAL_GPIO_Init+0x226>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a51      	ldr	r2, [pc, #324]	; (8002184 <HAL_GPIO_Init+0x318>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d025      	beq.n	800208e <HAL_GPIO_Init+0x222>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a50      	ldr	r2, [pc, #320]	; (8002188 <HAL_GPIO_Init+0x31c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01f      	beq.n	800208a <HAL_GPIO_Init+0x21e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4f      	ldr	r2, [pc, #316]	; (800218c <HAL_GPIO_Init+0x320>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d019      	beq.n	8002086 <HAL_GPIO_Init+0x21a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4e      	ldr	r2, [pc, #312]	; (8002190 <HAL_GPIO_Init+0x324>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_GPIO_Init+0x216>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4d      	ldr	r2, [pc, #308]	; (8002194 <HAL_GPIO_Init+0x328>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00d      	beq.n	800207e <HAL_GPIO_Init+0x212>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4c      	ldr	r2, [pc, #304]	; (8002198 <HAL_GPIO_Init+0x32c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <HAL_GPIO_Init+0x20e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4b      	ldr	r2, [pc, #300]	; (800219c <HAL_GPIO_Init+0x330>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d101      	bne.n	8002076 <HAL_GPIO_Init+0x20a>
 8002072:	2307      	movs	r3, #7
 8002074:	e00e      	b.n	8002094 <HAL_GPIO_Init+0x228>
 8002076:	2308      	movs	r3, #8
 8002078:	e00c      	b.n	8002094 <HAL_GPIO_Init+0x228>
 800207a:	2306      	movs	r3, #6
 800207c:	e00a      	b.n	8002094 <HAL_GPIO_Init+0x228>
 800207e:	2305      	movs	r3, #5
 8002080:	e008      	b.n	8002094 <HAL_GPIO_Init+0x228>
 8002082:	2304      	movs	r3, #4
 8002084:	e006      	b.n	8002094 <HAL_GPIO_Init+0x228>
 8002086:	2303      	movs	r3, #3
 8002088:	e004      	b.n	8002094 <HAL_GPIO_Init+0x228>
 800208a:	2302      	movs	r3, #2
 800208c:	e002      	b.n	8002094 <HAL_GPIO_Init+0x228>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_GPIO_Init+0x228>
 8002092:	2300      	movs	r3, #0
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	f002 0203 	and.w	r2, r2, #3
 800209a:	0092      	lsls	r2, r2, #2
 800209c:	4093      	lsls	r3, r2
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a4:	4935      	ldr	r1, [pc, #212]	; (800217c <HAL_GPIO_Init+0x310>)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	3302      	adds	r3, #2
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b2:	4b3b      	ldr	r3, [pc, #236]	; (80021a0 <HAL_GPIO_Init+0x334>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020d6:	4a32      	ldr	r2, [pc, #200]	; (80021a0 <HAL_GPIO_Init+0x334>)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020dc:	4b30      	ldr	r3, [pc, #192]	; (80021a0 <HAL_GPIO_Init+0x334>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002100:	4a27      	ldr	r2, [pc, #156]	; (80021a0 <HAL_GPIO_Init+0x334>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002106:	4b26      	ldr	r3, [pc, #152]	; (80021a0 <HAL_GPIO_Init+0x334>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800212a:	4a1d      	ldr	r2, [pc, #116]	; (80021a0 <HAL_GPIO_Init+0x334>)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <HAL_GPIO_Init+0x334>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002154:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <HAL_GPIO_Init+0x334>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3301      	adds	r3, #1
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	2b0f      	cmp	r3, #15
 8002164:	f67f ae90 	bls.w	8001e88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3724      	adds	r7, #36	; 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800
 800217c:	40013800 	.word	0x40013800
 8002180:	40020000 	.word	0x40020000
 8002184:	40020400 	.word	0x40020400
 8002188:	40020800 	.word	0x40020800
 800218c:	40020c00 	.word	0x40020c00
 8002190:	40021000 	.word	0x40021000
 8002194:	40021400 	.word	0x40021400
 8002198:	40021800 	.word	0x40021800
 800219c:	40021c00 	.word	0x40021c00
 80021a0:	40013c00 	.word	0x40013c00

080021a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	887b      	ldrh	r3, [r7, #2]
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e001      	b.n	80021c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
 80021e0:	4613      	mov	r3, r2
 80021e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e4:	787b      	ldrb	r3, [r7, #1]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021f0:	e003      	b.n	80021fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021f2:	887b      	ldrh	r3, [r7, #2]
 80021f4:	041a      	lsls	r2, r3, #16
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	619a      	str	r2, [r3, #24]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e12b      	b.n	8002472 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7fe fb08 	bl	8000844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2224      	movs	r2, #36	; 0x24
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800225a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800226a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800226c:	f003 f978 	bl	8005560 <HAL_RCC_GetPCLK1Freq>
 8002270:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4a81      	ldr	r2, [pc, #516]	; (800247c <HAL_I2C_Init+0x274>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d807      	bhi.n	800228c <HAL_I2C_Init+0x84>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4a80      	ldr	r2, [pc, #512]	; (8002480 <HAL_I2C_Init+0x278>)
 8002280:	4293      	cmp	r3, r2
 8002282:	bf94      	ite	ls
 8002284:	2301      	movls	r3, #1
 8002286:	2300      	movhi	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	e006      	b.n	800229a <HAL_I2C_Init+0x92>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4a7d      	ldr	r2, [pc, #500]	; (8002484 <HAL_I2C_Init+0x27c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	bf94      	ite	ls
 8002294:	2301      	movls	r3, #1
 8002296:	2300      	movhi	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e0e7      	b.n	8002472 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a78      	ldr	r2, [pc, #480]	; (8002488 <HAL_I2C_Init+0x280>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	0c9b      	lsrs	r3, r3, #18
 80022ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	430a      	orrs	r2, r1
 80022c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	4a6a      	ldr	r2, [pc, #424]	; (800247c <HAL_I2C_Init+0x274>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d802      	bhi.n	80022dc <HAL_I2C_Init+0xd4>
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	3301      	adds	r3, #1
 80022da:	e009      	b.n	80022f0 <HAL_I2C_Init+0xe8>
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022e2:	fb02 f303 	mul.w	r3, r2, r3
 80022e6:	4a69      	ldr	r2, [pc, #420]	; (800248c <HAL_I2C_Init+0x284>)
 80022e8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ec:	099b      	lsrs	r3, r3, #6
 80022ee:	3301      	adds	r3, #1
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	430b      	orrs	r3, r1
 80022f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002302:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	495c      	ldr	r1, [pc, #368]	; (800247c <HAL_I2C_Init+0x274>)
 800230c:	428b      	cmp	r3, r1
 800230e:	d819      	bhi.n	8002344 <HAL_I2C_Init+0x13c>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1e59      	subs	r1, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	fbb1 f3f3 	udiv	r3, r1, r3
 800231e:	1c59      	adds	r1, r3, #1
 8002320:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002324:	400b      	ands	r3, r1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <HAL_I2C_Init+0x138>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1e59      	subs	r1, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	fbb1 f3f3 	udiv	r3, r1, r3
 8002338:	3301      	adds	r3, #1
 800233a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233e:	e051      	b.n	80023e4 <HAL_I2C_Init+0x1dc>
 8002340:	2304      	movs	r3, #4
 8002342:	e04f      	b.n	80023e4 <HAL_I2C_Init+0x1dc>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d111      	bne.n	8002370 <HAL_I2C_Init+0x168>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1e58      	subs	r0, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	440b      	add	r3, r1
 800235a:	fbb0 f3f3 	udiv	r3, r0, r3
 800235e:	3301      	adds	r3, #1
 8002360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002364:	2b00      	cmp	r3, #0
 8002366:	bf0c      	ite	eq
 8002368:	2301      	moveq	r3, #1
 800236a:	2300      	movne	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	e012      	b.n	8002396 <HAL_I2C_Init+0x18e>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1e58      	subs	r0, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6859      	ldr	r1, [r3, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	0099      	lsls	r1, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	fbb0 f3f3 	udiv	r3, r0, r3
 8002386:	3301      	adds	r3, #1
 8002388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238c:	2b00      	cmp	r3, #0
 800238e:	bf0c      	ite	eq
 8002390:	2301      	moveq	r3, #1
 8002392:	2300      	movne	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_I2C_Init+0x196>
 800239a:	2301      	movs	r3, #1
 800239c:	e022      	b.n	80023e4 <HAL_I2C_Init+0x1dc>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10e      	bne.n	80023c4 <HAL_I2C_Init+0x1bc>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	1e58      	subs	r0, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6859      	ldr	r1, [r3, #4]
 80023ae:	460b      	mov	r3, r1
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	440b      	add	r3, r1
 80023b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b8:	3301      	adds	r3, #1
 80023ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c2:	e00f      	b.n	80023e4 <HAL_I2C_Init+0x1dc>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1e58      	subs	r0, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	0099      	lsls	r1, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023da:	3301      	adds	r3, #1
 80023dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	6809      	ldr	r1, [r1, #0]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69da      	ldr	r2, [r3, #28]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002412:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6911      	ldr	r1, [r2, #16]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68d2      	ldr	r2, [r2, #12]
 800241e:	4311      	orrs	r1, r2
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	430b      	orrs	r3, r1
 8002426:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2220      	movs	r2, #32
 800245e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	000186a0 	.word	0x000186a0
 8002480:	001e847f 	.word	0x001e847f
 8002484:	003d08ff 	.word	0x003d08ff
 8002488:	431bde83 	.word	0x431bde83
 800248c:	10624dd3 	.word	0x10624dd3

08002490 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08c      	sub	sp, #48	; 0x30
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	4608      	mov	r0, r1
 800249a:	4611      	mov	r1, r2
 800249c:	461a      	mov	r2, r3
 800249e:	4603      	mov	r3, r0
 80024a0:	817b      	strh	r3, [r7, #10]
 80024a2:	460b      	mov	r3, r1
 80024a4:	813b      	strh	r3, [r7, #8]
 80024a6:	4613      	mov	r3, r2
 80024a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024aa:	f7fe ffd1 	bl	8001450 <HAL_GetTick>
 80024ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	f040 8214 	bne.w	80028e6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2319      	movs	r3, #25
 80024c4:	2201      	movs	r2, #1
 80024c6:	497b      	ldr	r1, [pc, #492]	; (80026b4 <HAL_I2C_Mem_Read+0x224>)
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 fafb 	bl	8002ac4 <I2C_WaitOnFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80024d4:	2302      	movs	r3, #2
 80024d6:	e207      	b.n	80028e8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_I2C_Mem_Read+0x56>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e200      	b.n	80028e8 <HAL_I2C_Mem_Read+0x458>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d007      	beq.n	800250c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800251a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2222      	movs	r2, #34	; 0x22
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2240      	movs	r2, #64	; 0x40
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002536:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800253c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4a5b      	ldr	r2, [pc, #364]	; (80026b8 <HAL_I2C_Mem_Read+0x228>)
 800254c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800254e:	88f8      	ldrh	r0, [r7, #6]
 8002550:	893a      	ldrh	r2, [r7, #8]
 8002552:	8979      	ldrh	r1, [r7, #10]
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	9301      	str	r3, [sp, #4]
 8002558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	4603      	mov	r3, r0
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 f9c8 	bl	80028f4 <I2C_RequestMemoryRead>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e1bc      	b.n	80028e8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002572:	2b00      	cmp	r3, #0
 8002574:	d113      	bne.n	800259e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002576:	2300      	movs	r3, #0
 8002578:	623b      	str	r3, [r7, #32]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	623b      	str	r3, [r7, #32]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	623b      	str	r3, [r7, #32]
 800258a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e190      	b.n	80028c0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d11b      	bne.n	80025de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	e170      	b.n	80028c0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d11b      	bne.n	800261e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002604:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002606:	2300      	movs	r3, #0
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	e150      	b.n	80028c0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002634:	e144      	b.n	80028c0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263a:	2b03      	cmp	r3, #3
 800263c:	f200 80f1 	bhi.w	8002822 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	2b01      	cmp	r3, #1
 8002646:	d123      	bne.n	8002690 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fb9b 	bl	8002d88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e145      	b.n	80028e8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800268e:	e117      	b.n	80028c0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002694:	2b02      	cmp	r3, #2
 8002696:	d14e      	bne.n	8002736 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269e:	2200      	movs	r2, #0
 80026a0:	4906      	ldr	r1, [pc, #24]	; (80026bc <HAL_I2C_Mem_Read+0x22c>)
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 fa0e 	bl	8002ac4 <I2C_WaitOnFlagUntilTimeout>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d008      	beq.n	80026c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e11a      	b.n	80028e8 <HAL_I2C_Mem_Read+0x458>
 80026b2:	bf00      	nop
 80026b4:	00100002 	.word	0x00100002
 80026b8:	ffff0000 	.word	0xffff0000
 80026bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	1c5a      	adds	r2, r3, #1
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272a:	b29b      	uxth	r3, r3
 800272c:	3b01      	subs	r3, #1
 800272e:	b29a      	uxth	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002734:	e0c4      	b.n	80028c0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273c:	2200      	movs	r2, #0
 800273e:	496c      	ldr	r1, [pc, #432]	; (80028f0 <HAL_I2C_Mem_Read+0x460>)
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	f000 f9bf 	bl	8002ac4 <I2C_WaitOnFlagUntilTimeout>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0cb      	b.n	80028e8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800275e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277c:	3b01      	subs	r3, #1
 800277e:	b29a      	uxth	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002798:	2200      	movs	r2, #0
 800279a:	4955      	ldr	r1, [pc, #340]	; (80028f0 <HAL_I2C_Mem_Read+0x460>)
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 f991 	bl	8002ac4 <I2C_WaitOnFlagUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e09d      	b.n	80028e8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002816:	b29b      	uxth	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002820:	e04e      	b.n	80028c0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002824:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 faae 	bl	8002d88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e058      	b.n	80028e8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b04      	cmp	r3, #4
 8002874:	d124      	bne.n	80028c0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287a:	2b03      	cmp	r3, #3
 800287c:	d107      	bne.n	800288e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800288c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f47f aeb6 	bne.w	8002636 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e000      	b.n	80028e8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80028e6:	2302      	movs	r3, #2
  }
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3728      	adds	r7, #40	; 0x28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	00010004 	.word	0x00010004

080028f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	4608      	mov	r0, r1
 80028fe:	4611      	mov	r1, r2
 8002900:	461a      	mov	r2, r3
 8002902:	4603      	mov	r3, r0
 8002904:	817b      	strh	r3, [r7, #10]
 8002906:	460b      	mov	r3, r1
 8002908:	813b      	strh	r3, [r7, #8]
 800290a:	4613      	mov	r3, r2
 800290c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800291c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800292c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	2200      	movs	r2, #0
 8002936:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f8c2 	bl	8002ac4 <I2C_WaitOnFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00d      	beq.n	8002962 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002954:	d103      	bne.n	800295e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e0aa      	b.n	8002ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002962:	897b      	ldrh	r3, [r7, #10]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002970:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	6a3a      	ldr	r2, [r7, #32]
 8002976:	4952      	ldr	r1, [pc, #328]	; (8002ac0 <I2C_RequestMemoryRead+0x1cc>)
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 f91d 	bl	8002bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e097      	b.n	8002ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800299e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a0:	6a39      	ldr	r1, [r7, #32]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f9a8 	bl	8002cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00d      	beq.n	80029ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d107      	bne.n	80029c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e076      	b.n	8002ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d105      	bne.n	80029dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029d0:	893b      	ldrh	r3, [r7, #8]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	611a      	str	r2, [r3, #16]
 80029da:	e021      	b.n	8002a20 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029dc:	893b      	ldrh	r3, [r7, #8]
 80029de:	0a1b      	lsrs	r3, r3, #8
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ec:	6a39      	ldr	r1, [r7, #32]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 f982 	bl	8002cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00d      	beq.n	8002a16 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d107      	bne.n	8002a12 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e050      	b.n	8002ab8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a16:	893b      	ldrh	r3, [r7, #8]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a22:	6a39      	ldr	r1, [r7, #32]
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f967 	bl	8002cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00d      	beq.n	8002a4c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d107      	bne.n	8002a48 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a46:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e035      	b.n	8002ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a5a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	6a3b      	ldr	r3, [r7, #32]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f82b 	bl	8002ac4 <I2C_WaitOnFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00d      	beq.n	8002a90 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a82:	d103      	bne.n	8002a8c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e013      	b.n	8002ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a90:	897b      	ldrh	r3, [r7, #10]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	6a3a      	ldr	r2, [r7, #32]
 8002aa4:	4906      	ldr	r1, [pc, #24]	; (8002ac0 <I2C_RequestMemoryRead+0x1cc>)
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 f886 	bl	8002bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	00010002 	.word	0x00010002

08002ac4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ad4:	e048      	b.n	8002b68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d044      	beq.n	8002b68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ade:	f7fe fcb7 	bl	8001450 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d302      	bcc.n	8002af4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d139      	bne.n	8002b68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	0c1b      	lsrs	r3, r3, #16
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d10d      	bne.n	8002b1a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	43da      	mvns	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	e00c      	b.n	8002b34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	43da      	mvns	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4013      	ands	r3, r2
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d116      	bne.n	8002b68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	f043 0220 	orr.w	r2, r3, #32
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e023      	b.n	8002bb0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	0c1b      	lsrs	r3, r3, #16
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d10d      	bne.n	8002b8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	43da      	mvns	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf0c      	ite	eq
 8002b84:	2301      	moveq	r3, #1
 8002b86:	2300      	movne	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	e00c      	b.n	8002ba8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	43da      	mvns	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d093      	beq.n	8002ad6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bc6:	e071      	b.n	8002cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd6:	d123      	bne.n	8002c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	f043 0204 	orr.w	r2, r3, #4
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e067      	b.n	8002cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c26:	d041      	beq.n	8002cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c28:	f7fe fc12 	bl	8001450 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d302      	bcc.n	8002c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d136      	bne.n	8002cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	0c1b      	lsrs	r3, r3, #16
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d10c      	bne.n	8002c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	43da      	mvns	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4013      	ands	r3, r2
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	bf14      	ite	ne
 8002c5a:	2301      	movne	r3, #1
 8002c5c:	2300      	moveq	r3, #0
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	e00b      	b.n	8002c7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	43da      	mvns	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf14      	ite	ne
 8002c74:	2301      	movne	r3, #1
 8002c76:	2300      	moveq	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d016      	beq.n	8002cac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f043 0220 	orr.w	r2, r3, #32
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e021      	b.n	8002cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	0c1b      	lsrs	r3, r3, #16
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d10c      	bne.n	8002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	43da      	mvns	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	bf14      	ite	ne
 8002cc8:	2301      	movne	r3, #1
 8002cca:	2300      	moveq	r3, #0
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	e00b      	b.n	8002ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	43da      	mvns	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bf14      	ite	ne
 8002ce2:	2301      	movne	r3, #1
 8002ce4:	2300      	moveq	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f47f af6d 	bne.w	8002bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d04:	e034      	b.n	8002d70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f89b 	bl	8002e42 <I2C_IsAcknowledgeFailed>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e034      	b.n	8002d80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d028      	beq.n	8002d70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1e:	f7fe fb97 	bl	8001450 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d302      	bcc.n	8002d34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d11d      	bne.n	8002d70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3e:	2b80      	cmp	r3, #128	; 0x80
 8002d40:	d016      	beq.n	8002d70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	f043 0220 	orr.w	r2, r3, #32
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e007      	b.n	8002d80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7a:	2b80      	cmp	r3, #128	; 0x80
 8002d7c:	d1c3      	bne.n	8002d06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d94:	e049      	b.n	8002e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b10      	cmp	r3, #16
 8002da2:	d119      	bne.n	8002dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f06f 0210 	mvn.w	r2, #16
 8002dac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e030      	b.n	8002e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd8:	f7fe fb3a 	bl	8001450 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d302      	bcc.n	8002dee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d11d      	bne.n	8002e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d016      	beq.n	8002e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f043 0220 	orr.w	r2, r3, #32
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e007      	b.n	8002e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e34:	2b40      	cmp	r3, #64	; 0x40
 8002e36:	d1ae      	bne.n	8002d96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e58:	d11b      	bne.n	8002e92 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e62:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f043 0204 	orr.w	r2, r3, #4
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e128      	b.n	8003104 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d109      	bne.n	8002ed2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a90      	ldr	r2, [pc, #576]	; (800310c <HAL_I2S_Init+0x26c>)
 8002eca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7fd fd31 	bl	8000934 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002ee8:	f023 030f 	bic.w	r3, r3, #15
 8002eec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d060      	beq.n	8002fc0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d102      	bne.n	8002f0c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002f06:	2310      	movs	r3, #16
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	e001      	b.n	8002f10 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d802      	bhi.n	8002f1e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002f1e:	2001      	movs	r0, #1
 8002f20:	f002 fc14 	bl	800574c <HAL_RCCEx_GetPeriphCLKFreq>
 8002f24:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2e:	d125      	bne.n	8002f7c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d010      	beq.n	8002f5a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f54:	3305      	adds	r3, #5
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	e01f      	b.n	8002f9a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f64:	4613      	mov	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f76:	3305      	adds	r3, #5
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	e00e      	b.n	8002f9a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f96:	3305      	adds	r3, #5
 8002f98:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4a5c      	ldr	r2, [pc, #368]	; (8003110 <HAL_I2S_Init+0x270>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	08db      	lsrs	r3, r3, #3
 8002fa4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	085b      	lsrs	r3, r3, #1
 8002fb6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	021b      	lsls	r3, r3, #8
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	e003      	b.n	8002fc8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d902      	bls.n	8002fd4 <HAL_I2S_Init+0x134>
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	2bff      	cmp	r3, #255	; 0xff
 8002fd2:	d907      	bls.n	8002fe4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	f043 0210 	orr.w	r2, r3, #16
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e08f      	b.n	8003104 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	ea42 0103 	orr.w	r1, r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003002:	f023 030f 	bic.w	r3, r3, #15
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6851      	ldr	r1, [r2, #4]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6892      	ldr	r2, [r2, #8]
 800300e:	4311      	orrs	r1, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	68d2      	ldr	r2, [r2, #12]
 8003014:	4311      	orrs	r1, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6992      	ldr	r2, [r2, #24]
 800301a:	430a      	orrs	r2, r1
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003026:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d161      	bne.n	80030f4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a38      	ldr	r2, [pc, #224]	; (8003114 <HAL_I2S_Init+0x274>)
 8003034:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a37      	ldr	r2, [pc, #220]	; (8003118 <HAL_I2S_Init+0x278>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d101      	bne.n	8003044 <HAL_I2S_Init+0x1a4>
 8003040:	4b36      	ldr	r3, [pc, #216]	; (800311c <HAL_I2S_Init+0x27c>)
 8003042:	e001      	b.n	8003048 <HAL_I2S_Init+0x1a8>
 8003044:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	4932      	ldr	r1, [pc, #200]	; (8003118 <HAL_I2S_Init+0x278>)
 8003050:	428a      	cmp	r2, r1
 8003052:	d101      	bne.n	8003058 <HAL_I2S_Init+0x1b8>
 8003054:	4a31      	ldr	r2, [pc, #196]	; (800311c <HAL_I2S_Init+0x27c>)
 8003056:	e001      	b.n	800305c <HAL_I2S_Init+0x1bc>
 8003058:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800305c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003060:	f023 030f 	bic.w	r3, r3, #15
 8003064:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2b      	ldr	r2, [pc, #172]	; (8003118 <HAL_I2S_Init+0x278>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d101      	bne.n	8003074 <HAL_I2S_Init+0x1d4>
 8003070:	4b2a      	ldr	r3, [pc, #168]	; (800311c <HAL_I2S_Init+0x27c>)
 8003072:	e001      	b.n	8003078 <HAL_I2S_Init+0x1d8>
 8003074:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003078:	2202      	movs	r2, #2
 800307a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a25      	ldr	r2, [pc, #148]	; (8003118 <HAL_I2S_Init+0x278>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d101      	bne.n	800308a <HAL_I2S_Init+0x1ea>
 8003086:	4b25      	ldr	r3, [pc, #148]	; (800311c <HAL_I2S_Init+0x27c>)
 8003088:	e001      	b.n	800308e <HAL_I2S_Init+0x1ee>
 800308a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800309a:	d003      	beq.n	80030a4 <HAL_I2S_Init+0x204>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d103      	bne.n	80030ac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80030a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	e001      	b.n	80030b0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80030ac:	2300      	movs	r3, #0
 80030ae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80030ba:	4313      	orrs	r3, r2
 80030bc:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80030c4:	4313      	orrs	r3, r2
 80030c6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80030ce:	4313      	orrs	r3, r2
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	897b      	ldrh	r3, [r7, #10]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030dc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <HAL_I2S_Init+0x278>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d101      	bne.n	80030ec <HAL_I2S_Init+0x24c>
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <HAL_I2S_Init+0x27c>)
 80030ea:	e001      	b.n	80030f0 <HAL_I2S_Init+0x250>
 80030ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030f0:	897a      	ldrh	r2, [r7, #10]
 80030f2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3720      	adds	r7, #32
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	08003217 	.word	0x08003217
 8003110:	cccccccd 	.word	0xcccccccd
 8003114:	0800332d 	.word	0x0800332d
 8003118:	40003800 	.word	0x40003800
 800311c:	40003400 	.word	0x40003400

08003120 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	881a      	ldrh	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	1c9a      	adds	r2, r3, #2
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317e:	b29b      	uxth	r3, r3
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10e      	bne.n	80031b0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031a0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f7ff ffb8 	bl	8003120 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031b0:	bf00      	nop
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	b292      	uxth	r2, r2
 80031cc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	1c9a      	adds	r2, r3, #2
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10e      	bne.n	800320e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031fe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff ff93 	bl	8003134 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b086      	sub	sp, #24
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b04      	cmp	r3, #4
 8003230:	d13a      	bne.n	80032a8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b01      	cmp	r3, #1
 800323a:	d109      	bne.n	8003250 <I2S_IRQHandler+0x3a>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003246:	2b40      	cmp	r3, #64	; 0x40
 8003248:	d102      	bne.n	8003250 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff ffb4 	bl	80031b8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d126      	bne.n	80032a8 <I2S_IRQHandler+0x92>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b20      	cmp	r3, #32
 8003266:	d11f      	bne.n	80032a8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003276:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003278:	2300      	movs	r3, #0
 800327a:	613b      	str	r3, [r7, #16]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	f043 0202 	orr.w	r2, r3, #2
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff ff50 	bl	8003148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d136      	bne.n	8003322 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d109      	bne.n	80032d2 <I2S_IRQHandler+0xbc>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c8:	2b80      	cmp	r3, #128	; 0x80
 80032ca:	d102      	bne.n	80032d2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ff45 	bl	800315c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d122      	bne.n	8003322 <I2S_IRQHandler+0x10c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d11b      	bne.n	8003322 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032f8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	f043 0204 	orr.w	r2, r3, #4
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff ff13 	bl	8003148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003322:	bf00      	nop
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
	...

0800332c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a92      	ldr	r2, [pc, #584]	; (800358c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d101      	bne.n	800334a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003346:	4b92      	ldr	r3, [pc, #584]	; (8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003348:	e001      	b.n	800334e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800334a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a8b      	ldr	r2, [pc, #556]	; (800358c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d101      	bne.n	8003368 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003364:	4b8a      	ldr	r3, [pc, #552]	; (8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003366:	e001      	b.n	800336c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003368:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003378:	d004      	beq.n	8003384 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f040 8099 	bne.w	80034b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b02      	cmp	r3, #2
 800338c:	d107      	bne.n	800339e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f925 	bl	80035e8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d107      	bne.n	80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f9c8 	bl	8003748 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b40      	cmp	r3, #64	; 0x40
 80033c0:	d13a      	bne.n	8003438 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f003 0320 	and.w	r3, r3, #32
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d035      	beq.n	8003438 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6e      	ldr	r2, [pc, #440]	; (800358c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d101      	bne.n	80033da <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80033d6:	4b6e      	ldr	r3, [pc, #440]	; (8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033d8:	e001      	b.n	80033de <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80033da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4969      	ldr	r1, [pc, #420]	; (800358c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80033e6:	428b      	cmp	r3, r1
 80033e8:	d101      	bne.n	80033ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80033ea:	4b69      	ldr	r3, [pc, #420]	; (8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80033ec:	e001      	b.n	80033f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80033ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033f6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003406:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342a:	f043 0202 	orr.w	r2, r3, #2
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff fe88 	bl	8003148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b08      	cmp	r3, #8
 8003440:	f040 80c3 	bne.w	80035ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 80bd 	beq.w	80035ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800345e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a49      	ldr	r2, [pc, #292]	; (800358c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d101      	bne.n	800346e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800346a:	4b49      	ldr	r3, [pc, #292]	; (8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800346c:	e001      	b.n	8003472 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800346e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4944      	ldr	r1, [pc, #272]	; (800358c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800347a:	428b      	cmp	r3, r1
 800347c:	d101      	bne.n	8003482 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800347e:	4b44      	ldr	r3, [pc, #272]	; (8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003480:	e001      	b.n	8003486 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003482:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003486:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800348a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800348c:	2300      	movs	r3, #0
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	f043 0204 	orr.w	r2, r3, #4
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff fe4a 	bl	8003148 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034b4:	e089      	b.n	80035ca <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d107      	bne.n	80034d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8be 	bl	800364c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d107      	bne.n	80034ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f8fd 	bl	80036e4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	d12f      	bne.n	8003554 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d02a      	beq.n	8003554 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800350c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1e      	ldr	r2, [pc, #120]	; (800358c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d101      	bne.n	800351c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003518:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800351a:	e001      	b.n	8003520 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800351c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4919      	ldr	r1, [pc, #100]	; (800358c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003528:	428b      	cmp	r3, r1
 800352a:	d101      	bne.n	8003530 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800352c:	4b18      	ldr	r3, [pc, #96]	; (8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800352e:	e001      	b.n	8003534 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003530:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003534:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003538:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	f043 0202 	orr.w	r2, r3, #2
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff fdfa 	bl	8003148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b08      	cmp	r3, #8
 800355c:	d136      	bne.n	80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d031      	beq.n	80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a07      	ldr	r2, [pc, #28]	; (800358c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d101      	bne.n	8003576 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003572:	4b07      	ldr	r3, [pc, #28]	; (8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003574:	e001      	b.n	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003576:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4902      	ldr	r1, [pc, #8]	; (800358c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003582:	428b      	cmp	r3, r1
 8003584:	d106      	bne.n	8003594 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003586:	4b02      	ldr	r3, [pc, #8]	; (8003590 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003588:	e006      	b.n	8003598 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800358a:	bf00      	nop
 800358c:	40003800 	.word	0x40003800
 8003590:	40003400 	.word	0x40003400
 8003594:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003598:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800359c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	f043 0204 	orr.w	r2, r3, #4
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff fdc0 	bl	8003148 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035c8:	e000      	b.n	80035cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035ca:	bf00      	nop
}
 80035cc:	bf00      	nop
 80035ce:	3720      	adds	r7, #32
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	1c99      	adds	r1, r3, #2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6251      	str	r1, [r2, #36]	; 0x24
 80035fa:	881a      	ldrh	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d113      	bne.n	8003642 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003628:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d106      	bne.n	8003642 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ffc9 	bl	80035d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	1c99      	adds	r1, r3, #2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6251      	str	r1, [r2, #36]	; 0x24
 800365e:	8819      	ldrh	r1, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a1d      	ldr	r2, [pc, #116]	; (80036dc <I2SEx_TxISR_I2SExt+0x90>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d101      	bne.n	800366e <I2SEx_TxISR_I2SExt+0x22>
 800366a:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <I2SEx_TxISR_I2SExt+0x94>)
 800366c:	e001      	b.n	8003672 <I2SEx_TxISR_I2SExt+0x26>
 800366e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003672:	460a      	mov	r2, r1
 8003674:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d121      	bne.n	80036d2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a12      	ldr	r2, [pc, #72]	; (80036dc <I2SEx_TxISR_I2SExt+0x90>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d101      	bne.n	800369c <I2SEx_TxISR_I2SExt+0x50>
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <I2SEx_TxISR_I2SExt+0x94>)
 800369a:	e001      	b.n	80036a0 <I2SEx_TxISR_I2SExt+0x54>
 800369c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	490d      	ldr	r1, [pc, #52]	; (80036dc <I2SEx_TxISR_I2SExt+0x90>)
 80036a8:	428b      	cmp	r3, r1
 80036aa:	d101      	bne.n	80036b0 <I2SEx_TxISR_I2SExt+0x64>
 80036ac:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <I2SEx_TxISR_I2SExt+0x94>)
 80036ae:	e001      	b.n	80036b4 <I2SEx_TxISR_I2SExt+0x68>
 80036b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036b8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036be:	b29b      	uxth	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d106      	bne.n	80036d2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ff81 	bl	80035d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40003800 	.word	0x40003800
 80036e0:	40003400 	.word	0x40003400

080036e4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68d8      	ldr	r0, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	1c99      	adds	r1, r3, #2
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80036fc:	b282      	uxth	r2, r0
 80036fe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d113      	bne.n	8003740 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003726:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff ff4a 	bl	80035d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <I2SEx_RxISR_I2SExt+0x90>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d101      	bne.n	800375e <I2SEx_RxISR_I2SExt+0x16>
 800375a:	4b20      	ldr	r3, [pc, #128]	; (80037dc <I2SEx_RxISR_I2SExt+0x94>)
 800375c:	e001      	b.n	8003762 <I2SEx_RxISR_I2SExt+0x1a>
 800375e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003762:	68d8      	ldr	r0, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	1c99      	adds	r1, r3, #2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800376e:	b282      	uxth	r2, r0
 8003770:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d121      	bne.n	80037ce <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <I2SEx_RxISR_I2SExt+0x90>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d101      	bne.n	8003798 <I2SEx_RxISR_I2SExt+0x50>
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <I2SEx_RxISR_I2SExt+0x94>)
 8003796:	e001      	b.n	800379c <I2SEx_RxISR_I2SExt+0x54>
 8003798:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	490d      	ldr	r1, [pc, #52]	; (80037d8 <I2SEx_RxISR_I2SExt+0x90>)
 80037a4:	428b      	cmp	r3, r1
 80037a6:	d101      	bne.n	80037ac <I2SEx_RxISR_I2SExt+0x64>
 80037a8:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <I2SEx_RxISR_I2SExt+0x94>)
 80037aa:	e001      	b.n	80037b0 <I2SEx_RxISR_I2SExt+0x68>
 80037ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037b4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d106      	bne.n	80037ce <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff ff03 	bl	80035d4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40003800 	.word	0x40003800
 80037dc:	40003400 	.word	0x40003400

080037e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e101      	b.n	80039f6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d106      	bne.n	8003812 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f006 febf 	bl	800a590 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2203      	movs	r2, #3
 8003816:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003820:	d102      	bne.n	8003828 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f003 fb1c 	bl	8006e6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	7c1a      	ldrb	r2, [r3, #16]
 800383a:	f88d 2000 	strb.w	r2, [sp]
 800383e:	3304      	adds	r3, #4
 8003840:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003842:	f003 f9fb 	bl	8006c3c <USB_CoreInit>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0ce      	b.n	80039f6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2100      	movs	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f003 fb14 	bl	8006e8c <USB_SetCurrentMode>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2202      	movs	r2, #2
 800386e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e0bf      	b.n	80039f6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003876:	2300      	movs	r3, #0
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	e04a      	b.n	8003912 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800387c:	7bfa      	ldrb	r2, [r7, #15]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	4413      	add	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	3315      	adds	r3, #21
 800388c:	2201      	movs	r2, #1
 800388e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003890:	7bfa      	ldrb	r2, [r7, #15]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	3314      	adds	r3, #20
 80038a0:	7bfa      	ldrb	r2, [r7, #15]
 80038a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038a4:	7bfa      	ldrb	r2, [r7, #15]
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	b298      	uxth	r0, r3
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	332e      	adds	r3, #46	; 0x2e
 80038b8:	4602      	mov	r2, r0
 80038ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038bc:	7bfa      	ldrb	r2, [r7, #15]
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	3318      	adds	r3, #24
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038d0:	7bfa      	ldrb	r2, [r7, #15]
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	331c      	adds	r3, #28
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038e4:	7bfa      	ldrb	r2, [r7, #15]
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	4613      	mov	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	3320      	adds	r3, #32
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038f8:	7bfa      	ldrb	r2, [r7, #15]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	3324      	adds	r3, #36	; 0x24
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	3301      	adds	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	791b      	ldrb	r3, [r3, #4]
 8003916:	7bfa      	ldrb	r2, [r7, #15]
 8003918:	429a      	cmp	r2, r3
 800391a:	d3af      	bcc.n	800387c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800391c:	2300      	movs	r3, #0
 800391e:	73fb      	strb	r3, [r7, #15]
 8003920:	e044      	b.n	80039ac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003922:	7bfa      	ldrb	r2, [r7, #15]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003938:	7bfa      	ldrb	r2, [r7, #15]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800394a:	7bfa      	ldrb	r2, [r7, #15]
 800394c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800394e:	7bfa      	ldrb	r2, [r7, #15]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003964:	7bfa      	ldrb	r2, [r7, #15]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800397a:	7bfa      	ldrb	r2, [r7, #15]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003990:	7bfa      	ldrb	r2, [r7, #15]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	3301      	adds	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	791b      	ldrb	r3, [r3, #4]
 80039b0:	7bfa      	ldrb	r2, [r7, #15]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d3b5      	bcc.n	8003922 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	7c1a      	ldrb	r2, [r3, #16]
 80039be:	f88d 2000 	strb.w	r2, [sp]
 80039c2:	3304      	adds	r3, #4
 80039c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039c6:	f003 faad 	bl	8006f24 <USB_DevInit>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e00c      	b.n	80039f6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f004 faf1 	bl	8007fd6 <USB_DevDisconnect>

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_PCD_Start+0x1c>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e022      	b.n	8003a60 <HAL_PCD_Start+0x62>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d105      	bne.n	8003a42 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f003 f9fe 	bl	8006e48 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f004 fa9f 	bl	8007f94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b08d      	sub	sp, #52	; 0x34
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f004 fb5d 	bl	800813e <USB_GetMode>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f040 848c 	bne.w	80043a4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f004 fac1 	bl	8008018 <USB_ReadInterrupts>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 8482 	beq.w	80043a2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	0a1b      	lsrs	r3, r3, #8
 8003aa8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f004 faae 	bl	8008018 <USB_ReadInterrupts>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d107      	bne.n	8003ad6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f002 0202 	and.w	r2, r2, #2
 8003ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f004 fa9c 	bl	8008018 <USB_ReadInterrupts>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	2b10      	cmp	r3, #16
 8003ae8:	d161      	bne.n	8003bae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0210 	bic.w	r2, r2, #16
 8003af8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	f003 020f 	and.w	r2, r3, #15
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	4413      	add	r3, r2
 8003b16:	3304      	adds	r3, #4
 8003b18:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	0c5b      	lsrs	r3, r3, #17
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d124      	bne.n	8003b70 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d035      	beq.n	8003b9e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	461a      	mov	r2, r3
 8003b44:	6a38      	ldr	r0, [r7, #32]
 8003b46:	f004 f8d3 	bl	8007cf0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b56:	441a      	add	r2, r3
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	695a      	ldr	r2, [r3, #20]
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	091b      	lsrs	r3, r3, #4
 8003b64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b68:	441a      	add	r2, r3
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	615a      	str	r2, [r3, #20]
 8003b6e:	e016      	b.n	8003b9e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	0c5b      	lsrs	r3, r3, #17
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	2b06      	cmp	r3, #6
 8003b7a:	d110      	bne.n	8003b9e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003b82:	2208      	movs	r2, #8
 8003b84:	4619      	mov	r1, r3
 8003b86:	6a38      	ldr	r0, [r7, #32]
 8003b88:	f004 f8b2 	bl	8007cf0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	695a      	ldr	r2, [r3, #20]
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	091b      	lsrs	r3, r3, #4
 8003b94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b98:	441a      	add	r2, r3
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699a      	ldr	r2, [r3, #24]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0210 	orr.w	r2, r2, #16
 8003bac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f004 fa30 	bl	8008018 <USB_ReadInterrupts>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003bc2:	f040 80a7 	bne.w	8003d14 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f004 fa35 	bl	800803e <USB_ReadDevAllOutEpInterrupt>
 8003bd4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003bd6:	e099      	b.n	8003d0c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 808e 	beq.w	8003d00 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	4611      	mov	r1, r2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f004 fa59 	bl	80080a6 <USB_ReadDevOutEPInterrupt>
 8003bf4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00c      	beq.n	8003c1a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	2301      	movs	r3, #1
 8003c10:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fea1 	bl	800495c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f003 0308 	and.w	r3, r3, #8
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00c      	beq.n	8003c3e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c30:	461a      	mov	r2, r3
 8003c32:	2308      	movs	r3, #8
 8003c34:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 ff77 	bl	8004b2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c54:	461a      	mov	r2, r3
 8003c56:	2310      	movs	r3, #16
 8003c58:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d030      	beq.n	8003cc6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6c:	2b80      	cmp	r3, #128	; 0x80
 8003c6e:	d109      	bne.n	8003c84 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	69fa      	ldr	r2, [r7, #28]
 8003c7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c82:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c86:	4613      	mov	r3, r2
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	3304      	adds	r3, #4
 8003c98:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	78db      	ldrb	r3, [r3, #3]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d108      	bne.n	8003cb4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	4619      	mov	r1, r3
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f006 fd82 	bl	800a7b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cdc:	461a      	mov	r2, r3
 8003cde:	2320      	movs	r3, #32
 8003ce0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d009      	beq.n	8003d00 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cfe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	3301      	adds	r3, #1
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	085b      	lsrs	r3, r3, #1
 8003d0a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f47f af62 	bne.w	8003bd8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f004 f97d 	bl	8008018 <USB_ReadInterrupts>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d28:	f040 80db 	bne.w	8003ee2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f004 f99e 	bl	8008072 <USB_ReadDevAllInEpInterrupt>
 8003d36:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003d3c:	e0cd      	b.n	8003eda <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80c2 	beq.w	8003ece <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	4611      	mov	r1, r2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f004 f9c4 	bl	80080e2 <USB_ReadDevInEPInterrupt>
 8003d5a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d057      	beq.n	8003e16 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	69f9      	ldr	r1, [r7, #28]
 8003d82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d86:	4013      	ands	r3, r2
 8003d88:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d96:	461a      	mov	r2, r3
 8003d98:	2301      	movs	r3, #1
 8003d9a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	799b      	ldrb	r3, [r3, #6]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d132      	bne.n	8003e0a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	3320      	adds	r3, #32
 8003db4:	6819      	ldr	r1, [r3, #0]
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dba:	4613      	mov	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4403      	add	r3, r0
 8003dc4:	331c      	adds	r3, #28
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4419      	add	r1, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dce:	4613      	mov	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4403      	add	r3, r0
 8003dd8:	3320      	adds	r3, #32
 8003dda:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d113      	bne.n	8003e0a <HAL_PCD_IRQHandler+0x3a2>
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	3324      	adds	r3, #36	; 0x24
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d108      	bne.n	8003e0a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003e02:	461a      	mov	r2, r3
 8003e04:	2101      	movs	r1, #1
 8003e06:	f004 f9cb 	bl	80081a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f006 fc4c 	bl	800a6ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	015a      	lsls	r2, r3, #5
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2308      	movs	r3, #8
 8003e30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	015a      	lsls	r2, r3, #5
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	4413      	add	r3, r2
 8003e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e48:	461a      	mov	r2, r3
 8003e4a:	2310      	movs	r3, #16
 8003e4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e64:	461a      	mov	r2, r3
 8003e66:	2340      	movs	r3, #64	; 0x40
 8003e68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d023      	beq.n	8003ebc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003e74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e76:	6a38      	ldr	r0, [r7, #32]
 8003e78:	f003 f9b8 	bl	80071ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	3310      	adds	r3, #16
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	78db      	ldrb	r3, [r3, #3]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d108      	bne.n	8003eaa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f006 fc99 	bl	800a7dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2302      	movs	r3, #2
 8003eba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003ec6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fcbb 	bl	8004844 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed6:	085b      	lsrs	r3, r3, #1
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f47f af2e 	bne.w	8003d3e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f004 f896 	bl	8008018 <USB_ReadInterrupts>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ef6:	d122      	bne.n	8003f3e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d108      	bne.n	8003f28 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f1e:	2100      	movs	r1, #0
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 fea1 	bl	8004c68 <HAL_PCDEx_LPM_Callback>
 8003f26:	e002      	b.n	8003f2e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f006 fc37 	bl	800a79c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695a      	ldr	r2, [r3, #20]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003f3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f004 f868 	bl	8008018 <USB_ReadInterrupts>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f52:	d112      	bne.n	8003f7a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d102      	bne.n	8003f6a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f006 fbf3 	bl	800a750 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003f78:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f004 f84a 	bl	8008018 <USB_ReadInterrupts>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8e:	f040 80b7 	bne.w	8004100 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	69fa      	ldr	r2, [r7, #28]
 8003f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa0:	f023 0301 	bic.w	r3, r3, #1
 8003fa4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2110      	movs	r1, #16
 8003fac:	4618      	mov	r0, r3
 8003fae:	f003 f91d 	bl	80071ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fb6:	e046      	b.n	8004046 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fdc:	0151      	lsls	r1, r2, #5
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	440a      	add	r2, r1
 8003fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fe6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ffe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004010:	0151      	lsls	r1, r2, #5
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	440a      	add	r2, r1
 8004016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800401a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800401e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004030:	0151      	lsls	r1, r2, #5
 8004032:	69fa      	ldr	r2, [r7, #28]
 8004034:	440a      	add	r2, r1
 8004036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800403a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800403e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004042:	3301      	adds	r3, #1
 8004044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	791b      	ldrb	r3, [r3, #4]
 800404a:	461a      	mov	r2, r3
 800404c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404e:	4293      	cmp	r3, r2
 8004050:	d3b2      	bcc.n	8003fb8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004060:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004064:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	7bdb      	ldrb	r3, [r3, #15]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d016      	beq.n	800409c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004078:	69fa      	ldr	r2, [r7, #28]
 800407a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800407e:	f043 030b 	orr.w	r3, r3, #11
 8004082:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	69fa      	ldr	r2, [r7, #28]
 8004090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004094:	f043 030b 	orr.w	r3, r3, #11
 8004098:	6453      	str	r3, [r2, #68]	; 0x44
 800409a:	e015      	b.n	80040c8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	69fa      	ldr	r2, [r7, #28]
 80040a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80040ae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80040b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040c2:	f043 030b 	orr.w	r3, r3, #11
 80040c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80040da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80040ea:	461a      	mov	r2, r3
 80040ec:	f004 f858 	bl	80081a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695a      	ldr	r2, [r3, #20]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80040fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4618      	mov	r0, r3
 8004106:	f003 ff87 	bl	8008018 <USB_ReadInterrupts>
 800410a:	4603      	mov	r3, r0
 800410c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004114:	d123      	bne.n	800415e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f004 f81d 	bl	800815a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f003 f8da 	bl	80072de <USB_GetDevSpeed>
 800412a:	4603      	mov	r3, r0
 800412c:	461a      	mov	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681c      	ldr	r4, [r3, #0]
 8004136:	f001 fa07 	bl	8005548 <HAL_RCC_GetHCLKFreq>
 800413a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004140:	461a      	mov	r2, r3
 8004142:	4620      	mov	r0, r4
 8004144:	f002 fdde 	bl	8006d04 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f006 fad8 	bl	800a6fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800415c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f003 ff58 	bl	8008018 <USB_ReadInterrupts>
 8004168:	4603      	mov	r3, r0
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b08      	cmp	r3, #8
 8004170:	d10a      	bne.n	8004188 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f006 fab5 	bl	800a6e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695a      	ldr	r2, [r3, #20]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f002 0208 	and.w	r2, r2, #8
 8004186:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f003 ff43 	bl	8008018 <USB_ReadInterrupts>
 8004192:	4603      	mov	r3, r0
 8004194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004198:	2b80      	cmp	r3, #128	; 0x80
 800419a:	d123      	bne.n	80041e4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041a8:	2301      	movs	r3, #1
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
 80041ac:	e014      	b.n	80041d8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b2:	4613      	mov	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	f203 2357 	addw	r3, r3, #599	; 0x257
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d105      	bne.n	80041d2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	4619      	mov	r1, r3
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 fb08 	bl	80047e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	3301      	adds	r3, #1
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	791b      	ldrb	r3, [r3, #4]
 80041dc:	461a      	mov	r2, r3
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d3e4      	bcc.n	80041ae <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f003 ff15 	bl	8008018 <USB_ReadInterrupts>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041f8:	d13c      	bne.n	8004274 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80041fa:	2301      	movs	r3, #1
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
 80041fe:	e02b      	b.n	8004258 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004214:	4613      	mov	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4413      	add	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	3318      	adds	r3, #24
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d115      	bne.n	8004252 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004226:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004228:	2b00      	cmp	r3, #0
 800422a:	da12      	bge.n	8004252 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004230:	4613      	mov	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4413      	add	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	3317      	adds	r3, #23
 800423c:	2201      	movs	r2, #1
 800423e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004248:	b2db      	uxtb	r3, r3
 800424a:	4619      	mov	r1, r3
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fac8 	bl	80047e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	3301      	adds	r3, #1
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	791b      	ldrb	r3, [r3, #4]
 800425c:	461a      	mov	r2, r3
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	4293      	cmp	r3, r2
 8004262:	d3cd      	bcc.n	8004200 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695a      	ldr	r2, [r3, #20]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004272:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f003 fecd 	bl	8008018 <USB_ReadInterrupts>
 800427e:	4603      	mov	r3, r0
 8004280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004284:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004288:	d156      	bne.n	8004338 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800428a:	2301      	movs	r3, #1
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
 800428e:	e045      	b.n	800431c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a4:	4613      	mov	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d12e      	bne.n	8004316 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	da2b      	bge.n	8004316 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80042ca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d121      	bne.n	8004316 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d6:	4613      	mov	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	f203 2357 	addw	r3, r3, #599	; 0x257
 80042e4:	2201      	movs	r2, #1
 80042e6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10a      	bne.n	8004316 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	69fa      	ldr	r2, [r7, #28]
 800430a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800430e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004312:	6053      	str	r3, [r2, #4]
            break;
 8004314:	e008      	b.n	8004328 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	3301      	adds	r3, #1
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	791b      	ldrb	r3, [r3, #4]
 8004320:	461a      	mov	r2, r3
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	4293      	cmp	r3, r2
 8004326:	d3b3      	bcc.n	8004290 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004336:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f003 fe6b 	bl	8008018 <USB_ReadInterrupts>
 8004342:	4603      	mov	r3, r0
 8004344:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434c:	d10a      	bne.n	8004364 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f006 fa56 	bl	800a800 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004362:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f003 fe55 	bl	8008018 <USB_ReadInterrupts>
 800436e:	4603      	mov	r3, r0
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b04      	cmp	r3, #4
 8004376:	d115      	bne.n	80043a4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f006 fa46 	bl	800a81c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6859      	ldr	r1, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	430a      	orrs	r2, r1
 800439e:	605a      	str	r2, [r3, #4]
 80043a0:	e000      	b.n	80043a4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80043a2:	bf00      	nop
    }
  }
}
 80043a4:	3734      	adds	r7, #52	; 0x34
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd90      	pop	{r4, r7, pc}

080043aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	460b      	mov	r3, r1
 80043b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_PCD_SetAddress+0x1a>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e012      	b.n	80043ea <HAL_PCD_SetAddress+0x40>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	78fa      	ldrb	r2, [r7, #3]
 80043d0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	78fa      	ldrb	r2, [r7, #3]
 80043d8:	4611      	mov	r1, r2
 80043da:	4618      	mov	r0, r3
 80043dc:	f003 fdb4 	bl	8007f48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b084      	sub	sp, #16
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	4608      	mov	r0, r1
 80043fc:	4611      	mov	r1, r2
 80043fe:	461a      	mov	r2, r3
 8004400:	4603      	mov	r3, r0
 8004402:	70fb      	strb	r3, [r7, #3]
 8004404:	460b      	mov	r3, r1
 8004406:	803b      	strh	r3, [r7, #0]
 8004408:	4613      	mov	r3, r2
 800440a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004410:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004414:	2b00      	cmp	r3, #0
 8004416:	da0f      	bge.n	8004438 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	f003 020f 	and.w	r2, r3, #15
 800441e:	4613      	mov	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	3310      	adds	r3, #16
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	4413      	add	r3, r2
 800442c:	3304      	adds	r3, #4
 800442e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	705a      	strb	r2, [r3, #1]
 8004436:	e00f      	b.n	8004458 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	f003 020f 	and.w	r2, r3, #15
 800443e:	4613      	mov	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4413      	add	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	4413      	add	r3, r2
 800444e:	3304      	adds	r3, #4
 8004450:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	f003 030f 	and.w	r3, r3, #15
 800445e:	b2da      	uxtb	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004464:	883a      	ldrh	r2, [r7, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	78ba      	ldrb	r2, [r7, #2]
 800446e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	785b      	ldrb	r3, [r3, #1]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d004      	beq.n	8004482 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004482:	78bb      	ldrb	r3, [r7, #2]
 8004484:	2b02      	cmp	r3, #2
 8004486:	d102      	bne.n	800448e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_PCD_EP_Open+0xaa>
 8004498:	2302      	movs	r3, #2
 800449a:	e00e      	b.n	80044ba <HAL_PCD_EP_Open+0xc8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68f9      	ldr	r1, [r7, #12]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f002 ff3c 	bl	8007328 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80044b8:	7afb      	ldrb	r3, [r7, #11]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	460b      	mov	r3, r1
 80044cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	da0f      	bge.n	80044f6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044d6:	78fb      	ldrb	r3, [r7, #3]
 80044d8:	f003 020f 	and.w	r2, r3, #15
 80044dc:	4613      	mov	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	3310      	adds	r3, #16
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	4413      	add	r3, r2
 80044ea:	3304      	adds	r3, #4
 80044ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	705a      	strb	r2, [r3, #1]
 80044f4:	e00f      	b.n	8004516 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	f003 020f 	and.w	r2, r3, #15
 80044fc:	4613      	mov	r3, r2
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	4413      	add	r3, r2
 800450c:	3304      	adds	r3, #4
 800450e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004516:	78fb      	ldrb	r3, [r7, #3]
 8004518:	f003 030f 	and.w	r3, r3, #15
 800451c:	b2da      	uxtb	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_PCD_EP_Close+0x6e>
 800452c:	2302      	movs	r3, #2
 800452e:	e00e      	b.n	800454e <HAL_PCD_EP_Close+0x8c>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68f9      	ldr	r1, [r7, #12]
 800453e:	4618      	mov	r0, r3
 8004540:	f002 ff7a 	bl	8007438 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b086      	sub	sp, #24
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
 8004562:	460b      	mov	r3, r1
 8004564:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004566:	7afb      	ldrb	r3, [r7, #11]
 8004568:	f003 020f 	and.w	r2, r3, #15
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	3304      	adds	r3, #4
 800457e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2200      	movs	r2, #0
 8004590:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2200      	movs	r2, #0
 8004596:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004598:	7afb      	ldrb	r3, [r7, #11]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	799b      	ldrb	r3, [r3, #6]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d102      	bne.n	80045b2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6818      	ldr	r0, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	799b      	ldrb	r3, [r3, #6]
 80045ba:	461a      	mov	r2, r3
 80045bc:	6979      	ldr	r1, [r7, #20]
 80045be:	f003 f817 	bl	80075f0 <USB_EPStartXfer>

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	f003 020f 	and.w	r2, r3, #15
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80045ee:	681b      	ldr	r3, [r3, #0]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	460b      	mov	r3, r1
 800460a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800460c:	7afb      	ldrb	r3, [r7, #11]
 800460e:	f003 020f 	and.w	r2, r3, #15
 8004612:	4613      	mov	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	3310      	adds	r3, #16
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4413      	add	r3, r2
 8004620:	3304      	adds	r3, #4
 8004622:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2200      	movs	r2, #0
 8004634:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2201      	movs	r2, #1
 800463a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800463c:	7afb      	ldrb	r3, [r7, #11]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	b2da      	uxtb	r2, r3
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	799b      	ldrb	r3, [r3, #6]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d102      	bne.n	8004656 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	799b      	ldrb	r3, [r3, #6]
 800465e:	461a      	mov	r2, r3
 8004660:	6979      	ldr	r1, [r7, #20]
 8004662:	f002 ffc5 	bl	80075f0 <USB_EPStartXfer>

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	7912      	ldrb	r2, [r2, #4]
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e04f      	b.n	800472e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800468e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004692:	2b00      	cmp	r3, #0
 8004694:	da0f      	bge.n	80046b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004696:	78fb      	ldrb	r3, [r7, #3]
 8004698:	f003 020f 	and.w	r2, r3, #15
 800469c:	4613      	mov	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	3310      	adds	r3, #16
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	3304      	adds	r3, #4
 80046ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	705a      	strb	r2, [r3, #1]
 80046b4:	e00d      	b.n	80046d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80046b6:	78fa      	ldrb	r2, [r7, #3]
 80046b8:	4613      	mov	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	4413      	add	r3, r2
 80046c8:	3304      	adds	r3, #4
 80046ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d101      	bne.n	80046f2 <HAL_PCD_EP_SetStall+0x82>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e01d      	b.n	800472e <HAL_PCD_EP_SetStall+0xbe>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68f9      	ldr	r1, [r7, #12]
 8004700:	4618      	mov	r0, r3
 8004702:	f003 fb4d 	bl	8007da0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004706:	78fb      	ldrb	r3, [r7, #3]
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	2b00      	cmp	r3, #0
 800470e:	d109      	bne.n	8004724 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6818      	ldr	r0, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	7999      	ldrb	r1, [r3, #6]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800471e:	461a      	mov	r2, r3
 8004720:	f003 fd3e 	bl	80081a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	460b      	mov	r3, r1
 8004740:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004742:	78fb      	ldrb	r3, [r7, #3]
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	7912      	ldrb	r2, [r2, #4]
 800474c:	4293      	cmp	r3, r2
 800474e:	d901      	bls.n	8004754 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e042      	b.n	80047da <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004754:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004758:	2b00      	cmp	r3, #0
 800475a:	da0f      	bge.n	800477c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800475c:	78fb      	ldrb	r3, [r7, #3]
 800475e:	f003 020f 	and.w	r2, r3, #15
 8004762:	4613      	mov	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	3310      	adds	r3, #16
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	4413      	add	r3, r2
 8004770:	3304      	adds	r3, #4
 8004772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	705a      	strb	r2, [r3, #1]
 800477a:	e00f      	b.n	800479c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	f003 020f 	and.w	r2, r3, #15
 8004782:	4613      	mov	r3, r2
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4413      	add	r3, r2
 8004792:	3304      	adds	r3, #4
 8004794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047a2:	78fb      	ldrb	r3, [r7, #3]
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_PCD_EP_ClrStall+0x86>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e00e      	b.n	80047da <HAL_PCD_EP_ClrStall+0xa4>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68f9      	ldr	r1, [r7, #12]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f003 fb56 	bl	8007e7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b084      	sub	sp, #16
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	460b      	mov	r3, r1
 80047ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80047ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	da0c      	bge.n	8004810 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047f6:	78fb      	ldrb	r3, [r7, #3]
 80047f8:	f003 020f 	and.w	r2, r3, #15
 80047fc:	4613      	mov	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	3310      	adds	r3, #16
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	4413      	add	r3, r2
 800480a:	3304      	adds	r3, #4
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	e00c      	b.n	800482a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004810:	78fb      	ldrb	r3, [r7, #3]
 8004812:	f003 020f 	and.w	r2, r3, #15
 8004816:	4613      	mov	r3, r2
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	4413      	add	r3, r2
 8004826:	3304      	adds	r3, #4
 8004828:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68f9      	ldr	r1, [r7, #12]
 8004830:	4618      	mov	r0, r3
 8004832:	f003 f975 	bl	8007b20 <USB_EPStopXfer>
 8004836:	4603      	mov	r3, r0
 8004838:	72fb      	strb	r3, [r7, #11]

  return ret;
 800483a:	7afb      	ldrb	r3, [r7, #11]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af02      	add	r7, sp, #8
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	4613      	mov	r3, r2
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	3310      	adds	r3, #16
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	4413      	add	r3, r2
 8004868:	3304      	adds	r3, #4
 800486a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	695a      	ldr	r2, [r3, #20]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	429a      	cmp	r2, r3
 8004876:	d901      	bls.n	800487c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e06b      	b.n	8004954 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	429a      	cmp	r2, r3
 8004890:	d902      	bls.n	8004898 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	3303      	adds	r3, #3
 800489c:	089b      	lsrs	r3, r3, #2
 800489e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048a0:	e02a      	b.n	80048f8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d902      	bls.n	80048be <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	3303      	adds	r3, #3
 80048c2:	089b      	lsrs	r3, r3, #2
 80048c4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	68d9      	ldr	r1, [r3, #12]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	4603      	mov	r3, r0
 80048da:	6978      	ldr	r0, [r7, #20]
 80048dc:	f003 f9ca 	bl	8007c74 <USB_WritePacket>

    ep->xfer_buff  += len;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	441a      	add	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	441a      	add	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	429a      	cmp	r2, r3
 800490c:	d809      	bhi.n	8004922 <PCD_WriteEmptyTxFifo+0xde>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004916:	429a      	cmp	r2, r3
 8004918:	d203      	bcs.n	8004922 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1bf      	bne.n	80048a2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	429a      	cmp	r2, r3
 800492c:	d811      	bhi.n	8004952 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	2201      	movs	r2, #1
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	43db      	mvns	r3, r3
 8004948:	6939      	ldr	r1, [r7, #16]
 800494a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800494e:	4013      	ands	r3, r2
 8004950:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3720      	adds	r7, #32
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	333c      	adds	r3, #60	; 0x3c
 8004974:	3304      	adds	r3, #4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	799b      	ldrb	r3, [r3, #6]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d17b      	bne.n	8004a8a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d015      	beq.n	80049c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	4a61      	ldr	r2, [pc, #388]	; (8004b24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	f240 80b9 	bls.w	8004b18 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 80b3 	beq.w	8004b18 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049be:	461a      	mov	r2, r3
 80049c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c4:	6093      	str	r3, [r2, #8]
 80049c6:	e0a7      	b.n	8004b18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049de:	461a      	mov	r2, r3
 80049e0:	2320      	movs	r3, #32
 80049e2:	6093      	str	r3, [r2, #8]
 80049e4:	e098      	b.n	8004b18 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f040 8093 	bne.w	8004b18 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	4a4b      	ldr	r2, [pc, #300]	; (8004b24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d90f      	bls.n	8004a1a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	015a      	lsls	r2, r3, #5
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a10:	461a      	mov	r2, r3
 8004a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a16:	6093      	str	r3, [r2, #8]
 8004a18:	e07e      	b.n	8004b18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6a1a      	ldr	r2, [r3, #32]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	0159      	lsls	r1, r3, #5
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	440b      	add	r3, r1
 8004a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a46:	1ad2      	subs	r2, r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d114      	bne.n	8004a7c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004a64:	461a      	mov	r2, r3
 8004a66:	2101      	movs	r1, #1
 8004a68:	f003 fb9a 	bl	80081a0 <USB_EP0_OutStart>
 8004a6c:	e006      	b.n	8004a7c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	441a      	add	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	4619      	mov	r1, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f005 fdf8 	bl	800a678 <HAL_PCD_DataOutStageCallback>
 8004a88:	e046      	b.n	8004b18 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	4a26      	ldr	r2, [pc, #152]	; (8004b28 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d124      	bne.n	8004adc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aae:	6093      	str	r3, [r2, #8]
 8004ab0:	e032      	b.n	8004b18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac8:	461a      	mov	r2, r3
 8004aca:	2320      	movs	r3, #32
 8004acc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f005 fdcf 	bl	800a678 <HAL_PCD_DataOutStageCallback>
 8004ada:	e01d      	b.n	8004b18 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d114      	bne.n	8004b0c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d108      	bne.n	8004b0c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004b04:	461a      	mov	r2, r3
 8004b06:	2100      	movs	r1, #0
 8004b08:	f003 fb4a 	bl	80081a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	4619      	mov	r1, r3
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f005 fdb0 	bl	800a678 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3720      	adds	r7, #32
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	4f54300a 	.word	0x4f54300a
 8004b28:	4f54310a 	.word	0x4f54310a

08004b2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	333c      	adds	r3, #60	; 0x3c
 8004b44:	3304      	adds	r3, #4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4a15      	ldr	r2, [pc, #84]	; (8004bb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d90e      	bls.n	8004b80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d009      	beq.n	8004b80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b78:	461a      	mov	r2, r3
 8004b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f005 fd67 	bl	800a654 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4a0a      	ldr	r2, [pc, #40]	; (8004bb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d90c      	bls.n	8004ba8 <PCD_EP_OutSetupPacket_int+0x7c>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	799b      	ldrb	r3, [r3, #6]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d108      	bne.n	8004ba8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	f003 fafc 	bl	80081a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	4f54300a 	.word	0x4f54300a

08004bb8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	70fb      	strb	r3, [r7, #3]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d107      	bne.n	8004be6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004bd6:	883b      	ldrh	r3, [r7, #0]
 8004bd8:	0419      	lsls	r1, r3, #16
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28
 8004be4:	e028      	b.n	8004c38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bec:	0c1b      	lsrs	r3, r3, #16
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	73fb      	strb	r3, [r7, #15]
 8004bf8:	e00d      	b.n	8004c16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
 8004c00:	3340      	adds	r3, #64	; 0x40
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	0c1b      	lsrs	r3, r3, #16
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	3301      	adds	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
 8004c16:	7bfa      	ldrb	r2, [r7, #15]
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d3ec      	bcc.n	8004bfa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004c20:	883b      	ldrh	r3, [r7, #0]
 8004c22:	0418      	lsls	r0, r3, #16
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6819      	ldr	r1, [r3, #0]
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	4302      	orrs	r2, r0
 8004c30:	3340      	adds	r3, #64	; 0x40
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	460b      	mov	r3, r1
 8004c50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	887a      	ldrh	r2, [r7, #2]
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e267      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d075      	beq.n	8004d8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c9e:	4b88      	ldr	r3, [pc, #544]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 030c 	and.w	r3, r3, #12
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d00c      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004caa:	4b85      	ldr	r3, [pc, #532]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d112      	bne.n	8004cdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cb6:	4b82      	ldr	r3, [pc, #520]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc2:	d10b      	bne.n	8004cdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc4:	4b7e      	ldr	r3, [pc, #504]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d05b      	beq.n	8004d88 <HAL_RCC_OscConfig+0x108>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d157      	bne.n	8004d88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e242      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce4:	d106      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x74>
 8004ce6:	4b76      	ldr	r3, [pc, #472]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a75      	ldr	r2, [pc, #468]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	e01d      	b.n	8004d30 <HAL_RCC_OscConfig+0xb0>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cfc:	d10c      	bne.n	8004d18 <HAL_RCC_OscConfig+0x98>
 8004cfe:	4b70      	ldr	r3, [pc, #448]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a6f      	ldr	r2, [pc, #444]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	4b6d      	ldr	r3, [pc, #436]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a6c      	ldr	r2, [pc, #432]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	e00b      	b.n	8004d30 <HAL_RCC_OscConfig+0xb0>
 8004d18:	4b69      	ldr	r3, [pc, #420]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a68      	ldr	r2, [pc, #416]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	4b66      	ldr	r3, [pc, #408]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a65      	ldr	r2, [pc, #404]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d013      	beq.n	8004d60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d38:	f7fc fb8a 	bl	8001450 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d40:	f7fc fb86 	bl	8001450 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b64      	cmp	r3, #100	; 0x64
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e207      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d52:	4b5b      	ldr	r3, [pc, #364]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0f0      	beq.n	8004d40 <HAL_RCC_OscConfig+0xc0>
 8004d5e:	e014      	b.n	8004d8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d60:	f7fc fb76 	bl	8001450 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d68:	f7fc fb72 	bl	8001450 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b64      	cmp	r3, #100	; 0x64
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e1f3      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d7a:	4b51      	ldr	r3, [pc, #324]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1f0      	bne.n	8004d68 <HAL_RCC_OscConfig+0xe8>
 8004d86:	e000      	b.n	8004d8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d063      	beq.n	8004e5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d96:	4b4a      	ldr	r3, [pc, #296]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 030c 	and.w	r3, r3, #12
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00b      	beq.n	8004dba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004da2:	4b47      	ldr	r3, [pc, #284]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d11c      	bne.n	8004de8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dae:	4b44      	ldr	r3, [pc, #272]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d116      	bne.n	8004de8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dba:	4b41      	ldr	r3, [pc, #260]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d005      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x152>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d001      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e1c7      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd2:	4b3b      	ldr	r3, [pc, #236]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	4937      	ldr	r1, [pc, #220]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de6:	e03a      	b.n	8004e5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d020      	beq.n	8004e32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004df0:	4b34      	ldr	r3, [pc, #208]	; (8004ec4 <HAL_RCC_OscConfig+0x244>)
 8004df2:	2201      	movs	r2, #1
 8004df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df6:	f7fc fb2b 	bl	8001450 <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfc:	e008      	b.n	8004e10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dfe:	f7fc fb27 	bl	8001450 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e1a8      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e10:	4b2b      	ldr	r3, [pc, #172]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0f0      	beq.n	8004dfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e1c:	4b28      	ldr	r3, [pc, #160]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	4925      	ldr	r1, [pc, #148]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	600b      	str	r3, [r1, #0]
 8004e30:	e015      	b.n	8004e5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e32:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <HAL_RCC_OscConfig+0x244>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e38:	f7fc fb0a 	bl	8001450 <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e3e:	e008      	b.n	8004e52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e40:	f7fc fb06 	bl	8001450 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e187      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e52:	4b1b      	ldr	r3, [pc, #108]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1f0      	bne.n	8004e40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d036      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d016      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e72:	4b15      	ldr	r3, [pc, #84]	; (8004ec8 <HAL_RCC_OscConfig+0x248>)
 8004e74:	2201      	movs	r2, #1
 8004e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e78:	f7fc faea 	bl	8001450 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e80:	f7fc fae6 	bl	8001450 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e167      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e92:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <HAL_RCC_OscConfig+0x240>)
 8004e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f0      	beq.n	8004e80 <HAL_RCC_OscConfig+0x200>
 8004e9e:	e01b      	b.n	8004ed8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ea0:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <HAL_RCC_OscConfig+0x248>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea6:	f7fc fad3 	bl	8001450 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eac:	e00e      	b.n	8004ecc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eae:	f7fc facf 	bl	8001450 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d907      	bls.n	8004ecc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e150      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	42470000 	.word	0x42470000
 8004ec8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ecc:	4b88      	ldr	r3, [pc, #544]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1ea      	bne.n	8004eae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8097 	beq.w	8005014 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eea:	4b81      	ldr	r3, [pc, #516]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10f      	bne.n	8004f16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60bb      	str	r3, [r7, #8]
 8004efa:	4b7d      	ldr	r3, [pc, #500]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	4a7c      	ldr	r2, [pc, #496]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f04:	6413      	str	r3, [r2, #64]	; 0x40
 8004f06:	4b7a      	ldr	r3, [pc, #488]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0e:	60bb      	str	r3, [r7, #8]
 8004f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f12:	2301      	movs	r3, #1
 8004f14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f16:	4b77      	ldr	r3, [pc, #476]	; (80050f4 <HAL_RCC_OscConfig+0x474>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d118      	bne.n	8004f54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f22:	4b74      	ldr	r3, [pc, #464]	; (80050f4 <HAL_RCC_OscConfig+0x474>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a73      	ldr	r2, [pc, #460]	; (80050f4 <HAL_RCC_OscConfig+0x474>)
 8004f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f2e:	f7fc fa8f 	bl	8001450 <HAL_GetTick>
 8004f32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f34:	e008      	b.n	8004f48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f36:	f7fc fa8b 	bl	8001450 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e10c      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f48:	4b6a      	ldr	r3, [pc, #424]	; (80050f4 <HAL_RCC_OscConfig+0x474>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0f0      	beq.n	8004f36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d106      	bne.n	8004f6a <HAL_RCC_OscConfig+0x2ea>
 8004f5c:	4b64      	ldr	r3, [pc, #400]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f60:	4a63      	ldr	r2, [pc, #396]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f62:	f043 0301 	orr.w	r3, r3, #1
 8004f66:	6713      	str	r3, [r2, #112]	; 0x70
 8004f68:	e01c      	b.n	8004fa4 <HAL_RCC_OscConfig+0x324>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b05      	cmp	r3, #5
 8004f70:	d10c      	bne.n	8004f8c <HAL_RCC_OscConfig+0x30c>
 8004f72:	4b5f      	ldr	r3, [pc, #380]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f76:	4a5e      	ldr	r2, [pc, #376]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f78:	f043 0304 	orr.w	r3, r3, #4
 8004f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f7e:	4b5c      	ldr	r3, [pc, #368]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f82:	4a5b      	ldr	r2, [pc, #364]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8a:	e00b      	b.n	8004fa4 <HAL_RCC_OscConfig+0x324>
 8004f8c:	4b58      	ldr	r3, [pc, #352]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f90:	4a57      	ldr	r2, [pc, #348]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f92:	f023 0301 	bic.w	r3, r3, #1
 8004f96:	6713      	str	r3, [r2, #112]	; 0x70
 8004f98:	4b55      	ldr	r3, [pc, #340]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9c:	4a54      	ldr	r2, [pc, #336]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004f9e:	f023 0304 	bic.w	r3, r3, #4
 8004fa2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d015      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fac:	f7fc fa50 	bl	8001450 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb2:	e00a      	b.n	8004fca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fb4:	f7fc fa4c 	bl	8001450 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e0cb      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fca:	4b49      	ldr	r3, [pc, #292]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0ee      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x334>
 8004fd6:	e014      	b.n	8005002 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd8:	f7fc fa3a 	bl	8001450 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fde:	e00a      	b.n	8004ff6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fe0:	f7fc fa36 	bl	8001450 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e0b5      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff6:	4b3e      	ldr	r3, [pc, #248]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8004ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1ee      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005002:	7dfb      	ldrb	r3, [r7, #23]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d105      	bne.n	8005014 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005008:	4b39      	ldr	r3, [pc, #228]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	4a38      	ldr	r2, [pc, #224]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 800500e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005012:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 80a1 	beq.w	8005160 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800501e:	4b34      	ldr	r3, [pc, #208]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 030c 	and.w	r3, r3, #12
 8005026:	2b08      	cmp	r3, #8
 8005028:	d05c      	beq.n	80050e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	2b02      	cmp	r3, #2
 8005030:	d141      	bne.n	80050b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005032:	4b31      	ldr	r3, [pc, #196]	; (80050f8 <HAL_RCC_OscConfig+0x478>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005038:	f7fc fa0a 	bl	8001450 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005040:	f7fc fa06 	bl	8001450 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e087      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005052:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69da      	ldr	r2, [r3, #28]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	019b      	lsls	r3, r3, #6
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005074:	085b      	lsrs	r3, r3, #1
 8005076:	3b01      	subs	r3, #1
 8005078:	041b      	lsls	r3, r3, #16
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	061b      	lsls	r3, r3, #24
 8005082:	491b      	ldr	r1, [pc, #108]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 8005084:	4313      	orrs	r3, r2
 8005086:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005088:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <HAL_RCC_OscConfig+0x478>)
 800508a:	2201      	movs	r2, #1
 800508c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508e:	f7fc f9df 	bl	8001450 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005096:	f7fc f9db 	bl	8001450 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e05c      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a8:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0f0      	beq.n	8005096 <HAL_RCC_OscConfig+0x416>
 80050b4:	e054      	b.n	8005160 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <HAL_RCC_OscConfig+0x478>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050bc:	f7fc f9c8 	bl	8001450 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050c4:	f7fc f9c4 	bl	8001450 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e045      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d6:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <HAL_RCC_OscConfig+0x470>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f0      	bne.n	80050c4 <HAL_RCC_OscConfig+0x444>
 80050e2:	e03d      	b.n	8005160 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d107      	bne.n	80050fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e038      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
 80050f0:	40023800 	.word	0x40023800
 80050f4:	40007000 	.word	0x40007000
 80050f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050fc:	4b1b      	ldr	r3, [pc, #108]	; (800516c <HAL_RCC_OscConfig+0x4ec>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d028      	beq.n	800515c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005114:	429a      	cmp	r2, r3
 8005116:	d121      	bne.n	800515c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005122:	429a      	cmp	r2, r3
 8005124:	d11a      	bne.n	800515c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800512c:	4013      	ands	r3, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005132:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005134:	4293      	cmp	r3, r2
 8005136:	d111      	bne.n	800515c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005142:	085b      	lsrs	r3, r3, #1
 8005144:	3b01      	subs	r3, #1
 8005146:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005148:	429a      	cmp	r2, r3
 800514a:	d107      	bne.n	800515c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005156:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d001      	beq.n	8005160 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40023800 	.word	0x40023800

08005170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0cc      	b.n	800531e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005184:	4b68      	ldr	r3, [pc, #416]	; (8005328 <HAL_RCC_ClockConfig+0x1b8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d90c      	bls.n	80051ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005192:	4b65      	ldr	r3, [pc, #404]	; (8005328 <HAL_RCC_ClockConfig+0x1b8>)
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800519a:	4b63      	ldr	r3, [pc, #396]	; (8005328 <HAL_RCC_ClockConfig+0x1b8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d001      	beq.n	80051ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0b8      	b.n	800531e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d020      	beq.n	80051fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0304 	and.w	r3, r3, #4
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051c4:	4b59      	ldr	r3, [pc, #356]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	4a58      	ldr	r2, [pc, #352]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80051ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d005      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051dc:	4b53      	ldr	r3, [pc, #332]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	4a52      	ldr	r2, [pc, #328]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80051e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051e8:	4b50      	ldr	r3, [pc, #320]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	494d      	ldr	r1, [pc, #308]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d044      	beq.n	8005290 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d107      	bne.n	800521e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800520e:	4b47      	ldr	r3, [pc, #284]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d119      	bne.n	800524e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e07f      	b.n	800531e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d003      	beq.n	800522e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800522a:	2b03      	cmp	r3, #3
 800522c:	d107      	bne.n	800523e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800522e:	4b3f      	ldr	r3, [pc, #252]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e06f      	b.n	800531e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800523e:	4b3b      	ldr	r3, [pc, #236]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e067      	b.n	800531e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800524e:	4b37      	ldr	r3, [pc, #220]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f023 0203 	bic.w	r2, r3, #3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	4934      	ldr	r1, [pc, #208]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	4313      	orrs	r3, r2
 800525e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005260:	f7fc f8f6 	bl	8001450 <HAL_GetTick>
 8005264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005266:	e00a      	b.n	800527e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005268:	f7fc f8f2 	bl	8001450 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	f241 3288 	movw	r2, #5000	; 0x1388
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e04f      	b.n	800531e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527e:	4b2b      	ldr	r3, [pc, #172]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f003 020c 	and.w	r2, r3, #12
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	429a      	cmp	r2, r3
 800528e:	d1eb      	bne.n	8005268 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005290:	4b25      	ldr	r3, [pc, #148]	; (8005328 <HAL_RCC_ClockConfig+0x1b8>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d20c      	bcs.n	80052b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800529e:	4b22      	ldr	r3, [pc, #136]	; (8005328 <HAL_RCC_ClockConfig+0x1b8>)
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052a6:	4b20      	ldr	r3, [pc, #128]	; (8005328 <HAL_RCC_ClockConfig+0x1b8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d001      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e032      	b.n	800531e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d008      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052c4:	4b19      	ldr	r3, [pc, #100]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4916      	ldr	r1, [pc, #88]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0308 	and.w	r3, r3, #8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d009      	beq.n	80052f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052e2:	4b12      	ldr	r3, [pc, #72]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	490e      	ldr	r1, [pc, #56]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052f6:	f000 f821 	bl	800533c <HAL_RCC_GetSysClockFreq>
 80052fa:	4602      	mov	r2, r0
 80052fc:	4b0b      	ldr	r3, [pc, #44]	; (800532c <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	091b      	lsrs	r3, r3, #4
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	490a      	ldr	r1, [pc, #40]	; (8005330 <HAL_RCC_ClockConfig+0x1c0>)
 8005308:	5ccb      	ldrb	r3, [r1, r3]
 800530a:	fa22 f303 	lsr.w	r3, r2, r3
 800530e:	4a09      	ldr	r2, [pc, #36]	; (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 8005310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005312:	4b09      	ldr	r3, [pc, #36]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f7fc f856 	bl	80013c8 <HAL_InitTick>

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40023c00 	.word	0x40023c00
 800532c:	40023800 	.word	0x40023800
 8005330:	0800ac8c 	.word	0x0800ac8c
 8005334:	20000004 	.word	0x20000004
 8005338:	20000008 	.word	0x20000008

0800533c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800533c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005340:	b094      	sub	sp, #80	; 0x50
 8005342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	647b      	str	r3, [r7, #68]	; 0x44
 8005348:	2300      	movs	r3, #0
 800534a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800534c:	2300      	movs	r3, #0
 800534e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005354:	4b79      	ldr	r3, [pc, #484]	; (800553c <HAL_RCC_GetSysClockFreq+0x200>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 030c 	and.w	r3, r3, #12
 800535c:	2b08      	cmp	r3, #8
 800535e:	d00d      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0x40>
 8005360:	2b08      	cmp	r3, #8
 8005362:	f200 80e1 	bhi.w	8005528 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <HAL_RCC_GetSysClockFreq+0x34>
 800536a:	2b04      	cmp	r3, #4
 800536c:	d003      	beq.n	8005376 <HAL_RCC_GetSysClockFreq+0x3a>
 800536e:	e0db      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005370:	4b73      	ldr	r3, [pc, #460]	; (8005540 <HAL_RCC_GetSysClockFreq+0x204>)
 8005372:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005374:	e0db      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005376:	4b73      	ldr	r3, [pc, #460]	; (8005544 <HAL_RCC_GetSysClockFreq+0x208>)
 8005378:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800537a:	e0d8      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800537c:	4b6f      	ldr	r3, [pc, #444]	; (800553c <HAL_RCC_GetSysClockFreq+0x200>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005384:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005386:	4b6d      	ldr	r3, [pc, #436]	; (800553c <HAL_RCC_GetSysClockFreq+0x200>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d063      	beq.n	800545a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005392:	4b6a      	ldr	r3, [pc, #424]	; (800553c <HAL_RCC_GetSysClockFreq+0x200>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	099b      	lsrs	r3, r3, #6
 8005398:	2200      	movs	r2, #0
 800539a:	63bb      	str	r3, [r7, #56]	; 0x38
 800539c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800539e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a4:	633b      	str	r3, [r7, #48]	; 0x30
 80053a6:	2300      	movs	r3, #0
 80053a8:	637b      	str	r3, [r7, #52]	; 0x34
 80053aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80053ae:	4622      	mov	r2, r4
 80053b0:	462b      	mov	r3, r5
 80053b2:	f04f 0000 	mov.w	r0, #0
 80053b6:	f04f 0100 	mov.w	r1, #0
 80053ba:	0159      	lsls	r1, r3, #5
 80053bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053c0:	0150      	lsls	r0, r2, #5
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4621      	mov	r1, r4
 80053c8:	1a51      	subs	r1, r2, r1
 80053ca:	6139      	str	r1, [r7, #16]
 80053cc:	4629      	mov	r1, r5
 80053ce:	eb63 0301 	sbc.w	r3, r3, r1
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053e0:	4659      	mov	r1, fp
 80053e2:	018b      	lsls	r3, r1, #6
 80053e4:	4651      	mov	r1, sl
 80053e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053ea:	4651      	mov	r1, sl
 80053ec:	018a      	lsls	r2, r1, #6
 80053ee:	4651      	mov	r1, sl
 80053f0:	ebb2 0801 	subs.w	r8, r2, r1
 80053f4:	4659      	mov	r1, fp
 80053f6:	eb63 0901 	sbc.w	r9, r3, r1
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	f04f 0300 	mov.w	r3, #0
 8005402:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005406:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800540a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800540e:	4690      	mov	r8, r2
 8005410:	4699      	mov	r9, r3
 8005412:	4623      	mov	r3, r4
 8005414:	eb18 0303 	adds.w	r3, r8, r3
 8005418:	60bb      	str	r3, [r7, #8]
 800541a:	462b      	mov	r3, r5
 800541c:	eb49 0303 	adc.w	r3, r9, r3
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800542e:	4629      	mov	r1, r5
 8005430:	024b      	lsls	r3, r1, #9
 8005432:	4621      	mov	r1, r4
 8005434:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005438:	4621      	mov	r1, r4
 800543a:	024a      	lsls	r2, r1, #9
 800543c:	4610      	mov	r0, r2
 800543e:	4619      	mov	r1, r3
 8005440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005442:	2200      	movs	r2, #0
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
 8005446:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005448:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800544c:	f7fa febc 	bl	80001c8 <__aeabi_uldivmod>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	4613      	mov	r3, r2
 8005456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005458:	e058      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800545a:	4b38      	ldr	r3, [pc, #224]	; (800553c <HAL_RCC_GetSysClockFreq+0x200>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	099b      	lsrs	r3, r3, #6
 8005460:	2200      	movs	r2, #0
 8005462:	4618      	mov	r0, r3
 8005464:	4611      	mov	r1, r2
 8005466:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800546a:	623b      	str	r3, [r7, #32]
 800546c:	2300      	movs	r3, #0
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
 8005470:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005474:	4642      	mov	r2, r8
 8005476:	464b      	mov	r3, r9
 8005478:	f04f 0000 	mov.w	r0, #0
 800547c:	f04f 0100 	mov.w	r1, #0
 8005480:	0159      	lsls	r1, r3, #5
 8005482:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005486:	0150      	lsls	r0, r2, #5
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4641      	mov	r1, r8
 800548e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005492:	4649      	mov	r1, r9
 8005494:	eb63 0b01 	sbc.w	fp, r3, r1
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	f04f 0300 	mov.w	r3, #0
 80054a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054ac:	ebb2 040a 	subs.w	r4, r2, sl
 80054b0:	eb63 050b 	sbc.w	r5, r3, fp
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	f04f 0300 	mov.w	r3, #0
 80054bc:	00eb      	lsls	r3, r5, #3
 80054be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054c2:	00e2      	lsls	r2, r4, #3
 80054c4:	4614      	mov	r4, r2
 80054c6:	461d      	mov	r5, r3
 80054c8:	4643      	mov	r3, r8
 80054ca:	18e3      	adds	r3, r4, r3
 80054cc:	603b      	str	r3, [r7, #0]
 80054ce:	464b      	mov	r3, r9
 80054d0:	eb45 0303 	adc.w	r3, r5, r3
 80054d4:	607b      	str	r3, [r7, #4]
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054e2:	4629      	mov	r1, r5
 80054e4:	028b      	lsls	r3, r1, #10
 80054e6:	4621      	mov	r1, r4
 80054e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054ec:	4621      	mov	r1, r4
 80054ee:	028a      	lsls	r2, r1, #10
 80054f0:	4610      	mov	r0, r2
 80054f2:	4619      	mov	r1, r3
 80054f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f6:	2200      	movs	r2, #0
 80054f8:	61bb      	str	r3, [r7, #24]
 80054fa:	61fa      	str	r2, [r7, #28]
 80054fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005500:	f7fa fe62 	bl	80001c8 <__aeabi_uldivmod>
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	4613      	mov	r3, r2
 800550a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800550c:	4b0b      	ldr	r3, [pc, #44]	; (800553c <HAL_RCC_GetSysClockFreq+0x200>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	0c1b      	lsrs	r3, r3, #16
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	3301      	adds	r3, #1
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800551c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800551e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005520:	fbb2 f3f3 	udiv	r3, r2, r3
 8005524:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005526:	e002      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005528:	4b05      	ldr	r3, [pc, #20]	; (8005540 <HAL_RCC_GetSysClockFreq+0x204>)
 800552a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800552c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800552e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005530:	4618      	mov	r0, r3
 8005532:	3750      	adds	r7, #80	; 0x50
 8005534:	46bd      	mov	sp, r7
 8005536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800553a:	bf00      	nop
 800553c:	40023800 	.word	0x40023800
 8005540:	00f42400 	.word	0x00f42400
 8005544:	007a1200 	.word	0x007a1200

08005548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800554c:	4b03      	ldr	r3, [pc, #12]	; (800555c <HAL_RCC_GetHCLKFreq+0x14>)
 800554e:	681b      	ldr	r3, [r3, #0]
}
 8005550:	4618      	mov	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	20000004 	.word	0x20000004

08005560 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005564:	f7ff fff0 	bl	8005548 <HAL_RCC_GetHCLKFreq>
 8005568:	4602      	mov	r2, r0
 800556a:	4b05      	ldr	r3, [pc, #20]	; (8005580 <HAL_RCC_GetPCLK1Freq+0x20>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	0a9b      	lsrs	r3, r3, #10
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	4903      	ldr	r1, [pc, #12]	; (8005584 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005576:	5ccb      	ldrb	r3, [r1, r3]
 8005578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800557c:	4618      	mov	r0, r3
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40023800 	.word	0x40023800
 8005584:	0800ac9c 	.word	0x0800ac9c

08005588 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d105      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d035      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055b0:	4b62      	ldr	r3, [pc, #392]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055b6:	f7fb ff4b 	bl	8001450 <HAL_GetTick>
 80055ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055bc:	e008      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055be:	f7fb ff47 	bl	8001450 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e0b0      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055d0:	4b5b      	ldr	r3, [pc, #364]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1f0      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	019a      	lsls	r2, r3, #6
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	071b      	lsls	r3, r3, #28
 80055e8:	4955      	ldr	r1, [pc, #340]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055f0:	4b52      	ldr	r3, [pc, #328]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80055f2:	2201      	movs	r2, #1
 80055f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055f6:	f7fb ff2b 	bl	8001450 <HAL_GetTick>
 80055fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055fc:	e008      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055fe:	f7fb ff27 	bl	8001450 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e090      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005610:	4b4b      	ldr	r3, [pc, #300]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f0      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 8083 	beq.w	8005730 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	4b44      	ldr	r3, [pc, #272]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	4a43      	ldr	r2, [pc, #268]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005638:	6413      	str	r3, [r2, #64]	; 0x40
 800563a:	4b41      	ldr	r3, [pc, #260]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005646:	4b3f      	ldr	r3, [pc, #252]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a3e      	ldr	r2, [pc, #248]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800564c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005650:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005652:	f7fb fefd 	bl	8001450 <HAL_GetTick>
 8005656:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005658:	e008      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800565a:	f7fb fef9 	bl	8001450 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e062      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800566c:	4b35      	ldr	r3, [pc, #212]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0f0      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005678:	4b31      	ldr	r3, [pc, #196]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800567a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005680:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d02f      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	429a      	cmp	r2, r3
 8005694:	d028      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005696:	4b2a      	ldr	r3, [pc, #168]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800569e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056a0:	4b29      	ldr	r3, [pc, #164]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056a6:	4b28      	ldr	r3, [pc, #160]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056ac:	4a24      	ldr	r2, [pc, #144]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056b2:	4b23      	ldr	r3, [pc, #140]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d114      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056be:	f7fb fec7 	bl	8001450 <HAL_GetTick>
 80056c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c4:	e00a      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056c6:	f7fb fec3 	bl	8001450 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d901      	bls.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e02a      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056dc:	4b18      	ldr	r3, [pc, #96]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0ee      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056f4:	d10d      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80056f6:	4b12      	ldr	r3, [pc, #72]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570a:	490d      	ldr	r1, [pc, #52]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800570c:	4313      	orrs	r3, r2
 800570e:	608b      	str	r3, [r1, #8]
 8005710:	e005      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005712:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	4a0a      	ldr	r2, [pc, #40]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005718:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800571c:	6093      	str	r3, [r2, #8]
 800571e:	4b08      	ldr	r3, [pc, #32]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005720:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800572a:	4905      	ldr	r1, [pc, #20]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800572c:	4313      	orrs	r3, r2
 800572e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	42470068 	.word	0x42470068
 8005740:	40023800 	.word	0x40023800
 8005744:	40007000 	.word	0x40007000
 8005748:	42470e40 	.word	0x42470e40

0800574c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d13f      	bne.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800576a:	4b24      	ldr	r3, [pc, #144]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d006      	beq.n	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005780:	d12f      	bne.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005782:	4b1f      	ldr	r3, [pc, #124]	; (8005800 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005784:	617b      	str	r3, [r7, #20]
          break;
 8005786:	e02f      	b.n	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005788:	4b1c      	ldr	r3, [pc, #112]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005790:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005794:	d108      	bne.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005796:	4b19      	ldr	r3, [pc, #100]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800579e:	4a19      	ldr	r2, [pc, #100]	; (8005804 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80057a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	e007      	b.n	80057b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80057a8:	4b14      	ldr	r3, [pc, #80]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057b0:	4a15      	ldr	r2, [pc, #84]	; (8005808 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80057b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80057b8:	4b10      	ldr	r3, [pc, #64]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80057ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057be:	099b      	lsrs	r3, r3, #6
 80057c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	fb02 f303 	mul.w	r3, r2, r3
 80057ca:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80057cc:	4b0b      	ldr	r3, [pc, #44]	; (80057fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80057ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057d2:	0f1b      	lsrs	r3, r3, #28
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	fbb2 f3f3 	udiv	r3, r2, r3
 80057de:	617b      	str	r3, [r7, #20]
          break;
 80057e0:	e002      	b.n	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	617b      	str	r3, [r7, #20]
          break;
 80057e6:	bf00      	nop
        }
      }
      break;
 80057e8:	e000      	b.n	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 80057ea:	bf00      	nop
    }
  }
  return frequency;
 80057ec:	697b      	ldr	r3, [r7, #20]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	371c      	adds	r7, #28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40023800 	.word	0x40023800
 8005800:	00bb8000 	.word	0x00bb8000
 8005804:	007a1200 	.word	0x007a1200
 8005808:	00f42400 	.word	0x00f42400

0800580c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e07b      	b.n	8005916 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	2b00      	cmp	r3, #0
 8005824:	d108      	bne.n	8005838 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800582e:	d009      	beq.n	8005844 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	61da      	str	r2, [r3, #28]
 8005836:	e005      	b.n	8005844 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7fb fb0e 	bl	8000e80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800587a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c8:	ea42 0103 	orr.w	r1, r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	0c1b      	lsrs	r3, r3, #16
 80058e2:	f003 0104 	and.w	r1, r3, #4
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	f003 0210 	and.w	r2, r3, #16
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69da      	ldr	r2, [r3, #28]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005904:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b08c      	sub	sp, #48	; 0x30
 8005922:	af00      	add	r7, sp, #0
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
 800592a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800592c:	2301      	movs	r3, #1
 800592e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005930:	2300      	movs	r3, #0
 8005932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_SPI_TransmitReceive+0x26>
 8005940:	2302      	movs	r3, #2
 8005942:	e198      	b.n	8005c76 <HAL_SPI_TransmitReceive+0x358>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800594c:	f7fb fd80 	bl	8001450 <HAL_GetTick>
 8005950:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005962:	887b      	ldrh	r3, [r7, #2]
 8005964:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005966:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800596a:	2b01      	cmp	r3, #1
 800596c:	d00f      	beq.n	800598e <HAL_SPI_TransmitReceive+0x70>
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005974:	d107      	bne.n	8005986 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d103      	bne.n	8005986 <HAL_SPI_TransmitReceive+0x68>
 800597e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005982:	2b04      	cmp	r3, #4
 8005984:	d003      	beq.n	800598e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005986:	2302      	movs	r3, #2
 8005988:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800598c:	e16d      	b.n	8005c6a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d005      	beq.n	80059a0 <HAL_SPI_TransmitReceive+0x82>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <HAL_SPI_TransmitReceive+0x82>
 800599a:	887b      	ldrh	r3, [r7, #2]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d103      	bne.n	80059a8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059a6:	e160      	b.n	8005c6a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d003      	beq.n	80059bc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2205      	movs	r2, #5
 80059b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	887a      	ldrh	r2, [r7, #2]
 80059cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	887a      	ldrh	r2, [r7, #2]
 80059d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	887a      	ldrh	r2, [r7, #2]
 80059de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	887a      	ldrh	r2, [r7, #2]
 80059e4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fc:	2b40      	cmp	r3, #64	; 0x40
 80059fe:	d007      	beq.n	8005a10 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a18:	d17c      	bne.n	8005b14 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <HAL_SPI_TransmitReceive+0x10a>
 8005a22:	8b7b      	ldrh	r3, [r7, #26]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d16a      	bne.n	8005afe <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2c:	881a      	ldrh	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a38:	1c9a      	adds	r2, r3, #2
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a4c:	e057      	b.n	8005afe <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d11b      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x176>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d016      	beq.n	8005a94 <HAL_SPI_TransmitReceive+0x176>
 8005a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d113      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	881a      	ldrh	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7c:	1c9a      	adds	r2, r3, #2
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d119      	bne.n	8005ad6 <HAL_SPI_TransmitReceive+0x1b8>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d014      	beq.n	8005ad6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab6:	b292      	uxth	r2, r2
 8005ab8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abe:	1c9a      	adds	r2, r3, #2
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ad6:	f7fb fcbb 	bl	8001450 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d80b      	bhi.n	8005afe <HAL_SPI_TransmitReceive+0x1e0>
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aec:	d007      	beq.n	8005afe <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005afc:	e0b5      	b.n	8005c6a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1a2      	bne.n	8005a4e <HAL_SPI_TransmitReceive+0x130>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d19d      	bne.n	8005a4e <HAL_SPI_TransmitReceive+0x130>
 8005b12:	e080      	b.n	8005c16 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_SPI_TransmitReceive+0x204>
 8005b1c:	8b7b      	ldrh	r3, [r7, #26]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d16f      	bne.n	8005c02 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	7812      	ldrb	r2, [r2, #0]
 8005b2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b48:	e05b      	b.n	8005c02 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d11c      	bne.n	8005b92 <HAL_SPI_TransmitReceive+0x274>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d017      	beq.n	8005b92 <HAL_SPI_TransmitReceive+0x274>
 8005b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d114      	bne.n	8005b92 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	330c      	adds	r3, #12
 8005b72:	7812      	ldrb	r2, [r2, #0]
 8005b74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d119      	bne.n	8005bd4 <HAL_SPI_TransmitReceive+0x2b6>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d014      	beq.n	8005bd4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bd4:	f7fb fc3c 	bl	8001450 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d803      	bhi.n	8005bec <HAL_SPI_TransmitReceive+0x2ce>
 8005be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bea:	d102      	bne.n	8005bf2 <HAL_SPI_TransmitReceive+0x2d4>
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d107      	bne.n	8005c02 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005c00:	e033      	b.n	8005c6a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d19e      	bne.n	8005b4a <HAL_SPI_TransmitReceive+0x22c>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d199      	bne.n	8005b4a <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f8b8 	bl	8005d90 <SPI_EndRxTxTransaction>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d006      	beq.n	8005c34 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c32:	e01a      	b.n	8005c6a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	617b      	str	r3, [r7, #20]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c60:	e003      	b.n	8005c6a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3730      	adds	r7, #48	; 0x30
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c90:	f7fb fbde 	bl	8001450 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	1a9b      	subs	r3, r3, r2
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ca0:	f7fb fbd6 	bl	8001450 <HAL_GetTick>
 8005ca4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ca6:	4b39      	ldr	r3, [pc, #228]	; (8005d8c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	015b      	lsls	r3, r3, #5
 8005cac:	0d1b      	lsrs	r3, r3, #20
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	fb02 f303 	mul.w	r3, r2, r3
 8005cb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cb6:	e054      	b.n	8005d62 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbe:	d050      	beq.n	8005d62 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cc0:	f7fb fbc6 	bl	8001450 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d902      	bls.n	8005cd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d13d      	bne.n	8005d52 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ce4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cee:	d111      	bne.n	8005d14 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cf8:	d004      	beq.n	8005d04 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d02:	d107      	bne.n	8005d14 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d12:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d1c:	d10f      	bne.n	8005d3e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d2c:	601a      	str	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d3c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e017      	b.n	8005d82 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	bf0c      	ite	eq
 8005d72:	2301      	moveq	r3, #1
 8005d74:	2300      	movne	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d19b      	bne.n	8005cb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3720      	adds	r7, #32
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20000004 	.word	0x20000004

08005d90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2201      	movs	r2, #1
 8005da4:	2102      	movs	r1, #2
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f7ff ff6a 	bl	8005c80 <SPI_WaitFlagStateUntilTimeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d007      	beq.n	8005dc2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db6:	f043 0220 	orr.w	r2, r3, #32
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e032      	b.n	8005e28 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005dc2:	4b1b      	ldr	r3, [pc, #108]	; (8005e30 <SPI_EndRxTxTransaction+0xa0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a1b      	ldr	r2, [pc, #108]	; (8005e34 <SPI_EndRxTxTransaction+0xa4>)
 8005dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dcc:	0d5b      	lsrs	r3, r3, #21
 8005dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dd2:	fb02 f303 	mul.w	r3, r2, r3
 8005dd6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005de0:	d112      	bne.n	8005e08 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	9300      	str	r3, [sp, #0]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2200      	movs	r2, #0
 8005dea:	2180      	movs	r1, #128	; 0x80
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f7ff ff47 	bl	8005c80 <SPI_WaitFlagStateUntilTimeout>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d016      	beq.n	8005e26 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfc:	f043 0220 	orr.w	r2, r3, #32
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e00f      	b.n	8005e28 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1e:	2b80      	cmp	r3, #128	; 0x80
 8005e20:	d0f2      	beq.n	8005e08 <SPI_EndRxTxTransaction+0x78>
 8005e22:	e000      	b.n	8005e26 <SPI_EndRxTxTransaction+0x96>
        break;
 8005e24:	bf00      	nop
  }

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20000004 	.word	0x20000004
 8005e34:	165e9f81 	.word	0x165e9f81

08005e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e041      	b.n	8005ece <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7fb f9ce 	bl	8001200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4619      	mov	r1, r3
 8005e76:	4610      	mov	r0, r2
 8005e78:	f000 fb48 	bl	800650c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e041      	b.n	8005f6c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d106      	bne.n	8005f02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f839 	bl	8005f74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2202      	movs	r2, #2
 8005f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	3304      	adds	r3, #4
 8005f12:	4619      	mov	r1, r3
 8005f14:	4610      	mov	r0, r2
 8005f16:	f000 faf9 	bl	800650c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d109      	bne.n	8005fac <HAL_TIM_PWM_Start+0x24>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	bf14      	ite	ne
 8005fa4:	2301      	movne	r3, #1
 8005fa6:	2300      	moveq	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	e022      	b.n	8005ff2 <HAL_TIM_PWM_Start+0x6a>
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d109      	bne.n	8005fc6 <HAL_TIM_PWM_Start+0x3e>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	bf14      	ite	ne
 8005fbe:	2301      	movne	r3, #1
 8005fc0:	2300      	moveq	r3, #0
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	e015      	b.n	8005ff2 <HAL_TIM_PWM_Start+0x6a>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d109      	bne.n	8005fe0 <HAL_TIM_PWM_Start+0x58>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	bf14      	ite	ne
 8005fd8:	2301      	movne	r3, #1
 8005fda:	2300      	moveq	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	e008      	b.n	8005ff2 <HAL_TIM_PWM_Start+0x6a>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	bf14      	ite	ne
 8005fec:	2301      	movne	r3, #1
 8005fee:	2300      	moveq	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e07c      	b.n	80060f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d104      	bne.n	800600a <HAL_TIM_PWM_Start+0x82>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006008:	e013      	b.n	8006032 <HAL_TIM_PWM_Start+0xaa>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b04      	cmp	r3, #4
 800600e:	d104      	bne.n	800601a <HAL_TIM_PWM_Start+0x92>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006018:	e00b      	b.n	8006032 <HAL_TIM_PWM_Start+0xaa>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b08      	cmp	r3, #8
 800601e:	d104      	bne.n	800602a <HAL_TIM_PWM_Start+0xa2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006028:	e003      	b.n	8006032 <HAL_TIM_PWM_Start+0xaa>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2202      	movs	r2, #2
 800602e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2201      	movs	r2, #1
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fd5c 	bl	8006af8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a2d      	ldr	r2, [pc, #180]	; (80060fc <HAL_TIM_PWM_Start+0x174>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d004      	beq.n	8006054 <HAL_TIM_PWM_Start+0xcc>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a2c      	ldr	r2, [pc, #176]	; (8006100 <HAL_TIM_PWM_Start+0x178>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d101      	bne.n	8006058 <HAL_TIM_PWM_Start+0xd0>
 8006054:	2301      	movs	r3, #1
 8006056:	e000      	b.n	800605a <HAL_TIM_PWM_Start+0xd2>
 8006058:	2300      	movs	r3, #0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800606c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a22      	ldr	r2, [pc, #136]	; (80060fc <HAL_TIM_PWM_Start+0x174>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d022      	beq.n	80060be <HAL_TIM_PWM_Start+0x136>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006080:	d01d      	beq.n	80060be <HAL_TIM_PWM_Start+0x136>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a1f      	ldr	r2, [pc, #124]	; (8006104 <HAL_TIM_PWM_Start+0x17c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d018      	beq.n	80060be <HAL_TIM_PWM_Start+0x136>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1d      	ldr	r2, [pc, #116]	; (8006108 <HAL_TIM_PWM_Start+0x180>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d013      	beq.n	80060be <HAL_TIM_PWM_Start+0x136>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a1c      	ldr	r2, [pc, #112]	; (800610c <HAL_TIM_PWM_Start+0x184>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d00e      	beq.n	80060be <HAL_TIM_PWM_Start+0x136>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a16      	ldr	r2, [pc, #88]	; (8006100 <HAL_TIM_PWM_Start+0x178>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d009      	beq.n	80060be <HAL_TIM_PWM_Start+0x136>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a18      	ldr	r2, [pc, #96]	; (8006110 <HAL_TIM_PWM_Start+0x188>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d004      	beq.n	80060be <HAL_TIM_PWM_Start+0x136>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a16      	ldr	r2, [pc, #88]	; (8006114 <HAL_TIM_PWM_Start+0x18c>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d111      	bne.n	80060e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b06      	cmp	r3, #6
 80060ce:	d010      	beq.n	80060f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 0201 	orr.w	r2, r2, #1
 80060de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e0:	e007      	b.n	80060f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f042 0201 	orr.w	r2, r2, #1
 80060f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	40010000 	.word	0x40010000
 8006100:	40010400 	.word	0x40010400
 8006104:	40000400 	.word	0x40000400
 8006108:	40000800 	.word	0x40000800
 800610c:	40000c00 	.word	0x40000c00
 8006110:	40014000 	.word	0x40014000
 8006114:	40001800 	.word	0x40001800

08006118 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2200      	movs	r2, #0
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fce4 	bl	8006af8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a2e      	ldr	r2, [pc, #184]	; (80061f0 <HAL_TIM_PWM_Stop+0xd8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d004      	beq.n	8006144 <HAL_TIM_PWM_Stop+0x2c>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a2d      	ldr	r2, [pc, #180]	; (80061f4 <HAL_TIM_PWM_Stop+0xdc>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d101      	bne.n	8006148 <HAL_TIM_PWM_Stop+0x30>
 8006144:	2301      	movs	r3, #1
 8006146:	e000      	b.n	800614a <HAL_TIM_PWM_Stop+0x32>
 8006148:	2300      	movs	r3, #0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d017      	beq.n	800617e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6a1a      	ldr	r2, [r3, #32]
 8006154:	f241 1311 	movw	r3, #4369	; 0x1111
 8006158:	4013      	ands	r3, r2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10f      	bne.n	800617e <HAL_TIM_PWM_Stop+0x66>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6a1a      	ldr	r2, [r3, #32]
 8006164:	f240 4344 	movw	r3, #1092	; 0x444
 8006168:	4013      	ands	r3, r2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d107      	bne.n	800617e <HAL_TIM_PWM_Stop+0x66>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800617c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6a1a      	ldr	r2, [r3, #32]
 8006184:	f241 1311 	movw	r3, #4369	; 0x1111
 8006188:	4013      	ands	r3, r2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10f      	bne.n	80061ae <HAL_TIM_PWM_Stop+0x96>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6a1a      	ldr	r2, [r3, #32]
 8006194:	f240 4344 	movw	r3, #1092	; 0x444
 8006198:	4013      	ands	r3, r2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d107      	bne.n	80061ae <HAL_TIM_PWM_Stop+0x96>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0201 	bic.w	r2, r2, #1
 80061ac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d104      	bne.n	80061be <HAL_TIM_PWM_Stop+0xa6>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061bc:	e013      	b.n	80061e6 <HAL_TIM_PWM_Stop+0xce>
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d104      	bne.n	80061ce <HAL_TIM_PWM_Stop+0xb6>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061cc:	e00b      	b.n	80061e6 <HAL_TIM_PWM_Stop+0xce>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d104      	bne.n	80061de <HAL_TIM_PWM_Stop+0xc6>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061dc:	e003      	b.n	80061e6 <HAL_TIM_PWM_Stop+0xce>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	40010000 	.word	0x40010000
 80061f4:	40010400 	.word	0x40010400

080061f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006212:	2302      	movs	r3, #2
 8006214:	e0ae      	b.n	8006374 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b0c      	cmp	r3, #12
 8006222:	f200 809f 	bhi.w	8006364 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006226:	a201      	add	r2, pc, #4	; (adr r2, 800622c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	08006261 	.word	0x08006261
 8006230:	08006365 	.word	0x08006365
 8006234:	08006365 	.word	0x08006365
 8006238:	08006365 	.word	0x08006365
 800623c:	080062a1 	.word	0x080062a1
 8006240:	08006365 	.word	0x08006365
 8006244:	08006365 	.word	0x08006365
 8006248:	08006365 	.word	0x08006365
 800624c:	080062e3 	.word	0x080062e3
 8006250:	08006365 	.word	0x08006365
 8006254:	08006365 	.word	0x08006365
 8006258:	08006365 	.word	0x08006365
 800625c:	08006323 	.word	0x08006323
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68b9      	ldr	r1, [r7, #8]
 8006266:	4618      	mov	r0, r3
 8006268:	f000 f9fc 	bl	8006664 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0208 	orr.w	r2, r2, #8
 800627a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699a      	ldr	r2, [r3, #24]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0204 	bic.w	r2, r2, #4
 800628a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6999      	ldr	r1, [r3, #24]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	691a      	ldr	r2, [r3, #16]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	619a      	str	r2, [r3, #24]
      break;
 800629e:	e064      	b.n	800636a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68b9      	ldr	r1, [r7, #8]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 fa4c 	bl	8006744 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6999      	ldr	r1, [r3, #24]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	021a      	lsls	r2, r3, #8
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	619a      	str	r2, [r3, #24]
      break;
 80062e0:	e043      	b.n	800636a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68b9      	ldr	r1, [r7, #8]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 faa1 	bl	8006830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69da      	ldr	r2, [r3, #28]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f042 0208 	orr.w	r2, r2, #8
 80062fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0204 	bic.w	r2, r2, #4
 800630c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69d9      	ldr	r1, [r3, #28]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	430a      	orrs	r2, r1
 800631e:	61da      	str	r2, [r3, #28]
      break;
 8006320:	e023      	b.n	800636a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	4618      	mov	r0, r3
 800632a:	f000 faf5 	bl	8006918 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69da      	ldr	r2, [r3, #28]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800633c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69da      	ldr	r2, [r3, #28]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800634c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69d9      	ldr	r1, [r3, #28]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	021a      	lsls	r2, r3, #8
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	61da      	str	r2, [r3, #28]
      break;
 8006362:	e002      	b.n	800636a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	75fb      	strb	r3, [r7, #23]
      break;
 8006368:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006372:	7dfb      	ldrb	r3, [r7, #23]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006390:	2b01      	cmp	r3, #1
 8006392:	d101      	bne.n	8006398 <HAL_TIM_ConfigClockSource+0x1c>
 8006394:	2302      	movs	r3, #2
 8006396:	e0b4      	b.n	8006502 <HAL_TIM_ConfigClockSource+0x186>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d0:	d03e      	beq.n	8006450 <HAL_TIM_ConfigClockSource+0xd4>
 80063d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d6:	f200 8087 	bhi.w	80064e8 <HAL_TIM_ConfigClockSource+0x16c>
 80063da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063de:	f000 8086 	beq.w	80064ee <HAL_TIM_ConfigClockSource+0x172>
 80063e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e6:	d87f      	bhi.n	80064e8 <HAL_TIM_ConfigClockSource+0x16c>
 80063e8:	2b70      	cmp	r3, #112	; 0x70
 80063ea:	d01a      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0xa6>
 80063ec:	2b70      	cmp	r3, #112	; 0x70
 80063ee:	d87b      	bhi.n	80064e8 <HAL_TIM_ConfigClockSource+0x16c>
 80063f0:	2b60      	cmp	r3, #96	; 0x60
 80063f2:	d050      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x11a>
 80063f4:	2b60      	cmp	r3, #96	; 0x60
 80063f6:	d877      	bhi.n	80064e8 <HAL_TIM_ConfigClockSource+0x16c>
 80063f8:	2b50      	cmp	r3, #80	; 0x50
 80063fa:	d03c      	beq.n	8006476 <HAL_TIM_ConfigClockSource+0xfa>
 80063fc:	2b50      	cmp	r3, #80	; 0x50
 80063fe:	d873      	bhi.n	80064e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006400:	2b40      	cmp	r3, #64	; 0x40
 8006402:	d058      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0x13a>
 8006404:	2b40      	cmp	r3, #64	; 0x40
 8006406:	d86f      	bhi.n	80064e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006408:	2b30      	cmp	r3, #48	; 0x30
 800640a:	d064      	beq.n	80064d6 <HAL_TIM_ConfigClockSource+0x15a>
 800640c:	2b30      	cmp	r3, #48	; 0x30
 800640e:	d86b      	bhi.n	80064e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006410:	2b20      	cmp	r3, #32
 8006412:	d060      	beq.n	80064d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006414:	2b20      	cmp	r3, #32
 8006416:	d867      	bhi.n	80064e8 <HAL_TIM_ConfigClockSource+0x16c>
 8006418:	2b00      	cmp	r3, #0
 800641a:	d05c      	beq.n	80064d6 <HAL_TIM_ConfigClockSource+0x15a>
 800641c:	2b10      	cmp	r3, #16
 800641e:	d05a      	beq.n	80064d6 <HAL_TIM_ConfigClockSource+0x15a>
 8006420:	e062      	b.n	80064e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006432:	f000 fb41 	bl	8006ab8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006444:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	609a      	str	r2, [r3, #8]
      break;
 800644e:	e04f      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006460:	f000 fb2a 	bl	8006ab8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006472:	609a      	str	r2, [r3, #8]
      break;
 8006474:	e03c      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006482:	461a      	mov	r2, r3
 8006484:	f000 fa9e 	bl	80069c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2150      	movs	r1, #80	; 0x50
 800648e:	4618      	mov	r0, r3
 8006490:	f000 faf7 	bl	8006a82 <TIM_ITRx_SetConfig>
      break;
 8006494:	e02c      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064a2:	461a      	mov	r2, r3
 80064a4:	f000 fabd 	bl	8006a22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2160      	movs	r1, #96	; 0x60
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fae7 	bl	8006a82 <TIM_ITRx_SetConfig>
      break;
 80064b4:	e01c      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064c2:	461a      	mov	r2, r3
 80064c4:	f000 fa7e 	bl	80069c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2140      	movs	r1, #64	; 0x40
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 fad7 	bl	8006a82 <TIM_ITRx_SetConfig>
      break;
 80064d4:	e00c      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4619      	mov	r1, r3
 80064e0:	4610      	mov	r0, r2
 80064e2:	f000 face 	bl	8006a82 <TIM_ITRx_SetConfig>
      break;
 80064e6:	e003      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	73fb      	strb	r3, [r7, #15]
      break;
 80064ec:	e000      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006500:	7bfb      	ldrb	r3, [r7, #15]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
	...

0800650c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a46      	ldr	r2, [pc, #280]	; (8006638 <TIM_Base_SetConfig+0x12c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d013      	beq.n	800654c <TIM_Base_SetConfig+0x40>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800652a:	d00f      	beq.n	800654c <TIM_Base_SetConfig+0x40>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a43      	ldr	r2, [pc, #268]	; (800663c <TIM_Base_SetConfig+0x130>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00b      	beq.n	800654c <TIM_Base_SetConfig+0x40>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a42      	ldr	r2, [pc, #264]	; (8006640 <TIM_Base_SetConfig+0x134>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d007      	beq.n	800654c <TIM_Base_SetConfig+0x40>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a41      	ldr	r2, [pc, #260]	; (8006644 <TIM_Base_SetConfig+0x138>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d003      	beq.n	800654c <TIM_Base_SetConfig+0x40>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a40      	ldr	r2, [pc, #256]	; (8006648 <TIM_Base_SetConfig+0x13c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d108      	bne.n	800655e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a35      	ldr	r2, [pc, #212]	; (8006638 <TIM_Base_SetConfig+0x12c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d02b      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656c:	d027      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a32      	ldr	r2, [pc, #200]	; (800663c <TIM_Base_SetConfig+0x130>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d023      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a31      	ldr	r2, [pc, #196]	; (8006640 <TIM_Base_SetConfig+0x134>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01f      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a30      	ldr	r2, [pc, #192]	; (8006644 <TIM_Base_SetConfig+0x138>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d01b      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a2f      	ldr	r2, [pc, #188]	; (8006648 <TIM_Base_SetConfig+0x13c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d017      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a2e      	ldr	r2, [pc, #184]	; (800664c <TIM_Base_SetConfig+0x140>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d013      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a2d      	ldr	r2, [pc, #180]	; (8006650 <TIM_Base_SetConfig+0x144>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00f      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a2c      	ldr	r2, [pc, #176]	; (8006654 <TIM_Base_SetConfig+0x148>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00b      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a2b      	ldr	r2, [pc, #172]	; (8006658 <TIM_Base_SetConfig+0x14c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d007      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a2a      	ldr	r2, [pc, #168]	; (800665c <TIM_Base_SetConfig+0x150>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d003      	beq.n	80065be <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a29      	ldr	r2, [pc, #164]	; (8006660 <TIM_Base_SetConfig+0x154>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d108      	bne.n	80065d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a10      	ldr	r2, [pc, #64]	; (8006638 <TIM_Base_SetConfig+0x12c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d003      	beq.n	8006604 <TIM_Base_SetConfig+0xf8>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a12      	ldr	r2, [pc, #72]	; (8006648 <TIM_Base_SetConfig+0x13c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d103      	bne.n	800660c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	691a      	ldr	r2, [r3, #16]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	2b01      	cmp	r3, #1
 800661c:	d105      	bne.n	800662a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f023 0201 	bic.w	r2, r3, #1
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	611a      	str	r2, [r3, #16]
  }
}
 800662a:	bf00      	nop
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40010000 	.word	0x40010000
 800663c:	40000400 	.word	0x40000400
 8006640:	40000800 	.word	0x40000800
 8006644:	40000c00 	.word	0x40000c00
 8006648:	40010400 	.word	0x40010400
 800664c:	40014000 	.word	0x40014000
 8006650:	40014400 	.word	0x40014400
 8006654:	40014800 	.word	0x40014800
 8006658:	40001800 	.word	0x40001800
 800665c:	40001c00 	.word	0x40001c00
 8006660:	40002000 	.word	0x40002000

08006664 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	f023 0201 	bic.w	r2, r3, #1
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0303 	bic.w	r3, r3, #3
 800669a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f023 0302 	bic.w	r3, r3, #2
 80066ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a20      	ldr	r2, [pc, #128]	; (800673c <TIM_OC1_SetConfig+0xd8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d003      	beq.n	80066c8 <TIM_OC1_SetConfig+0x64>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a1f      	ldr	r2, [pc, #124]	; (8006740 <TIM_OC1_SetConfig+0xdc>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d10c      	bne.n	80066e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f023 0308 	bic.w	r3, r3, #8
 80066ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f023 0304 	bic.w	r3, r3, #4
 80066e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a15      	ldr	r2, [pc, #84]	; (800673c <TIM_OC1_SetConfig+0xd8>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d003      	beq.n	80066f2 <TIM_OC1_SetConfig+0x8e>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a14      	ldr	r2, [pc, #80]	; (8006740 <TIM_OC1_SetConfig+0xdc>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d111      	bne.n	8006716 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	4313      	orrs	r3, r2
 800670a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	4313      	orrs	r3, r2
 8006714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	621a      	str	r2, [r3, #32]
}
 8006730:	bf00      	nop
 8006732:	371c      	adds	r7, #28
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	40010000 	.word	0x40010000
 8006740:	40010400 	.word	0x40010400

08006744 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	f023 0210 	bic.w	r2, r3, #16
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800677a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	021b      	lsls	r3, r3, #8
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f023 0320 	bic.w	r3, r3, #32
 800678e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	4313      	orrs	r3, r2
 800679a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a22      	ldr	r2, [pc, #136]	; (8006828 <TIM_OC2_SetConfig+0xe4>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d003      	beq.n	80067ac <TIM_OC2_SetConfig+0x68>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a21      	ldr	r2, [pc, #132]	; (800682c <TIM_OC2_SetConfig+0xe8>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d10d      	bne.n	80067c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	011b      	lsls	r3, r3, #4
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	4313      	orrs	r3, r2
 80067be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a17      	ldr	r2, [pc, #92]	; (8006828 <TIM_OC2_SetConfig+0xe4>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d003      	beq.n	80067d8 <TIM_OC2_SetConfig+0x94>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a16      	ldr	r2, [pc, #88]	; (800682c <TIM_OC2_SetConfig+0xe8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d113      	bne.n	8006800 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	621a      	str	r2, [r3, #32]
}
 800681a:	bf00      	nop
 800681c:	371c      	adds	r7, #28
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40010000 	.word	0x40010000
 800682c:	40010400 	.word	0x40010400

08006830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0303 	bic.w	r3, r3, #3
 8006866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	021b      	lsls	r3, r3, #8
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a21      	ldr	r2, [pc, #132]	; (8006910 <TIM_OC3_SetConfig+0xe0>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d003      	beq.n	8006896 <TIM_OC3_SetConfig+0x66>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a20      	ldr	r2, [pc, #128]	; (8006914 <TIM_OC3_SetConfig+0xe4>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d10d      	bne.n	80068b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800689c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	021b      	lsls	r3, r3, #8
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a16      	ldr	r2, [pc, #88]	; (8006910 <TIM_OC3_SetConfig+0xe0>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d003      	beq.n	80068c2 <TIM_OC3_SetConfig+0x92>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a15      	ldr	r2, [pc, #84]	; (8006914 <TIM_OC3_SetConfig+0xe4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d113      	bne.n	80068ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	011b      	lsls	r3, r3, #4
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	4313      	orrs	r3, r2
 80068dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	011b      	lsls	r3, r3, #4
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	621a      	str	r2, [r3, #32]
}
 8006904:	bf00      	nop
 8006906:	371c      	adds	r7, #28
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	40010000 	.word	0x40010000
 8006914:	40010400 	.word	0x40010400

08006918 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006918:	b480      	push	{r7}
 800691a:	b087      	sub	sp, #28
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800694e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	021b      	lsls	r3, r3, #8
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	031b      	lsls	r3, r3, #12
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a12      	ldr	r2, [pc, #72]	; (80069bc <TIM_OC4_SetConfig+0xa4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d003      	beq.n	8006980 <TIM_OC4_SetConfig+0x68>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a11      	ldr	r2, [pc, #68]	; (80069c0 <TIM_OC4_SetConfig+0xa8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d109      	bne.n	8006994 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006986:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	019b      	lsls	r3, r3, #6
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	4313      	orrs	r3, r2
 8006992:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	621a      	str	r2, [r3, #32]
}
 80069ae:	bf00      	nop
 80069b0:	371c      	adds	r7, #28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	40010000 	.word	0x40010000
 80069c0:	40010400 	.word	0x40010400

080069c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	f023 0201 	bic.w	r2, r3, #1
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f023 030a 	bic.w	r3, r3, #10
 8006a00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	621a      	str	r2, [r3, #32]
}
 8006a16:	bf00      	nop
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b087      	sub	sp, #28
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	f023 0210 	bic.w	r2, r3, #16
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	031b      	lsls	r3, r3, #12
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	621a      	str	r2, [r3, #32]
}
 8006a76:	bf00      	nop
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b085      	sub	sp, #20
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	f043 0307 	orr.w	r3, r3, #7
 8006aa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	609a      	str	r2, [r3, #8]
}
 8006aac:	bf00      	nop
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
 8006ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	021a      	lsls	r2, r3, #8
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	431a      	orrs	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	609a      	str	r2, [r3, #8]
}
 8006aec:	bf00      	nop
 8006aee:	371c      	adds	r7, #28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f003 031f 	and.w	r3, r3, #31
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a1a      	ldr	r2, [r3, #32]
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	43db      	mvns	r3, r3
 8006b1a:	401a      	ands	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6a1a      	ldr	r2, [r3, #32]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	f003 031f 	and.w	r3, r3, #31
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b30:	431a      	orrs	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	621a      	str	r2, [r3, #32]
}
 8006b36:	bf00      	nop
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
	...

08006b44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d101      	bne.n	8006b5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	e05a      	b.n	8006c12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a21      	ldr	r2, [pc, #132]	; (8006c20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d022      	beq.n	8006be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba8:	d01d      	beq.n	8006be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d018      	beq.n	8006be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a1b      	ldr	r2, [pc, #108]	; (8006c28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d013      	beq.n	8006be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a1a      	ldr	r2, [pc, #104]	; (8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00e      	beq.n	8006be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a18      	ldr	r2, [pc, #96]	; (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d009      	beq.n	8006be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a17      	ldr	r2, [pc, #92]	; (8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d004      	beq.n	8006be6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a15      	ldr	r2, [pc, #84]	; (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d10c      	bne.n	8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	40010000 	.word	0x40010000
 8006c24:	40000400 	.word	0x40000400
 8006c28:	40000800 	.word	0x40000800
 8006c2c:	40000c00 	.word	0x40000c00
 8006c30:	40010400 	.word	0x40010400
 8006c34:	40014000 	.word	0x40014000
 8006c38:	40001800 	.word	0x40001800

08006c3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	f107 001c 	add.w	r0, r7, #28
 8006c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c4e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d123      	bne.n	8006c9e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006c6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d105      	bne.n	8006c92 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 fae2 	bl	800825c <USB_CoreReset>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	73fb      	strb	r3, [r7, #15]
 8006c9c:	e01b      	b.n	8006cd6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f001 fad6 	bl	800825c <USB_CoreReset>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006cb4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d106      	bne.n	8006cca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	639a      	str	r2, [r3, #56]	; 0x38
 8006cc8:	e005      	b.n	8006cd6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006cd6:	7fbb      	ldrb	r3, [r7, #30]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d10b      	bne.n	8006cf4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f043 0206 	orr.w	r2, r3, #6
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f043 0220 	orr.w	r2, r3, #32
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d00:	b004      	add	sp, #16
 8006d02:	4770      	bx	lr

08006d04 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d165      	bne.n	8006de4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	4a41      	ldr	r2, [pc, #260]	; (8006e20 <USB_SetTurnaroundTime+0x11c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d906      	bls.n	8006d2e <USB_SetTurnaroundTime+0x2a>
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	4a40      	ldr	r2, [pc, #256]	; (8006e24 <USB_SetTurnaroundTime+0x120>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d202      	bcs.n	8006d2e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006d28:	230f      	movs	r3, #15
 8006d2a:	617b      	str	r3, [r7, #20]
 8006d2c:	e062      	b.n	8006df4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	4a3c      	ldr	r2, [pc, #240]	; (8006e24 <USB_SetTurnaroundTime+0x120>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d306      	bcc.n	8006d44 <USB_SetTurnaroundTime+0x40>
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	4a3b      	ldr	r2, [pc, #236]	; (8006e28 <USB_SetTurnaroundTime+0x124>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d202      	bcs.n	8006d44 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006d3e:	230e      	movs	r3, #14
 8006d40:	617b      	str	r3, [r7, #20]
 8006d42:	e057      	b.n	8006df4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4a38      	ldr	r2, [pc, #224]	; (8006e28 <USB_SetTurnaroundTime+0x124>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d306      	bcc.n	8006d5a <USB_SetTurnaroundTime+0x56>
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	4a37      	ldr	r2, [pc, #220]	; (8006e2c <USB_SetTurnaroundTime+0x128>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d202      	bcs.n	8006d5a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006d54:	230d      	movs	r3, #13
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	e04c      	b.n	8006df4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	4a33      	ldr	r2, [pc, #204]	; (8006e2c <USB_SetTurnaroundTime+0x128>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d306      	bcc.n	8006d70 <USB_SetTurnaroundTime+0x6c>
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	4a32      	ldr	r2, [pc, #200]	; (8006e30 <USB_SetTurnaroundTime+0x12c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d802      	bhi.n	8006d70 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d6a:	230c      	movs	r3, #12
 8006d6c:	617b      	str	r3, [r7, #20]
 8006d6e:	e041      	b.n	8006df4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	4a2f      	ldr	r2, [pc, #188]	; (8006e30 <USB_SetTurnaroundTime+0x12c>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d906      	bls.n	8006d86 <USB_SetTurnaroundTime+0x82>
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	4a2e      	ldr	r2, [pc, #184]	; (8006e34 <USB_SetTurnaroundTime+0x130>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d802      	bhi.n	8006d86 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d80:	230b      	movs	r3, #11
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	e036      	b.n	8006df4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	4a2a      	ldr	r2, [pc, #168]	; (8006e34 <USB_SetTurnaroundTime+0x130>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d906      	bls.n	8006d9c <USB_SetTurnaroundTime+0x98>
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	4a29      	ldr	r2, [pc, #164]	; (8006e38 <USB_SetTurnaroundTime+0x134>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d802      	bhi.n	8006d9c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d96:	230a      	movs	r3, #10
 8006d98:	617b      	str	r3, [r7, #20]
 8006d9a:	e02b      	b.n	8006df4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	4a26      	ldr	r2, [pc, #152]	; (8006e38 <USB_SetTurnaroundTime+0x134>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d906      	bls.n	8006db2 <USB_SetTurnaroundTime+0xae>
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	4a25      	ldr	r2, [pc, #148]	; (8006e3c <USB_SetTurnaroundTime+0x138>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d202      	bcs.n	8006db2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006dac:	2309      	movs	r3, #9
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	e020      	b.n	8006df4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	4a21      	ldr	r2, [pc, #132]	; (8006e3c <USB_SetTurnaroundTime+0x138>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d306      	bcc.n	8006dc8 <USB_SetTurnaroundTime+0xc4>
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	4a20      	ldr	r2, [pc, #128]	; (8006e40 <USB_SetTurnaroundTime+0x13c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d802      	bhi.n	8006dc8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	617b      	str	r3, [r7, #20]
 8006dc6:	e015      	b.n	8006df4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4a1d      	ldr	r2, [pc, #116]	; (8006e40 <USB_SetTurnaroundTime+0x13c>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d906      	bls.n	8006dde <USB_SetTurnaroundTime+0xda>
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	4a1c      	ldr	r2, [pc, #112]	; (8006e44 <USB_SetTurnaroundTime+0x140>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d202      	bcs.n	8006dde <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006dd8:	2307      	movs	r3, #7
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	e00a      	b.n	8006df4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006dde:	2306      	movs	r3, #6
 8006de0:	617b      	str	r3, [r7, #20]
 8006de2:	e007      	b.n	8006df4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006de4:	79fb      	ldrb	r3, [r7, #7]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d102      	bne.n	8006df0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006dea:	2309      	movs	r3, #9
 8006dec:	617b      	str	r3, [r7, #20]
 8006dee:	e001      	b.n	8006df4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006df0:	2309      	movs	r3, #9
 8006df2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	029b      	lsls	r3, r3, #10
 8006e08:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	371c      	adds	r7, #28
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	00d8acbf 	.word	0x00d8acbf
 8006e24:	00e4e1c0 	.word	0x00e4e1c0
 8006e28:	00f42400 	.word	0x00f42400
 8006e2c:	01067380 	.word	0x01067380
 8006e30:	011a499f 	.word	0x011a499f
 8006e34:	01312cff 	.word	0x01312cff
 8006e38:	014ca43f 	.word	0x014ca43f
 8006e3c:	016e3600 	.word	0x016e3600
 8006e40:	01a6ab1f 	.word	0x01a6ab1f
 8006e44:	01e84800 	.word	0x01e84800

08006e48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f043 0201 	orr.w	r2, r3, #1
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f023 0201 	bic.w	r2, r3, #1
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ea8:	78fb      	ldrb	r3, [r7, #3]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d115      	bne.n	8006eda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006eba:	200a      	movs	r0, #10
 8006ebc:	f7fa fad4 	bl	8001468 <HAL_Delay>
      ms += 10U;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	330a      	adds	r3, #10
 8006ec4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f001 f939 	bl	800813e <USB_GetMode>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d01e      	beq.n	8006f10 <USB_SetCurrentMode+0x84>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2bc7      	cmp	r3, #199	; 0xc7
 8006ed6:	d9f0      	bls.n	8006eba <USB_SetCurrentMode+0x2e>
 8006ed8:	e01a      	b.n	8006f10 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006eda:	78fb      	ldrb	r3, [r7, #3]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d115      	bne.n	8006f0c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006eec:	200a      	movs	r0, #10
 8006eee:	f7fa fabb 	bl	8001468 <HAL_Delay>
      ms += 10U;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	330a      	adds	r3, #10
 8006ef6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 f920 	bl	800813e <USB_GetMode>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <USB_SetCurrentMode+0x84>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2bc7      	cmp	r3, #199	; 0xc7
 8006f08:	d9f0      	bls.n	8006eec <USB_SetCurrentMode+0x60>
 8006f0a:	e001      	b.n	8006f10 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e005      	b.n	8006f1c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2bc8      	cmp	r3, #200	; 0xc8
 8006f14:	d101      	bne.n	8006f1a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e000      	b.n	8006f1c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f24:	b084      	sub	sp, #16
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b086      	sub	sp, #24
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f36:	2300      	movs	r3, #0
 8006f38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f3e:	2300      	movs	r3, #0
 8006f40:	613b      	str	r3, [r7, #16]
 8006f42:	e009      	b.n	8006f58 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	3340      	adds	r3, #64	; 0x40
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	2200      	movs	r2, #0
 8006f50:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	3301      	adds	r3, #1
 8006f56:	613b      	str	r3, [r7, #16]
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	2b0e      	cmp	r3, #14
 8006f5c:	d9f2      	bls.n	8006f44 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d11c      	bne.n	8006fa0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f74:	f043 0302 	orr.w	r3, r3, #2
 8006f78:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	639a      	str	r2, [r3, #56]	; 0x38
 8006f9e:	e00b      	b.n	8006fb8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fc4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d10d      	bne.n	8006fe8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d104      	bne.n	8006fde <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f968 	bl	80072ac <USB_SetDevSpeed>
 8006fdc:	e008      	b.n	8006ff0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006fde:	2101      	movs	r1, #1
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f963 	bl	80072ac <USB_SetDevSpeed>
 8006fe6:	e003      	b.n	8006ff0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006fe8:	2103      	movs	r1, #3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f95e 	bl	80072ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ff0:	2110      	movs	r1, #16
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f8fa 	bl	80071ec <USB_FlushTxFifo>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f924 	bl	8007250 <USB_FlushRxFifo>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007018:	461a      	mov	r2, r3
 800701a:	2300      	movs	r3, #0
 800701c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007024:	461a      	mov	r2, r3
 8007026:	2300      	movs	r3, #0
 8007028:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007030:	461a      	mov	r2, r3
 8007032:	2300      	movs	r3, #0
 8007034:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007036:	2300      	movs	r3, #0
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	e043      	b.n	80070c4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800704e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007052:	d118      	bne.n	8007086 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10a      	bne.n	8007070 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007066:	461a      	mov	r2, r3
 8007068:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	e013      	b.n	8007098 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707c:	461a      	mov	r2, r3
 800707e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	e008      	b.n	8007098 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007092:	461a      	mov	r2, r3
 8007094:	2300      	movs	r3, #0
 8007096:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a4:	461a      	mov	r2, r3
 80070a6:	2300      	movs	r3, #0
 80070a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b6:	461a      	mov	r2, r3
 80070b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	3301      	adds	r3, #1
 80070c2:	613b      	str	r3, [r7, #16]
 80070c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80070c8:	461a      	mov	r2, r3
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d3b5      	bcc.n	800703c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070d0:	2300      	movs	r3, #0
 80070d2:	613b      	str	r3, [r7, #16]
 80070d4:	e043      	b.n	800715e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070ec:	d118      	bne.n	8007120 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10a      	bne.n	800710a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007100:	461a      	mov	r2, r3
 8007102:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	e013      	b.n	8007132 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007116:	461a      	mov	r2, r3
 8007118:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	e008      	b.n	8007132 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712c:	461a      	mov	r2, r3
 800712e:	2300      	movs	r3, #0
 8007130:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4413      	add	r3, r2
 800713a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713e:	461a      	mov	r2, r3
 8007140:	2300      	movs	r3, #0
 8007142:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007150:	461a      	mov	r2, r3
 8007152:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007156:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	3301      	adds	r3, #1
 800715c:	613b      	str	r3, [r7, #16]
 800715e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007162:	461a      	mov	r2, r3
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	4293      	cmp	r3, r2
 8007168:	d3b5      	bcc.n	80070d6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800717c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800718a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800718c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007190:	2b00      	cmp	r3, #0
 8007192:	d105      	bne.n	80071a0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	f043 0210 	orr.w	r2, r3, #16
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	699a      	ldr	r2, [r3, #24]
 80071a4:	4b10      	ldr	r3, [pc, #64]	; (80071e8 <USB_DevInit+0x2c4>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071ac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d005      	beq.n	80071c0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	f043 0208 	orr.w	r2, r3, #8
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071c0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d107      	bne.n	80071d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071d0:	f043 0304 	orr.w	r3, r3, #4
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3718      	adds	r7, #24
 80071de:	46bd      	mov	sp, r7
 80071e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071e4:	b004      	add	sp, #16
 80071e6:	4770      	bx	lr
 80071e8:	803c3800 	.word	0x803c3800

080071ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3301      	adds	r3, #1
 80071fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007206:	d901      	bls.n	800720c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e01b      	b.n	8007244 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	daf2      	bge.n	80071fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	019b      	lsls	r3, r3, #6
 800721c:	f043 0220 	orr.w	r2, r3, #32
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	3301      	adds	r3, #1
 8007228:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007230:	d901      	bls.n	8007236 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e006      	b.n	8007244 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f003 0320 	and.w	r3, r3, #32
 800723e:	2b20      	cmp	r3, #32
 8007240:	d0f0      	beq.n	8007224 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	3301      	adds	r3, #1
 8007260:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007268:	d901      	bls.n	800726e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e018      	b.n	80072a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	daf2      	bge.n	800725c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2210      	movs	r2, #16
 800727e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3301      	adds	r3, #1
 8007284:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800728c:	d901      	bls.n	8007292 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e006      	b.n	80072a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f003 0310 	and.w	r3, r3, #16
 800729a:	2b10      	cmp	r3, #16
 800729c:	d0f0      	beq.n	8007280 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	68f9      	ldr	r1, [r7, #12]
 80072c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072cc:	4313      	orrs	r3, r2
 80072ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80072de:	b480      	push	{r7}
 80072e0:	b087      	sub	sp, #28
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f003 0306 	and.w	r3, r3, #6
 80072f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d102      	bne.n	8007304 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80072fe:	2300      	movs	r3, #0
 8007300:	75fb      	strb	r3, [r7, #23]
 8007302:	e00a      	b.n	800731a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2b02      	cmp	r3, #2
 8007308:	d002      	beq.n	8007310 <USB_GetDevSpeed+0x32>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2b06      	cmp	r3, #6
 800730e:	d102      	bne.n	8007316 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007310:	2302      	movs	r3, #2
 8007312:	75fb      	strb	r3, [r7, #23]
 8007314:	e001      	b.n	800731a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007316:	230f      	movs	r3, #15
 8007318:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800731a:	7dfb      	ldrb	r3, [r7, #23]
}
 800731c:	4618      	mov	r0, r3
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	785b      	ldrb	r3, [r3, #1]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d13a      	bne.n	80073ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800734a:	69da      	ldr	r2, [r3, #28]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	f003 030f 	and.w	r3, r3, #15
 8007354:	2101      	movs	r1, #1
 8007356:	fa01 f303 	lsl.w	r3, r1, r3
 800735a:	b29b      	uxth	r3, r3
 800735c:	68f9      	ldr	r1, [r7, #12]
 800735e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007362:	4313      	orrs	r3, r2
 8007364:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	4413      	add	r3, r2
 800736e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d155      	bne.n	8007428 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	791b      	ldrb	r3, [r3, #4]
 8007396:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007398:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	059b      	lsls	r3, r3, #22
 800739e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80073a0:	4313      	orrs	r3, r2
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073b6:	6013      	str	r3, [r2, #0]
 80073b8:	e036      	b.n	8007428 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c0:	69da      	ldr	r2, [r3, #28]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	2101      	movs	r1, #1
 80073cc:	fa01 f303 	lsl.w	r3, r1, r3
 80073d0:	041b      	lsls	r3, r3, #16
 80073d2:	68f9      	ldr	r1, [r7, #12]
 80073d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073d8:	4313      	orrs	r3, r2
 80073da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d11a      	bne.n	8007428 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	791b      	ldrb	r3, [r3, #4]
 800740c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800740e:	430b      	orrs	r3, r1
 8007410:	4313      	orrs	r3, r2
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	0151      	lsls	r1, r2, #5
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	440a      	add	r2, r1
 800741a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800741e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007426:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
	...

08007438 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	785b      	ldrb	r3, [r3, #1]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d161      	bne.n	8007518 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4413      	add	r3, r2
 800745c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007466:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800746a:	d11f      	bne.n	80074ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4413      	add	r3, r2
 8007474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	0151      	lsls	r1, r2, #5
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	440a      	add	r2, r1
 8007482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007486:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800748a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	0151      	lsls	r1, r2, #5
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	440a      	add	r2, r1
 80074a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	f003 030f 	and.w	r3, r3, #15
 80074bc:	2101      	movs	r1, #1
 80074be:	fa01 f303 	lsl.w	r3, r1, r3
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	43db      	mvns	r3, r3
 80074c6:	68f9      	ldr	r1, [r7, #12]
 80074c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074cc:	4013      	ands	r3, r2
 80074ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074d6:	69da      	ldr	r2, [r3, #28]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	f003 030f 	and.w	r3, r3, #15
 80074e0:	2101      	movs	r1, #1
 80074e2:	fa01 f303 	lsl.w	r3, r1, r3
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	43db      	mvns	r3, r3
 80074ea:	68f9      	ldr	r1, [r7, #12]
 80074ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074f0:	4013      	ands	r3, r2
 80074f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	0159      	lsls	r1, r3, #5
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	440b      	add	r3, r1
 800750a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800750e:	4619      	mov	r1, r3
 8007510:	4b35      	ldr	r3, [pc, #212]	; (80075e8 <USB_DeactivateEndpoint+0x1b0>)
 8007512:	4013      	ands	r3, r2
 8007514:	600b      	str	r3, [r1, #0]
 8007516:	e060      	b.n	80075da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4413      	add	r3, r2
 8007520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800752a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800752e:	d11f      	bne.n	8007570 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	0151      	lsls	r1, r2, #5
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	440a      	add	r2, r1
 8007546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800754a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800754e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	0151      	lsls	r1, r2, #5
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	440a      	add	r2, r1
 8007566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800756a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800756e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	f003 030f 	and.w	r3, r3, #15
 8007580:	2101      	movs	r1, #1
 8007582:	fa01 f303 	lsl.w	r3, r1, r3
 8007586:	041b      	lsls	r3, r3, #16
 8007588:	43db      	mvns	r3, r3
 800758a:	68f9      	ldr	r1, [r7, #12]
 800758c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007590:	4013      	ands	r3, r2
 8007592:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800759a:	69da      	ldr	r2, [r3, #28]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	f003 030f 	and.w	r3, r3, #15
 80075a4:	2101      	movs	r1, #1
 80075a6:	fa01 f303 	lsl.w	r3, r1, r3
 80075aa:	041b      	lsls	r3, r3, #16
 80075ac:	43db      	mvns	r3, r3
 80075ae:	68f9      	ldr	r1, [r7, #12]
 80075b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075b4:	4013      	ands	r3, r2
 80075b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	0159      	lsls	r1, r3, #5
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	440b      	add	r3, r1
 80075ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d2:	4619      	mov	r1, r3
 80075d4:	4b05      	ldr	r3, [pc, #20]	; (80075ec <USB_DeactivateEndpoint+0x1b4>)
 80075d6:	4013      	ands	r3, r2
 80075d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	ec337800 	.word	0xec337800
 80075ec:	eff37800 	.word	0xeff37800

080075f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08a      	sub	sp, #40	; 0x28
 80075f4:	af02      	add	r7, sp, #8
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	4613      	mov	r3, r2
 80075fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	785b      	ldrb	r3, [r3, #1]
 800760c:	2b01      	cmp	r3, #1
 800760e:	f040 817a 	bne.w	8007906 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d132      	bne.n	8007680 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	0151      	lsls	r1, r2, #5
 800762c:	69fa      	ldr	r2, [r7, #28]
 800762e:	440a      	add	r2, r1
 8007630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007634:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007638:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800763c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	0151      	lsls	r1, r2, #5
 8007650:	69fa      	ldr	r2, [r7, #28]
 8007652:	440a      	add	r2, r1
 8007654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007658:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800765c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	4413      	add	r3, r2
 8007666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	69ba      	ldr	r2, [r7, #24]
 800766e:	0151      	lsls	r1, r2, #5
 8007670:	69fa      	ldr	r2, [r7, #28]
 8007672:	440a      	add	r2, r1
 8007674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007678:	0cdb      	lsrs	r3, r3, #19
 800767a:	04db      	lsls	r3, r3, #19
 800767c:	6113      	str	r3, [r2, #16]
 800767e:	e092      	b.n	80077a6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	0151      	lsls	r1, r2, #5
 8007692:	69fa      	ldr	r2, [r7, #28]
 8007694:	440a      	add	r2, r1
 8007696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800769a:	0cdb      	lsrs	r3, r3, #19
 800769c:	04db      	lsls	r3, r3, #19
 800769e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	0151      	lsls	r1, r2, #5
 80076b2:	69fa      	ldr	r2, [r7, #28]
 80076b4:	440a      	add	r2, r1
 80076b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076c2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d11a      	bne.n	8007700 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	691a      	ldr	r2, [r3, #16]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d903      	bls.n	80076de <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076fc:	6113      	str	r3, [r2, #16]
 80076fe:	e01b      	b.n	8007738 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	6919      	ldr	r1, [r3, #16]
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	440b      	add	r3, r1
 8007718:	1e59      	subs	r1, r3, #1
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007722:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007724:	4ba2      	ldr	r3, [pc, #648]	; (80079b0 <USB_EPStartXfer+0x3c0>)
 8007726:	400b      	ands	r3, r1
 8007728:	69b9      	ldr	r1, [r7, #24]
 800772a:	0148      	lsls	r0, r1, #5
 800772c:	69f9      	ldr	r1, [r7, #28]
 800772e:	4401      	add	r1, r0
 8007730:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007734:	4313      	orrs	r3, r2
 8007736:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	69fb      	ldr	r3, [r7, #28]
 800773e:	4413      	add	r3, r2
 8007740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007744:	691a      	ldr	r2, [r3, #16]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800774e:	69b9      	ldr	r1, [r7, #24]
 8007750:	0148      	lsls	r0, r1, #5
 8007752:	69f9      	ldr	r1, [r7, #28]
 8007754:	4401      	add	r1, r0
 8007756:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800775a:	4313      	orrs	r3, r2
 800775c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	791b      	ldrb	r3, [r3, #4]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d11f      	bne.n	80077a6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	4413      	add	r3, r2
 800776e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	0151      	lsls	r1, r2, #5
 8007778:	69fa      	ldr	r2, [r7, #28]
 800777a:	440a      	add	r2, r1
 800777c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007780:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007784:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	4413      	add	r3, r2
 800778e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	0151      	lsls	r1, r2, #5
 8007798:	69fa      	ldr	r2, [r7, #28]
 800779a:	440a      	add	r2, r1
 800779c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80077a6:	79fb      	ldrb	r3, [r7, #7]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d14b      	bne.n	8007844 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	69db      	ldr	r3, [r3, #28]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d009      	beq.n	80077c8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c0:	461a      	mov	r2, r3
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	791b      	ldrb	r3, [r3, #4]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d128      	bne.n	8007822 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d110      	bne.n	8007802 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69ba      	ldr	r2, [r7, #24]
 80077f0:	0151      	lsls	r1, r2, #5
 80077f2:	69fa      	ldr	r2, [r7, #28]
 80077f4:	440a      	add	r2, r1
 80077f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077fe:	6013      	str	r3, [r2, #0]
 8007800:	e00f      	b.n	8007822 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	4413      	add	r3, r2
 800780a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	0151      	lsls	r1, r2, #5
 8007814:	69fa      	ldr	r2, [r7, #28]
 8007816:	440a      	add	r2, r1
 8007818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800781c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007820:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	4413      	add	r3, r2
 800782a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	0151      	lsls	r1, r2, #5
 8007834:	69fa      	ldr	r2, [r7, #28]
 8007836:	440a      	add	r2, r1
 8007838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800783c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007840:	6013      	str	r3, [r2, #0]
 8007842:	e165      	b.n	8007b10 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	0151      	lsls	r1, r2, #5
 8007856:	69fa      	ldr	r2, [r7, #28]
 8007858:	440a      	add	r2, r1
 800785a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800785e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007862:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	791b      	ldrb	r3, [r3, #4]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d015      	beq.n	8007898 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 814d 	beq.w	8007b10 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800787c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	f003 030f 	and.w	r3, r3, #15
 8007886:	2101      	movs	r1, #1
 8007888:	fa01 f303 	lsl.w	r3, r1, r3
 800788c:	69f9      	ldr	r1, [r7, #28]
 800788e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007892:	4313      	orrs	r3, r2
 8007894:	634b      	str	r3, [r1, #52]	; 0x34
 8007896:	e13b      	b.n	8007b10 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d110      	bne.n	80078ca <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	0151      	lsls	r1, r2, #5
 80078ba:	69fa      	ldr	r2, [r7, #28]
 80078bc:	440a      	add	r2, r1
 80078be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	e00f      	b.n	80078ea <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	69ba      	ldr	r2, [r7, #24]
 80078da:	0151      	lsls	r1, r2, #5
 80078dc:	69fa      	ldr	r2, [r7, #28]
 80078de:	440a      	add	r2, r1
 80078e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	68d9      	ldr	r1, [r3, #12]
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	781a      	ldrb	r2, [r3, #0]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	b298      	uxth	r0, r3
 80078f8:	79fb      	ldrb	r3, [r7, #7]
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	4603      	mov	r3, r0
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 f9b8 	bl	8007c74 <USB_WritePacket>
 8007904:	e104      	b.n	8007b10 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	0151      	lsls	r1, r2, #5
 8007918:	69fa      	ldr	r2, [r7, #28]
 800791a:	440a      	add	r2, r1
 800791c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007920:	0cdb      	lsrs	r3, r3, #19
 8007922:	04db      	lsls	r3, r3, #19
 8007924:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	0151      	lsls	r1, r2, #5
 8007938:	69fa      	ldr	r2, [r7, #28]
 800793a:	440a      	add	r2, r1
 800793c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007940:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007944:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007948:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d131      	bne.n	80079b4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d003      	beq.n	8007960 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	689a      	ldr	r2, [r3, #8]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007974:	691a      	ldr	r2, [r3, #16]
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800797e:	69b9      	ldr	r1, [r7, #24]
 8007980:	0148      	lsls	r0, r1, #5
 8007982:	69f9      	ldr	r1, [r7, #28]
 8007984:	4401      	add	r1, r0
 8007986:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800798a:	4313      	orrs	r3, r2
 800798c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	4413      	add	r3, r2
 8007996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	0151      	lsls	r1, r2, #5
 80079a0:	69fa      	ldr	r2, [r7, #28]
 80079a2:	440a      	add	r2, r1
 80079a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079ac:	6113      	str	r3, [r2, #16]
 80079ae:	e061      	b.n	8007a74 <USB_EPStartXfer+0x484>
 80079b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d123      	bne.n	8007a04 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c8:	691a      	ldr	r2, [r3, #16]
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079d2:	69b9      	ldr	r1, [r7, #24]
 80079d4:	0148      	lsls	r0, r1, #5
 80079d6:	69f9      	ldr	r1, [r7, #28]
 80079d8:	4401      	add	r1, r0
 80079da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079de:	4313      	orrs	r3, r2
 80079e0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	0151      	lsls	r1, r2, #5
 80079f4:	69fa      	ldr	r2, [r7, #28]
 80079f6:	440a      	add	r2, r1
 80079f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a00:	6113      	str	r3, [r2, #16]
 8007a02:	e037      	b.n	8007a74 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	691a      	ldr	r2, [r3, #16]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	1e5a      	subs	r2, r3, #1
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a18:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	8afa      	ldrh	r2, [r7, #22]
 8007a20:	fb03 f202 	mul.w	r2, r3, r2
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a34:	691a      	ldr	r2, [r3, #16]
 8007a36:	8afb      	ldrh	r3, [r7, #22]
 8007a38:	04d9      	lsls	r1, r3, #19
 8007a3a:	4b38      	ldr	r3, [pc, #224]	; (8007b1c <USB_EPStartXfer+0x52c>)
 8007a3c:	400b      	ands	r3, r1
 8007a3e:	69b9      	ldr	r1, [r7, #24]
 8007a40:	0148      	lsls	r0, r1, #5
 8007a42:	69f9      	ldr	r1, [r7, #28]
 8007a44:	4401      	add	r1, r0
 8007a46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5a:	691a      	ldr	r2, [r3, #16]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a64:	69b9      	ldr	r1, [r7, #24]
 8007a66:	0148      	lsls	r0, r1, #5
 8007a68:	69f9      	ldr	r1, [r7, #28]
 8007a6a:	4401      	add	r1, r0
 8007a6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007a70:	4313      	orrs	r3, r2
 8007a72:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007a74:	79fb      	ldrb	r3, [r7, #7]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d10d      	bne.n	8007a96 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d009      	beq.n	8007a96 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	68d9      	ldr	r1, [r3, #12]
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a92:	460a      	mov	r2, r1
 8007a94:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	791b      	ldrb	r3, [r3, #4]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d128      	bne.n	8007af0 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d110      	bne.n	8007ad0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	0151      	lsls	r1, r2, #5
 8007ac0:	69fa      	ldr	r2, [r7, #28]
 8007ac2:	440a      	add	r2, r1
 8007ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ac8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007acc:	6013      	str	r3, [r2, #0]
 8007ace:	e00f      	b.n	8007af0 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	0151      	lsls	r1, r2, #5
 8007ae2:	69fa      	ldr	r2, [r7, #28]
 8007ae4:	440a      	add	r2, r1
 8007ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	69ba      	ldr	r2, [r7, #24]
 8007b00:	0151      	lsls	r1, r2, #5
 8007b02:	69fa      	ldr	r2, [r7, #28]
 8007b04:	440a      	add	r2, r1
 8007b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3720      	adds	r7, #32
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	1ff80000 	.word	0x1ff80000

08007b20 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	785b      	ldrb	r3, [r3, #1]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d14a      	bne.n	8007bd4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b56:	f040 8086 	bne.w	8007c66 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	7812      	ldrb	r2, [r2, #0]
 8007b6e:	0151      	lsls	r1, r2, #5
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	440a      	add	r2, r1
 8007b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b7c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	7812      	ldrb	r2, [r2, #0]
 8007b92:	0151      	lsls	r1, r2, #5
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	440a      	add	r2, r1
 8007b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ba0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f242 7210 	movw	r2, #10000	; 0x2710
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d902      	bls.n	8007bb8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	75fb      	strb	r3, [r7, #23]
          break;
 8007bb6:	e056      	b.n	8007c66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bd0:	d0e7      	beq.n	8007ba2 <USB_EPStopXfer+0x82>
 8007bd2:	e048      	b.n	8007c66 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bec:	d13b      	bne.n	8007c66 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	7812      	ldrb	r2, [r2, #0]
 8007c02:	0151      	lsls	r1, r2, #5
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	440a      	add	r2, r1
 8007c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c10:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	7812      	ldrb	r2, [r2, #0]
 8007c26:	0151      	lsls	r1, r2, #5
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	440a      	add	r2, r1
 8007c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d902      	bls.n	8007c4c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	75fb      	strb	r3, [r7, #23]
          break;
 8007c4a:	e00c      	b.n	8007c66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c64:	d0e7      	beq.n	8007c36 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	371c      	adds	r7, #28
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b089      	sub	sp, #36	; 0x24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	4611      	mov	r1, r2
 8007c80:	461a      	mov	r2, r3
 8007c82:	460b      	mov	r3, r1
 8007c84:	71fb      	strb	r3, [r7, #7]
 8007c86:	4613      	mov	r3, r2
 8007c88:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007c92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d123      	bne.n	8007ce2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c9a:	88bb      	ldrh	r3, [r7, #4]
 8007c9c:	3303      	adds	r3, #3
 8007c9e:	089b      	lsrs	r3, r3, #2
 8007ca0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61bb      	str	r3, [r7, #24]
 8007ca6:	e018      	b.n	8007cda <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ca8:	79fb      	ldrb	r3, [r7, #7]
 8007caa:	031a      	lsls	r2, r3, #12
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	4413      	add	r3, r2
 8007cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	61bb      	str	r3, [r7, #24]
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d3e2      	bcc.n	8007ca8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3724      	adds	r7, #36	; 0x24
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b08b      	sub	sp, #44	; 0x2c
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d06:	88fb      	ldrh	r3, [r7, #6]
 8007d08:	089b      	lsrs	r3, r3, #2
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d0e:	88fb      	ldrh	r3, [r7, #6]
 8007d10:	f003 0303 	and.w	r3, r3, #3
 8007d14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d16:	2300      	movs	r3, #0
 8007d18:	623b      	str	r3, [r7, #32]
 8007d1a:	e014      	b.n	8007d46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d30:	3301      	adds	r3, #1
 8007d32:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	3301      	adds	r3, #1
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007d40:	6a3b      	ldr	r3, [r7, #32]
 8007d42:	3301      	adds	r3, #1
 8007d44:	623b      	str	r3, [r7, #32]
 8007d46:	6a3a      	ldr	r2, [r7, #32]
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d3e6      	bcc.n	8007d1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007d4e:	8bfb      	ldrh	r3, [r7, #30]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d01e      	beq.n	8007d92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007d54:	2300      	movs	r3, #0
 8007d56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d5e:	461a      	mov	r2, r3
 8007d60:	f107 0310 	add.w	r3, r7, #16
 8007d64:	6812      	ldr	r2, [r2, #0]
 8007d66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	fa22 f303 	lsr.w	r3, r2, r3
 8007d74:	b2da      	uxtb	r2, r3
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	701a      	strb	r2, [r3, #0]
      i++;
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	3301      	adds	r3, #1
 8007d84:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007d86:	8bfb      	ldrh	r3, [r7, #30]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007d8c:	8bfb      	ldrh	r3, [r7, #30]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1ea      	bne.n	8007d68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	372c      	adds	r7, #44	; 0x2c
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	785b      	ldrb	r3, [r3, #1]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d12c      	bne.n	8007e16 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	db12      	blt.n	8007df4 <USB_EPSetStall+0x54>
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00f      	beq.n	8007df4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	0151      	lsls	r1, r2, #5
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	440a      	add	r2, r1
 8007dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007df2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	015a      	lsls	r2, r3, #5
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	0151      	lsls	r1, r2, #5
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	440a      	add	r2, r1
 8007e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e12:	6013      	str	r3, [r2, #0]
 8007e14:	e02b      	b.n	8007e6e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	db12      	blt.n	8007e4e <USB_EPSetStall+0xae>
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00f      	beq.n	8007e4e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	0151      	lsls	r1, r2, #5
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	440a      	add	r2, r1
 8007e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e4c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	0151      	lsls	r1, r2, #5
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	440a      	add	r2, r1
 8007e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	785b      	ldrb	r3, [r3, #1]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d128      	bne.n	8007eea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	0151      	lsls	r1, r2, #5
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	440a      	add	r2, r1
 8007eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007eb6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	791b      	ldrb	r3, [r3, #4]
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d003      	beq.n	8007ec8 <USB_EPClearStall+0x4c>
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	791b      	ldrb	r3, [r3, #4]
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d138      	bne.n	8007f3a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	0151      	lsls	r1, r2, #5
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	440a      	add	r2, r1
 8007ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ee6:	6013      	str	r3, [r2, #0]
 8007ee8:	e027      	b.n	8007f3a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	0151      	lsls	r1, r2, #5
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	440a      	add	r2, r1
 8007f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	791b      	ldrb	r3, [r3, #4]
 8007f0e:	2b03      	cmp	r3, #3
 8007f10:	d003      	beq.n	8007f1a <USB_EPClearStall+0x9e>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	791b      	ldrb	r3, [r3, #4]
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d10f      	bne.n	8007f3a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	0151      	lsls	r1, r2, #5
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	440a      	add	r2, r1
 8007f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f38:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007f6a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	78fb      	ldrb	r3, [r7, #3]
 8007f76:	011b      	lsls	r3, r3, #4
 8007f78:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007f7c:	68f9      	ldr	r1, [r7, #12]
 8007f7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f82:	4313      	orrs	r3, r2
 8007f84:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007fae:	f023 0303 	bic.w	r3, r3, #3
 8007fb2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fc2:	f023 0302 	bic.w	r3, r3, #2
 8007fc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b085      	sub	sp, #20
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ff0:	f023 0303 	bic.w	r3, r3, #3
 8007ff4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008004:	f043 0302 	orr.w	r3, r3, #2
 8008008:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	695b      	ldr	r3, [r3, #20]
 8008024:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	4013      	ands	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008030:	68fb      	ldr	r3, [r7, #12]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800803e:	b480      	push	{r7}
 8008040:	b085      	sub	sp, #20
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800805a:	69db      	ldr	r3, [r3, #28]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	4013      	ands	r3, r2
 8008060:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	0c1b      	lsrs	r3, r3, #16
}
 8008066:	4618      	mov	r0, r3
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008072:	b480      	push	{r7}
 8008074:	b085      	sub	sp, #20
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800808e:	69db      	ldr	r3, [r3, #28]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	4013      	ands	r3, r2
 8008094:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	b29b      	uxth	r3, r3
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b085      	sub	sp, #20
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	460b      	mov	r3, r1
 80080b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80080b6:	78fb      	ldrb	r3, [r7, #3]
 80080b8:	015a      	lsls	r2, r3, #5
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080cc:	695b      	ldr	r3, [r3, #20]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	4013      	ands	r3, r2
 80080d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80080d4:	68bb      	ldr	r3, [r7, #8]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b087      	sub	sp, #28
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	460b      	mov	r3, r1
 80080ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008104:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008106:	78fb      	ldrb	r3, [r7, #3]
 8008108:	f003 030f 	and.w	r3, r3, #15
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	fa22 f303 	lsr.w	r3, r2, r3
 8008112:	01db      	lsls	r3, r3, #7
 8008114:	b2db      	uxtb	r3, r3
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	4313      	orrs	r3, r2
 800811a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	4413      	add	r3, r2
 8008124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4013      	ands	r3, r2
 800812e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008130:	68bb      	ldr	r3, [r7, #8]
}
 8008132:	4618      	mov	r0, r3
 8008134:	371c      	adds	r7, #28
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800813e:	b480      	push	{r7}
 8008140:	b083      	sub	sp, #12
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	f003 0301 	and.w	r3, r3, #1
}
 800814e:	4618      	mov	r0, r3
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800815a:	b480      	push	{r7}
 800815c:	b085      	sub	sp, #20
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008174:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008178:	f023 0307 	bic.w	r3, r3, #7
 800817c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800818c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008190:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	460b      	mov	r3, r1
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	333c      	adds	r3, #60	; 0x3c
 80081b6:	3304      	adds	r3, #4
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	4a26      	ldr	r2, [pc, #152]	; (8008258 <USB_EP0_OutStart+0xb8>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d90a      	bls.n	80081da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081d4:	d101      	bne.n	80081da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	e037      	b.n	800824a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081e0:	461a      	mov	r2, r3
 80081e2:	2300      	movs	r3, #0
 80081e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80081f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008208:	f043 0318 	orr.w	r3, r3, #24
 800820c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800821c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008220:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008222:	7afb      	ldrb	r3, [r7, #11]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d10f      	bne.n	8008248 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822e:	461a      	mov	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008242:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008246:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	371c      	adds	r7, #28
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	4f54300a 	.word	0x4f54300a

0800825c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008264:	2300      	movs	r3, #0
 8008266:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	3301      	adds	r3, #1
 800826c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8008274:	d901      	bls.n	800827a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e01b      	b.n	80082b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	2b00      	cmp	r3, #0
 8008280:	daf2      	bge.n	8008268 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	691b      	ldr	r3, [r3, #16]
 800828a:	f043 0201 	orr.w	r2, r3, #1
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3301      	adds	r3, #1
 8008296:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800829e:	d901      	bls.n	80082a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e006      	b.n	80082b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d0f0      	beq.n	8008292 <USB_CoreReset+0x36>

  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3714      	adds	r7, #20
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
	...

080082c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	460b      	mov	r3, r1
 80082ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80082d0:	f002 fc3c 	bl	800ab4c <USBD_static_malloc>
 80082d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d109      	bne.n	80082f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	32b0      	adds	r2, #176	; 0xb0
 80082e6:	2100      	movs	r1, #0
 80082e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80082ec:	2302      	movs	r3, #2
 80082ee:	e0d4      	b.n	800849a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80082f0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80082f4:	2100      	movs	r1, #0
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f002 fc6c 	bl	800abd4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	32b0      	adds	r2, #176	; 0xb0
 8008306:	68f9      	ldr	r1, [r7, #12]
 8008308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	32b0      	adds	r2, #176	; 0xb0
 8008316:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	7c1b      	ldrb	r3, [r3, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d138      	bne.n	800839a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008328:	4b5e      	ldr	r3, [pc, #376]	; (80084a4 <USBD_CDC_Init+0x1e4>)
 800832a:	7819      	ldrb	r1, [r3, #0]
 800832c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008330:	2202      	movs	r2, #2
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f002 fae7 	bl	800a906 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008338:	4b5a      	ldr	r3, [pc, #360]	; (80084a4 <USBD_CDC_Init+0x1e4>)
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	f003 020f 	and.w	r2, r3, #15
 8008340:	6879      	ldr	r1, [r7, #4]
 8008342:	4613      	mov	r3, r2
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	440b      	add	r3, r1
 800834c:	3324      	adds	r3, #36	; 0x24
 800834e:	2201      	movs	r2, #1
 8008350:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008352:	4b55      	ldr	r3, [pc, #340]	; (80084a8 <USBD_CDC_Init+0x1e8>)
 8008354:	7819      	ldrb	r1, [r3, #0]
 8008356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800835a:	2202      	movs	r2, #2
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f002 fad2 	bl	800a906 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008362:	4b51      	ldr	r3, [pc, #324]	; (80084a8 <USBD_CDC_Init+0x1e8>)
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	f003 020f 	and.w	r2, r3, #15
 800836a:	6879      	ldr	r1, [r7, #4]
 800836c:	4613      	mov	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	440b      	add	r3, r1
 8008376:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800837a:	2201      	movs	r2, #1
 800837c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800837e:	4b4b      	ldr	r3, [pc, #300]	; (80084ac <USBD_CDC_Init+0x1ec>)
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	f003 020f 	and.w	r2, r3, #15
 8008386:	6879      	ldr	r1, [r7, #4]
 8008388:	4613      	mov	r3, r2
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	440b      	add	r3, r1
 8008392:	3326      	adds	r3, #38	; 0x26
 8008394:	2210      	movs	r2, #16
 8008396:	801a      	strh	r2, [r3, #0]
 8008398:	e035      	b.n	8008406 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800839a:	4b42      	ldr	r3, [pc, #264]	; (80084a4 <USBD_CDC_Init+0x1e4>)
 800839c:	7819      	ldrb	r1, [r3, #0]
 800839e:	2340      	movs	r3, #64	; 0x40
 80083a0:	2202      	movs	r2, #2
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f002 faaf 	bl	800a906 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80083a8:	4b3e      	ldr	r3, [pc, #248]	; (80084a4 <USBD_CDC_Init+0x1e4>)
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	f003 020f 	and.w	r2, r3, #15
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	4613      	mov	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	440b      	add	r3, r1
 80083bc:	3324      	adds	r3, #36	; 0x24
 80083be:	2201      	movs	r2, #1
 80083c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80083c2:	4b39      	ldr	r3, [pc, #228]	; (80084a8 <USBD_CDC_Init+0x1e8>)
 80083c4:	7819      	ldrb	r1, [r3, #0]
 80083c6:	2340      	movs	r3, #64	; 0x40
 80083c8:	2202      	movs	r2, #2
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f002 fa9b 	bl	800a906 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80083d0:	4b35      	ldr	r3, [pc, #212]	; (80084a8 <USBD_CDC_Init+0x1e8>)
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	f003 020f 	and.w	r2, r3, #15
 80083d8:	6879      	ldr	r1, [r7, #4]
 80083da:	4613      	mov	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	440b      	add	r3, r1
 80083e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083e8:	2201      	movs	r2, #1
 80083ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80083ec:	4b2f      	ldr	r3, [pc, #188]	; (80084ac <USBD_CDC_Init+0x1ec>)
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	f003 020f 	and.w	r2, r3, #15
 80083f4:	6879      	ldr	r1, [r7, #4]
 80083f6:	4613      	mov	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	440b      	add	r3, r1
 8008400:	3326      	adds	r3, #38	; 0x26
 8008402:	2210      	movs	r2, #16
 8008404:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008406:	4b29      	ldr	r3, [pc, #164]	; (80084ac <USBD_CDC_Init+0x1ec>)
 8008408:	7819      	ldrb	r1, [r3, #0]
 800840a:	2308      	movs	r3, #8
 800840c:	2203      	movs	r2, #3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f002 fa79 	bl	800a906 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008414:	4b25      	ldr	r3, [pc, #148]	; (80084ac <USBD_CDC_Init+0x1ec>)
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	f003 020f 	and.w	r2, r3, #15
 800841c:	6879      	ldr	r1, [r7, #4]
 800841e:	4613      	mov	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	440b      	add	r3, r1
 8008428:	3324      	adds	r3, #36	; 0x24
 800842a:	2201      	movs	r2, #1
 800842c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	33b0      	adds	r3, #176	; 0xb0
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008460:	2b00      	cmp	r3, #0
 8008462:	d101      	bne.n	8008468 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008464:	2302      	movs	r3, #2
 8008466:	e018      	b.n	800849a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	7c1b      	ldrb	r3, [r3, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10a      	bne.n	8008486 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008470:	4b0d      	ldr	r3, [pc, #52]	; (80084a8 <USBD_CDC_Init+0x1e8>)
 8008472:	7819      	ldrb	r1, [r3, #0]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800847a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f002 fb30 	bl	800aae4 <USBD_LL_PrepareReceive>
 8008484:	e008      	b.n	8008498 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008486:	4b08      	ldr	r3, [pc, #32]	; (80084a8 <USBD_CDC_Init+0x1e8>)
 8008488:	7819      	ldrb	r1, [r3, #0]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008490:	2340      	movs	r3, #64	; 0x40
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f002 fb26 	bl	800aae4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20000097 	.word	0x20000097
 80084a8:	20000098 	.word	0x20000098
 80084ac:	20000099 	.word	0x20000099

080084b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80084bc:	4b3a      	ldr	r3, [pc, #232]	; (80085a8 <USBD_CDC_DeInit+0xf8>)
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	4619      	mov	r1, r3
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f002 fa45 	bl	800a952 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80084c8:	4b37      	ldr	r3, [pc, #220]	; (80085a8 <USBD_CDC_DeInit+0xf8>)
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	f003 020f 	and.w	r2, r3, #15
 80084d0:	6879      	ldr	r1, [r7, #4]
 80084d2:	4613      	mov	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	440b      	add	r3, r1
 80084dc:	3324      	adds	r3, #36	; 0x24
 80084de:	2200      	movs	r2, #0
 80084e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80084e2:	4b32      	ldr	r3, [pc, #200]	; (80085ac <USBD_CDC_DeInit+0xfc>)
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	4619      	mov	r1, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f002 fa32 	bl	800a952 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80084ee:	4b2f      	ldr	r3, [pc, #188]	; (80085ac <USBD_CDC_DeInit+0xfc>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	f003 020f 	and.w	r2, r3, #15
 80084f6:	6879      	ldr	r1, [r7, #4]
 80084f8:	4613      	mov	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	440b      	add	r3, r1
 8008502:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008506:	2200      	movs	r2, #0
 8008508:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800850a:	4b29      	ldr	r3, [pc, #164]	; (80085b0 <USBD_CDC_DeInit+0x100>)
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f002 fa1e 	bl	800a952 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008516:	4b26      	ldr	r3, [pc, #152]	; (80085b0 <USBD_CDC_DeInit+0x100>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	f003 020f 	and.w	r2, r3, #15
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	4613      	mov	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	440b      	add	r3, r1
 800852a:	3324      	adds	r3, #36	; 0x24
 800852c:	2200      	movs	r2, #0
 800852e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008530:	4b1f      	ldr	r3, [pc, #124]	; (80085b0 <USBD_CDC_DeInit+0x100>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	f003 020f 	and.w	r2, r3, #15
 8008538:	6879      	ldr	r1, [r7, #4]
 800853a:	4613      	mov	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	4413      	add	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	440b      	add	r3, r1
 8008544:	3326      	adds	r3, #38	; 0x26
 8008546:	2200      	movs	r2, #0
 8008548:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	32b0      	adds	r2, #176	; 0xb0
 8008554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01f      	beq.n	800859c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	33b0      	adds	r3, #176	; 0xb0
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	32b0      	adds	r2, #176	; 0xb0
 800857a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857e:	4618      	mov	r0, r3
 8008580:	f002 faf2 	bl	800ab68 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	32b0      	adds	r2, #176	; 0xb0
 800858e:	2100      	movs	r1, #0
 8008590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20000097 	.word	0x20000097
 80085ac:	20000098 	.word	0x20000098
 80085b0:	20000099 	.word	0x20000099

080085b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	32b0      	adds	r2, #176	; 0xb0
 80085c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e0bf      	b.n	8008764 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d050      	beq.n	8008692 <USBD_CDC_Setup+0xde>
 80085f0:	2b20      	cmp	r3, #32
 80085f2:	f040 80af 	bne.w	8008754 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	88db      	ldrh	r3, [r3, #6]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d03a      	beq.n	8008674 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	b25b      	sxtb	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	da1b      	bge.n	8008640 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	33b0      	adds	r3, #176	; 0xb0
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	683a      	ldr	r2, [r7, #0]
 800861c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800861e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	88d2      	ldrh	r2, [r2, #6]
 8008624:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	88db      	ldrh	r3, [r3, #6]
 800862a:	2b07      	cmp	r3, #7
 800862c:	bf28      	it	cs
 800862e:	2307      	movcs	r3, #7
 8008630:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	89fa      	ldrh	r2, [r7, #14]
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 fd49 	bl	800a0d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800863e:	e090      	b.n	8008762 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	785a      	ldrb	r2, [r3, #1]
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	88db      	ldrh	r3, [r3, #6]
 800864e:	2b3f      	cmp	r3, #63	; 0x3f
 8008650:	d803      	bhi.n	800865a <USBD_CDC_Setup+0xa6>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	88db      	ldrh	r3, [r3, #6]
 8008656:	b2da      	uxtb	r2, r3
 8008658:	e000      	b.n	800865c <USBD_CDC_Setup+0xa8>
 800865a:	2240      	movs	r2, #64	; 0x40
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008662:	6939      	ldr	r1, [r7, #16]
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800866a:	461a      	mov	r2, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 fd5b 	bl	800a128 <USBD_CtlPrepareRx>
      break;
 8008672:	e076      	b.n	8008762 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	33b0      	adds	r3, #176	; 0xb0
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4413      	add	r3, r2
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	7850      	ldrb	r0, [r2, #1]
 800868a:	2200      	movs	r2, #0
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	4798      	blx	r3
      break;
 8008690:	e067      	b.n	8008762 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	785b      	ldrb	r3, [r3, #1]
 8008696:	2b0b      	cmp	r3, #11
 8008698:	d851      	bhi.n	800873e <USBD_CDC_Setup+0x18a>
 800869a:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <USBD_CDC_Setup+0xec>)
 800869c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a0:	080086d1 	.word	0x080086d1
 80086a4:	0800874d 	.word	0x0800874d
 80086a8:	0800873f 	.word	0x0800873f
 80086ac:	0800873f 	.word	0x0800873f
 80086b0:	0800873f 	.word	0x0800873f
 80086b4:	0800873f 	.word	0x0800873f
 80086b8:	0800873f 	.word	0x0800873f
 80086bc:	0800873f 	.word	0x0800873f
 80086c0:	0800873f 	.word	0x0800873f
 80086c4:	0800873f 	.word	0x0800873f
 80086c8:	080086fb 	.word	0x080086fb
 80086cc:	08008725 	.word	0x08008725
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d107      	bne.n	80086ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80086dc:	f107 030a 	add.w	r3, r7, #10
 80086e0:	2202      	movs	r2, #2
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f001 fcf3 	bl	800a0d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086ea:	e032      	b.n	8008752 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f001 fc7d 	bl	8009fee <USBD_CtlError>
            ret = USBD_FAIL;
 80086f4:	2303      	movs	r3, #3
 80086f6:	75fb      	strb	r3, [r7, #23]
          break;
 80086f8:	e02b      	b.n	8008752 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b03      	cmp	r3, #3
 8008704:	d107      	bne.n	8008716 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008706:	f107 030d 	add.w	r3, r7, #13
 800870a:	2201      	movs	r2, #1
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 fcde 	bl	800a0d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008714:	e01d      	b.n	8008752 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f001 fc68 	bl	8009fee <USBD_CtlError>
            ret = USBD_FAIL;
 800871e:	2303      	movs	r3, #3
 8008720:	75fb      	strb	r3, [r7, #23]
          break;
 8008722:	e016      	b.n	8008752 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b03      	cmp	r3, #3
 800872e:	d00f      	beq.n	8008750 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008730:	6839      	ldr	r1, [r7, #0]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f001 fc5b 	bl	8009fee <USBD_CtlError>
            ret = USBD_FAIL;
 8008738:	2303      	movs	r3, #3
 800873a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800873c:	e008      	b.n	8008750 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800873e:	6839      	ldr	r1, [r7, #0]
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f001 fc54 	bl	8009fee <USBD_CtlError>
          ret = USBD_FAIL;
 8008746:	2303      	movs	r3, #3
 8008748:	75fb      	strb	r3, [r7, #23]
          break;
 800874a:	e002      	b.n	8008752 <USBD_CDC_Setup+0x19e>
          break;
 800874c:	bf00      	nop
 800874e:	e008      	b.n	8008762 <USBD_CDC_Setup+0x1ae>
          break;
 8008750:	bf00      	nop
      }
      break;
 8008752:	e006      	b.n	8008762 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f001 fc49 	bl	8009fee <USBD_CtlError>
      ret = USBD_FAIL;
 800875c:	2303      	movs	r3, #3
 800875e:	75fb      	strb	r3, [r7, #23]
      break;
 8008760:	bf00      	nop
  }

  return (uint8_t)ret;
 8008762:	7dfb      	ldrb	r3, [r7, #23]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3718      	adds	r7, #24
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800877e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	32b0      	adds	r2, #176	; 0xb0
 800878a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008792:	2303      	movs	r3, #3
 8008794:	e065      	b.n	8008862 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	32b0      	adds	r2, #176	; 0xb0
 80087a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80087a6:	78fb      	ldrb	r3, [r7, #3]
 80087a8:	f003 020f 	and.w	r2, r3, #15
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	4613      	mov	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	4413      	add	r3, r2
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	440b      	add	r3, r1
 80087b8:	3318      	adds	r3, #24
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d02f      	beq.n	8008820 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	f003 020f 	and.w	r2, r3, #15
 80087c6:	6879      	ldr	r1, [r7, #4]
 80087c8:	4613      	mov	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	440b      	add	r3, r1
 80087d2:	3318      	adds	r3, #24
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	78fb      	ldrb	r3, [r7, #3]
 80087d8:	f003 010f 	and.w	r1, r3, #15
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	460b      	mov	r3, r1
 80087e0:	00db      	lsls	r3, r3, #3
 80087e2:	440b      	add	r3, r1
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4403      	add	r3, r0
 80087e8:	331c      	adds	r3, #28
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80087f0:	fb01 f303 	mul.w	r3, r1, r3
 80087f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d112      	bne.n	8008820 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80087fa:	78fb      	ldrb	r3, [r7, #3]
 80087fc:	f003 020f 	and.w	r2, r3, #15
 8008800:	6879      	ldr	r1, [r7, #4]
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	440b      	add	r3, r1
 800880c:	3318      	adds	r3, #24
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008812:	78f9      	ldrb	r1, [r7, #3]
 8008814:	2300      	movs	r3, #0
 8008816:	2200      	movs	r2, #0
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f002 f942 	bl	800aaa2 <USBD_LL_Transmit>
 800881e:	e01f      	b.n	8008860 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2200      	movs	r2, #0
 8008824:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	33b0      	adds	r3, #176	; 0xb0
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d010      	beq.n	8008860 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	33b0      	adds	r3, #176	; 0xb0
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800885c:	78fa      	ldrb	r2, [r7, #3]
 800885e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	460b      	mov	r3, r1
 8008874:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	32b0      	adds	r2, #176	; 0xb0
 8008880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008884:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	32b0      	adds	r2, #176	; 0xb0
 8008890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008898:	2303      	movs	r3, #3
 800889a:	e01a      	b.n	80088d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800889c:	78fb      	ldrb	r3, [r7, #3]
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f002 f940 	bl	800ab26 <USBD_LL_GetRxDataSize>
 80088a6:	4602      	mov	r2, r0
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	33b0      	adds	r3, #176	; 0xb0
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80088cc:	4611      	mov	r1, r2
 80088ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	32b0      	adds	r2, #176	; 0xb0
 80088ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d101      	bne.n	80088fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e025      	b.n	8008948 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	33b0      	adds	r3, #176	; 0xb0
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d01a      	beq.n	8008946 <USBD_CDC_EP0_RxReady+0x6c>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008916:	2bff      	cmp	r3, #255	; 0xff
 8008918:	d015      	beq.n	8008946 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	33b0      	adds	r3, #176	; 0xb0
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4413      	add	r3, r2
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008932:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800893a:	b292      	uxth	r2, r2
 800893c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	22ff      	movs	r2, #255	; 0xff
 8008942:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008958:	2182      	movs	r1, #130	; 0x82
 800895a:	4818      	ldr	r0, [pc, #96]	; (80089bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800895c:	f000 fd0f 	bl	800937e <USBD_GetEpDesc>
 8008960:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008962:	2101      	movs	r1, #1
 8008964:	4815      	ldr	r0, [pc, #84]	; (80089bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008966:	f000 fd0a 	bl	800937e <USBD_GetEpDesc>
 800896a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800896c:	2181      	movs	r1, #129	; 0x81
 800896e:	4813      	ldr	r0, [pc, #76]	; (80089bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008970:	f000 fd05 	bl	800937e <USBD_GetEpDesc>
 8008974:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d002      	beq.n	8008982 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	2210      	movs	r2, #16
 8008980:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d006      	beq.n	8008996 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	2200      	movs	r2, #0
 800898c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008990:	711a      	strb	r2, [r3, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d006      	beq.n	80089aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089a4:	711a      	strb	r2, [r3, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2243      	movs	r2, #67	; 0x43
 80089ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089b0:	4b02      	ldr	r3, [pc, #8]	; (80089bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3718      	adds	r7, #24
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	20000054 	.word	0x20000054

080089c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089c8:	2182      	movs	r1, #130	; 0x82
 80089ca:	4818      	ldr	r0, [pc, #96]	; (8008a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089cc:	f000 fcd7 	bl	800937e <USBD_GetEpDesc>
 80089d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089d2:	2101      	movs	r1, #1
 80089d4:	4815      	ldr	r0, [pc, #84]	; (8008a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089d6:	f000 fcd2 	bl	800937e <USBD_GetEpDesc>
 80089da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80089dc:	2181      	movs	r1, #129	; 0x81
 80089de:	4813      	ldr	r0, [pc, #76]	; (8008a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089e0:	f000 fccd 	bl	800937e <USBD_GetEpDesc>
 80089e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d002      	beq.n	80089f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	2210      	movs	r2, #16
 80089f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d006      	beq.n	8008a06 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	2200      	movs	r2, #0
 80089fc:	711a      	strb	r2, [r3, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f042 0202 	orr.w	r2, r2, #2
 8008a04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d006      	beq.n	8008a1a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	711a      	strb	r2, [r3, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f042 0202 	orr.w	r2, r2, #2
 8008a18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2243      	movs	r2, #67	; 0x43
 8008a1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a20:	4b02      	ldr	r3, [pc, #8]	; (8008a2c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3718      	adds	r7, #24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20000054 	.word	0x20000054

08008a30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a38:	2182      	movs	r1, #130	; 0x82
 8008a3a:	4818      	ldr	r0, [pc, #96]	; (8008a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a3c:	f000 fc9f 	bl	800937e <USBD_GetEpDesc>
 8008a40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a42:	2101      	movs	r1, #1
 8008a44:	4815      	ldr	r0, [pc, #84]	; (8008a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a46:	f000 fc9a 	bl	800937e <USBD_GetEpDesc>
 8008a4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a4c:	2181      	movs	r1, #129	; 0x81
 8008a4e:	4813      	ldr	r0, [pc, #76]	; (8008a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a50:	f000 fc95 	bl	800937e <USBD_GetEpDesc>
 8008a54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	2210      	movs	r2, #16
 8008a60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d006      	beq.n	8008a76 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a70:	711a      	strb	r2, [r3, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d006      	beq.n	8008a8a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a84:	711a      	strb	r2, [r3, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2243      	movs	r2, #67	; 0x43
 8008a8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a90:	4b02      	ldr	r3, [pc, #8]	; (8008a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3718      	adds	r7, #24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000054 	.word	0x20000054

08008aa0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	220a      	movs	r2, #10
 8008aac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008aae:	4b03      	ldr	r3, [pc, #12]	; (8008abc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	20000010 	.word	0x20000010

08008ac0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e009      	b.n	8008ae8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	33b0      	adds	r3, #176	; 0xb0
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b087      	sub	sp, #28
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	32b0      	adds	r2, #176	; 0xb0
 8008b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e008      	b.n	8008b2c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	371c      	adds	r7, #28
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	32b0      	adds	r2, #176	; 0xb0
 8008b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e004      	b.n	8008b66 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
	...

08008b74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	32b0      	adds	r2, #176	; 0xb0
 8008b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	32b0      	adds	r2, #176	; 0xb0
 8008b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e018      	b.n	8008bd4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	7c1b      	ldrb	r3, [r3, #16]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10a      	bne.n	8008bc0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008baa:	4b0c      	ldr	r3, [pc, #48]	; (8008bdc <USBD_CDC_ReceivePacket+0x68>)
 8008bac:	7819      	ldrb	r1, [r3, #0]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f001 ff93 	bl	800aae4 <USBD_LL_PrepareReceive>
 8008bbe:	e008      	b.n	8008bd2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008bc0:	4b06      	ldr	r3, [pc, #24]	; (8008bdc <USBD_CDC_ReceivePacket+0x68>)
 8008bc2:	7819      	ldrb	r1, [r3, #0]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bca:	2340      	movs	r3, #64	; 0x40
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f001 ff89 	bl	800aae4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	20000098 	.word	0x20000098

08008be0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	4613      	mov	r3, r2
 8008bec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e01f      	b.n	8008c38 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d003      	beq.n	8008c1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	79fa      	ldrb	r2, [r7, #7]
 8008c2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f001 fe03 	bl	800a838 <USBD_LL_Init>
 8008c32:	4603      	mov	r3, r0
 8008c34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3718      	adds	r7, #24
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e025      	b.n	8008ca4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	32ae      	adds	r2, #174	; 0xae
 8008c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00f      	beq.n	8008c94 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	32ae      	adds	r2, #174	; 0xae
 8008c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c84:	f107 020e 	add.w	r2, r7, #14
 8008c88:	4610      	mov	r0, r2
 8008c8a:	4798      	blx	r3
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f001 fe0b 	bl	800a8d0 <USBD_LL_Start>
 8008cba:	4603      	mov	r3, r0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ccc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d009      	beq.n	8008d08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	78fa      	ldrb	r2, [r7, #3]
 8008cfe:	4611      	mov	r1, r2
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	4798      	blx	r3
 8008d04:	4603      	mov	r3, r0
 8008d06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	78fa      	ldrb	r2, [r7, #3]
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	4798      	blx	r3
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008d38:	2303      	movs	r3, #3
 8008d3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d56:	6839      	ldr	r1, [r7, #0]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f001 f90e 	bl	8009f7a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2201      	movs	r2, #1
 8008d62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d7a:	f003 031f 	and.w	r3, r3, #31
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d01a      	beq.n	8008db8 <USBD_LL_SetupStage+0x72>
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d822      	bhi.n	8008dcc <USBD_LL_SetupStage+0x86>
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d002      	beq.n	8008d90 <USBD_LL_SetupStage+0x4a>
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d00a      	beq.n	8008da4 <USBD_LL_SetupStage+0x5e>
 8008d8e:	e01d      	b.n	8008dcc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fb65 	bl	8009468 <USBD_StdDevReq>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	73fb      	strb	r3, [r7, #15]
      break;
 8008da2:	e020      	b.n	8008de6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fbcd 	bl	800954c <USBD_StdItfReq>
 8008db2:	4603      	mov	r3, r0
 8008db4:	73fb      	strb	r3, [r7, #15]
      break;
 8008db6:	e016      	b.n	8008de6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fc2f 	bl	8009624 <USBD_StdEPReq>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8008dca:	e00c      	b.n	8008de6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008dd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f001 fdd8 	bl	800a990 <USBD_LL_StallEP>
 8008de0:	4603      	mov	r3, r0
 8008de2:	73fb      	strb	r3, [r7, #15]
      break;
 8008de4:	bf00      	nop
  }

  return ret;
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b086      	sub	sp, #24
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008e02:	7afb      	ldrb	r3, [r7, #11]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d16e      	bne.n	8008ee6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008e0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	f040 8098 	bne.w	8008f4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	689a      	ldr	r2, [r3, #8]
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d913      	bls.n	8008e50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	1ad2      	subs	r2, r2, r3
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	68da      	ldr	r2, [r3, #12]
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	bf28      	it	cs
 8008e42:	4613      	movcs	r3, r2
 8008e44:	461a      	mov	r2, r3
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f001 f98a 	bl	800a162 <USBD_CtlContinueRx>
 8008e4e:	e07d      	b.n	8008f4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e56:	f003 031f 	and.w	r3, r3, #31
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d014      	beq.n	8008e88 <USBD_LL_DataOutStage+0x98>
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d81d      	bhi.n	8008e9e <USBD_LL_DataOutStage+0xae>
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d002      	beq.n	8008e6c <USBD_LL_DataOutStage+0x7c>
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d003      	beq.n	8008e72 <USBD_LL_DataOutStage+0x82>
 8008e6a:	e018      	b.n	8008e9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	75bb      	strb	r3, [r7, #22]
            break;
 8008e70:	e018      	b.n	8008ea4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f000 fa64 	bl	800934a <USBD_CoreFindIF>
 8008e82:	4603      	mov	r3, r0
 8008e84:	75bb      	strb	r3, [r7, #22]
            break;
 8008e86:	e00d      	b.n	8008ea4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	4619      	mov	r1, r3
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f000 fa66 	bl	8009364 <USBD_CoreFindEP>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	75bb      	strb	r3, [r7, #22]
            break;
 8008e9c:	e002      	b.n	8008ea4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	75bb      	strb	r3, [r7, #22]
            break;
 8008ea2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008ea4:	7dbb      	ldrb	r3, [r7, #22]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d119      	bne.n	8008ede <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b03      	cmp	r3, #3
 8008eb4:	d113      	bne.n	8008ede <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008eb6:	7dba      	ldrb	r2, [r7, #22]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	32ae      	adds	r2, #174	; 0xae
 8008ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00b      	beq.n	8008ede <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008ec6:	7dba      	ldrb	r2, [r7, #22]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008ece:	7dba      	ldrb	r2, [r7, #22]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	32ae      	adds	r2, #174	; 0xae
 8008ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f001 f950 	bl	800a184 <USBD_CtlSendStatus>
 8008ee4:	e032      	b.n	8008f4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008ee6:	7afb      	ldrb	r3, [r7, #11]
 8008ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	4619      	mov	r1, r3
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f000 fa37 	bl	8009364 <USBD_CoreFindEP>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008efa:	7dbb      	ldrb	r3, [r7, #22]
 8008efc:	2bff      	cmp	r3, #255	; 0xff
 8008efe:	d025      	beq.n	8008f4c <USBD_LL_DataOutStage+0x15c>
 8008f00:	7dbb      	ldrb	r3, [r7, #22]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d122      	bne.n	8008f4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	d117      	bne.n	8008f42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f12:	7dba      	ldrb	r2, [r7, #22]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	32ae      	adds	r2, #174	; 0xae
 8008f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00f      	beq.n	8008f42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008f22:	7dba      	ldrb	r2, [r7, #22]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f2a:	7dba      	ldrb	r2, [r7, #22]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	32ae      	adds	r2, #174	; 0xae
 8008f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	7afa      	ldrb	r2, [r7, #11]
 8008f38:	4611      	mov	r1, r2
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	4798      	blx	r3
 8008f3e:	4603      	mov	r3, r0
 8008f40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f42:	7dfb      	ldrb	r3, [r7, #23]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	e000      	b.n	8008f4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b086      	sub	sp, #24
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	60f8      	str	r0, [r7, #12]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	607a      	str	r2, [r7, #4]
 8008f62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f64:	7afb      	ldrb	r3, [r7, #11]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d16f      	bne.n	800904a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3314      	adds	r3, #20
 8008f6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d15a      	bne.n	8009030 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	689a      	ldr	r2, [r3, #8]
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d914      	bls.n	8008fb0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	689a      	ldr	r2, [r3, #8]
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	1ad2      	subs	r2, r2, r3
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	461a      	mov	r2, r3
 8008f9a:	6879      	ldr	r1, [r7, #4]
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f001 f8b2 	bl	800a106 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f001 fd9b 	bl	800aae4 <USBD_LL_PrepareReceive>
 8008fae:	e03f      	b.n	8009030 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	68da      	ldr	r2, [r3, #12]
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d11c      	bne.n	8008ff6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d316      	bcc.n	8008ff6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d20f      	bcs.n	8008ff6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2100      	movs	r1, #0
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f001 f893 	bl	800a106 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fe8:	2300      	movs	r3, #0
 8008fea:	2200      	movs	r2, #0
 8008fec:	2100      	movs	r1, #0
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f001 fd78 	bl	800aae4 <USBD_LL_PrepareReceive>
 8008ff4:	e01c      	b.n	8009030 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	d10f      	bne.n	8009022 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d009      	beq.n	8009022 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009022:	2180      	movs	r1, #128	; 0x80
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f001 fcb3 	bl	800a990 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f001 f8bd 	bl	800a1aa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d03a      	beq.n	80090b0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f7ff fe42 	bl	8008cc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009048:	e032      	b.n	80090b0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800904a:	7afb      	ldrb	r3, [r7, #11]
 800904c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009050:	b2db      	uxtb	r3, r3
 8009052:	4619      	mov	r1, r3
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f000 f985 	bl	8009364 <USBD_CoreFindEP>
 800905a:	4603      	mov	r3, r0
 800905c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800905e:	7dfb      	ldrb	r3, [r7, #23]
 8009060:	2bff      	cmp	r3, #255	; 0xff
 8009062:	d025      	beq.n	80090b0 <USBD_LL_DataInStage+0x15a>
 8009064:	7dfb      	ldrb	r3, [r7, #23]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d122      	bne.n	80090b0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b03      	cmp	r3, #3
 8009074:	d11c      	bne.n	80090b0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009076:	7dfa      	ldrb	r2, [r7, #23]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	32ae      	adds	r2, #174	; 0xae
 800907c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009080:	695b      	ldr	r3, [r3, #20]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d014      	beq.n	80090b0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009086:	7dfa      	ldrb	r2, [r7, #23]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800908e:	7dfa      	ldrb	r2, [r7, #23]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	32ae      	adds	r2, #174	; 0xae
 8009094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	7afa      	ldrb	r2, [r7, #11]
 800909c:	4611      	mov	r1, r2
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	4798      	blx	r3
 80090a2:	4603      	mov	r3, r0
 80090a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80090a6:	7dbb      	ldrb	r3, [r7, #22]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80090ac:	7dbb      	ldrb	r3, [r7, #22]
 80090ae:	e000      	b.n	80090b2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3718      	adds	r7, #24
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b084      	sub	sp, #16
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d014      	beq.n	8009120 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00e      	beq.n	8009120 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	6852      	ldr	r2, [r2, #4]
 800910e:	b2d2      	uxtb	r2, r2
 8009110:	4611      	mov	r1, r2
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	4798      	blx	r3
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d001      	beq.n	8009120 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800911c:	2303      	movs	r3, #3
 800911e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009120:	2340      	movs	r3, #64	; 0x40
 8009122:	2200      	movs	r2, #0
 8009124:	2100      	movs	r1, #0
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f001 fbed 	bl	800a906 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2240      	movs	r2, #64	; 0x40
 8009138:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800913c:	2340      	movs	r3, #64	; 0x40
 800913e:	2200      	movs	r2, #0
 8009140:	2180      	movs	r1, #128	; 0x80
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f001 fbdf 	bl	800a906 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2240      	movs	r2, #64	; 0x40
 8009152:	621a      	str	r2, [r3, #32]

  return ret;
 8009154:	7bfb      	ldrb	r3, [r7, #15]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800915e:	b480      	push	{r7}
 8009160:	b083      	sub	sp, #12
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	460b      	mov	r3, r1
 8009168:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	78fa      	ldrb	r2, [r7, #3]
 800916e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	370c      	adds	r7, #12
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800917e:	b480      	push	{r7}
 8009180:	b083      	sub	sp, #12
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b04      	cmp	r3, #4
 8009190:	d006      	beq.n	80091a0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009198:	b2da      	uxtb	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2204      	movs	r2, #4
 80091a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b083      	sub	sp, #12
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	d106      	bne.n	80091d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80091d0:	b2da      	uxtb	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	370c      	adds	r7, #12
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b082      	sub	sp, #8
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	d110      	bne.n	800921c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00b      	beq.n	800921c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800920a:	69db      	ldr	r3, [r3, #28]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d005      	beq.n	800921c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009216:	69db      	ldr	r3, [r3, #28]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b082      	sub	sp, #8
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	460b      	mov	r3, r1
 8009230:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	32ae      	adds	r2, #174	; 0xae
 800923c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d101      	bne.n	8009248 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009244:	2303      	movs	r3, #3
 8009246:	e01c      	b.n	8009282 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800924e:	b2db      	uxtb	r3, r3
 8009250:	2b03      	cmp	r3, #3
 8009252:	d115      	bne.n	8009280 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	32ae      	adds	r2, #174	; 0xae
 800925e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009262:	6a1b      	ldr	r3, [r3, #32]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00b      	beq.n	8009280 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	32ae      	adds	r2, #174	; 0xae
 8009272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009276:	6a1b      	ldr	r3, [r3, #32]
 8009278:	78fa      	ldrb	r2, [r7, #3]
 800927a:	4611      	mov	r1, r2
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b082      	sub	sp, #8
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	460b      	mov	r3, r1
 8009294:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	32ae      	adds	r2, #174	; 0xae
 80092a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d101      	bne.n	80092ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80092a8:	2303      	movs	r3, #3
 80092aa:	e01c      	b.n	80092e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b03      	cmp	r3, #3
 80092b6:	d115      	bne.n	80092e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	32ae      	adds	r2, #174	; 0xae
 80092c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00b      	beq.n	80092e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	32ae      	adds	r2, #174	; 0xae
 80092d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092dc:	78fa      	ldrb	r2, [r7, #3]
 80092de:	4611      	mov	r1, r2
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3708      	adds	r7, #8
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b083      	sub	sp, #12
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00e      	beq.n	8009340 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	6852      	ldr	r2, [r2, #4]
 800932e:	b2d2      	uxtb	r2, r2
 8009330:	4611      	mov	r1, r2
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	4798      	blx	r3
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800933c:	2303      	movs	r3, #3
 800933e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009340:	7bfb      	ldrb	r3, [r7, #15]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800934a:	b480      	push	{r7}
 800934c:	b083      	sub	sp, #12
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	460b      	mov	r3, r1
 8009354:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009356:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009358:	4618      	mov	r0, r3
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	460b      	mov	r3, r1
 800936e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009370:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009372:	4618      	mov	r0, r3
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b086      	sub	sp, #24
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	460b      	mov	r3, r1
 8009388:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009392:	2300      	movs	r3, #0
 8009394:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	885b      	ldrh	r3, [r3, #2]
 800939a:	b29a      	uxth	r2, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d920      	bls.n	80093e8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80093ae:	e013      	b.n	80093d8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80093b0:	f107 030a 	add.w	r3, r7, #10
 80093b4:	4619      	mov	r1, r3
 80093b6:	6978      	ldr	r0, [r7, #20]
 80093b8:	f000 f81b 	bl	80093f2 <USBD_GetNextDesc>
 80093bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	785b      	ldrb	r3, [r3, #1]
 80093c2:	2b05      	cmp	r3, #5
 80093c4:	d108      	bne.n	80093d8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	789b      	ldrb	r3, [r3, #2]
 80093ce:	78fa      	ldrb	r2, [r7, #3]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d008      	beq.n	80093e6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80093d4:	2300      	movs	r3, #0
 80093d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	885b      	ldrh	r3, [r3, #2]
 80093dc:	b29a      	uxth	r2, r3
 80093de:	897b      	ldrh	r3, [r7, #10]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d8e5      	bhi.n	80093b0 <USBD_GetEpDesc+0x32>
 80093e4:	e000      	b.n	80093e8 <USBD_GetEpDesc+0x6a>
          break;
 80093e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80093e8:	693b      	ldr	r3, [r7, #16]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3718      	adds	r7, #24
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b085      	sub	sp, #20
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	881a      	ldrh	r2, [r3, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	b29b      	uxth	r3, r3
 800940a:	4413      	add	r3, r2
 800940c:	b29a      	uxth	r2, r3
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4413      	add	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800941e:	68fb      	ldr	r3, [r7, #12]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3714      	adds	r7, #20
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800942c:	b480      	push	{r7}
 800942e:	b087      	sub	sp, #28
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	3301      	adds	r3, #1
 8009442:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800944a:	8a3b      	ldrh	r3, [r7, #16]
 800944c:	021b      	lsls	r3, r3, #8
 800944e:	b21a      	sxth	r2, r3
 8009450:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009454:	4313      	orrs	r3, r2
 8009456:	b21b      	sxth	r3, r3
 8009458:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800945a:	89fb      	ldrh	r3, [r7, #14]
}
 800945c:	4618      	mov	r0, r3
 800945e:	371c      	adds	r7, #28
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800947e:	2b40      	cmp	r3, #64	; 0x40
 8009480:	d005      	beq.n	800948e <USBD_StdDevReq+0x26>
 8009482:	2b40      	cmp	r3, #64	; 0x40
 8009484:	d857      	bhi.n	8009536 <USBD_StdDevReq+0xce>
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00f      	beq.n	80094aa <USBD_StdDevReq+0x42>
 800948a:	2b20      	cmp	r3, #32
 800948c:	d153      	bne.n	8009536 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	32ae      	adds	r2, #174	; 0xae
 8009498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	4798      	blx	r3
 80094a4:	4603      	mov	r3, r0
 80094a6:	73fb      	strb	r3, [r7, #15]
      break;
 80094a8:	e04a      	b.n	8009540 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	785b      	ldrb	r3, [r3, #1]
 80094ae:	2b09      	cmp	r3, #9
 80094b0:	d83b      	bhi.n	800952a <USBD_StdDevReq+0xc2>
 80094b2:	a201      	add	r2, pc, #4	; (adr r2, 80094b8 <USBD_StdDevReq+0x50>)
 80094b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b8:	0800950d 	.word	0x0800950d
 80094bc:	08009521 	.word	0x08009521
 80094c0:	0800952b 	.word	0x0800952b
 80094c4:	08009517 	.word	0x08009517
 80094c8:	0800952b 	.word	0x0800952b
 80094cc:	080094eb 	.word	0x080094eb
 80094d0:	080094e1 	.word	0x080094e1
 80094d4:	0800952b 	.word	0x0800952b
 80094d8:	08009503 	.word	0x08009503
 80094dc:	080094f5 	.word	0x080094f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fa3c 	bl	8009960 <USBD_GetDescriptor>
          break;
 80094e8:	e024      	b.n	8009534 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80094ea:	6839      	ldr	r1, [r7, #0]
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fba1 	bl	8009c34 <USBD_SetAddress>
          break;
 80094f2:	e01f      	b.n	8009534 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80094f4:	6839      	ldr	r1, [r7, #0]
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fbe0 	bl	8009cbc <USBD_SetConfig>
 80094fc:	4603      	mov	r3, r0
 80094fe:	73fb      	strb	r3, [r7, #15]
          break;
 8009500:	e018      	b.n	8009534 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fc83 	bl	8009e10 <USBD_GetConfig>
          break;
 800950a:	e013      	b.n	8009534 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fcb4 	bl	8009e7c <USBD_GetStatus>
          break;
 8009514:	e00e      	b.n	8009534 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009516:	6839      	ldr	r1, [r7, #0]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fce3 	bl	8009ee4 <USBD_SetFeature>
          break;
 800951e:	e009      	b.n	8009534 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fd07 	bl	8009f36 <USBD_ClrFeature>
          break;
 8009528:	e004      	b.n	8009534 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800952a:	6839      	ldr	r1, [r7, #0]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 fd5e 	bl	8009fee <USBD_CtlError>
          break;
 8009532:	bf00      	nop
      }
      break;
 8009534:	e004      	b.n	8009540 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fd58 	bl	8009fee <USBD_CtlError>
      break;
 800953e:	bf00      	nop
  }

  return ret;
 8009540:	7bfb      	ldrb	r3, [r7, #15]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop

0800954c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009562:	2b40      	cmp	r3, #64	; 0x40
 8009564:	d005      	beq.n	8009572 <USBD_StdItfReq+0x26>
 8009566:	2b40      	cmp	r3, #64	; 0x40
 8009568:	d852      	bhi.n	8009610 <USBD_StdItfReq+0xc4>
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <USBD_StdItfReq+0x26>
 800956e:	2b20      	cmp	r3, #32
 8009570:	d14e      	bne.n	8009610 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009578:	b2db      	uxtb	r3, r3
 800957a:	3b01      	subs	r3, #1
 800957c:	2b02      	cmp	r3, #2
 800957e:	d840      	bhi.n	8009602 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	889b      	ldrh	r3, [r3, #4]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b01      	cmp	r3, #1
 8009588:	d836      	bhi.n	80095f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	889b      	ldrh	r3, [r3, #4]
 800958e:	b2db      	uxtb	r3, r3
 8009590:	4619      	mov	r1, r3
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7ff fed9 	bl	800934a <USBD_CoreFindIF>
 8009598:	4603      	mov	r3, r0
 800959a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800959c:	7bbb      	ldrb	r3, [r7, #14]
 800959e:	2bff      	cmp	r3, #255	; 0xff
 80095a0:	d01d      	beq.n	80095de <USBD_StdItfReq+0x92>
 80095a2:	7bbb      	ldrb	r3, [r7, #14]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d11a      	bne.n	80095de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80095a8:	7bba      	ldrb	r2, [r7, #14]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	32ae      	adds	r2, #174	; 0xae
 80095ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00f      	beq.n	80095d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80095b8:	7bba      	ldrb	r2, [r7, #14]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095c0:	7bba      	ldrb	r2, [r7, #14]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	32ae      	adds	r2, #174	; 0xae
 80095c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	4798      	blx	r3
 80095d2:	4603      	mov	r3, r0
 80095d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095d6:	e004      	b.n	80095e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80095d8:	2303      	movs	r3, #3
 80095da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095dc:	e001      	b.n	80095e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80095de:	2303      	movs	r3, #3
 80095e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	88db      	ldrh	r3, [r3, #6]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d110      	bne.n	800960c <USBD_StdItfReq+0xc0>
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d10d      	bne.n	800960c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fdc7 	bl	800a184 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80095f6:	e009      	b.n	800960c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fcf7 	bl	8009fee <USBD_CtlError>
          break;
 8009600:	e004      	b.n	800960c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009602:	6839      	ldr	r1, [r7, #0]
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 fcf2 	bl	8009fee <USBD_CtlError>
          break;
 800960a:	e000      	b.n	800960e <USBD_StdItfReq+0xc2>
          break;
 800960c:	bf00      	nop
      }
      break;
 800960e:	e004      	b.n	800961a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009610:	6839      	ldr	r1, [r7, #0]
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fceb 	bl	8009fee <USBD_CtlError>
      break;
 8009618:	bf00      	nop
  }

  return ret;
 800961a:	7bfb      	ldrb	r3, [r7, #15]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	889b      	ldrh	r3, [r3, #4]
 8009636:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009640:	2b40      	cmp	r3, #64	; 0x40
 8009642:	d007      	beq.n	8009654 <USBD_StdEPReq+0x30>
 8009644:	2b40      	cmp	r3, #64	; 0x40
 8009646:	f200 817f 	bhi.w	8009948 <USBD_StdEPReq+0x324>
 800964a:	2b00      	cmp	r3, #0
 800964c:	d02a      	beq.n	80096a4 <USBD_StdEPReq+0x80>
 800964e:	2b20      	cmp	r3, #32
 8009650:	f040 817a 	bne.w	8009948 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009654:	7bbb      	ldrb	r3, [r7, #14]
 8009656:	4619      	mov	r1, r3
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7ff fe83 	bl	8009364 <USBD_CoreFindEP>
 800965e:	4603      	mov	r3, r0
 8009660:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009662:	7b7b      	ldrb	r3, [r7, #13]
 8009664:	2bff      	cmp	r3, #255	; 0xff
 8009666:	f000 8174 	beq.w	8009952 <USBD_StdEPReq+0x32e>
 800966a:	7b7b      	ldrb	r3, [r7, #13]
 800966c:	2b00      	cmp	r3, #0
 800966e:	f040 8170 	bne.w	8009952 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009672:	7b7a      	ldrb	r2, [r7, #13]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800967a:	7b7a      	ldrb	r2, [r7, #13]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	32ae      	adds	r2, #174	; 0xae
 8009680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	2b00      	cmp	r3, #0
 8009688:	f000 8163 	beq.w	8009952 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800968c:	7b7a      	ldrb	r2, [r7, #13]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	32ae      	adds	r2, #174	; 0xae
 8009692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	4798      	blx	r3
 800969e:	4603      	mov	r3, r0
 80096a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80096a2:	e156      	b.n	8009952 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	785b      	ldrb	r3, [r3, #1]
 80096a8:	2b03      	cmp	r3, #3
 80096aa:	d008      	beq.n	80096be <USBD_StdEPReq+0x9a>
 80096ac:	2b03      	cmp	r3, #3
 80096ae:	f300 8145 	bgt.w	800993c <USBD_StdEPReq+0x318>
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f000 809b 	beq.w	80097ee <USBD_StdEPReq+0x1ca>
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d03c      	beq.n	8009736 <USBD_StdEPReq+0x112>
 80096bc:	e13e      	b.n	800993c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d002      	beq.n	80096d0 <USBD_StdEPReq+0xac>
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d016      	beq.n	80096fc <USBD_StdEPReq+0xd8>
 80096ce:	e02c      	b.n	800972a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096d0:	7bbb      	ldrb	r3, [r7, #14]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00d      	beq.n	80096f2 <USBD_StdEPReq+0xce>
 80096d6:	7bbb      	ldrb	r3, [r7, #14]
 80096d8:	2b80      	cmp	r3, #128	; 0x80
 80096da:	d00a      	beq.n	80096f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
 80096de:	4619      	mov	r1, r3
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f001 f955 	bl	800a990 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096e6:	2180      	movs	r1, #128	; 0x80
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f001 f951 	bl	800a990 <USBD_LL_StallEP>
 80096ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096f0:	e020      	b.n	8009734 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80096f2:	6839      	ldr	r1, [r7, #0]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fc7a 	bl	8009fee <USBD_CtlError>
              break;
 80096fa:	e01b      	b.n	8009734 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	885b      	ldrh	r3, [r3, #2]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10e      	bne.n	8009722 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009704:	7bbb      	ldrb	r3, [r7, #14]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00b      	beq.n	8009722 <USBD_StdEPReq+0xfe>
 800970a:	7bbb      	ldrb	r3, [r7, #14]
 800970c:	2b80      	cmp	r3, #128	; 0x80
 800970e:	d008      	beq.n	8009722 <USBD_StdEPReq+0xfe>
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	88db      	ldrh	r3, [r3, #6]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d104      	bne.n	8009722 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009718:	7bbb      	ldrb	r3, [r7, #14]
 800971a:	4619      	mov	r1, r3
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f001 f937 	bl	800a990 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fd2e 	bl	800a184 <USBD_CtlSendStatus>

              break;
 8009728:	e004      	b.n	8009734 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800972a:	6839      	ldr	r1, [r7, #0]
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fc5e 	bl	8009fee <USBD_CtlError>
              break;
 8009732:	bf00      	nop
          }
          break;
 8009734:	e107      	b.n	8009946 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b02      	cmp	r3, #2
 8009740:	d002      	beq.n	8009748 <USBD_StdEPReq+0x124>
 8009742:	2b03      	cmp	r3, #3
 8009744:	d016      	beq.n	8009774 <USBD_StdEPReq+0x150>
 8009746:	e04b      	b.n	80097e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009748:	7bbb      	ldrb	r3, [r7, #14]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00d      	beq.n	800976a <USBD_StdEPReq+0x146>
 800974e:	7bbb      	ldrb	r3, [r7, #14]
 8009750:	2b80      	cmp	r3, #128	; 0x80
 8009752:	d00a      	beq.n	800976a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009754:	7bbb      	ldrb	r3, [r7, #14]
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f001 f919 	bl	800a990 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800975e:	2180      	movs	r1, #128	; 0x80
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f001 f915 	bl	800a990 <USBD_LL_StallEP>
 8009766:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009768:	e040      	b.n	80097ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800976a:	6839      	ldr	r1, [r7, #0]
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 fc3e 	bl	8009fee <USBD_CtlError>
              break;
 8009772:	e03b      	b.n	80097ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	885b      	ldrh	r3, [r3, #2]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d136      	bne.n	80097ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800977c:	7bbb      	ldrb	r3, [r7, #14]
 800977e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009782:	2b00      	cmp	r3, #0
 8009784:	d004      	beq.n	8009790 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009786:	7bbb      	ldrb	r3, [r7, #14]
 8009788:	4619      	mov	r1, r3
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f001 f91f 	bl	800a9ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fcf7 	bl	800a184 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009796:	7bbb      	ldrb	r3, [r7, #14]
 8009798:	4619      	mov	r1, r3
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f7ff fde2 	bl	8009364 <USBD_CoreFindEP>
 80097a0:	4603      	mov	r3, r0
 80097a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097a4:	7b7b      	ldrb	r3, [r7, #13]
 80097a6:	2bff      	cmp	r3, #255	; 0xff
 80097a8:	d01f      	beq.n	80097ea <USBD_StdEPReq+0x1c6>
 80097aa:	7b7b      	ldrb	r3, [r7, #13]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d11c      	bne.n	80097ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80097b0:	7b7a      	ldrb	r2, [r7, #13]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80097b8:	7b7a      	ldrb	r2, [r7, #13]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	32ae      	adds	r2, #174	; 0xae
 80097be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d010      	beq.n	80097ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097c8:	7b7a      	ldrb	r2, [r7, #13]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	32ae      	adds	r2, #174	; 0xae
 80097ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	4798      	blx	r3
 80097da:	4603      	mov	r3, r0
 80097dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80097de:	e004      	b.n	80097ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fc03 	bl	8009fee <USBD_CtlError>
              break;
 80097e8:	e000      	b.n	80097ec <USBD_StdEPReq+0x1c8>
              break;
 80097ea:	bf00      	nop
          }
          break;
 80097ec:	e0ab      	b.n	8009946 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097f4:	b2db      	uxtb	r3, r3
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d002      	beq.n	8009800 <USBD_StdEPReq+0x1dc>
 80097fa:	2b03      	cmp	r3, #3
 80097fc:	d032      	beq.n	8009864 <USBD_StdEPReq+0x240>
 80097fe:	e097      	b.n	8009930 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009800:	7bbb      	ldrb	r3, [r7, #14]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d007      	beq.n	8009816 <USBD_StdEPReq+0x1f2>
 8009806:	7bbb      	ldrb	r3, [r7, #14]
 8009808:	2b80      	cmp	r3, #128	; 0x80
 800980a:	d004      	beq.n	8009816 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fbed 	bl	8009fee <USBD_CtlError>
                break;
 8009814:	e091      	b.n	800993a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009816:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800981a:	2b00      	cmp	r3, #0
 800981c:	da0b      	bge.n	8009836 <USBD_StdEPReq+0x212>
 800981e:	7bbb      	ldrb	r3, [r7, #14]
 8009820:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009824:	4613      	mov	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4413      	add	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	3310      	adds	r3, #16
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	4413      	add	r3, r2
 8009832:	3304      	adds	r3, #4
 8009834:	e00b      	b.n	800984e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009836:	7bbb      	ldrb	r3, [r7, #14]
 8009838:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800983c:	4613      	mov	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	4413      	add	r3, r2
 800984c:	3304      	adds	r3, #4
 800984e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	2200      	movs	r2, #0
 8009854:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2202      	movs	r2, #2
 800985a:	4619      	mov	r1, r3
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 fc37 	bl	800a0d0 <USBD_CtlSendData>
              break;
 8009862:	e06a      	b.n	800993a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009864:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009868:	2b00      	cmp	r3, #0
 800986a:	da11      	bge.n	8009890 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800986c:	7bbb      	ldrb	r3, [r7, #14]
 800986e:	f003 020f 	and.w	r2, r3, #15
 8009872:	6879      	ldr	r1, [r7, #4]
 8009874:	4613      	mov	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	009b      	lsls	r3, r3, #2
 800987c:	440b      	add	r3, r1
 800987e:	3324      	adds	r3, #36	; 0x24
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d117      	bne.n	80098b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009886:	6839      	ldr	r1, [r7, #0]
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fbb0 	bl	8009fee <USBD_CtlError>
                  break;
 800988e:	e054      	b.n	800993a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009890:	7bbb      	ldrb	r3, [r7, #14]
 8009892:	f003 020f 	and.w	r2, r3, #15
 8009896:	6879      	ldr	r1, [r7, #4]
 8009898:	4613      	mov	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4413      	add	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	440b      	add	r3, r1
 80098a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80098a6:	881b      	ldrh	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d104      	bne.n	80098b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80098ac:	6839      	ldr	r1, [r7, #0]
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 fb9d 	bl	8009fee <USBD_CtlError>
                  break;
 80098b4:	e041      	b.n	800993a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	da0b      	bge.n	80098d6 <USBD_StdEPReq+0x2b2>
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098c4:	4613      	mov	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	3310      	adds	r3, #16
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	4413      	add	r3, r2
 80098d2:	3304      	adds	r3, #4
 80098d4:	e00b      	b.n	80098ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098d6:	7bbb      	ldrb	r3, [r7, #14]
 80098d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098dc:	4613      	mov	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4413      	add	r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	4413      	add	r3, r2
 80098ec:	3304      	adds	r3, #4
 80098ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80098f0:	7bbb      	ldrb	r3, [r7, #14]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d002      	beq.n	80098fc <USBD_StdEPReq+0x2d8>
 80098f6:	7bbb      	ldrb	r3, [r7, #14]
 80098f8:	2b80      	cmp	r3, #128	; 0x80
 80098fa:	d103      	bne.n	8009904 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	2200      	movs	r2, #0
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	e00e      	b.n	8009922 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009904:	7bbb      	ldrb	r3, [r7, #14]
 8009906:	4619      	mov	r1, r3
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f001 f87f 	bl	800aa0c <USBD_LL_IsStallEP>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d003      	beq.n	800991c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	2201      	movs	r2, #1
 8009918:	601a      	str	r2, [r3, #0]
 800991a:	e002      	b.n	8009922 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	2200      	movs	r2, #0
 8009920:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	2202      	movs	r2, #2
 8009926:	4619      	mov	r1, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fbd1 	bl	800a0d0 <USBD_CtlSendData>
              break;
 800992e:	e004      	b.n	800993a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fb5b 	bl	8009fee <USBD_CtlError>
              break;
 8009938:	bf00      	nop
          }
          break;
 800993a:	e004      	b.n	8009946 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800993c:	6839      	ldr	r1, [r7, #0]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fb55 	bl	8009fee <USBD_CtlError>
          break;
 8009944:	bf00      	nop
      }
      break;
 8009946:	e005      	b.n	8009954 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fb4f 	bl	8009fee <USBD_CtlError>
      break;
 8009950:	e000      	b.n	8009954 <USBD_StdEPReq+0x330>
      break;
 8009952:	bf00      	nop
  }

  return ret;
 8009954:	7bfb      	ldrb	r3, [r7, #15]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
	...

08009960 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800996a:	2300      	movs	r3, #0
 800996c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800996e:	2300      	movs	r3, #0
 8009970:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009972:	2300      	movs	r3, #0
 8009974:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	885b      	ldrh	r3, [r3, #2]
 800997a:	0a1b      	lsrs	r3, r3, #8
 800997c:	b29b      	uxth	r3, r3
 800997e:	3b01      	subs	r3, #1
 8009980:	2b06      	cmp	r3, #6
 8009982:	f200 8128 	bhi.w	8009bd6 <USBD_GetDescriptor+0x276>
 8009986:	a201      	add	r2, pc, #4	; (adr r2, 800998c <USBD_GetDescriptor+0x2c>)
 8009988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998c:	080099a9 	.word	0x080099a9
 8009990:	080099c1 	.word	0x080099c1
 8009994:	08009a01 	.word	0x08009a01
 8009998:	08009bd7 	.word	0x08009bd7
 800999c:	08009bd7 	.word	0x08009bd7
 80099a0:	08009b77 	.word	0x08009b77
 80099a4:	08009ba3 	.word	0x08009ba3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	7c12      	ldrb	r2, [r2, #16]
 80099b4:	f107 0108 	add.w	r1, r7, #8
 80099b8:	4610      	mov	r0, r2
 80099ba:	4798      	blx	r3
 80099bc:	60f8      	str	r0, [r7, #12]
      break;
 80099be:	e112      	b.n	8009be6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	7c1b      	ldrb	r3, [r3, #16]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10d      	bne.n	80099e4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d0:	f107 0208 	add.w	r2, r7, #8
 80099d4:	4610      	mov	r0, r2
 80099d6:	4798      	blx	r3
 80099d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	3301      	adds	r3, #1
 80099de:	2202      	movs	r2, #2
 80099e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80099e2:	e100      	b.n	8009be6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ec:	f107 0208 	add.w	r2, r7, #8
 80099f0:	4610      	mov	r0, r2
 80099f2:	4798      	blx	r3
 80099f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	3301      	adds	r3, #1
 80099fa:	2202      	movs	r2, #2
 80099fc:	701a      	strb	r2, [r3, #0]
      break;
 80099fe:	e0f2      	b.n	8009be6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	885b      	ldrh	r3, [r3, #2]
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	2b05      	cmp	r3, #5
 8009a08:	f200 80ac 	bhi.w	8009b64 <USBD_GetDescriptor+0x204>
 8009a0c:	a201      	add	r2, pc, #4	; (adr r2, 8009a14 <USBD_GetDescriptor+0xb4>)
 8009a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a12:	bf00      	nop
 8009a14:	08009a2d 	.word	0x08009a2d
 8009a18:	08009a61 	.word	0x08009a61
 8009a1c:	08009a95 	.word	0x08009a95
 8009a20:	08009ac9 	.word	0x08009ac9
 8009a24:	08009afd 	.word	0x08009afd
 8009a28:	08009b31 	.word	0x08009b31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d00b      	beq.n	8009a50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	7c12      	ldrb	r2, [r2, #16]
 8009a44:	f107 0108 	add.w	r1, r7, #8
 8009a48:	4610      	mov	r0, r2
 8009a4a:	4798      	blx	r3
 8009a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a4e:	e091      	b.n	8009b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a50:	6839      	ldr	r1, [r7, #0]
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 facb 	bl	8009fee <USBD_CtlError>
            err++;
 8009a58:	7afb      	ldrb	r3, [r7, #11]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a5e:	e089      	b.n	8009b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00b      	beq.n	8009a84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	7c12      	ldrb	r2, [r2, #16]
 8009a78:	f107 0108 	add.w	r1, r7, #8
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	4798      	blx	r3
 8009a80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a82:	e077      	b.n	8009b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a84:	6839      	ldr	r1, [r7, #0]
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fab1 	bl	8009fee <USBD_CtlError>
            err++;
 8009a8c:	7afb      	ldrb	r3, [r7, #11]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	72fb      	strb	r3, [r7, #11]
          break;
 8009a92:	e06f      	b.n	8009b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d00b      	beq.n	8009ab8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	7c12      	ldrb	r2, [r2, #16]
 8009aac:	f107 0108 	add.w	r1, r7, #8
 8009ab0:	4610      	mov	r0, r2
 8009ab2:	4798      	blx	r3
 8009ab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ab6:	e05d      	b.n	8009b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ab8:	6839      	ldr	r1, [r7, #0]
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fa97 	bl	8009fee <USBD_CtlError>
            err++;
 8009ac0:	7afb      	ldrb	r3, [r7, #11]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ac6:	e055      	b.n	8009b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d00b      	beq.n	8009aec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	7c12      	ldrb	r2, [r2, #16]
 8009ae0:	f107 0108 	add.w	r1, r7, #8
 8009ae4:	4610      	mov	r0, r2
 8009ae6:	4798      	blx	r3
 8009ae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aea:	e043      	b.n	8009b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fa7d 	bl	8009fee <USBD_CtlError>
            err++;
 8009af4:	7afb      	ldrb	r3, [r7, #11]
 8009af6:	3301      	adds	r3, #1
 8009af8:	72fb      	strb	r3, [r7, #11]
          break;
 8009afa:	e03b      	b.n	8009b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b02:	695b      	ldr	r3, [r3, #20]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00b      	beq.n	8009b20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b0e:	695b      	ldr	r3, [r3, #20]
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	7c12      	ldrb	r2, [r2, #16]
 8009b14:	f107 0108 	add.w	r1, r7, #8
 8009b18:	4610      	mov	r0, r2
 8009b1a:	4798      	blx	r3
 8009b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b1e:	e029      	b.n	8009b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fa63 	bl	8009fee <USBD_CtlError>
            err++;
 8009b28:	7afb      	ldrb	r3, [r7, #11]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b2e:	e021      	b.n	8009b74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00b      	beq.n	8009b54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b42:	699b      	ldr	r3, [r3, #24]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	7c12      	ldrb	r2, [r2, #16]
 8009b48:	f107 0108 	add.w	r1, r7, #8
 8009b4c:	4610      	mov	r0, r2
 8009b4e:	4798      	blx	r3
 8009b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b52:	e00f      	b.n	8009b74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b54:	6839      	ldr	r1, [r7, #0]
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fa49 	bl	8009fee <USBD_CtlError>
            err++;
 8009b5c:	7afb      	ldrb	r3, [r7, #11]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	72fb      	strb	r3, [r7, #11]
          break;
 8009b62:	e007      	b.n	8009b74 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fa41 	bl	8009fee <USBD_CtlError>
          err++;
 8009b6c:	7afb      	ldrb	r3, [r7, #11]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009b72:	bf00      	nop
      }
      break;
 8009b74:	e037      	b.n	8009be6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	7c1b      	ldrb	r3, [r3, #16]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d109      	bne.n	8009b92 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b86:	f107 0208 	add.w	r2, r7, #8
 8009b8a:	4610      	mov	r0, r2
 8009b8c:	4798      	blx	r3
 8009b8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b90:	e029      	b.n	8009be6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b92:	6839      	ldr	r1, [r7, #0]
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fa2a 	bl	8009fee <USBD_CtlError>
        err++;
 8009b9a:	7afb      	ldrb	r3, [r7, #11]
 8009b9c:	3301      	adds	r3, #1
 8009b9e:	72fb      	strb	r3, [r7, #11]
      break;
 8009ba0:	e021      	b.n	8009be6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	7c1b      	ldrb	r3, [r3, #16]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10d      	bne.n	8009bc6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb2:	f107 0208 	add.w	r2, r7, #8
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	4798      	blx	r3
 8009bba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	2207      	movs	r2, #7
 8009bc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bc4:	e00f      	b.n	8009be6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009bc6:	6839      	ldr	r1, [r7, #0]
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fa10 	bl	8009fee <USBD_CtlError>
        err++;
 8009bce:	7afb      	ldrb	r3, [r7, #11]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	72fb      	strb	r3, [r7, #11]
      break;
 8009bd4:	e007      	b.n	8009be6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fa08 	bl	8009fee <USBD_CtlError>
      err++;
 8009bde:	7afb      	ldrb	r3, [r7, #11]
 8009be0:	3301      	adds	r3, #1
 8009be2:	72fb      	strb	r3, [r7, #11]
      break;
 8009be4:	bf00      	nop
  }

  if (err != 0U)
 8009be6:	7afb      	ldrb	r3, [r7, #11]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d11e      	bne.n	8009c2a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	88db      	ldrh	r3, [r3, #6]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d016      	beq.n	8009c22 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009bf4:	893b      	ldrh	r3, [r7, #8]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00e      	beq.n	8009c18 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	88da      	ldrh	r2, [r3, #6]
 8009bfe:	893b      	ldrh	r3, [r7, #8]
 8009c00:	4293      	cmp	r3, r2
 8009c02:	bf28      	it	cs
 8009c04:	4613      	movcs	r3, r2
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c0a:	893b      	ldrh	r3, [r7, #8]
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	68f9      	ldr	r1, [r7, #12]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fa5d 	bl	800a0d0 <USBD_CtlSendData>
 8009c16:	e009      	b.n	8009c2c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009c18:	6839      	ldr	r1, [r7, #0]
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 f9e7 	bl	8009fee <USBD_CtlError>
 8009c20:	e004      	b.n	8009c2c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 faae 	bl	800a184 <USBD_CtlSendStatus>
 8009c28:	e000      	b.n	8009c2c <USBD_GetDescriptor+0x2cc>
    return;
 8009c2a:	bf00      	nop
  }
}
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop

08009c34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	889b      	ldrh	r3, [r3, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d131      	bne.n	8009caa <USBD_SetAddress+0x76>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	88db      	ldrh	r3, [r3, #6]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d12d      	bne.n	8009caa <USBD_SetAddress+0x76>
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	885b      	ldrh	r3, [r3, #2]
 8009c52:	2b7f      	cmp	r3, #127	; 0x7f
 8009c54:	d829      	bhi.n	8009caa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	885b      	ldrh	r3, [r3, #2]
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b03      	cmp	r3, #3
 8009c6c:	d104      	bne.n	8009c78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 f9bc 	bl	8009fee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c76:	e01d      	b.n	8009cb4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	7bfa      	ldrb	r2, [r7, #15]
 8009c7c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
 8009c82:	4619      	mov	r1, r3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 feed 	bl	800aa64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fa7a 	bl	800a184 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d004      	beq.n	8009ca0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2202      	movs	r2, #2
 8009c9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c9e:	e009      	b.n	8009cb4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ca8:	e004      	b.n	8009cb4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f99e 	bl	8009fee <USBD_CtlError>
  }
}
 8009cb2:	bf00      	nop
 8009cb4:	bf00      	nop
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	885b      	ldrh	r3, [r3, #2]
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	4b4e      	ldr	r3, [pc, #312]	; (8009e0c <USBD_SetConfig+0x150>)
 8009cd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009cd4:	4b4d      	ldr	r3, [pc, #308]	; (8009e0c <USBD_SetConfig+0x150>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d905      	bls.n	8009ce8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f985 	bl	8009fee <USBD_CtlError>
    return USBD_FAIL;
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	e08c      	b.n	8009e02 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d002      	beq.n	8009cfa <USBD_SetConfig+0x3e>
 8009cf4:	2b03      	cmp	r3, #3
 8009cf6:	d029      	beq.n	8009d4c <USBD_SetConfig+0x90>
 8009cf8:	e075      	b.n	8009de6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009cfa:	4b44      	ldr	r3, [pc, #272]	; (8009e0c <USBD_SetConfig+0x150>)
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d020      	beq.n	8009d44 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009d02:	4b42      	ldr	r3, [pc, #264]	; (8009e0c <USBD_SetConfig+0x150>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	461a      	mov	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d0c:	4b3f      	ldr	r3, [pc, #252]	; (8009e0c <USBD_SetConfig+0x150>)
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7fe ffe1 	bl	8008cda <USBD_SetClassConfig>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d008      	beq.n	8009d34 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 f962 	bl	8009fee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2202      	movs	r2, #2
 8009d2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d32:	e065      	b.n	8009e00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fa25 	bl	800a184 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2203      	movs	r2, #3
 8009d3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d42:	e05d      	b.n	8009e00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fa1d 	bl	800a184 <USBD_CtlSendStatus>
      break;
 8009d4a:	e059      	b.n	8009e00 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009d4c:	4b2f      	ldr	r3, [pc, #188]	; (8009e0c <USBD_SetConfig+0x150>)
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d112      	bne.n	8009d7a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2202      	movs	r2, #2
 8009d58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009d5c:	4b2b      	ldr	r3, [pc, #172]	; (8009e0c <USBD_SetConfig+0x150>)
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	461a      	mov	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d66:	4b29      	ldr	r3, [pc, #164]	; (8009e0c <USBD_SetConfig+0x150>)
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f7fe ffd0 	bl	8008d12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fa06 	bl	800a184 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d78:	e042      	b.n	8009e00 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009d7a:	4b24      	ldr	r3, [pc, #144]	; (8009e0c <USBD_SetConfig+0x150>)
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d02a      	beq.n	8009dde <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f7fe ffbe 	bl	8008d12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d96:	4b1d      	ldr	r3, [pc, #116]	; (8009e0c <USBD_SetConfig+0x150>)
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009da0:	4b1a      	ldr	r3, [pc, #104]	; (8009e0c <USBD_SetConfig+0x150>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	4619      	mov	r1, r3
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f7fe ff97 	bl	8008cda <USBD_SetClassConfig>
 8009dac:	4603      	mov	r3, r0
 8009dae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00f      	beq.n	8009dd6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f918 	bl	8009fee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f7fe ffa3 	bl	8008d12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2202      	movs	r2, #2
 8009dd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009dd4:	e014      	b.n	8009e00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f9d4 	bl	800a184 <USBD_CtlSendStatus>
      break;
 8009ddc:	e010      	b.n	8009e00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f9d0 	bl	800a184 <USBD_CtlSendStatus>
      break;
 8009de4:	e00c      	b.n	8009e00 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009de6:	6839      	ldr	r1, [r7, #0]
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 f900 	bl	8009fee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009dee:	4b07      	ldr	r3, [pc, #28]	; (8009e0c <USBD_SetConfig+0x150>)
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7fe ff8c 	bl	8008d12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8009dfe:	bf00      	nop
  }

  return ret;
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	2000030c 	.word	0x2000030c

08009e10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	88db      	ldrh	r3, [r3, #6]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d004      	beq.n	8009e2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f8e2 	bl	8009fee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e2a:	e023      	b.n	8009e74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	dc02      	bgt.n	8009e3e <USBD_GetConfig+0x2e>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	dc03      	bgt.n	8009e44 <USBD_GetConfig+0x34>
 8009e3c:	e015      	b.n	8009e6a <USBD_GetConfig+0x5a>
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	d00b      	beq.n	8009e5a <USBD_GetConfig+0x4a>
 8009e42:	e012      	b.n	8009e6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	3308      	adds	r3, #8
 8009e4e:	2201      	movs	r2, #1
 8009e50:	4619      	mov	r1, r3
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f93c 	bl	800a0d0 <USBD_CtlSendData>
        break;
 8009e58:	e00c      	b.n	8009e74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	3304      	adds	r3, #4
 8009e5e:	2201      	movs	r2, #1
 8009e60:	4619      	mov	r1, r3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f934 	bl	800a0d0 <USBD_CtlSendData>
        break;
 8009e68:	e004      	b.n	8009e74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f8be 	bl	8009fee <USBD_CtlError>
        break;
 8009e72:	bf00      	nop
}
 8009e74:	bf00      	nop
 8009e76:	3708      	adds	r7, #8
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b082      	sub	sp, #8
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d81e      	bhi.n	8009ed2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	88db      	ldrh	r3, [r3, #6]
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d004      	beq.n	8009ea6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 f8a5 	bl	8009fee <USBD_CtlError>
        break;
 8009ea4:	e01a      	b.n	8009edc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d005      	beq.n	8009ec2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	f043 0202 	orr.w	r2, r3, #2
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	330c      	adds	r3, #12
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	4619      	mov	r1, r3
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f900 	bl	800a0d0 <USBD_CtlSendData>
      break;
 8009ed0:	e004      	b.n	8009edc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009ed2:	6839      	ldr	r1, [r7, #0]
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f88a 	bl	8009fee <USBD_CtlError>
      break;
 8009eda:	bf00      	nop
  }
}
 8009edc:	bf00      	nop
 8009ede:	3708      	adds	r7, #8
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b082      	sub	sp, #8
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	885b      	ldrh	r3, [r3, #2]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d107      	bne.n	8009f06 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f940 	bl	800a184 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009f04:	e013      	b.n	8009f2e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	885b      	ldrh	r3, [r3, #2]
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d10b      	bne.n	8009f26 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	889b      	ldrh	r3, [r3, #4]
 8009f12:	0a1b      	lsrs	r3, r3, #8
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 f930 	bl	800a184 <USBD_CtlSendStatus>
}
 8009f24:	e003      	b.n	8009f2e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 f860 	bl	8009fee <USBD_CtlError>
}
 8009f2e:	bf00      	nop
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b082      	sub	sp, #8
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d80b      	bhi.n	8009f66 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	885b      	ldrh	r3, [r3, #2]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d10c      	bne.n	8009f70 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f910 	bl	800a184 <USBD_CtlSendStatus>
      }
      break;
 8009f64:	e004      	b.n	8009f70 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 f840 	bl	8009fee <USBD_CtlError>
      break;
 8009f6e:	e000      	b.n	8009f72 <USBD_ClrFeature+0x3c>
      break;
 8009f70:	bf00      	nop
  }
}
 8009f72:	bf00      	nop
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b084      	sub	sp, #16
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	781a      	ldrb	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	3301      	adds	r3, #1
 8009f94:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	781a      	ldrb	r2, [r3, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f7ff fa41 	bl	800942c <SWAPBYTE>
 8009faa:	4603      	mov	r3, r0
 8009fac:	461a      	mov	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f7ff fa34 	bl	800942c <SWAPBYTE>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	3301      	adds	r3, #1
 8009fd0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f7ff fa27 	bl	800942c <SWAPBYTE>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	80da      	strh	r2, [r3, #6]
}
 8009fe6:	bf00      	nop
 8009fe8:	3710      	adds	r7, #16
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b082      	sub	sp, #8
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ff8:	2180      	movs	r1, #128	; 0x80
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 fcc8 	bl	800a990 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a000:	2100      	movs	r1, #0
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fcc4 	bl	800a990 <USBD_LL_StallEP>
}
 800a008:	bf00      	nop
 800a00a:	3708      	adds	r7, #8
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a01c:	2300      	movs	r3, #0
 800a01e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d036      	beq.n	800a094 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a02a:	6938      	ldr	r0, [r7, #16]
 800a02c:	f000 f836 	bl	800a09c <USBD_GetLen>
 800a030:	4603      	mov	r3, r0
 800a032:	3301      	adds	r3, #1
 800a034:	b29b      	uxth	r3, r3
 800a036:	005b      	lsls	r3, r3, #1
 800a038:	b29a      	uxth	r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a03e:	7dfb      	ldrb	r3, [r7, #23]
 800a040:	68ba      	ldr	r2, [r7, #8]
 800a042:	4413      	add	r3, r2
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	7812      	ldrb	r2, [r2, #0]
 800a048:	701a      	strb	r2, [r3, #0]
  idx++;
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
 800a04c:	3301      	adds	r3, #1
 800a04e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a050:	7dfb      	ldrb	r3, [r7, #23]
 800a052:	68ba      	ldr	r2, [r7, #8]
 800a054:	4413      	add	r3, r2
 800a056:	2203      	movs	r2, #3
 800a058:	701a      	strb	r2, [r3, #0]
  idx++;
 800a05a:	7dfb      	ldrb	r3, [r7, #23]
 800a05c:	3301      	adds	r3, #1
 800a05e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a060:	e013      	b.n	800a08a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a062:	7dfb      	ldrb	r3, [r7, #23]
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	4413      	add	r3, r2
 800a068:	693a      	ldr	r2, [r7, #16]
 800a06a:	7812      	ldrb	r2, [r2, #0]
 800a06c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	3301      	adds	r3, #1
 800a072:	613b      	str	r3, [r7, #16]
    idx++;
 800a074:	7dfb      	ldrb	r3, [r7, #23]
 800a076:	3301      	adds	r3, #1
 800a078:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a07a:	7dfb      	ldrb	r3, [r7, #23]
 800a07c:	68ba      	ldr	r2, [r7, #8]
 800a07e:	4413      	add	r3, r2
 800a080:	2200      	movs	r2, #0
 800a082:	701a      	strb	r2, [r3, #0]
    idx++;
 800a084:	7dfb      	ldrb	r3, [r7, #23]
 800a086:	3301      	adds	r3, #1
 800a088:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1e7      	bne.n	800a062 <USBD_GetString+0x52>
 800a092:	e000      	b.n	800a096 <USBD_GetString+0x86>
    return;
 800a094:	bf00      	nop
  }
}
 800a096:	3718      	adds	r7, #24
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a0ac:	e005      	b.n	800a0ba <USBD_GetLen+0x1e>
  {
    len++;
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1f5      	bne.n	800a0ae <USBD_GetLen+0x12>
  }

  return len;
 800a0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2202      	movs	r2, #2
 800a0e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f000 fcd3 	bl	800aaa2 <USBD_LL_Transmit>

  return USBD_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b084      	sub	sp, #16
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	60f8      	str	r0, [r7, #12]
 800a10e:	60b9      	str	r1, [r7, #8]
 800a110:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	2100      	movs	r1, #0
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f000 fcc2 	bl	800aaa2 <USBD_LL_Transmit>

  return USBD_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2203      	movs	r2, #3
 800a138:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	2100      	movs	r1, #0
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f000 fcc6 	bl	800aae4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b084      	sub	sp, #16
 800a166:	af00      	add	r7, sp, #0
 800a168:	60f8      	str	r0, [r7, #12]
 800a16a:	60b9      	str	r1, [r7, #8]
 800a16c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	2100      	movs	r1, #0
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 fcb5 	bl	800aae4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2204      	movs	r2, #4
 800a190:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a194:	2300      	movs	r3, #0
 800a196:	2200      	movs	r2, #0
 800a198:	2100      	movs	r1, #0
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 fc81 	bl	800aaa2 <USBD_LL_Transmit>

  return USBD_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3708      	adds	r7, #8
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b082      	sub	sp, #8
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2205      	movs	r2, #5
 800a1b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	2200      	movs	r2, #0
 800a1be:	2100      	movs	r1, #0
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 fc8f 	bl	800aae4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3708      	adds	r7, #8
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	4912      	ldr	r1, [pc, #72]	; (800a220 <MX_USB_DEVICE_Init+0x50>)
 800a1d8:	4812      	ldr	r0, [pc, #72]	; (800a224 <MX_USB_DEVICE_Init+0x54>)
 800a1da:	f7fe fd01 	bl	8008be0 <USBD_Init>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d001      	beq.n	800a1e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a1e4:	f7f6 fe10 	bl	8000e08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a1e8:	490f      	ldr	r1, [pc, #60]	; (800a228 <MX_USB_DEVICE_Init+0x58>)
 800a1ea:	480e      	ldr	r0, [pc, #56]	; (800a224 <MX_USB_DEVICE_Init+0x54>)
 800a1ec:	f7fe fd28 	bl	8008c40 <USBD_RegisterClass>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a1f6:	f7f6 fe07 	bl	8000e08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a1fa:	490c      	ldr	r1, [pc, #48]	; (800a22c <MX_USB_DEVICE_Init+0x5c>)
 800a1fc:	4809      	ldr	r0, [pc, #36]	; (800a224 <MX_USB_DEVICE_Init+0x54>)
 800a1fe:	f7fe fc5f 	bl	8008ac0 <USBD_CDC_RegisterInterface>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a208:	f7f6 fdfe 	bl	8000e08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a20c:	4805      	ldr	r0, [pc, #20]	; (800a224 <MX_USB_DEVICE_Init+0x54>)
 800a20e:	f7fe fd4d 	bl	8008cac <USBD_Start>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a218:	f7f6 fdf6 	bl	8000e08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a21c:	bf00      	nop
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	200000b0 	.word	0x200000b0
 800a224:	20000310 	.word	0x20000310
 800a228:	2000001c 	.word	0x2000001c
 800a22c:	2000009c 	.word	0x2000009c

0800a230 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a234:	2200      	movs	r2, #0
 800a236:	4905      	ldr	r1, [pc, #20]	; (800a24c <CDC_Init_FS+0x1c>)
 800a238:	4805      	ldr	r0, [pc, #20]	; (800a250 <CDC_Init_FS+0x20>)
 800a23a:	f7fe fc5b 	bl	8008af4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a23e:	4905      	ldr	r1, [pc, #20]	; (800a254 <CDC_Init_FS+0x24>)
 800a240:	4803      	ldr	r0, [pc, #12]	; (800a250 <CDC_Init_FS+0x20>)
 800a242:	f7fe fc79 	bl	8008b38 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a246:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a248:	4618      	mov	r0, r3
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	20000dec 	.word	0x20000dec
 800a250:	20000310 	.word	0x20000310
 800a254:	200005ec 	.word	0x200005ec

0800a258 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a258:	b480      	push	{r7}
 800a25a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a25c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a25e:	4618      	mov	r0, r3
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	4603      	mov	r3, r0
 800a270:	6039      	str	r1, [r7, #0]
 800a272:	71fb      	strb	r3, [r7, #7]
 800a274:	4613      	mov	r3, r2
 800a276:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a278:	79fb      	ldrb	r3, [r7, #7]
 800a27a:	2b23      	cmp	r3, #35	; 0x23
 800a27c:	d84a      	bhi.n	800a314 <CDC_Control_FS+0xac>
 800a27e:	a201      	add	r2, pc, #4	; (adr r2, 800a284 <CDC_Control_FS+0x1c>)
 800a280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a284:	0800a315 	.word	0x0800a315
 800a288:	0800a315 	.word	0x0800a315
 800a28c:	0800a315 	.word	0x0800a315
 800a290:	0800a315 	.word	0x0800a315
 800a294:	0800a315 	.word	0x0800a315
 800a298:	0800a315 	.word	0x0800a315
 800a29c:	0800a315 	.word	0x0800a315
 800a2a0:	0800a315 	.word	0x0800a315
 800a2a4:	0800a315 	.word	0x0800a315
 800a2a8:	0800a315 	.word	0x0800a315
 800a2ac:	0800a315 	.word	0x0800a315
 800a2b0:	0800a315 	.word	0x0800a315
 800a2b4:	0800a315 	.word	0x0800a315
 800a2b8:	0800a315 	.word	0x0800a315
 800a2bc:	0800a315 	.word	0x0800a315
 800a2c0:	0800a315 	.word	0x0800a315
 800a2c4:	0800a315 	.word	0x0800a315
 800a2c8:	0800a315 	.word	0x0800a315
 800a2cc:	0800a315 	.word	0x0800a315
 800a2d0:	0800a315 	.word	0x0800a315
 800a2d4:	0800a315 	.word	0x0800a315
 800a2d8:	0800a315 	.word	0x0800a315
 800a2dc:	0800a315 	.word	0x0800a315
 800a2e0:	0800a315 	.word	0x0800a315
 800a2e4:	0800a315 	.word	0x0800a315
 800a2e8:	0800a315 	.word	0x0800a315
 800a2ec:	0800a315 	.word	0x0800a315
 800a2f0:	0800a315 	.word	0x0800a315
 800a2f4:	0800a315 	.word	0x0800a315
 800a2f8:	0800a315 	.word	0x0800a315
 800a2fc:	0800a315 	.word	0x0800a315
 800a300:	0800a315 	.word	0x0800a315
 800a304:	0800a315 	.word	0x0800a315
 800a308:	0800a315 	.word	0x0800a315
 800a30c:	0800a315 	.word	0x0800a315
 800a310:	0800a315 	.word	0x0800a315
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a314:	bf00      	nop
  }

  return (USBD_OK);
 800a316:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a318:	4618      	mov	r0, r3
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a32e:	6879      	ldr	r1, [r7, #4]
 800a330:	4805      	ldr	r0, [pc, #20]	; (800a348 <CDC_Receive_FS+0x24>)
 800a332:	f7fe fc01 	bl	8008b38 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a336:	4804      	ldr	r0, [pc, #16]	; (800a348 <CDC_Receive_FS+0x24>)
 800a338:	f7fe fc1c 	bl	8008b74 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a33c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	20000310 	.word	0x20000310

0800a34c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b087      	sub	sp, #28
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	4613      	mov	r3, r2
 800a358:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a35a:	2300      	movs	r3, #0
 800a35c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a35e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a362:	4618      	mov	r0, r3
 800a364:	371c      	adds	r7, #28
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
	...

0800a370 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	4603      	mov	r3, r0
 800a378:	6039      	str	r1, [r7, #0]
 800a37a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	2212      	movs	r2, #18
 800a380:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a382:	4b03      	ldr	r3, [pc, #12]	; (800a390 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a384:	4618      	mov	r0, r3
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr
 800a390:	200000cc 	.word	0x200000cc

0800a394 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	4603      	mov	r3, r0
 800a39c:	6039      	str	r1, [r7, #0]
 800a39e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	2204      	movs	r2, #4
 800a3a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a3a6:	4b03      	ldr	r3, [pc, #12]	; (800a3b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr
 800a3b4:	200000e0 	.word	0x200000e0

0800a3b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	6039      	str	r1, [r7, #0]
 800a3c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3c4:	79fb      	ldrb	r3, [r7, #7]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d105      	bne.n	800a3d6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3ca:	683a      	ldr	r2, [r7, #0]
 800a3cc:	4907      	ldr	r1, [pc, #28]	; (800a3ec <USBD_FS_ProductStrDescriptor+0x34>)
 800a3ce:	4808      	ldr	r0, [pc, #32]	; (800a3f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3d0:	f7ff fe1e 	bl	800a010 <USBD_GetString>
 800a3d4:	e004      	b.n	800a3e0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3d6:	683a      	ldr	r2, [r7, #0]
 800a3d8:	4904      	ldr	r1, [pc, #16]	; (800a3ec <USBD_FS_ProductStrDescriptor+0x34>)
 800a3da:	4805      	ldr	r0, [pc, #20]	; (800a3f0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3dc:	f7ff fe18 	bl	800a010 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3e0:	4b02      	ldr	r3, [pc, #8]	; (800a3ec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	200015ec 	.word	0x200015ec
 800a3f0:	0800ac44 	.word	0x0800ac44

0800a3f4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b082      	sub	sp, #8
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	6039      	str	r1, [r7, #0]
 800a3fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a400:	683a      	ldr	r2, [r7, #0]
 800a402:	4904      	ldr	r1, [pc, #16]	; (800a414 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a404:	4804      	ldr	r0, [pc, #16]	; (800a418 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a406:	f7ff fe03 	bl	800a010 <USBD_GetString>
  return USBD_StrDesc;
 800a40a:	4b02      	ldr	r3, [pc, #8]	; (800a414 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	200015ec 	.word	0x200015ec
 800a418:	0800ac5c 	.word	0x0800ac5c

0800a41c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	4603      	mov	r3, r0
 800a424:	6039      	str	r1, [r7, #0]
 800a426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	221a      	movs	r2, #26
 800a42c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a42e:	f000 f843 	bl	800a4b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a432:	4b02      	ldr	r3, [pc, #8]	; (800a43c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a434:	4618      	mov	r0, r3
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	200000e4 	.word	0x200000e4

0800a440 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b082      	sub	sp, #8
 800a444:	af00      	add	r7, sp, #0
 800a446:	4603      	mov	r3, r0
 800a448:	6039      	str	r1, [r7, #0]
 800a44a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a44c:	79fb      	ldrb	r3, [r7, #7]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d105      	bne.n	800a45e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a452:	683a      	ldr	r2, [r7, #0]
 800a454:	4907      	ldr	r1, [pc, #28]	; (800a474 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a456:	4808      	ldr	r0, [pc, #32]	; (800a478 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a458:	f7ff fdda 	bl	800a010 <USBD_GetString>
 800a45c:	e004      	b.n	800a468 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	4904      	ldr	r1, [pc, #16]	; (800a474 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a462:	4805      	ldr	r0, [pc, #20]	; (800a478 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a464:	f7ff fdd4 	bl	800a010 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a468:	4b02      	ldr	r3, [pc, #8]	; (800a474 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	200015ec 	.word	0x200015ec
 800a478:	0800ac70 	.word	0x0800ac70

0800a47c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	4603      	mov	r3, r0
 800a484:	6039      	str	r1, [r7, #0]
 800a486:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a488:	79fb      	ldrb	r3, [r7, #7]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d105      	bne.n	800a49a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	4907      	ldr	r1, [pc, #28]	; (800a4b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a492:	4808      	ldr	r0, [pc, #32]	; (800a4b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a494:	f7ff fdbc 	bl	800a010 <USBD_GetString>
 800a498:	e004      	b.n	800a4a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	4904      	ldr	r1, [pc, #16]	; (800a4b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a49e:	4805      	ldr	r0, [pc, #20]	; (800a4b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4a0:	f7ff fdb6 	bl	800a010 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4a4:	4b02      	ldr	r3, [pc, #8]	; (800a4b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	200015ec 	.word	0x200015ec
 800a4b4:	0800ac7c 	.word	0x0800ac7c

0800a4b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a4be:	4b0f      	ldr	r3, [pc, #60]	; (800a4fc <Get_SerialNum+0x44>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a4c4:	4b0e      	ldr	r3, [pc, #56]	; (800a500 <Get_SerialNum+0x48>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a4ca:	4b0e      	ldr	r3, [pc, #56]	; (800a504 <Get_SerialNum+0x4c>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d009      	beq.n	800a4f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a4de:	2208      	movs	r2, #8
 800a4e0:	4909      	ldr	r1, [pc, #36]	; (800a508 <Get_SerialNum+0x50>)
 800a4e2:	68f8      	ldr	r0, [r7, #12]
 800a4e4:	f000 f814 	bl	800a510 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a4e8:	2204      	movs	r2, #4
 800a4ea:	4908      	ldr	r1, [pc, #32]	; (800a50c <Get_SerialNum+0x54>)
 800a4ec:	68b8      	ldr	r0, [r7, #8]
 800a4ee:	f000 f80f 	bl	800a510 <IntToUnicode>
  }
}
 800a4f2:	bf00      	nop
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	1fff7a10 	.word	0x1fff7a10
 800a500:	1fff7a14 	.word	0x1fff7a14
 800a504:	1fff7a18 	.word	0x1fff7a18
 800a508:	200000e6 	.word	0x200000e6
 800a50c:	200000f6 	.word	0x200000f6

0800a510 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a510:	b480      	push	{r7}
 800a512:	b087      	sub	sp, #28
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	4613      	mov	r3, r2
 800a51c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a51e:	2300      	movs	r3, #0
 800a520:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a522:	2300      	movs	r3, #0
 800a524:	75fb      	strb	r3, [r7, #23]
 800a526:	e027      	b.n	800a578 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	0f1b      	lsrs	r3, r3, #28
 800a52c:	2b09      	cmp	r3, #9
 800a52e:	d80b      	bhi.n	800a548 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	0f1b      	lsrs	r3, r3, #28
 800a534:	b2da      	uxtb	r2, r3
 800a536:	7dfb      	ldrb	r3, [r7, #23]
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	4619      	mov	r1, r3
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	440b      	add	r3, r1
 800a540:	3230      	adds	r2, #48	; 0x30
 800a542:	b2d2      	uxtb	r2, r2
 800a544:	701a      	strb	r2, [r3, #0]
 800a546:	e00a      	b.n	800a55e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	0f1b      	lsrs	r3, r3, #28
 800a54c:	b2da      	uxtb	r2, r3
 800a54e:	7dfb      	ldrb	r3, [r7, #23]
 800a550:	005b      	lsls	r3, r3, #1
 800a552:	4619      	mov	r1, r3
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	440b      	add	r3, r1
 800a558:	3237      	adds	r2, #55	; 0x37
 800a55a:	b2d2      	uxtb	r2, r2
 800a55c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	011b      	lsls	r3, r3, #4
 800a562:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a564:	7dfb      	ldrb	r3, [r7, #23]
 800a566:	005b      	lsls	r3, r3, #1
 800a568:	3301      	adds	r3, #1
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	4413      	add	r3, r2
 800a56e:	2200      	movs	r2, #0
 800a570:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a572:	7dfb      	ldrb	r3, [r7, #23]
 800a574:	3301      	adds	r3, #1
 800a576:	75fb      	strb	r3, [r7, #23]
 800a578:	7dfa      	ldrb	r2, [r7, #23]
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d3d3      	bcc.n	800a528 <IntToUnicode+0x18>
  }
}
 800a580:	bf00      	nop
 800a582:	bf00      	nop
 800a584:	371c      	adds	r7, #28
 800a586:	46bd      	mov	sp, r7
 800a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58c:	4770      	bx	lr
	...

0800a590 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b08a      	sub	sp, #40	; 0x28
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a598:	f107 0314 	add.w	r3, r7, #20
 800a59c:	2200      	movs	r2, #0
 800a59e:	601a      	str	r2, [r3, #0]
 800a5a0:	605a      	str	r2, [r3, #4]
 800a5a2:	609a      	str	r2, [r3, #8]
 800a5a4:	60da      	str	r2, [r3, #12]
 800a5a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5b0:	d147      	bne.n	800a642 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	613b      	str	r3, [r7, #16]
 800a5b6:	4b25      	ldr	r3, [pc, #148]	; (800a64c <HAL_PCD_MspInit+0xbc>)
 800a5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ba:	4a24      	ldr	r2, [pc, #144]	; (800a64c <HAL_PCD_MspInit+0xbc>)
 800a5bc:	f043 0301 	orr.w	r3, r3, #1
 800a5c0:	6313      	str	r3, [r2, #48]	; 0x30
 800a5c2:	4b22      	ldr	r3, [pc, #136]	; (800a64c <HAL_PCD_MspInit+0xbc>)
 800a5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c6:	f003 0301 	and.w	r3, r3, #1
 800a5ca:	613b      	str	r3, [r7, #16]
 800a5cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a5ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a5dc:	f107 0314 	add.w	r3, r7, #20
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	481b      	ldr	r0, [pc, #108]	; (800a650 <HAL_PCD_MspInit+0xc0>)
 800a5e4:	f7f7 fc42 	bl	8001e6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a5e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a5ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5ee:	2302      	movs	r3, #2
 800a5f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a5fa:	230a      	movs	r3, #10
 800a5fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5fe:	f107 0314 	add.w	r3, r7, #20
 800a602:	4619      	mov	r1, r3
 800a604:	4812      	ldr	r0, [pc, #72]	; (800a650 <HAL_PCD_MspInit+0xc0>)
 800a606:	f7f7 fc31 	bl	8001e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a60a:	4b10      	ldr	r3, [pc, #64]	; (800a64c <HAL_PCD_MspInit+0xbc>)
 800a60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a60e:	4a0f      	ldr	r2, [pc, #60]	; (800a64c <HAL_PCD_MspInit+0xbc>)
 800a610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a614:	6353      	str	r3, [r2, #52]	; 0x34
 800a616:	2300      	movs	r3, #0
 800a618:	60fb      	str	r3, [r7, #12]
 800a61a:	4b0c      	ldr	r3, [pc, #48]	; (800a64c <HAL_PCD_MspInit+0xbc>)
 800a61c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a61e:	4a0b      	ldr	r2, [pc, #44]	; (800a64c <HAL_PCD_MspInit+0xbc>)
 800a620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a624:	6453      	str	r3, [r2, #68]	; 0x44
 800a626:	4b09      	ldr	r3, [pc, #36]	; (800a64c <HAL_PCD_MspInit+0xbc>)
 800a628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a62a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a62e:	60fb      	str	r3, [r7, #12]
 800a630:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a632:	2200      	movs	r2, #0
 800a634:	2100      	movs	r1, #0
 800a636:	2043      	movs	r0, #67	; 0x43
 800a638:	f7f7 fbe1 	bl	8001dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a63c:	2043      	movs	r0, #67	; 0x43
 800a63e:	f7f7 fbfa 	bl	8001e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a642:	bf00      	nop
 800a644:	3728      	adds	r7, #40	; 0x28
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	40023800 	.word	0x40023800
 800a650:	40020000 	.word	0x40020000

0800a654 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a668:	4619      	mov	r1, r3
 800a66a:	4610      	mov	r0, r2
 800a66c:	f7fe fb6b 	bl	8008d46 <USBD_LL_SetupStage>
}
 800a670:	bf00      	nop
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	460b      	mov	r3, r1
 800a682:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a68a:	78fa      	ldrb	r2, [r7, #3]
 800a68c:	6879      	ldr	r1, [r7, #4]
 800a68e:	4613      	mov	r3, r2
 800a690:	00db      	lsls	r3, r3, #3
 800a692:	4413      	add	r3, r2
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	440b      	add	r3, r1
 800a698:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	78fb      	ldrb	r3, [r7, #3]
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	f7fe fba5 	bl	8008df0 <USBD_LL_DataOutStage>
}
 800a6a6:	bf00      	nop
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b082      	sub	sp, #8
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a6c0:	78fa      	ldrb	r2, [r7, #3]
 800a6c2:	6879      	ldr	r1, [r7, #4]
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	00db      	lsls	r3, r3, #3
 800a6c8:	4413      	add	r3, r2
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	440b      	add	r3, r1
 800a6ce:	3320      	adds	r3, #32
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	78fb      	ldrb	r3, [r7, #3]
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	f7fe fc3e 	bl	8008f56 <USBD_LL_DataInStage>
}
 800a6da:	bf00      	nop
 800a6dc:	3708      	adds	r7, #8
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b082      	sub	sp, #8
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7fe fd78 	bl	80091e6 <USBD_LL_SOF>
}
 800a6f6:	bf00      	nop
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b084      	sub	sp, #16
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a706:	2301      	movs	r3, #1
 800a708:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	79db      	ldrb	r3, [r3, #7]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d102      	bne.n	800a718 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a712:	2300      	movs	r3, #0
 800a714:	73fb      	strb	r3, [r7, #15]
 800a716:	e008      	b.n	800a72a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	79db      	ldrb	r3, [r3, #7]
 800a71c:	2b02      	cmp	r3, #2
 800a71e:	d102      	bne.n	800a726 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a720:	2301      	movs	r3, #1
 800a722:	73fb      	strb	r3, [r7, #15]
 800a724:	e001      	b.n	800a72a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a726:	f7f6 fb6f 	bl	8000e08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a730:	7bfa      	ldrb	r2, [r7, #15]
 800a732:	4611      	mov	r1, r2
 800a734:	4618      	mov	r0, r3
 800a736:	f7fe fd12 	bl	800915e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a740:	4618      	mov	r0, r3
 800a742:	f7fe fcba 	bl	80090ba <USBD_LL_Reset>
}
 800a746:	bf00      	nop
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
	...

0800a750 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a75e:	4618      	mov	r0, r3
 800a760:	f7fe fd0d 	bl	800917e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	6812      	ldr	r2, [r2, #0]
 800a772:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a776:	f043 0301 	orr.w	r3, r3, #1
 800a77a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	7adb      	ldrb	r3, [r3, #11]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d005      	beq.n	800a790 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a784:	4b04      	ldr	r3, [pc, #16]	; (800a798 <HAL_PCD_SuspendCallback+0x48>)
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	4a03      	ldr	r2, [pc, #12]	; (800a798 <HAL_PCD_SuspendCallback+0x48>)
 800a78a:	f043 0306 	orr.w	r3, r3, #6
 800a78e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a790:	bf00      	nop
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	e000ed00 	.word	0xe000ed00

0800a79c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7fe fd03 	bl	80091b6 <USBD_LL_Resume>
}
 800a7b0:	bf00      	nop
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a7ca:	78fa      	ldrb	r2, [r7, #3]
 800a7cc:	4611      	mov	r1, r2
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fe fd5b 	bl	800928a <USBD_LL_IsoOUTIncomplete>
}
 800a7d4:	bf00      	nop
 800a7d6:	3708      	adds	r7, #8
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a7ee:	78fa      	ldrb	r2, [r7, #3]
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7fe fd17 	bl	8009226 <USBD_LL_IsoINIncomplete>
}
 800a7f8:	bf00      	nop
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fe fd6d 	bl	80092ee <USBD_LL_DevConnected>
}
 800a814:	bf00      	nop
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fe fd6a 	bl	8009304 <USBD_LL_DevDisconnected>
}
 800a830:	bf00      	nop
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d13c      	bne.n	800a8c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a848:	4a20      	ldr	r2, [pc, #128]	; (800a8cc <USBD_LL_Init+0x94>)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a1e      	ldr	r2, [pc, #120]	; (800a8cc <USBD_LL_Init+0x94>)
 800a854:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a858:	4b1c      	ldr	r3, [pc, #112]	; (800a8cc <USBD_LL_Init+0x94>)
 800a85a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a85e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a860:	4b1a      	ldr	r3, [pc, #104]	; (800a8cc <USBD_LL_Init+0x94>)
 800a862:	2204      	movs	r2, #4
 800a864:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a866:	4b19      	ldr	r3, [pc, #100]	; (800a8cc <USBD_LL_Init+0x94>)
 800a868:	2202      	movs	r2, #2
 800a86a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a86c:	4b17      	ldr	r3, [pc, #92]	; (800a8cc <USBD_LL_Init+0x94>)
 800a86e:	2200      	movs	r2, #0
 800a870:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a872:	4b16      	ldr	r3, [pc, #88]	; (800a8cc <USBD_LL_Init+0x94>)
 800a874:	2202      	movs	r2, #2
 800a876:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a878:	4b14      	ldr	r3, [pc, #80]	; (800a8cc <USBD_LL_Init+0x94>)
 800a87a:	2200      	movs	r2, #0
 800a87c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a87e:	4b13      	ldr	r3, [pc, #76]	; (800a8cc <USBD_LL_Init+0x94>)
 800a880:	2200      	movs	r2, #0
 800a882:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a884:	4b11      	ldr	r3, [pc, #68]	; (800a8cc <USBD_LL_Init+0x94>)
 800a886:	2200      	movs	r2, #0
 800a888:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a88a:	4b10      	ldr	r3, [pc, #64]	; (800a8cc <USBD_LL_Init+0x94>)
 800a88c:	2201      	movs	r2, #1
 800a88e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a890:	4b0e      	ldr	r3, [pc, #56]	; (800a8cc <USBD_LL_Init+0x94>)
 800a892:	2200      	movs	r2, #0
 800a894:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a896:	480d      	ldr	r0, [pc, #52]	; (800a8cc <USBD_LL_Init+0x94>)
 800a898:	f7f8 ffa2 	bl	80037e0 <HAL_PCD_Init>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d001      	beq.n	800a8a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a8a2:	f7f6 fab1 	bl	8000e08 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a8a6:	2180      	movs	r1, #128	; 0x80
 800a8a8:	4808      	ldr	r0, [pc, #32]	; (800a8cc <USBD_LL_Init+0x94>)
 800a8aa:	f7fa f9cc 	bl	8004c46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a8ae:	2240      	movs	r2, #64	; 0x40
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	4806      	ldr	r0, [pc, #24]	; (800a8cc <USBD_LL_Init+0x94>)
 800a8b4:	f7fa f980 	bl	8004bb8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a8b8:	2280      	movs	r2, #128	; 0x80
 800a8ba:	2101      	movs	r1, #1
 800a8bc:	4803      	ldr	r0, [pc, #12]	; (800a8cc <USBD_LL_Init+0x94>)
 800a8be:	f7fa f97b 	bl	8004bb8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	200017ec 	.word	0x200017ec

0800a8d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7f9 f889 	bl	80039fe <HAL_PCD_Start>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8f0:	7bfb      	ldrb	r3, [r7, #15]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 f942 	bl	800ab7c <USBD_Get_USB_Status>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b084      	sub	sp, #16
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	4608      	mov	r0, r1
 800a910:	4611      	mov	r1, r2
 800a912:	461a      	mov	r2, r3
 800a914:	4603      	mov	r3, r0
 800a916:	70fb      	strb	r3, [r7, #3]
 800a918:	460b      	mov	r3, r1
 800a91a:	70bb      	strb	r3, [r7, #2]
 800a91c:	4613      	mov	r3, r2
 800a91e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a920:	2300      	movs	r3, #0
 800a922:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a924:	2300      	movs	r3, #0
 800a926:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a92e:	78bb      	ldrb	r3, [r7, #2]
 800a930:	883a      	ldrh	r2, [r7, #0]
 800a932:	78f9      	ldrb	r1, [r7, #3]
 800a934:	f7f9 fd5d 	bl	80043f2 <HAL_PCD_EP_Open>
 800a938:	4603      	mov	r3, r0
 800a93a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a93c:	7bfb      	ldrb	r3, [r7, #15]
 800a93e:	4618      	mov	r0, r3
 800a940:	f000 f91c 	bl	800ab7c <USBD_Get_USB_Status>
 800a944:	4603      	mov	r3, r0
 800a946:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a948:	7bbb      	ldrb	r3, [r7, #14]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b084      	sub	sp, #16
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
 800a95a:	460b      	mov	r3, r1
 800a95c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a95e:	2300      	movs	r3, #0
 800a960:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a962:	2300      	movs	r3, #0
 800a964:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a96c:	78fa      	ldrb	r2, [r7, #3]
 800a96e:	4611      	mov	r1, r2
 800a970:	4618      	mov	r0, r3
 800a972:	f7f9 fda6 	bl	80044c2 <HAL_PCD_EP_Close>
 800a976:	4603      	mov	r3, r0
 800a978:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a97a:	7bfb      	ldrb	r3, [r7, #15]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f000 f8fd 	bl	800ab7c <USBD_Get_USB_Status>
 800a982:	4603      	mov	r3, r0
 800a984:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a986:	7bbb      	ldrb	r3, [r7, #14]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3710      	adds	r7, #16
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	460b      	mov	r3, r1
 800a99a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a99c:	2300      	movs	r3, #0
 800a99e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9aa:	78fa      	ldrb	r2, [r7, #3]
 800a9ac:	4611      	mov	r1, r2
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7f9 fe5e 	bl	8004670 <HAL_PCD_EP_SetStall>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9b8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f000 f8de 	bl	800ab7c <USBD_Get_USB_Status>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b084      	sub	sp, #16
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9e8:	78fa      	ldrb	r2, [r7, #3]
 800a9ea:	4611      	mov	r1, r2
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7f9 fea2 	bl	8004736 <HAL_PCD_EP_ClrStall>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9f6:	7bfb      	ldrb	r3, [r7, #15]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f000 f8bf 	bl	800ab7c <USBD_Get_USB_Status>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa02:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3710      	adds	r7, #16
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	460b      	mov	r3, r1
 800aa16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	da0b      	bge.n	800aa40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa28:	78fb      	ldrb	r3, [r7, #3]
 800aa2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa2e:	68f9      	ldr	r1, [r7, #12]
 800aa30:	4613      	mov	r3, r2
 800aa32:	00db      	lsls	r3, r3, #3
 800aa34:	4413      	add	r3, r2
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	440b      	add	r3, r1
 800aa3a:	3316      	adds	r3, #22
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	e00b      	b.n	800aa58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa40:	78fb      	ldrb	r3, [r7, #3]
 800aa42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa46:	68f9      	ldr	r1, [r7, #12]
 800aa48:	4613      	mov	r3, r2
 800aa4a:	00db      	lsls	r3, r3, #3
 800aa4c:	4413      	add	r3, r2
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	440b      	add	r3, r1
 800aa52:	f203 2356 	addw	r3, r3, #598	; 0x256
 800aa56:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa70:	2300      	movs	r3, #0
 800aa72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa74:	2300      	movs	r3, #0
 800aa76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa7e:	78fa      	ldrb	r2, [r7, #3]
 800aa80:	4611      	mov	r1, r2
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7f9 fc91 	bl	80043aa <HAL_PCD_SetAddress>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f000 f874 	bl	800ab7c <USBD_Get_USB_Status>
 800aa94:	4603      	mov	r3, r0
 800aa96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa98:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b086      	sub	sp, #24
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	60f8      	str	r0, [r7, #12]
 800aaaa:	607a      	str	r2, [r7, #4]
 800aaac:	603b      	str	r3, [r7, #0]
 800aaae:	460b      	mov	r3, r1
 800aab0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aab2:	2300      	movs	r3, #0
 800aab4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aab6:	2300      	movs	r3, #0
 800aab8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aac0:	7af9      	ldrb	r1, [r7, #11]
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	f7f9 fd99 	bl	80045fc <HAL_PCD_EP_Transmit>
 800aaca:	4603      	mov	r3, r0
 800aacc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aace:	7dfb      	ldrb	r3, [r7, #23]
 800aad0:	4618      	mov	r0, r3
 800aad2:	f000 f853 	bl	800ab7c <USBD_Get_USB_Status>
 800aad6:	4603      	mov	r3, r0
 800aad8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aada:	7dbb      	ldrb	r3, [r7, #22]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3718      	adds	r7, #24
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	607a      	str	r2, [r7, #4]
 800aaee:	603b      	str	r3, [r7, #0]
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ab02:	7af9      	ldrb	r1, [r7, #11]
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	f7f9 fd25 	bl	8004556 <HAL_PCD_EP_Receive>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab10:	7dfb      	ldrb	r3, [r7, #23]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 f832 	bl	800ab7c <USBD_Get_USB_Status>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab1c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3718      	adds	r7, #24
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b082      	sub	sp, #8
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
 800ab2e:	460b      	mov	r3, r1
 800ab30:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab38:	78fa      	ldrb	r2, [r7, #3]
 800ab3a:	4611      	mov	r1, r2
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7f9 fd45 	bl	80045cc <HAL_PCD_EP_GetRxCount>
 800ab42:	4603      	mov	r3, r0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab54:	4b03      	ldr	r3, [pc, #12]	; (800ab64 <USBD_static_malloc+0x18>)
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	20001cd0 	.word	0x20001cd0

0800ab68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]

}
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab86:	2300      	movs	r3, #0
 800ab88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab8a:	79fb      	ldrb	r3, [r7, #7]
 800ab8c:	2b03      	cmp	r3, #3
 800ab8e:	d817      	bhi.n	800abc0 <USBD_Get_USB_Status+0x44>
 800ab90:	a201      	add	r2, pc, #4	; (adr r2, 800ab98 <USBD_Get_USB_Status+0x1c>)
 800ab92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab96:	bf00      	nop
 800ab98:	0800aba9 	.word	0x0800aba9
 800ab9c:	0800abaf 	.word	0x0800abaf
 800aba0:	0800abb5 	.word	0x0800abb5
 800aba4:	0800abbb 	.word	0x0800abbb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	73fb      	strb	r3, [r7, #15]
    break;
 800abac:	e00b      	b.n	800abc6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800abae:	2303      	movs	r3, #3
 800abb0:	73fb      	strb	r3, [r7, #15]
    break;
 800abb2:	e008      	b.n	800abc6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800abb4:	2301      	movs	r3, #1
 800abb6:	73fb      	strb	r3, [r7, #15]
    break;
 800abb8:	e005      	b.n	800abc6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800abba:	2303      	movs	r3, #3
 800abbc:	73fb      	strb	r3, [r7, #15]
    break;
 800abbe:	e002      	b.n	800abc6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800abc0:	2303      	movs	r3, #3
 800abc2:	73fb      	strb	r3, [r7, #15]
    break;
 800abc4:	bf00      	nop
  }
  return usb_status;
 800abc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3714      	adds	r7, #20
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <memset>:
 800abd4:	4402      	add	r2, r0
 800abd6:	4603      	mov	r3, r0
 800abd8:	4293      	cmp	r3, r2
 800abda:	d100      	bne.n	800abde <memset+0xa>
 800abdc:	4770      	bx	lr
 800abde:	f803 1b01 	strb.w	r1, [r3], #1
 800abe2:	e7f9      	b.n	800abd8 <memset+0x4>

0800abe4 <__libc_init_array>:
 800abe4:	b570      	push	{r4, r5, r6, lr}
 800abe6:	4d0d      	ldr	r5, [pc, #52]	; (800ac1c <__libc_init_array+0x38>)
 800abe8:	4c0d      	ldr	r4, [pc, #52]	; (800ac20 <__libc_init_array+0x3c>)
 800abea:	1b64      	subs	r4, r4, r5
 800abec:	10a4      	asrs	r4, r4, #2
 800abee:	2600      	movs	r6, #0
 800abf0:	42a6      	cmp	r6, r4
 800abf2:	d109      	bne.n	800ac08 <__libc_init_array+0x24>
 800abf4:	4d0b      	ldr	r5, [pc, #44]	; (800ac24 <__libc_init_array+0x40>)
 800abf6:	4c0c      	ldr	r4, [pc, #48]	; (800ac28 <__libc_init_array+0x44>)
 800abf8:	f000 f818 	bl	800ac2c <_init>
 800abfc:	1b64      	subs	r4, r4, r5
 800abfe:	10a4      	asrs	r4, r4, #2
 800ac00:	2600      	movs	r6, #0
 800ac02:	42a6      	cmp	r6, r4
 800ac04:	d105      	bne.n	800ac12 <__libc_init_array+0x2e>
 800ac06:	bd70      	pop	{r4, r5, r6, pc}
 800ac08:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac0c:	4798      	blx	r3
 800ac0e:	3601      	adds	r6, #1
 800ac10:	e7ee      	b.n	800abf0 <__libc_init_array+0xc>
 800ac12:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac16:	4798      	blx	r3
 800ac18:	3601      	adds	r6, #1
 800ac1a:	e7f2      	b.n	800ac02 <__libc_init_array+0x1e>
 800ac1c:	0800acac 	.word	0x0800acac
 800ac20:	0800acac 	.word	0x0800acac
 800ac24:	0800acac 	.word	0x0800acac
 800ac28:	0800acb0 	.word	0x0800acb0

0800ac2c <_init>:
 800ac2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac2e:	bf00      	nop
 800ac30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac32:	bc08      	pop	{r3}
 800ac34:	469e      	mov	lr, r3
 800ac36:	4770      	bx	lr

0800ac38 <_fini>:
 800ac38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3a:	bf00      	nop
 800ac3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac3e:	bc08      	pop	{r3}
 800ac40:	469e      	mov	lr, r3
 800ac42:	4770      	bx	lr
