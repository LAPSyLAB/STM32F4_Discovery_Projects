
STM32_USB_Modbus_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008560  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  080086f0  080086f0  000186f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089c8  080089c8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080089c8  080089c8  000189c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089d0  080089d0  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089d0  080089d0  000189d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089d4  080089d4  000189d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080089d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00002268  200001d4  200001d4  000201d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000243c  2000243c  000201d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001501f  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003f9f  00000000  00000000  00035266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001288  00000000  00000000  00039208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e09  00000000  00000000  0003a490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025760  00000000  00000000  0003b299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bf2d  00000000  00000000  000609f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cc623  00000000  00000000  0007c926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004fc8  00000000  00000000  00148f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  0014df14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086d8 	.word	0x080086d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080086d8 	.word	0x080086d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08c      	sub	sp, #48	; 0x30
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 031c 	add.w	r3, r7, #28
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
 8000586:	4b72      	ldr	r3, [pc, #456]	; (8000750 <MX_GPIO_Init+0x1e4>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a71      	ldr	r2, [pc, #452]	; (8000750 <MX_GPIO_Init+0x1e4>)
 800058c:	f043 0310 	orr.w	r3, r3, #16
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b6f      	ldr	r3, [pc, #444]	; (8000750 <MX_GPIO_Init+0x1e4>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0310 	and.w	r3, r3, #16
 800059a:	61bb      	str	r3, [r7, #24]
 800059c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	617b      	str	r3, [r7, #20]
 80005a2:	4b6b      	ldr	r3, [pc, #428]	; (8000750 <MX_GPIO_Init+0x1e4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a6a      	ldr	r2, [pc, #424]	; (8000750 <MX_GPIO_Init+0x1e4>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b68      	ldr	r3, [pc, #416]	; (8000750 <MX_GPIO_Init+0x1e4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0304 	and.w	r3, r3, #4
 80005b6:	617b      	str	r3, [r7, #20]
 80005b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
 80005be:	4b64      	ldr	r3, [pc, #400]	; (8000750 <MX_GPIO_Init+0x1e4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a63      	ldr	r2, [pc, #396]	; (8000750 <MX_GPIO_Init+0x1e4>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b61      	ldr	r3, [pc, #388]	; (8000750 <MX_GPIO_Init+0x1e4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	4b5d      	ldr	r3, [pc, #372]	; (8000750 <MX_GPIO_Init+0x1e4>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a5c      	ldr	r2, [pc, #368]	; (8000750 <MX_GPIO_Init+0x1e4>)
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b5a      	ldr	r3, [pc, #360]	; (8000750 <MX_GPIO_Init+0x1e4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	4b56      	ldr	r3, [pc, #344]	; (8000750 <MX_GPIO_Init+0x1e4>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a55      	ldr	r2, [pc, #340]	; (8000750 <MX_GPIO_Init+0x1e4>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b53      	ldr	r3, [pc, #332]	; (8000750 <MX_GPIO_Init+0x1e4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b4f      	ldr	r3, [pc, #316]	; (8000750 <MX_GPIO_Init+0x1e4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a4e      	ldr	r2, [pc, #312]	; (8000750 <MX_GPIO_Init+0x1e4>)
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b4c      	ldr	r3, [pc, #304]	; (8000750 <MX_GPIO_Init+0x1e4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0308 	and.w	r3, r3, #8
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2108      	movs	r1, #8
 800062e:	4849      	ldr	r0, [pc, #292]	; (8000754 <MX_GPIO_Init+0x1e8>)
 8000630:	f000 ffae 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2101      	movs	r1, #1
 8000638:	4847      	ldr	r0, [pc, #284]	; (8000758 <MX_GPIO_Init+0x1ec>)
 800063a:	f000 ffa9 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800063e:	2200      	movs	r2, #0
 8000640:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000644:	4845      	ldr	r0, [pc, #276]	; (800075c <MX_GPIO_Init+0x1f0>)
 8000646:	f000 ffa3 	bl	8001590 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800064a:	2308      	movs	r3, #8
 800064c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	4619      	mov	r1, r3
 8000660:	483c      	ldr	r0, [pc, #240]	; (8000754 <MX_GPIO_Init+0x1e8>)
 8000662:	f000 fde1 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000666:	2301      	movs	r3, #1
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2300      	movs	r3, #0
 8000674:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	4619      	mov	r1, r3
 800067c:	4836      	ldr	r0, [pc, #216]	; (8000758 <MX_GPIO_Init+0x1ec>)
 800067e:	f000 fdd3 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000682:	2308      	movs	r3, #8
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000686:	2302      	movs	r3, #2
 8000688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000692:	2305      	movs	r3, #5
 8000694:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4619      	mov	r1, r3
 800069c:	482e      	ldr	r0, [pc, #184]	; (8000758 <MX_GPIO_Init+0x1ec>)
 800069e:	f000 fdc3 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006a2:	2301      	movs	r3, #1
 80006a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006a6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4619      	mov	r1, r3
 80006b6:	482a      	ldr	r0, [pc, #168]	; (8000760 <MX_GPIO_Init+0x1f4>)
 80006b8:	f000 fdb6 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006bc:	2304      	movs	r3, #4
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	4825      	ldr	r0, [pc, #148]	; (8000764 <MX_GPIO_Init+0x1f8>)
 80006d0:	f000 fdaa 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2302      	movs	r3, #2
 80006dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006e6:	2305      	movs	r3, #5
 80006e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	481c      	ldr	r0, [pc, #112]	; (8000764 <MX_GPIO_Init+0x1f8>)
 80006f2:	f000 fd99 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006f6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006fa:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	4813      	ldr	r0, [pc, #76]	; (800075c <MX_GPIO_Init+0x1f0>)
 8000710:	f000 fd8a 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000714:	2320      	movs	r3, #32
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000718:	2300      	movs	r3, #0
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	480d      	ldr	r0, [pc, #52]	; (800075c <MX_GPIO_Init+0x1f0>)
 8000728:	f000 fd7e 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800072c:	2302      	movs	r3, #2
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000730:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_GPIO_Init+0x1e8>)
 8000742:	f000 fd71 	bl	8001228 <HAL_GPIO_Init>

}
 8000746:	bf00      	nop
 8000748:	3730      	adds	r7, #48	; 0x30
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40021000 	.word	0x40021000
 8000758:	40020800 	.word	0x40020800
 800075c:	40020c00 	.word	0x40020c00
 8000760:	40020000 	.word	0x40020000
 8000764:	40020400 	.word	0x40020400

08000768 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2C1_Init+0x50>)
 800076e:	4a13      	ldr	r2, [pc, #76]	; (80007bc <MX_I2C1_Init+0x54>)
 8000770:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000774:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <MX_I2C1_Init+0x58>)
 8000776:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800078a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_I2C1_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_I2C1_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_I2C1_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_I2C1_Init+0x50>)
 80007a6:	f000 ff27 	bl	80015f8 <HAL_I2C_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b0:	f000 fa40 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200001f0 	.word	0x200001f0
 80007bc:	40005400 	.word	0x40005400
 80007c0:	000186a0 	.word	0x000186a0

080007c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a19      	ldr	r2, [pc, #100]	; (8000848 <HAL_I2C_MspInit+0x84>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d12c      	bne.n	8000840 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <HAL_I2C_MspInit+0x88>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <HAL_I2C_MspInit+0x88>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <HAL_I2C_MspInit+0x88>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000802:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000808:	2312      	movs	r3, #18
 800080a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800080c:	2301      	movs	r3, #1
 800080e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000814:	2304      	movs	r3, #4
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	480c      	ldr	r0, [pc, #48]	; (8000850 <HAL_I2C_MspInit+0x8c>)
 8000820:	f000 fd02 	bl	8001228 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <HAL_I2C_MspInit+0x88>)
 800082a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082c:	4a07      	ldr	r2, [pc, #28]	; (800084c <HAL_I2C_MspInit+0x88>)
 800082e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_I2C_MspInit+0x88>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	; 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40005400 	.word	0x40005400
 800084c:	40023800 	.word	0x40023800
 8000850:	40020400 	.word	0x40020400

08000854 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <MX_I2S3_Init+0x54>)
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <MX_I2S3_Init+0x58>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000860:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000864:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_I2S3_Init+0x54>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000878:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <MX_I2S3_Init+0x54>)
 800087c:	4a0c      	ldr	r2, [pc, #48]	; (80008b0 <MX_I2S3_Init+0x5c>)
 800087e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_I2S3_Init+0x54>)
 800088e:	2200      	movs	r2, #0
 8000890:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_I2S3_Init+0x54>)
 8000894:	f000 fff4 	bl	8001880 <HAL_I2S_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800089e:	f000 f9c9 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000244 	.word	0x20000244
 80008ac:	40003c00 	.word	0x40003c00
 80008b0:	00017700 	.word	0x00017700

080008b4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08e      	sub	sp, #56	; 0x38
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a31      	ldr	r2, [pc, #196]	; (80009a4 <HAL_I2S_MspInit+0xf0>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d15a      	bne.n	800099a <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008e4:	2301      	movs	r3, #1
 80008e6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008e8:	23c0      	movs	r3, #192	; 0xc0
 80008ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4618      	mov	r0, r3
 80008f6:	f003 fa6b 	bl	8003dd0 <HAL_RCCEx_PeriphCLKConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000900:	f000 f998 	bl	8000c34 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 800090e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000912:	6413      	str	r3, [r2, #64]	; 0x40
 8000914:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	4a1f      	ldr	r2, [pc, #124]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6313      	str	r3, [r2, #48]	; 0x30
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	4a18      	ldr	r2, [pc, #96]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	6313      	str	r3, [r2, #48]	; 0x30
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <HAL_I2S_MspInit+0xf4>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	f003 0304 	and.w	r3, r3, #4
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000958:	2310      	movs	r3, #16
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000968:	2306      	movs	r3, #6
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000970:	4619      	mov	r1, r3
 8000972:	480e      	ldr	r0, [pc, #56]	; (80009ac <HAL_I2S_MspInit+0xf8>)
 8000974:	f000 fc58 	bl	8001228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000978:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800098a:	2306      	movs	r3, #6
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	4619      	mov	r1, r3
 8000994:	4806      	ldr	r0, [pc, #24]	; (80009b0 <HAL_I2S_MspInit+0xfc>)
 8000996:	f000 fc47 	bl	8001228 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800099a:	bf00      	nop
 800099c:	3738      	adds	r7, #56	; 0x38
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40003c00 	.word	0x40003c00
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40020800 	.word	0x40020800

080009b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b6:	b089      	sub	sp, #36	; 0x24
 80009b8:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	uint32_t lastRun = 0U;
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009be:	f000 fa8b 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c2:	f000 f8cd 	bl	8000b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c6:	f7ff fdd1 	bl	800056c <MX_GPIO_Init>
  MX_I2C1_Init();
 80009ca:	f7ff fecd 	bl	8000768 <MX_I2C1_Init>
  MX_I2S3_Init();
 80009ce:	f7ff ff41 	bl	8000854 <MX_I2S3_Init>
  MX_SPI1_Init();
 80009d2:	f000 f935 	bl	8000c40 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80009d6:	f006 fc89 	bl	80072ec <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 nowTime = HAL_GetTick();
 80009da:	f000 fae3 	bl	8000fa4 <HAL_GetTick>
 80009de:	6038      	str	r0, [r7, #0]

	 if ((nowTime - lastRun) >= 1000) {
 80009e0:	683a      	ldr	r2, [r7, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009ea:	d33f      	bcc.n	8000a6c <main+0xb8>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80009ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f0:	484c      	ldr	r0, [pc, #304]	; (8000b24 <main+0x170>)
 80009f2:	f000 fde6 	bl	80015c2 <HAL_GPIO_TogglePin>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80009f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fa:	484a      	ldr	r0, [pc, #296]	; (8000b24 <main+0x170>)
 80009fc:	f000 fde1 	bl	80015c2 <HAL_GPIO_TogglePin>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a04:	4847      	ldr	r0, [pc, #284]	; (8000b24 <main+0x170>)
 8000a06:	f000 fddc 	bl	80015c2 <HAL_GPIO_TogglePin>

		 MB_MasterState=MBUS_REQSENT;
 8000a0a:	4b47      	ldr	r3, [pc, #284]	; (8000b28 <main+0x174>)
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	701a      	strb	r2, [r3, #0]
//		 ---   Slave ID=1, Write state 511 of 1 analog output register on addresses 0-15
//		  errorCode = eMBMasterReqWriteHoldingRegister(1,MBCnt,511,1);
//		  MBCnt= (MBCnt + 1) % 16;

//		 ---   Slave ID=1, Write state 511 of 1 analog output register on addresses 0-15
		 usModbusUserData[0]= usModbusUserData[1]= usModbusUserData[2]= usModbusUserData[3]=MBCnt;
 8000a10:	4b46      	ldr	r3, [pc, #280]	; (8000b2c <main+0x178>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	4b46      	ldr	r3, [pc, #280]	; (8000b30 <main+0x17c>)
 8000a18:	80da      	strh	r2, [r3, #6]
 8000a1a:	4b45      	ldr	r3, [pc, #276]	; (8000b30 <main+0x17c>)
 8000a1c:	88da      	ldrh	r2, [r3, #6]
 8000a1e:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <main+0x17c>)
 8000a20:	809a      	strh	r2, [r3, #4]
 8000a22:	4b43      	ldr	r3, [pc, #268]	; (8000b30 <main+0x17c>)
 8000a24:	889a      	ldrh	r2, [r3, #4]
 8000a26:	4b42      	ldr	r3, [pc, #264]	; (8000b30 <main+0x17c>)
 8000a28:	805a      	strh	r2, [r3, #2]
 8000a2a:	4b41      	ldr	r3, [pc, #260]	; (8000b30 <main+0x17c>)
 8000a2c:	885a      	ldrh	r2, [r3, #2]
 8000a2e:	4b40      	ldr	r3, [pc, #256]	; (8000b30 <main+0x17c>)
 8000a30:	801a      	strh	r2, [r3, #0]
		 errorCode = eMBMasterReqWriteMultipleHoldingRegister(1,MBCnt,2,usModbusUserData,1);
 8000a32:	4b3e      	ldr	r3, [pc, #248]	; (8000b2c <main+0x178>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b299      	uxth	r1, r3
 8000a38:	2301      	movs	r3, #1
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	4b3c      	ldr	r3, [pc, #240]	; (8000b30 <main+0x17c>)
 8000a3e:	2202      	movs	r2, #2
 8000a40:	2001      	movs	r0, #1
 8000a42:	f004 ff07 	bl	8005854 <eMBMasterReqWriteMultipleHoldingRegister>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b3a      	ldr	r3, [pc, #232]	; (8000b34 <main+0x180>)
 8000a4c:	701a      	strb	r2, [r3, #0]
		 MBCnt= (MBCnt + 1) % 16;
 8000a4e:	4b37      	ldr	r3, [pc, #220]	; (8000b2c <main+0x178>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	425a      	negs	r2, r3
 8000a56:	f003 030f 	and.w	r3, r3, #15
 8000a5a:	f002 020f 	and.w	r2, r2, #15
 8000a5e:	bf58      	it	pl
 8000a60:	4253      	negpl	r3, r2
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <main+0x178>)
 8000a66:	701a      	strb	r2, [r3, #0]
		 //       UNChecked tests - TODO
		 // -------------------------------------

		 //		errorCode = eMBMasterReqReadWriteMultipleHoldingRegister(1,3,2,usModbusUserData,5,2,WAIT_FOREVER);

	     lastRun = nowTime;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	607b      	str	r3, [r7, #4]
	 }


	 KeyState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	4832      	ldr	r0, [pc, #200]	; (8000b38 <main+0x184>)
 8000a70:	f000 fd76 	bl	8001560 <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <main+0x188>)
 8000a7a:	601a      	str	r2, [r3, #0]
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, KeyState);
 8000a7c:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <main+0x188>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	461a      	mov	r2, r3
 8000a84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a88:	4826      	ldr	r0, [pc, #152]	; (8000b24 <main+0x170>)
 8000a8a:	f000 fd81 	bl	8001590 <HAL_GPIO_WritePin>


      // Receive over USB Virtual ComPort
	  if (RXbufferStrLen > 0) {
 8000a8e:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <main+0x18c>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d0a0      	beq.n	80009da <main+0x26>

		  if ((RXbuffer[0] == MBbuffer[0]) && (RXbuffer[1] == MBbuffer[1]) ) {
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <main+0x190>)
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	4b2a      	ldr	r3, [pc, #168]	; (8000b48 <main+0x194>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d10c      	bne.n	8000abe <main+0x10a>
 8000aa4:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <main+0x190>)
 8000aa6:	785a      	ldrb	r2, [r3, #1]
 8000aa8:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <main+0x194>)
 8000aaa:	785b      	ldrb	r3, [r3, #1]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d106      	bne.n	8000abe <main+0x10a>
			  succCount++;
 8000ab0:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <main+0x198>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <main+0x198>)
 8000aba:	801a      	strh	r2, [r3, #0]
 8000abc:	e009      	b.n	8000ad2 <main+0x11e>
		  } else {
			  errorCount++;
 8000abe:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <main+0x19c>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <main+0x19c>)
 8000ac8:	801a      	strh	r2, [r3, #0]
			  MBErrorCode = RXbuffer[2];
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <main+0x190>)
 8000acc:	789a      	ldrb	r2, [r3, #2]
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <main+0x1a0>)
 8000ad0:	701a      	strb	r2, [r3, #0]
		  }

		  snprintf(SendBuffer,BUFSIZE,"Modbus Msg Received: Addr:%d FC:%02x Bytes:%d | %02x %02x %04x\r\n\0",RXbuffer[0],RXbuffer[1],RXbuffer[2],RXbuffer[3],RXbuffer[4],RXbuffer[3]*256+RXbuffer[4]);
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <main+0x190>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	461e      	mov	r6, r3
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <main+0x190>)
 8000ada:	785b      	ldrb	r3, [r3, #1]
 8000adc:	4619      	mov	r1, r3
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <main+0x190>)
 8000ae0:	789b      	ldrb	r3, [r3, #2]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <main+0x190>)
 8000ae6:	78db      	ldrb	r3, [r3, #3]
 8000ae8:	461c      	mov	r4, r3
 8000aea:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <main+0x190>)
 8000aec:	791b      	ldrb	r3, [r3, #4]
 8000aee:	461d      	mov	r5, r3
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <main+0x190>)
 8000af2:	78db      	ldrb	r3, [r3, #3]
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <main+0x190>)
 8000af8:	7912      	ldrb	r2, [r2, #4]
 8000afa:	4413      	add	r3, r2
 8000afc:	9304      	str	r3, [sp, #16]
 8000afe:	9503      	str	r5, [sp, #12]
 8000b00:	9402      	str	r4, [sp, #8]
 8000b02:	9001      	str	r0, [sp, #4]
 8000b04:	9100      	str	r1, [sp, #0]
 8000b06:	4633      	mov	r3, r6
 8000b08:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <main+0x1a4>)
 8000b0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0e:	4813      	ldr	r0, [pc, #76]	; (8000b5c <main+0x1a8>)
 8000b10:	f007 f92a 	bl	8007d68 <sniprintf>
          // Not sending on USB not to interfere with MODBUS communication !

		  MB_MasterState=MBUS_READY;
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <main+0x174>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	701a      	strb	r2, [r3, #0]
		  RXbufferStrLen = 0;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <main+0x18c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	701a      	strb	r2, [r3, #0]
	 nowTime = HAL_GetTick();
 8000b20:	e75b      	b.n	80009da <main+0x26>
 8000b22:	bf00      	nop
 8000b24:	40020c00 	.word	0x40020c00
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000594 	.word	0x20000594
 8000b30:	2000059c 	.word	0x2000059c
 8000b34:	20000595 	.word	0x20000595
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	2000038c 	.word	0x2000038c
 8000b40:	20000490 	.word	0x20000490
 8000b44:	20000390 	.word	0x20000390
 8000b48:	20000494 	.word	0x20000494
 8000b4c:	20000598 	.word	0x20000598
 8000b50:	20000596 	.word	0x20000596
 8000b54:	2000059a 	.word	0x2000059a
 8000b58:	080086f0 	.word	0x080086f0
 8000b5c:	2000028c 	.word	0x2000028c

08000b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b094      	sub	sp, #80	; 0x50
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	f107 0320 	add.w	r3, r7, #32
 8000b6a:	2230      	movs	r2, #48	; 0x30
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f007 f92e 	bl	8007dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <SystemClock_Config+0xcc>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	4a27      	ldr	r2, [pc, #156]	; (8000c2c <SystemClock_Config+0xcc>)
 8000b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b92:	6413      	str	r3, [r2, #64]	; 0x40
 8000b94:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <SystemClock_Config+0xcc>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <SystemClock_Config+0xd0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a21      	ldr	r2, [pc, #132]	; (8000c30 <SystemClock_Config+0xd0>)
 8000baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <SystemClock_Config+0xd0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bd4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bde:	2307      	movs	r3, #7
 8000be0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be2:	f107 0320 	add.w	r3, r7, #32
 8000be6:	4618      	mov	r0, r3
 8000be8:	f002 fc6e 	bl	80034c8 <HAL_RCC_OscConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bf2:	f000 f81f 	bl	8000c34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf6:	230f      	movs	r3, #15
 8000bf8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	2105      	movs	r1, #5
 8000c14:	4618      	mov	r0, r3
 8000c16:	f002 fecf 	bl	80039b8 <HAL_RCC_ClockConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c20:	f000 f808 	bl	8000c34 <Error_Handler>
  }
}
 8000c24:	bf00      	nop
 8000c26:	3750      	adds	r7, #80	; 0x50
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40007000 	.word	0x40007000

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <Error_Handler+0x8>
	...

08000c40 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c46:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <MX_SPI1_Init+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c8c:	220a      	movs	r2, #10
 8000c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <MX_SPI1_Init+0x64>)
 8000c92:	f003 f9dd 	bl	8004050 <HAL_SPI_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c9c:	f7ff ffca 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000798 	.word	0x20000798
 8000ca8:	40013000 	.word	0x40013000

08000cac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a19      	ldr	r2, [pc, #100]	; (8000d30 <HAL_SPI_MspInit+0x84>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d12b      	bne.n	8000d26 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_SPI_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d06:	23e0      	movs	r3, #224	; 0xe0
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d16:	2305      	movs	r3, #5
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_SPI_MspInit+0x8c>)
 8000d22:	f000 fa81 	bl	8001228 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d26:	bf00      	nop
 8000d28:	3728      	adds	r7, #40	; 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40013000 	.word	0x40013000
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d7a:	2007      	movs	r0, #7
 8000d7c:	f000 fa12 	bl	80011a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40023800 	.word	0x40023800

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd8:	f000 f8d0 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <OTG_FS_IRQHandler+0x10>)
 8000de6:	f001 fb3b 	bl	8002460 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20001ccc 	.word	0x20001ccc

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d207      	bcs.n	8000e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e24:	f006 ffdc 	bl	8007de0 <__errno>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	e009      	b.n	8000e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <_sbrk+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20020000 	.word	0x20020000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	200007f0 	.word	0x200007f0
 8000e5c:	20002440 	.word	0x20002440

08000e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <SystemInit+0x20>)
 8000e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <SystemInit+0x20>)
 8000e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ebc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e8a:	490e      	ldr	r1, [pc, #56]	; (8000ec4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea0:	4c0b      	ldr	r4, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eae:	f7ff ffd7 	bl	8000e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb2:	f006 ff9b 	bl	8007dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb6:	f7ff fd7d 	bl	80009b4 <main>
  bx  lr    
 8000eba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ebc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8000ec8:	080089d8 	.word	0x080089d8
  ldr r2, =_sbss
 8000ecc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000ed0:	2000243c 	.word	0x2000243c

08000ed4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <HAL_Init+0x40>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <HAL_Init+0x40>)
 8000ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <HAL_Init+0x40>)
 8000eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_Init+0x40>)
 8000efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f00:	2003      	movs	r0, #3
 8000f02:	f000 f94f 	bl	80011a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f000 f808 	bl	8000f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f0c:	f7ff ff16 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023c00 	.word	0x40023c00

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_InitTick+0x54>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_InitTick+0x58>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f967 	bl	800120e <HAL_SYSTICK_Config>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00e      	b.n	8000f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d80a      	bhi.n	8000f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f000 f92f 	bl	80011ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f5c:	4a06      	ldr	r2, [pc, #24]	; (8000f78 <HAL_InitTick+0x5c>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000004 	.word	0x20000004
 8000f74:	2000000c 	.word	0x2000000c
 8000f78:	20000008 	.word	0x20000008

08000f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x20>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	2000000c 	.word	0x2000000c
 8000fa0:	200007f4 	.word	0x200007f4

08000fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <HAL_GetTick+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	200007f4 	.word	0x200007f4

08000fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc4:	f7ff ffee 	bl	8000fa4 <HAL_GetTick>
 8000fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd4:	d005      	beq.n	8000fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_Delay+0x44>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4413      	add	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fe2:	bf00      	nop
 8000fe4:	f7ff ffde 	bl	8000fa4 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d8f7      	bhi.n	8000fe4 <HAL_Delay+0x28>
  {
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000000c 	.word	0x2000000c

08001004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001020:	4013      	ands	r3, r2
 8001022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800102c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001036:	4a04      	ldr	r2, [pc, #16]	; (8001048 <__NVIC_SetPriorityGrouping+0x44>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	60d3      	str	r3, [r2, #12]
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <__NVIC_GetPriorityGrouping+0x18>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	0a1b      	lsrs	r3, r3, #8
 8001056:	f003 0307 	and.w	r3, r3, #7
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	2b00      	cmp	r3, #0
 8001078:	db0b      	blt.n	8001092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	f003 021f 	and.w	r2, r3, #31
 8001080:	4907      	ldr	r1, [pc, #28]	; (80010a0 <__NVIC_EnableIRQ+0x38>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	095b      	lsrs	r3, r3, #5
 8001088:	2001      	movs	r0, #1
 800108a:	fa00 f202 	lsl.w	r2, r0, r2
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000e100 	.word	0xe000e100

080010a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	6039      	str	r1, [r7, #0]
 80010ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db0a      	blt.n	80010ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	490c      	ldr	r1, [pc, #48]	; (80010f0 <__NVIC_SetPriority+0x4c>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	0112      	lsls	r2, r2, #4
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	440b      	add	r3, r1
 80010c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010cc:	e00a      	b.n	80010e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4908      	ldr	r1, [pc, #32]	; (80010f4 <__NVIC_SetPriority+0x50>)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	3b04      	subs	r3, #4
 80010dc:	0112      	lsls	r2, r2, #4
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	440b      	add	r3, r1
 80010e2:	761a      	strb	r2, [r3, #24]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000e100 	.word	0xe000e100
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f1c3 0307 	rsb	r3, r3, #7
 8001112:	2b04      	cmp	r3, #4
 8001114:	bf28      	it	cs
 8001116:	2304      	movcs	r3, #4
 8001118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3304      	adds	r3, #4
 800111e:	2b06      	cmp	r3, #6
 8001120:	d902      	bls.n	8001128 <NVIC_EncodePriority+0x30>
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3b03      	subs	r3, #3
 8001126:	e000      	b.n	800112a <NVIC_EncodePriority+0x32>
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	f04f 32ff 	mov.w	r2, #4294967295
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43da      	mvns	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	401a      	ands	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001140:	f04f 31ff 	mov.w	r1, #4294967295
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	43d9      	mvns	r1, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	4313      	orrs	r3, r2
         );
}
 8001152:	4618      	mov	r0, r3
 8001154:	3724      	adds	r7, #36	; 0x24
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001170:	d301      	bcc.n	8001176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001172:	2301      	movs	r3, #1
 8001174:	e00f      	b.n	8001196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <SysTick_Config+0x40>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3b01      	subs	r3, #1
 800117c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117e:	210f      	movs	r1, #15
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f7ff ff8e 	bl	80010a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <SysTick_Config+0x40>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <SysTick_Config+0x40>)
 8001190:	2207      	movs	r2, #7
 8001192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	e000e010 	.word	0xe000e010

080011a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff29 	bl	8001004 <__NVIC_SetPriorityGrouping>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011cc:	f7ff ff3e 	bl	800104c <__NVIC_GetPriorityGrouping>
 80011d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	6978      	ldr	r0, [r7, #20]
 80011d8:	f7ff ff8e 	bl	80010f8 <NVIC_EncodePriority>
 80011dc:	4602      	mov	r2, r0
 80011de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e2:	4611      	mov	r1, r2
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff5d 	bl	80010a4 <__NVIC_SetPriority>
}
 80011ea:	bf00      	nop
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff31 	bl	8001068 <__NVIC_EnableIRQ>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ffa2 	bl	8001160 <SysTick_Config>
 800121c:	4603      	mov	r3, r0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	e16b      	b.n	800151c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001244:	2201      	movs	r2, #1
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	429a      	cmp	r2, r3
 800125e:	f040 815a 	bne.w	8001516 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d005      	beq.n	800127a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001276:	2b02      	cmp	r3, #2
 8001278:	d130      	bne.n	80012dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b0:	2201      	movs	r2, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f003 0201 	and.w	r2, r3, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d017      	beq.n	8001318 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	2203      	movs	r2, #3
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d123      	bne.n	800136c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	08da      	lsrs	r2, r3, #3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3208      	adds	r2, #8
 800132c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	220f      	movs	r2, #15
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	08da      	lsrs	r2, r3, #3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3208      	adds	r2, #8
 8001366:	69b9      	ldr	r1, [r7, #24]
 8001368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0203 	and.w	r2, r3, #3
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80b4 	beq.w	8001516 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b60      	ldr	r3, [pc, #384]	; (8001534 <HAL_GPIO_Init+0x30c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	4a5f      	ldr	r2, [pc, #380]	; (8001534 <HAL_GPIO_Init+0x30c>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	; 0x44
 80013be:	4b5d      	ldr	r3, [pc, #372]	; (8001534 <HAL_GPIO_Init+0x30c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ca:	4a5b      	ldr	r2, [pc, #364]	; (8001538 <HAL_GPIO_Init+0x310>)
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	089b      	lsrs	r3, r3, #2
 80013d0:	3302      	adds	r3, #2
 80013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	220f      	movs	r2, #15
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a52      	ldr	r2, [pc, #328]	; (800153c <HAL_GPIO_Init+0x314>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d02b      	beq.n	800144e <HAL_GPIO_Init+0x226>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a51      	ldr	r2, [pc, #324]	; (8001540 <HAL_GPIO_Init+0x318>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d025      	beq.n	800144a <HAL_GPIO_Init+0x222>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a50      	ldr	r2, [pc, #320]	; (8001544 <HAL_GPIO_Init+0x31c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d01f      	beq.n	8001446 <HAL_GPIO_Init+0x21e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4f      	ldr	r2, [pc, #316]	; (8001548 <HAL_GPIO_Init+0x320>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d019      	beq.n	8001442 <HAL_GPIO_Init+0x21a>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4e      	ldr	r2, [pc, #312]	; (800154c <HAL_GPIO_Init+0x324>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d013      	beq.n	800143e <HAL_GPIO_Init+0x216>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4d      	ldr	r2, [pc, #308]	; (8001550 <HAL_GPIO_Init+0x328>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00d      	beq.n	800143a <HAL_GPIO_Init+0x212>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4c      	ldr	r2, [pc, #304]	; (8001554 <HAL_GPIO_Init+0x32c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d007      	beq.n	8001436 <HAL_GPIO_Init+0x20e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4b      	ldr	r2, [pc, #300]	; (8001558 <HAL_GPIO_Init+0x330>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d101      	bne.n	8001432 <HAL_GPIO_Init+0x20a>
 800142e:	2307      	movs	r3, #7
 8001430:	e00e      	b.n	8001450 <HAL_GPIO_Init+0x228>
 8001432:	2308      	movs	r3, #8
 8001434:	e00c      	b.n	8001450 <HAL_GPIO_Init+0x228>
 8001436:	2306      	movs	r3, #6
 8001438:	e00a      	b.n	8001450 <HAL_GPIO_Init+0x228>
 800143a:	2305      	movs	r3, #5
 800143c:	e008      	b.n	8001450 <HAL_GPIO_Init+0x228>
 800143e:	2304      	movs	r3, #4
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x228>
 8001442:	2303      	movs	r3, #3
 8001444:	e004      	b.n	8001450 <HAL_GPIO_Init+0x228>
 8001446:	2302      	movs	r3, #2
 8001448:	e002      	b.n	8001450 <HAL_GPIO_Init+0x228>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x228>
 800144e:	2300      	movs	r3, #0
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	f002 0203 	and.w	r2, r2, #3
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	4093      	lsls	r3, r2
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001460:	4935      	ldr	r1, [pc, #212]	; (8001538 <HAL_GPIO_Init+0x310>)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800146e:	4b3b      	ldr	r3, [pc, #236]	; (800155c <HAL_GPIO_Init+0x334>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001492:	4a32      	ldr	r2, [pc, #200]	; (800155c <HAL_GPIO_Init+0x334>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001498:	4b30      	ldr	r3, [pc, #192]	; (800155c <HAL_GPIO_Init+0x334>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014bc:	4a27      	ldr	r2, [pc, #156]	; (800155c <HAL_GPIO_Init+0x334>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <HAL_GPIO_Init+0x334>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014e6:	4a1d      	ldr	r2, [pc, #116]	; (800155c <HAL_GPIO_Init+0x334>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_GPIO_Init+0x334>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001510:	4a12      	ldr	r2, [pc, #72]	; (800155c <HAL_GPIO_Init+0x334>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3301      	adds	r3, #1
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	2b0f      	cmp	r3, #15
 8001520:	f67f ae90 	bls.w	8001244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3724      	adds	r7, #36	; 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	40013800 	.word	0x40013800
 800153c:	40020000 	.word	0x40020000
 8001540:	40020400 	.word	0x40020400
 8001544:	40020800 	.word	0x40020800
 8001548:	40020c00 	.word	0x40020c00
 800154c:	40021000 	.word	0x40021000
 8001550:	40021400 	.word	0x40021400
 8001554:	40021800 	.word	0x40021800
 8001558:	40021c00 	.word	0x40021c00
 800155c:	40013c00 	.word	0x40013c00

08001560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	887b      	ldrh	r3, [r7, #2]
 8001572:	4013      	ands	r3, r2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001578:	2301      	movs	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	e001      	b.n	8001582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015ac:	e003      	b.n	80015b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	041a      	lsls	r2, r3, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	619a      	str	r2, [r3, #24]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015d4:	887a      	ldrh	r2, [r7, #2]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4013      	ands	r3, r2
 80015da:	041a      	lsls	r2, r3, #16
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43d9      	mvns	r1, r3
 80015e0:	887b      	ldrh	r3, [r7, #2]
 80015e2:	400b      	ands	r3, r1
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	619a      	str	r2, [r3, #24]
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e12b      	b.n	8001862 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d106      	bne.n	8001624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff f8d0 	bl	80007c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2224      	movs	r2, #36	; 0x24
 8001628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0201 	bic.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800164a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800165a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800165c:	f002 fba4 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8001660:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4a81      	ldr	r2, [pc, #516]	; (800186c <HAL_I2C_Init+0x274>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d807      	bhi.n	800167c <HAL_I2C_Init+0x84>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4a80      	ldr	r2, [pc, #512]	; (8001870 <HAL_I2C_Init+0x278>)
 8001670:	4293      	cmp	r3, r2
 8001672:	bf94      	ite	ls
 8001674:	2301      	movls	r3, #1
 8001676:	2300      	movhi	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	e006      	b.n	800168a <HAL_I2C_Init+0x92>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4a7d      	ldr	r2, [pc, #500]	; (8001874 <HAL_I2C_Init+0x27c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	bf94      	ite	ls
 8001684:	2301      	movls	r3, #1
 8001686:	2300      	movhi	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e0e7      	b.n	8001862 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4a78      	ldr	r2, [pc, #480]	; (8001878 <HAL_I2C_Init+0x280>)
 8001696:	fba2 2303 	umull	r2, r3, r2, r3
 800169a:	0c9b      	lsrs	r3, r3, #18
 800169c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68ba      	ldr	r2, [r7, #8]
 80016ae:	430a      	orrs	r2, r1
 80016b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	4a6a      	ldr	r2, [pc, #424]	; (800186c <HAL_I2C_Init+0x274>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d802      	bhi.n	80016cc <HAL_I2C_Init+0xd4>
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	3301      	adds	r3, #1
 80016ca:	e009      	b.n	80016e0 <HAL_I2C_Init+0xe8>
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016d2:	fb02 f303 	mul.w	r3, r2, r3
 80016d6:	4a69      	ldr	r2, [pc, #420]	; (800187c <HAL_I2C_Init+0x284>)
 80016d8:	fba2 2303 	umull	r2, r3, r2, r3
 80016dc:	099b      	lsrs	r3, r3, #6
 80016de:	3301      	adds	r3, #1
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	430b      	orrs	r3, r1
 80016e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	495c      	ldr	r1, [pc, #368]	; (800186c <HAL_I2C_Init+0x274>)
 80016fc:	428b      	cmp	r3, r1
 80016fe:	d819      	bhi.n	8001734 <HAL_I2C_Init+0x13c>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1e59      	subs	r1, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fbb1 f3f3 	udiv	r3, r1, r3
 800170e:	1c59      	adds	r1, r3, #1
 8001710:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001714:	400b      	ands	r3, r1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00a      	beq.n	8001730 <HAL_I2C_Init+0x138>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1e59      	subs	r1, r3, #1
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fbb1 f3f3 	udiv	r3, r1, r3
 8001728:	3301      	adds	r3, #1
 800172a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172e:	e051      	b.n	80017d4 <HAL_I2C_Init+0x1dc>
 8001730:	2304      	movs	r3, #4
 8001732:	e04f      	b.n	80017d4 <HAL_I2C_Init+0x1dc>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d111      	bne.n	8001760 <HAL_I2C_Init+0x168>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1e58      	subs	r0, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	440b      	add	r3, r1
 800174a:	fbb0 f3f3 	udiv	r3, r0, r3
 800174e:	3301      	adds	r3, #1
 8001750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf0c      	ite	eq
 8001758:	2301      	moveq	r3, #1
 800175a:	2300      	movne	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	e012      	b.n	8001786 <HAL_I2C_Init+0x18e>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	1e58      	subs	r0, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6859      	ldr	r1, [r3, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	0099      	lsls	r1, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	fbb0 f3f3 	udiv	r3, r0, r3
 8001776:	3301      	adds	r3, #1
 8001778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800177c:	2b00      	cmp	r3, #0
 800177e:	bf0c      	ite	eq
 8001780:	2301      	moveq	r3, #1
 8001782:	2300      	movne	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_I2C_Init+0x196>
 800178a:	2301      	movs	r3, #1
 800178c:	e022      	b.n	80017d4 <HAL_I2C_Init+0x1dc>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10e      	bne.n	80017b4 <HAL_I2C_Init+0x1bc>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1e58      	subs	r0, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6859      	ldr	r1, [r3, #4]
 800179e:	460b      	mov	r3, r1
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	440b      	add	r3, r1
 80017a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a8:	3301      	adds	r3, #1
 80017aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b2:	e00f      	b.n	80017d4 <HAL_I2C_Init+0x1dc>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1e58      	subs	r0, r3, #1
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	0099      	lsls	r1, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ca:	3301      	adds	r3, #1
 80017cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	6809      	ldr	r1, [r1, #0]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69da      	ldr	r2, [r3, #28]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001802:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6911      	ldr	r1, [r2, #16]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68d2      	ldr	r2, [r2, #12]
 800180e:	4311      	orrs	r1, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	430b      	orrs	r3, r1
 8001816:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695a      	ldr	r2, [r3, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f042 0201 	orr.w	r2, r2, #1
 8001842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2220      	movs	r2, #32
 800184e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	000186a0 	.word	0x000186a0
 8001870:	001e847f 	.word	0x001e847f
 8001874:	003d08ff 	.word	0x003d08ff
 8001878:	431bde83 	.word	0x431bde83
 800187c:	10624dd3 	.word	0x10624dd3

08001880 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e128      	b.n	8001ae4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a90      	ldr	r2, [pc, #576]	; (8001aec <HAL_I2S_Init+0x26c>)
 80018aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff f801 	bl	80008b4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2202      	movs	r2, #2
 80018b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80018c8:	f023 030f 	bic.w	r3, r3, #15
 80018cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2202      	movs	r2, #2
 80018d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d060      	beq.n	80019a0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d102      	bne.n	80018ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80018e6:	2310      	movs	r3, #16
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	e001      	b.n	80018f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80018ec:	2320      	movs	r3, #32
 80018ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b20      	cmp	r3, #32
 80018f6:	d802      	bhi.n	80018fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80018fe:	2001      	movs	r0, #1
 8001900:	f002 fb48 	bl	8003f94 <HAL_RCCEx_GetPeriphCLKFreq>
 8001904:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800190e:	d125      	bne.n	800195c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d010      	beq.n	800193a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	461a      	mov	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	fbb2 f3f3 	udiv	r3, r2, r3
 8001934:	3305      	adds	r3, #5
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	e01f      	b.n	800197a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	fbb2 f2f3 	udiv	r2, r2, r3
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	461a      	mov	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	3305      	adds	r3, #5
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	e00e      	b.n	800197a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	fbb2 f2f3 	udiv	r2, r2, r3
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	461a      	mov	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	fbb2 f3f3 	udiv	r3, r2, r3
 8001976:	3305      	adds	r3, #5
 8001978:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4a5c      	ldr	r2, [pc, #368]	; (8001af0 <HAL_I2S_Init+0x270>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	08db      	lsrs	r3, r3, #3
 8001984:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	e003      	b.n	80019a8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80019a0:	2302      	movs	r3, #2
 80019a2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d902      	bls.n	80019b4 <HAL_I2S_Init+0x134>
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	2bff      	cmp	r3, #255	; 0xff
 80019b2:	d907      	bls.n	80019c4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b8:	f043 0210 	orr.w	r2, r3, #16
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e08f      	b.n	8001ae4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	ea42 0103 	orr.w	r1, r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80019e2:	f023 030f 	bic.w	r3, r3, #15
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6851      	ldr	r1, [r2, #4]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6892      	ldr	r2, [r2, #8]
 80019ee:	4311      	orrs	r1, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	68d2      	ldr	r2, [r2, #12]
 80019f4:	4311      	orrs	r1, r2
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6992      	ldr	r2, [r2, #24]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a06:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d161      	bne.n	8001ad4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a38      	ldr	r2, [pc, #224]	; (8001af4 <HAL_I2S_Init+0x274>)
 8001a14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a37      	ldr	r2, [pc, #220]	; (8001af8 <HAL_I2S_Init+0x278>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d101      	bne.n	8001a24 <HAL_I2S_Init+0x1a4>
 8001a20:	4b36      	ldr	r3, [pc, #216]	; (8001afc <HAL_I2S_Init+0x27c>)
 8001a22:	e001      	b.n	8001a28 <HAL_I2S_Init+0x1a8>
 8001a24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	4932      	ldr	r1, [pc, #200]	; (8001af8 <HAL_I2S_Init+0x278>)
 8001a30:	428a      	cmp	r2, r1
 8001a32:	d101      	bne.n	8001a38 <HAL_I2S_Init+0x1b8>
 8001a34:	4a31      	ldr	r2, [pc, #196]	; (8001afc <HAL_I2S_Init+0x27c>)
 8001a36:	e001      	b.n	8001a3c <HAL_I2S_Init+0x1bc>
 8001a38:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a3c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a40:	f023 030f 	bic.w	r3, r3, #15
 8001a44:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a2b      	ldr	r2, [pc, #172]	; (8001af8 <HAL_I2S_Init+0x278>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d101      	bne.n	8001a54 <HAL_I2S_Init+0x1d4>
 8001a50:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <HAL_I2S_Init+0x27c>)
 8001a52:	e001      	b.n	8001a58 <HAL_I2S_Init+0x1d8>
 8001a54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a58:	2202      	movs	r2, #2
 8001a5a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a25      	ldr	r2, [pc, #148]	; (8001af8 <HAL_I2S_Init+0x278>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_I2S_Init+0x1ea>
 8001a66:	4b25      	ldr	r3, [pc, #148]	; (8001afc <HAL_I2S_Init+0x27c>)
 8001a68:	e001      	b.n	8001a6e <HAL_I2S_Init+0x1ee>
 8001a6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a7a:	d003      	beq.n	8001a84 <HAL_I2S_Init+0x204>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d103      	bne.n	8001a8c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	e001      	b.n	8001a90 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	897b      	ldrh	r3, [r7, #10]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001abc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <HAL_I2S_Init+0x278>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d101      	bne.n	8001acc <HAL_I2S_Init+0x24c>
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <HAL_I2S_Init+0x27c>)
 8001aca:	e001      	b.n	8001ad0 <HAL_I2S_Init+0x250>
 8001acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ad0:	897a      	ldrh	r2, [r7, #10]
 8001ad2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	08001bf7 	.word	0x08001bf7
 8001af0:	cccccccd 	.word	0xcccccccd
 8001af4:	08001d0d 	.word	0x08001d0d
 8001af8:	40003800 	.word	0x40003800
 8001afc:	40003400 	.word	0x40003400

08001b00 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	881a      	ldrh	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	1c9a      	adds	r2, r3, #2
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	3b01      	subs	r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10e      	bne.n	8001b90 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b80:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff ffb8 	bl	8001b00 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001baa:	b292      	uxth	r2, r2
 8001bac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb2:	1c9a      	adds	r2, r3, #2
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10e      	bne.n	8001bee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bde:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff93 	bl	8001b14 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b086      	sub	sp, #24
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d13a      	bne.n	8001c88 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d109      	bne.n	8001c30 <I2S_IRQHandler+0x3a>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c26:	2b40      	cmp	r3, #64	; 0x40
 8001c28:	d102      	bne.n	8001c30 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff ffb4 	bl	8001b98 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c36:	2b40      	cmp	r3, #64	; 0x40
 8001c38:	d126      	bne.n	8001c88 <I2S_IRQHandler+0x92>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0320 	and.w	r3, r3, #32
 8001c44:	2b20      	cmp	r3, #32
 8001c46:	d11f      	bne.n	8001c88 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c58:	2300      	movs	r3, #0
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f043 0202 	orr.w	r2, r3, #2
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff ff50 	bl	8001b28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d136      	bne.n	8001d02 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d109      	bne.n	8001cb2 <I2S_IRQHandler+0xbc>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca8:	2b80      	cmp	r3, #128	; 0x80
 8001caa:	d102      	bne.n	8001cb2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff ff45 	bl	8001b3c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f003 0308 	and.w	r3, r3, #8
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d122      	bne.n	8001d02 <I2S_IRQHandler+0x10c>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0320 	and.w	r3, r3, #32
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d11b      	bne.n	8001d02 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cd8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	f043 0204 	orr.w	r2, r3, #4
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff13 	bl	8001b28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a92      	ldr	r2, [pc, #584]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d101      	bne.n	8001d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001d26:	4b92      	ldr	r3, [pc, #584]	; (8001f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d28:	e001      	b.n	8001d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001d2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a8b      	ldr	r2, [pc, #556]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d101      	bne.n	8001d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001d44:	4b8a      	ldr	r3, [pc, #552]	; (8001f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d46:	e001      	b.n	8001d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001d48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d58:	d004      	beq.n	8001d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f040 8099 	bne.w	8001e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d107      	bne.n	8001d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f000 f925 	bl	8001fc8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d107      	bne.n	8001d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f9c8 	bl	8002128 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9e:	2b40      	cmp	r3, #64	; 0x40
 8001da0:	d13a      	bne.n	8001e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d035      	beq.n	8001e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a6e      	ldr	r2, [pc, #440]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d101      	bne.n	8001dba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001db6:	4b6e      	ldr	r3, [pc, #440]	; (8001f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001db8:	e001      	b.n	8001dbe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001dba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4969      	ldr	r1, [pc, #420]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001dc6:	428b      	cmp	r3, r1
 8001dc8:	d101      	bne.n	8001dce <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001dca:	4b69      	ldr	r3, [pc, #420]	; (8001f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001dcc:	e001      	b.n	8001dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001dce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dd6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001de6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f043 0202 	orr.w	r2, r3, #2
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fe88 	bl	8001b28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b08      	cmp	r3, #8
 8001e20:	f040 80c3 	bne.w	8001faa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80bd 	beq.w	8001faa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e3e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a49      	ldr	r2, [pc, #292]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d101      	bne.n	8001e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001e4a:	4b49      	ldr	r3, [pc, #292]	; (8001f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e4c:	e001      	b.n	8001e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001e4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4944      	ldr	r1, [pc, #272]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e5a:	428b      	cmp	r3, r1
 8001e5c:	d101      	bne.n	8001e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001e5e:	4b44      	ldr	r3, [pc, #272]	; (8001f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e60:	e001      	b.n	8001e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001e62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e6a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f043 0204 	orr.w	r2, r3, #4
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fe4a 	bl	8001b28 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e94:	e089      	b.n	8001faa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d107      	bne.n	8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f8be 	bl	800202c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d107      	bne.n	8001eca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f8fd 	bl	80020c4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed0:	2b40      	cmp	r3, #64	; 0x40
 8001ed2:	d12f      	bne.n	8001f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d02a      	beq.n	8001f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001eec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a1e      	ldr	r2, [pc, #120]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d101      	bne.n	8001efc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001efa:	e001      	b.n	8001f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4919      	ldr	r1, [pc, #100]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f08:	428b      	cmp	r3, r1
 8001f0a:	d101      	bne.n	8001f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001f0c:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f0e:	e001      	b.n	8001f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001f10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f18:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	f043 0202 	orr.w	r2, r3, #2
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff fdfa 	bl	8001b28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d136      	bne.n	8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d031      	beq.n	8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f54:	e001      	b.n	8001f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001f56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4902      	ldr	r1, [pc, #8]	; (8001f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f62:	428b      	cmp	r3, r1
 8001f64:	d106      	bne.n	8001f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001f66:	4b02      	ldr	r3, [pc, #8]	; (8001f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f68:	e006      	b.n	8001f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001f6a:	bf00      	nop
 8001f6c:	40003800 	.word	0x40003800
 8001f70:	40003400 	.word	0x40003400
 8001f74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f7c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f8c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f043 0204 	orr.w	r2, r3, #4
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fdc0 	bl	8001b28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fa8:	e000      	b.n	8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001faa:	bf00      	nop
}
 8001fac:	bf00      	nop
 8001fae:	3720      	adds	r7, #32
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	1c99      	adds	r1, r3, #2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6251      	str	r1, [r2, #36]	; 0x24
 8001fda:	881a      	ldrh	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d113      	bne.n	8002022 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002008:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800200e:	b29b      	uxth	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d106      	bne.n	8002022 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff ffc9 	bl	8001fb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	1c99      	adds	r1, r3, #2
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6251      	str	r1, [r2, #36]	; 0x24
 800203e:	8819      	ldrh	r1, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a1d      	ldr	r2, [pc, #116]	; (80020bc <I2SEx_TxISR_I2SExt+0x90>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <I2SEx_TxISR_I2SExt+0x22>
 800204a:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <I2SEx_TxISR_I2SExt+0x94>)
 800204c:	e001      	b.n	8002052 <I2SEx_TxISR_I2SExt+0x26>
 800204e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002052:	460a      	mov	r2, r1
 8002054:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d121      	bne.n	80020b2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a12      	ldr	r2, [pc, #72]	; (80020bc <I2SEx_TxISR_I2SExt+0x90>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d101      	bne.n	800207c <I2SEx_TxISR_I2SExt+0x50>
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <I2SEx_TxISR_I2SExt+0x94>)
 800207a:	e001      	b.n	8002080 <I2SEx_TxISR_I2SExt+0x54>
 800207c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	490d      	ldr	r1, [pc, #52]	; (80020bc <I2SEx_TxISR_I2SExt+0x90>)
 8002088:	428b      	cmp	r3, r1
 800208a:	d101      	bne.n	8002090 <I2SEx_TxISR_I2SExt+0x64>
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <I2SEx_TxISR_I2SExt+0x94>)
 800208e:	e001      	b.n	8002094 <I2SEx_TxISR_I2SExt+0x68>
 8002090:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002094:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002098:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800209e:	b29b      	uxth	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d106      	bne.n	80020b2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff81 	bl	8001fb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40003800 	.word	0x40003800
 80020c0:	40003400 	.word	0x40003400

080020c4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68d8      	ldr	r0, [r3, #12]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	1c99      	adds	r1, r3, #2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	62d1      	str	r1, [r2, #44]	; 0x2c
 80020dc:	b282      	uxth	r2, r0
 80020de:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d113      	bne.n	8002120 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002106:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210c:	b29b      	uxth	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ff4a 	bl	8001fb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a20      	ldr	r2, [pc, #128]	; (80021b8 <I2SEx_RxISR_I2SExt+0x90>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d101      	bne.n	800213e <I2SEx_RxISR_I2SExt+0x16>
 800213a:	4b20      	ldr	r3, [pc, #128]	; (80021bc <I2SEx_RxISR_I2SExt+0x94>)
 800213c:	e001      	b.n	8002142 <I2SEx_RxISR_I2SExt+0x1a>
 800213e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002142:	68d8      	ldr	r0, [r3, #12]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002148:	1c99      	adds	r1, r3, #2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800214e:	b282      	uxth	r2, r0
 8002150:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002164:	b29b      	uxth	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d121      	bne.n	80021ae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <I2SEx_RxISR_I2SExt+0x90>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d101      	bne.n	8002178 <I2SEx_RxISR_I2SExt+0x50>
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <I2SEx_RxISR_I2SExt+0x94>)
 8002176:	e001      	b.n	800217c <I2SEx_RxISR_I2SExt+0x54>
 8002178:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	490d      	ldr	r1, [pc, #52]	; (80021b8 <I2SEx_RxISR_I2SExt+0x90>)
 8002184:	428b      	cmp	r3, r1
 8002186:	d101      	bne.n	800218c <I2SEx_RxISR_I2SExt+0x64>
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <I2SEx_RxISR_I2SExt+0x94>)
 800218a:	e001      	b.n	8002190 <I2SEx_RxISR_I2SExt+0x68>
 800218c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002190:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002194:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219a:	b29b      	uxth	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d106      	bne.n	80021ae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ff03 	bl	8001fb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40003800 	.word	0x40003800
 80021bc:	40003400 	.word	0x40003400

080021c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c2:	b08f      	sub	sp, #60	; 0x3c
 80021c4:	af0a      	add	r7, sp, #40	; 0x28
 80021c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e10f      	b.n	80023f2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d106      	bne.n	80021f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f005 fa99 	bl	8007724 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2203      	movs	r2, #3
 80021f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d102      	bne.n	800220c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f002 f8ba 	bl	800438a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	687e      	ldr	r6, [r7, #4]
 800221e:	466d      	mov	r5, sp
 8002220:	f106 0410 	add.w	r4, r6, #16
 8002224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002230:	e885 0003 	stmia.w	r5, {r0, r1}
 8002234:	1d33      	adds	r3, r6, #4
 8002236:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002238:	6838      	ldr	r0, [r7, #0]
 800223a:	f001 ff92 	bl	8004162 <USB_CoreInit>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0d0      	b.n	80023f2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f002 f8a8 	bl	80043ac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
 8002260:	e04a      	b.n	80022f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	1a9b      	subs	r3, r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	333d      	adds	r3, #61	; 0x3d
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	333c      	adds	r3, #60	; 0x3c
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	b298      	uxth	r0, r3
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	3342      	adds	r3, #66	; 0x42
 800229e:	4602      	mov	r2, r0
 80022a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	1a9b      	subs	r3, r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	333f      	adds	r3, #63	; 0x3f
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	3344      	adds	r3, #68	; 0x44
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	3348      	adds	r3, #72	; 0x48
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	3350      	adds	r3, #80	; 0x50
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	3301      	adds	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d3af      	bcc.n	8002262 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002302:	2300      	movs	r3, #0
 8002304:	73fb      	strb	r3, [r7, #15]
 8002306:	e044      	b.n	8002392 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	3301      	adds	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
 8002392:	7bfa      	ldrb	r2, [r7, #15]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	429a      	cmp	r2, r3
 800239a:	d3b5      	bcc.n	8002308 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	687e      	ldr	r6, [r7, #4]
 80023a4:	466d      	mov	r5, sp
 80023a6:	f106 0410 	add.w	r4, r6, #16
 80023aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80023ba:	1d33      	adds	r3, r6, #4
 80023bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023be:	6838      	ldr	r0, [r7, #0]
 80023c0:	f002 f840 	bl	8004444 <USB_DevInit>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d005      	beq.n	80023d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2202      	movs	r2, #2
 80023ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00d      	b.n	80023f2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f003 f8bc 	bl	8005568 <USB_DevDisconnect>

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_PCD_Start+0x1c>
 8002412:	2302      	movs	r3, #2
 8002414:	e020      	b.n	8002458 <HAL_PCD_Start+0x5e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	2b01      	cmp	r3, #1
 8002424:	d109      	bne.n	800243a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800242a:	2b01      	cmp	r3, #1
 800242c:	d005      	beq.n	800243a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002432:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f001 ff92 	bl	8004368 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f003 f86c 	bl	8005526 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b08d      	sub	sp, #52	; 0x34
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f003 f92a 	bl	80056d0 <USB_GetMode>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	f040 839d 	bne.w	8002bbe <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f003 f88e 	bl	80055aa <USB_ReadInterrupts>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 8393 	beq.w	8002bbc <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f003 f885 	bl	80055aa <USB_ReadInterrupts>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d107      	bne.n	80024ba <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695a      	ldr	r2, [r3, #20]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f002 0202 	and.w	r2, r2, #2
 80024b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f003 f873 	bl	80055aa <USB_ReadInterrupts>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d161      	bne.n	8002592 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699a      	ldr	r2, [r3, #24]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0210 	bic.w	r2, r2, #16
 80024dc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	f003 020f 	and.w	r2, r3, #15
 80024ea:	4613      	mov	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	3304      	adds	r3, #4
 80024fc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	0c5b      	lsrs	r3, r3, #17
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	2b02      	cmp	r3, #2
 8002508:	d124      	bne.n	8002554 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002510:	4013      	ands	r3, r2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d035      	beq.n	8002582 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002524:	b29b      	uxth	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	6a38      	ldr	r0, [r7, #32]
 800252a:	f002 feaa 	bl	8005282 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800253a:	441a      	add	r2, r3
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	699a      	ldr	r2, [r3, #24]
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800254c:	441a      	add	r2, r3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	619a      	str	r2, [r3, #24]
 8002552:	e016      	b.n	8002582 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	0c5b      	lsrs	r3, r3, #17
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	2b06      	cmp	r3, #6
 800255e:	d110      	bne.n	8002582 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002566:	2208      	movs	r2, #8
 8002568:	4619      	mov	r1, r3
 800256a:	6a38      	ldr	r0, [r7, #32]
 800256c:	f002 fe89 	bl	8005282 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	699a      	ldr	r2, [r3, #24]
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800257c:	441a      	add	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699a      	ldr	r2, [r3, #24]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0210 	orr.w	r2, r2, #16
 8002590:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f003 f807 	bl	80055aa <USB_ReadInterrupts>
 800259c:	4603      	mov	r3, r0
 800259e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025a6:	d16e      	bne.n	8002686 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f003 f80d 	bl	80055d0 <USB_ReadDevAllOutEpInterrupt>
 80025b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025b8:	e062      	b.n	8002680 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d057      	beq.n	8002674 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f003 f832 	bl	8005638 <USB_ReadDevOutEPInterrupt>
 80025d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00c      	beq.n	80025fa <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ec:	461a      	mov	r2, r3
 80025ee:	2301      	movs	r3, #1
 80025f0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fdb1 	bl	800315c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00c      	beq.n	800261e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	4413      	add	r3, r2
 800260c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002610:	461a      	mov	r2, r3
 8002612:	2308      	movs	r3, #8
 8002614:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002616:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 feab 	bl	8003374 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	4413      	add	r3, r2
 8002630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002634:	461a      	mov	r2, r3
 8002636:	2310      	movs	r3, #16
 8002638:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	015a      	lsls	r2, r3, #5
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	4413      	add	r3, r2
 800264c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002650:	461a      	mov	r2, r3
 8002652:	2320      	movs	r3, #32
 8002654:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d009      	beq.n	8002674 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	4413      	add	r3, r2
 8002668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800266c:	461a      	mov	r2, r3
 800266e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002672:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	3301      	adds	r3, #1
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267c:	085b      	lsrs	r3, r3, #1
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	2b00      	cmp	r3, #0
 8002684:	d199      	bne.n	80025ba <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f002 ff8d 	bl	80055aa <USB_ReadInterrupts>
 8002690:	4603      	mov	r3, r0
 8002692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002696:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800269a:	f040 80c0 	bne.w	800281e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f002 ffae 	bl	8005604 <USB_ReadDevAllInEpInterrupt>
 80026a8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80026ae:	e0b2      	b.n	8002816 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80a7 	beq.w	800280a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f002 ffd4 	bl	8005674 <USB_ReadDevInEPInterrupt>
 80026cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d057      	beq.n	8002788 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	2201      	movs	r2, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69f9      	ldr	r1, [r7, #28]
 80026f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026f8:	4013      	ands	r3, r2
 80026fa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	4413      	add	r3, r2
 8002704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002708:	461a      	mov	r2, r3
 800270a:	2301      	movs	r3, #1
 800270c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d132      	bne.n	800277c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	3348      	adds	r3, #72	; 0x48
 8002726:	6819      	ldr	r1, [r3, #0]
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4403      	add	r3, r0
 8002736:	3344      	adds	r3, #68	; 0x44
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4419      	add	r1, r3
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4403      	add	r3, r0
 800274a:	3348      	adds	r3, #72	; 0x48
 800274c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	2b00      	cmp	r3, #0
 8002752:	d113      	bne.n	800277c <HAL_PCD_IRQHandler+0x31c>
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	3350      	adds	r3, #80	; 0x50
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d108      	bne.n	800277c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002774:	461a      	mov	r2, r3
 8002776:	2101      	movs	r1, #1
 8002778:	f002 ffdc 	bl	8005734 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	b2db      	uxtb	r3, r3
 8002780:	4619      	mov	r1, r3
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f005 f85d 	bl	8007842 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d008      	beq.n	80027a4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	4413      	add	r3, r2
 800279a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800279e:	461a      	mov	r2, r3
 80027a0:	2308      	movs	r3, #8
 80027a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ba:	461a      	mov	r2, r3
 80027bc:	2310      	movs	r3, #16
 80027be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d008      	beq.n	80027dc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d6:	461a      	mov	r2, r3
 80027d8:	2340      	movs	r3, #64	; 0x40
 80027da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027f2:	461a      	mov	r2, r3
 80027f4:	2302      	movs	r3, #2
 80027f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002802:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 fc1b 	bl	8003040 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	3301      	adds	r3, #1
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	085b      	lsrs	r3, r3, #1
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002818:	2b00      	cmp	r3, #0
 800281a:	f47f af49 	bne.w	80026b0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f002 fec1 	bl	80055aa <USB_ReadInterrupts>
 8002828:	4603      	mov	r3, r0
 800282a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800282e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002832:	d122      	bne.n	800287a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002842:	f023 0301 	bic.w	r3, r3, #1
 8002846:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800284e:	2b01      	cmp	r3, #1
 8002850:	d108      	bne.n	8002864 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800285a:	2100      	movs	r1, #0
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 fe27 	bl	80034b0 <HAL_PCDEx_LPM_Callback>
 8002862:	e002      	b.n	800286a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f005 f863 	bl	8007930 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002878:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f002 fe93 	bl	80055aa <USB_ReadInterrupts>
 8002884:	4603      	mov	r3, r0
 8002886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800288a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800288e:	d112      	bne.n	80028b6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d102      	bne.n	80028a6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f005 f81f 	bl	80078e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028b4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f002 fe75 	bl	80055aa <USB_ReadInterrupts>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ca:	f040 80c7 	bne.w	8002a5c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	69fa      	ldr	r2, [r7, #28]
 80028d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2110      	movs	r1, #16
 80028e8:	4618      	mov	r0, r3
 80028ea:	f001 ff0f 	bl	800470c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f2:	e056      	b.n	80029a2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002900:	461a      	mov	r2, r3
 8002902:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002906:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	4413      	add	r3, r2
 8002910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002918:	0151      	lsls	r1, r2, #5
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	440a      	add	r2, r1
 800291e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002922:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002926:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292a:	015a      	lsls	r2, r3, #5
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	4413      	add	r3, r2
 8002930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002938:	0151      	lsls	r1, r2, #5
 800293a:	69fa      	ldr	r2, [r7, #28]
 800293c:	440a      	add	r2, r1
 800293e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002942:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002946:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	4413      	add	r3, r2
 8002950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002954:	461a      	mov	r2, r3
 8002956:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800295a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	4413      	add	r3, r2
 8002964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800296c:	0151      	lsls	r1, r2, #5
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	440a      	add	r2, r1
 8002972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002976:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800297a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	4413      	add	r3, r2
 8002984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800298c:	0151      	lsls	r1, r2, #5
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	440a      	add	r2, r1
 8002992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002996:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800299a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800299c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299e:	3301      	adds	r3, #1
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d3a3      	bcc.n	80028f4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	69fa      	ldr	r2, [r7, #28]
 80029b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ba:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80029be:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d016      	beq.n	80029f6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029d2:	69fa      	ldr	r2, [r7, #28]
 80029d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029d8:	f043 030b 	orr.w	r3, r3, #11
 80029dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e8:	69fa      	ldr	r2, [r7, #28]
 80029ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ee:	f043 030b 	orr.w	r3, r3, #11
 80029f2:	6453      	str	r3, [r2, #68]	; 0x44
 80029f4:	e015      	b.n	8002a22 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a08:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a0c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a1c:	f043 030b 	orr.w	r3, r3, #11
 8002a20:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a30:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a34:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a46:	461a      	mov	r2, r3
 8002a48:	f002 fe74 	bl	8005734 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f002 fda2 	bl	80055aa <USB_ReadInterrupts>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a70:	d124      	bne.n	8002abc <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f002 fe38 	bl	80056ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f001 fea0 	bl	80047c6 <USB_GetDevSpeed>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461a      	mov	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681c      	ldr	r4, [r3, #0]
 8002a92:	f001 f97d 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8002a96:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f001 fbbf 	bl	8004224 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f004 fef3 	bl	8007892 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f002 fd72 	bl	80055aa <USB_ReadInterrupts>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d10a      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f004 fed0 	bl	8007876 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f002 0208 	and.w	r2, r2, #8
 8002ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f002 fd5d 	bl	80055aa <USB_ReadInterrupts>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002afa:	d10f      	bne.n	8002b1c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	4619      	mov	r1, r3
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f004 ff32 	bl	8007970 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695a      	ldr	r2, [r3, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f002 fd42 	bl	80055aa <USB_ReadInterrupts>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b30:	d10f      	bne.n	8002b52 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f004 ff05 	bl	800794c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f002 fd27 	bl	80055aa <USB_ReadInterrupts>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b66:	d10a      	bne.n	8002b7e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f004 ff13 	bl	8007994 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695a      	ldr	r2, [r3, #20]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f002 fd11 	bl	80055aa <USB_ReadInterrupts>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d115      	bne.n	8002bbe <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f004 ff03 	bl	80079b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6859      	ldr	r1, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	e000      	b.n	8002bbe <HAL_PCD_IRQHandler+0x75e>
      return;
 8002bbc:	bf00      	nop
    }
  }
}
 8002bbe:	3734      	adds	r7, #52	; 0x34
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd90      	pop	{r4, r7, pc}

08002bc4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_PCD_SetAddress+0x1a>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e013      	b.n	8002c06 <HAL_PCD_SetAddress+0x42>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f002 fc6f 	bl	80054da <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	4608      	mov	r0, r1
 8002c18:	4611      	mov	r1, r2
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	70fb      	strb	r3, [r7, #3]
 8002c20:	460b      	mov	r3, r1
 8002c22:	803b      	strh	r3, [r7, #0]
 8002c24:	4613      	mov	r3, r2
 8002c26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	da0f      	bge.n	8002c54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	f003 020f 	and.w	r2, r3, #15
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	3338      	adds	r3, #56	; 0x38
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	3304      	adds	r3, #4
 8002c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	705a      	strb	r2, [r3, #1]
 8002c52:	e00f      	b.n	8002c74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	f003 020f 	and.w	r2, r3, #15
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	4413      	add	r3, r2
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c80:	883a      	ldrh	r2, [r7, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	78ba      	ldrb	r2, [r7, #2]
 8002c8a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	785b      	ldrb	r3, [r3, #1]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d004      	beq.n	8002c9e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c9e:	78bb      	ldrb	r3, [r7, #2]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d102      	bne.n	8002caa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_PCD_EP_Open+0xaa>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e00e      	b.n	8002cd6 <HAL_PCD_EP_Open+0xc8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68f9      	ldr	r1, [r7, #12]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 fda2 	bl	8004810 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002cd4:	7afb      	ldrb	r3, [r7, #11]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	da0f      	bge.n	8002d12 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	f003 020f 	and.w	r2, r3, #15
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	1a9b      	subs	r3, r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	3338      	adds	r3, #56	; 0x38
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	3304      	adds	r3, #4
 8002d08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	705a      	strb	r2, [r3, #1]
 8002d10:	e00f      	b.n	8002d32 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d12:	78fb      	ldrb	r3, [r7, #3]
 8002d14:	f003 020f 	and.w	r2, r3, #15
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	4413      	add	r3, r2
 8002d28:	3304      	adds	r3, #4
 8002d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d32:	78fb      	ldrb	r3, [r7, #3]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_PCD_EP_Close+0x6e>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e00e      	b.n	8002d6a <HAL_PCD_EP_Close+0x8c>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68f9      	ldr	r1, [r7, #12]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 fde0 	bl	8004920 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d82:	7afb      	ldrb	r3, [r7, #11]
 8002d84:	f003 020f 	and.w	r2, r3, #15
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4413      	add	r3, r2
 8002d98:	3304      	adds	r3, #4
 8002d9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2200      	movs	r2, #0
 8002dac:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2200      	movs	r2, #0
 8002db2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002db4:	7afb      	ldrb	r3, [r7, #11]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d102      	bne.n	8002dce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dce:	7afb      	ldrb	r3, [r7, #11]
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d109      	bne.n	8002dec <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	6979      	ldr	r1, [r7, #20]
 8002de6:	f002 f8bb 	bl	8004f60 <USB_EP0StartXfer>
 8002dea:	e008      	b.n	8002dfe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	461a      	mov	r2, r3
 8002df8:	6979      	ldr	r1, [r7, #20]
 8002dfa:	f001 fe6d 	bl	8004ad8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	f003 020f 	and.w	r2, r3, #15
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e2a:	681b      	ldr	r3, [r3, #0]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	460b      	mov	r3, r1
 8002e46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e48:	7afb      	ldrb	r3, [r7, #11]
 8002e4a:	f003 020f 	and.w	r2, r3, #15
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	3338      	adds	r3, #56	; 0x38
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2201      	movs	r2, #1
 8002e76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e78:	7afb      	ldrb	r3, [r7, #11]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d102      	bne.n	8002e92 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e92:	7afb      	ldrb	r3, [r7, #11]
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	6979      	ldr	r1, [r7, #20]
 8002eaa:	f002 f859 	bl	8004f60 <USB_EP0StartXfer>
 8002eae:	e008      	b.n	8002ec2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	6979      	ldr	r1, [r7, #20]
 8002ebe:	f001 fe0b 	bl	8004ad8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3718      	adds	r7, #24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	f003 020f 	and.w	r2, r3, #15
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d901      	bls.n	8002eea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e050      	b.n	8002f8c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	da0f      	bge.n	8002f12 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	f003 020f 	and.w	r2, r3, #15
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	3338      	adds	r3, #56	; 0x38
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	3304      	adds	r3, #4
 8002f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	705a      	strb	r2, [r3, #1]
 8002f10:	e00d      	b.n	8002f2e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4413      	add	r3, r2
 8002f24:	3304      	adds	r3, #4
 8002f26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_PCD_EP_SetStall+0x82>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e01e      	b.n	8002f8c <HAL_PCD_EP_SetStall+0xc0>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68f9      	ldr	r1, [r7, #12]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f002 f9e8 	bl	8005332 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10a      	bne.n	8002f82 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	b2d9      	uxtb	r1, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f002 fbd9 	bl	8005734 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	f003 020f 	and.w	r2, r3, #15
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d901      	bls.n	8002fb2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e042      	b.n	8003038 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	da0f      	bge.n	8002fda <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	f003 020f 	and.w	r2, r3, #15
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	3338      	adds	r3, #56	; 0x38
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	3304      	adds	r3, #4
 8002fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	705a      	strb	r2, [r3, #1]
 8002fd8:	e00f      	b.n	8002ffa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	f003 020f 	and.w	r2, r3, #15
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	4413      	add	r3, r2
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	b2da      	uxtb	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_PCD_EP_ClrStall+0x86>
 8003016:	2302      	movs	r3, #2
 8003018:	e00e      	b.n	8003038 <HAL_PCD_EP_ClrStall+0xa4>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68f9      	ldr	r1, [r7, #12]
 8003028:	4618      	mov	r0, r3
 800302a:	f002 f9f0 	bl	800540e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08a      	sub	sp, #40	; 0x28
 8003044:	af02      	add	r7, sp, #8
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	3338      	adds	r3, #56	; 0x38
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4413      	add	r3, r2
 8003064:	3304      	adds	r3, #4
 8003066:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	699a      	ldr	r2, [r3, #24]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	429a      	cmp	r2, r3
 8003072:	d901      	bls.n	8003078 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e06c      	b.n	8003152 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	429a      	cmp	r2, r3
 800308c:	d902      	bls.n	8003094 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	3303      	adds	r3, #3
 8003098:	089b      	lsrs	r3, r3, #2
 800309a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800309c:	e02b      	b.n	80030f6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	69fa      	ldr	r2, [r7, #28]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d902      	bls.n	80030ba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3303      	adds	r3, #3
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	68d9      	ldr	r1, [r3, #12]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	4603      	mov	r3, r0
 80030d8:	6978      	ldr	r0, [r7, #20]
 80030da:	f002 f894 	bl	8005206 <USB_WritePacket>

    ep->xfer_buff  += len;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	441a      	add	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	699a      	ldr	r2, [r3, #24]
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	441a      	add	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	429a      	cmp	r2, r3
 800310a:	d809      	bhi.n	8003120 <PCD_WriteEmptyTxFifo+0xe0>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	699a      	ldr	r2, [r3, #24]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003114:	429a      	cmp	r2, r3
 8003116:	d203      	bcs.n	8003120 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1be      	bne.n	800309e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	429a      	cmp	r2, r3
 800312a:	d811      	bhi.n	8003150 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	2201      	movs	r2, #1
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	43db      	mvns	r3, r3
 8003146:	6939      	ldr	r1, [r7, #16]
 8003148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800314c:	4013      	ands	r3, r2
 800314e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3720      	adds	r7, #32
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	333c      	adds	r3, #60	; 0x3c
 8003174:	3304      	adds	r3, #4
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	2b01      	cmp	r3, #1
 8003190:	f040 80a0 	bne.w	80032d4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d015      	beq.n	80031ca <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4a72      	ldr	r2, [pc, #456]	; (800336c <PCD_EP_OutXfrComplete_int+0x210>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	f240 80dd 	bls.w	8003362 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80d7 	beq.w	8003362 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c0:	461a      	mov	r2, r3
 80031c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031c6:	6093      	str	r3, [r2, #8]
 80031c8:	e0cb      	b.n	8003362 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d009      	beq.n	80031e8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e0:	461a      	mov	r2, r3
 80031e2:	2320      	movs	r3, #32
 80031e4:	6093      	str	r3, [r2, #8]
 80031e6:	e0bc      	b.n	8003362 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f040 80b7 	bne.w	8003362 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4a5d      	ldr	r2, [pc, #372]	; (800336c <PCD_EP_OutXfrComplete_int+0x210>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d90f      	bls.n	800321c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003212:	461a      	mov	r2, r3
 8003214:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003218:	6093      	str	r3, [r2, #8]
 800321a:	e0a2      	b.n	8003362 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	4613      	mov	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800322e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	0159      	lsls	r1, r3, #5
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	440b      	add	r3, r1
 8003238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003242:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4403      	add	r3, r0
 8003252:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003256:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800326a:	6819      	ldr	r1, [r3, #0]
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4403      	add	r3, r0
 800327a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4419      	add	r1, r3
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4403      	add	r3, r0
 8003290:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003294:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d114      	bne.n	80032c6 <PCD_EP_OutXfrComplete_int+0x16a>
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d108      	bne.n	80032c6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032be:	461a      	mov	r2, r3
 80032c0:	2101      	movs	r1, #1
 80032c2:	f002 fa37 	bl	8005734 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	4619      	mov	r1, r3
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f004 fa9d 	bl	800780c <HAL_PCD_DataOutStageCallback>
 80032d2:	e046      	b.n	8003362 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4a26      	ldr	r2, [pc, #152]	; (8003370 <PCD_EP_OutXfrComplete_int+0x214>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d124      	bne.n	8003326 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f2:	461a      	mov	r2, r3
 80032f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f8:	6093      	str	r3, [r2, #8]
 80032fa:	e032      	b.n	8003362 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b00      	cmp	r3, #0
 8003304:	d008      	beq.n	8003318 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003312:	461a      	mov	r2, r3
 8003314:	2320      	movs	r3, #32
 8003316:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	4619      	mov	r1, r3
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f004 fa74 	bl	800780c <HAL_PCD_DataOutStageCallback>
 8003324:	e01d      	b.n	8003362 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d114      	bne.n	8003356 <PCD_EP_OutXfrComplete_int+0x1fa>
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d108      	bne.n	8003356 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800334e:	461a      	mov	r2, r3
 8003350:	2100      	movs	r1, #0
 8003352:	f002 f9ef 	bl	8005734 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	4619      	mov	r1, r3
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f004 fa55 	bl	800780c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	4f54300a 	.word	0x4f54300a
 8003370:	4f54310a 	.word	0x4f54310a

08003374 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	333c      	adds	r3, #60	; 0x3c
 800338c:	3304      	adds	r3, #4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a15      	ldr	r2, [pc, #84]	; (80033fc <PCD_EP_OutSetupPacket_int+0x88>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d90e      	bls.n	80033c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d009      	beq.n	80033c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c0:	461a      	mov	r2, r3
 80033c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f004 fa0d 	bl	80077e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <PCD_EP_OutSetupPacket_int+0x88>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d90c      	bls.n	80033f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d108      	bne.n	80033f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033e8:	461a      	mov	r2, r3
 80033ea:	2101      	movs	r1, #1
 80033ec:	f002 f9a2 	bl	8005734 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	4f54300a 	.word	0x4f54300a

08003400 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	70fb      	strb	r3, [r7, #3]
 800340c:	4613      	mov	r3, r2
 800340e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d107      	bne.n	800342e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800341e:	883b      	ldrh	r3, [r7, #0]
 8003420:	0419      	lsls	r1, r3, #16
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	430a      	orrs	r2, r1
 800342a:	629a      	str	r2, [r3, #40]	; 0x28
 800342c:	e028      	b.n	8003480 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	0c1b      	lsrs	r3, r3, #16
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	4413      	add	r3, r2
 800343a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800343c:	2300      	movs	r3, #0
 800343e:	73fb      	strb	r3, [r7, #15]
 8003440:	e00d      	b.n	800345e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	3340      	adds	r3, #64	; 0x40
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	0c1b      	lsrs	r3, r3, #16
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	4413      	add	r3, r2
 8003456:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	3301      	adds	r3, #1
 800345c:	73fb      	strb	r3, [r7, #15]
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	3b01      	subs	r3, #1
 8003464:	429a      	cmp	r2, r3
 8003466:	d3ec      	bcc.n	8003442 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003468:	883b      	ldrh	r3, [r7, #0]
 800346a:	0418      	lsls	r0, r3, #16
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6819      	ldr	r1, [r3, #0]
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	3b01      	subs	r3, #1
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	4302      	orrs	r2, r0
 8003478:	3340      	adds	r3, #64	; 0x40
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	460b      	mov	r3, r1
 8003498:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	887a      	ldrh	r2, [r7, #2]
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e267      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d075      	beq.n	80035d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034e6:	4b88      	ldr	r3, [pc, #544]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d00c      	beq.n	800350c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f2:	4b85      	ldr	r3, [pc, #532]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d112      	bne.n	8003524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034fe:	4b82      	ldr	r3, [pc, #520]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800350a:	d10b      	bne.n	8003524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350c:	4b7e      	ldr	r3, [pc, #504]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d05b      	beq.n	80035d0 <HAL_RCC_OscConfig+0x108>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d157      	bne.n	80035d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e242      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352c:	d106      	bne.n	800353c <HAL_RCC_OscConfig+0x74>
 800352e:	4b76      	ldr	r3, [pc, #472]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a75      	ldr	r2, [pc, #468]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 8003534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e01d      	b.n	8003578 <HAL_RCC_OscConfig+0xb0>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003544:	d10c      	bne.n	8003560 <HAL_RCC_OscConfig+0x98>
 8003546:	4b70      	ldr	r3, [pc, #448]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a6f      	ldr	r2, [pc, #444]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 800354c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	4b6d      	ldr	r3, [pc, #436]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a6c      	ldr	r2, [pc, #432]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e00b      	b.n	8003578 <HAL_RCC_OscConfig+0xb0>
 8003560:	4b69      	ldr	r3, [pc, #420]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a68      	ldr	r2, [pc, #416]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 8003566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	4b66      	ldr	r3, [pc, #408]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a65      	ldr	r2, [pc, #404]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 8003572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d013      	beq.n	80035a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fd fd10 	bl	8000fa4 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003588:	f7fd fd0c 	bl	8000fa4 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	; 0x64
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e207      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	4b5b      	ldr	r3, [pc, #364]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0xc0>
 80035a6:	e014      	b.n	80035d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7fd fcfc 	bl	8000fa4 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fd fcf8 	bl	8000fa4 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	; 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e1f3      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c2:	4b51      	ldr	r3, [pc, #324]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0xe8>
 80035ce:	e000      	b.n	80035d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d063      	beq.n	80036a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035de:	4b4a      	ldr	r3, [pc, #296]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00b      	beq.n	8003602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ea:	4b47      	ldr	r3, [pc, #284]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d11c      	bne.n	8003630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035f6:	4b44      	ldr	r3, [pc, #272]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d116      	bne.n	8003630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003602:	4b41      	ldr	r3, [pc, #260]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <HAL_RCC_OscConfig+0x152>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d001      	beq.n	800361a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e1c7      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361a:	4b3b      	ldr	r3, [pc, #236]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4937      	ldr	r1, [pc, #220]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362e:	e03a      	b.n	80036a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d020      	beq.n	800367a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003638:	4b34      	ldr	r3, [pc, #208]	; (800370c <HAL_RCC_OscConfig+0x244>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363e:	f7fd fcb1 	bl	8000fa4 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003646:	f7fd fcad 	bl	8000fa4 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e1a8      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003658:	4b2b      	ldr	r3, [pc, #172]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003664:	4b28      	ldr	r3, [pc, #160]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4925      	ldr	r1, [pc, #148]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 8003674:	4313      	orrs	r3, r2
 8003676:	600b      	str	r3, [r1, #0]
 8003678:	e015      	b.n	80036a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800367a:	4b24      	ldr	r3, [pc, #144]	; (800370c <HAL_RCC_OscConfig+0x244>)
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fd fc90 	bl	8000fa4 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003688:	f7fd fc8c 	bl	8000fa4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e187      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369a:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d036      	beq.n	8003720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d016      	beq.n	80036e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ba:	4b15      	ldr	r3, [pc, #84]	; (8003710 <HAL_RCC_OscConfig+0x248>)
 80036bc:	2201      	movs	r2, #1
 80036be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7fd fc70 	bl	8000fa4 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c8:	f7fd fc6c 	bl	8000fa4 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e167      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_RCC_OscConfig+0x240>)
 80036dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0x200>
 80036e6:	e01b      	b.n	8003720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e8:	4b09      	ldr	r3, [pc, #36]	; (8003710 <HAL_RCC_OscConfig+0x248>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ee:	f7fd fc59 	bl	8000fa4 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f4:	e00e      	b.n	8003714 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f6:	f7fd fc55 	bl	8000fa4 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d907      	bls.n	8003714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e150      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
 8003708:	40023800 	.word	0x40023800
 800370c:	42470000 	.word	0x42470000
 8003710:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003714:	4b88      	ldr	r3, [pc, #544]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 8003716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1ea      	bne.n	80036f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8097 	beq.w	800385c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800372e:	2300      	movs	r3, #0
 8003730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003732:	4b81      	ldr	r3, [pc, #516]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10f      	bne.n	800375e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	4b7d      	ldr	r3, [pc, #500]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	4a7c      	ldr	r2, [pc, #496]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 8003748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374c:	6413      	str	r3, [r2, #64]	; 0x40
 800374e:	4b7a      	ldr	r3, [pc, #488]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003756:	60bb      	str	r3, [r7, #8]
 8003758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375a:	2301      	movs	r3, #1
 800375c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375e:	4b77      	ldr	r3, [pc, #476]	; (800393c <HAL_RCC_OscConfig+0x474>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003766:	2b00      	cmp	r3, #0
 8003768:	d118      	bne.n	800379c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800376a:	4b74      	ldr	r3, [pc, #464]	; (800393c <HAL_RCC_OscConfig+0x474>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a73      	ldr	r2, [pc, #460]	; (800393c <HAL_RCC_OscConfig+0x474>)
 8003770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003776:	f7fd fc15 	bl	8000fa4 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377e:	f7fd fc11 	bl	8000fa4 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e10c      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	4b6a      	ldr	r3, [pc, #424]	; (800393c <HAL_RCC_OscConfig+0x474>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0f0      	beq.n	800377e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d106      	bne.n	80037b2 <HAL_RCC_OscConfig+0x2ea>
 80037a4:	4b64      	ldr	r3, [pc, #400]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a8:	4a63      	ldr	r2, [pc, #396]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	6713      	str	r3, [r2, #112]	; 0x70
 80037b0:	e01c      	b.n	80037ec <HAL_RCC_OscConfig+0x324>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x30c>
 80037ba:	4b5f      	ldr	r3, [pc, #380]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 80037bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037be:	4a5e      	ldr	r2, [pc, #376]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 80037c0:	f043 0304 	orr.w	r3, r3, #4
 80037c4:	6713      	str	r3, [r2, #112]	; 0x70
 80037c6:	4b5c      	ldr	r3, [pc, #368]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	4a5b      	ldr	r2, [pc, #364]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6713      	str	r3, [r2, #112]	; 0x70
 80037d2:	e00b      	b.n	80037ec <HAL_RCC_OscConfig+0x324>
 80037d4:	4b58      	ldr	r3, [pc, #352]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d8:	4a57      	ldr	r2, [pc, #348]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 80037da:	f023 0301 	bic.w	r3, r3, #1
 80037de:	6713      	str	r3, [r2, #112]	; 0x70
 80037e0:	4b55      	ldr	r3, [pc, #340]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 80037e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e4:	4a54      	ldr	r2, [pc, #336]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 80037e6:	f023 0304 	bic.w	r3, r3, #4
 80037ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d015      	beq.n	8003820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f4:	f7fd fbd6 	bl	8000fa4 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fa:	e00a      	b.n	8003812 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037fc:	f7fd fbd2 	bl	8000fa4 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f241 3288 	movw	r2, #5000	; 0x1388
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e0cb      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003812:	4b49      	ldr	r3, [pc, #292]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0ee      	beq.n	80037fc <HAL_RCC_OscConfig+0x334>
 800381e:	e014      	b.n	800384a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003820:	f7fd fbc0 	bl	8000fa4 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003826:	e00a      	b.n	800383e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003828:	f7fd fbbc 	bl	8000fa4 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	; 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e0b5      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383e:	4b3e      	ldr	r3, [pc, #248]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1ee      	bne.n	8003828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800384a:	7dfb      	ldrb	r3, [r7, #23]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d105      	bne.n	800385c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003850:	4b39      	ldr	r3, [pc, #228]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	4a38      	ldr	r2, [pc, #224]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 8003856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800385a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80a1 	beq.w	80039a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003866:	4b34      	ldr	r3, [pc, #208]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 030c 	and.w	r3, r3, #12
 800386e:	2b08      	cmp	r3, #8
 8003870:	d05c      	beq.n	800392c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d141      	bne.n	80038fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387a:	4b31      	ldr	r3, [pc, #196]	; (8003940 <HAL_RCC_OscConfig+0x478>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fd fb90 	bl	8000fa4 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003888:	f7fd fb8c 	bl	8000fa4 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e087      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389a:	4b27      	ldr	r3, [pc, #156]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69da      	ldr	r2, [r3, #28]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	019b      	lsls	r3, r3, #6
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	085b      	lsrs	r3, r3, #1
 80038be:	3b01      	subs	r3, #1
 80038c0:	041b      	lsls	r3, r3, #16
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	061b      	lsls	r3, r3, #24
 80038ca:	491b      	ldr	r1, [pc, #108]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d0:	4b1b      	ldr	r3, [pc, #108]	; (8003940 <HAL_RCC_OscConfig+0x478>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d6:	f7fd fb65 	bl	8000fa4 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038de:	f7fd fb61 	bl	8000fa4 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e05c      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x416>
 80038fc:	e054      	b.n	80039a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fe:	4b10      	ldr	r3, [pc, #64]	; (8003940 <HAL_RCC_OscConfig+0x478>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003904:	f7fd fb4e 	bl	8000fa4 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390c:	f7fd fb4a 	bl	8000fa4 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e045      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391e:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_RCC_OscConfig+0x470>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x444>
 800392a:	e03d      	b.n	80039a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d107      	bne.n	8003944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e038      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
 8003938:	40023800 	.word	0x40023800
 800393c:	40007000 	.word	0x40007000
 8003940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003944:	4b1b      	ldr	r3, [pc, #108]	; (80039b4 <HAL_RCC_OscConfig+0x4ec>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d028      	beq.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395c:	429a      	cmp	r2, r3
 800395e:	d121      	bne.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396a:	429a      	cmp	r2, r3
 800396c:	d11a      	bne.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003974:	4013      	ands	r3, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800397a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800397c:	4293      	cmp	r3, r2
 800397e:	d111      	bne.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	085b      	lsrs	r3, r3, #1
 800398c:	3b01      	subs	r3, #1
 800398e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d107      	bne.n	80039a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40023800 	.word	0x40023800

080039b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0cc      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039cc:	4b68      	ldr	r3, [pc, #416]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d90c      	bls.n	80039f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b65      	ldr	r3, [pc, #404]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b63      	ldr	r3, [pc, #396]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0b8      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d020      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a0c:	4b59      	ldr	r3, [pc, #356]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	4a58      	ldr	r2, [pc, #352]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a24:	4b53      	ldr	r3, [pc, #332]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4a52      	ldr	r2, [pc, #328]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a30:	4b50      	ldr	r3, [pc, #320]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	494d      	ldr	r1, [pc, #308]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d044      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d107      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a56:	4b47      	ldr	r3, [pc, #284]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d119      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e07f      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d003      	beq.n	8003a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a76:	4b3f      	ldr	r3, [pc, #252]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e06f      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a86:	4b3b      	ldr	r3, [pc, #236]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e067      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a96:	4b37      	ldr	r3, [pc, #220]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f023 0203 	bic.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4934      	ldr	r1, [pc, #208]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa8:	f7fd fa7c 	bl	8000fa4 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab0:	f7fd fa78 	bl	8000fa4 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e04f      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	4b2b      	ldr	r3, [pc, #172]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 020c 	and.w	r2, r3, #12
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d1eb      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b25      	ldr	r3, [pc, #148]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d20c      	bcs.n	8003b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b22      	ldr	r3, [pc, #136]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <HAL_RCC_ClockConfig+0x1b8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e032      	b.n	8003b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b0c:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4916      	ldr	r1, [pc, #88]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d009      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b2a:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	490e      	ldr	r1, [pc, #56]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b3e:	f000 f821 	bl	8003b84 <HAL_RCC_GetSysClockFreq>
 8003b42:	4602      	mov	r2, r0
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	091b      	lsrs	r3, r3, #4
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	490a      	ldr	r1, [pc, #40]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003b50:	5ccb      	ldrb	r3, [r1, r3]
 8003b52:	fa22 f303 	lsr.w	r3, r2, r3
 8003b56:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b5a:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fd f9dc 	bl	8000f1c <HAL_InitTick>

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40023c00 	.word	0x40023c00
 8003b74:	40023800 	.word	0x40023800
 8003b78:	0800877c 	.word	0x0800877c
 8003b7c:	20000004 	.word	0x20000004
 8003b80:	20000008 	.word	0x20000008

08003b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b88:	b094      	sub	sp, #80	; 0x50
 8003b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b90:	2300      	movs	r3, #0
 8003b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b94:	2300      	movs	r3, #0
 8003b96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b9c:	4b79      	ldr	r3, [pc, #484]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 030c 	and.w	r3, r3, #12
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d00d      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	f200 80e1 	bhi.w	8003d70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d003      	beq.n	8003bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8003bb6:	e0db      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bb8:	4b73      	ldr	r3, [pc, #460]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003bbc:	e0db      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bbe:	4b73      	ldr	r3, [pc, #460]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x208>)
 8003bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bc2:	e0d8      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bc4:	4b6f      	ldr	r3, [pc, #444]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bcc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bce:	4b6d      	ldr	r3, [pc, #436]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d063      	beq.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bda:	4b6a      	ldr	r3, [pc, #424]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	099b      	lsrs	r3, r3, #6
 8003be0:	2200      	movs	r2, #0
 8003be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003be4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bec:	633b      	str	r3, [r7, #48]	; 0x30
 8003bee:	2300      	movs	r3, #0
 8003bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003bf6:	4622      	mov	r2, r4
 8003bf8:	462b      	mov	r3, r5
 8003bfa:	f04f 0000 	mov.w	r0, #0
 8003bfe:	f04f 0100 	mov.w	r1, #0
 8003c02:	0159      	lsls	r1, r3, #5
 8003c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c08:	0150      	lsls	r0, r2, #5
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4621      	mov	r1, r4
 8003c10:	1a51      	subs	r1, r2, r1
 8003c12:	6139      	str	r1, [r7, #16]
 8003c14:	4629      	mov	r1, r5
 8003c16:	eb63 0301 	sbc.w	r3, r3, r1
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c28:	4659      	mov	r1, fp
 8003c2a:	018b      	lsls	r3, r1, #6
 8003c2c:	4651      	mov	r1, sl
 8003c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c32:	4651      	mov	r1, sl
 8003c34:	018a      	lsls	r2, r1, #6
 8003c36:	4651      	mov	r1, sl
 8003c38:	ebb2 0801 	subs.w	r8, r2, r1
 8003c3c:	4659      	mov	r1, fp
 8003c3e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c56:	4690      	mov	r8, r2
 8003c58:	4699      	mov	r9, r3
 8003c5a:	4623      	mov	r3, r4
 8003c5c:	eb18 0303 	adds.w	r3, r8, r3
 8003c60:	60bb      	str	r3, [r7, #8]
 8003c62:	462b      	mov	r3, r5
 8003c64:	eb49 0303 	adc.w	r3, r9, r3
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 0300 	mov.w	r3, #0
 8003c72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c76:	4629      	mov	r1, r5
 8003c78:	024b      	lsls	r3, r1, #9
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c80:	4621      	mov	r1, r4
 8003c82:	024a      	lsls	r2, r1, #9
 8003c84:	4610      	mov	r0, r2
 8003c86:	4619      	mov	r1, r3
 8003c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c94:	f7fc faec 	bl	8000270 <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca0:	e058      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca2:	4b38      	ldr	r3, [pc, #224]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	099b      	lsrs	r3, r3, #6
 8003ca8:	2200      	movs	r2, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	4611      	mov	r1, r2
 8003cae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cb2:	623b      	str	r3, [r7, #32]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cbc:	4642      	mov	r2, r8
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	f04f 0000 	mov.w	r0, #0
 8003cc4:	f04f 0100 	mov.w	r1, #0
 8003cc8:	0159      	lsls	r1, r3, #5
 8003cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cce:	0150      	lsls	r0, r2, #5
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cda:	4649      	mov	r1, r9
 8003cdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cf4:	ebb2 040a 	subs.w	r4, r2, sl
 8003cf8:	eb63 050b 	sbc.w	r5, r3, fp
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	00eb      	lsls	r3, r5, #3
 8003d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d0a:	00e2      	lsls	r2, r4, #3
 8003d0c:	4614      	mov	r4, r2
 8003d0e:	461d      	mov	r5, r3
 8003d10:	4643      	mov	r3, r8
 8003d12:	18e3      	adds	r3, r4, r3
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	464b      	mov	r3, r9
 8003d18:	eb45 0303 	adc.w	r3, r5, r3
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	f04f 0200 	mov.w	r2, #0
 8003d22:	f04f 0300 	mov.w	r3, #0
 8003d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d2a:	4629      	mov	r1, r5
 8003d2c:	028b      	lsls	r3, r1, #10
 8003d2e:	4621      	mov	r1, r4
 8003d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d34:	4621      	mov	r1, r4
 8003d36:	028a      	lsls	r2, r1, #10
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d3e:	2200      	movs	r2, #0
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	61fa      	str	r2, [r7, #28]
 8003d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d48:	f7fc fa92 	bl	8000270 <__aeabi_uldivmod>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4613      	mov	r3, r2
 8003d52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d54:	4b0b      	ldr	r3, [pc, #44]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	0c1b      	lsrs	r3, r3, #16
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d6e:	e002      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3750      	adds	r7, #80	; 0x50
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d82:	bf00      	nop
 8003d84:	40023800 	.word	0x40023800
 8003d88:	00f42400 	.word	0x00f42400
 8003d8c:	007a1200 	.word	0x007a1200

08003d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d94:	4b03      	ldr	r3, [pc, #12]	; (8003da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d96:	681b      	ldr	r3, [r3, #0]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000004 	.word	0x20000004

08003da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dac:	f7ff fff0 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	0a9b      	lsrs	r3, r3, #10
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	4903      	ldr	r1, [pc, #12]	; (8003dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	0800878c 	.word	0x0800878c

08003dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d105      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d035      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003df8:	4b62      	ldr	r3, [pc, #392]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dfe:	f7fd f8d1 	bl	8000fa4 <HAL_GetTick>
 8003e02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e04:	e008      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e06:	f7fd f8cd 	bl	8000fa4 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e0b0      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e18:	4b5b      	ldr	r3, [pc, #364]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1f0      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	019a      	lsls	r2, r3, #6
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	071b      	lsls	r3, r3, #28
 8003e30:	4955      	ldr	r1, [pc, #340]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e38:	4b52      	ldr	r3, [pc, #328]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e3e:	f7fd f8b1 	bl	8000fa4 <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e44:	e008      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e46:	f7fd f8ad 	bl	8000fa4 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e090      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e58:	4b4b      	ldr	r3, [pc, #300]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0f0      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 8083 	beq.w	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	4b44      	ldr	r3, [pc, #272]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	4a43      	ldr	r2, [pc, #268]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e80:	6413      	str	r3, [r2, #64]	; 0x40
 8003e82:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	60fb      	str	r3, [r7, #12]
 8003e8c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e8e:	4b3f      	ldr	r3, [pc, #252]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a3e      	ldr	r2, [pc, #248]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e98:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e9a:	f7fd f883 	bl	8000fa4 <HAL_GetTick>
 8003e9e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ea2:	f7fd f87f 	bl	8000fa4 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e062      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003eb4:	4b35      	ldr	r3, [pc, #212]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ec0:	4b31      	ldr	r3, [pc, #196]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d02f      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d028      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ede:	4b2a      	ldr	r3, [pc, #168]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ee8:	4b29      	ldr	r3, [pc, #164]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eee:	4b28      	ldr	r3, [pc, #160]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ef4:	4a24      	ldr	r2, [pc, #144]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003efa:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d114      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f06:	f7fd f84d 	bl	8000fa4 <HAL_GetTick>
 8003f0a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0c:	e00a      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f0e:	f7fd f849 	bl	8000fa4 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e02a      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f24:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d0ee      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f3c:	d10d      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003f3e:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f52:	490d      	ldr	r1, [pc, #52]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	608b      	str	r3, [r1, #8]
 8003f58:	e005      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	4a0a      	ldr	r2, [pc, #40]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f60:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f64:	6093      	str	r3, [r2, #8]
 8003f66:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f72:	4905      	ldr	r1, [pc, #20]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	42470068 	.word	0x42470068
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	40007000 	.word	0x40007000
 8003f90:	42470e40 	.word	0x42470e40

08003f94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d13e      	bne.n	8004030 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003fb2:	4b23      	ldr	r3, [pc, #140]	; (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d005      	beq.n	8003fce <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d12f      	bne.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003fc8:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003fca:	617b      	str	r3, [r7, #20]
          break;
 8003fcc:	e02f      	b.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003fce:	4b1c      	ldr	r3, [pc, #112]	; (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fda:	d108      	bne.n	8003fee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003fdc:	4b18      	ldr	r3, [pc, #96]	; (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fe4:	4a18      	ldr	r2, [pc, #96]	; (8004048 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	e007      	b.n	8003ffe <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003fee:	4b14      	ldr	r3, [pc, #80]	; (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ff6:	4a15      	ldr	r2, [pc, #84]	; (800404c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ffe:	4b10      	ldr	r3, [pc, #64]	; (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004004:	099b      	lsrs	r3, r3, #6
 8004006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	fb02 f303 	mul.w	r3, r2, r3
 8004010:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004012:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004018:	0f1b      	lsrs	r3, r3, #28
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	fbb2 f3f3 	udiv	r3, r2, r3
 8004024:	617b      	str	r3, [r7, #20]
          break;
 8004026:	e002      	b.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	617b      	str	r3, [r7, #20]
          break;
 800402c:	bf00      	nop
        }
      }
      break;
 800402e:	bf00      	nop
    }
  }
  return frequency;
 8004030:	697b      	ldr	r3, [r7, #20]
}
 8004032:	4618      	mov	r0, r3
 8004034:	371c      	adds	r7, #28
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40023800 	.word	0x40023800
 8004044:	00bb8000 	.word	0x00bb8000
 8004048:	007a1200 	.word	0x007a1200
 800404c:	00f42400 	.word	0x00f42400

08004050 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e07b      	b.n	800415a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	2b00      	cmp	r3, #0
 8004068:	d108      	bne.n	800407c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004072:	d009      	beq.n	8004088 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	61da      	str	r2, [r3, #28]
 800407a:	e005      	b.n	8004088 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fc fe02 	bl	8000cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410c:	ea42 0103 	orr.w	r1, r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	0c1b      	lsrs	r3, r3, #16
 8004126:	f003 0104 	and.w	r1, r3, #4
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	f003 0210 	and.w	r2, r3, #16
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69da      	ldr	r2, [r3, #28]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004148:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004162:	b084      	sub	sp, #16
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	f107 001c 	add.w	r0, r7, #28
 8004170:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	2b01      	cmp	r3, #1
 8004178:	d122      	bne.n	80041c0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800418e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d105      	bne.n	80041b4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f001 fb1b 	bl	80057f0 <USB_CoreReset>
 80041ba:	4603      	mov	r3, r0
 80041bc:	73fb      	strb	r3, [r7, #15]
 80041be:	e01a      	b.n	80041f6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f001 fb0f 	bl	80057f0 <USB_CoreReset>
 80041d2:	4603      	mov	r3, r0
 80041d4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80041d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	639a      	str	r2, [r3, #56]	; 0x38
 80041e8:	e005      	b.n	80041f6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d10b      	bne.n	8004214 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f043 0206 	orr.w	r2, r3, #6
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f043 0220 	orr.w	r2, r3, #32
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004214:	7bfb      	ldrb	r3, [r7, #15]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004220:	b004      	add	sp, #16
 8004222:	4770      	bx	lr

08004224 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	4613      	mov	r3, r2
 8004230:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	2b02      	cmp	r3, #2
 8004236:	d165      	bne.n	8004304 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	4a41      	ldr	r2, [pc, #260]	; (8004340 <USB_SetTurnaroundTime+0x11c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d906      	bls.n	800424e <USB_SetTurnaroundTime+0x2a>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4a40      	ldr	r2, [pc, #256]	; (8004344 <USB_SetTurnaroundTime+0x120>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d202      	bcs.n	800424e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004248:	230f      	movs	r3, #15
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	e062      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4a3c      	ldr	r2, [pc, #240]	; (8004344 <USB_SetTurnaroundTime+0x120>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d306      	bcc.n	8004264 <USB_SetTurnaroundTime+0x40>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4a3b      	ldr	r2, [pc, #236]	; (8004348 <USB_SetTurnaroundTime+0x124>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d202      	bcs.n	8004264 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800425e:	230e      	movs	r3, #14
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	e057      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4a38      	ldr	r2, [pc, #224]	; (8004348 <USB_SetTurnaroundTime+0x124>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d306      	bcc.n	800427a <USB_SetTurnaroundTime+0x56>
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4a37      	ldr	r2, [pc, #220]	; (800434c <USB_SetTurnaroundTime+0x128>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d202      	bcs.n	800427a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004274:	230d      	movs	r3, #13
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	e04c      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	4a33      	ldr	r2, [pc, #204]	; (800434c <USB_SetTurnaroundTime+0x128>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d306      	bcc.n	8004290 <USB_SetTurnaroundTime+0x6c>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4a32      	ldr	r2, [pc, #200]	; (8004350 <USB_SetTurnaroundTime+0x12c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d802      	bhi.n	8004290 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800428a:	230c      	movs	r3, #12
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	e041      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	4a2f      	ldr	r2, [pc, #188]	; (8004350 <USB_SetTurnaroundTime+0x12c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d906      	bls.n	80042a6 <USB_SetTurnaroundTime+0x82>
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4a2e      	ldr	r2, [pc, #184]	; (8004354 <USB_SetTurnaroundTime+0x130>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d802      	bhi.n	80042a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80042a0:	230b      	movs	r3, #11
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	e036      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	4a2a      	ldr	r2, [pc, #168]	; (8004354 <USB_SetTurnaroundTime+0x130>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d906      	bls.n	80042bc <USB_SetTurnaroundTime+0x98>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4a29      	ldr	r2, [pc, #164]	; (8004358 <USB_SetTurnaroundTime+0x134>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d802      	bhi.n	80042bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80042b6:	230a      	movs	r3, #10
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	e02b      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4a26      	ldr	r2, [pc, #152]	; (8004358 <USB_SetTurnaroundTime+0x134>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d906      	bls.n	80042d2 <USB_SetTurnaroundTime+0xae>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a25      	ldr	r2, [pc, #148]	; (800435c <USB_SetTurnaroundTime+0x138>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d202      	bcs.n	80042d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80042cc:	2309      	movs	r3, #9
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e020      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4a21      	ldr	r2, [pc, #132]	; (800435c <USB_SetTurnaroundTime+0x138>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d306      	bcc.n	80042e8 <USB_SetTurnaroundTime+0xc4>
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4a20      	ldr	r2, [pc, #128]	; (8004360 <USB_SetTurnaroundTime+0x13c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d802      	bhi.n	80042e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80042e2:	2308      	movs	r3, #8
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	e015      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <USB_SetTurnaroundTime+0x13c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d906      	bls.n	80042fe <USB_SetTurnaroundTime+0xda>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4a1c      	ldr	r2, [pc, #112]	; (8004364 <USB_SetTurnaroundTime+0x140>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d202      	bcs.n	80042fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80042f8:	2307      	movs	r3, #7
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	e00a      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80042fe:	2306      	movs	r3, #6
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	e007      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d102      	bne.n	8004310 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800430a:	2309      	movs	r3, #9
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	e001      	b.n	8004314 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004310:	2309      	movs	r3, #9
 8004312:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	029b      	lsls	r3, r3, #10
 8004328:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800432c:	431a      	orrs	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	371c      	adds	r7, #28
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	00d8acbf 	.word	0x00d8acbf
 8004344:	00e4e1c0 	.word	0x00e4e1c0
 8004348:	00f42400 	.word	0x00f42400
 800434c:	01067380 	.word	0x01067380
 8004350:	011a499f 	.word	0x011a499f
 8004354:	01312cff 	.word	0x01312cff
 8004358:	014ca43f 	.word	0x014ca43f
 800435c:	016e3600 	.word	0x016e3600
 8004360:	01a6ab1f 	.word	0x01a6ab1f
 8004364:	01e84800 	.word	0x01e84800

08004368 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f043 0201 	orr.w	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f023 0201 	bic.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d115      	bne.n	80043fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043da:	2001      	movs	r0, #1
 80043dc:	f7fc fdee 	bl	8000fbc <HAL_Delay>
      ms++;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3301      	adds	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f001 f972 	bl	80056d0 <USB_GetMode>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d01e      	beq.n	8004430 <USB_SetCurrentMode+0x84>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b31      	cmp	r3, #49	; 0x31
 80043f6:	d9f0      	bls.n	80043da <USB_SetCurrentMode+0x2e>
 80043f8:	e01a      	b.n	8004430 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d115      	bne.n	800442c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800440c:	2001      	movs	r0, #1
 800440e:	f7fc fdd5 	bl	8000fbc <HAL_Delay>
      ms++;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3301      	adds	r3, #1
 8004416:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f001 f959 	bl	80056d0 <USB_GetMode>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <USB_SetCurrentMode+0x84>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b31      	cmp	r3, #49	; 0x31
 8004428:	d9f0      	bls.n	800440c <USB_SetCurrentMode+0x60>
 800442a:	e001      	b.n	8004430 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e005      	b.n	800443c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b32      	cmp	r3, #50	; 0x32
 8004434:	d101      	bne.n	800443a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004444:	b084      	sub	sp, #16
 8004446:	b580      	push	{r7, lr}
 8004448:	b086      	sub	sp, #24
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800445e:	2300      	movs	r3, #0
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	e009      	b.n	8004478 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	3340      	adds	r3, #64	; 0x40
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	2200      	movs	r2, #0
 8004470:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	3301      	adds	r3, #1
 8004476:	613b      	str	r3, [r7, #16]
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b0e      	cmp	r3, #14
 800447c:	d9f2      	bls.n	8004464 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800447e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d11c      	bne.n	80044be <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004492:	f043 0302 	orr.w	r3, r3, #2
 8004496:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	639a      	str	r2, [r3, #56]	; 0x38
 80044bc:	e00b      	b.n	80044d6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044dc:	461a      	mov	r2, r3
 80044de:	2300      	movs	r3, #0
 80044e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e8:	4619      	mov	r1, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f0:	461a      	mov	r2, r3
 80044f2:	680b      	ldr	r3, [r1, #0]
 80044f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d10c      	bne.n	8004516 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d104      	bne.n	800450c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004502:	2100      	movs	r1, #0
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f945 	bl	8004794 <USB_SetDevSpeed>
 800450a:	e008      	b.n	800451e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800450c:	2101      	movs	r1, #1
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f940 	bl	8004794 <USB_SetDevSpeed>
 8004514:	e003      	b.n	800451e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004516:	2103      	movs	r1, #3
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f93b 	bl	8004794 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800451e:	2110      	movs	r1, #16
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f8f3 	bl	800470c <USB_FlushTxFifo>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f90f 	bl	8004754 <USB_FlushRxFifo>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004546:	461a      	mov	r2, r3
 8004548:	2300      	movs	r3, #0
 800454a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004552:	461a      	mov	r2, r3
 8004554:	2300      	movs	r3, #0
 8004556:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455e:	461a      	mov	r2, r3
 8004560:	2300      	movs	r3, #0
 8004562:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004564:	2300      	movs	r3, #0
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	e043      	b.n	80045f2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800457c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004580:	d118      	bne.n	80045b4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10a      	bne.n	800459e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004594:	461a      	mov	r2, r3
 8004596:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	e013      	b.n	80045c6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045aa:	461a      	mov	r2, r3
 80045ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	e008      	b.n	80045c6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c0:	461a      	mov	r2, r3
 80045c2:	2300      	movs	r3, #0
 80045c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d2:	461a      	mov	r2, r3
 80045d4:	2300      	movs	r3, #0
 80045d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e4:	461a      	mov	r2, r3
 80045e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	3301      	adds	r3, #1
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d3b7      	bcc.n	800456a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	e043      	b.n	8004688 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004616:	d118      	bne.n	800464a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10a      	bne.n	8004634 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462a:	461a      	mov	r2, r3
 800462c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	e013      	b.n	800465c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004640:	461a      	mov	r2, r3
 8004642:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	e008      	b.n	800465c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004656:	461a      	mov	r2, r3
 8004658:	2300      	movs	r3, #0
 800465a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004668:	461a      	mov	r2, r3
 800466a:	2300      	movs	r3, #0
 800466c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467a:	461a      	mov	r2, r3
 800467c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004680:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	3301      	adds	r3, #1
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	429a      	cmp	r2, r3
 800468e:	d3b7      	bcc.n	8004600 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800469e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d105      	bne.n	80046c4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	f043 0210 	orr.w	r2, r3, #16
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699a      	ldr	r2, [r3, #24]
 80046c8:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <USB_DevInit+0x2c4>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80046d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f043 0208 	orr.w	r2, r3, #8
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80046e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d107      	bne.n	80046f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046f0:	f043 0304 	orr.w	r3, r3, #4
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004704:	b004      	add	sp, #16
 8004706:	4770      	bx	lr
 8004708:	803c3800 	.word	0x803c3800

0800470c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	019b      	lsls	r3, r3, #6
 800471e:	f043 0220 	orr.w	r2, r3, #32
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	3301      	adds	r3, #1
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	4a08      	ldr	r2, [pc, #32]	; (8004750 <USB_FlushTxFifo+0x44>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e006      	b.n	8004744 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b20      	cmp	r3, #32
 8004740:	d0f1      	beq.n	8004726 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	00030d40 	.word	0x00030d40

08004754 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2210      	movs	r2, #16
 8004764:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3301      	adds	r3, #1
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	4a08      	ldr	r2, [pc, #32]	; (8004790 <USB_FlushRxFifo+0x3c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e006      	b.n	8004784 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f003 0310 	and.w	r3, r3, #16
 800477e:	2b10      	cmp	r3, #16
 8004780:	d0f1      	beq.n	8004766 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	00030d40 	.word	0x00030d40

08004794 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	68f9      	ldr	r1, [r7, #12]
 80047b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047b4:	4313      	orrs	r3, r2
 80047b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b087      	sub	sp, #28
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 0306 	and.w	r3, r3, #6
 80047de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d102      	bne.n	80047ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80047e6:	2300      	movs	r3, #0
 80047e8:	75fb      	strb	r3, [r7, #23]
 80047ea:	e00a      	b.n	8004802 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d002      	beq.n	80047f8 <USB_GetDevSpeed+0x32>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b06      	cmp	r3, #6
 80047f6:	d102      	bne.n	80047fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80047f8:	2302      	movs	r3, #2
 80047fa:	75fb      	strb	r3, [r7, #23]
 80047fc:	e001      	b.n	8004802 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80047fe:	230f      	movs	r3, #15
 8004800:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004802:	7dfb      	ldrb	r3, [r7, #23]
}
 8004804:	4618      	mov	r0, r3
 8004806:	371c      	adds	r7, #28
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	785b      	ldrb	r3, [r3, #1]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d13a      	bne.n	80048a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	f003 030f 	and.w	r3, r3, #15
 800483c:	2101      	movs	r1, #1
 800483e:	fa01 f303 	lsl.w	r3, r1, r3
 8004842:	b29b      	uxth	r3, r3
 8004844:	68f9      	ldr	r1, [r7, #12]
 8004846:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800484a:	4313      	orrs	r3, r2
 800484c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d155      	bne.n	8004910 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	015a      	lsls	r2, r3, #5
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	78db      	ldrb	r3, [r3, #3]
 800487e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004880:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	059b      	lsls	r3, r3, #22
 8004886:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004888:	4313      	orrs	r3, r2
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	0151      	lsls	r1, r2, #5
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	440a      	add	r2, r1
 8004892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	e036      	b.n	8004910 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a8:	69da      	ldr	r2, [r3, #28]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	2101      	movs	r1, #1
 80048b4:	fa01 f303 	lsl.w	r3, r1, r3
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	68f9      	ldr	r1, [r7, #12]
 80048bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048c0:	4313      	orrs	r3, r2
 80048c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d11a      	bne.n	8004910 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	78db      	ldrb	r3, [r3, #3]
 80048f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048f6:	430b      	orrs	r3, r1
 80048f8:	4313      	orrs	r3, r2
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	0151      	lsls	r1, r2, #5
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	440a      	add	r2, r1
 8004902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800490a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800490e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
	...

08004920 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	785b      	ldrb	r3, [r3, #1]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d161      	bne.n	8004a00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800494e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004952:	d11f      	bne.n	8004994 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	0151      	lsls	r1, r2, #5
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	440a      	add	r2, r1
 800496a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004972:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	0151      	lsls	r1, r2, #5
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	440a      	add	r2, r1
 800498a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004992:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	2101      	movs	r1, #1
 80049a6:	fa01 f303 	lsl.w	r3, r1, r3
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	43db      	mvns	r3, r3
 80049ae:	68f9      	ldr	r1, [r7, #12]
 80049b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049b4:	4013      	ands	r3, r2
 80049b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049be:	69da      	ldr	r2, [r3, #28]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	2101      	movs	r1, #1
 80049ca:	fa01 f303 	lsl.w	r3, r1, r3
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	43db      	mvns	r3, r3
 80049d2:	68f9      	ldr	r1, [r7, #12]
 80049d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049d8:	4013      	ands	r3, r2
 80049da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	0159      	lsls	r1, r3, #5
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	440b      	add	r3, r1
 80049f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f6:	4619      	mov	r1, r3
 80049f8:	4b35      	ldr	r3, [pc, #212]	; (8004ad0 <USB_DeactivateEndpoint+0x1b0>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	600b      	str	r3, [r1, #0]
 80049fe:	e060      	b.n	8004ac2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a16:	d11f      	bne.n	8004a58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	0151      	lsls	r1, r2, #5
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	0151      	lsls	r1, r2, #5
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	440a      	add	r2, r1
 8004a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	2101      	movs	r1, #1
 8004a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6e:	041b      	lsls	r3, r3, #16
 8004a70:	43db      	mvns	r3, r3
 8004a72:	68f9      	ldr	r1, [r7, #12]
 8004a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a78:	4013      	ands	r3, r2
 8004a7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a92:	041b      	lsls	r3, r3, #16
 8004a94:	43db      	mvns	r3, r3
 8004a96:	68f9      	ldr	r1, [r7, #12]
 8004a98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	0159      	lsls	r1, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	440b      	add	r3, r1
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	4619      	mov	r1, r3
 8004abc:	4b05      	ldr	r3, [pc, #20]	; (8004ad4 <USB_DeactivateEndpoint+0x1b4>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	ec337800 	.word	0xec337800
 8004ad4:	eff37800 	.word	0xeff37800

08004ad8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08a      	sub	sp, #40	; 0x28
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	785b      	ldrb	r3, [r3, #1]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	f040 815c 	bne.w	8004db2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d132      	bne.n	8004b68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	0151      	lsls	r1, r2, #5
 8004b14:	69fa      	ldr	r2, [r7, #28]
 8004b16:	440a      	add	r2, r1
 8004b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	0151      	lsls	r1, r2, #5
 8004b38:	69fa      	ldr	r2, [r7, #28]
 8004b3a:	440a      	add	r2, r1
 8004b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	0151      	lsls	r1, r2, #5
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	440a      	add	r2, r1
 8004b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b60:	0cdb      	lsrs	r3, r3, #19
 8004b62:	04db      	lsls	r3, r3, #19
 8004b64:	6113      	str	r3, [r2, #16]
 8004b66:	e074      	b.n	8004c52 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	0151      	lsls	r1, r2, #5
 8004b7a:	69fa      	ldr	r2, [r7, #28]
 8004b7c:	440a      	add	r2, r1
 8004b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b82:	0cdb      	lsrs	r3, r3, #19
 8004b84:	04db      	lsls	r3, r3, #19
 8004b86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	0151      	lsls	r1, r2, #5
 8004b9a:	69fa      	ldr	r2, [r7, #28]
 8004b9c:	440a      	add	r2, r1
 8004b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ba6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004baa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	015a      	lsls	r2, r3, #5
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	6959      	ldr	r1, [r3, #20]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	440b      	add	r3, r1
 8004bc4:	1e59      	subs	r1, r3, #1
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004bd0:	4b9d      	ldr	r3, [pc, #628]	; (8004e48 <USB_EPStartXfer+0x370>)
 8004bd2:	400b      	ands	r3, r1
 8004bd4:	69b9      	ldr	r1, [r7, #24]
 8004bd6:	0148      	lsls	r0, r1, #5
 8004bd8:	69f9      	ldr	r1, [r7, #28]
 8004bda:	4401      	add	r1, r0
 8004bdc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004be0:	4313      	orrs	r3, r2
 8004be2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bfa:	69b9      	ldr	r1, [r7, #24]
 8004bfc:	0148      	lsls	r0, r1, #5
 8004bfe:	69f9      	ldr	r1, [r7, #28]
 8004c00:	4401      	add	r1, r0
 8004c02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c06:	4313      	orrs	r3, r2
 8004c08:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	78db      	ldrb	r3, [r3, #3]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d11f      	bne.n	8004c52 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	0151      	lsls	r1, r2, #5
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	440a      	add	r2, r1
 8004c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c30:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	0151      	lsls	r1, r2, #5
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	440a      	add	r2, r1
 8004c48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c50:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d14b      	bne.n	8004cf0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d009      	beq.n	8004c74 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	78db      	ldrb	r3, [r3, #3]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d128      	bne.n	8004cce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d110      	bne.n	8004cae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	0151      	lsls	r1, r2, #5
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	440a      	add	r2, r1
 8004ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	e00f      	b.n	8004cce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	0151      	lsls	r1, r2, #5
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	440a      	add	r2, r1
 8004cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	0151      	lsls	r1, r2, #5
 8004ce0:	69fa      	ldr	r2, [r7, #28]
 8004ce2:	440a      	add	r2, r1
 8004ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e12f      	b.n	8004f50 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	0151      	lsls	r1, r2, #5
 8004d02:	69fa      	ldr	r2, [r7, #28]
 8004d04:	440a      	add	r2, r1
 8004d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d0e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	78db      	ldrb	r3, [r3, #3]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d015      	beq.n	8004d44 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 8117 	beq.w	8004f50 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	2101      	movs	r1, #1
 8004d34:	fa01 f303 	lsl.w	r3, r1, r3
 8004d38:	69f9      	ldr	r1, [r7, #28]
 8004d3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	634b      	str	r3, [r1, #52]	; 0x34
 8004d42:	e105      	b.n	8004f50 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d110      	bne.n	8004d76 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	0151      	lsls	r1, r2, #5
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	440a      	add	r2, r1
 8004d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	e00f      	b.n	8004d96 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	0151      	lsls	r1, r2, #5
 8004d88:	69fa      	ldr	r2, [r7, #28]
 8004d8a:	440a      	add	r2, r1
 8004d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d94:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	68d9      	ldr	r1, [r3, #12]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	781a      	ldrb	r2, [r3, #0]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	b298      	uxth	r0, r3
 8004da4:	79fb      	ldrb	r3, [r7, #7]
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	4603      	mov	r3, r0
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 fa2b 	bl	8005206 <USB_WritePacket>
 8004db0:	e0ce      	b.n	8004f50 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	0151      	lsls	r1, r2, #5
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	440a      	add	r2, r1
 8004dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dcc:	0cdb      	lsrs	r3, r3, #19
 8004dce:	04db      	lsls	r3, r3, #19
 8004dd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	0151      	lsls	r1, r2, #5
 8004de4:	69fa      	ldr	r2, [r7, #28]
 8004de6:	440a      	add	r2, r1
 8004de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004df0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004df4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d126      	bne.n	8004e4c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e14:	69b9      	ldr	r1, [r7, #24]
 8004e16:	0148      	lsls	r0, r1, #5
 8004e18:	69f9      	ldr	r1, [r7, #28]
 8004e1a:	4401      	add	r1, r0
 8004e1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e20:	4313      	orrs	r3, r2
 8004e22:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	0151      	lsls	r1, r2, #5
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	440a      	add	r2, r1
 8004e3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e42:	6113      	str	r3, [r2, #16]
 8004e44:	e036      	b.n	8004eb4 <USB_EPStartXfer+0x3dc>
 8004e46:	bf00      	nop
 8004e48:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	695a      	ldr	r2, [r3, #20]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	4413      	add	r3, r2
 8004e56:	1e5a      	subs	r2, r3, #1
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	8afb      	ldrh	r3, [r7, #22]
 8004e72:	04d9      	lsls	r1, r3, #19
 8004e74:	4b39      	ldr	r3, [pc, #228]	; (8004f5c <USB_EPStartXfer+0x484>)
 8004e76:	400b      	ands	r3, r1
 8004e78:	69b9      	ldr	r1, [r7, #24]
 8004e7a:	0148      	lsls	r0, r1, #5
 8004e7c:	69f9      	ldr	r1, [r7, #28]
 8004e7e:	4401      	add	r1, r0
 8004e80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e84:	4313      	orrs	r3, r2
 8004e86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	8af9      	ldrh	r1, [r7, #22]
 8004e9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ea4:	69b9      	ldr	r1, [r7, #24]
 8004ea6:	0148      	lsls	r0, r1, #5
 8004ea8:	69f9      	ldr	r1, [r7, #28]
 8004eaa:	4401      	add	r1, r0
 8004eac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004eb4:	79fb      	ldrb	r3, [r7, #7]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d10d      	bne.n	8004ed6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d009      	beq.n	8004ed6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	68d9      	ldr	r1, [r3, #12]
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed2:	460a      	mov	r2, r1
 8004ed4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	78db      	ldrb	r3, [r3, #3]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d128      	bne.n	8004f30 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d110      	bne.n	8004f10 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	0151      	lsls	r1, r2, #5
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	440a      	add	r2, r1
 8004f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	e00f      	b.n	8004f30 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	0151      	lsls	r1, r2, #5
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	440a      	add	r2, r1
 8004f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	0151      	lsls	r1, r2, #5
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	440a      	add	r2, r1
 8004f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3720      	adds	r7, #32
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	1ff80000 	.word	0x1ff80000

08004f60 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	785b      	ldrb	r3, [r3, #1]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	f040 80cd 	bne.w	800511c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d132      	bne.n	8004ff0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	0151      	lsls	r1, r2, #5
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	440a      	add	r2, r1
 8004fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fa8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	0151      	lsls	r1, r2, #5
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	440a      	add	r2, r1
 8004fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	015a      	lsls	r2, r3, #5
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	0151      	lsls	r1, r2, #5
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	440a      	add	r2, r1
 8004fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe8:	0cdb      	lsrs	r3, r3, #19
 8004fea:	04db      	lsls	r3, r3, #19
 8004fec:	6113      	str	r3, [r2, #16]
 8004fee:	e04e      	b.n	800508e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	0151      	lsls	r1, r2, #5
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	440a      	add	r2, r1
 8005006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800500a:	0cdb      	lsrs	r3, r3, #19
 800500c:	04db      	lsls	r3, r3, #19
 800500e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	440a      	add	r2, r1
 8005026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800502e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005032:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	429a      	cmp	r2, r3
 800503e:	d903      	bls.n	8005048 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	689a      	ldr	r2, [r3, #8]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	440a      	add	r2, r1
 800505e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005062:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005066:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800507e:	6939      	ldr	r1, [r7, #16]
 8005080:	0148      	lsls	r0, r1, #5
 8005082:	6979      	ldr	r1, [r7, #20]
 8005084:	4401      	add	r1, r0
 8005086:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800508a:	4313      	orrs	r3, r2
 800508c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d11e      	bne.n	80050d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d009      	beq.n	80050b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a8:	461a      	mov	r2, r3
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	e092      	b.n	80051f8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	0151      	lsls	r1, r2, #5
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	440a      	add	r2, r1
 80050e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d07e      	beq.n	80051f8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	2101      	movs	r1, #1
 800510c:	fa01 f303 	lsl.w	r3, r1, r3
 8005110:	6979      	ldr	r1, [r7, #20]
 8005112:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005116:	4313      	orrs	r3, r2
 8005118:	634b      	str	r3, [r1, #52]	; 0x34
 800511a:	e06d      	b.n	80051f8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	0151      	lsls	r1, r2, #5
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	440a      	add	r2, r1
 8005132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005136:	0cdb      	lsrs	r3, r3, #19
 8005138:	04db      	lsls	r3, r3, #19
 800513a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	0151      	lsls	r1, r2, #5
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	440a      	add	r2, r1
 8005152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005156:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800515a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800515e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	440a      	add	r2, r1
 8005186:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800518a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800518e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051a6:	6939      	ldr	r1, [r7, #16]
 80051a8:	0148      	lsls	r0, r1, #5
 80051aa:	6979      	ldr	r1, [r7, #20]
 80051ac:	4401      	add	r1, r0
 80051ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051b2:	4313      	orrs	r3, r2
 80051b4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d10d      	bne.n	80051d8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d009      	beq.n	80051d8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	68d9      	ldr	r1, [r3, #12]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d4:	460a      	mov	r2, r1
 80051d6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005206:	b480      	push	{r7}
 8005208:	b089      	sub	sp, #36	; 0x24
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	4611      	mov	r1, r2
 8005212:	461a      	mov	r2, r3
 8005214:	460b      	mov	r3, r1
 8005216:	71fb      	strb	r3, [r7, #7]
 8005218:	4613      	mov	r3, r2
 800521a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005224:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005228:	2b00      	cmp	r3, #0
 800522a:	d123      	bne.n	8005274 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800522c:	88bb      	ldrh	r3, [r7, #4]
 800522e:	3303      	adds	r3, #3
 8005230:	089b      	lsrs	r3, r3, #2
 8005232:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005234:	2300      	movs	r3, #0
 8005236:	61bb      	str	r3, [r7, #24]
 8005238:	e018      	b.n	800526c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	031a      	lsls	r2, r3, #12
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4413      	add	r3, r2
 8005242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005246:	461a      	mov	r2, r3
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	3301      	adds	r3, #1
 8005252:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	3301      	adds	r3, #1
 8005258:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	3301      	adds	r3, #1
 800525e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	3301      	adds	r3, #1
 8005264:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	3301      	adds	r3, #1
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	429a      	cmp	r2, r3
 8005272:	d3e2      	bcc.n	800523a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3724      	adds	r7, #36	; 0x24
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005282:	b480      	push	{r7}
 8005284:	b08b      	sub	sp, #44	; 0x2c
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	4613      	mov	r3, r2
 800528e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005298:	88fb      	ldrh	r3, [r7, #6]
 800529a:	089b      	lsrs	r3, r3, #2
 800529c:	b29b      	uxth	r3, r3
 800529e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80052a8:	2300      	movs	r3, #0
 80052aa:	623b      	str	r3, [r7, #32]
 80052ac:	e014      	b.n	80052d8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	601a      	str	r2, [r3, #0]
    pDest++;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	3301      	adds	r3, #1
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	3301      	adds	r3, #1
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	3301      	adds	r3, #1
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	3301      	adds	r3, #1
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	3301      	adds	r3, #1
 80052d6:	623b      	str	r3, [r7, #32]
 80052d8:	6a3a      	ldr	r2, [r7, #32]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d3e6      	bcc.n	80052ae <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052e0:	8bfb      	ldrh	r3, [r7, #30]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d01e      	beq.n	8005324 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f0:	461a      	mov	r2, r3
 80052f2:	f107 0310 	add.w	r3, r7, #16
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	fa22 f303 	lsr.w	r3, r2, r3
 8005306:	b2da      	uxtb	r2, r3
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	701a      	strb	r2, [r3, #0]
      i++;
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	3301      	adds	r3, #1
 8005310:	623b      	str	r3, [r7, #32]
      pDest++;
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	3301      	adds	r3, #1
 8005316:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005318:	8bfb      	ldrh	r3, [r7, #30]
 800531a:	3b01      	subs	r3, #1
 800531c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800531e:	8bfb      	ldrh	r3, [r7, #30]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1ea      	bne.n	80052fa <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005326:	4618      	mov	r0, r3
 8005328:	372c      	adds	r7, #44	; 0x2c
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005332:	b480      	push	{r7}
 8005334:	b085      	sub	sp, #20
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	785b      	ldrb	r3, [r3, #1]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d12c      	bne.n	80053a8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	db12      	blt.n	8005386 <USB_EPSetStall+0x54>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00f      	beq.n	8005386 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	0151      	lsls	r1, r2, #5
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	440a      	add	r2, r1
 800537c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005380:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005384:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	0151      	lsls	r1, r2, #5
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	440a      	add	r2, r1
 800539c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	e02b      	b.n	8005400 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	db12      	blt.n	80053e0 <USB_EPSetStall+0xae>
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00f      	beq.n	80053e0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	0151      	lsls	r1, r2, #5
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	440a      	add	r2, r1
 80053d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053de:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	0151      	lsls	r1, r2, #5
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	440a      	add	r2, r1
 80053f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800540e:	b480      	push	{r7}
 8005410:	b085      	sub	sp, #20
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	2b01      	cmp	r3, #1
 8005428:	d128      	bne.n	800547c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	0151      	lsls	r1, r2, #5
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	440a      	add	r2, r1
 8005440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005444:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005448:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	78db      	ldrb	r3, [r3, #3]
 800544e:	2b03      	cmp	r3, #3
 8005450:	d003      	beq.n	800545a <USB_EPClearStall+0x4c>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	78db      	ldrb	r3, [r3, #3]
 8005456:	2b02      	cmp	r3, #2
 8005458:	d138      	bne.n	80054cc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	0151      	lsls	r1, r2, #5
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	440a      	add	r2, r1
 8005470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	e027      	b.n	80054cc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	0151      	lsls	r1, r2, #5
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	440a      	add	r2, r1
 8005492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005496:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800549a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	78db      	ldrb	r3, [r3, #3]
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d003      	beq.n	80054ac <USB_EPClearStall+0x9e>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	78db      	ldrb	r3, [r3, #3]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d10f      	bne.n	80054cc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	0151      	lsls	r1, r2, #5
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	440a      	add	r2, r1
 80054c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ca:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
 80054e2:	460b      	mov	r3, r1
 80054e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054f8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80054fc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800550e:	68f9      	ldr	r1, [r7, #12]
 8005510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005514:	4313      	orrs	r3, r2
 8005516:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005526:	b480      	push	{r7}
 8005528:	b085      	sub	sp, #20
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005540:	f023 0303 	bic.w	r3, r3, #3
 8005544:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005554:	f023 0302 	bic.w	r3, r3, #2
 8005558:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005582:	f023 0303 	bic.w	r3, r3, #3
 8005586:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005596:	f043 0302 	orr.w	r3, r3, #2
 800559a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4013      	ands	r3, r2
 80055c0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055c2:	68fb      	ldr	r3, [r7, #12]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4013      	ands	r3, r2
 80055f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	0c1b      	lsrs	r3, r3, #16
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4013      	ands	r3, r2
 8005626:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	b29b      	uxth	r3, r3
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	4013      	ands	r3, r2
 8005664:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005666:	68bb      	ldr	r3, [r7, #8]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005696:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005698:	78fb      	ldrb	r3, [r7, #3]
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	fa22 f303 	lsr.w	r3, r2, r3
 80056a4:	01db      	lsls	r3, r3, #7
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80056ae:	78fb      	ldrb	r3, [r7, #3]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4013      	ands	r3, r2
 80056c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056c2:	68bb      	ldr	r3, [r7, #8]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	f003 0301 	and.w	r3, r3, #1
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005706:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800570a:	f023 0307 	bic.w	r3, r3, #7
 800570e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800571e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005722:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
	...

08005734 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	460b      	mov	r3, r1
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	333c      	adds	r3, #60	; 0x3c
 800574a:	3304      	adds	r3, #4
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	4a26      	ldr	r2, [pc, #152]	; (80057ec <USB_EP0_OutStart+0xb8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d90a      	bls.n	800576e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005768:	d101      	bne.n	800576e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	e037      	b.n	80057de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005774:	461a      	mov	r2, r3
 8005776:	2300      	movs	r3, #0
 8005778:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800578c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579c:	f043 0318 	orr.w	r3, r3, #24
 80057a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80057b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80057b6:	7afb      	ldrb	r3, [r7, #11]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d10f      	bne.n	80057dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c2:	461a      	mov	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80057da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	4f54300a 	.word	0x4f54300a

080057f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3301      	adds	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	4a13      	ldr	r2, [pc, #76]	; (8005850 <USB_CoreReset+0x60>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d901      	bls.n	800580c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e01a      	b.n	8005842 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	daf3      	bge.n	80057fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f043 0201 	orr.w	r2, r3, #1
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	4a09      	ldr	r2, [pc, #36]	; (8005850 <USB_CoreReset+0x60>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d901      	bls.n	8005834 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e006      	b.n	8005842 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b01      	cmp	r3, #1
 800583e:	d0f1      	beq.n	8005824 <USB_CoreReset+0x34>

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	00030d40 	.word	0x00030d40

08005854 <eMBMasterReqWriteMultipleHoldingRegister>:
 * @return error code
 */
eMBMasterReqErrCode
eMBMasterReqWriteMultipleHoldingRegister( UCHAR ucSndAddr,
		USHORT usRegAddr, USHORT usNRegs, USHORT * pusDataBuffer, LONG lTimeOut )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af00      	add	r7, sp, #0
 800585a:	607b      	str	r3, [r7, #4]
 800585c:	4603      	mov	r3, r0
 800585e:	73fb      	strb	r3, [r7, #15]
 8005860:	460b      	mov	r3, r1
 8005862:	81bb      	strh	r3, [r7, #12]
 8005864:	4613      	mov	r3, r2
 8005866:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    USHORT                 usRegIndex = 0;
 8005868:	2300      	movs	r3, #0
 800586a:	837b      	strh	r3, [r7, #26]
    UCHAR Length;
     USHORT          usCRC16;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 800586c:	2300      	movs	r3, #0
 800586e:	767b      	strb	r3, [r7, #25]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	2bf3      	cmp	r3, #243	; 0xf3
 8005874:	d902      	bls.n	800587c <eMBMasterReqWriteMultipleHoldingRegister+0x28>
 8005876:	2302      	movs	r3, #2
 8005878:	767b      	strb	r3, [r7, #25]
 800587a:	e068      	b.n	800594e <eMBMasterReqWriteMultipleHoldingRegister+0xfa>
    else
    {
//		vMBMasterGetPDUSndBuf(&ucMBFrame);
//		vMBMasterSetDestAddress(ucSndAddr);

       	MBbuffer[0]=ucSndAddr; //Slave Address
 800587c:	4a36      	ldr	r2, [pc, #216]	; (8005958 <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 800587e:	7bfb      	ldrb	r3, [r7, #15]
 8005880:	7013      	strb	r3, [r2, #0]
        ucMBFrame = &MBbuffer[1];  // Start from offset 1
 8005882:	4b36      	ldr	r3, [pc, #216]	; (800595c <eMBMasterReqWriteMultipleHoldingRegister+0x108>)
 8005884:	61fb      	str	r3, [r7, #28]

		ucMBFrame[MB_PDU_FUNC_OFF]                     = MB_FUNC_WRITE_MULTIPLE_REGISTERS;
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	2210      	movs	r2, #16
 800588a:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF]       = usRegAddr >> 8;
 800588c:	89bb      	ldrh	r3, [r7, #12]
 800588e:	0a1b      	lsrs	r3, r3, #8
 8005890:	b29a      	uxth	r2, r3
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	3301      	adds	r3, #1
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1]   = usRegAddr;
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	3302      	adds	r3, #2
 800589e:	89ba      	ldrh	r2, [r7, #12]
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF]     = usNRegs >> 8;
 80058a4:	897b      	ldrh	r3, [r7, #10]
 80058a6:	0a1b      	lsrs	r3, r3, #8
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	3303      	adds	r3, #3
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] = usNRegs ;
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	3304      	adds	r3, #4
 80058b6:	897a      	ldrh	r2, [r7, #10]
 80058b8:	b2d2      	uxtb	r2, r2
 80058ba:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF]    = usNRegs * 2;
 80058bc:	897b      	ldrh	r3, [r7, #10]
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	3305      	adds	r3, #5
 80058c4:	0052      	lsls	r2, r2, #1
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	701a      	strb	r2, [r3, #0]
		ucMBFrame += MB_PDU_REQ_WRITE_MUL_VALUES_OFF;
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	3306      	adds	r3, #6
 80058ce:	61fb      	str	r3, [r7, #28]
		while( usNRegs > usRegIndex)
 80058d0:	e017      	b.n	8005902 <eMBMasterReqWriteMultipleHoldingRegister+0xae>
		{
			*ucMBFrame++ = pusDataBuffer[usRegIndex] >> 8;
 80058d2:	8b7b      	ldrh	r3, [r7, #26]
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	4413      	add	r3, r2
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	0a1b      	lsrs	r3, r3, #8
 80058de:	b299      	uxth	r1, r3
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	61fa      	str	r2, [r7, #28]
 80058e6:	b2ca      	uxtb	r2, r1
 80058e8:	701a      	strb	r2, [r3, #0]
			*ucMBFrame++ = pusDataBuffer[usRegIndex++] ;
 80058ea:	8b7b      	ldrh	r3, [r7, #26]
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	837a      	strh	r2, [r7, #26]
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	4413      	add	r3, r2
 80058f6:	8819      	ldrh	r1, [r3, #0]
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	61fa      	str	r2, [r7, #28]
 80058fe:	b2ca      	uxtb	r2, r1
 8005900:	701a      	strb	r2, [r3, #0]
		while( usNRegs > usRegIndex)
 8005902:	897a      	ldrh	r2, [r7, #10]
 8005904:	8b7b      	ldrh	r3, [r7, #26]
 8005906:	429a      	cmp	r2, r3
 8005908:	d8e3      	bhi.n	80058d2 <eMBMasterReqWriteMultipleHoldingRegister+0x7e>
		}

		Length = MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_MUL_SIZE_MIN + 2*usNRegs + 3 ; //Address + CRC
 800590a:	897b      	ldrh	r3, [r7, #10]
 800590c:	3303      	adds	r3, #3
 800590e:	b2db      	uxtb	r3, r3
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	b2db      	uxtb	r3, r3
 8005914:	3303      	adds	r3, #3
 8005916:	763b      	strb	r3, [r7, #24]
        usCRC16 = usMBCRC16( &MBbuffer[0], Length-2 );
 8005918:	7e3b      	ldrb	r3, [r7, #24]
 800591a:	3b02      	subs	r3, #2
 800591c:	4619      	mov	r1, r3
 800591e:	480e      	ldr	r0, [pc, #56]	; (8005958 <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 8005920:	f000 f81e 	bl	8005960 <usMBCRC16>
 8005924:	4603      	mov	r3, r0
 8005926:	82fb      	strh	r3, [r7, #22]

        MBbuffer[Length-1] = usCRC16 >> 8;
 8005928:	8afb      	ldrh	r3, [r7, #22]
 800592a:	0a1b      	lsrs	r3, r3, #8
 800592c:	b29a      	uxth	r2, r3
 800592e:	7e3b      	ldrb	r3, [r7, #24]
 8005930:	3b01      	subs	r3, #1
 8005932:	b2d1      	uxtb	r1, r2
 8005934:	4a08      	ldr	r2, [pc, #32]	; (8005958 <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 8005936:	54d1      	strb	r1, [r2, r3]
        MBbuffer[Length-2] = usCRC16 & 0xff;
 8005938:	7e3b      	ldrb	r3, [r7, #24]
 800593a:	3b02      	subs	r3, #2
 800593c:	8afa      	ldrh	r2, [r7, #22]
 800593e:	b2d1      	uxtb	r1, r2
 8005940:	4a05      	ldr	r2, [pc, #20]	; (8005958 <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 8005942:	54d1      	strb	r1, [r2, r3]

		 CDC_Transmit_FS(MBbuffer,Length);
 8005944:	7e3b      	ldrb	r3, [r7, #24]
 8005946:	4619      	mov	r1, r3
 8005948:	4803      	ldr	r0, [pc, #12]	; (8005958 <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 800594a:	f001 fda3 	bl	8007494 <CDC_Transmit_FS>

//		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_MUL_SIZE_MIN + 2*usNRegs );
//		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
//		eErrStatus = eMBMasterWaitRequestFinish( );
    }
    return eErrStatus;
 800594e:	7e7b      	ldrb	r3, [r7, #25]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3720      	adds	r7, #32
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	20000494 	.word	0x20000494
 800595c:	20000495 	.word	0x20000495

08005960 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	460b      	mov	r3, r1
 800596a:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 800596c:	23ff      	movs	r3, #255	; 0xff
 800596e:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8005970:	23ff      	movs	r3, #255	; 0xff
 8005972:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8005974:	e013      	b.n	800599e <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	781a      	ldrb	r2, [r3, #0]
 800597e:	7bbb      	ldrb	r3, [r7, #14]
 8005980:	4053      	eors	r3, r2
 8005982:	b2db      	uxtb	r3, r3
 8005984:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8005986:	4a0f      	ldr	r2, [pc, #60]	; (80059c4 <usMBCRC16+0x64>)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	4413      	add	r3, r2
 800598c:	781a      	ldrb	r2, [r3, #0]
 800598e:	7bfb      	ldrb	r3, [r7, #15]
 8005990:	4053      	eors	r3, r2
 8005992:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8005994:	4a0c      	ldr	r2, [pc, #48]	; (80059c8 <usMBCRC16+0x68>)
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	4413      	add	r3, r2
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 800599e:	887b      	ldrh	r3, [r7, #2]
 80059a0:	1e5a      	subs	r2, r3, #1
 80059a2:	807a      	strh	r2, [r7, #2]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e6      	bne.n	8005976 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	b21a      	sxth	r2, r3
 80059ae:	7bbb      	ldrb	r3, [r7, #14]
 80059b0:	b21b      	sxth	r3, r3
 80059b2:	4313      	orrs	r3, r2
 80059b4:	b21b      	sxth	r3, r3
 80059b6:	b29b      	uxth	r3, r3
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	08008794 	.word	0x08008794
 80059c8:	08008894 	.word	0x08008894

080059cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80059d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80059dc:	f002 f980 	bl	8007ce0 <USBD_static_malloc>
 80059e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d105      	bne.n	80059f4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80059f0:	2302      	movs	r3, #2
 80059f2:	e066      	b.n	8005ac2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	7c1b      	ldrb	r3, [r3, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d119      	bne.n	8005a38 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a08:	2202      	movs	r2, #2
 8005a0a:	2181      	movs	r1, #129	; 0x81
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f002 f844 	bl	8007a9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	2101      	movs	r1, #1
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f002 f83a 	bl	8007a9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2210      	movs	r2, #16
 8005a32:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005a36:	e016      	b.n	8005a66 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005a38:	2340      	movs	r3, #64	; 0x40
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	2181      	movs	r1, #129	; 0x81
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f002 f82b 	bl	8007a9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a4a:	2340      	movs	r3, #64	; 0x40
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	2101      	movs	r1, #1
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f002 f822 	bl	8007a9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2210      	movs	r2, #16
 8005a62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a66:	2308      	movs	r3, #8
 8005a68:	2203      	movs	r2, #3
 8005a6a:	2182      	movs	r1, #130	; 0x82
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f002 f814 	bl	8007a9a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	7c1b      	ldrb	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d109      	bne.n	8005ab0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005aa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f002 f8e5 	bl	8007c78 <USBD_LL_PrepareReceive>
 8005aae:	e007      	b.n	8005ac0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ab6:	2340      	movs	r3, #64	; 0x40
 8005ab8:	2101      	movs	r1, #1
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f002 f8dc 	bl	8007c78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b082      	sub	sp, #8
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005ad6:	2181      	movs	r1, #129	; 0x81
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f002 f804 	bl	8007ae6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f001 fffd 	bl	8007ae6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005af4:	2182      	movs	r1, #130	; 0x82
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f001 fff5 	bl	8007ae6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00e      	beq.n	8005b34 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b26:	4618      	mov	r0, r3
 8005b28:	f002 f8e8 	bl	8007cfc <USBD_static_free>
    pdev->pClassData = NULL;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005b52:	2300      	movs	r3, #0
 8005b54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e0af      	b.n	8005cc8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d03f      	beq.n	8005bf4 <USBD_CDC_Setup+0xb4>
 8005b74:	2b20      	cmp	r3, #32
 8005b76:	f040 809f 	bne.w	8005cb8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	88db      	ldrh	r3, [r3, #6]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d02e      	beq.n	8005be0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	b25b      	sxtb	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	da16      	bge.n	8005bba <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	683a      	ldr	r2, [r7, #0]
 8005b96:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005b98:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	88d2      	ldrh	r2, [r2, #6]
 8005b9e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	88db      	ldrh	r3, [r3, #6]
 8005ba4:	2b07      	cmp	r3, #7
 8005ba6:	bf28      	it	cs
 8005ba8:	2307      	movcs	r3, #7
 8005baa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	89fa      	ldrh	r2, [r7, #14]
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f001 fb19 	bl	80071ea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005bb8:	e085      	b.n	8005cc6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	785a      	ldrb	r2, [r3, #1]
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	88db      	ldrh	r3, [r3, #6]
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005bd0:	6939      	ldr	r1, [r7, #16]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	88db      	ldrh	r3, [r3, #6]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f001 fb32 	bl	8007242 <USBD_CtlPrepareRx>
      break;
 8005bde:	e072      	b.n	8005cc6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	7850      	ldrb	r0, [r2, #1]
 8005bec:	2200      	movs	r2, #0
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	4798      	blx	r3
      break;
 8005bf2:	e068      	b.n	8005cc6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	785b      	ldrb	r3, [r3, #1]
 8005bf8:	2b0b      	cmp	r3, #11
 8005bfa:	d852      	bhi.n	8005ca2 <USBD_CDC_Setup+0x162>
 8005bfc:	a201      	add	r2, pc, #4	; (adr r2, 8005c04 <USBD_CDC_Setup+0xc4>)
 8005bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c02:	bf00      	nop
 8005c04:	08005c35 	.word	0x08005c35
 8005c08:	08005cb1 	.word	0x08005cb1
 8005c0c:	08005ca3 	.word	0x08005ca3
 8005c10:	08005ca3 	.word	0x08005ca3
 8005c14:	08005ca3 	.word	0x08005ca3
 8005c18:	08005ca3 	.word	0x08005ca3
 8005c1c:	08005ca3 	.word	0x08005ca3
 8005c20:	08005ca3 	.word	0x08005ca3
 8005c24:	08005ca3 	.word	0x08005ca3
 8005c28:	08005ca3 	.word	0x08005ca3
 8005c2c:	08005c5f 	.word	0x08005c5f
 8005c30:	08005c89 	.word	0x08005c89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d107      	bne.n	8005c50 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c40:	f107 030a 	add.w	r3, r7, #10
 8005c44:	2202      	movs	r2, #2
 8005c46:	4619      	mov	r1, r3
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f001 face 	bl	80071ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c4e:	e032      	b.n	8005cb6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005c50:	6839      	ldr	r1, [r7, #0]
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f001 fa58 	bl	8007108 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	75fb      	strb	r3, [r7, #23]
          break;
 8005c5c:	e02b      	b.n	8005cb6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d107      	bne.n	8005c7a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c6a:	f107 030d 	add.w	r3, r7, #13
 8005c6e:	2201      	movs	r2, #1
 8005c70:	4619      	mov	r1, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 fab9 	bl	80071ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c78:	e01d      	b.n	8005cb6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005c7a:	6839      	ldr	r1, [r7, #0]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 fa43 	bl	8007108 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c82:	2303      	movs	r3, #3
 8005c84:	75fb      	strb	r3, [r7, #23]
          break;
 8005c86:	e016      	b.n	8005cb6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b03      	cmp	r3, #3
 8005c92:	d00f      	beq.n	8005cb4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f001 fa36 	bl	8007108 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005ca0:	e008      	b.n	8005cb4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f001 fa2f 	bl	8007108 <USBD_CtlError>
          ret = USBD_FAIL;
 8005caa:	2303      	movs	r3, #3
 8005cac:	75fb      	strb	r3, [r7, #23]
          break;
 8005cae:	e002      	b.n	8005cb6 <USBD_CDC_Setup+0x176>
          break;
 8005cb0:	bf00      	nop
 8005cb2:	e008      	b.n	8005cc6 <USBD_CDC_Setup+0x186>
          break;
 8005cb4:	bf00      	nop
      }
      break;
 8005cb6:	e006      	b.n	8005cc6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005cb8:	6839      	ldr	r1, [r7, #0]
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f001 fa24 	bl	8007108 <USBD_CtlError>
      ret = USBD_FAIL;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc4:	bf00      	nop
  }

  return (uint8_t)ret;
 8005cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005ce2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e04f      	b.n	8005d92 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cf8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005cfa:	78fa      	ldrb	r2, [r7, #3]
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	3318      	adds	r3, #24
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d029      	beq.n	8005d64 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005d10:	78fa      	ldrb	r2, [r7, #3]
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	3318      	adds	r3, #24
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	78f9      	ldrb	r1, [r7, #3]
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	460b      	mov	r3, r1
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	1a5b      	subs	r3, r3, r1
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4403      	add	r3, r0
 8005d30:	3344      	adds	r3, #68	; 0x44
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d38:	fb01 f303 	mul.w	r3, r1, r3
 8005d3c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d110      	bne.n	8005d64 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005d42:	78fa      	ldrb	r2, [r7, #3]
 8005d44:	6879      	ldr	r1, [r7, #4]
 8005d46:	4613      	mov	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	440b      	add	r3, r1
 8005d50:	3318      	adds	r3, #24
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d56:	78f9      	ldrb	r1, [r7, #3]
 8005d58:	2300      	movs	r3, #0
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f001 ff6a 	bl	8007c36 <USBD_LL_Transmit>
 8005d62:	e015      	b.n	8005d90 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00b      	beq.n	8005d90 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005d8c:	78fa      	ldrb	r2, [r7, #3]
 8005d8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	460b      	mov	r3, r1
 8005da4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e015      	b.n	8005de8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f001 ff7a 	bl	8007cba <USBD_LL_GetRxDataSize>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005de2:	4611      	mov	r1, r2
 8005de4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dfe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e01b      	b.n	8005e42 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d015      	beq.n	8005e40 <USBD_CDC_EP0_RxReady+0x50>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005e1a:	2bff      	cmp	r3, #255	; 0xff
 8005e1c:	d010      	beq.n	8005e40 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005e2c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005e34:	b292      	uxth	r2, r2
 8005e36:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	22ff      	movs	r2, #255	; 0xff
 8005e3c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2243      	movs	r2, #67	; 0x43
 8005e58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005e5a:	4b03      	ldr	r3, [pc, #12]	; (8005e68 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	20000098 	.word	0x20000098

08005e6c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2243      	movs	r2, #67	; 0x43
 8005e78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005e7a:	4b03      	ldr	r3, [pc, #12]	; (8005e88 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	20000054 	.word	0x20000054

08005e8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2243      	movs	r2, #67	; 0x43
 8005e98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005e9a:	4b03      	ldr	r3, [pc, #12]	; (8005ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	200000dc 	.word	0x200000dc

08005eac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	220a      	movs	r2, #10
 8005eb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005eba:	4b03      	ldr	r3, [pc, #12]	; (8005ec8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	20000010 	.word	0x20000010

08005ecc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e004      	b.n	8005eea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b087      	sub	sp, #28
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	60f8      	str	r0, [r7, #12]
 8005efe:	60b9      	str	r1, [r7, #8]
 8005f00:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f08:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e008      	b.n	8005f26 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b085      	sub	sp, #20
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f42:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e004      	b.n	8005f58 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f72:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005f74:	2301      	movs	r3, #1
 8005f76:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e01a      	b.n	8005fbc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d114      	bne.n	8005fba <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005fae:	2181      	movs	r1, #129	; 0x81
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f001 fe40 	bl	8007c36 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e016      	b.n	8006010 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	7c1b      	ldrb	r3, [r3, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d109      	bne.n	8005ffe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f001 fe3e 	bl	8007c78 <USBD_LL_PrepareReceive>
 8005ffc:	e007      	b.n	800600e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006004:	2340      	movs	r3, #64	; 0x40
 8006006:	2101      	movs	r1, #1
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f001 fe35 	bl	8007c78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	4613      	mov	r3, r2
 8006024:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800602c:	2303      	movs	r3, #3
 800602e:	e01f      	b.n	8006070 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	79fa      	ldrb	r2, [r7, #7]
 8006062:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f001 fcb1 	bl	80079cc <USBD_LL_Init>
 800606a:	4603      	mov	r3, r0
 800606c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800606e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006082:	2300      	movs	r3, #0
 8006084:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800608c:	2303      	movs	r3, #3
 800608e:	e016      	b.n	80060be <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00b      	beq.n	80060bc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ac:	f107 020e 	add.w	r2, r7, #14
 80060b0:	4610      	mov	r0, r2
 80060b2:	4798      	blx	r3
 80060b4:	4602      	mov	r2, r0
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b082      	sub	sp, #8
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f001 fcc8 	bl	8007a64 <USBD_LL_Start>
 80060d4:	4603      	mov	r3, r0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	460b      	mov	r3, r1
 80060fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006100:	2303      	movs	r3, #3
 8006102:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800610a:	2b00      	cmp	r3, #0
 800610c:	d009      	beq.n	8006122 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	78fa      	ldrb	r2, [r7, #3]
 8006118:	4611      	mov	r1, r2
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	4798      	blx	r3
 800611e:	4603      	mov	r3, r0
 8006120:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006122:	7bfb      	ldrb	r3, [r7, #15]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800613e:	2b00      	cmp	r3, #0
 8006140:	d007      	beq.n	8006152 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	78fa      	ldrb	r2, [r7, #3]
 800614c:	4611      	mov	r1, r2
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	4798      	blx	r3
  }

  return USBD_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f000 ff90 	bl	8007094 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006182:	461a      	mov	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006190:	f003 031f 	and.w	r3, r3, #31
 8006194:	2b02      	cmp	r3, #2
 8006196:	d01a      	beq.n	80061ce <USBD_LL_SetupStage+0x72>
 8006198:	2b02      	cmp	r3, #2
 800619a:	d822      	bhi.n	80061e2 <USBD_LL_SetupStage+0x86>
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <USBD_LL_SetupStage+0x4a>
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d00a      	beq.n	80061ba <USBD_LL_SetupStage+0x5e>
 80061a4:	e01d      	b.n	80061e2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061ac:	4619      	mov	r1, r3
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fa62 	bl	8006678 <USBD_StdDevReq>
 80061b4:	4603      	mov	r3, r0
 80061b6:	73fb      	strb	r3, [r7, #15]
      break;
 80061b8:	e020      	b.n	80061fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fac6 	bl	8006754 <USBD_StdItfReq>
 80061c8:	4603      	mov	r3, r0
 80061ca:	73fb      	strb	r3, [r7, #15]
      break;
 80061cc:	e016      	b.n	80061fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061d4:	4619      	mov	r1, r3
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fb05 	bl	80067e6 <USBD_StdEPReq>
 80061dc:	4603      	mov	r3, r0
 80061de:	73fb      	strb	r3, [r7, #15]
      break;
 80061e0:	e00c      	b.n	80061fc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f001 fc97 	bl	8007b24 <USBD_LL_StallEP>
 80061f6:	4603      	mov	r3, r0
 80061f8:	73fb      	strb	r3, [r7, #15]
      break;
 80061fa:	bf00      	nop
  }

  return ret;
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b086      	sub	sp, #24
 800620a:	af00      	add	r7, sp, #0
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	460b      	mov	r3, r1
 8006210:	607a      	str	r2, [r7, #4]
 8006212:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006214:	7afb      	ldrb	r3, [r7, #11]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d138      	bne.n	800628c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006220:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006228:	2b03      	cmp	r3, #3
 800622a:	d14a      	bne.n	80062c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	429a      	cmp	r2, r3
 8006236:	d913      	bls.n	8006260 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	1ad2      	subs	r2, r2, r3
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	4293      	cmp	r3, r2
 8006250:	bf28      	it	cs
 8006252:	4613      	movcs	r3, r2
 8006254:	461a      	mov	r2, r3
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f001 f80f 	bl	800727c <USBD_CtlContinueRx>
 800625e:	e030      	b.n	80062c2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b03      	cmp	r3, #3
 800626a:	d10b      	bne.n	8006284 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f001 f80a 	bl	800729e <USBD_CtlSendStatus>
 800628a:	e01a      	b.n	80062c2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b03      	cmp	r3, #3
 8006296:	d114      	bne.n	80062c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00e      	beq.n	80062c2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	7afa      	ldrb	r2, [r7, #11]
 80062ae:	4611      	mov	r1, r2
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	4798      	blx	r3
 80062b4:	4603      	mov	r3, r0
 80062b6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80062be:	7dfb      	ldrb	r3, [r7, #23]
 80062c0:	e000      	b.n	80062c4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	460b      	mov	r3, r1
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80062da:	7afb      	ldrb	r3, [r7, #11]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d16b      	bne.n	80063b8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3314      	adds	r3, #20
 80062e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d156      	bne.n	800639e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d914      	bls.n	8006326 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	1ad2      	subs	r2, r2, r3
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	461a      	mov	r2, r3
 8006310:	6879      	ldr	r1, [r7, #4]
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 ff84 	bl	8007220 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006318:	2300      	movs	r3, #0
 800631a:	2200      	movs	r2, #0
 800631c:	2100      	movs	r1, #0
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f001 fcaa 	bl	8007c78 <USBD_LL_PrepareReceive>
 8006324:	e03b      	b.n	800639e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	429a      	cmp	r2, r3
 8006330:	d11c      	bne.n	800636c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800633a:	429a      	cmp	r2, r3
 800633c:	d316      	bcc.n	800636c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006348:	429a      	cmp	r2, r3
 800634a:	d20f      	bcs.n	800636c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800634c:	2200      	movs	r2, #0
 800634e:	2100      	movs	r1, #0
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 ff65 	bl	8007220 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800635e:	2300      	movs	r3, #0
 8006360:	2200      	movs	r2, #0
 8006362:	2100      	movs	r1, #0
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f001 fc87 	bl	8007c78 <USBD_LL_PrepareReceive>
 800636a:	e018      	b.n	800639e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b03      	cmp	r3, #3
 8006376:	d10b      	bne.n	8006390 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d005      	beq.n	8006390 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006390:	2180      	movs	r1, #128	; 0x80
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f001 fbc6 	bl	8007b24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 ff93 	bl	80072c4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d122      	bne.n	80063ee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f7ff fe98 	bl	80060de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80063b6:	e01a      	b.n	80063ee <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d114      	bne.n	80063ee <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00e      	beq.n	80063ee <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	7afa      	ldrb	r2, [r7, #11]
 80063da:	4611      	mov	r1, r2
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	4798      	blx	r3
 80063e0:	4603      	mov	r3, r0
 80063e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80063e4:	7dfb      	ldrb	r3, [r7, #23]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80063ea:	7dfb      	ldrb	r3, [r7, #23]
 80063ec:	e000      	b.n	80063f0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006428:	2303      	movs	r3, #3
 800642a:	e02f      	b.n	800648c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00f      	beq.n	8006456 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d009      	beq.n	8006456 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	6852      	ldr	r2, [r2, #4]
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	4611      	mov	r1, r2
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006456:	2340      	movs	r3, #64	; 0x40
 8006458:	2200      	movs	r2, #0
 800645a:	2100      	movs	r1, #0
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f001 fb1c 	bl	8007a9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2240      	movs	r2, #64	; 0x40
 800646e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006472:	2340      	movs	r3, #64	; 0x40
 8006474:	2200      	movs	r2, #0
 8006476:	2180      	movs	r1, #128	; 0x80
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f001 fb0e 	bl	8007a9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2240      	movs	r2, #64	; 0x40
 8006488:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	78fa      	ldrb	r2, [r7, #3]
 80064a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2204      	movs	r2, #4
 80064ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d106      	bne.n	8006502 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006522:	2303      	movs	r3, #3
 8006524:	e012      	b.n	800654c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b03      	cmp	r3, #3
 8006530:	d10b      	bne.n	800654a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d005      	beq.n	800654a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800656a:	2303      	movs	r3, #3
 800656c:	e014      	b.n	8006598 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b03      	cmp	r3, #3
 8006578:	d10d      	bne.n	8006596 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d007      	beq.n	8006596 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	78fa      	ldrb	r2, [r7, #3]
 8006590:	4611      	mov	r1, r2
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e014      	b.n	80065e4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d10d      	bne.n	80065e2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d007      	beq.n	80065e2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065da:	78fa      	ldrb	r2, [r7, #3]
 80065dc:	4611      	mov	r1, r2
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006618:	2b00      	cmp	r3, #0
 800661a:	d009      	beq.n	8006630 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6852      	ldr	r2, [r2, #4]
 8006628:	b2d2      	uxtb	r2, r2
 800662a:	4611      	mov	r1, r2
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	4798      	blx	r3
  }

  return USBD_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800663a:	b480      	push	{r7}
 800663c:	b087      	sub	sp, #28
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	3301      	adds	r3, #1
 8006650:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006658:	8a3b      	ldrh	r3, [r7, #16]
 800665a:	021b      	lsls	r3, r3, #8
 800665c:	b21a      	sxth	r2, r3
 800665e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006662:	4313      	orrs	r3, r2
 8006664:	b21b      	sxth	r3, r3
 8006666:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006668:	89fb      	ldrh	r3, [r7, #14]
}
 800666a:	4618      	mov	r0, r3
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
	...

08006678 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006682:	2300      	movs	r3, #0
 8006684:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800668e:	2b40      	cmp	r3, #64	; 0x40
 8006690:	d005      	beq.n	800669e <USBD_StdDevReq+0x26>
 8006692:	2b40      	cmp	r3, #64	; 0x40
 8006694:	d853      	bhi.n	800673e <USBD_StdDevReq+0xc6>
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00b      	beq.n	80066b2 <USBD_StdDevReq+0x3a>
 800669a:	2b20      	cmp	r3, #32
 800669c:	d14f      	bne.n	800673e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
 80066ac:	4603      	mov	r3, r0
 80066ae:	73fb      	strb	r3, [r7, #15]
      break;
 80066b0:	e04a      	b.n	8006748 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	785b      	ldrb	r3, [r3, #1]
 80066b6:	2b09      	cmp	r3, #9
 80066b8:	d83b      	bhi.n	8006732 <USBD_StdDevReq+0xba>
 80066ba:	a201      	add	r2, pc, #4	; (adr r2, 80066c0 <USBD_StdDevReq+0x48>)
 80066bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c0:	08006715 	.word	0x08006715
 80066c4:	08006729 	.word	0x08006729
 80066c8:	08006733 	.word	0x08006733
 80066cc:	0800671f 	.word	0x0800671f
 80066d0:	08006733 	.word	0x08006733
 80066d4:	080066f3 	.word	0x080066f3
 80066d8:	080066e9 	.word	0x080066e9
 80066dc:	08006733 	.word	0x08006733
 80066e0:	0800670b 	.word	0x0800670b
 80066e4:	080066fd 	.word	0x080066fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f9de 	bl	8006aac <USBD_GetDescriptor>
          break;
 80066f0:	e024      	b.n	800673c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80066f2:	6839      	ldr	r1, [r7, #0]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fb43 	bl	8006d80 <USBD_SetAddress>
          break;
 80066fa:	e01f      	b.n	800673c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fb82 	bl	8006e08 <USBD_SetConfig>
 8006704:	4603      	mov	r3, r0
 8006706:	73fb      	strb	r3, [r7, #15]
          break;
 8006708:	e018      	b.n	800673c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800670a:	6839      	ldr	r1, [r7, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fc21 	bl	8006f54 <USBD_GetConfig>
          break;
 8006712:	e013      	b.n	800673c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006714:	6839      	ldr	r1, [r7, #0]
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fc52 	bl	8006fc0 <USBD_GetStatus>
          break;
 800671c:	e00e      	b.n	800673c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fc81 	bl	8007028 <USBD_SetFeature>
          break;
 8006726:	e009      	b.n	800673c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fc90 	bl	8007050 <USBD_ClrFeature>
          break;
 8006730:	e004      	b.n	800673c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006732:	6839      	ldr	r1, [r7, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fce7 	bl	8007108 <USBD_CtlError>
          break;
 800673a:	bf00      	nop
      }
      break;
 800673c:	e004      	b.n	8006748 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fce1 	bl	8007108 <USBD_CtlError>
      break;
 8006746:	bf00      	nop
  }

  return ret;
 8006748:	7bfb      	ldrb	r3, [r7, #15]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop

08006754 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800676a:	2b40      	cmp	r3, #64	; 0x40
 800676c:	d005      	beq.n	800677a <USBD_StdItfReq+0x26>
 800676e:	2b40      	cmp	r3, #64	; 0x40
 8006770:	d82f      	bhi.n	80067d2 <USBD_StdItfReq+0x7e>
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <USBD_StdItfReq+0x26>
 8006776:	2b20      	cmp	r3, #32
 8006778:	d12b      	bne.n	80067d2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006780:	b2db      	uxtb	r3, r3
 8006782:	3b01      	subs	r3, #1
 8006784:	2b02      	cmp	r3, #2
 8006786:	d81d      	bhi.n	80067c4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	889b      	ldrh	r3, [r3, #4]
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b01      	cmp	r3, #1
 8006790:	d813      	bhi.n	80067ba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	4798      	blx	r3
 80067a0:	4603      	mov	r3, r0
 80067a2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	88db      	ldrh	r3, [r3, #6]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d110      	bne.n	80067ce <USBD_StdItfReq+0x7a>
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10d      	bne.n	80067ce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fd73 	bl	800729e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80067b8:	e009      	b.n	80067ce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80067ba:	6839      	ldr	r1, [r7, #0]
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fca3 	bl	8007108 <USBD_CtlError>
          break;
 80067c2:	e004      	b.n	80067ce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fc9e 	bl	8007108 <USBD_CtlError>
          break;
 80067cc:	e000      	b.n	80067d0 <USBD_StdItfReq+0x7c>
          break;
 80067ce:	bf00      	nop
      }
      break;
 80067d0:	e004      	b.n	80067dc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fc97 	bl	8007108 <USBD_CtlError>
      break;
 80067da:	bf00      	nop
  }

  return ret;
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	889b      	ldrh	r3, [r3, #4]
 80067f8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006802:	2b40      	cmp	r3, #64	; 0x40
 8006804:	d007      	beq.n	8006816 <USBD_StdEPReq+0x30>
 8006806:	2b40      	cmp	r3, #64	; 0x40
 8006808:	f200 8145 	bhi.w	8006a96 <USBD_StdEPReq+0x2b0>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00c      	beq.n	800682a <USBD_StdEPReq+0x44>
 8006810:	2b20      	cmp	r3, #32
 8006812:	f040 8140 	bne.w	8006a96 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	6839      	ldr	r1, [r7, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	4798      	blx	r3
 8006824:	4603      	mov	r3, r0
 8006826:	73fb      	strb	r3, [r7, #15]
      break;
 8006828:	e13a      	b.n	8006aa0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	785b      	ldrb	r3, [r3, #1]
 800682e:	2b03      	cmp	r3, #3
 8006830:	d007      	beq.n	8006842 <USBD_StdEPReq+0x5c>
 8006832:	2b03      	cmp	r3, #3
 8006834:	f300 8129 	bgt.w	8006a8a <USBD_StdEPReq+0x2a4>
 8006838:	2b00      	cmp	r3, #0
 800683a:	d07f      	beq.n	800693c <USBD_StdEPReq+0x156>
 800683c:	2b01      	cmp	r3, #1
 800683e:	d03c      	beq.n	80068ba <USBD_StdEPReq+0xd4>
 8006840:	e123      	b.n	8006a8a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d002      	beq.n	8006854 <USBD_StdEPReq+0x6e>
 800684e:	2b03      	cmp	r3, #3
 8006850:	d016      	beq.n	8006880 <USBD_StdEPReq+0x9a>
 8006852:	e02c      	b.n	80068ae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006854:	7bbb      	ldrb	r3, [r7, #14]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00d      	beq.n	8006876 <USBD_StdEPReq+0x90>
 800685a:	7bbb      	ldrb	r3, [r7, #14]
 800685c:	2b80      	cmp	r3, #128	; 0x80
 800685e:	d00a      	beq.n	8006876 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006860:	7bbb      	ldrb	r3, [r7, #14]
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f001 f95d 	bl	8007b24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800686a:	2180      	movs	r1, #128	; 0x80
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f001 f959 	bl	8007b24 <USBD_LL_StallEP>
 8006872:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006874:	e020      	b.n	80068b8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fc45 	bl	8007108 <USBD_CtlError>
              break;
 800687e:	e01b      	b.n	80068b8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	885b      	ldrh	r3, [r3, #2]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10e      	bne.n	80068a6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006888:	7bbb      	ldrb	r3, [r7, #14]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00b      	beq.n	80068a6 <USBD_StdEPReq+0xc0>
 800688e:	7bbb      	ldrb	r3, [r7, #14]
 8006890:	2b80      	cmp	r3, #128	; 0x80
 8006892:	d008      	beq.n	80068a6 <USBD_StdEPReq+0xc0>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	88db      	ldrh	r3, [r3, #6]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d104      	bne.n	80068a6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800689c:	7bbb      	ldrb	r3, [r7, #14]
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 f93f 	bl	8007b24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fcf9 	bl	800729e <USBD_CtlSendStatus>

              break;
 80068ac:	e004      	b.n	80068b8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fc29 	bl	8007108 <USBD_CtlError>
              break;
 80068b6:	bf00      	nop
          }
          break;
 80068b8:	e0ec      	b.n	8006a94 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d002      	beq.n	80068cc <USBD_StdEPReq+0xe6>
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d016      	beq.n	80068f8 <USBD_StdEPReq+0x112>
 80068ca:	e030      	b.n	800692e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068cc:	7bbb      	ldrb	r3, [r7, #14]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00d      	beq.n	80068ee <USBD_StdEPReq+0x108>
 80068d2:	7bbb      	ldrb	r3, [r7, #14]
 80068d4:	2b80      	cmp	r3, #128	; 0x80
 80068d6:	d00a      	beq.n	80068ee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068d8:	7bbb      	ldrb	r3, [r7, #14]
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 f921 	bl	8007b24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068e2:	2180      	movs	r1, #128	; 0x80
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f001 f91d 	bl	8007b24 <USBD_LL_StallEP>
 80068ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068ec:	e025      	b.n	800693a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fc09 	bl	8007108 <USBD_CtlError>
              break;
 80068f6:	e020      	b.n	800693a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	885b      	ldrh	r3, [r3, #2]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d11b      	bne.n	8006938 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006900:	7bbb      	ldrb	r3, [r7, #14]
 8006902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006906:	2b00      	cmp	r3, #0
 8006908:	d004      	beq.n	8006914 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800690a:	7bbb      	ldrb	r3, [r7, #14]
 800690c:	4619      	mov	r1, r3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 f927 	bl	8007b62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fcc2 	bl	800729e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	4798      	blx	r3
 8006928:	4603      	mov	r3, r0
 800692a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800692c:	e004      	b.n	8006938 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fbe9 	bl	8007108 <USBD_CtlError>
              break;
 8006936:	e000      	b.n	800693a <USBD_StdEPReq+0x154>
              break;
 8006938:	bf00      	nop
          }
          break;
 800693a:	e0ab      	b.n	8006a94 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b02      	cmp	r3, #2
 8006946:	d002      	beq.n	800694e <USBD_StdEPReq+0x168>
 8006948:	2b03      	cmp	r3, #3
 800694a:	d032      	beq.n	80069b2 <USBD_StdEPReq+0x1cc>
 800694c:	e097      	b.n	8006a7e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800694e:	7bbb      	ldrb	r3, [r7, #14]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d007      	beq.n	8006964 <USBD_StdEPReq+0x17e>
 8006954:	7bbb      	ldrb	r3, [r7, #14]
 8006956:	2b80      	cmp	r3, #128	; 0x80
 8006958:	d004      	beq.n	8006964 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fbd3 	bl	8007108 <USBD_CtlError>
                break;
 8006962:	e091      	b.n	8006a88 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006964:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006968:	2b00      	cmp	r3, #0
 800696a:	da0b      	bge.n	8006984 <USBD_StdEPReq+0x19e>
 800696c:	7bbb      	ldrb	r3, [r7, #14]
 800696e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006972:	4613      	mov	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	3310      	adds	r3, #16
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	4413      	add	r3, r2
 8006980:	3304      	adds	r3, #4
 8006982:	e00b      	b.n	800699c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	4413      	add	r3, r2
 800699a:	3304      	adds	r3, #4
 800699c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2202      	movs	r2, #2
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fc1d 	bl	80071ea <USBD_CtlSendData>
              break;
 80069b0:	e06a      	b.n	8006a88 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80069b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	da11      	bge.n	80069de <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	f003 020f 	and.w	r2, r3, #15
 80069c0:	6879      	ldr	r1, [r7, #4]
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	3324      	adds	r3, #36	; 0x24
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d117      	bne.n	8006a04 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fb96 	bl	8007108 <USBD_CtlError>
                  break;
 80069dc:	e054      	b.n	8006a88 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80069de:	7bbb      	ldrb	r3, [r7, #14]
 80069e0:	f003 020f 	and.w	r2, r3, #15
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	440b      	add	r3, r1
 80069f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d104      	bne.n	8006a04 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fb83 	bl	8007108 <USBD_CtlError>
                  break;
 8006a02:	e041      	b.n	8006a88 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	da0b      	bge.n	8006a24 <USBD_StdEPReq+0x23e>
 8006a0c:	7bbb      	ldrb	r3, [r7, #14]
 8006a0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a12:	4613      	mov	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	3310      	adds	r3, #16
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	4413      	add	r3, r2
 8006a20:	3304      	adds	r3, #4
 8006a22:	e00b      	b.n	8006a3c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a24:	7bbb      	ldrb	r3, [r7, #14]
 8006a26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	4413      	add	r3, r2
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a3e:	7bbb      	ldrb	r3, [r7, #14]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d002      	beq.n	8006a4a <USBD_StdEPReq+0x264>
 8006a44:	7bbb      	ldrb	r3, [r7, #14]
 8006a46:	2b80      	cmp	r3, #128	; 0x80
 8006a48:	d103      	bne.n	8006a52 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	e00e      	b.n	8006a70 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a52:	7bbb      	ldrb	r3, [r7, #14]
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f001 f8a2 	bl	8007ba0 <USBD_LL_IsStallEP>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2201      	movs	r2, #1
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	e002      	b.n	8006a70 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2202      	movs	r2, #2
 8006a74:	4619      	mov	r1, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fbb7 	bl	80071ea <USBD_CtlSendData>
              break;
 8006a7c:	e004      	b.n	8006a88 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fb41 	bl	8007108 <USBD_CtlError>
              break;
 8006a86:	bf00      	nop
          }
          break;
 8006a88:	e004      	b.n	8006a94 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fb3b 	bl	8007108 <USBD_CtlError>
          break;
 8006a92:	bf00      	nop
      }
      break;
 8006a94:	e004      	b.n	8006aa0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fb35 	bl	8007108 <USBD_CtlError>
      break;
 8006a9e:	bf00      	nop
  }

  return ret;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	885b      	ldrh	r3, [r3, #2]
 8006ac6:	0a1b      	lsrs	r3, r3, #8
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	3b01      	subs	r3, #1
 8006acc:	2b06      	cmp	r3, #6
 8006ace:	f200 8128 	bhi.w	8006d22 <USBD_GetDescriptor+0x276>
 8006ad2:	a201      	add	r2, pc, #4	; (adr r2, 8006ad8 <USBD_GetDescriptor+0x2c>)
 8006ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad8:	08006af5 	.word	0x08006af5
 8006adc:	08006b0d 	.word	0x08006b0d
 8006ae0:	08006b4d 	.word	0x08006b4d
 8006ae4:	08006d23 	.word	0x08006d23
 8006ae8:	08006d23 	.word	0x08006d23
 8006aec:	08006cc3 	.word	0x08006cc3
 8006af0:	08006cef 	.word	0x08006cef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	7c12      	ldrb	r2, [r2, #16]
 8006b00:	f107 0108 	add.w	r1, r7, #8
 8006b04:	4610      	mov	r0, r2
 8006b06:	4798      	blx	r3
 8006b08:	60f8      	str	r0, [r7, #12]
      break;
 8006b0a:	e112      	b.n	8006d32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	7c1b      	ldrb	r3, [r3, #16]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10d      	bne.n	8006b30 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1c:	f107 0208 	add.w	r2, r7, #8
 8006b20:	4610      	mov	r0, r2
 8006b22:	4798      	blx	r3
 8006b24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3301      	adds	r3, #1
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b2e:	e100      	b.n	8006d32 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	f107 0208 	add.w	r2, r7, #8
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	4798      	blx	r3
 8006b40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3301      	adds	r3, #1
 8006b46:	2202      	movs	r2, #2
 8006b48:	701a      	strb	r2, [r3, #0]
      break;
 8006b4a:	e0f2      	b.n	8006d32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	885b      	ldrh	r3, [r3, #2]
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b05      	cmp	r3, #5
 8006b54:	f200 80ac 	bhi.w	8006cb0 <USBD_GetDescriptor+0x204>
 8006b58:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <USBD_GetDescriptor+0xb4>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006b79 	.word	0x08006b79
 8006b64:	08006bad 	.word	0x08006bad
 8006b68:	08006be1 	.word	0x08006be1
 8006b6c:	08006c15 	.word	0x08006c15
 8006b70:	08006c49 	.word	0x08006c49
 8006b74:	08006c7d 	.word	0x08006c7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00b      	beq.n	8006b9c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	7c12      	ldrb	r2, [r2, #16]
 8006b90:	f107 0108 	add.w	r1, r7, #8
 8006b94:	4610      	mov	r0, r2
 8006b96:	4798      	blx	r3
 8006b98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b9a:	e091      	b.n	8006cc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fab2 	bl	8007108 <USBD_CtlError>
            err++;
 8006ba4:	7afb      	ldrb	r3, [r7, #11]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	72fb      	strb	r3, [r7, #11]
          break;
 8006baa:	e089      	b.n	8006cc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00b      	beq.n	8006bd0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	7c12      	ldrb	r2, [r2, #16]
 8006bc4:	f107 0108 	add.w	r1, r7, #8
 8006bc8:	4610      	mov	r0, r2
 8006bca:	4798      	blx	r3
 8006bcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bce:	e077      	b.n	8006cc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fa98 	bl	8007108 <USBD_CtlError>
            err++;
 8006bd8:	7afb      	ldrb	r3, [r7, #11]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	72fb      	strb	r3, [r7, #11]
          break;
 8006bde:	e06f      	b.n	8006cc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00b      	beq.n	8006c04 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	7c12      	ldrb	r2, [r2, #16]
 8006bf8:	f107 0108 	add.w	r1, r7, #8
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	4798      	blx	r3
 8006c00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c02:	e05d      	b.n	8006cc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fa7e 	bl	8007108 <USBD_CtlError>
            err++;
 8006c0c:	7afb      	ldrb	r3, [r7, #11]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	72fb      	strb	r3, [r7, #11]
          break;
 8006c12:	e055      	b.n	8006cc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00b      	beq.n	8006c38 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	7c12      	ldrb	r2, [r2, #16]
 8006c2c:	f107 0108 	add.w	r1, r7, #8
 8006c30:	4610      	mov	r0, r2
 8006c32:	4798      	blx	r3
 8006c34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c36:	e043      	b.n	8006cc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c38:	6839      	ldr	r1, [r7, #0]
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fa64 	bl	8007108 <USBD_CtlError>
            err++;
 8006c40:	7afb      	ldrb	r3, [r7, #11]
 8006c42:	3301      	adds	r3, #1
 8006c44:	72fb      	strb	r3, [r7, #11]
          break;
 8006c46:	e03b      	b.n	8006cc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00b      	beq.n	8006c6c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	7c12      	ldrb	r2, [r2, #16]
 8006c60:	f107 0108 	add.w	r1, r7, #8
 8006c64:	4610      	mov	r0, r2
 8006c66:	4798      	blx	r3
 8006c68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c6a:	e029      	b.n	8006cc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fa4a 	bl	8007108 <USBD_CtlError>
            err++;
 8006c74:	7afb      	ldrb	r3, [r7, #11]
 8006c76:	3301      	adds	r3, #1
 8006c78:	72fb      	strb	r3, [r7, #11]
          break;
 8006c7a:	e021      	b.n	8006cc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00b      	beq.n	8006ca0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	7c12      	ldrb	r2, [r2, #16]
 8006c94:	f107 0108 	add.w	r1, r7, #8
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4798      	blx	r3
 8006c9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c9e:	e00f      	b.n	8006cc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ca0:	6839      	ldr	r1, [r7, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fa30 	bl	8007108 <USBD_CtlError>
            err++;
 8006ca8:	7afb      	ldrb	r3, [r7, #11]
 8006caa:	3301      	adds	r3, #1
 8006cac:	72fb      	strb	r3, [r7, #11]
          break;
 8006cae:	e007      	b.n	8006cc0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fa28 	bl	8007108 <USBD_CtlError>
          err++;
 8006cb8:	7afb      	ldrb	r3, [r7, #11]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006cbe:	bf00      	nop
      }
      break;
 8006cc0:	e037      	b.n	8006d32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	7c1b      	ldrb	r3, [r3, #16]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d109      	bne.n	8006cde <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd2:	f107 0208 	add.w	r2, r7, #8
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	4798      	blx	r3
 8006cda:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cdc:	e029      	b.n	8006d32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fa11 	bl	8007108 <USBD_CtlError>
        err++;
 8006ce6:	7afb      	ldrb	r3, [r7, #11]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	72fb      	strb	r3, [r7, #11]
      break;
 8006cec:	e021      	b.n	8006d32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	7c1b      	ldrb	r3, [r3, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10d      	bne.n	8006d12 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfe:	f107 0208 	add.w	r2, r7, #8
 8006d02:	4610      	mov	r0, r2
 8006d04:	4798      	blx	r3
 8006d06:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	2207      	movs	r2, #7
 8006d0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d10:	e00f      	b.n	8006d32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d12:	6839      	ldr	r1, [r7, #0]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f9f7 	bl	8007108 <USBD_CtlError>
        err++;
 8006d1a:	7afb      	ldrb	r3, [r7, #11]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	72fb      	strb	r3, [r7, #11]
      break;
 8006d20:	e007      	b.n	8006d32 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f9ef 	bl	8007108 <USBD_CtlError>
      err++;
 8006d2a:	7afb      	ldrb	r3, [r7, #11]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	72fb      	strb	r3, [r7, #11]
      break;
 8006d30:	bf00      	nop
  }

  if (err != 0U)
 8006d32:	7afb      	ldrb	r3, [r7, #11]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d11e      	bne.n	8006d76 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	88db      	ldrh	r3, [r3, #6]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d016      	beq.n	8006d6e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006d40:	893b      	ldrh	r3, [r7, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00e      	beq.n	8006d64 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	88da      	ldrh	r2, [r3, #6]
 8006d4a:	893b      	ldrh	r3, [r7, #8]
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	bf28      	it	cs
 8006d50:	4613      	movcs	r3, r2
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d56:	893b      	ldrh	r3, [r7, #8]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	68f9      	ldr	r1, [r7, #12]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fa44 	bl	80071ea <USBD_CtlSendData>
 8006d62:	e009      	b.n	8006d78 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f9ce 	bl	8007108 <USBD_CtlError>
 8006d6c:	e004      	b.n	8006d78 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fa95 	bl	800729e <USBD_CtlSendStatus>
 8006d74:	e000      	b.n	8006d78 <USBD_GetDescriptor+0x2cc>
    return;
 8006d76:	bf00      	nop
  }
}
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop

08006d80 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	889b      	ldrh	r3, [r3, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d131      	bne.n	8006df6 <USBD_SetAddress+0x76>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	88db      	ldrh	r3, [r3, #6]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d12d      	bne.n	8006df6 <USBD_SetAddress+0x76>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	885b      	ldrh	r3, [r3, #2]
 8006d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8006da0:	d829      	bhi.n	8006df6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	885b      	ldrh	r3, [r3, #2]
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d104      	bne.n	8006dc4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f9a3 	bl	8007108 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dc2:	e01d      	b.n	8006e00 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	7bfa      	ldrb	r2, [r7, #15]
 8006dc8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 ff11 	bl	8007bf8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fa61 	bl	800729e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d004      	beq.n	8006dec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2202      	movs	r2, #2
 8006de6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dea:	e009      	b.n	8006e00 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df4:	e004      	b.n	8006e00 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f985 	bl	8007108 <USBD_CtlError>
  }
}
 8006dfe:	bf00      	nop
 8006e00:	bf00      	nop
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	885b      	ldrh	r3, [r3, #2]
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	4b4c      	ldr	r3, [pc, #304]	; (8006f50 <USBD_SetConfig+0x148>)
 8006e1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e20:	4b4b      	ldr	r3, [pc, #300]	; (8006f50 <USBD_SetConfig+0x148>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d905      	bls.n	8006e34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 f96c 	bl	8007108 <USBD_CtlError>
    return USBD_FAIL;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e088      	b.n	8006f46 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d002      	beq.n	8006e46 <USBD_SetConfig+0x3e>
 8006e40:	2b03      	cmp	r3, #3
 8006e42:	d025      	beq.n	8006e90 <USBD_SetConfig+0x88>
 8006e44:	e071      	b.n	8006f2a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006e46:	4b42      	ldr	r3, [pc, #264]	; (8006f50 <USBD_SetConfig+0x148>)
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d01c      	beq.n	8006e88 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006e4e:	4b40      	ldr	r3, [pc, #256]	; (8006f50 <USBD_SetConfig+0x148>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e58:	4b3d      	ldr	r3, [pc, #244]	; (8006f50 <USBD_SetConfig+0x148>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7ff f948 	bl	80060f4 <USBD_SetClassConfig>
 8006e64:	4603      	mov	r3, r0
 8006e66:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d004      	beq.n	8006e78 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f949 	bl	8007108 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e76:	e065      	b.n	8006f44 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fa10 	bl	800729e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2203      	movs	r2, #3
 8006e82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e86:	e05d      	b.n	8006f44 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fa08 	bl	800729e <USBD_CtlSendStatus>
      break;
 8006e8e:	e059      	b.n	8006f44 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006e90:	4b2f      	ldr	r3, [pc, #188]	; (8006f50 <USBD_SetConfig+0x148>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d112      	bne.n	8006ebe <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006ea0:	4b2b      	ldr	r3, [pc, #172]	; (8006f50 <USBD_SetConfig+0x148>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006eaa:	4b29      	ldr	r3, [pc, #164]	; (8006f50 <USBD_SetConfig+0x148>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7ff f93b 	bl	800612c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f9f1 	bl	800729e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ebc:	e042      	b.n	8006f44 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006ebe:	4b24      	ldr	r3, [pc, #144]	; (8006f50 <USBD_SetConfig+0x148>)
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d02a      	beq.n	8006f22 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f7ff f929 	bl	800612c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006eda:	4b1d      	ldr	r3, [pc, #116]	; (8006f50 <USBD_SetConfig+0x148>)
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ee4:	4b1a      	ldr	r3, [pc, #104]	; (8006f50 <USBD_SetConfig+0x148>)
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7ff f902 	bl	80060f4 <USBD_SetClassConfig>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00f      	beq.n	8006f1a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f903 	bl	8007108 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff f90e 	bl	800612c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f18:	e014      	b.n	8006f44 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f9bf 	bl	800729e <USBD_CtlSendStatus>
      break;
 8006f20:	e010      	b.n	8006f44 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f9bb 	bl	800729e <USBD_CtlSendStatus>
      break;
 8006f28:	e00c      	b.n	8006f44 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f8eb 	bl	8007108 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f32:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <USBD_SetConfig+0x148>)
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f7ff f8f7 	bl	800612c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	73fb      	strb	r3, [r7, #15]
      break;
 8006f42:	bf00      	nop
  }

  return ret;
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	200007f8 	.word	0x200007f8

08006f54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	88db      	ldrh	r3, [r3, #6]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d004      	beq.n	8006f70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 f8cd 	bl	8007108 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f6e:	e023      	b.n	8006fb8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	dc02      	bgt.n	8006f82 <USBD_GetConfig+0x2e>
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	dc03      	bgt.n	8006f88 <USBD_GetConfig+0x34>
 8006f80:	e015      	b.n	8006fae <USBD_GetConfig+0x5a>
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d00b      	beq.n	8006f9e <USBD_GetConfig+0x4a>
 8006f86:	e012      	b.n	8006fae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	3308      	adds	r3, #8
 8006f92:	2201      	movs	r2, #1
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f927 	bl	80071ea <USBD_CtlSendData>
        break;
 8006f9c:	e00c      	b.n	8006fb8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f91f 	bl	80071ea <USBD_CtlSendData>
        break;
 8006fac:	e004      	b.n	8006fb8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f8a9 	bl	8007108 <USBD_CtlError>
        break;
 8006fb6:	bf00      	nop
}
 8006fb8:	bf00      	nop
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d81e      	bhi.n	8007016 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	88db      	ldrh	r3, [r3, #6]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d004      	beq.n	8006fea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f890 	bl	8007108 <USBD_CtlError>
        break;
 8006fe8:	e01a      	b.n	8007020 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d005      	beq.n	8007006 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	f043 0202 	orr.w	r2, r3, #2
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	330c      	adds	r3, #12
 800700a:	2202      	movs	r2, #2
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f8eb 	bl	80071ea <USBD_CtlSendData>
      break;
 8007014:	e004      	b.n	8007020 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f875 	bl	8007108 <USBD_CtlError>
      break;
 800701e:	bf00      	nop
  }
}
 8007020:	bf00      	nop
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	885b      	ldrh	r3, [r3, #2]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d106      	bne.n	8007048 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f92b 	bl	800729e <USBD_CtlSendStatus>
  }
}
 8007048:	bf00      	nop
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007060:	b2db      	uxtb	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	2b02      	cmp	r3, #2
 8007066:	d80b      	bhi.n	8007080 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	885b      	ldrh	r3, [r3, #2]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d10c      	bne.n	800708a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f910 	bl	800729e <USBD_CtlSendStatus>
      }
      break;
 800707e:	e004      	b.n	800708a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f840 	bl	8007108 <USBD_CtlError>
      break;
 8007088:	e000      	b.n	800708c <USBD_ClrFeature+0x3c>
      break;
 800708a:	bf00      	nop
  }
}
 800708c:	bf00      	nop
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	781a      	ldrb	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3301      	adds	r3, #1
 80070ae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	781a      	ldrb	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	3301      	adds	r3, #1
 80070bc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f7ff fabb 	bl	800663a <SWAPBYTE>
 80070c4:	4603      	mov	r3, r0
 80070c6:	461a      	mov	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3301      	adds	r3, #1
 80070d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3301      	adds	r3, #1
 80070d6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f7ff faae 	bl	800663a <SWAPBYTE>
 80070de:	4603      	mov	r3, r0
 80070e0:	461a      	mov	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3301      	adds	r3, #1
 80070ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	3301      	adds	r3, #1
 80070f0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f7ff faa1 	bl	800663a <SWAPBYTE>
 80070f8:	4603      	mov	r3, r0
 80070fa:	461a      	mov	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	80da      	strh	r2, [r3, #6]
}
 8007100:	bf00      	nop
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007112:	2180      	movs	r1, #128	; 0x80
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fd05 	bl	8007b24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800711a:	2100      	movs	r1, #0
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fd01 	bl	8007b24 <USBD_LL_StallEP>
}
 8007122:	bf00      	nop
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b086      	sub	sp, #24
 800712e:	af00      	add	r7, sp, #0
 8007130:	60f8      	str	r0, [r7, #12]
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d036      	beq.n	80071ae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007144:	6938      	ldr	r0, [r7, #16]
 8007146:	f000 f836 	bl	80071b6 <USBD_GetLen>
 800714a:	4603      	mov	r3, r0
 800714c:	3301      	adds	r3, #1
 800714e:	b29b      	uxth	r3, r3
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	b29a      	uxth	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007158:	7dfb      	ldrb	r3, [r7, #23]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	4413      	add	r3, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	7812      	ldrb	r2, [r2, #0]
 8007162:	701a      	strb	r2, [r3, #0]
  idx++;
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	3301      	adds	r3, #1
 8007168:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	4413      	add	r3, r2
 8007170:	2203      	movs	r2, #3
 8007172:	701a      	strb	r2, [r3, #0]
  idx++;
 8007174:	7dfb      	ldrb	r3, [r7, #23]
 8007176:	3301      	adds	r3, #1
 8007178:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800717a:	e013      	b.n	80071a4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	4413      	add	r3, r2
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	7812      	ldrb	r2, [r2, #0]
 8007186:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	3301      	adds	r3, #1
 800718c:	613b      	str	r3, [r7, #16]
    idx++;
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	3301      	adds	r3, #1
 8007192:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007194:	7dfb      	ldrb	r3, [r7, #23]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	4413      	add	r3, r2
 800719a:	2200      	movs	r2, #0
 800719c:	701a      	strb	r2, [r3, #0]
    idx++;
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	3301      	adds	r3, #1
 80071a2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e7      	bne.n	800717c <USBD_GetString+0x52>
 80071ac:	e000      	b.n	80071b0 <USBD_GetString+0x86>
    return;
 80071ae:	bf00      	nop
  }
}
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b085      	sub	sp, #20
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80071c6:	e005      	b.n	80071d4 <USBD_GetLen+0x1e>
  {
    len++;
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	3301      	adds	r3, #1
 80071cc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	3301      	adds	r3, #1
 80071d2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1f5      	bne.n	80071c8 <USBD_GetLen+0x12>
  }

  return len;
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2202      	movs	r2, #2
 80071fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	2100      	movs	r1, #0
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 fd10 	bl	8007c36 <USBD_LL_Transmit>

  return USBD_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	2100      	movs	r1, #0
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 fcff 	bl	8007c36 <USBD_LL_Transmit>

  return USBD_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2203      	movs	r2, #3
 8007252:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	2100      	movs	r1, #0
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 fd03 	bl	8007c78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	2100      	movs	r1, #0
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 fcf2 	bl	8007c78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b082      	sub	sp, #8
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2204      	movs	r2, #4
 80072aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072ae:	2300      	movs	r3, #0
 80072b0:	2200      	movs	r2, #0
 80072b2:	2100      	movs	r1, #0
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fcbe 	bl	8007c36 <USBD_LL_Transmit>

  return USBD_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2205      	movs	r2, #5
 80072d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072d4:	2300      	movs	r3, #0
 80072d6:	2200      	movs	r2, #0
 80072d8:	2100      	movs	r1, #0
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fccc 	bl	8007c78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80072f0:	2200      	movs	r2, #0
 80072f2:	4912      	ldr	r1, [pc, #72]	; (800733c <MX_USB_DEVICE_Init+0x50>)
 80072f4:	4812      	ldr	r0, [pc, #72]	; (8007340 <MX_USB_DEVICE_Init+0x54>)
 80072f6:	f7fe fe8f 	bl	8006018 <USBD_Init>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007300:	f7f9 fc98 	bl	8000c34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007304:	490f      	ldr	r1, [pc, #60]	; (8007344 <MX_USB_DEVICE_Init+0x58>)
 8007306:	480e      	ldr	r0, [pc, #56]	; (8007340 <MX_USB_DEVICE_Init+0x54>)
 8007308:	f7fe feb6 	bl	8006078 <USBD_RegisterClass>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007312:	f7f9 fc8f 	bl	8000c34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007316:	490c      	ldr	r1, [pc, #48]	; (8007348 <MX_USB_DEVICE_Init+0x5c>)
 8007318:	4809      	ldr	r0, [pc, #36]	; (8007340 <MX_USB_DEVICE_Init+0x54>)
 800731a:	f7fe fdd7 	bl	8005ecc <USBD_CDC_RegisterInterface>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007324:	f7f9 fc86 	bl	8000c34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007328:	4805      	ldr	r0, [pc, #20]	; (8007340 <MX_USB_DEVICE_Init+0x54>)
 800732a:	f7fe fecc 	bl	80060c6 <USBD_Start>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007334:	f7f9 fc7e 	bl	8000c34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007338:	bf00      	nop
 800733a:	bd80      	pop	{r7, pc}
 800733c:	20000134 	.word	0x20000134
 8007340:	200007fc 	.word	0x200007fc
 8007344:	2000001c 	.word	0x2000001c
 8007348:	20000120 	.word	0x20000120

0800734c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007350:	2200      	movs	r2, #0
 8007352:	4905      	ldr	r1, [pc, #20]	; (8007368 <CDC_Init_FS+0x1c>)
 8007354:	4805      	ldr	r0, [pc, #20]	; (800736c <CDC_Init_FS+0x20>)
 8007356:	f7fe fdce 	bl	8005ef6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800735a:	4905      	ldr	r1, [pc, #20]	; (8007370 <CDC_Init_FS+0x24>)
 800735c:	4803      	ldr	r0, [pc, #12]	; (800736c <CDC_Init_FS+0x20>)
 800735e:	f7fe fde8 	bl	8005f32 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007362:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007364:	4618      	mov	r0, r3
 8007366:	bd80      	pop	{r7, pc}
 8007368:	200012cc 	.word	0x200012cc
 800736c:	200007fc 	.word	0x200007fc
 8007370:	20000acc 	.word	0x20000acc

08007374 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007374:	b480      	push	{r7}
 8007376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007378:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800737a:	4618      	mov	r0, r3
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	4603      	mov	r3, r0
 800738c:	6039      	str	r1, [r7, #0]
 800738e:	71fb      	strb	r3, [r7, #7]
 8007390:	4613      	mov	r3, r2
 8007392:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	2b23      	cmp	r3, #35	; 0x23
 8007398:	d84a      	bhi.n	8007430 <CDC_Control_FS+0xac>
 800739a:	a201      	add	r2, pc, #4	; (adr r2, 80073a0 <CDC_Control_FS+0x1c>)
 800739c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a0:	08007431 	.word	0x08007431
 80073a4:	08007431 	.word	0x08007431
 80073a8:	08007431 	.word	0x08007431
 80073ac:	08007431 	.word	0x08007431
 80073b0:	08007431 	.word	0x08007431
 80073b4:	08007431 	.word	0x08007431
 80073b8:	08007431 	.word	0x08007431
 80073bc:	08007431 	.word	0x08007431
 80073c0:	08007431 	.word	0x08007431
 80073c4:	08007431 	.word	0x08007431
 80073c8:	08007431 	.word	0x08007431
 80073cc:	08007431 	.word	0x08007431
 80073d0:	08007431 	.word	0x08007431
 80073d4:	08007431 	.word	0x08007431
 80073d8:	08007431 	.word	0x08007431
 80073dc:	08007431 	.word	0x08007431
 80073e0:	08007431 	.word	0x08007431
 80073e4:	08007431 	.word	0x08007431
 80073e8:	08007431 	.word	0x08007431
 80073ec:	08007431 	.word	0x08007431
 80073f0:	08007431 	.word	0x08007431
 80073f4:	08007431 	.word	0x08007431
 80073f8:	08007431 	.word	0x08007431
 80073fc:	08007431 	.word	0x08007431
 8007400:	08007431 	.word	0x08007431
 8007404:	08007431 	.word	0x08007431
 8007408:	08007431 	.word	0x08007431
 800740c:	08007431 	.word	0x08007431
 8007410:	08007431 	.word	0x08007431
 8007414:	08007431 	.word	0x08007431
 8007418:	08007431 	.word	0x08007431
 800741c:	08007431 	.word	0x08007431
 8007420:	08007431 	.word	0x08007431
 8007424:	08007431 	.word	0x08007431
 8007428:	08007431 	.word	0x08007431
 800742c:	08007431 	.word	0x08007431
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007430:	bf00      	nop
  }

  return (USBD_OK);
 8007432:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  memset (RXbuffer, '\0', sizeof(RXbuffer));  // clear the buffer
 800744a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800744e:	2100      	movs	r1, #0
 8007450:	480d      	ldr	r0, [pc, #52]	; (8007488 <CDC_Receive_FS+0x48>)
 8007452:	f000 fcbd 	bl	8007dd0 <memset>
  RXbufferStrLen = (uint8_t)*Len;
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	b2da      	uxtb	r2, r3
 800745c:	4b0b      	ldr	r3, [pc, #44]	; (800748c <CDC_Receive_FS+0x4c>)
 800745e:	701a      	strb	r2, [r3, #0]
  memcpy(RXbuffer, Buf, RXbufferStrLen);  // copy the data to the buffer
 8007460:	4b0a      	ldr	r3, [pc, #40]	; (800748c <CDC_Receive_FS+0x4c>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	461a      	mov	r2, r3
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	4807      	ldr	r0, [pc, #28]	; (8007488 <CDC_Receive_FS+0x48>)
 800746c:	f000 fce4 	bl	8007e38 <memcpy>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	4807      	ldr	r0, [pc, #28]	; (8007490 <CDC_Receive_FS+0x50>)
 8007474:	f7fe fd5d 	bl	8005f32 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007478:	4805      	ldr	r0, [pc, #20]	; (8007490 <CDC_Receive_FS+0x50>)
 800747a:	f7fe fda3 	bl	8005fc4 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 800747e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007480:	4618      	mov	r0, r3
 8007482:	3708      	adds	r7, #8
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	20000390 	.word	0x20000390
 800748c:	20000490 	.word	0x20000490
 8007490:	200007fc 	.word	0x200007fc

08007494 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	460b      	mov	r3, r1
 800749e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80074a4:	4b0d      	ldr	r3, [pc, #52]	; (80074dc <CDC_Transmit_FS+0x48>)
 80074a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074aa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e00b      	b.n	80074d2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80074ba:	887b      	ldrh	r3, [r7, #2]
 80074bc:	461a      	mov	r2, r3
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	4806      	ldr	r0, [pc, #24]	; (80074dc <CDC_Transmit_FS+0x48>)
 80074c2:	f7fe fd18 	bl	8005ef6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80074c6:	4805      	ldr	r0, [pc, #20]	; (80074dc <CDC_Transmit_FS+0x48>)
 80074c8:	f7fe fd4c 	bl	8005f64 <USBD_CDC_TransmitPacket>
 80074cc:	4603      	mov	r3, r0
 80074ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	200007fc 	.word	0x200007fc

080074e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b087      	sub	sp, #28
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	4613      	mov	r3, r2
 80074ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80074f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
	...

08007504 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	4603      	mov	r3, r0
 800750c:	6039      	str	r1, [r7, #0]
 800750e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2212      	movs	r2, #18
 8007514:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007516:	4b03      	ldr	r3, [pc, #12]	; (8007524 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007518:	4618      	mov	r0, r3
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	20000150 	.word	0x20000150

08007528 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	6039      	str	r1, [r7, #0]
 8007532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2204      	movs	r2, #4
 8007538:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800753a:	4b03      	ldr	r3, [pc, #12]	; (8007548 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800753c:	4618      	mov	r0, r3
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	20000164 	.word	0x20000164

0800754c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	4603      	mov	r3, r0
 8007554:	6039      	str	r1, [r7, #0]
 8007556:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007558:	79fb      	ldrb	r3, [r7, #7]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d105      	bne.n	800756a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	4907      	ldr	r1, [pc, #28]	; (8007580 <USBD_FS_ProductStrDescriptor+0x34>)
 8007562:	4808      	ldr	r0, [pc, #32]	; (8007584 <USBD_FS_ProductStrDescriptor+0x38>)
 8007564:	f7ff fde1 	bl	800712a <USBD_GetString>
 8007568:	e004      	b.n	8007574 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	4904      	ldr	r1, [pc, #16]	; (8007580 <USBD_FS_ProductStrDescriptor+0x34>)
 800756e:	4805      	ldr	r0, [pc, #20]	; (8007584 <USBD_FS_ProductStrDescriptor+0x38>)
 8007570:	f7ff fddb 	bl	800712a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007574:	4b02      	ldr	r3, [pc, #8]	; (8007580 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007576:	4618      	mov	r0, r3
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20001acc 	.word	0x20001acc
 8007584:	08008734 	.word	0x08008734

08007588 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	4603      	mov	r3, r0
 8007590:	6039      	str	r1, [r7, #0]
 8007592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	4904      	ldr	r1, [pc, #16]	; (80075a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007598:	4804      	ldr	r0, [pc, #16]	; (80075ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800759a:	f7ff fdc6 	bl	800712a <USBD_GetString>
  return USBD_StrDesc;
 800759e:	4b02      	ldr	r3, [pc, #8]	; (80075a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	20001acc 	.word	0x20001acc
 80075ac:	0800874c 	.word	0x0800874c

080075b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	4603      	mov	r3, r0
 80075b8:	6039      	str	r1, [r7, #0]
 80075ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	221a      	movs	r2, #26
 80075c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075c2:	f000 f843 	bl	800764c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075c6:	4b02      	ldr	r3, [pc, #8]	; (80075d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	20000168 	.word	0x20000168

080075d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	4603      	mov	r3, r0
 80075dc:	6039      	str	r1, [r7, #0]
 80075de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075e0:	79fb      	ldrb	r3, [r7, #7]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d105      	bne.n	80075f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	4907      	ldr	r1, [pc, #28]	; (8007608 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075ea:	4808      	ldr	r0, [pc, #32]	; (800760c <USBD_FS_ConfigStrDescriptor+0x38>)
 80075ec:	f7ff fd9d 	bl	800712a <USBD_GetString>
 80075f0:	e004      	b.n	80075fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	4904      	ldr	r1, [pc, #16]	; (8007608 <USBD_FS_ConfigStrDescriptor+0x34>)
 80075f6:	4805      	ldr	r0, [pc, #20]	; (800760c <USBD_FS_ConfigStrDescriptor+0x38>)
 80075f8:	f7ff fd97 	bl	800712a <USBD_GetString>
  }
  return USBD_StrDesc;
 80075fc:	4b02      	ldr	r3, [pc, #8]	; (8007608 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20001acc 	.word	0x20001acc
 800760c:	08008760 	.word	0x08008760

08007610 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	4603      	mov	r3, r0
 8007618:	6039      	str	r1, [r7, #0]
 800761a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800761c:	79fb      	ldrb	r3, [r7, #7]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d105      	bne.n	800762e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	4907      	ldr	r1, [pc, #28]	; (8007644 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007626:	4808      	ldr	r0, [pc, #32]	; (8007648 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007628:	f7ff fd7f 	bl	800712a <USBD_GetString>
 800762c:	e004      	b.n	8007638 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	4904      	ldr	r1, [pc, #16]	; (8007644 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007632:	4805      	ldr	r0, [pc, #20]	; (8007648 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007634:	f7ff fd79 	bl	800712a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007638:	4b02      	ldr	r3, [pc, #8]	; (8007644 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	20001acc 	.word	0x20001acc
 8007648:	0800876c 	.word	0x0800876c

0800764c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007652:	4b0f      	ldr	r3, [pc, #60]	; (8007690 <Get_SerialNum+0x44>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007658:	4b0e      	ldr	r3, [pc, #56]	; (8007694 <Get_SerialNum+0x48>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800765e:	4b0e      	ldr	r3, [pc, #56]	; (8007698 <Get_SerialNum+0x4c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4413      	add	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d009      	beq.n	8007686 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007672:	2208      	movs	r2, #8
 8007674:	4909      	ldr	r1, [pc, #36]	; (800769c <Get_SerialNum+0x50>)
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 f814 	bl	80076a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800767c:	2204      	movs	r2, #4
 800767e:	4908      	ldr	r1, [pc, #32]	; (80076a0 <Get_SerialNum+0x54>)
 8007680:	68b8      	ldr	r0, [r7, #8]
 8007682:	f000 f80f 	bl	80076a4 <IntToUnicode>
  }
}
 8007686:	bf00      	nop
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	1fff7a10 	.word	0x1fff7a10
 8007694:	1fff7a14 	.word	0x1fff7a14
 8007698:	1fff7a18 	.word	0x1fff7a18
 800769c:	2000016a 	.word	0x2000016a
 80076a0:	2000017a 	.word	0x2000017a

080076a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	4613      	mov	r3, r2
 80076b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076b6:	2300      	movs	r3, #0
 80076b8:	75fb      	strb	r3, [r7, #23]
 80076ba:	e027      	b.n	800770c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	0f1b      	lsrs	r3, r3, #28
 80076c0:	2b09      	cmp	r3, #9
 80076c2:	d80b      	bhi.n	80076dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	0f1b      	lsrs	r3, r3, #28
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	4619      	mov	r1, r3
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	440b      	add	r3, r1
 80076d4:	3230      	adds	r2, #48	; 0x30
 80076d6:	b2d2      	uxtb	r2, r2
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	e00a      	b.n	80076f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	0f1b      	lsrs	r3, r3, #28
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	4619      	mov	r1, r3
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	440b      	add	r3, r1
 80076ec:	3237      	adds	r2, #55	; 0x37
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	011b      	lsls	r3, r3, #4
 80076f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80076f8:	7dfb      	ldrb	r3, [r7, #23]
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	3301      	adds	r3, #1
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	4413      	add	r3, r2
 8007702:	2200      	movs	r2, #0
 8007704:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	3301      	adds	r3, #1
 800770a:	75fb      	strb	r3, [r7, #23]
 800770c:	7dfa      	ldrb	r2, [r7, #23]
 800770e:	79fb      	ldrb	r3, [r7, #7]
 8007710:	429a      	cmp	r2, r3
 8007712:	d3d3      	bcc.n	80076bc <IntToUnicode+0x18>
  }
}
 8007714:	bf00      	nop
 8007716:	bf00      	nop
 8007718:	371c      	adds	r7, #28
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
	...

08007724 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08a      	sub	sp, #40	; 0x28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800772c:	f107 0314 	add.w	r3, r7, #20
 8007730:	2200      	movs	r2, #0
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	605a      	str	r2, [r3, #4]
 8007736:	609a      	str	r2, [r3, #8]
 8007738:	60da      	str	r2, [r3, #12]
 800773a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007744:	d147      	bne.n	80077d6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007746:	2300      	movs	r3, #0
 8007748:	613b      	str	r3, [r7, #16]
 800774a:	4b25      	ldr	r3, [pc, #148]	; (80077e0 <HAL_PCD_MspInit+0xbc>)
 800774c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774e:	4a24      	ldr	r2, [pc, #144]	; (80077e0 <HAL_PCD_MspInit+0xbc>)
 8007750:	f043 0301 	orr.w	r3, r3, #1
 8007754:	6313      	str	r3, [r2, #48]	; 0x30
 8007756:	4b22      	ldr	r3, [pc, #136]	; (80077e0 <HAL_PCD_MspInit+0xbc>)
 8007758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	613b      	str	r3, [r7, #16]
 8007760:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007762:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007768:	2300      	movs	r3, #0
 800776a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800776c:	2300      	movs	r3, #0
 800776e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007770:	f107 0314 	add.w	r3, r7, #20
 8007774:	4619      	mov	r1, r3
 8007776:	481b      	ldr	r0, [pc, #108]	; (80077e4 <HAL_PCD_MspInit+0xc0>)
 8007778:	f7f9 fd56 	bl	8001228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800777c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007782:	2302      	movs	r3, #2
 8007784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007786:	2300      	movs	r3, #0
 8007788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800778a:	2300      	movs	r3, #0
 800778c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800778e:	230a      	movs	r3, #10
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007792:	f107 0314 	add.w	r3, r7, #20
 8007796:	4619      	mov	r1, r3
 8007798:	4812      	ldr	r0, [pc, #72]	; (80077e4 <HAL_PCD_MspInit+0xc0>)
 800779a:	f7f9 fd45 	bl	8001228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800779e:	4b10      	ldr	r3, [pc, #64]	; (80077e0 <HAL_PCD_MspInit+0xbc>)
 80077a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a2:	4a0f      	ldr	r2, [pc, #60]	; (80077e0 <HAL_PCD_MspInit+0xbc>)
 80077a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a8:	6353      	str	r3, [r2, #52]	; 0x34
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	4b0c      	ldr	r3, [pc, #48]	; (80077e0 <HAL_PCD_MspInit+0xbc>)
 80077b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b2:	4a0b      	ldr	r2, [pc, #44]	; (80077e0 <HAL_PCD_MspInit+0xbc>)
 80077b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077b8:	6453      	str	r3, [r2, #68]	; 0x44
 80077ba:	4b09      	ldr	r3, [pc, #36]	; (80077e0 <HAL_PCD_MspInit+0xbc>)
 80077bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077c6:	2200      	movs	r2, #0
 80077c8:	2100      	movs	r1, #0
 80077ca:	2043      	movs	r0, #67	; 0x43
 80077cc:	f7f9 fcf5 	bl	80011ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077d0:	2043      	movs	r0, #67	; 0x43
 80077d2:	f7f9 fd0e 	bl	80011f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077d6:	bf00      	nop
 80077d8:	3728      	adds	r7, #40	; 0x28
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	40023800 	.word	0x40023800
 80077e4:	40020000 	.word	0x40020000

080077e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80077fc:	4619      	mov	r1, r3
 80077fe:	4610      	mov	r0, r2
 8007800:	f7fe fcac 	bl	800615c <USBD_LL_SetupStage>
}
 8007804:	bf00      	nop
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800781e:	78fa      	ldrb	r2, [r7, #3]
 8007820:	6879      	ldr	r1, [r7, #4]
 8007822:	4613      	mov	r3, r2
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	1a9b      	subs	r3, r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	440b      	add	r3, r1
 800782c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	78fb      	ldrb	r3, [r7, #3]
 8007834:	4619      	mov	r1, r3
 8007836:	f7fe fce6 	bl	8006206 <USBD_LL_DataOutStage>
}
 800783a:	bf00      	nop
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b082      	sub	sp, #8
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007854:	78fa      	ldrb	r2, [r7, #3]
 8007856:	6879      	ldr	r1, [r7, #4]
 8007858:	4613      	mov	r3, r2
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	1a9b      	subs	r3, r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	440b      	add	r3, r1
 8007862:	3348      	adds	r3, #72	; 0x48
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	78fb      	ldrb	r3, [r7, #3]
 8007868:	4619      	mov	r1, r3
 800786a:	f7fe fd2f 	bl	80062cc <USBD_LL_DataInStage>
}
 800786e:	bf00      	nop
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007884:	4618      	mov	r0, r3
 8007886:	f7fe fe43 	bl	8006510 <USBD_LL_SOF>
}
 800788a:	bf00      	nop
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800789a:	2301      	movs	r3, #1
 800789c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d102      	bne.n	80078ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80078a6:	2300      	movs	r3, #0
 80078a8:	73fb      	strb	r3, [r7, #15]
 80078aa:	e008      	b.n	80078be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d102      	bne.n	80078ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80078b4:	2301      	movs	r3, #1
 80078b6:	73fb      	strb	r3, [r7, #15]
 80078b8:	e001      	b.n	80078be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80078ba:	f7f9 f9bb 	bl	8000c34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078c4:	7bfa      	ldrb	r2, [r7, #15]
 80078c6:	4611      	mov	r1, r2
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fe fde3 	bl	8006494 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fe fd8f 	bl	80063f8 <USBD_LL_Reset>
}
 80078da:	bf00      	nop
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
	...

080078e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fe fdde 	bl	80064b4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	6812      	ldr	r2, [r2, #0]
 8007906:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800790a:	f043 0301 	orr.w	r3, r3, #1
 800790e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007918:	4b04      	ldr	r3, [pc, #16]	; (800792c <HAL_PCD_SuspendCallback+0x48>)
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	4a03      	ldr	r2, [pc, #12]	; (800792c <HAL_PCD_SuspendCallback+0x48>)
 800791e:	f043 0306 	orr.w	r3, r3, #6
 8007922:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007924:	bf00      	nop
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	e000ed00 	.word	0xe000ed00

08007930 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800793e:	4618      	mov	r0, r3
 8007940:	f7fe fdce 	bl	80064e0 <USBD_LL_Resume>
}
 8007944:	bf00      	nop
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800795e:	78fa      	ldrb	r2, [r7, #3]
 8007960:	4611      	mov	r1, r2
 8007962:	4618      	mov	r0, r3
 8007964:	f7fe fe1c 	bl	80065a0 <USBD_LL_IsoOUTIncomplete>
}
 8007968:	bf00      	nop
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007982:	78fa      	ldrb	r2, [r7, #3]
 8007984:	4611      	mov	r1, r2
 8007986:	4618      	mov	r0, r3
 8007988:	f7fe fde4 	bl	8006554 <USBD_LL_IsoINIncomplete>
}
 800798c:	bf00      	nop
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fe fe22 	bl	80065ec <USBD_LL_DevConnected>
}
 80079a8:	bf00      	nop
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fe fe1f 	bl	8006602 <USBD_LL_DevDisconnected>
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d13c      	bne.n	8007a56 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079dc:	4a20      	ldr	r2, [pc, #128]	; (8007a60 <USBD_LL_Init+0x94>)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a1e      	ldr	r2, [pc, #120]	; (8007a60 <USBD_LL_Init+0x94>)
 80079e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079ec:	4b1c      	ldr	r3, [pc, #112]	; (8007a60 <USBD_LL_Init+0x94>)
 80079ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80079f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80079f4:	4b1a      	ldr	r3, [pc, #104]	; (8007a60 <USBD_LL_Init+0x94>)
 80079f6:	2204      	movs	r2, #4
 80079f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80079fa:	4b19      	ldr	r3, [pc, #100]	; (8007a60 <USBD_LL_Init+0x94>)
 80079fc:	2202      	movs	r2, #2
 80079fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007a00:	4b17      	ldr	r3, [pc, #92]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a06:	4b16      	ldr	r3, [pc, #88]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a08:	2202      	movs	r2, #2
 8007a0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a0c:	4b14      	ldr	r3, [pc, #80]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a12:	4b13      	ldr	r3, [pc, #76]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a18:	4b11      	ldr	r3, [pc, #68]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007a1e:	4b10      	ldr	r3, [pc, #64]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a24:	4b0e      	ldr	r3, [pc, #56]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a2a:	480d      	ldr	r0, [pc, #52]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a2c:	f7fa fbc8 	bl	80021c0 <HAL_PCD_Init>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a36:	f7f9 f8fd 	bl	8000c34 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a3a:	2180      	movs	r1, #128	; 0x80
 8007a3c:	4808      	ldr	r0, [pc, #32]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a3e:	f7fb fd26 	bl	800348e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a42:	2240      	movs	r2, #64	; 0x40
 8007a44:	2100      	movs	r1, #0
 8007a46:	4806      	ldr	r0, [pc, #24]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a48:	f7fb fcda 	bl	8003400 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a4c:	2280      	movs	r2, #128	; 0x80
 8007a4e:	2101      	movs	r1, #1
 8007a50:	4803      	ldr	r0, [pc, #12]	; (8007a60 <USBD_LL_Init+0x94>)
 8007a52:	f7fb fcd5 	bl	8003400 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	20001ccc 	.word	0x20001ccc

08007a64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fa fcbd 	bl	80023fa <HAL_PCD_Start>
 8007a80:	4603      	mov	r3, r0
 8007a82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 f942 	bl	8007d10 <USBD_Get_USB_Status>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b084      	sub	sp, #16
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	4608      	mov	r0, r1
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	70fb      	strb	r3, [r7, #3]
 8007aac:	460b      	mov	r3, r1
 8007aae:	70bb      	strb	r3, [r7, #2]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ac2:	78bb      	ldrb	r3, [r7, #2]
 8007ac4:	883a      	ldrh	r2, [r7, #0]
 8007ac6:	78f9      	ldrb	r1, [r7, #3]
 8007ac8:	f7fb f8a1 	bl	8002c0e <HAL_PCD_EP_Open>
 8007acc:	4603      	mov	r3, r0
 8007ace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 f91c 	bl	8007d10 <USBD_Get_USB_Status>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	460b      	mov	r3, r1
 8007af0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b00:	78fa      	ldrb	r2, [r7, #3]
 8007b02:	4611      	mov	r1, r2
 8007b04:	4618      	mov	r0, r3
 8007b06:	f7fb f8ea 	bl	8002cde <HAL_PCD_EP_Close>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b0e:	7bfb      	ldrb	r3, [r7, #15]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f000 f8fd 	bl	8007d10 <USBD_Get_USB_Status>
 8007b16:	4603      	mov	r3, r0
 8007b18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b3e:	78fa      	ldrb	r2, [r7, #3]
 8007b40:	4611      	mov	r1, r2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fb f9c2 	bl	8002ecc <HAL_PCD_EP_SetStall>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b4c:	7bfb      	ldrb	r3, [r7, #15]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 f8de 	bl	8007d10 <USBD_Get_USB_Status>
 8007b54:	4603      	mov	r3, r0
 8007b56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b7c:	78fa      	ldrb	r2, [r7, #3]
 8007b7e:	4611      	mov	r1, r2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fb fa07 	bl	8002f94 <HAL_PCD_EP_ClrStall>
 8007b86:	4603      	mov	r3, r0
 8007b88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 f8bf 	bl	8007d10 <USBD_Get_USB_Status>
 8007b92:	4603      	mov	r3, r0
 8007b94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007bb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	da0b      	bge.n	8007bd4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007bbc:	78fb      	ldrb	r3, [r7, #3]
 8007bbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bc2:	68f9      	ldr	r1, [r7, #12]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	1a9b      	subs	r3, r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	440b      	add	r3, r1
 8007bce:	333e      	adds	r3, #62	; 0x3e
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	e00b      	b.n	8007bec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bda:	68f9      	ldr	r1, [r7, #12]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	1a9b      	subs	r3, r3, r2
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	440b      	add	r3, r1
 8007be6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007bea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c12:	78fa      	ldrb	r2, [r7, #3]
 8007c14:	4611      	mov	r1, r2
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fa ffd4 	bl	8002bc4 <HAL_PCD_SetAddress>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 f874 	bl	8007d10 <USBD_Get_USB_Status>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b086      	sub	sp, #24
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
 8007c42:	460b      	mov	r3, r1
 8007c44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c54:	7af9      	ldrb	r1, [r7, #11]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	f7fb f8ed 	bl	8002e38 <HAL_PCD_EP_Transmit>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 f853 	bl	8007d10 <USBD_Get_USB_Status>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c6e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	607a      	str	r2, [r7, #4]
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	460b      	mov	r3, r1
 8007c86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c96:	7af9      	ldrb	r1, [r7, #11]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	f7fb f869 	bl	8002d72 <HAL_PCD_EP_Receive>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ca4:	7dfb      	ldrb	r3, [r7, #23]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 f832 	bl	8007d10 <USBD_Get_USB_Status>
 8007cac:	4603      	mov	r3, r0
 8007cae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007cb0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ccc:	78fa      	ldrb	r2, [r7, #3]
 8007cce:	4611      	mov	r1, r2
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fb f899 	bl	8002e08 <HAL_PCD_EP_GetRxCount>
 8007cd6:	4603      	mov	r3, r0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007ce8:	4b03      	ldr	r3, [pc, #12]	; (8007cf8 <USBD_static_malloc+0x18>)
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	200020d4 	.word	0x200020d4

08007cfc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b083      	sub	sp, #12
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]

}
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	4603      	mov	r3, r0
 8007d18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d1e:	79fb      	ldrb	r3, [r7, #7]
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	d817      	bhi.n	8007d54 <USBD_Get_USB_Status+0x44>
 8007d24:	a201      	add	r2, pc, #4	; (adr r2, 8007d2c <USBD_Get_USB_Status+0x1c>)
 8007d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2a:	bf00      	nop
 8007d2c:	08007d3d 	.word	0x08007d3d
 8007d30:	08007d43 	.word	0x08007d43
 8007d34:	08007d49 	.word	0x08007d49
 8007d38:	08007d4f 	.word	0x08007d4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d40:	e00b      	b.n	8007d5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d42:	2303      	movs	r3, #3
 8007d44:	73fb      	strb	r3, [r7, #15]
    break;
 8007d46:	e008      	b.n	8007d5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d4c:	e005      	b.n	8007d5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	73fb      	strb	r3, [r7, #15]
    break;
 8007d52:	e002      	b.n	8007d5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d54:	2303      	movs	r3, #3
 8007d56:	73fb      	strb	r3, [r7, #15]
    break;
 8007d58:	bf00      	nop
  }
  return usb_status;
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <sniprintf>:
 8007d68:	b40c      	push	{r2, r3}
 8007d6a:	b530      	push	{r4, r5, lr}
 8007d6c:	4b17      	ldr	r3, [pc, #92]	; (8007dcc <sniprintf+0x64>)
 8007d6e:	1e0c      	subs	r4, r1, #0
 8007d70:	681d      	ldr	r5, [r3, #0]
 8007d72:	b09d      	sub	sp, #116	; 0x74
 8007d74:	da08      	bge.n	8007d88 <sniprintf+0x20>
 8007d76:	238b      	movs	r3, #139	; 0x8b
 8007d78:	602b      	str	r3, [r5, #0]
 8007d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7e:	b01d      	add	sp, #116	; 0x74
 8007d80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d84:	b002      	add	sp, #8
 8007d86:	4770      	bx	lr
 8007d88:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007d8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007d90:	bf14      	ite	ne
 8007d92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007d96:	4623      	moveq	r3, r4
 8007d98:	9304      	str	r3, [sp, #16]
 8007d9a:	9307      	str	r3, [sp, #28]
 8007d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007da0:	9002      	str	r0, [sp, #8]
 8007da2:	9006      	str	r0, [sp, #24]
 8007da4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007da8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007daa:	ab21      	add	r3, sp, #132	; 0x84
 8007dac:	a902      	add	r1, sp, #8
 8007dae:	4628      	mov	r0, r5
 8007db0:	9301      	str	r3, [sp, #4]
 8007db2:	f000 f9a1 	bl	80080f8 <_svfiprintf_r>
 8007db6:	1c43      	adds	r3, r0, #1
 8007db8:	bfbc      	itt	lt
 8007dba:	238b      	movlt	r3, #139	; 0x8b
 8007dbc:	602b      	strlt	r3, [r5, #0]
 8007dbe:	2c00      	cmp	r4, #0
 8007dc0:	d0dd      	beq.n	8007d7e <sniprintf+0x16>
 8007dc2:	9b02      	ldr	r3, [sp, #8]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	701a      	strb	r2, [r3, #0]
 8007dc8:	e7d9      	b.n	8007d7e <sniprintf+0x16>
 8007dca:	bf00      	nop
 8007dcc:	200001d0 	.word	0x200001d0

08007dd0 <memset>:
 8007dd0:	4402      	add	r2, r0
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d100      	bne.n	8007dda <memset+0xa>
 8007dd8:	4770      	bx	lr
 8007dda:	f803 1b01 	strb.w	r1, [r3], #1
 8007dde:	e7f9      	b.n	8007dd4 <memset+0x4>

08007de0 <__errno>:
 8007de0:	4b01      	ldr	r3, [pc, #4]	; (8007de8 <__errno+0x8>)
 8007de2:	6818      	ldr	r0, [r3, #0]
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	200001d0 	.word	0x200001d0

08007dec <__libc_init_array>:
 8007dec:	b570      	push	{r4, r5, r6, lr}
 8007dee:	4d0d      	ldr	r5, [pc, #52]	; (8007e24 <__libc_init_array+0x38>)
 8007df0:	4c0d      	ldr	r4, [pc, #52]	; (8007e28 <__libc_init_array+0x3c>)
 8007df2:	1b64      	subs	r4, r4, r5
 8007df4:	10a4      	asrs	r4, r4, #2
 8007df6:	2600      	movs	r6, #0
 8007df8:	42a6      	cmp	r6, r4
 8007dfa:	d109      	bne.n	8007e10 <__libc_init_array+0x24>
 8007dfc:	4d0b      	ldr	r5, [pc, #44]	; (8007e2c <__libc_init_array+0x40>)
 8007dfe:	4c0c      	ldr	r4, [pc, #48]	; (8007e30 <__libc_init_array+0x44>)
 8007e00:	f000 fc6a 	bl	80086d8 <_init>
 8007e04:	1b64      	subs	r4, r4, r5
 8007e06:	10a4      	asrs	r4, r4, #2
 8007e08:	2600      	movs	r6, #0
 8007e0a:	42a6      	cmp	r6, r4
 8007e0c:	d105      	bne.n	8007e1a <__libc_init_array+0x2e>
 8007e0e:	bd70      	pop	{r4, r5, r6, pc}
 8007e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e14:	4798      	blx	r3
 8007e16:	3601      	adds	r6, #1
 8007e18:	e7ee      	b.n	8007df8 <__libc_init_array+0xc>
 8007e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e1e:	4798      	blx	r3
 8007e20:	3601      	adds	r6, #1
 8007e22:	e7f2      	b.n	8007e0a <__libc_init_array+0x1e>
 8007e24:	080089d0 	.word	0x080089d0
 8007e28:	080089d0 	.word	0x080089d0
 8007e2c:	080089d0 	.word	0x080089d0
 8007e30:	080089d4 	.word	0x080089d4

08007e34 <__retarget_lock_acquire_recursive>:
 8007e34:	4770      	bx	lr

08007e36 <__retarget_lock_release_recursive>:
 8007e36:	4770      	bx	lr

08007e38 <memcpy>:
 8007e38:	440a      	add	r2, r1
 8007e3a:	4291      	cmp	r1, r2
 8007e3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e40:	d100      	bne.n	8007e44 <memcpy+0xc>
 8007e42:	4770      	bx	lr
 8007e44:	b510      	push	{r4, lr}
 8007e46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e4e:	4291      	cmp	r1, r2
 8007e50:	d1f9      	bne.n	8007e46 <memcpy+0xe>
 8007e52:	bd10      	pop	{r4, pc}

08007e54 <_free_r>:
 8007e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e56:	2900      	cmp	r1, #0
 8007e58:	d044      	beq.n	8007ee4 <_free_r+0x90>
 8007e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e5e:	9001      	str	r0, [sp, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f1a1 0404 	sub.w	r4, r1, #4
 8007e66:	bfb8      	it	lt
 8007e68:	18e4      	addlt	r4, r4, r3
 8007e6a:	f000 f8df 	bl	800802c <__malloc_lock>
 8007e6e:	4a1e      	ldr	r2, [pc, #120]	; (8007ee8 <_free_r+0x94>)
 8007e70:	9801      	ldr	r0, [sp, #4]
 8007e72:	6813      	ldr	r3, [r2, #0]
 8007e74:	b933      	cbnz	r3, 8007e84 <_free_r+0x30>
 8007e76:	6063      	str	r3, [r4, #4]
 8007e78:	6014      	str	r4, [r2, #0]
 8007e7a:	b003      	add	sp, #12
 8007e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e80:	f000 b8da 	b.w	8008038 <__malloc_unlock>
 8007e84:	42a3      	cmp	r3, r4
 8007e86:	d908      	bls.n	8007e9a <_free_r+0x46>
 8007e88:	6825      	ldr	r5, [r4, #0]
 8007e8a:	1961      	adds	r1, r4, r5
 8007e8c:	428b      	cmp	r3, r1
 8007e8e:	bf01      	itttt	eq
 8007e90:	6819      	ldreq	r1, [r3, #0]
 8007e92:	685b      	ldreq	r3, [r3, #4]
 8007e94:	1949      	addeq	r1, r1, r5
 8007e96:	6021      	streq	r1, [r4, #0]
 8007e98:	e7ed      	b.n	8007e76 <_free_r+0x22>
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	b10b      	cbz	r3, 8007ea4 <_free_r+0x50>
 8007ea0:	42a3      	cmp	r3, r4
 8007ea2:	d9fa      	bls.n	8007e9a <_free_r+0x46>
 8007ea4:	6811      	ldr	r1, [r2, #0]
 8007ea6:	1855      	adds	r5, r2, r1
 8007ea8:	42a5      	cmp	r5, r4
 8007eaa:	d10b      	bne.n	8007ec4 <_free_r+0x70>
 8007eac:	6824      	ldr	r4, [r4, #0]
 8007eae:	4421      	add	r1, r4
 8007eb0:	1854      	adds	r4, r2, r1
 8007eb2:	42a3      	cmp	r3, r4
 8007eb4:	6011      	str	r1, [r2, #0]
 8007eb6:	d1e0      	bne.n	8007e7a <_free_r+0x26>
 8007eb8:	681c      	ldr	r4, [r3, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	6053      	str	r3, [r2, #4]
 8007ebe:	440c      	add	r4, r1
 8007ec0:	6014      	str	r4, [r2, #0]
 8007ec2:	e7da      	b.n	8007e7a <_free_r+0x26>
 8007ec4:	d902      	bls.n	8007ecc <_free_r+0x78>
 8007ec6:	230c      	movs	r3, #12
 8007ec8:	6003      	str	r3, [r0, #0]
 8007eca:	e7d6      	b.n	8007e7a <_free_r+0x26>
 8007ecc:	6825      	ldr	r5, [r4, #0]
 8007ece:	1961      	adds	r1, r4, r5
 8007ed0:	428b      	cmp	r3, r1
 8007ed2:	bf04      	itt	eq
 8007ed4:	6819      	ldreq	r1, [r3, #0]
 8007ed6:	685b      	ldreq	r3, [r3, #4]
 8007ed8:	6063      	str	r3, [r4, #4]
 8007eda:	bf04      	itt	eq
 8007edc:	1949      	addeq	r1, r1, r5
 8007ede:	6021      	streq	r1, [r4, #0]
 8007ee0:	6054      	str	r4, [r2, #4]
 8007ee2:	e7ca      	b.n	8007e7a <_free_r+0x26>
 8007ee4:	b003      	add	sp, #12
 8007ee6:	bd30      	pop	{r4, r5, pc}
 8007ee8:	20002434 	.word	0x20002434

08007eec <sbrk_aligned>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	4e0e      	ldr	r6, [pc, #56]	; (8007f28 <sbrk_aligned+0x3c>)
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	6831      	ldr	r1, [r6, #0]
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	b911      	cbnz	r1, 8007efe <sbrk_aligned+0x12>
 8007ef8:	f000 fba6 	bl	8008648 <_sbrk_r>
 8007efc:	6030      	str	r0, [r6, #0]
 8007efe:	4621      	mov	r1, r4
 8007f00:	4628      	mov	r0, r5
 8007f02:	f000 fba1 	bl	8008648 <_sbrk_r>
 8007f06:	1c43      	adds	r3, r0, #1
 8007f08:	d00a      	beq.n	8007f20 <sbrk_aligned+0x34>
 8007f0a:	1cc4      	adds	r4, r0, #3
 8007f0c:	f024 0403 	bic.w	r4, r4, #3
 8007f10:	42a0      	cmp	r0, r4
 8007f12:	d007      	beq.n	8007f24 <sbrk_aligned+0x38>
 8007f14:	1a21      	subs	r1, r4, r0
 8007f16:	4628      	mov	r0, r5
 8007f18:	f000 fb96 	bl	8008648 <_sbrk_r>
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	d101      	bne.n	8007f24 <sbrk_aligned+0x38>
 8007f20:	f04f 34ff 	mov.w	r4, #4294967295
 8007f24:	4620      	mov	r0, r4
 8007f26:	bd70      	pop	{r4, r5, r6, pc}
 8007f28:	20002438 	.word	0x20002438

08007f2c <_malloc_r>:
 8007f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f30:	1ccd      	adds	r5, r1, #3
 8007f32:	f025 0503 	bic.w	r5, r5, #3
 8007f36:	3508      	adds	r5, #8
 8007f38:	2d0c      	cmp	r5, #12
 8007f3a:	bf38      	it	cc
 8007f3c:	250c      	movcc	r5, #12
 8007f3e:	2d00      	cmp	r5, #0
 8007f40:	4607      	mov	r7, r0
 8007f42:	db01      	blt.n	8007f48 <_malloc_r+0x1c>
 8007f44:	42a9      	cmp	r1, r5
 8007f46:	d905      	bls.n	8007f54 <_malloc_r+0x28>
 8007f48:	230c      	movs	r3, #12
 8007f4a:	603b      	str	r3, [r7, #0]
 8007f4c:	2600      	movs	r6, #0
 8007f4e:	4630      	mov	r0, r6
 8007f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008028 <_malloc_r+0xfc>
 8007f58:	f000 f868 	bl	800802c <__malloc_lock>
 8007f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f60:	461c      	mov	r4, r3
 8007f62:	bb5c      	cbnz	r4, 8007fbc <_malloc_r+0x90>
 8007f64:	4629      	mov	r1, r5
 8007f66:	4638      	mov	r0, r7
 8007f68:	f7ff ffc0 	bl	8007eec <sbrk_aligned>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	4604      	mov	r4, r0
 8007f70:	d155      	bne.n	800801e <_malloc_r+0xf2>
 8007f72:	f8d8 4000 	ldr.w	r4, [r8]
 8007f76:	4626      	mov	r6, r4
 8007f78:	2e00      	cmp	r6, #0
 8007f7a:	d145      	bne.n	8008008 <_malloc_r+0xdc>
 8007f7c:	2c00      	cmp	r4, #0
 8007f7e:	d048      	beq.n	8008012 <_malloc_r+0xe6>
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	4631      	mov	r1, r6
 8007f84:	4638      	mov	r0, r7
 8007f86:	eb04 0903 	add.w	r9, r4, r3
 8007f8a:	f000 fb5d 	bl	8008648 <_sbrk_r>
 8007f8e:	4581      	cmp	r9, r0
 8007f90:	d13f      	bne.n	8008012 <_malloc_r+0xe6>
 8007f92:	6821      	ldr	r1, [r4, #0]
 8007f94:	1a6d      	subs	r5, r5, r1
 8007f96:	4629      	mov	r1, r5
 8007f98:	4638      	mov	r0, r7
 8007f9a:	f7ff ffa7 	bl	8007eec <sbrk_aligned>
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	d037      	beq.n	8008012 <_malloc_r+0xe6>
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	442b      	add	r3, r5
 8007fa6:	6023      	str	r3, [r4, #0]
 8007fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d038      	beq.n	8008022 <_malloc_r+0xf6>
 8007fb0:	685a      	ldr	r2, [r3, #4]
 8007fb2:	42a2      	cmp	r2, r4
 8007fb4:	d12b      	bne.n	800800e <_malloc_r+0xe2>
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	605a      	str	r2, [r3, #4]
 8007fba:	e00f      	b.n	8007fdc <_malloc_r+0xb0>
 8007fbc:	6822      	ldr	r2, [r4, #0]
 8007fbe:	1b52      	subs	r2, r2, r5
 8007fc0:	d41f      	bmi.n	8008002 <_malloc_r+0xd6>
 8007fc2:	2a0b      	cmp	r2, #11
 8007fc4:	d917      	bls.n	8007ff6 <_malloc_r+0xca>
 8007fc6:	1961      	adds	r1, r4, r5
 8007fc8:	42a3      	cmp	r3, r4
 8007fca:	6025      	str	r5, [r4, #0]
 8007fcc:	bf18      	it	ne
 8007fce:	6059      	strne	r1, [r3, #4]
 8007fd0:	6863      	ldr	r3, [r4, #4]
 8007fd2:	bf08      	it	eq
 8007fd4:	f8c8 1000 	streq.w	r1, [r8]
 8007fd8:	5162      	str	r2, [r4, r5]
 8007fda:	604b      	str	r3, [r1, #4]
 8007fdc:	4638      	mov	r0, r7
 8007fde:	f104 060b 	add.w	r6, r4, #11
 8007fe2:	f000 f829 	bl	8008038 <__malloc_unlock>
 8007fe6:	f026 0607 	bic.w	r6, r6, #7
 8007fea:	1d23      	adds	r3, r4, #4
 8007fec:	1af2      	subs	r2, r6, r3
 8007fee:	d0ae      	beq.n	8007f4e <_malloc_r+0x22>
 8007ff0:	1b9b      	subs	r3, r3, r6
 8007ff2:	50a3      	str	r3, [r4, r2]
 8007ff4:	e7ab      	b.n	8007f4e <_malloc_r+0x22>
 8007ff6:	42a3      	cmp	r3, r4
 8007ff8:	6862      	ldr	r2, [r4, #4]
 8007ffa:	d1dd      	bne.n	8007fb8 <_malloc_r+0x8c>
 8007ffc:	f8c8 2000 	str.w	r2, [r8]
 8008000:	e7ec      	b.n	8007fdc <_malloc_r+0xb0>
 8008002:	4623      	mov	r3, r4
 8008004:	6864      	ldr	r4, [r4, #4]
 8008006:	e7ac      	b.n	8007f62 <_malloc_r+0x36>
 8008008:	4634      	mov	r4, r6
 800800a:	6876      	ldr	r6, [r6, #4]
 800800c:	e7b4      	b.n	8007f78 <_malloc_r+0x4c>
 800800e:	4613      	mov	r3, r2
 8008010:	e7cc      	b.n	8007fac <_malloc_r+0x80>
 8008012:	230c      	movs	r3, #12
 8008014:	603b      	str	r3, [r7, #0]
 8008016:	4638      	mov	r0, r7
 8008018:	f000 f80e 	bl	8008038 <__malloc_unlock>
 800801c:	e797      	b.n	8007f4e <_malloc_r+0x22>
 800801e:	6025      	str	r5, [r4, #0]
 8008020:	e7dc      	b.n	8007fdc <_malloc_r+0xb0>
 8008022:	605b      	str	r3, [r3, #4]
 8008024:	deff      	udf	#255	; 0xff
 8008026:	bf00      	nop
 8008028:	20002434 	.word	0x20002434

0800802c <__malloc_lock>:
 800802c:	4801      	ldr	r0, [pc, #4]	; (8008034 <__malloc_lock+0x8>)
 800802e:	f7ff bf01 	b.w	8007e34 <__retarget_lock_acquire_recursive>
 8008032:	bf00      	nop
 8008034:	20002430 	.word	0x20002430

08008038 <__malloc_unlock>:
 8008038:	4801      	ldr	r0, [pc, #4]	; (8008040 <__malloc_unlock+0x8>)
 800803a:	f7ff befc 	b.w	8007e36 <__retarget_lock_release_recursive>
 800803e:	bf00      	nop
 8008040:	20002430 	.word	0x20002430

08008044 <__ssputs_r>:
 8008044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008048:	688e      	ldr	r6, [r1, #8]
 800804a:	461f      	mov	r7, r3
 800804c:	42be      	cmp	r6, r7
 800804e:	680b      	ldr	r3, [r1, #0]
 8008050:	4682      	mov	sl, r0
 8008052:	460c      	mov	r4, r1
 8008054:	4690      	mov	r8, r2
 8008056:	d82c      	bhi.n	80080b2 <__ssputs_r+0x6e>
 8008058:	898a      	ldrh	r2, [r1, #12]
 800805a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800805e:	d026      	beq.n	80080ae <__ssputs_r+0x6a>
 8008060:	6965      	ldr	r5, [r4, #20]
 8008062:	6909      	ldr	r1, [r1, #16]
 8008064:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008068:	eba3 0901 	sub.w	r9, r3, r1
 800806c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008070:	1c7b      	adds	r3, r7, #1
 8008072:	444b      	add	r3, r9
 8008074:	106d      	asrs	r5, r5, #1
 8008076:	429d      	cmp	r5, r3
 8008078:	bf38      	it	cc
 800807a:	461d      	movcc	r5, r3
 800807c:	0553      	lsls	r3, r2, #21
 800807e:	d527      	bpl.n	80080d0 <__ssputs_r+0x8c>
 8008080:	4629      	mov	r1, r5
 8008082:	f7ff ff53 	bl	8007f2c <_malloc_r>
 8008086:	4606      	mov	r6, r0
 8008088:	b360      	cbz	r0, 80080e4 <__ssputs_r+0xa0>
 800808a:	6921      	ldr	r1, [r4, #16]
 800808c:	464a      	mov	r2, r9
 800808e:	f7ff fed3 	bl	8007e38 <memcpy>
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800809c:	81a3      	strh	r3, [r4, #12]
 800809e:	6126      	str	r6, [r4, #16]
 80080a0:	6165      	str	r5, [r4, #20]
 80080a2:	444e      	add	r6, r9
 80080a4:	eba5 0509 	sub.w	r5, r5, r9
 80080a8:	6026      	str	r6, [r4, #0]
 80080aa:	60a5      	str	r5, [r4, #8]
 80080ac:	463e      	mov	r6, r7
 80080ae:	42be      	cmp	r6, r7
 80080b0:	d900      	bls.n	80080b4 <__ssputs_r+0x70>
 80080b2:	463e      	mov	r6, r7
 80080b4:	6820      	ldr	r0, [r4, #0]
 80080b6:	4632      	mov	r2, r6
 80080b8:	4641      	mov	r1, r8
 80080ba:	f000 faab 	bl	8008614 <memmove>
 80080be:	68a3      	ldr	r3, [r4, #8]
 80080c0:	1b9b      	subs	r3, r3, r6
 80080c2:	60a3      	str	r3, [r4, #8]
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	4433      	add	r3, r6
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	2000      	movs	r0, #0
 80080cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d0:	462a      	mov	r2, r5
 80080d2:	f000 fac9 	bl	8008668 <_realloc_r>
 80080d6:	4606      	mov	r6, r0
 80080d8:	2800      	cmp	r0, #0
 80080da:	d1e0      	bne.n	800809e <__ssputs_r+0x5a>
 80080dc:	6921      	ldr	r1, [r4, #16]
 80080de:	4650      	mov	r0, sl
 80080e0:	f7ff feb8 	bl	8007e54 <_free_r>
 80080e4:	230c      	movs	r3, #12
 80080e6:	f8ca 3000 	str.w	r3, [sl]
 80080ea:	89a3      	ldrh	r3, [r4, #12]
 80080ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080f0:	81a3      	strh	r3, [r4, #12]
 80080f2:	f04f 30ff 	mov.w	r0, #4294967295
 80080f6:	e7e9      	b.n	80080cc <__ssputs_r+0x88>

080080f8 <_svfiprintf_r>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	4698      	mov	r8, r3
 80080fe:	898b      	ldrh	r3, [r1, #12]
 8008100:	061b      	lsls	r3, r3, #24
 8008102:	b09d      	sub	sp, #116	; 0x74
 8008104:	4607      	mov	r7, r0
 8008106:	460d      	mov	r5, r1
 8008108:	4614      	mov	r4, r2
 800810a:	d50e      	bpl.n	800812a <_svfiprintf_r+0x32>
 800810c:	690b      	ldr	r3, [r1, #16]
 800810e:	b963      	cbnz	r3, 800812a <_svfiprintf_r+0x32>
 8008110:	2140      	movs	r1, #64	; 0x40
 8008112:	f7ff ff0b 	bl	8007f2c <_malloc_r>
 8008116:	6028      	str	r0, [r5, #0]
 8008118:	6128      	str	r0, [r5, #16]
 800811a:	b920      	cbnz	r0, 8008126 <_svfiprintf_r+0x2e>
 800811c:	230c      	movs	r3, #12
 800811e:	603b      	str	r3, [r7, #0]
 8008120:	f04f 30ff 	mov.w	r0, #4294967295
 8008124:	e0d0      	b.n	80082c8 <_svfiprintf_r+0x1d0>
 8008126:	2340      	movs	r3, #64	; 0x40
 8008128:	616b      	str	r3, [r5, #20]
 800812a:	2300      	movs	r3, #0
 800812c:	9309      	str	r3, [sp, #36]	; 0x24
 800812e:	2320      	movs	r3, #32
 8008130:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008134:	f8cd 800c 	str.w	r8, [sp, #12]
 8008138:	2330      	movs	r3, #48	; 0x30
 800813a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80082e0 <_svfiprintf_r+0x1e8>
 800813e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008142:	f04f 0901 	mov.w	r9, #1
 8008146:	4623      	mov	r3, r4
 8008148:	469a      	mov	sl, r3
 800814a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800814e:	b10a      	cbz	r2, 8008154 <_svfiprintf_r+0x5c>
 8008150:	2a25      	cmp	r2, #37	; 0x25
 8008152:	d1f9      	bne.n	8008148 <_svfiprintf_r+0x50>
 8008154:	ebba 0b04 	subs.w	fp, sl, r4
 8008158:	d00b      	beq.n	8008172 <_svfiprintf_r+0x7a>
 800815a:	465b      	mov	r3, fp
 800815c:	4622      	mov	r2, r4
 800815e:	4629      	mov	r1, r5
 8008160:	4638      	mov	r0, r7
 8008162:	f7ff ff6f 	bl	8008044 <__ssputs_r>
 8008166:	3001      	adds	r0, #1
 8008168:	f000 80a9 	beq.w	80082be <_svfiprintf_r+0x1c6>
 800816c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800816e:	445a      	add	r2, fp
 8008170:	9209      	str	r2, [sp, #36]	; 0x24
 8008172:	f89a 3000 	ldrb.w	r3, [sl]
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 80a1 	beq.w	80082be <_svfiprintf_r+0x1c6>
 800817c:	2300      	movs	r3, #0
 800817e:	f04f 32ff 	mov.w	r2, #4294967295
 8008182:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008186:	f10a 0a01 	add.w	sl, sl, #1
 800818a:	9304      	str	r3, [sp, #16]
 800818c:	9307      	str	r3, [sp, #28]
 800818e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008192:	931a      	str	r3, [sp, #104]	; 0x68
 8008194:	4654      	mov	r4, sl
 8008196:	2205      	movs	r2, #5
 8008198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800819c:	4850      	ldr	r0, [pc, #320]	; (80082e0 <_svfiprintf_r+0x1e8>)
 800819e:	f7f8 f817 	bl	80001d0 <memchr>
 80081a2:	9a04      	ldr	r2, [sp, #16]
 80081a4:	b9d8      	cbnz	r0, 80081de <_svfiprintf_r+0xe6>
 80081a6:	06d0      	lsls	r0, r2, #27
 80081a8:	bf44      	itt	mi
 80081aa:	2320      	movmi	r3, #32
 80081ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081b0:	0711      	lsls	r1, r2, #28
 80081b2:	bf44      	itt	mi
 80081b4:	232b      	movmi	r3, #43	; 0x2b
 80081b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ba:	f89a 3000 	ldrb.w	r3, [sl]
 80081be:	2b2a      	cmp	r3, #42	; 0x2a
 80081c0:	d015      	beq.n	80081ee <_svfiprintf_r+0xf6>
 80081c2:	9a07      	ldr	r2, [sp, #28]
 80081c4:	4654      	mov	r4, sl
 80081c6:	2000      	movs	r0, #0
 80081c8:	f04f 0c0a 	mov.w	ip, #10
 80081cc:	4621      	mov	r1, r4
 80081ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081d2:	3b30      	subs	r3, #48	; 0x30
 80081d4:	2b09      	cmp	r3, #9
 80081d6:	d94d      	bls.n	8008274 <_svfiprintf_r+0x17c>
 80081d8:	b1b0      	cbz	r0, 8008208 <_svfiprintf_r+0x110>
 80081da:	9207      	str	r2, [sp, #28]
 80081dc:	e014      	b.n	8008208 <_svfiprintf_r+0x110>
 80081de:	eba0 0308 	sub.w	r3, r0, r8
 80081e2:	fa09 f303 	lsl.w	r3, r9, r3
 80081e6:	4313      	orrs	r3, r2
 80081e8:	9304      	str	r3, [sp, #16]
 80081ea:	46a2      	mov	sl, r4
 80081ec:	e7d2      	b.n	8008194 <_svfiprintf_r+0x9c>
 80081ee:	9b03      	ldr	r3, [sp, #12]
 80081f0:	1d19      	adds	r1, r3, #4
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	9103      	str	r1, [sp, #12]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	bfbb      	ittet	lt
 80081fa:	425b      	neglt	r3, r3
 80081fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008200:	9307      	strge	r3, [sp, #28]
 8008202:	9307      	strlt	r3, [sp, #28]
 8008204:	bfb8      	it	lt
 8008206:	9204      	strlt	r2, [sp, #16]
 8008208:	7823      	ldrb	r3, [r4, #0]
 800820a:	2b2e      	cmp	r3, #46	; 0x2e
 800820c:	d10c      	bne.n	8008228 <_svfiprintf_r+0x130>
 800820e:	7863      	ldrb	r3, [r4, #1]
 8008210:	2b2a      	cmp	r3, #42	; 0x2a
 8008212:	d134      	bne.n	800827e <_svfiprintf_r+0x186>
 8008214:	9b03      	ldr	r3, [sp, #12]
 8008216:	1d1a      	adds	r2, r3, #4
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	9203      	str	r2, [sp, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	bfb8      	it	lt
 8008220:	f04f 33ff 	movlt.w	r3, #4294967295
 8008224:	3402      	adds	r4, #2
 8008226:	9305      	str	r3, [sp, #20]
 8008228:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80082f0 <_svfiprintf_r+0x1f8>
 800822c:	7821      	ldrb	r1, [r4, #0]
 800822e:	2203      	movs	r2, #3
 8008230:	4650      	mov	r0, sl
 8008232:	f7f7 ffcd 	bl	80001d0 <memchr>
 8008236:	b138      	cbz	r0, 8008248 <_svfiprintf_r+0x150>
 8008238:	9b04      	ldr	r3, [sp, #16]
 800823a:	eba0 000a 	sub.w	r0, r0, sl
 800823e:	2240      	movs	r2, #64	; 0x40
 8008240:	4082      	lsls	r2, r0
 8008242:	4313      	orrs	r3, r2
 8008244:	3401      	adds	r4, #1
 8008246:	9304      	str	r3, [sp, #16]
 8008248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800824c:	4825      	ldr	r0, [pc, #148]	; (80082e4 <_svfiprintf_r+0x1ec>)
 800824e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008252:	2206      	movs	r2, #6
 8008254:	f7f7 ffbc 	bl	80001d0 <memchr>
 8008258:	2800      	cmp	r0, #0
 800825a:	d038      	beq.n	80082ce <_svfiprintf_r+0x1d6>
 800825c:	4b22      	ldr	r3, [pc, #136]	; (80082e8 <_svfiprintf_r+0x1f0>)
 800825e:	bb1b      	cbnz	r3, 80082a8 <_svfiprintf_r+0x1b0>
 8008260:	9b03      	ldr	r3, [sp, #12]
 8008262:	3307      	adds	r3, #7
 8008264:	f023 0307 	bic.w	r3, r3, #7
 8008268:	3308      	adds	r3, #8
 800826a:	9303      	str	r3, [sp, #12]
 800826c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800826e:	4433      	add	r3, r6
 8008270:	9309      	str	r3, [sp, #36]	; 0x24
 8008272:	e768      	b.n	8008146 <_svfiprintf_r+0x4e>
 8008274:	fb0c 3202 	mla	r2, ip, r2, r3
 8008278:	460c      	mov	r4, r1
 800827a:	2001      	movs	r0, #1
 800827c:	e7a6      	b.n	80081cc <_svfiprintf_r+0xd4>
 800827e:	2300      	movs	r3, #0
 8008280:	3401      	adds	r4, #1
 8008282:	9305      	str	r3, [sp, #20]
 8008284:	4619      	mov	r1, r3
 8008286:	f04f 0c0a 	mov.w	ip, #10
 800828a:	4620      	mov	r0, r4
 800828c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008290:	3a30      	subs	r2, #48	; 0x30
 8008292:	2a09      	cmp	r2, #9
 8008294:	d903      	bls.n	800829e <_svfiprintf_r+0x1a6>
 8008296:	2b00      	cmp	r3, #0
 8008298:	d0c6      	beq.n	8008228 <_svfiprintf_r+0x130>
 800829a:	9105      	str	r1, [sp, #20]
 800829c:	e7c4      	b.n	8008228 <_svfiprintf_r+0x130>
 800829e:	fb0c 2101 	mla	r1, ip, r1, r2
 80082a2:	4604      	mov	r4, r0
 80082a4:	2301      	movs	r3, #1
 80082a6:	e7f0      	b.n	800828a <_svfiprintf_r+0x192>
 80082a8:	ab03      	add	r3, sp, #12
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	462a      	mov	r2, r5
 80082ae:	4b0f      	ldr	r3, [pc, #60]	; (80082ec <_svfiprintf_r+0x1f4>)
 80082b0:	a904      	add	r1, sp, #16
 80082b2:	4638      	mov	r0, r7
 80082b4:	f3af 8000 	nop.w
 80082b8:	1c42      	adds	r2, r0, #1
 80082ba:	4606      	mov	r6, r0
 80082bc:	d1d6      	bne.n	800826c <_svfiprintf_r+0x174>
 80082be:	89ab      	ldrh	r3, [r5, #12]
 80082c0:	065b      	lsls	r3, r3, #25
 80082c2:	f53f af2d 	bmi.w	8008120 <_svfiprintf_r+0x28>
 80082c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082c8:	b01d      	add	sp, #116	; 0x74
 80082ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ce:	ab03      	add	r3, sp, #12
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	462a      	mov	r2, r5
 80082d4:	4b05      	ldr	r3, [pc, #20]	; (80082ec <_svfiprintf_r+0x1f4>)
 80082d6:	a904      	add	r1, sp, #16
 80082d8:	4638      	mov	r0, r7
 80082da:	f000 f879 	bl	80083d0 <_printf_i>
 80082de:	e7eb      	b.n	80082b8 <_svfiprintf_r+0x1c0>
 80082e0:	08008994 	.word	0x08008994
 80082e4:	0800899e 	.word	0x0800899e
 80082e8:	00000000 	.word	0x00000000
 80082ec:	08008045 	.word	0x08008045
 80082f0:	0800899a 	.word	0x0800899a

080082f4 <_printf_common>:
 80082f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f8:	4616      	mov	r6, r2
 80082fa:	4699      	mov	r9, r3
 80082fc:	688a      	ldr	r2, [r1, #8]
 80082fe:	690b      	ldr	r3, [r1, #16]
 8008300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008304:	4293      	cmp	r3, r2
 8008306:	bfb8      	it	lt
 8008308:	4613      	movlt	r3, r2
 800830a:	6033      	str	r3, [r6, #0]
 800830c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008310:	4607      	mov	r7, r0
 8008312:	460c      	mov	r4, r1
 8008314:	b10a      	cbz	r2, 800831a <_printf_common+0x26>
 8008316:	3301      	adds	r3, #1
 8008318:	6033      	str	r3, [r6, #0]
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	0699      	lsls	r1, r3, #26
 800831e:	bf42      	ittt	mi
 8008320:	6833      	ldrmi	r3, [r6, #0]
 8008322:	3302      	addmi	r3, #2
 8008324:	6033      	strmi	r3, [r6, #0]
 8008326:	6825      	ldr	r5, [r4, #0]
 8008328:	f015 0506 	ands.w	r5, r5, #6
 800832c:	d106      	bne.n	800833c <_printf_common+0x48>
 800832e:	f104 0a19 	add.w	sl, r4, #25
 8008332:	68e3      	ldr	r3, [r4, #12]
 8008334:	6832      	ldr	r2, [r6, #0]
 8008336:	1a9b      	subs	r3, r3, r2
 8008338:	42ab      	cmp	r3, r5
 800833a:	dc26      	bgt.n	800838a <_printf_common+0x96>
 800833c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008340:	1e13      	subs	r3, r2, #0
 8008342:	6822      	ldr	r2, [r4, #0]
 8008344:	bf18      	it	ne
 8008346:	2301      	movne	r3, #1
 8008348:	0692      	lsls	r2, r2, #26
 800834a:	d42b      	bmi.n	80083a4 <_printf_common+0xb0>
 800834c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008350:	4649      	mov	r1, r9
 8008352:	4638      	mov	r0, r7
 8008354:	47c0      	blx	r8
 8008356:	3001      	adds	r0, #1
 8008358:	d01e      	beq.n	8008398 <_printf_common+0xa4>
 800835a:	6823      	ldr	r3, [r4, #0]
 800835c:	6922      	ldr	r2, [r4, #16]
 800835e:	f003 0306 	and.w	r3, r3, #6
 8008362:	2b04      	cmp	r3, #4
 8008364:	bf02      	ittt	eq
 8008366:	68e5      	ldreq	r5, [r4, #12]
 8008368:	6833      	ldreq	r3, [r6, #0]
 800836a:	1aed      	subeq	r5, r5, r3
 800836c:	68a3      	ldr	r3, [r4, #8]
 800836e:	bf0c      	ite	eq
 8008370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008374:	2500      	movne	r5, #0
 8008376:	4293      	cmp	r3, r2
 8008378:	bfc4      	itt	gt
 800837a:	1a9b      	subgt	r3, r3, r2
 800837c:	18ed      	addgt	r5, r5, r3
 800837e:	2600      	movs	r6, #0
 8008380:	341a      	adds	r4, #26
 8008382:	42b5      	cmp	r5, r6
 8008384:	d11a      	bne.n	80083bc <_printf_common+0xc8>
 8008386:	2000      	movs	r0, #0
 8008388:	e008      	b.n	800839c <_printf_common+0xa8>
 800838a:	2301      	movs	r3, #1
 800838c:	4652      	mov	r2, sl
 800838e:	4649      	mov	r1, r9
 8008390:	4638      	mov	r0, r7
 8008392:	47c0      	blx	r8
 8008394:	3001      	adds	r0, #1
 8008396:	d103      	bne.n	80083a0 <_printf_common+0xac>
 8008398:	f04f 30ff 	mov.w	r0, #4294967295
 800839c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a0:	3501      	adds	r5, #1
 80083a2:	e7c6      	b.n	8008332 <_printf_common+0x3e>
 80083a4:	18e1      	adds	r1, r4, r3
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	2030      	movs	r0, #48	; 0x30
 80083aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083ae:	4422      	add	r2, r4
 80083b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083b8:	3302      	adds	r3, #2
 80083ba:	e7c7      	b.n	800834c <_printf_common+0x58>
 80083bc:	2301      	movs	r3, #1
 80083be:	4622      	mov	r2, r4
 80083c0:	4649      	mov	r1, r9
 80083c2:	4638      	mov	r0, r7
 80083c4:	47c0      	blx	r8
 80083c6:	3001      	adds	r0, #1
 80083c8:	d0e6      	beq.n	8008398 <_printf_common+0xa4>
 80083ca:	3601      	adds	r6, #1
 80083cc:	e7d9      	b.n	8008382 <_printf_common+0x8e>
	...

080083d0 <_printf_i>:
 80083d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083d4:	7e0f      	ldrb	r7, [r1, #24]
 80083d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083d8:	2f78      	cmp	r7, #120	; 0x78
 80083da:	4691      	mov	r9, r2
 80083dc:	4680      	mov	r8, r0
 80083de:	460c      	mov	r4, r1
 80083e0:	469a      	mov	sl, r3
 80083e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083e6:	d807      	bhi.n	80083f8 <_printf_i+0x28>
 80083e8:	2f62      	cmp	r7, #98	; 0x62
 80083ea:	d80a      	bhi.n	8008402 <_printf_i+0x32>
 80083ec:	2f00      	cmp	r7, #0
 80083ee:	f000 80d4 	beq.w	800859a <_printf_i+0x1ca>
 80083f2:	2f58      	cmp	r7, #88	; 0x58
 80083f4:	f000 80c0 	beq.w	8008578 <_printf_i+0x1a8>
 80083f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008400:	e03a      	b.n	8008478 <_printf_i+0xa8>
 8008402:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008406:	2b15      	cmp	r3, #21
 8008408:	d8f6      	bhi.n	80083f8 <_printf_i+0x28>
 800840a:	a101      	add	r1, pc, #4	; (adr r1, 8008410 <_printf_i+0x40>)
 800840c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008410:	08008469 	.word	0x08008469
 8008414:	0800847d 	.word	0x0800847d
 8008418:	080083f9 	.word	0x080083f9
 800841c:	080083f9 	.word	0x080083f9
 8008420:	080083f9 	.word	0x080083f9
 8008424:	080083f9 	.word	0x080083f9
 8008428:	0800847d 	.word	0x0800847d
 800842c:	080083f9 	.word	0x080083f9
 8008430:	080083f9 	.word	0x080083f9
 8008434:	080083f9 	.word	0x080083f9
 8008438:	080083f9 	.word	0x080083f9
 800843c:	08008581 	.word	0x08008581
 8008440:	080084a9 	.word	0x080084a9
 8008444:	0800853b 	.word	0x0800853b
 8008448:	080083f9 	.word	0x080083f9
 800844c:	080083f9 	.word	0x080083f9
 8008450:	080085a3 	.word	0x080085a3
 8008454:	080083f9 	.word	0x080083f9
 8008458:	080084a9 	.word	0x080084a9
 800845c:	080083f9 	.word	0x080083f9
 8008460:	080083f9 	.word	0x080083f9
 8008464:	08008543 	.word	0x08008543
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	1d1a      	adds	r2, r3, #4
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	602a      	str	r2, [r5, #0]
 8008470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008478:	2301      	movs	r3, #1
 800847a:	e09f      	b.n	80085bc <_printf_i+0x1ec>
 800847c:	6820      	ldr	r0, [r4, #0]
 800847e:	682b      	ldr	r3, [r5, #0]
 8008480:	0607      	lsls	r7, r0, #24
 8008482:	f103 0104 	add.w	r1, r3, #4
 8008486:	6029      	str	r1, [r5, #0]
 8008488:	d501      	bpl.n	800848e <_printf_i+0xbe>
 800848a:	681e      	ldr	r6, [r3, #0]
 800848c:	e003      	b.n	8008496 <_printf_i+0xc6>
 800848e:	0646      	lsls	r6, r0, #25
 8008490:	d5fb      	bpl.n	800848a <_printf_i+0xba>
 8008492:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008496:	2e00      	cmp	r6, #0
 8008498:	da03      	bge.n	80084a2 <_printf_i+0xd2>
 800849a:	232d      	movs	r3, #45	; 0x2d
 800849c:	4276      	negs	r6, r6
 800849e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084a2:	485a      	ldr	r0, [pc, #360]	; (800860c <_printf_i+0x23c>)
 80084a4:	230a      	movs	r3, #10
 80084a6:	e012      	b.n	80084ce <_printf_i+0xfe>
 80084a8:	682b      	ldr	r3, [r5, #0]
 80084aa:	6820      	ldr	r0, [r4, #0]
 80084ac:	1d19      	adds	r1, r3, #4
 80084ae:	6029      	str	r1, [r5, #0]
 80084b0:	0605      	lsls	r5, r0, #24
 80084b2:	d501      	bpl.n	80084b8 <_printf_i+0xe8>
 80084b4:	681e      	ldr	r6, [r3, #0]
 80084b6:	e002      	b.n	80084be <_printf_i+0xee>
 80084b8:	0641      	lsls	r1, r0, #25
 80084ba:	d5fb      	bpl.n	80084b4 <_printf_i+0xe4>
 80084bc:	881e      	ldrh	r6, [r3, #0]
 80084be:	4853      	ldr	r0, [pc, #332]	; (800860c <_printf_i+0x23c>)
 80084c0:	2f6f      	cmp	r7, #111	; 0x6f
 80084c2:	bf0c      	ite	eq
 80084c4:	2308      	moveq	r3, #8
 80084c6:	230a      	movne	r3, #10
 80084c8:	2100      	movs	r1, #0
 80084ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084ce:	6865      	ldr	r5, [r4, #4]
 80084d0:	60a5      	str	r5, [r4, #8]
 80084d2:	2d00      	cmp	r5, #0
 80084d4:	bfa2      	ittt	ge
 80084d6:	6821      	ldrge	r1, [r4, #0]
 80084d8:	f021 0104 	bicge.w	r1, r1, #4
 80084dc:	6021      	strge	r1, [r4, #0]
 80084de:	b90e      	cbnz	r6, 80084e4 <_printf_i+0x114>
 80084e0:	2d00      	cmp	r5, #0
 80084e2:	d04b      	beq.n	800857c <_printf_i+0x1ac>
 80084e4:	4615      	mov	r5, r2
 80084e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80084ea:	fb03 6711 	mls	r7, r3, r1, r6
 80084ee:	5dc7      	ldrb	r7, [r0, r7]
 80084f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084f4:	4637      	mov	r7, r6
 80084f6:	42bb      	cmp	r3, r7
 80084f8:	460e      	mov	r6, r1
 80084fa:	d9f4      	bls.n	80084e6 <_printf_i+0x116>
 80084fc:	2b08      	cmp	r3, #8
 80084fe:	d10b      	bne.n	8008518 <_printf_i+0x148>
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	07de      	lsls	r6, r3, #31
 8008504:	d508      	bpl.n	8008518 <_printf_i+0x148>
 8008506:	6923      	ldr	r3, [r4, #16]
 8008508:	6861      	ldr	r1, [r4, #4]
 800850a:	4299      	cmp	r1, r3
 800850c:	bfde      	ittt	le
 800850e:	2330      	movle	r3, #48	; 0x30
 8008510:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008514:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008518:	1b52      	subs	r2, r2, r5
 800851a:	6122      	str	r2, [r4, #16]
 800851c:	f8cd a000 	str.w	sl, [sp]
 8008520:	464b      	mov	r3, r9
 8008522:	aa03      	add	r2, sp, #12
 8008524:	4621      	mov	r1, r4
 8008526:	4640      	mov	r0, r8
 8008528:	f7ff fee4 	bl	80082f4 <_printf_common>
 800852c:	3001      	adds	r0, #1
 800852e:	d14a      	bne.n	80085c6 <_printf_i+0x1f6>
 8008530:	f04f 30ff 	mov.w	r0, #4294967295
 8008534:	b004      	add	sp, #16
 8008536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	f043 0320 	orr.w	r3, r3, #32
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	4833      	ldr	r0, [pc, #204]	; (8008610 <_printf_i+0x240>)
 8008544:	2778      	movs	r7, #120	; 0x78
 8008546:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	6829      	ldr	r1, [r5, #0]
 800854e:	061f      	lsls	r7, r3, #24
 8008550:	f851 6b04 	ldr.w	r6, [r1], #4
 8008554:	d402      	bmi.n	800855c <_printf_i+0x18c>
 8008556:	065f      	lsls	r7, r3, #25
 8008558:	bf48      	it	mi
 800855a:	b2b6      	uxthmi	r6, r6
 800855c:	07df      	lsls	r7, r3, #31
 800855e:	bf48      	it	mi
 8008560:	f043 0320 	orrmi.w	r3, r3, #32
 8008564:	6029      	str	r1, [r5, #0]
 8008566:	bf48      	it	mi
 8008568:	6023      	strmi	r3, [r4, #0]
 800856a:	b91e      	cbnz	r6, 8008574 <_printf_i+0x1a4>
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	f023 0320 	bic.w	r3, r3, #32
 8008572:	6023      	str	r3, [r4, #0]
 8008574:	2310      	movs	r3, #16
 8008576:	e7a7      	b.n	80084c8 <_printf_i+0xf8>
 8008578:	4824      	ldr	r0, [pc, #144]	; (800860c <_printf_i+0x23c>)
 800857a:	e7e4      	b.n	8008546 <_printf_i+0x176>
 800857c:	4615      	mov	r5, r2
 800857e:	e7bd      	b.n	80084fc <_printf_i+0x12c>
 8008580:	682b      	ldr	r3, [r5, #0]
 8008582:	6826      	ldr	r6, [r4, #0]
 8008584:	6961      	ldr	r1, [r4, #20]
 8008586:	1d18      	adds	r0, r3, #4
 8008588:	6028      	str	r0, [r5, #0]
 800858a:	0635      	lsls	r5, r6, #24
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	d501      	bpl.n	8008594 <_printf_i+0x1c4>
 8008590:	6019      	str	r1, [r3, #0]
 8008592:	e002      	b.n	800859a <_printf_i+0x1ca>
 8008594:	0670      	lsls	r0, r6, #25
 8008596:	d5fb      	bpl.n	8008590 <_printf_i+0x1c0>
 8008598:	8019      	strh	r1, [r3, #0]
 800859a:	2300      	movs	r3, #0
 800859c:	6123      	str	r3, [r4, #16]
 800859e:	4615      	mov	r5, r2
 80085a0:	e7bc      	b.n	800851c <_printf_i+0x14c>
 80085a2:	682b      	ldr	r3, [r5, #0]
 80085a4:	1d1a      	adds	r2, r3, #4
 80085a6:	602a      	str	r2, [r5, #0]
 80085a8:	681d      	ldr	r5, [r3, #0]
 80085aa:	6862      	ldr	r2, [r4, #4]
 80085ac:	2100      	movs	r1, #0
 80085ae:	4628      	mov	r0, r5
 80085b0:	f7f7 fe0e 	bl	80001d0 <memchr>
 80085b4:	b108      	cbz	r0, 80085ba <_printf_i+0x1ea>
 80085b6:	1b40      	subs	r0, r0, r5
 80085b8:	6060      	str	r0, [r4, #4]
 80085ba:	6863      	ldr	r3, [r4, #4]
 80085bc:	6123      	str	r3, [r4, #16]
 80085be:	2300      	movs	r3, #0
 80085c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085c4:	e7aa      	b.n	800851c <_printf_i+0x14c>
 80085c6:	6923      	ldr	r3, [r4, #16]
 80085c8:	462a      	mov	r2, r5
 80085ca:	4649      	mov	r1, r9
 80085cc:	4640      	mov	r0, r8
 80085ce:	47d0      	blx	sl
 80085d0:	3001      	adds	r0, #1
 80085d2:	d0ad      	beq.n	8008530 <_printf_i+0x160>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	079b      	lsls	r3, r3, #30
 80085d8:	d413      	bmi.n	8008602 <_printf_i+0x232>
 80085da:	68e0      	ldr	r0, [r4, #12]
 80085dc:	9b03      	ldr	r3, [sp, #12]
 80085de:	4298      	cmp	r0, r3
 80085e0:	bfb8      	it	lt
 80085e2:	4618      	movlt	r0, r3
 80085e4:	e7a6      	b.n	8008534 <_printf_i+0x164>
 80085e6:	2301      	movs	r3, #1
 80085e8:	4632      	mov	r2, r6
 80085ea:	4649      	mov	r1, r9
 80085ec:	4640      	mov	r0, r8
 80085ee:	47d0      	blx	sl
 80085f0:	3001      	adds	r0, #1
 80085f2:	d09d      	beq.n	8008530 <_printf_i+0x160>
 80085f4:	3501      	adds	r5, #1
 80085f6:	68e3      	ldr	r3, [r4, #12]
 80085f8:	9903      	ldr	r1, [sp, #12]
 80085fa:	1a5b      	subs	r3, r3, r1
 80085fc:	42ab      	cmp	r3, r5
 80085fe:	dcf2      	bgt.n	80085e6 <_printf_i+0x216>
 8008600:	e7eb      	b.n	80085da <_printf_i+0x20a>
 8008602:	2500      	movs	r5, #0
 8008604:	f104 0619 	add.w	r6, r4, #25
 8008608:	e7f5      	b.n	80085f6 <_printf_i+0x226>
 800860a:	bf00      	nop
 800860c:	080089a5 	.word	0x080089a5
 8008610:	080089b6 	.word	0x080089b6

08008614 <memmove>:
 8008614:	4288      	cmp	r0, r1
 8008616:	b510      	push	{r4, lr}
 8008618:	eb01 0402 	add.w	r4, r1, r2
 800861c:	d902      	bls.n	8008624 <memmove+0x10>
 800861e:	4284      	cmp	r4, r0
 8008620:	4623      	mov	r3, r4
 8008622:	d807      	bhi.n	8008634 <memmove+0x20>
 8008624:	1e43      	subs	r3, r0, #1
 8008626:	42a1      	cmp	r1, r4
 8008628:	d008      	beq.n	800863c <memmove+0x28>
 800862a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800862e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008632:	e7f8      	b.n	8008626 <memmove+0x12>
 8008634:	4402      	add	r2, r0
 8008636:	4601      	mov	r1, r0
 8008638:	428a      	cmp	r2, r1
 800863a:	d100      	bne.n	800863e <memmove+0x2a>
 800863c:	bd10      	pop	{r4, pc}
 800863e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008646:	e7f7      	b.n	8008638 <memmove+0x24>

08008648 <_sbrk_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	4d06      	ldr	r5, [pc, #24]	; (8008664 <_sbrk_r+0x1c>)
 800864c:	2300      	movs	r3, #0
 800864e:	4604      	mov	r4, r0
 8008650:	4608      	mov	r0, r1
 8008652:	602b      	str	r3, [r5, #0]
 8008654:	f7f8 fbce 	bl	8000df4 <_sbrk>
 8008658:	1c43      	adds	r3, r0, #1
 800865a:	d102      	bne.n	8008662 <_sbrk_r+0x1a>
 800865c:	682b      	ldr	r3, [r5, #0]
 800865e:	b103      	cbz	r3, 8008662 <_sbrk_r+0x1a>
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	bd38      	pop	{r3, r4, r5, pc}
 8008664:	2000242c 	.word	0x2000242c

08008668 <_realloc_r>:
 8008668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800866c:	4680      	mov	r8, r0
 800866e:	4614      	mov	r4, r2
 8008670:	460e      	mov	r6, r1
 8008672:	b921      	cbnz	r1, 800867e <_realloc_r+0x16>
 8008674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008678:	4611      	mov	r1, r2
 800867a:	f7ff bc57 	b.w	8007f2c <_malloc_r>
 800867e:	b92a      	cbnz	r2, 800868c <_realloc_r+0x24>
 8008680:	f7ff fbe8 	bl	8007e54 <_free_r>
 8008684:	4625      	mov	r5, r4
 8008686:	4628      	mov	r0, r5
 8008688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800868c:	f000 f81b 	bl	80086c6 <_malloc_usable_size_r>
 8008690:	4284      	cmp	r4, r0
 8008692:	4607      	mov	r7, r0
 8008694:	d802      	bhi.n	800869c <_realloc_r+0x34>
 8008696:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800869a:	d812      	bhi.n	80086c2 <_realloc_r+0x5a>
 800869c:	4621      	mov	r1, r4
 800869e:	4640      	mov	r0, r8
 80086a0:	f7ff fc44 	bl	8007f2c <_malloc_r>
 80086a4:	4605      	mov	r5, r0
 80086a6:	2800      	cmp	r0, #0
 80086a8:	d0ed      	beq.n	8008686 <_realloc_r+0x1e>
 80086aa:	42bc      	cmp	r4, r7
 80086ac:	4622      	mov	r2, r4
 80086ae:	4631      	mov	r1, r6
 80086b0:	bf28      	it	cs
 80086b2:	463a      	movcs	r2, r7
 80086b4:	f7ff fbc0 	bl	8007e38 <memcpy>
 80086b8:	4631      	mov	r1, r6
 80086ba:	4640      	mov	r0, r8
 80086bc:	f7ff fbca 	bl	8007e54 <_free_r>
 80086c0:	e7e1      	b.n	8008686 <_realloc_r+0x1e>
 80086c2:	4635      	mov	r5, r6
 80086c4:	e7df      	b.n	8008686 <_realloc_r+0x1e>

080086c6 <_malloc_usable_size_r>:
 80086c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086ca:	1f18      	subs	r0, r3, #4
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	bfbc      	itt	lt
 80086d0:	580b      	ldrlt	r3, [r1, r0]
 80086d2:	18c0      	addlt	r0, r0, r3
 80086d4:	4770      	bx	lr
	...

080086d8 <_init>:
 80086d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086da:	bf00      	nop
 80086dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086de:	bc08      	pop	{r3}
 80086e0:	469e      	mov	lr, r3
 80086e2:	4770      	bx	lr

080086e4 <_fini>:
 80086e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e6:	bf00      	nop
 80086e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ea:	bc08      	pop	{r3}
 80086ec:	469e      	mov	lr, r3
 80086ee:	4770      	bx	lr
