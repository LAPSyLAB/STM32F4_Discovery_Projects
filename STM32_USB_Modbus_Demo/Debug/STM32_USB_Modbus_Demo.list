
STM32_USB_Modbus_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000848c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  0800861c  0800861c  0001861c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088f4  080088f4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080088f4  080088f4  000188f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088fc  080088fc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088fc  080088fc  000188fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008900  08008900  00018900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          0000213c  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002324  20002324  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d14c  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043c9  00000000  00000000  0003d364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  00041730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010b8  00000000  00000000  000429b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d62  00000000  00000000  00043a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b40a  00000000  00000000  000697d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccf33  00000000  00000000  00084bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00151b0f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e84  00000000  00000000  00151b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008604 	.word	0x08008604

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08008604 	.word	0x08008604

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08c      	sub	sp, #48	; 0x30
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	61bb      	str	r3, [r7, #24]
 8000582:	4b72      	ldr	r3, [pc, #456]	; (800074c <MX_GPIO_Init+0x1e4>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a71      	ldr	r2, [pc, #452]	; (800074c <MX_GPIO_Init+0x1e4>)
 8000588:	f043 0310 	orr.w	r3, r3, #16
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b6f      	ldr	r3, [pc, #444]	; (800074c <MX_GPIO_Init+0x1e4>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0310 	and.w	r3, r3, #16
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	4b6b      	ldr	r3, [pc, #428]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a6a      	ldr	r2, [pc, #424]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005a4:	f043 0304 	orr.w	r3, r3, #4
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b68      	ldr	r3, [pc, #416]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0304 	and.w	r3, r3, #4
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	4b64      	ldr	r3, [pc, #400]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a63      	ldr	r2, [pc, #396]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b61      	ldr	r3, [pc, #388]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b5d      	ldr	r3, [pc, #372]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a5c      	ldr	r2, [pc, #368]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b5a      	ldr	r3, [pc, #360]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	4b56      	ldr	r3, [pc, #344]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a55      	ldr	r2, [pc, #340]	; (800074c <MX_GPIO_Init+0x1e4>)
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b53      	ldr	r3, [pc, #332]	; (800074c <MX_GPIO_Init+0x1e4>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	4b4f      	ldr	r3, [pc, #316]	; (800074c <MX_GPIO_Init+0x1e4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a4e      	ldr	r2, [pc, #312]	; (800074c <MX_GPIO_Init+0x1e4>)
 8000614:	f043 0308 	orr.w	r3, r3, #8
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b4c      	ldr	r3, [pc, #304]	; (800074c <MX_GPIO_Init+0x1e4>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0308 	and.w	r3, r3, #8
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2108      	movs	r1, #8
 800062a:	4849      	ldr	r0, [pc, #292]	; (8000750 <MX_GPIO_Init+0x1e8>)
 800062c:	f000 ffae 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2101      	movs	r1, #1
 8000634:	4847      	ldr	r0, [pc, #284]	; (8000754 <MX_GPIO_Init+0x1ec>)
 8000636:	f000 ffa9 	bl	800158c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800063a:	2200      	movs	r2, #0
 800063c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000640:	4845      	ldr	r0, [pc, #276]	; (8000758 <MX_GPIO_Init+0x1f0>)
 8000642:	f000 ffa3 	bl	800158c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000646:	2308      	movs	r3, #8
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	2301      	movs	r3, #1
 800064c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	2300      	movs	r3, #0
 8000654:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4619      	mov	r1, r3
 800065c:	483c      	ldr	r0, [pc, #240]	; (8000750 <MX_GPIO_Init+0x1e8>)
 800065e:	f000 fde1 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000662:	2301      	movs	r3, #1
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4836      	ldr	r0, [pc, #216]	; (8000754 <MX_GPIO_Init+0x1ec>)
 800067a:	f000 fdd3 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800067e:	2308      	movs	r3, #8
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800068e:	2305      	movs	r3, #5
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	4619      	mov	r1, r3
 8000698:	482e      	ldr	r0, [pc, #184]	; (8000754 <MX_GPIO_Init+0x1ec>)
 800069a:	f000 fdc3 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800069e:	2301      	movs	r3, #1
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006a2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4619      	mov	r1, r3
 80006b2:	482a      	ldr	r0, [pc, #168]	; (800075c <MX_GPIO_Init+0x1f4>)
 80006b4:	f000 fdb6 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006b8:	2304      	movs	r3, #4
 80006ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006bc:	2300      	movs	r3, #0
 80006be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4825      	ldr	r0, [pc, #148]	; (8000760 <MX_GPIO_Init+0x1f8>)
 80006cc:	f000 fdaa 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80006d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006e2:	2305      	movs	r3, #5
 80006e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	481c      	ldr	r0, [pc, #112]	; (8000760 <MX_GPIO_Init+0x1f8>)
 80006ee:	f000 fd99 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006f2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006f6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2300      	movs	r3, #0
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000704:	f107 031c 	add.w	r3, r7, #28
 8000708:	4619      	mov	r1, r3
 800070a:	4813      	ldr	r0, [pc, #76]	; (8000758 <MX_GPIO_Init+0x1f0>)
 800070c:	f000 fd8a 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000710:	2320      	movs	r3, #32
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	4619      	mov	r1, r3
 8000722:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_GPIO_Init+0x1f0>)
 8000724:	f000 fd7e 	bl	8001224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000728:	2302      	movs	r3, #2
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800072c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	4619      	mov	r1, r3
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_GPIO_Init+0x1e8>)
 800073e:	f000 fd71 	bl	8001224 <HAL_GPIO_Init>

}
 8000742:	bf00      	nop
 8000744:	3730      	adds	r7, #48	; 0x30
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40021000 	.word	0x40021000
 8000754:	40020800 	.word	0x40020800
 8000758:	40020c00 	.word	0x40020c00
 800075c:	40020000 	.word	0x40020000
 8000760:	40020400 	.word	0x40020400

08000764 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_I2C1_Init+0x50>)
 800076a:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <MX_I2C1_Init+0x54>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000770:	4a12      	ldr	r2, [pc, #72]	; (80007bc <MX_I2C1_Init+0x58>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_I2C1_Init+0x50>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000782:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000786:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_I2C1_Init+0x50>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <MX_I2C1_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_I2C1_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_I2C1_Init+0x50>)
 80007a2:	f000 ff27 	bl	80015f4 <HAL_I2C_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007ac:	f000 fa40 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000444 	.word	0x20000444
 80007b8:	40005400 	.word	0x40005400
 80007bc:	000186a0 	.word	0x000186a0

080007c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a19      	ldr	r2, [pc, #100]	; (8000844 <HAL_I2C_MspInit+0x84>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d12c      	bne.n	800083c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b18      	ldr	r3, [pc, #96]	; (8000848 <HAL_I2C_MspInit+0x88>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <HAL_I2C_MspInit+0x88>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <HAL_I2C_MspInit+0x88>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007fe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000804:	2312      	movs	r3, #18
 8000806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000808:	2301      	movs	r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000810:	2304      	movs	r3, #4
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	480c      	ldr	r0, [pc, #48]	; (800084c <HAL_I2C_MspInit+0x8c>)
 800081c:	f000 fd02 	bl	8001224 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_I2C_MspInit+0x88>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000828:	4a07      	ldr	r2, [pc, #28]	; (8000848 <HAL_I2C_MspInit+0x88>)
 800082a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800082e:	6413      	str	r3, [r2, #64]	; 0x40
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_I2C_MspInit+0x88>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40005400 	.word	0x40005400
 8000848:	40023800 	.word	0x40023800
 800084c:	40020400 	.word	0x40020400

08000850 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_I2S3_Init+0x54>)
 8000856:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <MX_I2S3_Init+0x58>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_I2S3_Init+0x54>)
 800085c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000860:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_I2S3_Init+0x54>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_I2S3_Init+0x54>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <MX_I2S3_Init+0x54>)
 8000870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000874:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_I2S3_Init+0x54>)
 8000878:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <MX_I2S3_Init+0x5c>)
 800087a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_I2S3_Init+0x54>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_I2S3_Init+0x54>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_I2S3_Init+0x54>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_I2S3_Init+0x54>)
 8000890:	f000 fff4 	bl	800187c <HAL_I2S_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800089a:	f000 f9c9 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000498 	.word	0x20000498
 80008a8:	40003c00 	.word	0x40003c00
 80008ac:	00017700 	.word	0x00017700

080008b0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08e      	sub	sp, #56	; 0x38
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a31      	ldr	r2, [pc, #196]	; (80009a0 <HAL_I2S_MspInit+0xf0>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d15a      	bne.n	8000996 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008e0:	2301      	movs	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008e4:	23c0      	movs	r3, #192	; 0xc0
 80008e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4618      	mov	r0, r3
 80008f2:	f003 fa47 	bl	8003d84 <HAL_RCCEx_PeriphCLKConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80008fc:	f000 f998 	bl	8000c30 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <HAL_I2S_MspInit+0xf4>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	4a26      	ldr	r2, [pc, #152]	; (80009a4 <HAL_I2S_MspInit+0xf4>)
 800090a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800090e:	6413      	str	r3, [r2, #64]	; 0x40
 8000910:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <HAL_I2S_MspInit+0xf4>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <HAL_I2S_MspInit+0xf4>)
 8000922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000924:	4a1f      	ldr	r2, [pc, #124]	; (80009a4 <HAL_I2S_MspInit+0xf4>)
 8000926:	f043 0301 	orr.w	r3, r3, #1
 800092a:	6313      	str	r3, [r2, #48]	; 0x30
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <HAL_I2S_MspInit+0xf4>)
 800092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <HAL_I2S_MspInit+0xf4>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000940:	4a18      	ldr	r2, [pc, #96]	; (80009a4 <HAL_I2S_MspInit+0xf4>)
 8000942:	f043 0304 	orr.w	r3, r3, #4
 8000946:	6313      	str	r3, [r2, #48]	; 0x30
 8000948:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <HAL_I2S_MspInit+0xf4>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094c:	f003 0304 	and.w	r3, r3, #4
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000954:	2310      	movs	r3, #16
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000964:	2306      	movs	r3, #6
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096c:	4619      	mov	r1, r3
 800096e:	480e      	ldr	r0, [pc, #56]	; (80009a8 <HAL_I2S_MspInit+0xf8>)
 8000970:	f000 fc58 	bl	8001224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000974:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000986:	2306      	movs	r3, #6
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	4806      	ldr	r0, [pc, #24]	; (80009ac <HAL_I2S_MspInit+0xfc>)
 8000992:	f000 fc47 	bl	8001224 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000996:	bf00      	nop
 8000998:	3738      	adds	r7, #56	; 0x38
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40003c00 	.word	0x40003c00
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000
 80009ac:	40020800 	.word	0x40020800

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b2:	b089      	sub	sp, #36	; 0x24
 80009b4:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */
	uint32_t lastRun = 0U;
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ba:	f000 fa8b 	bl	8000ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009be:	f000 f8cd 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c2:	f7ff fdd1 	bl	8000568 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009c6:	f7ff fecd 	bl	8000764 <MX_I2C1_Init>
  MX_I2S3_Init();
 80009ca:	f7ff ff41 	bl	8000850 <MX_I2S3_Init>
  MX_SPI1_Init();
 80009ce:	f000 f935 	bl	8000c3c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80009d2:	f006 fc65 	bl	80072a0 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 nowTime = HAL_GetTick();
 80009d6:	f000 fae3 	bl	8000fa0 <HAL_GetTick>
 80009da:	6038      	str	r0, [r7, #0]

	 if ((nowTime - lastRun) >= 1000) {
 80009dc:	683a      	ldr	r2, [r7, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009e6:	d33f      	bcc.n	8000a68 <main+0xb8>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80009e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ec:	484c      	ldr	r0, [pc, #304]	; (8000b20 <main+0x170>)
 80009ee:	f000 fde6 	bl	80015be <HAL_GPIO_TogglePin>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80009f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f6:	484a      	ldr	r0, [pc, #296]	; (8000b20 <main+0x170>)
 80009f8:	f000 fde1 	bl	80015be <HAL_GPIO_TogglePin>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80009fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a00:	4847      	ldr	r0, [pc, #284]	; (8000b20 <main+0x170>)
 8000a02:	f000 fddc 	bl	80015be <HAL_GPIO_TogglePin>

		 MB_MasterState=MBUS_REQSENT;
 8000a06:	4b47      	ldr	r3, [pc, #284]	; (8000b24 <main+0x174>)
 8000a08:	2202      	movs	r2, #2
 8000a0a:	701a      	strb	r2, [r3, #0]
//		 ---   Slave ID=1, Write state 511 of 1 analog output register on addresses 0-15
//		  errorCode = eMBMasterReqWriteHoldingRegister(1,MBCnt,511,1);
//		  MBCnt= (MBCnt + 1) % 16;

//		 ---   Slave ID=1, Write state 511 of 1 analog output register on addresses 0-15
		 usModbusUserData[0]= usModbusUserData[1]= usModbusUserData[2]= usModbusUserData[3]=MBCnt;
 8000a0c:	4b46      	ldr	r3, [pc, #280]	; (8000b28 <main+0x178>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	4b46      	ldr	r3, [pc, #280]	; (8000b2c <main+0x17c>)
 8000a14:	80da      	strh	r2, [r3, #6]
 8000a16:	4b45      	ldr	r3, [pc, #276]	; (8000b2c <main+0x17c>)
 8000a18:	88da      	ldrh	r2, [r3, #6]
 8000a1a:	4b44      	ldr	r3, [pc, #272]	; (8000b2c <main+0x17c>)
 8000a1c:	809a      	strh	r2, [r3, #4]
 8000a1e:	4b43      	ldr	r3, [pc, #268]	; (8000b2c <main+0x17c>)
 8000a20:	889a      	ldrh	r2, [r3, #4]
 8000a22:	4b42      	ldr	r3, [pc, #264]	; (8000b2c <main+0x17c>)
 8000a24:	805a      	strh	r2, [r3, #2]
 8000a26:	4b41      	ldr	r3, [pc, #260]	; (8000b2c <main+0x17c>)
 8000a28:	885a      	ldrh	r2, [r3, #2]
 8000a2a:	4b40      	ldr	r3, [pc, #256]	; (8000b2c <main+0x17c>)
 8000a2c:	801a      	strh	r2, [r3, #0]
		 errorCode = eMBMasterReqWriteMultipleHoldingRegister(1,MBCnt,2,usModbusUserData,1);
 8000a2e:	4b3e      	ldr	r3, [pc, #248]	; (8000b28 <main+0x178>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b299      	uxth	r1, r3
 8000a34:	2301      	movs	r3, #1
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	4b3c      	ldr	r3, [pc, #240]	; (8000b2c <main+0x17c>)
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f004 fee3 	bl	8005808 <eMBMasterReqWriteMultipleHoldingRegister>
 8000a42:	4603      	mov	r3, r0
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b3a      	ldr	r3, [pc, #232]	; (8000b30 <main+0x180>)
 8000a48:	701a      	strb	r2, [r3, #0]
		 MBCnt= (MBCnt + 1) % 16;
 8000a4a:	4b37      	ldr	r3, [pc, #220]	; (8000b28 <main+0x178>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	425a      	negs	r2, r3
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	f002 020f 	and.w	r2, r2, #15
 8000a5a:	bf58      	it	pl
 8000a5c:	4253      	negpl	r3, r2
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <main+0x178>)
 8000a62:	701a      	strb	r2, [r3, #0]
		 //       UNChecked tests - TODO
		 // -------------------------------------

		 //		errorCode = eMBMasterReqReadWriteMultipleHoldingRegister(1,3,2,usModbusUserData,5,2,WAIT_FOREVER);

	     lastRun = nowTime;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	607b      	str	r3, [r7, #4]
	 }


	 KeyState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000a68:	2101      	movs	r1, #1
 8000a6a:	4832      	ldr	r0, [pc, #200]	; (8000b34 <main+0x184>)
 8000a6c:	f000 fd76 	bl	800155c <HAL_GPIO_ReadPin>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b30      	ldr	r3, [pc, #192]	; (8000b38 <main+0x188>)
 8000a76:	601a      	str	r2, [r3, #0]
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, KeyState);
 8000a78:	4b2f      	ldr	r3, [pc, #188]	; (8000b38 <main+0x188>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	461a      	mov	r2, r3
 8000a80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a84:	4826      	ldr	r0, [pc, #152]	; (8000b20 <main+0x170>)
 8000a86:	f000 fd81 	bl	800158c <HAL_GPIO_WritePin>


      // Receive over USB Virtual ComPort
	  if (RXbufferStrLen > 0) {
 8000a8a:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <main+0x18c>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d0a0      	beq.n	80009d6 <main+0x26>

		  if ((RXbuffer[0] == MBbuffer[0]) && (RXbuffer[1] == MBbuffer[1]) ) {
 8000a94:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <main+0x190>)
 8000a96:	781a      	ldrb	r2, [r3, #0]
 8000a98:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <main+0x194>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d10c      	bne.n	8000aba <main+0x10a>
 8000aa0:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <main+0x190>)
 8000aa2:	785a      	ldrb	r2, [r3, #1]
 8000aa4:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <main+0x194>)
 8000aa6:	785b      	ldrb	r3, [r3, #1]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d106      	bne.n	8000aba <main+0x10a>
			  succCount++;
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <main+0x198>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <main+0x198>)
 8000ab6:	801a      	strh	r2, [r3, #0]
 8000ab8:	e009      	b.n	8000ace <main+0x11e>
		  } else {
			  errorCount++;
 8000aba:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <main+0x19c>)
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <main+0x19c>)
 8000ac4:	801a      	strh	r2, [r3, #0]
			  MBErrorCode = RXbuffer[2];
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <main+0x190>)
 8000ac8:	789a      	ldrb	r2, [r3, #2]
 8000aca:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <main+0x1a0>)
 8000acc:	701a      	strb	r2, [r3, #0]
		  }

		  snprintf(SendBuffer,BUFSIZE,"Modbus Msg Received: Addr:%d FC:%02x Bytes:%d | %02x %02x %04x\r\n\0",RXbuffer[0],RXbuffer[1],RXbuffer[2],RXbuffer[3],RXbuffer[4],RXbuffer[3]*256+RXbuffer[4]);
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <main+0x190>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461e      	mov	r6, r3
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <main+0x190>)
 8000ad6:	785b      	ldrb	r3, [r3, #1]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <main+0x190>)
 8000adc:	789b      	ldrb	r3, [r3, #2]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <main+0x190>)
 8000ae2:	78db      	ldrb	r3, [r3, #3]
 8000ae4:	461c      	mov	r4, r3
 8000ae6:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <main+0x190>)
 8000ae8:	791b      	ldrb	r3, [r3, #4]
 8000aea:	461d      	mov	r5, r3
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <main+0x190>)
 8000aee:	78db      	ldrb	r3, [r3, #3]
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <main+0x190>)
 8000af4:	7912      	ldrb	r2, [r2, #4]
 8000af6:	4413      	add	r3, r2
 8000af8:	9304      	str	r3, [sp, #16]
 8000afa:	9503      	str	r5, [sp, #12]
 8000afc:	9402      	str	r4, [sp, #8]
 8000afe:	9001      	str	r0, [sp, #4]
 8000b00:	9100      	str	r1, [sp, #0]
 8000b02:	4633      	mov	r3, r6
 8000b04:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <main+0x1a4>)
 8000b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b0a:	4813      	ldr	r0, [pc, #76]	; (8000b58 <main+0x1a8>)
 8000b0c:	f007 f946 	bl	8007d9c <sniprintf>
          // Not sending on USB not to interfere with MODBUS communication !

		  MB_MasterState=MBUS_READY;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <main+0x174>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
		  RXbufferStrLen = 0;
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <main+0x18c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
	 nowTime = HAL_GetTick();
 8000b1c:	e75b      	b.n	80009d6 <main+0x26>
 8000b1e:	bf00      	nop
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	20000000 	.word	0x20000000
 8000b28:	20000209 	.word	0x20000209
 8000b2c:	200007e4 	.word	0x200007e4
 8000b30:	2000020a 	.word	0x2000020a
 8000b34:	40020000 	.word	0x40020000
 8000b38:	20000204 	.word	0x20000204
 8000b3c:	20000208 	.word	0x20000208
 8000b40:	200004e0 	.word	0x200004e0
 8000b44:	200005e4 	.word	0x200005e4
 8000b48:	2000020e 	.word	0x2000020e
 8000b4c:	2000020c 	.word	0x2000020c
 8000b50:	20000210 	.word	0x20000210
 8000b54:	0800861c 	.word	0x0800861c
 8000b58:	200006e4 	.word	0x200006e4

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b094      	sub	sp, #80	; 0x50
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0320 	add.w	r3, r7, #32
 8000b66:	2230      	movs	r2, #48	; 0x30
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f007 f90e 	bl	8007d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <SystemClock_Config+0xcc>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	4a27      	ldr	r2, [pc, #156]	; (8000c28 <SystemClock_Config+0xcc>)
 8000b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b90:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <SystemClock_Config+0xcc>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <SystemClock_Config+0xd0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <SystemClock_Config+0xd0>)
 8000ba6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <SystemClock_Config+0xd0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bcc:	2308      	movs	r3, #8
 8000bce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bd0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bda:	2307      	movs	r3, #7
 8000bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bde:	f107 0320 	add.w	r3, r7, #32
 8000be2:	4618      	mov	r0, r3
 8000be4:	f002 fc6e 	bl	80034c4 <HAL_RCC_OscConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bee:	f000 f81f 	bl	8000c30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c0a:	f107 030c 	add.w	r3, r7, #12
 8000c0e:	2105      	movs	r1, #5
 8000c10:	4618      	mov	r0, r3
 8000c12:	f002 fecf 	bl	80039b4 <HAL_RCC_ClockConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c1c:	f000 f808 	bl	8000c30 <Error_Handler>
  }
}
 8000c20:	bf00      	nop
 8000c22:	3750      	adds	r7, #80	; 0x50
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40007000 	.word	0x40007000

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>
	...

08000c3c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c42:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <MX_SPI1_Init+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c88:	220a      	movs	r2, #10
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c8e:	f003 f9b9 	bl	8004004 <HAL_SPI_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c98:	f7ff ffca 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200009e0 	.word	0x200009e0
 8000ca4:	40013000 	.word	0x40013000

08000ca8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <HAL_SPI_MspInit+0x84>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d12b      	bne.n	8000d22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <HAL_SPI_MspInit+0x88>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <HAL_SPI_MspInit+0x88>)
 8000cd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_SPI_MspInit+0x88>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_SPI_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a10      	ldr	r2, [pc, #64]	; (8000d30 <HAL_SPI_MspInit+0x88>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_SPI_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d02:	23e0      	movs	r3, #224	; 0xe0
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d12:	2305      	movs	r3, #5
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	; (8000d34 <HAL_SPI_MspInit+0x8c>)
 8000d1e:	f000 fa81 	bl	8001224 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d22:	bf00      	nop
 8000d24:	3728      	adds	r7, #40	; 0x28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40013000 	.word	0x40013000
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d76:	2007      	movs	r0, #7
 8000d78:	f000 fa12 	bl	80011a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40023800 	.word	0x40023800

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <NMI_Handler+0x4>

08000d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd4:	f000 f8d0 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <OTG_FS_IRQHandler+0x10>)
 8000de2:	f001 fb3b 	bl	800245c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20001f0c 	.word	0x20001f0c

08000df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <_sbrk+0x5c>)
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <_sbrk+0x60>)
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <_sbrk+0x64>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <_sbrk+0x68>)
 8000e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d207      	bcs.n	8000e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e20:	f006 ff7c 	bl	8007d1c <__errno>
 8000e24:	4603      	mov	r3, r0
 8000e26:	220c      	movs	r2, #12
 8000e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	e009      	b.n	8000e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <_sbrk+0x64>)
 8000e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20020000 	.word	0x20020000
 8000e50:	00000400 	.word	0x00000400
 8000e54:	20000214 	.word	0x20000214
 8000e58:	20002328 	.word	0x20002328

08000e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <SystemInit+0x20>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e66:	4a05      	ldr	r2, [pc, #20]	; (8000e7c <SystemInit+0x20>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e86:	490e      	ldr	r1, [pc, #56]	; (8000ec0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e88:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e9c:	4c0b      	ldr	r4, [pc, #44]	; (8000ecc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eaa:	f7ff ffd7 	bl	8000e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eae:	f006 ff3b 	bl	8007d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eb2:	f7ff fd7d 	bl	80009b0 <main>
  bx  lr    
 8000eb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000eb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8000ec4:	08008904 	.word	0x08008904
  ldr r2, =_sbss
 8000ec8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8000ecc:	20002324 	.word	0x20002324

08000ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed0:	e7fe      	b.n	8000ed0 <ADC_IRQHandler>
	...

08000ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <HAL_Init+0x40>)
 8000ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee4:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <HAL_Init+0x40>)
 8000eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	; (8000f14 <HAL_Init+0x40>)
 8000ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 f94f 	bl	80011a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 f808 	bl	8000f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f08:	f7ff ff16 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023c00 	.word	0x40023c00

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x54>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_InitTick+0x58>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f967 	bl	800120a <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00e      	b.n	8000f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d80a      	bhi.n	8000f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f000 f92f 	bl	80011b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <HAL_InitTick+0x5c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	2000000c 	.word	0x2000000c
 8000f74:	20000008 	.word	0x20000008

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	2000000c 	.word	0x2000000c
 8000f9c:	20000a38 	.word	0x20000a38

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000a38 	.word	0x20000a38

08000fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc0:	f7ff ffee 	bl	8000fa0 <HAL_GetTick>
 8000fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd0:	d005      	beq.n	8000fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_Delay+0x44>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fde:	bf00      	nop
 8000fe0:	f7ff ffde 	bl	8000fa0 <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d8f7      	bhi.n	8000fe0 <HAL_Delay+0x28>
  {
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000000c 	.word	0x2000000c

08001000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800102c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001032:	4a04      	ldr	r2, [pc, #16]	; (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	60d3      	str	r3, [r2, #12]
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	db0b      	blt.n	800108e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f003 021f 	and.w	r2, r3, #31
 800107c:	4907      	ldr	r1, [pc, #28]	; (800109c <__NVIC_EnableIRQ+0x38>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	2001      	movs	r0, #1
 8001086:	fa00 f202 	lsl.w	r2, r0, r2
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100

080010a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db0a      	blt.n	80010ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	490c      	ldr	r1, [pc, #48]	; (80010ec <__NVIC_SetPriority+0x4c>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c8:	e00a      	b.n	80010e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4908      	ldr	r1, [pc, #32]	; (80010f0 <__NVIC_SetPriority+0x50>)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	3b04      	subs	r3, #4
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	440b      	add	r3, r1
 80010de:	761a      	strb	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f1c3 0307 	rsb	r3, r3, #7
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3304      	adds	r3, #4
 800111a:	2b06      	cmp	r3, #6
 800111c:	d902      	bls.n	8001124 <NVIC_EncodePriority+0x30>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3b03      	subs	r3, #3
 8001122:	e000      	b.n	8001126 <NVIC_EncodePriority+0x32>
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	f04f 32ff 	mov.w	r2, #4294967295
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113c:	f04f 31ff 	mov.w	r1, #4294967295
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	4313      	orrs	r3, r2
         );
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	; 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800116c:	d301      	bcc.n	8001172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116e:	2301      	movs	r3, #1
 8001170:	e00f      	b.n	8001192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001172:	4a0a      	ldr	r2, [pc, #40]	; (800119c <SysTick_Config+0x40>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117a:	210f      	movs	r1, #15
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f7ff ff8e 	bl	80010a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <SysTick_Config+0x40>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <SysTick_Config+0x40>)
 800118c:	2207      	movs	r2, #7
 800118e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	e000e010 	.word	0xe000e010

080011a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff29 	bl	8001000 <__NVIC_SetPriorityGrouping>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
 80011c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c8:	f7ff ff3e 	bl	8001048 <__NVIC_GetPriorityGrouping>
 80011cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	68b9      	ldr	r1, [r7, #8]
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f7ff ff8e 	bl	80010f4 <NVIC_EncodePriority>
 80011d8:	4602      	mov	r2, r0
 80011da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff5d 	bl	80010a0 <__NVIC_SetPriority>
}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff31 	bl	8001064 <__NVIC_EnableIRQ>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ffa2 	bl	800115c <SysTick_Config>
 8001218:	4603      	mov	r3, r0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	e16b      	b.n	8001518 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001240:	2201      	movs	r2, #1
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	429a      	cmp	r2, r3
 800125a:	f040 815a 	bne.w	8001512 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b01      	cmp	r3, #1
 8001268:	d005      	beq.n	8001276 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001272:	2b02      	cmp	r3, #2
 8001274:	d130      	bne.n	80012d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	2203      	movs	r2, #3
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ac:	2201      	movs	r2, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f003 0201 	and.w	r2, r3, #1
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d017      	beq.n	8001314 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d123      	bne.n	8001368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	08da      	lsrs	r2, r3, #3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3208      	adds	r2, #8
 8001328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	220f      	movs	r2, #15
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	691a      	ldr	r2, [r3, #16]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	08da      	lsrs	r2, r3, #3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3208      	adds	r2, #8
 8001362:	69b9      	ldr	r1, [r7, #24]
 8001364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	2203      	movs	r2, #3
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0203 	and.w	r2, r3, #3
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80b4 	beq.w	8001512 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b60      	ldr	r3, [pc, #384]	; (8001530 <HAL_GPIO_Init+0x30c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	4a5f      	ldr	r2, [pc, #380]	; (8001530 <HAL_GPIO_Init+0x30c>)
 80013b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ba:	4b5d      	ldr	r3, [pc, #372]	; (8001530 <HAL_GPIO_Init+0x30c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013c6:	4a5b      	ldr	r2, [pc, #364]	; (8001534 <HAL_GPIO_Init+0x310>)
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	089b      	lsrs	r3, r3, #2
 80013cc:	3302      	adds	r3, #2
 80013ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	220f      	movs	r2, #15
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a52      	ldr	r2, [pc, #328]	; (8001538 <HAL_GPIO_Init+0x314>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d02b      	beq.n	800144a <HAL_GPIO_Init+0x226>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a51      	ldr	r2, [pc, #324]	; (800153c <HAL_GPIO_Init+0x318>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d025      	beq.n	8001446 <HAL_GPIO_Init+0x222>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a50      	ldr	r2, [pc, #320]	; (8001540 <HAL_GPIO_Init+0x31c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d01f      	beq.n	8001442 <HAL_GPIO_Init+0x21e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a4f      	ldr	r2, [pc, #316]	; (8001544 <HAL_GPIO_Init+0x320>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d019      	beq.n	800143e <HAL_GPIO_Init+0x21a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4e      	ldr	r2, [pc, #312]	; (8001548 <HAL_GPIO_Init+0x324>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d013      	beq.n	800143a <HAL_GPIO_Init+0x216>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4d      	ldr	r2, [pc, #308]	; (800154c <HAL_GPIO_Init+0x328>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00d      	beq.n	8001436 <HAL_GPIO_Init+0x212>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4c      	ldr	r2, [pc, #304]	; (8001550 <HAL_GPIO_Init+0x32c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d007      	beq.n	8001432 <HAL_GPIO_Init+0x20e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a4b      	ldr	r2, [pc, #300]	; (8001554 <HAL_GPIO_Init+0x330>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_GPIO_Init+0x20a>
 800142a:	2307      	movs	r3, #7
 800142c:	e00e      	b.n	800144c <HAL_GPIO_Init+0x228>
 800142e:	2308      	movs	r3, #8
 8001430:	e00c      	b.n	800144c <HAL_GPIO_Init+0x228>
 8001432:	2306      	movs	r3, #6
 8001434:	e00a      	b.n	800144c <HAL_GPIO_Init+0x228>
 8001436:	2305      	movs	r3, #5
 8001438:	e008      	b.n	800144c <HAL_GPIO_Init+0x228>
 800143a:	2304      	movs	r3, #4
 800143c:	e006      	b.n	800144c <HAL_GPIO_Init+0x228>
 800143e:	2303      	movs	r3, #3
 8001440:	e004      	b.n	800144c <HAL_GPIO_Init+0x228>
 8001442:	2302      	movs	r3, #2
 8001444:	e002      	b.n	800144c <HAL_GPIO_Init+0x228>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <HAL_GPIO_Init+0x228>
 800144a:	2300      	movs	r3, #0
 800144c:	69fa      	ldr	r2, [r7, #28]
 800144e:	f002 0203 	and.w	r2, r2, #3
 8001452:	0092      	lsls	r2, r2, #2
 8001454:	4093      	lsls	r3, r2
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800145c:	4935      	ldr	r1, [pc, #212]	; (8001534 <HAL_GPIO_Init+0x310>)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	3302      	adds	r3, #2
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800146a:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <HAL_GPIO_Init+0x334>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800148e:	4a32      	ldr	r2, [pc, #200]	; (8001558 <HAL_GPIO_Init+0x334>)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001494:	4b30      	ldr	r3, [pc, #192]	; (8001558 <HAL_GPIO_Init+0x334>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014b8:	4a27      	ldr	r2, [pc, #156]	; (8001558 <HAL_GPIO_Init+0x334>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <HAL_GPIO_Init+0x334>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014e2:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <HAL_GPIO_Init+0x334>)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_GPIO_Init+0x334>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800150c:	4a12      	ldr	r2, [pc, #72]	; (8001558 <HAL_GPIO_Init+0x334>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3301      	adds	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	2b0f      	cmp	r3, #15
 800151c:	f67f ae90 	bls.w	8001240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40013800 	.word	0x40013800
 8001538:	40020000 	.word	0x40020000
 800153c:	40020400 	.word	0x40020400
 8001540:	40020800 	.word	0x40020800
 8001544:	40020c00 	.word	0x40020c00
 8001548:	40021000 	.word	0x40021000
 800154c:	40021400 	.word	0x40021400
 8001550:	40021800 	.word	0x40021800
 8001554:	40021c00 	.word	0x40021c00
 8001558:	40013c00 	.word	0x40013c00

0800155c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691a      	ldr	r2, [r3, #16]
 800156c:	887b      	ldrh	r3, [r7, #2]
 800156e:	4013      	ands	r3, r2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001574:	2301      	movs	r3, #1
 8001576:	73fb      	strb	r3, [r7, #15]
 8001578:	e001      	b.n	800157e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
 8001598:	4613      	mov	r3, r2
 800159a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800159c:	787b      	ldrb	r3, [r7, #1]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a2:	887a      	ldrh	r2, [r7, #2]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015a8:	e003      	b.n	80015b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	041a      	lsls	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	619a      	str	r2, [r3, #24]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015be:	b480      	push	{r7}
 80015c0:	b085      	sub	sp, #20
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015d0:	887a      	ldrh	r2, [r7, #2]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4013      	ands	r3, r2
 80015d6:	041a      	lsls	r2, r3, #16
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43d9      	mvns	r1, r3
 80015dc:	887b      	ldrh	r3, [r7, #2]
 80015de:	400b      	ands	r3, r1
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	619a      	str	r2, [r3, #24]
}
 80015e6:	bf00      	nop
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e12b      	b.n	800185e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d106      	bne.n	8001620 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff f8d0 	bl	80007c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2224      	movs	r2, #36	; 0x24
 8001624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0201 	bic.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001646:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001656:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001658:	f002 fb80 	bl	8003d5c <HAL_RCC_GetPCLK1Freq>
 800165c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4a81      	ldr	r2, [pc, #516]	; (8001868 <HAL_I2C_Init+0x274>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d807      	bhi.n	8001678 <HAL_I2C_Init+0x84>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4a80      	ldr	r2, [pc, #512]	; (800186c <HAL_I2C_Init+0x278>)
 800166c:	4293      	cmp	r3, r2
 800166e:	bf94      	ite	ls
 8001670:	2301      	movls	r3, #1
 8001672:	2300      	movhi	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	e006      	b.n	8001686 <HAL_I2C_Init+0x92>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4a7d      	ldr	r2, [pc, #500]	; (8001870 <HAL_I2C_Init+0x27c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	bf94      	ite	ls
 8001680:	2301      	movls	r3, #1
 8001682:	2300      	movhi	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e0e7      	b.n	800185e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4a78      	ldr	r2, [pc, #480]	; (8001874 <HAL_I2C_Init+0x280>)
 8001692:	fba2 2303 	umull	r2, r3, r2, r3
 8001696:	0c9b      	lsrs	r3, r3, #18
 8001698:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	4a6a      	ldr	r2, [pc, #424]	; (8001868 <HAL_I2C_Init+0x274>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d802      	bhi.n	80016c8 <HAL_I2C_Init+0xd4>
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	3301      	adds	r3, #1
 80016c6:	e009      	b.n	80016dc <HAL_I2C_Init+0xe8>
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016ce:	fb02 f303 	mul.w	r3, r2, r3
 80016d2:	4a69      	ldr	r2, [pc, #420]	; (8001878 <HAL_I2C_Init+0x284>)
 80016d4:	fba2 2303 	umull	r2, r3, r2, r3
 80016d8:	099b      	lsrs	r3, r3, #6
 80016da:	3301      	adds	r3, #1
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	430b      	orrs	r3, r1
 80016e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	495c      	ldr	r1, [pc, #368]	; (8001868 <HAL_I2C_Init+0x274>)
 80016f8:	428b      	cmp	r3, r1
 80016fa:	d819      	bhi.n	8001730 <HAL_I2C_Init+0x13c>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1e59      	subs	r1, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	fbb1 f3f3 	udiv	r3, r1, r3
 800170a:	1c59      	adds	r1, r3, #1
 800170c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001710:	400b      	ands	r3, r1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00a      	beq.n	800172c <HAL_I2C_Init+0x138>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1e59      	subs	r1, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fbb1 f3f3 	udiv	r3, r1, r3
 8001724:	3301      	adds	r3, #1
 8001726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172a:	e051      	b.n	80017d0 <HAL_I2C_Init+0x1dc>
 800172c:	2304      	movs	r3, #4
 800172e:	e04f      	b.n	80017d0 <HAL_I2C_Init+0x1dc>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d111      	bne.n	800175c <HAL_I2C_Init+0x168>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	1e58      	subs	r0, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6859      	ldr	r1, [r3, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	440b      	add	r3, r1
 8001746:	fbb0 f3f3 	udiv	r3, r0, r3
 800174a:	3301      	adds	r3, #1
 800174c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001750:	2b00      	cmp	r3, #0
 8001752:	bf0c      	ite	eq
 8001754:	2301      	moveq	r3, #1
 8001756:	2300      	movne	r3, #0
 8001758:	b2db      	uxtb	r3, r3
 800175a:	e012      	b.n	8001782 <HAL_I2C_Init+0x18e>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	1e58      	subs	r0, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	0099      	lsls	r1, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001772:	3301      	adds	r3, #1
 8001774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf0c      	ite	eq
 800177c:	2301      	moveq	r3, #1
 800177e:	2300      	movne	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_I2C_Init+0x196>
 8001786:	2301      	movs	r3, #1
 8001788:	e022      	b.n	80017d0 <HAL_I2C_Init+0x1dc>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10e      	bne.n	80017b0 <HAL_I2C_Init+0x1bc>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1e58      	subs	r0, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6859      	ldr	r1, [r3, #4]
 800179a:	460b      	mov	r3, r1
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	440b      	add	r3, r1
 80017a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a4:	3301      	adds	r3, #1
 80017a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ae:	e00f      	b.n	80017d0 <HAL_I2C_Init+0x1dc>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1e58      	subs	r0, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	0099      	lsls	r1, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c6:	3301      	adds	r3, #1
 80017c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	6809      	ldr	r1, [r1, #0]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69da      	ldr	r2, [r3, #28]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6911      	ldr	r1, [r2, #16]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68d2      	ldr	r2, [r2, #12]
 800180a:	4311      	orrs	r1, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	430b      	orrs	r3, r1
 8001812:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695a      	ldr	r2, [r3, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2220      	movs	r2, #32
 800184a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	000186a0 	.word	0x000186a0
 800186c:	001e847f 	.word	0x001e847f
 8001870:	003d08ff 	.word	0x003d08ff
 8001874:	431bde83 	.word	0x431bde83
 8001878:	10624dd3 	.word	0x10624dd3

0800187c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e128      	b.n	8001ae0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d109      	bne.n	80018ae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a90      	ldr	r2, [pc, #576]	; (8001ae8 <HAL_I2S_Init+0x26c>)
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff f801 	bl	80008b0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2202      	movs	r2, #2
 80018b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80018c4:	f023 030f 	bic.w	r3, r3, #15
 80018c8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2202      	movs	r2, #2
 80018d0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d060      	beq.n	800199c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d102      	bne.n	80018e8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80018e2:	2310      	movs	r3, #16
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e001      	b.n	80018ec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80018e8:	2320      	movs	r3, #32
 80018ea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b20      	cmp	r3, #32
 80018f2:	d802      	bhi.n	80018fa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80018fa:	2001      	movs	r0, #1
 80018fc:	f002 fb24 	bl	8003f48 <HAL_RCCEx_GetPeriphCLKFreq>
 8001900:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800190a:	d125      	bne.n	8001958 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d010      	beq.n	8001936 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	fbb2 f2f3 	udiv	r2, r2, r3
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	461a      	mov	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001930:	3305      	adds	r3, #5
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	e01f      	b.n	8001976 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	461a      	mov	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	3305      	adds	r3, #5
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	e00e      	b.n	8001976 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	461a      	mov	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	3305      	adds	r3, #5
 8001974:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4a5c      	ldr	r2, [pc, #368]	; (8001aec <HAL_I2S_Init+0x270>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	08db      	lsrs	r3, r3, #3
 8001980:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	085b      	lsrs	r3, r3, #1
 8001992:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	e003      	b.n	80019a4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800199c:	2302      	movs	r3, #2
 800199e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d902      	bls.n	80019b0 <HAL_I2S_Init+0x134>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	2bff      	cmp	r3, #255	; 0xff
 80019ae:	d907      	bls.n	80019c0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b4:	f043 0210 	orr.w	r2, r3, #16
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e08f      	b.n	8001ae0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691a      	ldr	r2, [r3, #16]
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	ea42 0103 	orr.w	r1, r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80019de:	f023 030f 	bic.w	r3, r3, #15
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6851      	ldr	r1, [r2, #4]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6892      	ldr	r2, [r2, #8]
 80019ea:	4311      	orrs	r1, r2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	68d2      	ldr	r2, [r2, #12]
 80019f0:	4311      	orrs	r1, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6992      	ldr	r2, [r2, #24]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	431a      	orrs	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a02:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d161      	bne.n	8001ad0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a38      	ldr	r2, [pc, #224]	; (8001af0 <HAL_I2S_Init+0x274>)
 8001a10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a37      	ldr	r2, [pc, #220]	; (8001af4 <HAL_I2S_Init+0x278>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d101      	bne.n	8001a20 <HAL_I2S_Init+0x1a4>
 8001a1c:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <HAL_I2S_Init+0x27c>)
 8001a1e:	e001      	b.n	8001a24 <HAL_I2S_Init+0x1a8>
 8001a20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	4932      	ldr	r1, [pc, #200]	; (8001af4 <HAL_I2S_Init+0x278>)
 8001a2c:	428a      	cmp	r2, r1
 8001a2e:	d101      	bne.n	8001a34 <HAL_I2S_Init+0x1b8>
 8001a30:	4a31      	ldr	r2, [pc, #196]	; (8001af8 <HAL_I2S_Init+0x27c>)
 8001a32:	e001      	b.n	8001a38 <HAL_I2S_Init+0x1bc>
 8001a34:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a38:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a3c:	f023 030f 	bic.w	r3, r3, #15
 8001a40:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a2b      	ldr	r2, [pc, #172]	; (8001af4 <HAL_I2S_Init+0x278>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d101      	bne.n	8001a50 <HAL_I2S_Init+0x1d4>
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	; (8001af8 <HAL_I2S_Init+0x27c>)
 8001a4e:	e001      	b.n	8001a54 <HAL_I2S_Init+0x1d8>
 8001a50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a54:	2202      	movs	r2, #2
 8001a56:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a25      	ldr	r2, [pc, #148]	; (8001af4 <HAL_I2S_Init+0x278>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_I2S_Init+0x1ea>
 8001a62:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <HAL_I2S_Init+0x27c>)
 8001a64:	e001      	b.n	8001a6a <HAL_I2S_Init+0x1ee>
 8001a66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a76:	d003      	beq.n	8001a80 <HAL_I2S_Init+0x204>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d103      	bne.n	8001a88 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	e001      	b.n	8001a8c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a96:	4313      	orrs	r3, r2
 8001a98:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	897b      	ldrh	r3, [r7, #10]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ab8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <HAL_I2S_Init+0x278>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d101      	bne.n	8001ac8 <HAL_I2S_Init+0x24c>
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <HAL_I2S_Init+0x27c>)
 8001ac6:	e001      	b.n	8001acc <HAL_I2S_Init+0x250>
 8001ac8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001acc:	897a      	ldrh	r2, [r7, #10]
 8001ace:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	08001bf3 	.word	0x08001bf3
 8001aec:	cccccccd 	.word	0xcccccccd
 8001af0:	08001d09 	.word	0x08001d09
 8001af4:	40003800 	.word	0x40003800
 8001af8:	40003400 	.word	0x40003400

08001afc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	881a      	ldrh	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	1c9a      	adds	r2, r3, #2
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10e      	bne.n	8001b8c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b7c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ffb8 	bl	8001afc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	b292      	uxth	r2, r2
 8001ba8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	1c9a      	adds	r2, r3, #2
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10e      	bne.n	8001bea <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bda:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff93 	bl	8001b10 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d13a      	bne.n	8001c84 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d109      	bne.n	8001c2c <I2S_IRQHandler+0x3a>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c22:	2b40      	cmp	r3, #64	; 0x40
 8001c24:	d102      	bne.n	8001c2c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ffb4 	bl	8001b94 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c32:	2b40      	cmp	r3, #64	; 0x40
 8001c34:	d126      	bne.n	8001c84 <I2S_IRQHandler+0x92>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	d11f      	bne.n	8001c84 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c52:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f043 0202 	orr.w	r2, r3, #2
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ff50 	bl	8001b24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d136      	bne.n	8001cfe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d109      	bne.n	8001cae <I2S_IRQHandler+0xbc>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca4:	2b80      	cmp	r3, #128	; 0x80
 8001ca6:	d102      	bne.n	8001cae <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ff45 	bl	8001b38 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d122      	bne.n	8001cfe <I2S_IRQHandler+0x10c>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d11b      	bne.n	8001cfe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cd4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf0:	f043 0204 	orr.w	r2, r3, #4
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff13 	bl	8001b24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4aa2      	ldr	r2, [pc, #648]	; (8001fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d101      	bne.n	8001d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001d22:	4ba2      	ldr	r3, [pc, #648]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d24:	e001      	b.n	8001d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001d26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a9b      	ldr	r2, [pc, #620]	; (8001fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d101      	bne.n	8001d44 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001d40:	4b9a      	ldr	r3, [pc, #616]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001d42:	e001      	b.n	8001d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001d44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d54:	d004      	beq.n	8001d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f040 8099 	bne.w	8001e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d107      	bne.n	8001d7a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f925 	bl	8001fc4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d107      	bne.n	8001d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f9c8 	bl	8002124 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9a:	2b40      	cmp	r3, #64	; 0x40
 8001d9c:	d13a      	bne.n	8001e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	f003 0320 	and.w	r3, r3, #32
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d035      	beq.n	8001e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a7e      	ldr	r2, [pc, #504]	; (8001fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d101      	bne.n	8001db6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001db2:	4b7e      	ldr	r3, [pc, #504]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001db4:	e001      	b.n	8001dba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001db6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4979      	ldr	r1, [pc, #484]	; (8001fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001dc2:	428b      	cmp	r3, r1
 8001dc4:	d101      	bne.n	8001dca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001dc6:	4b79      	ldr	r3, [pc, #484]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001dc8:	e001      	b.n	8001dce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001dca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dd2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001de2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f043 0202 	orr.w	r2, r3, #2
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fe88 	bl	8001b24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	f040 80be 	bne.w	8001f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 80b8 	beq.w	8001f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e3a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a59      	ldr	r2, [pc, #356]	; (8001fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d101      	bne.n	8001e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001e46:	4b59      	ldr	r3, [pc, #356]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e48:	e001      	b.n	8001e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001e4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4954      	ldr	r1, [pc, #336]	; (8001fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001e56:	428b      	cmp	r3, r1
 8001e58:	d101      	bne.n	8001e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001e5a:	4b54      	ldr	r3, [pc, #336]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001e5c:	e001      	b.n	8001e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001e5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e66:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f043 0204 	orr.w	r2, r3, #4
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fe4a 	bl	8001b24 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e90:	e084      	b.n	8001f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d107      	bne.n	8001eac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8be 	bl	8002028 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d107      	bne.n	8001ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f8fd 	bl	80020c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ecc:	2b40      	cmp	r3, #64	; 0x40
 8001ece:	d12f      	bne.n	8001f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d02a      	beq.n	8001f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ee8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a2e      	ldr	r2, [pc, #184]	; (8001fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001ef4:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001ef6:	e001      	b.n	8001efc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001ef8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4929      	ldr	r1, [pc, #164]	; (8001fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f04:	428b      	cmp	r3, r1
 8001f06:	d101      	bne.n	8001f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001f08:	4b28      	ldr	r3, [pc, #160]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f0a:	e001      	b.n	8001f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001f0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f14:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f043 0202 	orr.w	r2, r3, #2
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff fdfa 	bl	8001b24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d131      	bne.n	8001f9e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d02c      	beq.n	8001f9e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d101      	bne.n	8001f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001f4e:	4b17      	ldr	r3, [pc, #92]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f50:	e001      	b.n	8001f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4912      	ldr	r1, [pc, #72]	; (8001fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8001f5e:	428b      	cmp	r3, r1
 8001f60:	d101      	bne.n	8001f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8001f62:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8001f64:	e001      	b.n	8001f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8001f66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f6e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f7e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8c:	f043 0204 	orr.w	r2, r3, #4
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff fdc5 	bl	8001b24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f9a:	e000      	b.n	8001f9e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f9c:	bf00      	nop
}
 8001f9e:	bf00      	nop
 8001fa0:	3720      	adds	r7, #32
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40003800 	.word	0x40003800
 8001fac:	40003400 	.word	0x40003400

08001fb0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	1c99      	adds	r1, r3, #2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6251      	str	r1, [r2, #36]	; 0x24
 8001fd6:	881a      	ldrh	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d113      	bne.n	800201e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002004:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800200a:	b29b      	uxth	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d106      	bne.n	800201e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ffc9 	bl	8001fb0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	1c99      	adds	r1, r3, #2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6251      	str	r1, [r2, #36]	; 0x24
 800203a:	8819      	ldrh	r1, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <I2SEx_TxISR_I2SExt+0x90>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d101      	bne.n	800204a <I2SEx_TxISR_I2SExt+0x22>
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <I2SEx_TxISR_I2SExt+0x94>)
 8002048:	e001      	b.n	800204e <I2SEx_TxISR_I2SExt+0x26>
 800204a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800204e:	460a      	mov	r2, r1
 8002050:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002056:	b29b      	uxth	r3, r3
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d121      	bne.n	80020ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <I2SEx_TxISR_I2SExt+0x90>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d101      	bne.n	8002078 <I2SEx_TxISR_I2SExt+0x50>
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <I2SEx_TxISR_I2SExt+0x94>)
 8002076:	e001      	b.n	800207c <I2SEx_TxISR_I2SExt+0x54>
 8002078:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	490d      	ldr	r1, [pc, #52]	; (80020b8 <I2SEx_TxISR_I2SExt+0x90>)
 8002084:	428b      	cmp	r3, r1
 8002086:	d101      	bne.n	800208c <I2SEx_TxISR_I2SExt+0x64>
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <I2SEx_TxISR_I2SExt+0x94>)
 800208a:	e001      	b.n	8002090 <I2SEx_TxISR_I2SExt+0x68>
 800208c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002090:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002094:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800209a:	b29b      	uxth	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d106      	bne.n	80020ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7ff ff81 	bl	8001fb0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40003800 	.word	0x40003800
 80020bc:	40003400 	.word	0x40003400

080020c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68d8      	ldr	r0, [r3, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	1c99      	adds	r1, r3, #2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80020d8:	b282      	uxth	r2, r0
 80020da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d113      	bne.n	800211c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002102:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002108:	b29b      	uxth	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d106      	bne.n	800211c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ff4a 	bl	8001fb0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a20      	ldr	r2, [pc, #128]	; (80021b4 <I2SEx_RxISR_I2SExt+0x90>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d101      	bne.n	800213a <I2SEx_RxISR_I2SExt+0x16>
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <I2SEx_RxISR_I2SExt+0x94>)
 8002138:	e001      	b.n	800213e <I2SEx_RxISR_I2SExt+0x1a>
 800213a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800213e:	68d8      	ldr	r0, [r3, #12]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	1c99      	adds	r1, r3, #2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	62d1      	str	r1, [r2, #44]	; 0x2c
 800214a:	b282      	uxth	r2, r0
 800214c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d121      	bne.n	80021aa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <I2SEx_RxISR_I2SExt+0x90>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d101      	bne.n	8002174 <I2SEx_RxISR_I2SExt+0x50>
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <I2SEx_RxISR_I2SExt+0x94>)
 8002172:	e001      	b.n	8002178 <I2SEx_RxISR_I2SExt+0x54>
 8002174:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	490d      	ldr	r1, [pc, #52]	; (80021b4 <I2SEx_RxISR_I2SExt+0x90>)
 8002180:	428b      	cmp	r3, r1
 8002182:	d101      	bne.n	8002188 <I2SEx_RxISR_I2SExt+0x64>
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <I2SEx_RxISR_I2SExt+0x94>)
 8002186:	e001      	b.n	800218c <I2SEx_RxISR_I2SExt+0x68>
 8002188:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800218c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002190:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d106      	bne.n	80021aa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ff03 	bl	8001fb0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40003800 	.word	0x40003800
 80021b8:	40003400 	.word	0x40003400

080021bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021be:	b08f      	sub	sp, #60	; 0x3c
 80021c0:	af0a      	add	r7, sp, #40	; 0x28
 80021c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e10f      	b.n	80023ee <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d106      	bne.n	80021ee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f005 fa75 	bl	80076d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2203      	movs	r2, #3
 80021f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d102      	bne.n	8002208 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f002 f896 	bl	800433e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	687e      	ldr	r6, [r7, #4]
 800221a:	466d      	mov	r5, sp
 800221c:	f106 0410 	add.w	r4, r6, #16
 8002220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002228:	e894 0003 	ldmia.w	r4, {r0, r1}
 800222c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002230:	1d33      	adds	r3, r6, #4
 8002232:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002234:	6838      	ldr	r0, [r7, #0]
 8002236:	f001 ff6e 	bl	8004116 <USB_CoreInit>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0d0      	b.n	80023ee <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f002 f884 	bl	8004360 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002258:	2300      	movs	r3, #0
 800225a:	73fb      	strb	r3, [r7, #15]
 800225c:	e04a      	b.n	80022f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	333d      	adds	r3, #61	; 0x3d
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002272:	7bfa      	ldrb	r2, [r7, #15]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	1a9b      	subs	r3, r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	333c      	adds	r3, #60	; 0x3c
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	b298      	uxth	r0, r3
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	3342      	adds	r3, #66	; 0x42
 800229a:	4602      	mov	r2, r0
 800229c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	333f      	adds	r3, #63	; 0x3f
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	3344      	adds	r3, #68	; 0x44
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	3348      	adds	r3, #72	; 0x48
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022da:	7bfa      	ldrb	r2, [r7, #15]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	3350      	adds	r3, #80	; 0x50
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	3301      	adds	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d3af      	bcc.n	800225e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
 8002302:	e044      	b.n	800238e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	1a9b      	subs	r3, r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	1a9b      	subs	r3, r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	3301      	adds	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	d3b5      	bcc.n	8002304 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	687e      	ldr	r6, [r7, #4]
 80023a0:	466d      	mov	r5, sp
 80023a2:	f106 0410 	add.w	r4, r6, #16
 80023a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80023b6:	1d33      	adds	r3, r6, #4
 80023b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ba:	6838      	ldr	r0, [r7, #0]
 80023bc:	f002 f81c 	bl	80043f8 <USB_DevInit>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d005      	beq.n	80023d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2202      	movs	r2, #2
 80023ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00d      	b.n	80023ee <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f003 f898 	bl	800551c <USB_DevDisconnect>

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_PCD_Start+0x1c>
 800240e:	2302      	movs	r3, #2
 8002410:	e020      	b.n	8002454 <HAL_PCD_Start+0x5e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	2b01      	cmp	r3, #1
 8002420:	d109      	bne.n	8002436 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002426:	2b01      	cmp	r3, #1
 8002428:	d005      	beq.n	8002436 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f001 ff6e 	bl	800431c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f003 f848 	bl	80054da <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b08d      	sub	sp, #52	; 0x34
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f003 f906 	bl	8005684 <USB_GetMode>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 839d 	bne.w	8002bba <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f003 f86a 	bl	800555e <USB_ReadInterrupts>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 8393 	beq.w	8002bb8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f003 f861 	bl	800555e <USB_ReadInterrupts>
 800249c:	4603      	mov	r3, r0
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d107      	bne.n	80024b6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695a      	ldr	r2, [r3, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f002 0202 	and.w	r2, r2, #2
 80024b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f003 f84f 	bl	800555e <USB_ReadInterrupts>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d161      	bne.n	800258e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0210 	bic.w	r2, r2, #16
 80024d8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f003 020f 	and.w	r2, r3, #15
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	3304      	adds	r3, #4
 80024f8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	0c5b      	lsrs	r3, r3, #17
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	2b02      	cmp	r3, #2
 8002504:	d124      	bne.n	8002550 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d035      	beq.n	800257e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800251c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002520:	b29b      	uxth	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	6a38      	ldr	r0, [r7, #32]
 8002526:	f002 fe86 	bl	8005236 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002536:	441a      	add	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	091b      	lsrs	r3, r3, #4
 8002544:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002548:	441a      	add	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	619a      	str	r2, [r3, #24]
 800254e:	e016      	b.n	800257e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	0c5b      	lsrs	r3, r3, #17
 8002554:	f003 030f 	and.w	r3, r3, #15
 8002558:	2b06      	cmp	r3, #6
 800255a:	d110      	bne.n	800257e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002562:	2208      	movs	r2, #8
 8002564:	4619      	mov	r1, r3
 8002566:	6a38      	ldr	r0, [r7, #32]
 8002568:	f002 fe65 	bl	8005236 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	091b      	lsrs	r3, r3, #4
 8002574:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002578:	441a      	add	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699a      	ldr	r2, [r3, #24]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0210 	orr.w	r2, r2, #16
 800258c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f002 ffe3 	bl	800555e <USB_ReadInterrupts>
 8002598:	4603      	mov	r3, r0
 800259a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800259e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025a2:	d16e      	bne.n	8002682 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f002 ffe9 	bl	8005584 <USB_ReadDevAllOutEpInterrupt>
 80025b2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80025b4:	e062      	b.n	800267c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d057      	beq.n	8002670 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 f80e 	bl	80055ec <USB_ReadDevOutEPInterrupt>
 80025d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00c      	beq.n	80025f6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025e8:	461a      	mov	r2, r3
 80025ea:	2301      	movs	r3, #1
 80025ec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80025ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fdb1 	bl	8003158 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00c      	beq.n	800261a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	4413      	add	r3, r2
 8002608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800260c:	461a      	mov	r2, r3
 800260e:	2308      	movs	r3, #8
 8002610:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002612:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 feab 	bl	8003370 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	015a      	lsls	r2, r3, #5
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	4413      	add	r3, r2
 800262c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002630:	461a      	mov	r2, r3
 8002632:	2310      	movs	r3, #16
 8002634:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	4413      	add	r3, r2
 8002648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800264c:	461a      	mov	r2, r3
 800264e:	2320      	movs	r3, #32
 8002650:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d009      	beq.n	8002670 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	4413      	add	r3, r2
 8002664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002668:	461a      	mov	r2, r3
 800266a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800266e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	3301      	adds	r3, #1
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002678:	085b      	lsrs	r3, r3, #1
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800267c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267e:	2b00      	cmp	r3, #0
 8002680:	d199      	bne.n	80025b6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f002 ff69 	bl	800555e <USB_ReadInterrupts>
 800268c:	4603      	mov	r3, r0
 800268e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002692:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002696:	f040 80c0 	bne.w	800281a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f002 ff8a 	bl	80055b8 <USB_ReadDevAllInEpInterrupt>
 80026a4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80026aa:	e0b2      	b.n	8002812 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 80a7 	beq.w	8002806 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 ffb0 	bl	8005628 <USB_ReadDevInEPInterrupt>
 80026c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d057      	beq.n	8002784 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	2201      	movs	r2, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69f9      	ldr	r1, [r7, #28]
 80026f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80026f4:	4013      	ands	r3, r2
 80026f6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002704:	461a      	mov	r2, r3
 8002706:	2301      	movs	r3, #1
 8002708:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d132      	bne.n	8002778 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	1a9b      	subs	r3, r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	3348      	adds	r3, #72	; 0x48
 8002722:	6819      	ldr	r1, [r3, #0]
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4403      	add	r3, r0
 8002732:	3344      	adds	r3, #68	; 0x44
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4419      	add	r1, r3
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4403      	add	r3, r0
 8002746:	3348      	adds	r3, #72	; 0x48
 8002748:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	2b00      	cmp	r3, #0
 800274e:	d113      	bne.n	8002778 <HAL_PCD_IRQHandler+0x31c>
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002754:	4613      	mov	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	3350      	adds	r3, #80	; 0x50
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d108      	bne.n	8002778 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002770:	461a      	mov	r2, r3
 8002772:	2101      	movs	r1, #1
 8002774:	f002 ffb8 	bl	80056e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	b2db      	uxtb	r3, r3
 800277c:	4619      	mov	r1, r3
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f005 f839 	bl	80077f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	4413      	add	r3, r2
 8002796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800279a:	461a      	mov	r2, r3
 800279c:	2308      	movs	r3, #8
 800279e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d008      	beq.n	80027bc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	015a      	lsls	r2, r3, #5
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027b6:	461a      	mov	r2, r3
 80027b8:	2310      	movs	r3, #16
 80027ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d2:	461a      	mov	r2, r3
 80027d4:	2340      	movs	r3, #64	; 0x40
 80027d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ee:	461a      	mov	r2, r3
 80027f0:	2302      	movs	r3, #2
 80027f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fc1b 	bl	800303c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	3301      	adds	r3, #1
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800280c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	2b00      	cmp	r3, #0
 8002816:	f47f af49 	bne.w	80026ac <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f002 fe9d 	bl	800555e <USB_ReadInterrupts>
 8002824:	4603      	mov	r3, r0
 8002826:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800282a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800282e:	d122      	bne.n	8002876 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800283e:	f023 0301 	bic.w	r3, r3, #1
 8002842:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800284a:	2b01      	cmp	r3, #1
 800284c:	d108      	bne.n	8002860 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002856:	2100      	movs	r1, #0
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 fe27 	bl	80034ac <HAL_PCDEx_LPM_Callback>
 800285e:	e002      	b.n	8002866 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f005 f83f 	bl	80078e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f002 fe6f 	bl	800555e <USB_ReadInterrupts>
 8002880:	4603      	mov	r3, r0
 8002882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800288a:	d112      	bne.n	80028b2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b01      	cmp	r3, #1
 800289a:	d102      	bne.n	80028a2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f004 fffb 	bl	8007898 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80028b0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f002 fe51 	bl	800555e <USB_ReadInterrupts>
 80028bc:	4603      	mov	r3, r0
 80028be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c6:	f040 80c7 	bne.w	8002a58 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d8:	f023 0301 	bic.w	r3, r3, #1
 80028dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2110      	movs	r1, #16
 80028e4:	4618      	mov	r0, r3
 80028e6:	f001 feeb 	bl	80046c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ea:	2300      	movs	r3, #0
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ee:	e056      	b.n	800299e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028fc:	461a      	mov	r2, r3
 80028fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002902:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	4413      	add	r3, r2
 800290c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002914:	0151      	lsls	r1, r2, #5
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	440a      	add	r2, r1
 800291a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800291e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002922:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	4413      	add	r3, r2
 800292c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002934:	0151      	lsls	r1, r2, #5
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	440a      	add	r2, r1
 800293a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800293e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002942:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	4413      	add	r3, r2
 800294c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002950:	461a      	mov	r2, r3
 8002952:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002956:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	4413      	add	r3, r2
 8002960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002968:	0151      	lsls	r1, r2, #5
 800296a:	69fa      	ldr	r2, [r7, #28]
 800296c:	440a      	add	r2, r1
 800296e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002972:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002976:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	4413      	add	r3, r2
 8002980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002988:	0151      	lsls	r1, r2, #5
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	440a      	add	r2, r1
 800298e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002992:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002996:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800299a:	3301      	adds	r3, #1
 800299c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d3a3      	bcc.n	80028f0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	69fa      	ldr	r2, [r7, #28]
 80029b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029b6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80029ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d016      	beq.n	80029f2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ce:	69fa      	ldr	r2, [r7, #28]
 80029d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029d4:	f043 030b 	orr.w	r3, r3, #11
 80029d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ea:	f043 030b 	orr.w	r3, r3, #11
 80029ee:	6453      	str	r3, [r2, #68]	; 0x44
 80029f0:	e015      	b.n	8002a1e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a04:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002a08:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a18:	f043 030b 	orr.w	r3, r3, #11
 8002a1c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a2c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002a30:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6818      	ldr	r0, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a42:	461a      	mov	r2, r3
 8002a44:	f002 fe50 	bl	80056e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f002 fd7e 	bl	800555e <USB_ReadInterrupts>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6c:	d124      	bne.n	8002ab8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f002 fe14 	bl	80056a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f001 fe7c 	bl	800477a <USB_GetDevSpeed>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461a      	mov	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681c      	ldr	r4, [r3, #0]
 8002a8e:	f001 f959 	bl	8003d44 <HAL_RCC_GetHCLKFreq>
 8002a92:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f001 fb9b 	bl	80041d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f004 fecf 	bl	8007846 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ab6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f002 fd4e 	bl	800555e <USB_ReadInterrupts>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d10a      	bne.n	8002ae2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f004 feac 	bl	800782a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f002 0208 	and.w	r2, r2, #8
 8002ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f002 fd39 	bl	800555e <USB_ReadInterrupts>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002af6:	d10f      	bne.n	8002b18 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	4619      	mov	r1, r3
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f004 ff0e 	bl	8007924 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f002 fd1e 	bl	800555e <USB_ReadInterrupts>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b2c:	d10f      	bne.n	8002b4e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	4619      	mov	r1, r3
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f004 fee1 	bl	8007900 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f002 fd03 	bl	800555e <USB_ReadInterrupts>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b62:	d10a      	bne.n	8002b7a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f004 feef 	bl	8007948 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f002 fced 	bl	800555e <USB_ReadInterrupts>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d115      	bne.n	8002bba <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f004 fedf 	bl	8007964 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	e000      	b.n	8002bba <HAL_PCD_IRQHandler+0x75e>
      return;
 8002bb8:	bf00      	nop
    }
  }
}
 8002bba:	3734      	adds	r7, #52	; 0x34
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd90      	pop	{r4, r7, pc}

08002bc0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_PCD_SetAddress+0x1a>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e013      	b.n	8002c02 <HAL_PCD_SetAddress+0x42>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f002 fc4b 	bl	800548e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	4608      	mov	r0, r1
 8002c14:	4611      	mov	r1, r2
 8002c16:	461a      	mov	r2, r3
 8002c18:	4603      	mov	r3, r0
 8002c1a:	70fb      	strb	r3, [r7, #3]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	803b      	strh	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	da0f      	bge.n	8002c50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	f003 020f 	and.w	r2, r3, #15
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	3338      	adds	r3, #56	; 0x38
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	4413      	add	r3, r2
 8002c44:	3304      	adds	r3, #4
 8002c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	705a      	strb	r2, [r3, #1]
 8002c4e:	e00f      	b.n	8002c70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	f003 020f 	and.w	r2, r3, #15
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	3304      	adds	r3, #4
 8002c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c7c:	883a      	ldrh	r2, [r7, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	78ba      	ldrb	r2, [r7, #2]
 8002c86:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	785b      	ldrb	r3, [r3, #1]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c9a:	78bb      	ldrb	r3, [r7, #2]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d102      	bne.n	8002ca6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_PCD_EP_Open+0xaa>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e00e      	b.n	8002cd2 <HAL_PCD_EP_Open+0xc8>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68f9      	ldr	r1, [r7, #12]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 fd7e 	bl	80047c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002cd0:	7afb      	ldrb	r3, [r7, #11]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	da0f      	bge.n	8002d0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	f003 020f 	and.w	r2, r3, #15
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	3338      	adds	r3, #56	; 0x38
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	3304      	adds	r3, #4
 8002d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	705a      	strb	r2, [r3, #1]
 8002d0c:	e00f      	b.n	8002d2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	f003 020f 	and.w	r2, r3, #15
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	4413      	add	r3, r2
 8002d24:	3304      	adds	r3, #4
 8002d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <HAL_PCD_EP_Close+0x6e>
 8002d44:	2302      	movs	r3, #2
 8002d46:	e00e      	b.n	8002d66 <HAL_PCD_EP_Close+0x8c>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68f9      	ldr	r1, [r7, #12]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f001 fdbc 	bl	80048d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d7e:	7afb      	ldrb	r3, [r7, #11]
 8002d80:	f003 020f 	and.w	r2, r3, #15
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	3304      	adds	r3, #4
 8002d96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2200      	movs	r2, #0
 8002da8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2200      	movs	r2, #0
 8002dae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002db0:	7afb      	ldrb	r3, [r7, #11]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d102      	bne.n	8002dca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dca:	7afb      	ldrb	r3, [r7, #11]
 8002dcc:	f003 030f 	and.w	r3, r3, #15
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d109      	bne.n	8002de8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	461a      	mov	r2, r3
 8002de0:	6979      	ldr	r1, [r7, #20]
 8002de2:	f002 f897 	bl	8004f14 <USB_EP0StartXfer>
 8002de6:	e008      	b.n	8002dfa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	6979      	ldr	r1, [r7, #20]
 8002df6:	f001 fe49 	bl	8004a8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	f003 020f 	and.w	r2, r3, #15
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	1a9b      	subs	r3, r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	460b      	mov	r3, r1
 8002e42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e44:	7afb      	ldrb	r3, [r7, #11]
 8002e46:	f003 020f 	and.w	r2, r3, #15
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	3338      	adds	r3, #56	; 0x38
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4413      	add	r3, r2
 8002e58:	3304      	adds	r3, #4
 8002e5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2201      	movs	r2, #1
 8002e72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e74:	7afb      	ldrb	r3, [r7, #11]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d102      	bne.n	8002e8e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e8e:	7afb      	ldrb	r3, [r7, #11]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d109      	bne.n	8002eac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	6979      	ldr	r1, [r7, #20]
 8002ea6:	f002 f835 	bl	8004f14 <USB_EP0StartXfer>
 8002eaa:	e008      	b.n	8002ebe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	6979      	ldr	r1, [r7, #20]
 8002eba:	f001 fde7 	bl	8004a8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	f003 020f 	and.w	r2, r3, #15
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d901      	bls.n	8002ee6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e050      	b.n	8002f88 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ee6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	da0f      	bge.n	8002f0e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	f003 020f 	and.w	r2, r3, #15
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	3338      	adds	r3, #56	; 0x38
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	3304      	adds	r3, #4
 8002f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	705a      	strb	r2, [r3, #1]
 8002f0c:	e00d      	b.n	8002f2a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	4413      	add	r3, r2
 8002f20:	3304      	adds	r3, #4
 8002f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_PCD_EP_SetStall+0x82>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e01e      	b.n	8002f88 <HAL_PCD_EP_SetStall+0xc0>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68f9      	ldr	r1, [r7, #12]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f002 f9c4 	bl	80052e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	f003 030f 	and.w	r3, r3, #15
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10a      	bne.n	8002f7e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	b2d9      	uxtb	r1, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f002 fbb5 	bl	80056e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	f003 020f 	and.w	r2, r3, #15
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d901      	bls.n	8002fae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e042      	b.n	8003034 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	da0f      	bge.n	8002fd6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	f003 020f 	and.w	r2, r3, #15
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	3338      	adds	r3, #56	; 0x38
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	3304      	adds	r3, #4
 8002fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	705a      	strb	r2, [r3, #1]
 8002fd4:	e00f      	b.n	8002ff6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	f003 020f 	and.w	r2, r3, #15
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4413      	add	r3, r2
 8002fec:	3304      	adds	r3, #4
 8002fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	b2da      	uxtb	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_PCD_EP_ClrStall+0x86>
 8003012:	2302      	movs	r3, #2
 8003014:	e00e      	b.n	8003034 <HAL_PCD_EP_ClrStall+0xa4>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68f9      	ldr	r1, [r7, #12]
 8003024:	4618      	mov	r0, r3
 8003026:	f002 f9cc 	bl	80053c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af02      	add	r7, sp, #8
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	3338      	adds	r3, #56	; 0x38
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	4413      	add	r3, r2
 8003060:	3304      	adds	r3, #4
 8003062:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	699a      	ldr	r2, [r3, #24]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	429a      	cmp	r2, r3
 800306e:	d901      	bls.n	8003074 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e06c      	b.n	800314e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	69fa      	ldr	r2, [r7, #28]
 8003086:	429a      	cmp	r2, r3
 8003088:	d902      	bls.n	8003090 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	3303      	adds	r3, #3
 8003094:	089b      	lsrs	r3, r3, #2
 8003096:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003098:	e02b      	b.n	80030f2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d902      	bls.n	80030b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3303      	adds	r3, #3
 80030ba:	089b      	lsrs	r3, r3, #2
 80030bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	68d9      	ldr	r1, [r3, #12]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	4603      	mov	r3, r0
 80030d4:	6978      	ldr	r0, [r7, #20]
 80030d6:	f002 f870 	bl	80051ba <USB_WritePacket>

    ep->xfer_buff  += len;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	441a      	add	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	441a      	add	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	b29b      	uxth	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	429a      	cmp	r2, r3
 8003106:	d809      	bhi.n	800311c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	699a      	ldr	r2, [r3, #24]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003110:	429a      	cmp	r2, r3
 8003112:	d203      	bcs.n	800311c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1be      	bne.n	800309a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	429a      	cmp	r2, r3
 8003126:	d811      	bhi.n	800314c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	2201      	movs	r2, #1
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	43db      	mvns	r3, r3
 8003142:	6939      	ldr	r1, [r7, #16]
 8003144:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003148:	4013      	ands	r3, r2
 800314a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3720      	adds	r7, #32
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	333c      	adds	r3, #60	; 0x3c
 8003170:	3304      	adds	r3, #4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	015a      	lsls	r2, r3, #5
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4413      	add	r3, r2
 800317e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	2b01      	cmp	r3, #1
 800318c:	f040 80a0 	bne.w	80032d0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d015      	beq.n	80031c6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4a72      	ldr	r2, [pc, #456]	; (8003368 <PCD_EP_OutXfrComplete_int+0x210>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	f240 80dd 	bls.w	800335e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80d7 	beq.w	800335e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031bc:	461a      	mov	r2, r3
 80031be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031c2:	6093      	str	r3, [r2, #8]
 80031c4:	e0cb      	b.n	800335e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d009      	beq.n	80031e4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031dc:	461a      	mov	r2, r3
 80031de:	2320      	movs	r3, #32
 80031e0:	6093      	str	r3, [r2, #8]
 80031e2:	e0bc      	b.n	800335e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f040 80b7 	bne.w	800335e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4a5d      	ldr	r2, [pc, #372]	; (8003368 <PCD_EP_OutXfrComplete_int+0x210>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d90f      	bls.n	8003218 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4413      	add	r3, r2
 800320a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800320e:	461a      	mov	r2, r3
 8003210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003214:	6093      	str	r3, [r2, #8]
 8003216:	e0a2      	b.n	800335e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800322a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	0159      	lsls	r1, r3, #5
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	440b      	add	r3, r1
 8003234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800323e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4403      	add	r3, r0
 800324e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003252:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003266:	6819      	ldr	r1, [r3, #0]
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	4613      	mov	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4403      	add	r3, r0
 8003276:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4419      	add	r1, r3
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	4613      	mov	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4403      	add	r3, r0
 800328c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003290:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d114      	bne.n	80032c2 <PCD_EP_OutXfrComplete_int+0x16a>
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d108      	bne.n	80032c2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032ba:	461a      	mov	r2, r3
 80032bc:	2101      	movs	r1, #1
 80032be:	f002 fa13 	bl	80056e8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	4619      	mov	r1, r3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f004 fa79 	bl	80077c0 <HAL_PCD_DataOutStageCallback>
 80032ce:	e046      	b.n	800335e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4a26      	ldr	r2, [pc, #152]	; (800336c <PCD_EP_OutXfrComplete_int+0x214>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d124      	bne.n	8003322 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ee:	461a      	mov	r2, r3
 80032f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f4:	6093      	str	r3, [r2, #8]
 80032f6:	e032      	b.n	800335e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 0320 	and.w	r3, r3, #32
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d008      	beq.n	8003314 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330e:	461a      	mov	r2, r3
 8003310:	2320      	movs	r3, #32
 8003312:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	4619      	mov	r1, r3
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f004 fa50 	bl	80077c0 <HAL_PCD_DataOutStageCallback>
 8003320:	e01d      	b.n	800335e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d114      	bne.n	8003352 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	4613      	mov	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d108      	bne.n	8003352 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800334a:	461a      	mov	r2, r3
 800334c:	2100      	movs	r1, #0
 800334e:	f002 f9cb 	bl	80056e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	4619      	mov	r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f004 fa31 	bl	80077c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	4f54300a 	.word	0x4f54300a
 800336c:	4f54310a 	.word	0x4f54310a

08003370 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	333c      	adds	r3, #60	; 0x3c
 8003388:	3304      	adds	r3, #4
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d90e      	bls.n	80033c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d009      	beq.n	80033c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033bc:	461a      	mov	r2, r3
 80033be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f004 f9e9 	bl	800779c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4a0a      	ldr	r2, [pc, #40]	; (80033f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d90c      	bls.n	80033ec <PCD_EP_OutSetupPacket_int+0x7c>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d108      	bne.n	80033ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80033e4:	461a      	mov	r2, r3
 80033e6:	2101      	movs	r1, #1
 80033e8:	f002 f97e 	bl	80056e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	4f54300a 	.word	0x4f54300a

080033fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	70fb      	strb	r3, [r7, #3]
 8003408:	4613      	mov	r3, r2
 800340a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d107      	bne.n	800342a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800341a:	883b      	ldrh	r3, [r7, #0]
 800341c:	0419      	lsls	r1, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	430a      	orrs	r2, r1
 8003426:	629a      	str	r2, [r3, #40]	; 0x28
 8003428:	e028      	b.n	800347c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	0c1b      	lsrs	r3, r3, #16
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	4413      	add	r3, r2
 8003436:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003438:	2300      	movs	r3, #0
 800343a:	73fb      	strb	r3, [r7, #15]
 800343c:	e00d      	b.n	800345a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	3340      	adds	r3, #64	; 0x40
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	4413      	add	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	3301      	adds	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
 800345a:	7bfa      	ldrb	r2, [r7, #15]
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	3b01      	subs	r3, #1
 8003460:	429a      	cmp	r2, r3
 8003462:	d3ec      	bcc.n	800343e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003464:	883b      	ldrh	r3, [r7, #0]
 8003466:	0418      	lsls	r0, r3, #16
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	3b01      	subs	r3, #1
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	4302      	orrs	r2, r0
 8003474:	3340      	adds	r3, #64	; 0x40
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	460b      	mov	r3, r1
 8003494:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	887a      	ldrh	r2, [r7, #2]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e264      	b.n	80039a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d075      	beq.n	80035ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034e2:	4ba3      	ldr	r3, [pc, #652]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d00c      	beq.n	8003508 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ee:	4ba0      	ldr	r3, [pc, #640]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d112      	bne.n	8003520 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034fa:	4b9d      	ldr	r3, [pc, #628]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003506:	d10b      	bne.n	8003520 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003508:	4b99      	ldr	r3, [pc, #612]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d05b      	beq.n	80035cc <HAL_RCC_OscConfig+0x108>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d157      	bne.n	80035cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e23f      	b.n	80039a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003528:	d106      	bne.n	8003538 <HAL_RCC_OscConfig+0x74>
 800352a:	4b91      	ldr	r3, [pc, #580]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a90      	ldr	r2, [pc, #576]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e01d      	b.n	8003574 <HAL_RCC_OscConfig+0xb0>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003540:	d10c      	bne.n	800355c <HAL_RCC_OscConfig+0x98>
 8003542:	4b8b      	ldr	r3, [pc, #556]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a8a      	ldr	r2, [pc, #552]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	4b88      	ldr	r3, [pc, #544]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a87      	ldr	r2, [pc, #540]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e00b      	b.n	8003574 <HAL_RCC_OscConfig+0xb0>
 800355c:	4b84      	ldr	r3, [pc, #528]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a83      	ldr	r2, [pc, #524]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4b81      	ldr	r3, [pc, #516]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a80      	ldr	r2, [pc, #512]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 800356e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d013      	beq.n	80035a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7fd fd10 	bl	8000fa0 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003584:	f7fd fd0c 	bl	8000fa0 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b64      	cmp	r3, #100	; 0x64
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e204      	b.n	80039a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	4b76      	ldr	r3, [pc, #472]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0xc0>
 80035a2:	e014      	b.n	80035ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7fd fcfc 	bl	8000fa0 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ac:	f7fd fcf8 	bl	8000fa0 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	; 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e1f0      	b.n	80039a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035be:	4b6c      	ldr	r3, [pc, #432]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0xe8>
 80035ca:	e000      	b.n	80035ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d063      	beq.n	80036a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035da:	4b65      	ldr	r3, [pc, #404]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00b      	beq.n	80035fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e6:	4b62      	ldr	r3, [pc, #392]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d11c      	bne.n	800362c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035f2:	4b5f      	ldr	r3, [pc, #380]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d116      	bne.n	800362c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fe:	4b5c      	ldr	r3, [pc, #368]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <HAL_RCC_OscConfig+0x152>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d001      	beq.n	8003616 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e1c4      	b.n	80039a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003616:	4b56      	ldr	r3, [pc, #344]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4952      	ldr	r1, [pc, #328]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362a:	e03a      	b.n	80036a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d020      	beq.n	8003676 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003634:	4b4f      	ldr	r3, [pc, #316]	; (8003774 <HAL_RCC_OscConfig+0x2b0>)
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363a:	f7fd fcb1 	bl	8000fa0 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003642:	f7fd fcad 	bl	8000fa0 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e1a5      	b.n	80039a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003654:	4b46      	ldr	r3, [pc, #280]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003660:	4b43      	ldr	r3, [pc, #268]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4940      	ldr	r1, [pc, #256]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003670:	4313      	orrs	r3, r2
 8003672:	600b      	str	r3, [r1, #0]
 8003674:	e015      	b.n	80036a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003676:	4b3f      	ldr	r3, [pc, #252]	; (8003774 <HAL_RCC_OscConfig+0x2b0>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fd fc90 	bl	8000fa0 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003684:	f7fd fc8c 	bl	8000fa0 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e184      	b.n	80039a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003696:	4b36      	ldr	r3, [pc, #216]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f0      	bne.n	8003684 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d030      	beq.n	8003710 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d016      	beq.n	80036e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b6:	4b30      	ldr	r3, [pc, #192]	; (8003778 <HAL_RCC_OscConfig+0x2b4>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036bc:	f7fd fc70 	bl	8000fa0 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c4:	f7fd fc6c 	bl	8000fa0 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e164      	b.n	80039a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d6:	4b26      	ldr	r3, [pc, #152]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 80036d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x200>
 80036e2:	e015      	b.n	8003710 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e4:	4b24      	ldr	r3, [pc, #144]	; (8003778 <HAL_RCC_OscConfig+0x2b4>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ea:	f7fd fc59 	bl	8000fa0 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f2:	f7fd fc55 	bl	8000fa0 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e14d      	b.n	80039a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003704:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f0      	bne.n	80036f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80a0 	beq.w	800385e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800371e:	2300      	movs	r3, #0
 8003720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003722:	4b13      	ldr	r3, [pc, #76]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10f      	bne.n	800374e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	4a0e      	ldr	r2, [pc, #56]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373c:	6413      	str	r3, [r2, #64]	; 0x40
 800373e:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <HAL_RCC_OscConfig+0x2ac>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800374a:	2301      	movs	r3, #1
 800374c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374e:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_RCC_OscConfig+0x2b8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003756:	2b00      	cmp	r3, #0
 8003758:	d121      	bne.n	800379e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800375a:	4b08      	ldr	r3, [pc, #32]	; (800377c <HAL_RCC_OscConfig+0x2b8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a07      	ldr	r2, [pc, #28]	; (800377c <HAL_RCC_OscConfig+0x2b8>)
 8003760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003766:	f7fd fc1b 	bl	8000fa0 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376c:	e011      	b.n	8003792 <HAL_RCC_OscConfig+0x2ce>
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800
 8003774:	42470000 	.word	0x42470000
 8003778:	42470e80 	.word	0x42470e80
 800377c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003780:	f7fd fc0e 	bl	8000fa0 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e106      	b.n	80039a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003792:	4b85      	ldr	r3, [pc, #532]	; (80039a8 <HAL_RCC_OscConfig+0x4e4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d106      	bne.n	80037b4 <HAL_RCC_OscConfig+0x2f0>
 80037a6:	4b81      	ldr	r3, [pc, #516]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037aa:	4a80      	ldr	r2, [pc, #512]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	6713      	str	r3, [r2, #112]	; 0x70
 80037b2:	e01c      	b.n	80037ee <HAL_RCC_OscConfig+0x32a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	d10c      	bne.n	80037d6 <HAL_RCC_OscConfig+0x312>
 80037bc:	4b7b      	ldr	r3, [pc, #492]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	4a7a      	ldr	r2, [pc, #488]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 80037c2:	f043 0304 	orr.w	r3, r3, #4
 80037c6:	6713      	str	r3, [r2, #112]	; 0x70
 80037c8:	4b78      	ldr	r3, [pc, #480]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	4a77      	ldr	r2, [pc, #476]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6713      	str	r3, [r2, #112]	; 0x70
 80037d4:	e00b      	b.n	80037ee <HAL_RCC_OscConfig+0x32a>
 80037d6:	4b75      	ldr	r3, [pc, #468]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	4a74      	ldr	r2, [pc, #464]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	6713      	str	r3, [r2, #112]	; 0x70
 80037e2:	4b72      	ldr	r3, [pc, #456]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	4a71      	ldr	r2, [pc, #452]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 80037e8:	f023 0304 	bic.w	r3, r3, #4
 80037ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d015      	beq.n	8003822 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fd fbd3 	bl	8000fa0 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fd fbcf 	bl	8000fa0 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	; 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e0c5      	b.n	80039a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003814:	4b65      	ldr	r3, [pc, #404]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0ee      	beq.n	80037fe <HAL_RCC_OscConfig+0x33a>
 8003820:	e014      	b.n	800384c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003822:	f7fd fbbd 	bl	8000fa0 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003828:	e00a      	b.n	8003840 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800382a:	f7fd fbb9 	bl	8000fa0 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	f241 3288 	movw	r2, #5000	; 0x1388
 8003838:	4293      	cmp	r3, r2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e0af      	b.n	80039a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003840:	4b5a      	ldr	r3, [pc, #360]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1ee      	bne.n	800382a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d105      	bne.n	800385e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003852:	4b56      	ldr	r3, [pc, #344]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	4a55      	ldr	r2, [pc, #340]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 8003858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800385c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 809b 	beq.w	800399e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003868:	4b50      	ldr	r3, [pc, #320]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	2b08      	cmp	r3, #8
 8003872:	d05c      	beq.n	800392e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d141      	bne.n	8003900 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387c:	4b4c      	ldr	r3, [pc, #304]	; (80039b0 <HAL_RCC_OscConfig+0x4ec>)
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003882:	f7fd fb8d 	bl	8000fa0 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800388a:	f7fd fb89 	bl	8000fa0 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e081      	b.n	80039a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389c:	4b43      	ldr	r3, [pc, #268]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f0      	bne.n	800388a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69da      	ldr	r2, [r3, #28]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	019b      	lsls	r3, r3, #6
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	3b01      	subs	r3, #1
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	061b      	lsls	r3, r3, #24
 80038cc:	4937      	ldr	r1, [pc, #220]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d2:	4b37      	ldr	r3, [pc, #220]	; (80039b0 <HAL_RCC_OscConfig+0x4ec>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d8:	f7fd fb62 	bl	8000fa0 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fd fb5e 	bl	8000fa0 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e056      	b.n	80039a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	4b2e      	ldr	r3, [pc, #184]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x41c>
 80038fe:	e04e      	b.n	800399e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003900:	4b2b      	ldr	r3, [pc, #172]	; (80039b0 <HAL_RCC_OscConfig+0x4ec>)
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003906:	f7fd fb4b 	bl	8000fa0 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390e:	f7fd fb47 	bl	8000fa0 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e03f      	b.n	80039a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003920:	4b22      	ldr	r3, [pc, #136]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1f0      	bne.n	800390e <HAL_RCC_OscConfig+0x44a>
 800392c:	e037      	b.n	800399e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e032      	b.n	80039a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800393a:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <HAL_RCC_OscConfig+0x4e8>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d028      	beq.n	800399a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003952:	429a      	cmp	r2, r3
 8003954:	d121      	bne.n	800399a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d11a      	bne.n	800399a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800396a:	4013      	ands	r3, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003970:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003972:	4293      	cmp	r3, r2
 8003974:	d111      	bne.n	800399a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	085b      	lsrs	r3, r3, #1
 8003982:	3b01      	subs	r3, #1
 8003984:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003986:	429a      	cmp	r2, r3
 8003988:	d107      	bne.n	800399a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d001      	beq.n	800399e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40007000 	.word	0x40007000
 80039ac:	40023800 	.word	0x40023800
 80039b0:	42470060 	.word	0x42470060

080039b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0cc      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039c8:	4b68      	ldr	r3, [pc, #416]	; (8003b6c <HAL_RCC_ClockConfig+0x1b8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d90c      	bls.n	80039f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b65      	ldr	r3, [pc, #404]	; (8003b6c <HAL_RCC_ClockConfig+0x1b8>)
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039de:	4b63      	ldr	r3, [pc, #396]	; (8003b6c <HAL_RCC_ClockConfig+0x1b8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0b8      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d020      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a08:	4b59      	ldr	r3, [pc, #356]	; (8003b70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4a58      	ldr	r2, [pc, #352]	; (8003b70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d005      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a20:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	4a52      	ldr	r2, [pc, #328]	; (8003b70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a2c:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	494d      	ldr	r1, [pc, #308]	; (8003b70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d044      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d107      	bne.n	8003a62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a52:	4b47      	ldr	r3, [pc, #284]	; (8003b70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d119      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e07f      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d003      	beq.n	8003a72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a72:	4b3f      	ldr	r3, [pc, #252]	; (8003b70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e06f      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a82:	4b3b      	ldr	r3, [pc, #236]	; (8003b70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e067      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a92:	4b37      	ldr	r3, [pc, #220]	; (8003b70 <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f023 0203 	bic.w	r2, r3, #3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4934      	ldr	r1, [pc, #208]	; (8003b70 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa4:	f7fd fa7c 	bl	8000fa0 <HAL_GetTick>
 8003aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aaa:	e00a      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aac:	f7fd fa78 	bl	8000fa0 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e04f      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 020c 	and.w	r2, r3, #12
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d1eb      	bne.n	8003aac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d20c      	bcs.n	8003afc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b22      	ldr	r3, [pc, #136]	; (8003b6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aea:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <HAL_RCC_ClockConfig+0x1b8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e032      	b.n	8003b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b08:	4b19      	ldr	r3, [pc, #100]	; (8003b70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4916      	ldr	r1, [pc, #88]	; (8003b70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b26:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	490e      	ldr	r1, [pc, #56]	; (8003b70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b3a:	f000 f821 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	091b      	lsrs	r3, r3, #4
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	490a      	ldr	r1, [pc, #40]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 8003b4c:	5ccb      	ldrb	r3, [r1, r3]
 8003b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b52:	4a09      	ldr	r2, [pc, #36]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_RCC_ClockConfig+0x1c8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fd f9dc 	bl	8000f18 <HAL_InitTick>

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40023c00 	.word	0x40023c00
 8003b70:	40023800 	.word	0x40023800
 8003b74:	080086a8 	.word	0x080086a8
 8003b78:	20000004 	.word	0x20000004
 8003b7c:	20000008 	.word	0x20000008

08003b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b84:	b084      	sub	sp, #16
 8003b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	607b      	str	r3, [r7, #4]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	2300      	movs	r3, #0
 8003b92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b98:	4b67      	ldr	r3, [pc, #412]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 030c 	and.w	r3, r3, #12
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d00d      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	f200 80bd 	bhi.w	8003d24 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d003      	beq.n	8003bba <HAL_RCC_GetSysClockFreq+0x3a>
 8003bb2:	e0b7      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bb4:	4b61      	ldr	r3, [pc, #388]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003bb6:	60bb      	str	r3, [r7, #8]
       break;
 8003bb8:	e0b7      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bba:	4b61      	ldr	r3, [pc, #388]	; (8003d40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003bbc:	60bb      	str	r3, [r7, #8]
      break;
 8003bbe:	e0b4      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bc0:	4b5d      	ldr	r3, [pc, #372]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bca:	4b5b      	ldr	r3, [pc, #364]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d04d      	beq.n	8003c72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd6:	4b58      	ldr	r3, [pc, #352]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	099b      	lsrs	r3, r3, #6
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003be6:	f04f 0100 	mov.w	r1, #0
 8003bea:	ea02 0800 	and.w	r8, r2, r0
 8003bee:	ea03 0901 	and.w	r9, r3, r1
 8003bf2:	4640      	mov	r0, r8
 8003bf4:	4649      	mov	r1, r9
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	014b      	lsls	r3, r1, #5
 8003c00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c04:	0142      	lsls	r2, r0, #5
 8003c06:	4610      	mov	r0, r2
 8003c08:	4619      	mov	r1, r3
 8003c0a:	ebb0 0008 	subs.w	r0, r0, r8
 8003c0e:	eb61 0109 	sbc.w	r1, r1, r9
 8003c12:	f04f 0200 	mov.w	r2, #0
 8003c16:	f04f 0300 	mov.w	r3, #0
 8003c1a:	018b      	lsls	r3, r1, #6
 8003c1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c20:	0182      	lsls	r2, r0, #6
 8003c22:	1a12      	subs	r2, r2, r0
 8003c24:	eb63 0301 	sbc.w	r3, r3, r1
 8003c28:	f04f 0000 	mov.w	r0, #0
 8003c2c:	f04f 0100 	mov.w	r1, #0
 8003c30:	00d9      	lsls	r1, r3, #3
 8003c32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c36:	00d0      	lsls	r0, r2, #3
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	eb12 0208 	adds.w	r2, r2, r8
 8003c40:	eb43 0309 	adc.w	r3, r3, r9
 8003c44:	f04f 0000 	mov.w	r0, #0
 8003c48:	f04f 0100 	mov.w	r1, #0
 8003c4c:	0259      	lsls	r1, r3, #9
 8003c4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c52:	0250      	lsls	r0, r2, #9
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4610      	mov	r0, r2
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	f7fc fb04 	bl	8000270 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	e04a      	b.n	8003d08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c72:	4b31      	ldr	r3, [pc, #196]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	099b      	lsrs	r3, r3, #6
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c82:	f04f 0100 	mov.w	r1, #0
 8003c86:	ea02 0400 	and.w	r4, r2, r0
 8003c8a:	ea03 0501 	and.w	r5, r3, r1
 8003c8e:	4620      	mov	r0, r4
 8003c90:	4629      	mov	r1, r5
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	014b      	lsls	r3, r1, #5
 8003c9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ca0:	0142      	lsls	r2, r0, #5
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	1b00      	subs	r0, r0, r4
 8003ca8:	eb61 0105 	sbc.w	r1, r1, r5
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	018b      	lsls	r3, r1, #6
 8003cb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003cba:	0182      	lsls	r2, r0, #6
 8003cbc:	1a12      	subs	r2, r2, r0
 8003cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003cc2:	f04f 0000 	mov.w	r0, #0
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	00d9      	lsls	r1, r3, #3
 8003ccc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cd0:	00d0      	lsls	r0, r2, #3
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	1912      	adds	r2, r2, r4
 8003cd8:	eb45 0303 	adc.w	r3, r5, r3
 8003cdc:	f04f 0000 	mov.w	r0, #0
 8003ce0:	f04f 0100 	mov.w	r1, #0
 8003ce4:	0299      	lsls	r1, r3, #10
 8003ce6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003cea:	0290      	lsls	r0, r2, #10
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4610      	mov	r0, r2
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	f7fc fab8 	bl	8000270 <__aeabi_uldivmod>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4613      	mov	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d08:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	0c1b      	lsrs	r3, r3, #16
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	3301      	adds	r3, #1
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	60bb      	str	r3, [r7, #8]
      break;
 8003d22:	e002      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003d26:	60bb      	str	r3, [r7, #8]
      break;
 8003d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d2a:	68bb      	ldr	r3, [r7, #8]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d36:	bf00      	nop
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	00f42400 	.word	0x00f42400
 8003d40:	007a1200 	.word	0x007a1200

08003d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	20000004 	.word	0x20000004

08003d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d60:	f7ff fff0 	bl	8003d44 <HAL_RCC_GetHCLKFreq>
 8003d64:	4602      	mov	r2, r0
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	0a9b      	lsrs	r3, r3, #10
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	4903      	ldr	r1, [pc, #12]	; (8003d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d72:	5ccb      	ldrb	r3, [r1, r3]
 8003d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	080086b8 	.word	0x080086b8

08003d84 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d105      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d035      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003dac:	4b62      	ldr	r3, [pc, #392]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003db2:	f7fd f8f5 	bl	8000fa0 <HAL_GetTick>
 8003db6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003dba:	f7fd f8f1 	bl	8000fa0 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e0b0      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dcc:	4b5b      	ldr	r3, [pc, #364]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f0      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	019a      	lsls	r2, r3, #6
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	071b      	lsls	r3, r3, #28
 8003de4:	4955      	ldr	r1, [pc, #340]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003dec:	4b52      	ldr	r3, [pc, #328]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003df2:	f7fd f8d5 	bl	8000fa0 <HAL_GetTick>
 8003df6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003dfa:	f7fd f8d1 	bl	8000fa0 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e090      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e0c:	4b4b      	ldr	r3, [pc, #300]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8083 	beq.w	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	4b44      	ldr	r3, [pc, #272]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	4a43      	ldr	r2, [pc, #268]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e34:	6413      	str	r3, [r2, #64]	; 0x40
 8003e36:	4b41      	ldr	r3, [pc, #260]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e42:	4b3f      	ldr	r3, [pc, #252]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a3e      	ldr	r2, [pc, #248]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e4c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e4e:	f7fd f8a7 	bl	8000fa0 <HAL_GetTick>
 8003e52:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e54:	e008      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e56:	f7fd f8a3 	bl	8000fa0 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e062      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e68:	4b35      	ldr	r3, [pc, #212]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0f0      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e74:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d02f      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d028      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e92:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e9a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e9c:	4b29      	ldr	r3, [pc, #164]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ea2:	4b28      	ldr	r3, [pc, #160]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ea8:	4a24      	ldr	r2, [pc, #144]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003eae:	4b23      	ldr	r3, [pc, #140]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d114      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003eba:	f7fd f871 	bl	8000fa0 <HAL_GetTick>
 8003ebe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec0:	e00a      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec2:	f7fd f86d 	bl	8000fa0 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e02a      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed8:	4b18      	ldr	r3, [pc, #96]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0ee      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef0:	d10d      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003ef2:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f06:	490d      	ldr	r1, [pc, #52]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	608b      	str	r3, [r1, #8]
 8003f0c:	e005      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f0e:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	4a0a      	ldr	r2, [pc, #40]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f14:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f18:	6093      	str	r3, [r2, #8]
 8003f1a:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f26:	4905      	ldr	r1, [pc, #20]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	42470068 	.word	0x42470068
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40007000 	.word	0x40007000
 8003f44:	42470e40 	.word	0x42470e40

08003f48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d13e      	bne.n	8003fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003f66:	4b23      	ldr	r3, [pc, #140]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d12f      	bne.n	8003fdc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003f7c:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f7e:	617b      	str	r3, [r7, #20]
          break;
 8003f80:	e02f      	b.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f82:	4b1c      	ldr	r3, [pc, #112]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f8e:	d108      	bne.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f90:	4b18      	ldr	r3, [pc, #96]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f98:	4a18      	ldr	r2, [pc, #96]	; (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	e007      	b.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003fa2:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003faa:	4a15      	ldr	r2, [pc, #84]	; (8004000 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003fb2:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb8:	099b      	lsrs	r3, r3, #6
 8003fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	fb02 f303 	mul.w	r3, r2, r3
 8003fc4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fcc:	0f1b      	lsrs	r3, r3, #28
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd8:	617b      	str	r3, [r7, #20]
          break;
 8003fda:	e002      	b.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]
          break;
 8003fe0:	bf00      	nop
        }
      }
      break;
 8003fe2:	bf00      	nop
    }
  }
  return frequency;
 8003fe4:	697b      	ldr	r3, [r7, #20]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	371c      	adds	r7, #28
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	00bb8000 	.word	0x00bb8000
 8003ffc:	007a1200 	.word	0x007a1200
 8004000:	00f42400 	.word	0x00f42400

08004004 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e07b      	b.n	800410e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b00      	cmp	r3, #0
 800401c:	d108      	bne.n	8004030 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004026:	d009      	beq.n	800403c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	61da      	str	r2, [r3, #28]
 800402e:	e005      	b.n	800403c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fc fe26 	bl	8000ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004072:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c0:	ea42 0103 	orr.w	r1, r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	0c1b      	lsrs	r3, r3, #16
 80040da:	f003 0104 	and.w	r1, r3, #4
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	f003 0210 	and.w	r2, r3, #16
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004116:	b084      	sub	sp, #16
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	f107 001c 	add.w	r0, r7, #28
 8004124:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412a:	2b01      	cmp	r3, #1
 800412c:	d122      	bne.n	8004174 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004158:	2b01      	cmp	r3, #1
 800415a:	d105      	bne.n	8004168 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f001 fb1b 	bl	80057a4 <USB_CoreReset>
 800416e:	4603      	mov	r3, r0
 8004170:	73fb      	strb	r3, [r7, #15]
 8004172:	e01a      	b.n	80041aa <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f001 fb0f 	bl	80057a4 <USB_CoreReset>
 8004186:	4603      	mov	r3, r0
 8004188:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800418a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800418c:	2b00      	cmp	r3, #0
 800418e:	d106      	bne.n	800419e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	639a      	str	r2, [r3, #56]	; 0x38
 800419c:	e005      	b.n	80041aa <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80041aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d10b      	bne.n	80041c8 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f043 0206 	orr.w	r2, r3, #6
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f043 0220 	orr.w	r2, r3, #32
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041d4:	b004      	add	sp, #16
 80041d6:	4770      	bx	lr

080041d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	4613      	mov	r3, r2
 80041e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d165      	bne.n	80042b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4a41      	ldr	r2, [pc, #260]	; (80042f4 <USB_SetTurnaroundTime+0x11c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d906      	bls.n	8004202 <USB_SetTurnaroundTime+0x2a>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4a40      	ldr	r2, [pc, #256]	; (80042f8 <USB_SetTurnaroundTime+0x120>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d202      	bcs.n	8004202 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80041fc:	230f      	movs	r3, #15
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	e062      	b.n	80042c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	4a3c      	ldr	r2, [pc, #240]	; (80042f8 <USB_SetTurnaroundTime+0x120>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d306      	bcc.n	8004218 <USB_SetTurnaroundTime+0x40>
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4a3b      	ldr	r2, [pc, #236]	; (80042fc <USB_SetTurnaroundTime+0x124>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d202      	bcs.n	8004218 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004212:	230e      	movs	r3, #14
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	e057      	b.n	80042c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4a38      	ldr	r2, [pc, #224]	; (80042fc <USB_SetTurnaroundTime+0x124>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d306      	bcc.n	800422e <USB_SetTurnaroundTime+0x56>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4a37      	ldr	r2, [pc, #220]	; (8004300 <USB_SetTurnaroundTime+0x128>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d202      	bcs.n	800422e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004228:	230d      	movs	r3, #13
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	e04c      	b.n	80042c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	4a33      	ldr	r2, [pc, #204]	; (8004300 <USB_SetTurnaroundTime+0x128>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d306      	bcc.n	8004244 <USB_SetTurnaroundTime+0x6c>
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	4a32      	ldr	r2, [pc, #200]	; (8004304 <USB_SetTurnaroundTime+0x12c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d802      	bhi.n	8004244 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800423e:	230c      	movs	r3, #12
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	e041      	b.n	80042c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4a2f      	ldr	r2, [pc, #188]	; (8004304 <USB_SetTurnaroundTime+0x12c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d906      	bls.n	800425a <USB_SetTurnaroundTime+0x82>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4a2e      	ldr	r2, [pc, #184]	; (8004308 <USB_SetTurnaroundTime+0x130>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d802      	bhi.n	800425a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004254:	230b      	movs	r3, #11
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	e036      	b.n	80042c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	4a2a      	ldr	r2, [pc, #168]	; (8004308 <USB_SetTurnaroundTime+0x130>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d906      	bls.n	8004270 <USB_SetTurnaroundTime+0x98>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4a29      	ldr	r2, [pc, #164]	; (800430c <USB_SetTurnaroundTime+0x134>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d802      	bhi.n	8004270 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800426a:	230a      	movs	r3, #10
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	e02b      	b.n	80042c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4a26      	ldr	r2, [pc, #152]	; (800430c <USB_SetTurnaroundTime+0x134>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d906      	bls.n	8004286 <USB_SetTurnaroundTime+0xae>
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4a25      	ldr	r2, [pc, #148]	; (8004310 <USB_SetTurnaroundTime+0x138>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d202      	bcs.n	8004286 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004280:	2309      	movs	r3, #9
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	e020      	b.n	80042c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	4a21      	ldr	r2, [pc, #132]	; (8004310 <USB_SetTurnaroundTime+0x138>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d306      	bcc.n	800429c <USB_SetTurnaroundTime+0xc4>
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4a20      	ldr	r2, [pc, #128]	; (8004314 <USB_SetTurnaroundTime+0x13c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d802      	bhi.n	800429c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004296:	2308      	movs	r3, #8
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	e015      	b.n	80042c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4a1d      	ldr	r2, [pc, #116]	; (8004314 <USB_SetTurnaroundTime+0x13c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d906      	bls.n	80042b2 <USB_SetTurnaroundTime+0xda>
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4a1c      	ldr	r2, [pc, #112]	; (8004318 <USB_SetTurnaroundTime+0x140>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d202      	bcs.n	80042b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80042ac:	2307      	movs	r3, #7
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	e00a      	b.n	80042c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80042b2:	2306      	movs	r3, #6
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	e007      	b.n	80042c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80042b8:	79fb      	ldrb	r3, [r7, #7]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d102      	bne.n	80042c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80042be:	2309      	movs	r3, #9
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e001      	b.n	80042c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80042c4:	2309      	movs	r3, #9
 80042c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	029b      	lsls	r3, r3, #10
 80042dc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	371c      	adds	r7, #28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	00d8acbf 	.word	0x00d8acbf
 80042f8:	00e4e1c0 	.word	0x00e4e1c0
 80042fc:	00f42400 	.word	0x00f42400
 8004300:	01067380 	.word	0x01067380
 8004304:	011a499f 	.word	0x011a499f
 8004308:	01312cff 	.word	0x01312cff
 800430c:	014ca43f 	.word	0x014ca43f
 8004310:	016e3600 	.word	0x016e3600
 8004314:	01a6ab1f 	.word	0x01a6ab1f
 8004318:	01e84800 	.word	0x01e84800

0800431c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f043 0201 	orr.w	r2, r3, #1
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f023 0201 	bic.w	r2, r3, #1
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d115      	bne.n	80043ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800438e:	2001      	movs	r0, #1
 8004390:	f7fc fe12 	bl	8000fb8 <HAL_Delay>
      ms++;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3301      	adds	r3, #1
 8004398:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f001 f972 	bl	8005684 <USB_GetMode>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d01e      	beq.n	80043e4 <USB_SetCurrentMode+0x84>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b31      	cmp	r3, #49	; 0x31
 80043aa:	d9f0      	bls.n	800438e <USB_SetCurrentMode+0x2e>
 80043ac:	e01a      	b.n	80043e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d115      	bne.n	80043e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043c0:	2001      	movs	r0, #1
 80043c2:	f7fc fdf9 	bl	8000fb8 <HAL_Delay>
      ms++;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3301      	adds	r3, #1
 80043ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f001 f959 	bl	8005684 <USB_GetMode>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <USB_SetCurrentMode+0x84>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b31      	cmp	r3, #49	; 0x31
 80043dc:	d9f0      	bls.n	80043c0 <USB_SetCurrentMode+0x60>
 80043de:	e001      	b.n	80043e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e005      	b.n	80043f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b32      	cmp	r3, #50	; 0x32
 80043e8:	d101      	bne.n	80043ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043f8:	b084      	sub	sp, #16
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b086      	sub	sp, #24
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004412:	2300      	movs	r3, #0
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	e009      	b.n	800442c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	3340      	adds	r3, #64	; 0x40
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	2200      	movs	r2, #0
 8004424:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	3301      	adds	r3, #1
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	2b0e      	cmp	r3, #14
 8004430:	d9f2      	bls.n	8004418 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004434:	2b00      	cmp	r3, #0
 8004436:	d11c      	bne.n	8004472 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004446:	f043 0302 	orr.w	r3, r3, #2
 800444a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	639a      	str	r2, [r3, #56]	; 0x38
 8004470:	e00b      	b.n	800448a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004490:	461a      	mov	r2, r3
 8004492:	2300      	movs	r3, #0
 8004494:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800449c:	4619      	mov	r1, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a4:	461a      	mov	r2, r3
 80044a6:	680b      	ldr	r3, [r1, #0]
 80044a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d10c      	bne.n	80044ca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d104      	bne.n	80044c0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80044b6:	2100      	movs	r1, #0
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f945 	bl	8004748 <USB_SetDevSpeed>
 80044be:	e008      	b.n	80044d2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044c0:	2101      	movs	r1, #1
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f940 	bl	8004748 <USB_SetDevSpeed>
 80044c8:	e003      	b.n	80044d2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044ca:	2103      	movs	r1, #3
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f93b 	bl	8004748 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044d2:	2110      	movs	r1, #16
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f8f3 	bl	80046c0 <USB_FlushTxFifo>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f90f 	bl	8004708 <USB_FlushRxFifo>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fa:	461a      	mov	r2, r3
 80044fc:	2300      	movs	r3, #0
 80044fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004506:	461a      	mov	r2, r3
 8004508:	2300      	movs	r3, #0
 800450a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004512:	461a      	mov	r2, r3
 8004514:	2300      	movs	r3, #0
 8004516:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004518:	2300      	movs	r3, #0
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	e043      	b.n	80045a6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004530:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004534:	d118      	bne.n	8004568 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004548:	461a      	mov	r2, r3
 800454a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	e013      	b.n	800457a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455e:	461a      	mov	r2, r3
 8004560:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	e008      	b.n	800457a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004574:	461a      	mov	r2, r3
 8004576:	2300      	movs	r3, #0
 8004578:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004586:	461a      	mov	r2, r3
 8004588:	2300      	movs	r3, #0
 800458a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004598:	461a      	mov	r2, r3
 800459a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800459e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	3301      	adds	r3, #1
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d3b7      	bcc.n	800451e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045ae:	2300      	movs	r3, #0
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	e043      	b.n	800463c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045ca:	d118      	bne.n	80045fe <USB_DevInit+0x206>
    {
      if (i == 0U)
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10a      	bne.n	80045e8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045de:	461a      	mov	r2, r3
 80045e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	e013      	b.n	8004610 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f4:	461a      	mov	r2, r3
 80045f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	e008      	b.n	8004610 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460a:	461a      	mov	r2, r3
 800460c:	2300      	movs	r3, #0
 800460e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461c:	461a      	mov	r2, r3
 800461e:	2300      	movs	r3, #0
 8004620:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4413      	add	r3, r2
 800462a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462e:	461a      	mov	r2, r3
 8004630:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004634:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	3301      	adds	r3, #1
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	429a      	cmp	r2, r3
 8004642:	d3b7      	bcc.n	80045b4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004652:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004656:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004664:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004668:	2b00      	cmp	r3, #0
 800466a:	d105      	bne.n	8004678 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f043 0210 	orr.w	r2, r3, #16
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699a      	ldr	r2, [r3, #24]
 800467c:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <USB_DevInit+0x2c4>)
 800467e:	4313      	orrs	r3, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d005      	beq.n	8004696 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f043 0208 	orr.w	r2, r3, #8
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004698:	2b01      	cmp	r3, #1
 800469a:	d107      	bne.n	80046ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046a4:	f043 0304 	orr.w	r3, r3, #4
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046b8:	b004      	add	sp, #16
 80046ba:	4770      	bx	lr
 80046bc:	803c3800 	.word	0x803c3800

080046c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	019b      	lsls	r3, r3, #6
 80046d2:	f043 0220 	orr.w	r2, r3, #32
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	3301      	adds	r3, #1
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	4a08      	ldr	r2, [pc, #32]	; (8004704 <USB_FlushTxFifo+0x44>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e006      	b.n	80046f8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b20      	cmp	r3, #32
 80046f4:	d0f1      	beq.n	80046da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	00030d40 	.word	0x00030d40

08004708 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2210      	movs	r2, #16
 8004718:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3301      	adds	r3, #1
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	4a08      	ldr	r2, [pc, #32]	; (8004744 <USB_FlushRxFifo+0x3c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e006      	b.n	8004738 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	2b10      	cmp	r3, #16
 8004734:	d0f1      	beq.n	800471a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	00030d40 	.word	0x00030d40

08004748 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	68f9      	ldr	r1, [r7, #12]
 8004764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004768:	4313      	orrs	r3, r2
 800476a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800477a:	b480      	push	{r7}
 800477c:	b087      	sub	sp, #28
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	f003 0306 	and.w	r3, r3, #6
 8004792:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d102      	bne.n	80047a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800479a:	2300      	movs	r3, #0
 800479c:	75fb      	strb	r3, [r7, #23]
 800479e:	e00a      	b.n	80047b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d002      	beq.n	80047ac <USB_GetDevSpeed+0x32>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b06      	cmp	r3, #6
 80047aa:	d102      	bne.n	80047b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80047ac:	2302      	movs	r3, #2
 80047ae:	75fb      	strb	r3, [r7, #23]
 80047b0:	e001      	b.n	80047b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80047b2:	230f      	movs	r3, #15
 80047b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80047b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	785b      	ldrb	r3, [r3, #1]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d13a      	bne.n	8004856 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	f003 030f 	and.w	r3, r3, #15
 80047f0:	2101      	movs	r1, #1
 80047f2:	fa01 f303 	lsl.w	r3, r1, r3
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	68f9      	ldr	r1, [r7, #12]
 80047fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047fe:	4313      	orrs	r3, r2
 8004800:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d155      	bne.n	80048c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	78db      	ldrb	r3, [r3, #3]
 8004832:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004834:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	059b      	lsls	r3, r3, #22
 800483a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800483c:	4313      	orrs	r3, r2
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	0151      	lsls	r1, r2, #5
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	440a      	add	r2, r1
 8004846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800484e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	e036      	b.n	80048c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485c:	69da      	ldr	r2, [r3, #28]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	2101      	movs	r1, #1
 8004868:	fa01 f303 	lsl.w	r3, r1, r3
 800486c:	041b      	lsls	r3, r3, #16
 800486e:	68f9      	ldr	r1, [r7, #12]
 8004870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004874:	4313      	orrs	r3, r2
 8004876:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d11a      	bne.n	80048c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	78db      	ldrb	r3, [r3, #3]
 80048a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048aa:	430b      	orrs	r3, r1
 80048ac:	4313      	orrs	r3, r2
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	0151      	lsls	r1, r2, #5
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	440a      	add	r2, r1
 80048b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	785b      	ldrb	r3, [r3, #1]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d161      	bne.n	80049b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	015a      	lsls	r2, r3, #5
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4413      	add	r3, r2
 80048f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004902:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004906:	d11f      	bne.n	8004948 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	0151      	lsls	r1, r2, #5
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	440a      	add	r2, r1
 800491e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004922:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004926:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004942:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004946:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	2101      	movs	r1, #1
 800495a:	fa01 f303 	lsl.w	r3, r1, r3
 800495e:	b29b      	uxth	r3, r3
 8004960:	43db      	mvns	r3, r3
 8004962:	68f9      	ldr	r1, [r7, #12]
 8004964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004968:	4013      	ands	r3, r2
 800496a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	2101      	movs	r1, #1
 800497e:	fa01 f303 	lsl.w	r3, r1, r3
 8004982:	b29b      	uxth	r3, r3
 8004984:	43db      	mvns	r3, r3
 8004986:	68f9      	ldr	r1, [r7, #12]
 8004988:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800498c:	4013      	ands	r3, r2
 800498e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	0159      	lsls	r1, r3, #5
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	440b      	add	r3, r1
 80049a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049aa:	4619      	mov	r1, r3
 80049ac:	4b35      	ldr	r3, [pc, #212]	; (8004a84 <USB_DeactivateEndpoint+0x1b0>)
 80049ae:	4013      	ands	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]
 80049b2:	e060      	b.n	8004a76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ca:	d11f      	bne.n	8004a0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	0151      	lsls	r1, r2, #5
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	440a      	add	r2, r1
 80049e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	0151      	lsls	r1, r2, #5
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	440a      	add	r2, r1
 8004a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a22:	041b      	lsls	r3, r3, #16
 8004a24:	43db      	mvns	r3, r3
 8004a26:	68f9      	ldr	r1, [r7, #12]
 8004a28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a36:	69da      	ldr	r2, [r3, #28]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	2101      	movs	r1, #1
 8004a42:	fa01 f303 	lsl.w	r3, r1, r3
 8004a46:	041b      	lsls	r3, r3, #16
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	68f9      	ldr	r1, [r7, #12]
 8004a4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a50:	4013      	ands	r3, r2
 8004a52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	0159      	lsls	r1, r3, #5
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	440b      	add	r3, r1
 8004a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6e:	4619      	mov	r1, r3
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <USB_DeactivateEndpoint+0x1b4>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	ec337800 	.word	0xec337800
 8004a88:	eff37800 	.word	0xeff37800

08004a8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08a      	sub	sp, #40	; 0x28
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	4613      	mov	r3, r2
 8004a98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	785b      	ldrb	r3, [r3, #1]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	f040 815c 	bne.w	8004d66 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d132      	bne.n	8004b1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	0151      	lsls	r1, r2, #5
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	440a      	add	r2, r1
 8004acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ad4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ad8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	0151      	lsls	r1, r2, #5
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	440a      	add	r2, r1
 8004af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004af8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	0151      	lsls	r1, r2, #5
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	440a      	add	r2, r1
 8004b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b14:	0cdb      	lsrs	r3, r3, #19
 8004b16:	04db      	lsls	r3, r3, #19
 8004b18:	6113      	str	r3, [r2, #16]
 8004b1a:	e074      	b.n	8004c06 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	0151      	lsls	r1, r2, #5
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	440a      	add	r2, r1
 8004b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b36:	0cdb      	lsrs	r3, r3, #19
 8004b38:	04db      	lsls	r3, r3, #19
 8004b3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	0151      	lsls	r1, r2, #5
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	440a      	add	r2, r1
 8004b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	6959      	ldr	r1, [r3, #20]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	440b      	add	r3, r1
 8004b78:	1e59      	subs	r1, r3, #1
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b82:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b84:	4b9d      	ldr	r3, [pc, #628]	; (8004dfc <USB_EPStartXfer+0x370>)
 8004b86:	400b      	ands	r3, r1
 8004b88:	69b9      	ldr	r1, [r7, #24]
 8004b8a:	0148      	lsls	r0, r1, #5
 8004b8c:	69f9      	ldr	r1, [r7, #28]
 8004b8e:	4401      	add	r1, r0
 8004b90:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b94:	4313      	orrs	r3, r2
 8004b96:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	015a      	lsls	r2, r3, #5
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bae:	69b9      	ldr	r1, [r7, #24]
 8004bb0:	0148      	lsls	r0, r1, #5
 8004bb2:	69f9      	ldr	r1, [r7, #28]
 8004bb4:	4401      	add	r1, r0
 8004bb6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	78db      	ldrb	r3, [r3, #3]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d11f      	bne.n	8004c06 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004be0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004be4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	0151      	lsls	r1, r2, #5
 8004bf8:	69fa      	ldr	r2, [r7, #28]
 8004bfa:	440a      	add	r2, r1
 8004bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c04:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d14b      	bne.n	8004ca4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d009      	beq.n	8004c28 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c20:	461a      	mov	r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	78db      	ldrb	r3, [r3, #3]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d128      	bne.n	8004c82 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d110      	bne.n	8004c62 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	0151      	lsls	r1, r2, #5
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	440a      	add	r2, r1
 8004c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	e00f      	b.n	8004c82 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c80:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	e12f      	b.n	8004f04 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	0151      	lsls	r1, r2, #5
 8004cb6:	69fa      	ldr	r2, [r7, #28]
 8004cb8:	440a      	add	r2, r1
 8004cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cc2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	78db      	ldrb	r3, [r3, #3]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d015      	beq.n	8004cf8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8117 	beq.w	8004f04 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cec:	69f9      	ldr	r1, [r7, #28]
 8004cee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	634b      	str	r3, [r1, #52]	; 0x34
 8004cf6:	e105      	b.n	8004f04 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d110      	bne.n	8004d2a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	0151      	lsls	r1, r2, #5
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	440a      	add	r2, r1
 8004d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	e00f      	b.n	8004d4a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	0151      	lsls	r1, r2, #5
 8004d3c:	69fa      	ldr	r2, [r7, #28]
 8004d3e:	440a      	add	r2, r1
 8004d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d48:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	68d9      	ldr	r1, [r3, #12]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	781a      	ldrb	r2, [r3, #0]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	b298      	uxth	r0, r3
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 fa2b 	bl	80051ba <USB_WritePacket>
 8004d64:	e0ce      	b.n	8004f04 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d80:	0cdb      	lsrs	r3, r3, #19
 8004d82:	04db      	lsls	r3, r3, #19
 8004d84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004da4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004da8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d126      	bne.n	8004e00 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbe:	691a      	ldr	r2, [r3, #16]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc8:	69b9      	ldr	r1, [r7, #24]
 8004dca:	0148      	lsls	r0, r1, #5
 8004dcc:	69f9      	ldr	r1, [r7, #28]
 8004dce:	4401      	add	r1, r0
 8004dd0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004df6:	6113      	str	r3, [r2, #16]
 8004df8:	e036      	b.n	8004e68 <USB_EPStartXfer+0x3dc>
 8004dfa:	bf00      	nop
 8004dfc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	695a      	ldr	r2, [r3, #20]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	4413      	add	r3, r2
 8004e0a:	1e5a      	subs	r2, r3, #1
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	8afb      	ldrh	r3, [r7, #22]
 8004e26:	04d9      	lsls	r1, r3, #19
 8004e28:	4b39      	ldr	r3, [pc, #228]	; (8004f10 <USB_EPStartXfer+0x484>)
 8004e2a:	400b      	ands	r3, r1
 8004e2c:	69b9      	ldr	r1, [r7, #24]
 8004e2e:	0148      	lsls	r0, r1, #5
 8004e30:	69f9      	ldr	r1, [r7, #28]
 8004e32:	4401      	add	r1, r0
 8004e34:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	8af9      	ldrh	r1, [r7, #22]
 8004e50:	fb01 f303 	mul.w	r3, r1, r3
 8004e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e58:	69b9      	ldr	r1, [r7, #24]
 8004e5a:	0148      	lsls	r0, r1, #5
 8004e5c:	69f9      	ldr	r1, [r7, #28]
 8004e5e:	4401      	add	r1, r0
 8004e60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e64:	4313      	orrs	r3, r2
 8004e66:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d10d      	bne.n	8004e8a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d009      	beq.n	8004e8a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	68d9      	ldr	r1, [r3, #12]
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e86:	460a      	mov	r2, r1
 8004e88:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	78db      	ldrb	r3, [r3, #3]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d128      	bne.n	8004ee4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d110      	bne.n	8004ec4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	0151      	lsls	r1, r2, #5
 8004eb4:	69fa      	ldr	r2, [r7, #28]
 8004eb6:	440a      	add	r2, r1
 8004eb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ebc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	e00f      	b.n	8004ee4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004efe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3720      	adds	r7, #32
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	1ff80000 	.word	0x1ff80000

08004f14 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	785b      	ldrb	r3, [r3, #1]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	f040 80cd 	bne.w	80050d0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d132      	bne.n	8004fa4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	0151      	lsls	r1, r2, #5
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	440a      	add	r2, r1
 8004f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f58:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f5c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	0151      	lsls	r1, r2, #5
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	440a      	add	r2, r1
 8004f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f9c:	0cdb      	lsrs	r3, r3, #19
 8004f9e:	04db      	lsls	r3, r3, #19
 8004fa0:	6113      	str	r3, [r2, #16]
 8004fa2:	e04e      	b.n	8005042 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	0151      	lsls	r1, r2, #5
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	440a      	add	r2, r1
 8004fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fbe:	0cdb      	lsrs	r3, r3, #19
 8004fc0:	04db      	lsls	r3, r3, #19
 8004fc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fde:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fe2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fe6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d903      	bls.n	8004ffc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	689a      	ldr	r2, [r3, #8]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	0151      	lsls	r1, r2, #5
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	440a      	add	r2, r1
 8005012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005016:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800501a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005032:	6939      	ldr	r1, [r7, #16]
 8005034:	0148      	lsls	r0, r1, #5
 8005036:	6979      	ldr	r1, [r7, #20]
 8005038:	4401      	add	r1, r0
 800503a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800503e:	4313      	orrs	r3, r2
 8005040:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d11e      	bne.n	8005086 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d009      	beq.n	8005064 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505c:	461a      	mov	r2, r3
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	0151      	lsls	r1, r2, #5
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	440a      	add	r2, r1
 800507a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	e092      	b.n	80051ac <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	4413      	add	r3, r2
 800508e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	0151      	lsls	r1, r2, #5
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	440a      	add	r2, r1
 800509c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050a4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d07e      	beq.n	80051ac <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	2101      	movs	r1, #1
 80050c0:	fa01 f303 	lsl.w	r3, r1, r3
 80050c4:	6979      	ldr	r1, [r7, #20]
 80050c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050ca:	4313      	orrs	r3, r2
 80050cc:	634b      	str	r3, [r1, #52]	; 0x34
 80050ce:	e06d      	b.n	80051ac <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	0151      	lsls	r1, r2, #5
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	440a      	add	r2, r1
 80050e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ea:	0cdb      	lsrs	r3, r3, #19
 80050ec:	04db      	lsls	r3, r3, #19
 80050ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	0151      	lsls	r1, r2, #5
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	440a      	add	r2, r1
 8005106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800510a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800510e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005112:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	0151      	lsls	r1, r2, #5
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	440a      	add	r2, r1
 800513a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800513e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005142:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800515a:	6939      	ldr	r1, [r7, #16]
 800515c:	0148      	lsls	r0, r1, #5
 800515e:	6979      	ldr	r1, [r7, #20]
 8005160:	4401      	add	r1, r0
 8005162:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005166:	4313      	orrs	r3, r2
 8005168:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800516a:	79fb      	ldrb	r3, [r7, #7]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d10d      	bne.n	800518c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d009      	beq.n	800518c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	68d9      	ldr	r1, [r3, #12]
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005188:	460a      	mov	r2, r1
 800518a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	0151      	lsls	r1, r2, #5
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	440a      	add	r2, r1
 80051a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	371c      	adds	r7, #28
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b089      	sub	sp, #36	; 0x24
 80051be:	af00      	add	r7, sp, #0
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	4611      	mov	r1, r2
 80051c6:	461a      	mov	r2, r3
 80051c8:	460b      	mov	r3, r1
 80051ca:	71fb      	strb	r3, [r7, #7]
 80051cc:	4613      	mov	r3, r2
 80051ce:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80051d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d123      	bne.n	8005228 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80051e0:	88bb      	ldrh	r3, [r7, #4]
 80051e2:	3303      	adds	r3, #3
 80051e4:	089b      	lsrs	r3, r3, #2
 80051e6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051e8:	2300      	movs	r3, #0
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	e018      	b.n	8005220 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051ee:	79fb      	ldrb	r3, [r7, #7]
 80051f0:	031a      	lsls	r2, r3, #12
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051fa:	461a      	mov	r2, r3
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	3301      	adds	r3, #1
 8005206:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	3301      	adds	r3, #1
 800520c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	3301      	adds	r3, #1
 8005212:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	3301      	adds	r3, #1
 8005218:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	3301      	adds	r3, #1
 800521e:	61bb      	str	r3, [r7, #24]
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	429a      	cmp	r2, r3
 8005226:	d3e2      	bcc.n	80051ee <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3724      	adds	r7, #36	; 0x24
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005236:	b480      	push	{r7}
 8005238:	b08b      	sub	sp, #44	; 0x2c
 800523a:	af00      	add	r7, sp, #0
 800523c:	60f8      	str	r0, [r7, #12]
 800523e:	60b9      	str	r1, [r7, #8]
 8005240:	4613      	mov	r3, r2
 8005242:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	089b      	lsrs	r3, r3, #2
 8005250:	b29b      	uxth	r3, r3
 8005252:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005254:	88fb      	ldrh	r3, [r7, #6]
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800525c:	2300      	movs	r3, #0
 800525e:	623b      	str	r3, [r7, #32]
 8005260:	e014      	b.n	800528c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	601a      	str	r2, [r3, #0]
    pDest++;
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	3301      	adds	r3, #1
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	3301      	adds	r3, #1
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	3301      	adds	r3, #1
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	3301      	adds	r3, #1
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	3301      	adds	r3, #1
 800528a:	623b      	str	r3, [r7, #32]
 800528c:	6a3a      	ldr	r2, [r7, #32]
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	429a      	cmp	r2, r3
 8005292:	d3e6      	bcc.n	8005262 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005294:	8bfb      	ldrh	r3, [r7, #30]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d01e      	beq.n	80052d8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052a4:	461a      	mov	r2, r3
 80052a6:	f107 0310 	add.w	r3, r7, #16
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	701a      	strb	r2, [r3, #0]
      i++;
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	3301      	adds	r3, #1
 80052c4:	623b      	str	r3, [r7, #32]
      pDest++;
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	3301      	adds	r3, #1
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80052cc:	8bfb      	ldrh	r3, [r7, #30]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80052d2:	8bfb      	ldrh	r3, [r7, #30]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1ea      	bne.n	80052ae <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052da:	4618      	mov	r0, r3
 80052dc:	372c      	adds	r7, #44	; 0x2c
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b085      	sub	sp, #20
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	785b      	ldrb	r3, [r3, #1]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d12c      	bne.n	800535c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4413      	add	r3, r2
 800530a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	db12      	blt.n	800533a <USB_EPSetStall+0x54>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00f      	beq.n	800533a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	0151      	lsls	r1, r2, #5
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	440a      	add	r2, r1
 8005330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005334:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005338:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	0151      	lsls	r1, r2, #5
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	440a      	add	r2, r1
 8005350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005354:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	e02b      	b.n	80053b4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	db12      	blt.n	8005394 <USB_EPSetStall+0xae>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00f      	beq.n	8005394 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	0151      	lsls	r1, r2, #5
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	440a      	add	r2, r1
 800538a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800538e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005392:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	785b      	ldrb	r3, [r3, #1]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d128      	bne.n	8005430 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	78db      	ldrb	r3, [r3, #3]
 8005402:	2b03      	cmp	r3, #3
 8005404:	d003      	beq.n	800540e <USB_EPClearStall+0x4c>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	78db      	ldrb	r3, [r3, #3]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d138      	bne.n	8005480 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	440a      	add	r2, r1
 8005424:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e027      	b.n	8005480 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	0151      	lsls	r1, r2, #5
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	440a      	add	r2, r1
 8005446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800544e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	78db      	ldrb	r3, [r3, #3]
 8005454:	2b03      	cmp	r3, #3
 8005456:	d003      	beq.n	8005460 <USB_EPClearStall+0x9e>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	78db      	ldrb	r3, [r3, #3]
 800545c:	2b02      	cmp	r3, #2
 800545e:	d10f      	bne.n	8005480 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	440a      	add	r2, r1
 8005476:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800547a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800547e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	460b      	mov	r3, r1
 8005498:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80054b0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80054c2:	68f9      	ldr	r1, [r7, #12]
 80054c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c8:	4313      	orrs	r3, r2
 80054ca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054da:	b480      	push	{r7}
 80054dc:	b085      	sub	sp, #20
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054f4:	f023 0303 	bic.w	r3, r3, #3
 80054f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005508:	f023 0302 	bic.w	r3, r3, #2
 800550c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800554a:	f043 0302 	orr.w	r3, r3, #2
 800554e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800555e:	b480      	push	{r7}
 8005560:	b085      	sub	sp, #20
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4013      	ands	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005576:	68fb      	ldr	r3, [r7, #12]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a0:	69db      	ldr	r3, [r3, #28]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	4013      	ands	r3, r2
 80055a6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	0c1b      	lsrs	r3, r3, #16
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	4013      	ands	r3, r2
 80055da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	b29b      	uxth	r3, r3
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	4013      	ands	r3, r2
 8005618:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800561a:	68bb      	ldr	r3, [r7, #8]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800564c:	78fb      	ldrb	r3, [r7, #3]
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	fa22 f303 	lsr.w	r3, r2, r3
 8005658:	01db      	lsls	r3, r3, #7
 800565a:	b2db      	uxtb	r3, r3
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	4313      	orrs	r3, r2
 8005660:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005662:	78fb      	ldrb	r3, [r7, #3]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4013      	ands	r3, r2
 8005674:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005676:	68bb      	ldr	r3, [r7, #8]
}
 8005678:	4618      	mov	r0, r3
 800567a:	371c      	adds	r7, #28
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	f003 0301 	and.w	r3, r3, #1
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80056be:	f023 0307 	bic.w	r3, r3, #7
 80056c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b087      	sub	sp, #28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	460b      	mov	r3, r1
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	333c      	adds	r3, #60	; 0x3c
 80056fe:	3304      	adds	r3, #4
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	4a26      	ldr	r2, [pc, #152]	; (80057a0 <USB_EP0_OutStart+0xb8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d90a      	bls.n	8005722 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800571c:	d101      	bne.n	8005722 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	e037      	b.n	8005792 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005728:	461a      	mov	r2, r3
 800572a:	2300      	movs	r3, #0
 800572c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005740:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005750:	f043 0318 	orr.w	r3, r3, #24
 8005754:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005764:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005768:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800576a:	7afb      	ldrb	r3, [r7, #11]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d10f      	bne.n	8005790 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005776:	461a      	mov	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800578a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800578e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	4f54300a 	.word	0x4f54300a

080057a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3301      	adds	r3, #1
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	4a13      	ldr	r2, [pc, #76]	; (8005804 <USB_CoreReset+0x60>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d901      	bls.n	80057c0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e01a      	b.n	80057f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	daf3      	bge.n	80057b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f043 0201 	orr.w	r2, r3, #1
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3301      	adds	r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	4a09      	ldr	r2, [pc, #36]	; (8005804 <USB_CoreReset+0x60>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d901      	bls.n	80057e8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e006      	b.n	80057f6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d0f1      	beq.n	80057d8 <USB_CoreReset+0x34>

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	00030d40 	.word	0x00030d40

08005808 <eMBMasterReqWriteMultipleHoldingRegister>:
 * @return error code
 */
eMBMasterReqErrCode
eMBMasterReqWriteMultipleHoldingRegister( UCHAR ucSndAddr,
		USHORT usRegAddr, USHORT usNRegs, USHORT * pusDataBuffer, LONG lTimeOut )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af00      	add	r7, sp, #0
 800580e:	607b      	str	r3, [r7, #4]
 8005810:	4603      	mov	r3, r0
 8005812:	73fb      	strb	r3, [r7, #15]
 8005814:	460b      	mov	r3, r1
 8005816:	81bb      	strh	r3, [r7, #12]
 8005818:	4613      	mov	r3, r2
 800581a:	817b      	strh	r3, [r7, #10]
    UCHAR                 *ucMBFrame;
    USHORT                 usRegIndex = 0;
 800581c:	2300      	movs	r3, #0
 800581e:	837b      	strh	r3, [r7, #26]
    UCHAR Length;
     USHORT          usCRC16;
    eMBMasterReqErrCode    eErrStatus = MB_MRE_NO_ERR;
 8005820:	2300      	movs	r3, #0
 8005822:	767b      	strb	r3, [r7, #25]

    if ( ucSndAddr > MB_MASTER_TOTAL_SLAVE_NUM ) eErrStatus = MB_MRE_ILL_ARG;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2bf3      	cmp	r3, #243	; 0xf3
 8005828:	d902      	bls.n	8005830 <eMBMasterReqWriteMultipleHoldingRegister+0x28>
 800582a:	2302      	movs	r3, #2
 800582c:	767b      	strb	r3, [r7, #25]
 800582e:	e068      	b.n	8005902 <eMBMasterReqWriteMultipleHoldingRegister+0xfa>
    else
    {
//		vMBMasterGetPDUSndBuf(&ucMBFrame);
//		vMBMasterSetDestAddress(ucSndAddr);

       	MBbuffer[0]=ucSndAddr; //Slave Address
 8005830:	4a36      	ldr	r2, [pc, #216]	; (800590c <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	7013      	strb	r3, [r2, #0]
        ucMBFrame = &MBbuffer[1];  // Start from offset 1
 8005836:	4b36      	ldr	r3, [pc, #216]	; (8005910 <eMBMasterReqWriteMultipleHoldingRegister+0x108>)
 8005838:	61fb      	str	r3, [r7, #28]

		ucMBFrame[MB_PDU_FUNC_OFF]                     = MB_FUNC_WRITE_MULTIPLE_REGISTERS;
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	2210      	movs	r2, #16
 800583e:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF]       = usRegAddr >> 8;
 8005840:	89bb      	ldrh	r3, [r7, #12]
 8005842:	0a1b      	lsrs	r3, r3, #8
 8005844:	b29a      	uxth	r2, r3
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	3301      	adds	r3, #1
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_ADDR_OFF + 1]   = usRegAddr;
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	3302      	adds	r3, #2
 8005852:	89ba      	ldrh	r2, [r7, #12]
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF]     = usNRegs >> 8;
 8005858:	897b      	ldrh	r3, [r7, #10]
 800585a:	0a1b      	lsrs	r3, r3, #8
 800585c:	b29a      	uxth	r2, r3
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	3303      	adds	r3, #3
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_REGCNT_OFF + 1] = usNRegs ;
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	3304      	adds	r3, #4
 800586a:	897a      	ldrh	r2, [r7, #10]
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]
		ucMBFrame[MB_PDU_REQ_WRITE_MUL_BYTECNT_OFF]    = usNRegs * 2;
 8005870:	897b      	ldrh	r3, [r7, #10]
 8005872:	b2da      	uxtb	r2, r3
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	3305      	adds	r3, #5
 8005878:	0052      	lsls	r2, r2, #1
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	701a      	strb	r2, [r3, #0]
		ucMBFrame += MB_PDU_REQ_WRITE_MUL_VALUES_OFF;
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	3306      	adds	r3, #6
 8005882:	61fb      	str	r3, [r7, #28]
		while( usNRegs > usRegIndex)
 8005884:	e017      	b.n	80058b6 <eMBMasterReqWriteMultipleHoldingRegister+0xae>
		{
			*ucMBFrame++ = pusDataBuffer[usRegIndex] >> 8;
 8005886:	8b7b      	ldrh	r3, [r7, #26]
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	4413      	add	r3, r2
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	0a1b      	lsrs	r3, r3, #8
 8005892:	b299      	uxth	r1, r3
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	61fa      	str	r2, [r7, #28]
 800589a:	b2ca      	uxtb	r2, r1
 800589c:	701a      	strb	r2, [r3, #0]
			*ucMBFrame++ = pusDataBuffer[usRegIndex++] ;
 800589e:	8b7b      	ldrh	r3, [r7, #26]
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	837a      	strh	r2, [r7, #26]
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	4413      	add	r3, r2
 80058aa:	8819      	ldrh	r1, [r3, #0]
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	61fa      	str	r2, [r7, #28]
 80058b2:	b2ca      	uxtb	r2, r1
 80058b4:	701a      	strb	r2, [r3, #0]
		while( usNRegs > usRegIndex)
 80058b6:	897a      	ldrh	r2, [r7, #10]
 80058b8:	8b7b      	ldrh	r3, [r7, #26]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d8e3      	bhi.n	8005886 <eMBMasterReqWriteMultipleHoldingRegister+0x7e>
		}

		Length = MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_MUL_SIZE_MIN + 2*usNRegs + 3 ; //Address + CRC
 80058be:	897b      	ldrh	r3, [r7, #10]
 80058c0:	3303      	adds	r3, #3
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	3303      	adds	r3, #3
 80058ca:	763b      	strb	r3, [r7, #24]
        usCRC16 = usMBCRC16( &MBbuffer[0], Length-2 );
 80058cc:	7e3b      	ldrb	r3, [r7, #24]
 80058ce:	3b02      	subs	r3, #2
 80058d0:	4619      	mov	r1, r3
 80058d2:	480e      	ldr	r0, [pc, #56]	; (800590c <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 80058d4:	f000 f81e 	bl	8005914 <usMBCRC16>
 80058d8:	4603      	mov	r3, r0
 80058da:	82fb      	strh	r3, [r7, #22]

        MBbuffer[Length-1] = usCRC16 >> 8;
 80058dc:	8afb      	ldrh	r3, [r7, #22]
 80058de:	0a1b      	lsrs	r3, r3, #8
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	7e3b      	ldrb	r3, [r7, #24]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b2d1      	uxtb	r1, r2
 80058e8:	4a08      	ldr	r2, [pc, #32]	; (800590c <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 80058ea:	54d1      	strb	r1, [r2, r3]
        MBbuffer[Length-2] = usCRC16 & 0xff;
 80058ec:	7e3b      	ldrb	r3, [r7, #24]
 80058ee:	3b02      	subs	r3, #2
 80058f0:	8afa      	ldrh	r2, [r7, #22]
 80058f2:	b2d1      	uxtb	r1, r2
 80058f4:	4a05      	ldr	r2, [pc, #20]	; (800590c <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 80058f6:	54d1      	strb	r1, [r2, r3]

		 CDC_Transmit_FS(MBbuffer,Length);
 80058f8:	7e3b      	ldrb	r3, [r7, #24]
 80058fa:	4619      	mov	r1, r3
 80058fc:	4803      	ldr	r0, [pc, #12]	; (800590c <eMBMasterReqWriteMultipleHoldingRegister+0x104>)
 80058fe:	f001 fda3 	bl	8007448 <CDC_Transmit_FS>

//		vMBMasterSetPDUSndLength( MB_PDU_SIZE_MIN + MB_PDU_REQ_WRITE_MUL_SIZE_MIN + 2*usNRegs );
//		( void ) xMBMasterPortEventPost( EV_MASTER_FRAME_SENT );
//		eErrStatus = eMBMasterWaitRequestFinish( );
    }
    return eErrStatus;
 8005902:	7e7b      	ldrb	r3, [r7, #25]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3720      	adds	r7, #32
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	200005e4 	.word	0x200005e4
 8005910:	200005e5 	.word	0x200005e5

08005914 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8005920:	23ff      	movs	r3, #255	; 0xff
 8005922:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8005924:	23ff      	movs	r3, #255	; 0xff
 8005926:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8005928:	e013      	b.n	8005952 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	781a      	ldrb	r2, [r3, #0]
 8005932:	7bbb      	ldrb	r3, [r7, #14]
 8005934:	4053      	eors	r3, r2
 8005936:	b2db      	uxtb	r3, r3
 8005938:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800593a:	4a0f      	ldr	r2, [pc, #60]	; (8005978 <usMBCRC16+0x64>)
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4413      	add	r3, r2
 8005940:	781a      	ldrb	r2, [r3, #0]
 8005942:	7bfb      	ldrb	r3, [r7, #15]
 8005944:	4053      	eors	r3, r2
 8005946:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8005948:	4a0c      	ldr	r2, [pc, #48]	; (800597c <usMBCRC16+0x68>)
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	4413      	add	r3, r2
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8005952:	887b      	ldrh	r3, [r7, #2]
 8005954:	1e5a      	subs	r2, r3, #1
 8005956:	807a      	strh	r2, [r7, #2]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e6      	bne.n	800592a <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	b21a      	sxth	r2, r3
 8005962:	7bbb      	ldrb	r3, [r7, #14]
 8005964:	b21b      	sxth	r3, r3
 8005966:	4313      	orrs	r3, r2
 8005968:	b21b      	sxth	r3, r3
 800596a:	b29b      	uxth	r3, r3
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	080086c0 	.word	0x080086c0
 800597c:	080087c0 	.word	0x080087c0

08005980 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800598c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005990:	f002 f980 	bl	8007c94 <USBD_static_malloc>
 8005994:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d105      	bne.n	80059a8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80059a4:	2302      	movs	r3, #2
 80059a6:	e066      	b.n	8005a76 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	7c1b      	ldrb	r3, [r3, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d119      	bne.n	80059ec <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059bc:	2202      	movs	r2, #2
 80059be:	2181      	movs	r1, #129	; 0x81
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f002 f844 	bl	8007a4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059d0:	2202      	movs	r2, #2
 80059d2:	2101      	movs	r1, #1
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f002 f83a 	bl	8007a4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2210      	movs	r2, #16
 80059e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80059ea:	e016      	b.n	8005a1a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059ec:	2340      	movs	r3, #64	; 0x40
 80059ee:	2202      	movs	r2, #2
 80059f0:	2181      	movs	r1, #129	; 0x81
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f002 f82b 	bl	8007a4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059fe:	2340      	movs	r3, #64	; 0x40
 8005a00:	2202      	movs	r2, #2
 8005a02:	2101      	movs	r1, #1
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f002 f822 	bl	8007a4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2210      	movs	r2, #16
 8005a16:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	2182      	movs	r1, #130	; 0x82
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f002 f814 	bl	8007a4e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	7c1b      	ldrb	r3, [r3, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d109      	bne.n	8005a64 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f002 f8e5 	bl	8007c2c <USBD_LL_PrepareReceive>
 8005a62:	e007      	b.n	8005a74 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a6a:	2340      	movs	r3, #64	; 0x40
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f002 f8dc 	bl	8007c2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b082      	sub	sp, #8
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	460b      	mov	r3, r1
 8005a88:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005a8a:	2181      	movs	r1, #129	; 0x81
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f002 f804 	bl	8007a9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005a98:	2101      	movs	r1, #1
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f001 fffd 	bl	8007a9a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005aa8:	2182      	movs	r1, #130	; 0x82
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f001 fff5 	bl	8007a9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00e      	beq.n	8005ae8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ada:	4618      	mov	r0, r3
 8005adc:	f002 f8e8 	bl	8007cb0 <USBD_static_free>
    pdev->pClassData = NULL;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e0af      	b.n	8005c7c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d03f      	beq.n	8005ba8 <USBD_CDC_Setup+0xb4>
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	f040 809f 	bne.w	8005c6c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	88db      	ldrh	r3, [r3, #6]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d02e      	beq.n	8005b94 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	b25b      	sxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	da16      	bge.n	8005b6e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005b4c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	88d2      	ldrh	r2, [r2, #6]
 8005b52:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	88db      	ldrh	r3, [r3, #6]
 8005b58:	2b07      	cmp	r3, #7
 8005b5a:	bf28      	it	cs
 8005b5c:	2307      	movcs	r3, #7
 8005b5e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	89fa      	ldrh	r2, [r7, #14]
 8005b64:	4619      	mov	r1, r3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f001 fb19 	bl	800719e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005b6c:	e085      	b.n	8005c7a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	785a      	ldrb	r2, [r3, #1]
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	88db      	ldrh	r3, [r3, #6]
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005b84:	6939      	ldr	r1, [r7, #16]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	88db      	ldrh	r3, [r3, #6]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f001 fb32 	bl	80071f6 <USBD_CtlPrepareRx>
      break;
 8005b92:	e072      	b.n	8005c7a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	7850      	ldrb	r0, [r2, #1]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	6839      	ldr	r1, [r7, #0]
 8005ba4:	4798      	blx	r3
      break;
 8005ba6:	e068      	b.n	8005c7a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	2b0b      	cmp	r3, #11
 8005bae:	d852      	bhi.n	8005c56 <USBD_CDC_Setup+0x162>
 8005bb0:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <USBD_CDC_Setup+0xc4>)
 8005bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb6:	bf00      	nop
 8005bb8:	08005be9 	.word	0x08005be9
 8005bbc:	08005c65 	.word	0x08005c65
 8005bc0:	08005c57 	.word	0x08005c57
 8005bc4:	08005c57 	.word	0x08005c57
 8005bc8:	08005c57 	.word	0x08005c57
 8005bcc:	08005c57 	.word	0x08005c57
 8005bd0:	08005c57 	.word	0x08005c57
 8005bd4:	08005c57 	.word	0x08005c57
 8005bd8:	08005c57 	.word	0x08005c57
 8005bdc:	08005c57 	.word	0x08005c57
 8005be0:	08005c13 	.word	0x08005c13
 8005be4:	08005c3d 	.word	0x08005c3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b03      	cmp	r3, #3
 8005bf2:	d107      	bne.n	8005c04 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005bf4:	f107 030a 	add.w	r3, r7, #10
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f001 face 	bl	800719e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c02:	e032      	b.n	8005c6a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f001 fa58 	bl	80070bc <USBD_CtlError>
            ret = USBD_FAIL;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	75fb      	strb	r3, [r7, #23]
          break;
 8005c10:	e02b      	b.n	8005c6a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d107      	bne.n	8005c2e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c1e:	f107 030d 	add.w	r3, r7, #13
 8005c22:	2201      	movs	r2, #1
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f001 fab9 	bl	800719e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c2c:	e01d      	b.n	8005c6a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f001 fa43 	bl	80070bc <USBD_CtlError>
            ret = USBD_FAIL;
 8005c36:	2303      	movs	r3, #3
 8005c38:	75fb      	strb	r3, [r7, #23]
          break;
 8005c3a:	e016      	b.n	8005c6a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d00f      	beq.n	8005c68 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f001 fa36 	bl	80070bc <USBD_CtlError>
            ret = USBD_FAIL;
 8005c50:	2303      	movs	r3, #3
 8005c52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c54:	e008      	b.n	8005c68 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005c56:	6839      	ldr	r1, [r7, #0]
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 fa2f 	bl	80070bc <USBD_CtlError>
          ret = USBD_FAIL;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	75fb      	strb	r3, [r7, #23]
          break;
 8005c62:	e002      	b.n	8005c6a <USBD_CDC_Setup+0x176>
          break;
 8005c64:	bf00      	nop
 8005c66:	e008      	b.n	8005c7a <USBD_CDC_Setup+0x186>
          break;
 8005c68:	bf00      	nop
      }
      break;
 8005c6a:	e006      	b.n	8005c7a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f001 fa24 	bl	80070bc <USBD_CtlError>
      ret = USBD_FAIL;
 8005c74:	2303      	movs	r3, #3
 8005c76:	75fb      	strb	r3, [r7, #23]
      break;
 8005c78:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005c96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e04f      	b.n	8005d46 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005cae:	78fa      	ldrb	r2, [r7, #3]
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	440b      	add	r3, r1
 8005cbc:	3318      	adds	r3, #24
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d029      	beq.n	8005d18 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005cc4:	78fa      	ldrb	r2, [r7, #3]
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	3318      	adds	r3, #24
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	78f9      	ldrb	r1, [r7, #3]
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	1a5b      	subs	r3, r3, r1
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4403      	add	r3, r0
 8005ce4:	3344      	adds	r3, #68	; 0x44
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	fbb2 f1f3 	udiv	r1, r2, r3
 8005cec:	fb03 f301 	mul.w	r3, r3, r1
 8005cf0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d110      	bne.n	8005d18 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005cf6:	78fa      	ldrb	r2, [r7, #3]
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	3318      	adds	r3, #24
 8005d06:	2200      	movs	r2, #0
 8005d08:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005d0a:	78f9      	ldrb	r1, [r7, #3]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	2200      	movs	r2, #0
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f001 ff6a 	bl	8007bea <USBD_LL_Transmit>
 8005d16:	e015      	b.n	8005d44 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00b      	beq.n	8005d44 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005d40:	78fa      	ldrb	r2, [r7, #3]
 8005d42:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	460b      	mov	r3, r1
 8005d58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e015      	b.n	8005d9c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	4619      	mov	r1, r3
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f001 ff7a 	bl	8007c6e <USBD_LL_GetRxDataSize>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d96:	4611      	mov	r1, r2
 8005d98:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005db2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e01b      	b.n	8005df6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d015      	beq.n	8005df4 <USBD_CDC_EP0_RxReady+0x50>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005dce:	2bff      	cmp	r3, #255	; 0xff
 8005dd0:	d010      	beq.n	8005df4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005de0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005de8:	b292      	uxth	r2, r2
 8005dea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	22ff      	movs	r2, #255	; 0xff
 8005df0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2243      	movs	r2, #67	; 0x43
 8005e0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005e0e:	4b03      	ldr	r3, [pc, #12]	; (8005e1c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	20000098 	.word	0x20000098

08005e20 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2243      	movs	r2, #67	; 0x43
 8005e2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005e2e:	4b03      	ldr	r3, [pc, #12]	; (8005e3c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	20000054 	.word	0x20000054

08005e40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2243      	movs	r2, #67	; 0x43
 8005e4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005e4e:	4b03      	ldr	r3, [pc, #12]	; (8005e5c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	200000dc 	.word	0x200000dc

08005e60 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	220a      	movs	r2, #10
 8005e6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e6e:	4b03      	ldr	r3, [pc, #12]	; (8005e7c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	20000010 	.word	0x20000010

08005e80 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e004      	b.n	8005e9e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b087      	sub	sp, #28
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ebc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e008      	b.n	8005eda <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b085      	sub	sp, #20
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ef6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e004      	b.n	8005f0c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f26:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e01a      	b.n	8005f70 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d114      	bne.n	8005f6e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f62:	2181      	movs	r1, #129	; 0x81
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f001 fe40 	bl	8007bea <USBD_LL_Transmit>

    ret = USBD_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e016      	b.n	8005fc4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	7c1b      	ldrb	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d109      	bne.n	8005fb2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fa8:	2101      	movs	r1, #1
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f001 fe3e 	bl	8007c2c <USBD_LL_PrepareReceive>
 8005fb0:	e007      	b.n	8005fc2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fb8:	2340      	movs	r3, #64	; 0x40
 8005fba:	2101      	movs	r1, #1
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f001 fe35 	bl	8007c2c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e01f      	b.n	8006024 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	79fa      	ldrb	r2, [r7, #7]
 8006016:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f001 fcb1 	bl	8007980 <USBD_LL_Init>
 800601e:	4603      	mov	r3, r0
 8006020:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006022:	7dfb      	ldrb	r3, [r7, #23]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006040:	2303      	movs	r3, #3
 8006042:	e016      	b.n	8006072 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00b      	beq.n	8006070 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800605e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006060:	f107 020e 	add.w	r2, r7, #14
 8006064:	4610      	mov	r0, r2
 8006066:	4798      	blx	r3
 8006068:	4602      	mov	r2, r0
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3710      	adds	r7, #16
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f001 fcc8 	bl	8007a18 <USBD_LL_Start>
 8006088:	4603      	mov	r3, r0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	460b      	mov	r3, r1
 80060b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80060b4:	2303      	movs	r3, #3
 80060b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d009      	beq.n	80060d6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	78fa      	ldrb	r2, [r7, #3]
 80060cc:	4611      	mov	r1, r2
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	4798      	blx	r3
 80060d2:	4603      	mov	r3, r0
 80060d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d007      	beq.n	8006106 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	78fa      	ldrb	r2, [r7, #3]
 8006100:	4611      	mov	r1, r2
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	4798      	blx	r3
  }

  return USBD_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f000 ff90 	bl	8007048 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006136:	461a      	mov	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006144:	f003 031f 	and.w	r3, r3, #31
 8006148:	2b02      	cmp	r3, #2
 800614a:	d01a      	beq.n	8006182 <USBD_LL_SetupStage+0x72>
 800614c:	2b02      	cmp	r3, #2
 800614e:	d822      	bhi.n	8006196 <USBD_LL_SetupStage+0x86>
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <USBD_LL_SetupStage+0x4a>
 8006154:	2b01      	cmp	r3, #1
 8006156:	d00a      	beq.n	800616e <USBD_LL_SetupStage+0x5e>
 8006158:	e01d      	b.n	8006196 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006160:	4619      	mov	r1, r3
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 fa62 	bl	800662c <USBD_StdDevReq>
 8006168:	4603      	mov	r3, r0
 800616a:	73fb      	strb	r3, [r7, #15]
      break;
 800616c:	e020      	b.n	80061b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006174:	4619      	mov	r1, r3
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fac6 	bl	8006708 <USBD_StdItfReq>
 800617c:	4603      	mov	r3, r0
 800617e:	73fb      	strb	r3, [r7, #15]
      break;
 8006180:	e016      	b.n	80061b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006188:	4619      	mov	r1, r3
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fb05 	bl	800679a <USBD_StdEPReq>
 8006190:	4603      	mov	r3, r0
 8006192:	73fb      	strb	r3, [r7, #15]
      break;
 8006194:	e00c      	b.n	80061b0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800619c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 fc97 	bl	8007ad8 <USBD_LL_StallEP>
 80061aa:	4603      	mov	r3, r0
 80061ac:	73fb      	strb	r3, [r7, #15]
      break;
 80061ae:	bf00      	nop
  }

  return ret;
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b086      	sub	sp, #24
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	460b      	mov	r3, r1
 80061c4:	607a      	str	r2, [r7, #4]
 80061c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80061c8:	7afb      	ldrb	r3, [r7, #11]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d138      	bne.n	8006240 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80061d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d14a      	bne.n	8006276 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d913      	bls.n	8006214 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	1ad2      	subs	r2, r2, r3
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	4293      	cmp	r3, r2
 8006204:	bf28      	it	cs
 8006206:	4613      	movcs	r3, r2
 8006208:	461a      	mov	r2, r3
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f001 f80f 	bl	8007230 <USBD_CtlContinueRx>
 8006212:	e030      	b.n	8006276 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b03      	cmp	r3, #3
 800621e:	d10b      	bne.n	8006238 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d005      	beq.n	8006238 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f001 f80a 	bl	8007252 <USBD_CtlSendStatus>
 800623e:	e01a      	b.n	8006276 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b03      	cmp	r3, #3
 800624a:	d114      	bne.n	8006276 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00e      	beq.n	8006276 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	7afa      	ldrb	r2, [r7, #11]
 8006262:	4611      	mov	r1, r2
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	4798      	blx	r3
 8006268:	4603      	mov	r3, r0
 800626a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800626c:	7dfb      	ldrb	r3, [r7, #23]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006272:	7dfb      	ldrb	r3, [r7, #23]
 8006274:	e000      	b.n	8006278 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	460b      	mov	r3, r1
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800628e:	7afb      	ldrb	r3, [r7, #11]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d16b      	bne.n	800636c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3314      	adds	r3, #20
 8006298:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d156      	bne.n	8006352 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d914      	bls.n	80062da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	1ad2      	subs	r2, r2, r3
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	461a      	mov	r2, r3
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 ff84 	bl	80071d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062cc:	2300      	movs	r3, #0
 80062ce:	2200      	movs	r2, #0
 80062d0:	2100      	movs	r1, #0
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f001 fcaa 	bl	8007c2c <USBD_LL_PrepareReceive>
 80062d8:	e03b      	b.n	8006352 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d11c      	bne.n	8006320 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d316      	bcc.n	8006320 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d20f      	bcs.n	8006320 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006300:	2200      	movs	r2, #0
 8006302:	2100      	movs	r1, #0
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 ff65 	bl	80071d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006312:	2300      	movs	r3, #0
 8006314:	2200      	movs	r2, #0
 8006316:	2100      	movs	r1, #0
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f001 fc87 	bl	8007c2c <USBD_LL_PrepareReceive>
 800631e:	e018      	b.n	8006352 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b03      	cmp	r3, #3
 800632a:	d10b      	bne.n	8006344 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006344:	2180      	movs	r1, #128	; 0x80
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f001 fbc6 	bl	8007ad8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 ff93 	bl	8007278 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006358:	2b01      	cmp	r3, #1
 800635a:	d122      	bne.n	80063a2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f7ff fe98 	bl	8006092 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800636a:	e01a      	b.n	80063a2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b03      	cmp	r3, #3
 8006376:	d114      	bne.n	80063a2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00e      	beq.n	80063a2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	7afa      	ldrb	r2, [r7, #11]
 800638e:	4611      	mov	r1, r2
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	4798      	blx	r3
 8006394:	4603      	mov	r3, r0
 8006396:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800639e:	7dfb      	ldrb	r3, [r7, #23]
 80063a0:	e000      	b.n	80063a4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80063dc:	2303      	movs	r3, #3
 80063de:	e02f      	b.n	8006440 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00f      	beq.n	800640a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6852      	ldr	r2, [r2, #4]
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	4611      	mov	r1, r2
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800640a:	2340      	movs	r3, #64	; 0x40
 800640c:	2200      	movs	r2, #0
 800640e:	2100      	movs	r1, #0
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f001 fb1c 	bl	8007a4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2240      	movs	r2, #64	; 0x40
 8006422:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006426:	2340      	movs	r3, #64	; 0x40
 8006428:	2200      	movs	r2, #0
 800642a:	2180      	movs	r1, #128	; 0x80
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 fb0e 	bl	8007a4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2240      	movs	r2, #64	; 0x40
 800643c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	460b      	mov	r3, r1
 8006452:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	78fa      	ldrb	r2, [r7, #3]
 8006458:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006476:	b2da      	uxtb	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2204      	movs	r2, #4
 8006482:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	d106      	bne.n	80064b6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e012      	b.n	8006500 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d10b      	bne.n	80064fe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d005      	beq.n	80064fe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	460b      	mov	r3, r1
 8006512:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800651e:	2303      	movs	r3, #3
 8006520:	e014      	b.n	800654c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b03      	cmp	r3, #3
 800652c:	d10d      	bne.n	800654a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d007      	beq.n	800654a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	78fa      	ldrb	r2, [r7, #3]
 8006544:	4611      	mov	r1, r2
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3708      	adds	r7, #8
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800656a:	2303      	movs	r3, #3
 800656c:	e014      	b.n	8006598 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b03      	cmp	r3, #3
 8006578:	d10d      	bne.n	8006596 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	2b00      	cmp	r3, #0
 8006584:	d007      	beq.n	8006596 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	78fa      	ldrb	r2, [r7, #3]
 8006590:	4611      	mov	r1, r2
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b082      	sub	sp, #8
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d009      	beq.n	80065e4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6852      	ldr	r2, [r2, #4]
 80065dc:	b2d2      	uxtb	r2, r2
 80065de:	4611      	mov	r1, r2
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	4798      	blx	r3
  }

  return USBD_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b087      	sub	sp, #28
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	3301      	adds	r3, #1
 8006604:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800660c:	8a3b      	ldrh	r3, [r7, #16]
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	b21a      	sxth	r2, r3
 8006612:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006616:	4313      	orrs	r3, r2
 8006618:	b21b      	sxth	r3, r3
 800661a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800661c:	89fb      	ldrh	r3, [r7, #14]
}
 800661e:	4618      	mov	r0, r3
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
	...

0800662c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006642:	2b40      	cmp	r3, #64	; 0x40
 8006644:	d005      	beq.n	8006652 <USBD_StdDevReq+0x26>
 8006646:	2b40      	cmp	r3, #64	; 0x40
 8006648:	d853      	bhi.n	80066f2 <USBD_StdDevReq+0xc6>
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00b      	beq.n	8006666 <USBD_StdDevReq+0x3a>
 800664e:	2b20      	cmp	r3, #32
 8006650:	d14f      	bne.n	80066f2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	4798      	blx	r3
 8006660:	4603      	mov	r3, r0
 8006662:	73fb      	strb	r3, [r7, #15]
      break;
 8006664:	e04a      	b.n	80066fc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	785b      	ldrb	r3, [r3, #1]
 800666a:	2b09      	cmp	r3, #9
 800666c:	d83b      	bhi.n	80066e6 <USBD_StdDevReq+0xba>
 800666e:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <USBD_StdDevReq+0x48>)
 8006670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006674:	080066c9 	.word	0x080066c9
 8006678:	080066dd 	.word	0x080066dd
 800667c:	080066e7 	.word	0x080066e7
 8006680:	080066d3 	.word	0x080066d3
 8006684:	080066e7 	.word	0x080066e7
 8006688:	080066a7 	.word	0x080066a7
 800668c:	0800669d 	.word	0x0800669d
 8006690:	080066e7 	.word	0x080066e7
 8006694:	080066bf 	.word	0x080066bf
 8006698:	080066b1 	.word	0x080066b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800669c:	6839      	ldr	r1, [r7, #0]
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f9de 	bl	8006a60 <USBD_GetDescriptor>
          break;
 80066a4:	e024      	b.n	80066f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f000 fb43 	bl	8006d34 <USBD_SetAddress>
          break;
 80066ae:	e01f      	b.n	80066f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80066b0:	6839      	ldr	r1, [r7, #0]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 fb82 	bl	8006dbc <USBD_SetConfig>
 80066b8:	4603      	mov	r3, r0
 80066ba:	73fb      	strb	r3, [r7, #15]
          break;
 80066bc:	e018      	b.n	80066f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fc21 	bl	8006f08 <USBD_GetConfig>
          break;
 80066c6:	e013      	b.n	80066f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fc52 	bl	8006f74 <USBD_GetStatus>
          break;
 80066d0:	e00e      	b.n	80066f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fc81 	bl	8006fdc <USBD_SetFeature>
          break;
 80066da:	e009      	b.n	80066f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80066dc:	6839      	ldr	r1, [r7, #0]
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fc90 	bl	8007004 <USBD_ClrFeature>
          break;
 80066e4:	e004      	b.n	80066f0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80066e6:	6839      	ldr	r1, [r7, #0]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fce7 	bl	80070bc <USBD_CtlError>
          break;
 80066ee:	bf00      	nop
      }
      break;
 80066f0:	e004      	b.n	80066fc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80066f2:	6839      	ldr	r1, [r7, #0]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fce1 	bl	80070bc <USBD_CtlError>
      break;
 80066fa:	bf00      	nop
  }

  return ret;
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop

08006708 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800671e:	2b40      	cmp	r3, #64	; 0x40
 8006720:	d005      	beq.n	800672e <USBD_StdItfReq+0x26>
 8006722:	2b40      	cmp	r3, #64	; 0x40
 8006724:	d82f      	bhi.n	8006786 <USBD_StdItfReq+0x7e>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <USBD_StdItfReq+0x26>
 800672a:	2b20      	cmp	r3, #32
 800672c:	d12b      	bne.n	8006786 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006734:	b2db      	uxtb	r3, r3
 8006736:	3b01      	subs	r3, #1
 8006738:	2b02      	cmp	r3, #2
 800673a:	d81d      	bhi.n	8006778 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	889b      	ldrh	r3, [r3, #4]
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b01      	cmp	r3, #1
 8006744:	d813      	bhi.n	800676e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	6839      	ldr	r1, [r7, #0]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	4798      	blx	r3
 8006754:	4603      	mov	r3, r0
 8006756:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	88db      	ldrh	r3, [r3, #6]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d110      	bne.n	8006782 <USBD_StdItfReq+0x7a>
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10d      	bne.n	8006782 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fd73 	bl	8007252 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800676c:	e009      	b.n	8006782 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fca3 	bl	80070bc <USBD_CtlError>
          break;
 8006776:	e004      	b.n	8006782 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fc9e 	bl	80070bc <USBD_CtlError>
          break;
 8006780:	e000      	b.n	8006784 <USBD_StdItfReq+0x7c>
          break;
 8006782:	bf00      	nop
      }
      break;
 8006784:	e004      	b.n	8006790 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fc97 	bl	80070bc <USBD_CtlError>
      break;
 800678e:	bf00      	nop
  }

  return ret;
 8006790:	7bfb      	ldrb	r3, [r7, #15]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b084      	sub	sp, #16
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	889b      	ldrh	r3, [r3, #4]
 80067ac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067b6:	2b40      	cmp	r3, #64	; 0x40
 80067b8:	d007      	beq.n	80067ca <USBD_StdEPReq+0x30>
 80067ba:	2b40      	cmp	r3, #64	; 0x40
 80067bc:	f200 8145 	bhi.w	8006a4a <USBD_StdEPReq+0x2b0>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00c      	beq.n	80067de <USBD_StdEPReq+0x44>
 80067c4:	2b20      	cmp	r3, #32
 80067c6:	f040 8140 	bne.w	8006a4a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	4798      	blx	r3
 80067d8:	4603      	mov	r3, r0
 80067da:	73fb      	strb	r3, [r7, #15]
      break;
 80067dc:	e13a      	b.n	8006a54 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	785b      	ldrb	r3, [r3, #1]
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d007      	beq.n	80067f6 <USBD_StdEPReq+0x5c>
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	f300 8129 	bgt.w	8006a3e <USBD_StdEPReq+0x2a4>
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d07f      	beq.n	80068f0 <USBD_StdEPReq+0x156>
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d03c      	beq.n	800686e <USBD_StdEPReq+0xd4>
 80067f4:	e123      	b.n	8006a3e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d002      	beq.n	8006808 <USBD_StdEPReq+0x6e>
 8006802:	2b03      	cmp	r3, #3
 8006804:	d016      	beq.n	8006834 <USBD_StdEPReq+0x9a>
 8006806:	e02c      	b.n	8006862 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006808:	7bbb      	ldrb	r3, [r7, #14]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00d      	beq.n	800682a <USBD_StdEPReq+0x90>
 800680e:	7bbb      	ldrb	r3, [r7, #14]
 8006810:	2b80      	cmp	r3, #128	; 0x80
 8006812:	d00a      	beq.n	800682a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006814:	7bbb      	ldrb	r3, [r7, #14]
 8006816:	4619      	mov	r1, r3
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 f95d 	bl	8007ad8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800681e:	2180      	movs	r1, #128	; 0x80
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f001 f959 	bl	8007ad8 <USBD_LL_StallEP>
 8006826:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006828:	e020      	b.n	800686c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800682a:	6839      	ldr	r1, [r7, #0]
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fc45 	bl	80070bc <USBD_CtlError>
              break;
 8006832:	e01b      	b.n	800686c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	885b      	ldrh	r3, [r3, #2]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10e      	bne.n	800685a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800683c:	7bbb      	ldrb	r3, [r7, #14]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00b      	beq.n	800685a <USBD_StdEPReq+0xc0>
 8006842:	7bbb      	ldrb	r3, [r7, #14]
 8006844:	2b80      	cmp	r3, #128	; 0x80
 8006846:	d008      	beq.n	800685a <USBD_StdEPReq+0xc0>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	88db      	ldrh	r3, [r3, #6]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d104      	bne.n	800685a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006850:	7bbb      	ldrb	r3, [r7, #14]
 8006852:	4619      	mov	r1, r3
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f001 f93f 	bl	8007ad8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fcf9 	bl	8007252 <USBD_CtlSendStatus>

              break;
 8006860:	e004      	b.n	800686c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fc29 	bl	80070bc <USBD_CtlError>
              break;
 800686a:	bf00      	nop
          }
          break;
 800686c:	e0ec      	b.n	8006a48 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d002      	beq.n	8006880 <USBD_StdEPReq+0xe6>
 800687a:	2b03      	cmp	r3, #3
 800687c:	d016      	beq.n	80068ac <USBD_StdEPReq+0x112>
 800687e:	e030      	b.n	80068e2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006880:	7bbb      	ldrb	r3, [r7, #14]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00d      	beq.n	80068a2 <USBD_StdEPReq+0x108>
 8006886:	7bbb      	ldrb	r3, [r7, #14]
 8006888:	2b80      	cmp	r3, #128	; 0x80
 800688a:	d00a      	beq.n	80068a2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800688c:	7bbb      	ldrb	r3, [r7, #14]
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f001 f921 	bl	8007ad8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006896:	2180      	movs	r1, #128	; 0x80
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 f91d 	bl	8007ad8 <USBD_LL_StallEP>
 800689e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068a0:	e025      	b.n	80068ee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fc09 	bl	80070bc <USBD_CtlError>
              break;
 80068aa:	e020      	b.n	80068ee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	885b      	ldrh	r3, [r3, #2]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d11b      	bne.n	80068ec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80068b4:	7bbb      	ldrb	r3, [r7, #14]
 80068b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d004      	beq.n	80068c8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80068be:	7bbb      	ldrb	r3, [r7, #14]
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f001 f927 	bl	8007b16 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fcc2 	bl	8007252 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	4798      	blx	r3
 80068dc:	4603      	mov	r3, r0
 80068de:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80068e0:	e004      	b.n	80068ec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80068e2:	6839      	ldr	r1, [r7, #0]
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fbe9 	bl	80070bc <USBD_CtlError>
              break;
 80068ea:	e000      	b.n	80068ee <USBD_StdEPReq+0x154>
              break;
 80068ec:	bf00      	nop
          }
          break;
 80068ee:	e0ab      	b.n	8006a48 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d002      	beq.n	8006902 <USBD_StdEPReq+0x168>
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d032      	beq.n	8006966 <USBD_StdEPReq+0x1cc>
 8006900:	e097      	b.n	8006a32 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006902:	7bbb      	ldrb	r3, [r7, #14]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d007      	beq.n	8006918 <USBD_StdEPReq+0x17e>
 8006908:	7bbb      	ldrb	r3, [r7, #14]
 800690a:	2b80      	cmp	r3, #128	; 0x80
 800690c:	d004      	beq.n	8006918 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fbd3 	bl	80070bc <USBD_CtlError>
                break;
 8006916:	e091      	b.n	8006a3c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006918:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800691c:	2b00      	cmp	r3, #0
 800691e:	da0b      	bge.n	8006938 <USBD_StdEPReq+0x19e>
 8006920:	7bbb      	ldrb	r3, [r7, #14]
 8006922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	3310      	adds	r3, #16
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	4413      	add	r3, r2
 8006934:	3304      	adds	r3, #4
 8006936:	e00b      	b.n	8006950 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006938:	7bbb      	ldrb	r3, [r7, #14]
 800693a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800693e:	4613      	mov	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	4413      	add	r3, r2
 800694e:	3304      	adds	r3, #4
 8006950:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2202      	movs	r2, #2
 800695c:	4619      	mov	r1, r3
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fc1d 	bl	800719e <USBD_CtlSendData>
              break;
 8006964:	e06a      	b.n	8006a3c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006966:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800696a:	2b00      	cmp	r3, #0
 800696c:	da11      	bge.n	8006992 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	f003 020f 	and.w	r2, r3, #15
 8006974:	6879      	ldr	r1, [r7, #4]
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	440b      	add	r3, r1
 8006980:	3324      	adds	r3, #36	; 0x24
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d117      	bne.n	80069b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fb96 	bl	80070bc <USBD_CtlError>
                  break;
 8006990:	e054      	b.n	8006a3c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006992:	7bbb      	ldrb	r3, [r7, #14]
 8006994:	f003 020f 	and.w	r2, r3, #15
 8006998:	6879      	ldr	r1, [r7, #4]
 800699a:	4613      	mov	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	440b      	add	r3, r1
 80069a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d104      	bne.n	80069b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fb83 	bl	80070bc <USBD_CtlError>
                  break;
 80069b6:	e041      	b.n	8006a3c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	da0b      	bge.n	80069d8 <USBD_StdEPReq+0x23e>
 80069c0:	7bbb      	ldrb	r3, [r7, #14]
 80069c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069c6:	4613      	mov	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	3310      	adds	r3, #16
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	4413      	add	r3, r2
 80069d4:	3304      	adds	r3, #4
 80069d6:	e00b      	b.n	80069f0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069d8:	7bbb      	ldrb	r3, [r7, #14]
 80069da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069de:	4613      	mov	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4413      	add	r3, r2
 80069ee:	3304      	adds	r3, #4
 80069f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80069f2:	7bbb      	ldrb	r3, [r7, #14]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <USBD_StdEPReq+0x264>
 80069f8:	7bbb      	ldrb	r3, [r7, #14]
 80069fa:	2b80      	cmp	r3, #128	; 0x80
 80069fc:	d103      	bne.n	8006a06 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2200      	movs	r2, #0
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	e00e      	b.n	8006a24 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a06:	7bbb      	ldrb	r3, [r7, #14]
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f001 f8a2 	bl	8007b54 <USBD_LL_IsStallEP>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	e002      	b.n	8006a24 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2200      	movs	r2, #0
 8006a22:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2202      	movs	r2, #2
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fbb7 	bl	800719e <USBD_CtlSendData>
              break;
 8006a30:	e004      	b.n	8006a3c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fb41 	bl	80070bc <USBD_CtlError>
              break;
 8006a3a:	bf00      	nop
          }
          break;
 8006a3c:	e004      	b.n	8006a48 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006a3e:	6839      	ldr	r1, [r7, #0]
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fb3b 	bl	80070bc <USBD_CtlError>
          break;
 8006a46:	bf00      	nop
      }
      break;
 8006a48:	e004      	b.n	8006a54 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fb35 	bl	80070bc <USBD_CtlError>
      break;
 8006a52:	bf00      	nop
  }

  return ret;
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
	...

08006a60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	885b      	ldrh	r3, [r3, #2]
 8006a7a:	0a1b      	lsrs	r3, r3, #8
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	2b06      	cmp	r3, #6
 8006a82:	f200 8128 	bhi.w	8006cd6 <USBD_GetDescriptor+0x276>
 8006a86:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <USBD_GetDescriptor+0x2c>)
 8006a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8c:	08006aa9 	.word	0x08006aa9
 8006a90:	08006ac1 	.word	0x08006ac1
 8006a94:	08006b01 	.word	0x08006b01
 8006a98:	08006cd7 	.word	0x08006cd7
 8006a9c:	08006cd7 	.word	0x08006cd7
 8006aa0:	08006c77 	.word	0x08006c77
 8006aa4:	08006ca3 	.word	0x08006ca3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	7c12      	ldrb	r2, [r2, #16]
 8006ab4:	f107 0108 	add.w	r1, r7, #8
 8006ab8:	4610      	mov	r0, r2
 8006aba:	4798      	blx	r3
 8006abc:	60f8      	str	r0, [r7, #12]
      break;
 8006abe:	e112      	b.n	8006ce6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	7c1b      	ldrb	r3, [r3, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10d      	bne.n	8006ae4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad0:	f107 0208 	add.w	r2, r7, #8
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	4798      	blx	r3
 8006ad8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	3301      	adds	r3, #1
 8006ade:	2202      	movs	r2, #2
 8006ae0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006ae2:	e100      	b.n	8006ce6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	f107 0208 	add.w	r2, r7, #8
 8006af0:	4610      	mov	r0, r2
 8006af2:	4798      	blx	r3
 8006af4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	3301      	adds	r3, #1
 8006afa:	2202      	movs	r2, #2
 8006afc:	701a      	strb	r2, [r3, #0]
      break;
 8006afe:	e0f2      	b.n	8006ce6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	885b      	ldrh	r3, [r3, #2]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b05      	cmp	r3, #5
 8006b08:	f200 80ac 	bhi.w	8006c64 <USBD_GetDescriptor+0x204>
 8006b0c:	a201      	add	r2, pc, #4	; (adr r2, 8006b14 <USBD_GetDescriptor+0xb4>)
 8006b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b12:	bf00      	nop
 8006b14:	08006b2d 	.word	0x08006b2d
 8006b18:	08006b61 	.word	0x08006b61
 8006b1c:	08006b95 	.word	0x08006b95
 8006b20:	08006bc9 	.word	0x08006bc9
 8006b24:	08006bfd 	.word	0x08006bfd
 8006b28:	08006c31 	.word	0x08006c31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00b      	beq.n	8006b50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	7c12      	ldrb	r2, [r2, #16]
 8006b44:	f107 0108 	add.w	r1, r7, #8
 8006b48:	4610      	mov	r0, r2
 8006b4a:	4798      	blx	r3
 8006b4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b4e:	e091      	b.n	8006c74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fab2 	bl	80070bc <USBD_CtlError>
            err++;
 8006b58:	7afb      	ldrb	r3, [r7, #11]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b5e:	e089      	b.n	8006c74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00b      	beq.n	8006b84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	7c12      	ldrb	r2, [r2, #16]
 8006b78:	f107 0108 	add.w	r1, r7, #8
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	4798      	blx	r3
 8006b80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b82:	e077      	b.n	8006c74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fa98 	bl	80070bc <USBD_CtlError>
            err++;
 8006b8c:	7afb      	ldrb	r3, [r7, #11]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	72fb      	strb	r3, [r7, #11]
          break;
 8006b92:	e06f      	b.n	8006c74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00b      	beq.n	8006bb8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	7c12      	ldrb	r2, [r2, #16]
 8006bac:	f107 0108 	add.w	r1, r7, #8
 8006bb0:	4610      	mov	r0, r2
 8006bb2:	4798      	blx	r3
 8006bb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bb6:	e05d      	b.n	8006c74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bb8:	6839      	ldr	r1, [r7, #0]
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fa7e 	bl	80070bc <USBD_CtlError>
            err++;
 8006bc0:	7afb      	ldrb	r3, [r7, #11]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	72fb      	strb	r3, [r7, #11]
          break;
 8006bc6:	e055      	b.n	8006c74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00b      	beq.n	8006bec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	7c12      	ldrb	r2, [r2, #16]
 8006be0:	f107 0108 	add.w	r1, r7, #8
 8006be4:	4610      	mov	r0, r2
 8006be6:	4798      	blx	r3
 8006be8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bea:	e043      	b.n	8006c74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fa64 	bl	80070bc <USBD_CtlError>
            err++;
 8006bf4:	7afb      	ldrb	r3, [r7, #11]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	72fb      	strb	r3, [r7, #11]
          break;
 8006bfa:	e03b      	b.n	8006c74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00b      	beq.n	8006c20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	7c12      	ldrb	r2, [r2, #16]
 8006c14:	f107 0108 	add.w	r1, r7, #8
 8006c18:	4610      	mov	r0, r2
 8006c1a:	4798      	blx	r3
 8006c1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c1e:	e029      	b.n	8006c74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c20:	6839      	ldr	r1, [r7, #0]
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fa4a 	bl	80070bc <USBD_CtlError>
            err++;
 8006c28:	7afb      	ldrb	r3, [r7, #11]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c2e:	e021      	b.n	8006c74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00b      	beq.n	8006c54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	7c12      	ldrb	r2, [r2, #16]
 8006c48:	f107 0108 	add.w	r1, r7, #8
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	4798      	blx	r3
 8006c50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c52:	e00f      	b.n	8006c74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fa30 	bl	80070bc <USBD_CtlError>
            err++;
 8006c5c:	7afb      	ldrb	r3, [r7, #11]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	72fb      	strb	r3, [r7, #11]
          break;
 8006c62:	e007      	b.n	8006c74 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006c64:	6839      	ldr	r1, [r7, #0]
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fa28 	bl	80070bc <USBD_CtlError>
          err++;
 8006c6c:	7afb      	ldrb	r3, [r7, #11]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006c72:	bf00      	nop
      }
      break;
 8006c74:	e037      	b.n	8006ce6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	7c1b      	ldrb	r3, [r3, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d109      	bne.n	8006c92 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c86:	f107 0208 	add.w	r2, r7, #8
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	4798      	blx	r3
 8006c8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c90:	e029      	b.n	8006ce6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fa11 	bl	80070bc <USBD_CtlError>
        err++;
 8006c9a:	7afb      	ldrb	r3, [r7, #11]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	72fb      	strb	r3, [r7, #11]
      break;
 8006ca0:	e021      	b.n	8006ce6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	7c1b      	ldrb	r3, [r3, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10d      	bne.n	8006cc6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb2:	f107 0208 	add.w	r2, r7, #8
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	4798      	blx	r3
 8006cba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	2207      	movs	r2, #7
 8006cc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cc4:	e00f      	b.n	8006ce6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f9f7 	bl	80070bc <USBD_CtlError>
        err++;
 8006cce:	7afb      	ldrb	r3, [r7, #11]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	72fb      	strb	r3, [r7, #11]
      break;
 8006cd4:	e007      	b.n	8006ce6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f9ef 	bl	80070bc <USBD_CtlError>
      err++;
 8006cde:	7afb      	ldrb	r3, [r7, #11]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ce4:	bf00      	nop
  }

  if (err != 0U)
 8006ce6:	7afb      	ldrb	r3, [r7, #11]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d11e      	bne.n	8006d2a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	88db      	ldrh	r3, [r3, #6]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d016      	beq.n	8006d22 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006cf4:	893b      	ldrh	r3, [r7, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00e      	beq.n	8006d18 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	88da      	ldrh	r2, [r3, #6]
 8006cfe:	893b      	ldrh	r3, [r7, #8]
 8006d00:	4293      	cmp	r3, r2
 8006d02:	bf28      	it	cs
 8006d04:	4613      	movcs	r3, r2
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d0a:	893b      	ldrh	r3, [r7, #8]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	68f9      	ldr	r1, [r7, #12]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fa44 	bl	800719e <USBD_CtlSendData>
 8006d16:	e009      	b.n	8006d2c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f9ce 	bl	80070bc <USBD_CtlError>
 8006d20:	e004      	b.n	8006d2c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fa95 	bl	8007252 <USBD_CtlSendStatus>
 8006d28:	e000      	b.n	8006d2c <USBD_GetDescriptor+0x2cc>
    return;
 8006d2a:	bf00      	nop
  }
}
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop

08006d34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	889b      	ldrh	r3, [r3, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d131      	bne.n	8006daa <USBD_SetAddress+0x76>
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	88db      	ldrh	r3, [r3, #6]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d12d      	bne.n	8006daa <USBD_SetAddress+0x76>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	885b      	ldrh	r3, [r3, #2]
 8006d52:	2b7f      	cmp	r3, #127	; 0x7f
 8006d54:	d829      	bhi.n	8006daa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	885b      	ldrh	r3, [r3, #2]
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d104      	bne.n	8006d78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f9a3 	bl	80070bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d76:	e01d      	b.n	8006db4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	7bfa      	ldrb	r2, [r7, #15]
 8006d7c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 ff11 	bl	8007bac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fa61 	bl	8007252 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d004      	beq.n	8006da0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2202      	movs	r2, #2
 8006d9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d9e:	e009      	b.n	8006db4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da8:	e004      	b.n	8006db4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f985 	bl	80070bc <USBD_CtlError>
  }
}
 8006db2:	bf00      	nop
 8006db4:	bf00      	nop
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	885b      	ldrh	r3, [r3, #2]
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	4b4c      	ldr	r3, [pc, #304]	; (8006f04 <USBD_SetConfig+0x148>)
 8006dd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006dd4:	4b4b      	ldr	r3, [pc, #300]	; (8006f04 <USBD_SetConfig+0x148>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d905      	bls.n	8006de8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f96c 	bl	80070bc <USBD_CtlError>
    return USBD_FAIL;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e088      	b.n	8006efa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d002      	beq.n	8006dfa <USBD_SetConfig+0x3e>
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d025      	beq.n	8006e44 <USBD_SetConfig+0x88>
 8006df8:	e071      	b.n	8006ede <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006dfa:	4b42      	ldr	r3, [pc, #264]	; (8006f04 <USBD_SetConfig+0x148>)
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d01c      	beq.n	8006e3c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006e02:	4b40      	ldr	r3, [pc, #256]	; (8006f04 <USBD_SetConfig+0x148>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e0c:	4b3d      	ldr	r3, [pc, #244]	; (8006f04 <USBD_SetConfig+0x148>)
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff f948 	bl	80060a8 <USBD_SetClassConfig>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d004      	beq.n	8006e2c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006e22:	6839      	ldr	r1, [r7, #0]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f949 	bl	80070bc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e2a:	e065      	b.n	8006ef8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 fa10 	bl	8007252 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2203      	movs	r2, #3
 8006e36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e3a:	e05d      	b.n	8006ef8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fa08 	bl	8007252 <USBD_CtlSendStatus>
      break;
 8006e42:	e059      	b.n	8006ef8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006e44:	4b2f      	ldr	r3, [pc, #188]	; (8006f04 <USBD_SetConfig+0x148>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d112      	bne.n	8006e72 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006e54:	4b2b      	ldr	r3, [pc, #172]	; (8006f04 <USBD_SetConfig+0x148>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e5e:	4b29      	ldr	r3, [pc, #164]	; (8006f04 <USBD_SetConfig+0x148>)
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff f93b 	bl	80060e0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f9f1 	bl	8007252 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e70:	e042      	b.n	8006ef8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006e72:	4b24      	ldr	r3, [pc, #144]	; (8006f04 <USBD_SetConfig+0x148>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d02a      	beq.n	8006ed6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7ff f929 	bl	80060e0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006e8e:	4b1d      	ldr	r3, [pc, #116]	; (8006f04 <USBD_SetConfig+0x148>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e98:	4b1a      	ldr	r3, [pc, #104]	; (8006f04 <USBD_SetConfig+0x148>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7ff f902 	bl	80060a8 <USBD_SetClassConfig>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00f      	beq.n	8006ece <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f903 	bl	80070bc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7ff f90e 	bl	80060e0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006ecc:	e014      	b.n	8006ef8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f9bf 	bl	8007252 <USBD_CtlSendStatus>
      break;
 8006ed4:	e010      	b.n	8006ef8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f9bb 	bl	8007252 <USBD_CtlSendStatus>
      break;
 8006edc:	e00c      	b.n	8006ef8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f8eb 	bl	80070bc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ee6:	4b07      	ldr	r3, [pc, #28]	; (8006f04 <USBD_SetConfig+0x148>)
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7ff f8f7 	bl	80060e0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef6:	bf00      	nop
  }

  return ret;
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20000218 	.word	0x20000218

08006f08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	88db      	ldrh	r3, [r3, #6]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d004      	beq.n	8006f24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f8cd 	bl	80070bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f22:	e023      	b.n	8006f6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	dc02      	bgt.n	8006f36 <USBD_GetConfig+0x2e>
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	dc03      	bgt.n	8006f3c <USBD_GetConfig+0x34>
 8006f34:	e015      	b.n	8006f62 <USBD_GetConfig+0x5a>
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d00b      	beq.n	8006f52 <USBD_GetConfig+0x4a>
 8006f3a:	e012      	b.n	8006f62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	3308      	adds	r3, #8
 8006f46:	2201      	movs	r2, #1
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f927 	bl	800719e <USBD_CtlSendData>
        break;
 8006f50:	e00c      	b.n	8006f6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	3304      	adds	r3, #4
 8006f56:	2201      	movs	r2, #1
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f91f 	bl	800719e <USBD_CtlSendData>
        break;
 8006f60:	e004      	b.n	8006f6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f8a9 	bl	80070bc <USBD_CtlError>
        break;
 8006f6a:	bf00      	nop
}
 8006f6c:	bf00      	nop
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	3b01      	subs	r3, #1
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d81e      	bhi.n	8006fca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	88db      	ldrh	r3, [r3, #6]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d004      	beq.n	8006f9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f890 	bl	80070bc <USBD_CtlError>
        break;
 8006f9c:	e01a      	b.n	8006fd4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d005      	beq.n	8006fba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f043 0202 	orr.w	r2, r3, #2
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	330c      	adds	r3, #12
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f8eb 	bl	800719e <USBD_CtlSendData>
      break;
 8006fc8:	e004      	b.n	8006fd4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f875 	bl	80070bc <USBD_CtlError>
      break;
 8006fd2:	bf00      	nop
  }
}
 8006fd4:	bf00      	nop
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	885b      	ldrh	r3, [r3, #2]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d106      	bne.n	8006ffc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f92b 	bl	8007252 <USBD_CtlSendStatus>
  }
}
 8006ffc:	bf00      	nop
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007014:	b2db      	uxtb	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	2b02      	cmp	r3, #2
 800701a:	d80b      	bhi.n	8007034 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	885b      	ldrh	r3, [r3, #2]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d10c      	bne.n	800703e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f910 	bl	8007252 <USBD_CtlSendStatus>
      }
      break;
 8007032:	e004      	b.n	800703e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f840 	bl	80070bc <USBD_CtlError>
      break;
 800703c:	e000      	b.n	8007040 <USBD_ClrFeature+0x3c>
      break;
 800703e:	bf00      	nop
  }
}
 8007040:	bf00      	nop
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	781a      	ldrb	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3301      	adds	r3, #1
 8007062:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	781a      	ldrb	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3301      	adds	r3, #1
 8007070:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f7ff fabb 	bl	80065ee <SWAPBYTE>
 8007078:	4603      	mov	r3, r0
 800707a:	461a      	mov	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	3301      	adds	r3, #1
 8007084:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	3301      	adds	r3, #1
 800708a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f7ff faae 	bl	80065ee <SWAPBYTE>
 8007092:	4603      	mov	r3, r0
 8007094:	461a      	mov	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3301      	adds	r3, #1
 800709e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	3301      	adds	r3, #1
 80070a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f7ff faa1 	bl	80065ee <SWAPBYTE>
 80070ac:	4603      	mov	r3, r0
 80070ae:	461a      	mov	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	80da      	strh	r2, [r3, #6]
}
 80070b4:	bf00      	nop
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80070c6:	2180      	movs	r1, #128	; 0x80
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fd05 	bl	8007ad8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80070ce:	2100      	movs	r1, #0
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fd01 	bl	8007ad8 <USBD_LL_StallEP>
}
 80070d6:	bf00      	nop
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b086      	sub	sp, #24
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	60f8      	str	r0, [r7, #12]
 80070e6:	60b9      	str	r1, [r7, #8]
 80070e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d036      	beq.n	8007162 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80070f8:	6938      	ldr	r0, [r7, #16]
 80070fa:	f000 f836 	bl	800716a <USBD_GetLen>
 80070fe:	4603      	mov	r3, r0
 8007100:	3301      	adds	r3, #1
 8007102:	b29b      	uxth	r3, r3
 8007104:	005b      	lsls	r3, r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	4413      	add	r3, r2
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	7812      	ldrb	r2, [r2, #0]
 8007116:	701a      	strb	r2, [r3, #0]
  idx++;
 8007118:	7dfb      	ldrb	r3, [r7, #23]
 800711a:	3301      	adds	r3, #1
 800711c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800711e:	7dfb      	ldrb	r3, [r7, #23]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	4413      	add	r3, r2
 8007124:	2203      	movs	r2, #3
 8007126:	701a      	strb	r2, [r3, #0]
  idx++;
 8007128:	7dfb      	ldrb	r3, [r7, #23]
 800712a:	3301      	adds	r3, #1
 800712c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800712e:	e013      	b.n	8007158 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007130:	7dfb      	ldrb	r3, [r7, #23]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	4413      	add	r3, r2
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	7812      	ldrb	r2, [r2, #0]
 800713a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	3301      	adds	r3, #1
 8007140:	613b      	str	r3, [r7, #16]
    idx++;
 8007142:	7dfb      	ldrb	r3, [r7, #23]
 8007144:	3301      	adds	r3, #1
 8007146:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007148:	7dfb      	ldrb	r3, [r7, #23]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	4413      	add	r3, r2
 800714e:	2200      	movs	r2, #0
 8007150:	701a      	strb	r2, [r3, #0]
    idx++;
 8007152:	7dfb      	ldrb	r3, [r7, #23]
 8007154:	3301      	adds	r3, #1
 8007156:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1e7      	bne.n	8007130 <USBD_GetString+0x52>
 8007160:	e000      	b.n	8007164 <USBD_GetString+0x86>
    return;
 8007162:	bf00      	nop
  }
}
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800716a:	b480      	push	{r7}
 800716c:	b085      	sub	sp, #20
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800717a:	e005      	b.n	8007188 <USBD_GetLen+0x1e>
  {
    len++;
 800717c:	7bfb      	ldrb	r3, [r7, #15]
 800717e:	3301      	adds	r3, #1
 8007180:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	3301      	adds	r3, #1
 8007186:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1f5      	bne.n	800717c <USBD_GetLen+0x12>
  }

  return len;
 8007190:	7bfb      	ldrb	r3, [r7, #15]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	60f8      	str	r0, [r7, #12]
 80071a6:	60b9      	str	r1, [r7, #8]
 80071a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2202      	movs	r2, #2
 80071ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	2100      	movs	r1, #0
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 fd10 	bl	8007bea <USBD_LL_Transmit>

  return USBD_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	2100      	movs	r1, #0
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 fcff 	bl	8007bea <USBD_LL_Transmit>

  return USBD_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	60f8      	str	r0, [r7, #12]
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2203      	movs	r2, #3
 8007206:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	2100      	movs	r1, #0
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 fd03 	bl	8007c2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	2100      	movs	r1, #0
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 fcf2 	bl	8007c2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2204      	movs	r2, #4
 800725e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007262:	2300      	movs	r3, #0
 8007264:	2200      	movs	r2, #0
 8007266:	2100      	movs	r1, #0
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fcbe 	bl	8007bea <USBD_LL_Transmit>

  return USBD_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2205      	movs	r2, #5
 8007284:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007288:	2300      	movs	r3, #0
 800728a:	2200      	movs	r2, #0
 800728c:	2100      	movs	r1, #0
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fccc 	bl	8007c2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80072a4:	2200      	movs	r2, #0
 80072a6:	4912      	ldr	r1, [pc, #72]	; (80072f0 <MX_USB_DEVICE_Init+0x50>)
 80072a8:	4812      	ldr	r0, [pc, #72]	; (80072f4 <MX_USB_DEVICE_Init+0x54>)
 80072aa:	f7fe fe8f 	bl	8005fcc <USBD_Init>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d001      	beq.n	80072b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80072b4:	f7f9 fcbc 	bl	8000c30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80072b8:	490f      	ldr	r1, [pc, #60]	; (80072f8 <MX_USB_DEVICE_Init+0x58>)
 80072ba:	480e      	ldr	r0, [pc, #56]	; (80072f4 <MX_USB_DEVICE_Init+0x54>)
 80072bc:	f7fe feb6 	bl	800602c <USBD_RegisterClass>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80072c6:	f7f9 fcb3 	bl	8000c30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80072ca:	490c      	ldr	r1, [pc, #48]	; (80072fc <MX_USB_DEVICE_Init+0x5c>)
 80072cc:	4809      	ldr	r0, [pc, #36]	; (80072f4 <MX_USB_DEVICE_Init+0x54>)
 80072ce:	f7fe fdd7 	bl	8005e80 <USBD_CDC_RegisterInterface>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80072d8:	f7f9 fcaa 	bl	8000c30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80072dc:	4805      	ldr	r0, [pc, #20]	; (80072f4 <MX_USB_DEVICE_Init+0x54>)
 80072de:	f7fe fecc 	bl	800607a <USBD_Start>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80072e8:	f7f9 fca2 	bl	8000c30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80072ec:	bf00      	nop
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	20000134 	.word	0x20000134
 80072f4:	20000a3c 	.word	0x20000a3c
 80072f8:	2000001c 	.word	0x2000001c
 80072fc:	20000120 	.word	0x20000120

08007300 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007304:	2200      	movs	r2, #0
 8007306:	4905      	ldr	r1, [pc, #20]	; (800731c <CDC_Init_FS+0x1c>)
 8007308:	4805      	ldr	r0, [pc, #20]	; (8007320 <CDC_Init_FS+0x20>)
 800730a:	f7fe fdce 	bl	8005eaa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800730e:	4905      	ldr	r1, [pc, #20]	; (8007324 <CDC_Init_FS+0x24>)
 8007310:	4803      	ldr	r0, [pc, #12]	; (8007320 <CDC_Init_FS+0x20>)
 8007312:	f7fe fde8 	bl	8005ee6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007316:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007318:	4618      	mov	r0, r3
 800731a:	bd80      	pop	{r7, pc}
 800731c:	2000150c 	.word	0x2000150c
 8007320:	20000a3c 	.word	0x20000a3c
 8007324:	20000d0c 	.word	0x20000d0c

08007328 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007328:	b480      	push	{r7}
 800732a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800732c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800732e:	4618      	mov	r0, r3
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	4603      	mov	r3, r0
 8007340:	6039      	str	r1, [r7, #0]
 8007342:	71fb      	strb	r3, [r7, #7]
 8007344:	4613      	mov	r3, r2
 8007346:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007348:	79fb      	ldrb	r3, [r7, #7]
 800734a:	2b23      	cmp	r3, #35	; 0x23
 800734c:	d84a      	bhi.n	80073e4 <CDC_Control_FS+0xac>
 800734e:	a201      	add	r2, pc, #4	; (adr r2, 8007354 <CDC_Control_FS+0x1c>)
 8007350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007354:	080073e5 	.word	0x080073e5
 8007358:	080073e5 	.word	0x080073e5
 800735c:	080073e5 	.word	0x080073e5
 8007360:	080073e5 	.word	0x080073e5
 8007364:	080073e5 	.word	0x080073e5
 8007368:	080073e5 	.word	0x080073e5
 800736c:	080073e5 	.word	0x080073e5
 8007370:	080073e5 	.word	0x080073e5
 8007374:	080073e5 	.word	0x080073e5
 8007378:	080073e5 	.word	0x080073e5
 800737c:	080073e5 	.word	0x080073e5
 8007380:	080073e5 	.word	0x080073e5
 8007384:	080073e5 	.word	0x080073e5
 8007388:	080073e5 	.word	0x080073e5
 800738c:	080073e5 	.word	0x080073e5
 8007390:	080073e5 	.word	0x080073e5
 8007394:	080073e5 	.word	0x080073e5
 8007398:	080073e5 	.word	0x080073e5
 800739c:	080073e5 	.word	0x080073e5
 80073a0:	080073e5 	.word	0x080073e5
 80073a4:	080073e5 	.word	0x080073e5
 80073a8:	080073e5 	.word	0x080073e5
 80073ac:	080073e5 	.word	0x080073e5
 80073b0:	080073e5 	.word	0x080073e5
 80073b4:	080073e5 	.word	0x080073e5
 80073b8:	080073e5 	.word	0x080073e5
 80073bc:	080073e5 	.word	0x080073e5
 80073c0:	080073e5 	.word	0x080073e5
 80073c4:	080073e5 	.word	0x080073e5
 80073c8:	080073e5 	.word	0x080073e5
 80073cc:	080073e5 	.word	0x080073e5
 80073d0:	080073e5 	.word	0x080073e5
 80073d4:	080073e5 	.word	0x080073e5
 80073d8:	080073e5 	.word	0x080073e5
 80073dc:	080073e5 	.word	0x080073e5
 80073e0:	080073e5 	.word	0x080073e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80073e4:	bf00      	nop
  }

  return (USBD_OK);
 80073e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  memset (RXbuffer, '\0', sizeof(RXbuffer));  // clear the buffer
 80073fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007402:	2100      	movs	r1, #0
 8007404:	480d      	ldr	r0, [pc, #52]	; (800743c <CDC_Receive_FS+0x48>)
 8007406:	f000 fcc1 	bl	8007d8c <memset>
  RXbufferStrLen = (uint8_t)*Len;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	b2da      	uxtb	r2, r3
 8007410:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <CDC_Receive_FS+0x4c>)
 8007412:	701a      	strb	r2, [r3, #0]
  memcpy(RXbuffer, Buf, RXbufferStrLen);  // copy the data to the buffer
 8007414:	4b0a      	ldr	r3, [pc, #40]	; (8007440 <CDC_Receive_FS+0x4c>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	b2db      	uxtb	r3, r3
 800741a:	461a      	mov	r2, r3
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	4807      	ldr	r0, [pc, #28]	; (800743c <CDC_Receive_FS+0x48>)
 8007420:	f000 fca6 	bl	8007d70 <memcpy>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007424:	6879      	ldr	r1, [r7, #4]
 8007426:	4807      	ldr	r0, [pc, #28]	; (8007444 <CDC_Receive_FS+0x50>)
 8007428:	f7fe fd5d 	bl	8005ee6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800742c:	4805      	ldr	r0, [pc, #20]	; (8007444 <CDC_Receive_FS+0x50>)
 800742e:	f7fe fda3 	bl	8005f78 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 8007432:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	200004e0 	.word	0x200004e0
 8007440:	20000208 	.word	0x20000208
 8007444:	20000a3c 	.word	0x20000a3c

08007448 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007458:	4b0d      	ldr	r3, [pc, #52]	; (8007490 <CDC_Transmit_FS+0x48>)
 800745a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800745e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800746a:	2301      	movs	r3, #1
 800746c:	e00b      	b.n	8007486 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800746e:	887b      	ldrh	r3, [r7, #2]
 8007470:	461a      	mov	r2, r3
 8007472:	6879      	ldr	r1, [r7, #4]
 8007474:	4806      	ldr	r0, [pc, #24]	; (8007490 <CDC_Transmit_FS+0x48>)
 8007476:	f7fe fd18 	bl	8005eaa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800747a:	4805      	ldr	r0, [pc, #20]	; (8007490 <CDC_Transmit_FS+0x48>)
 800747c:	f7fe fd4c 	bl	8005f18 <USBD_CDC_TransmitPacket>
 8007480:	4603      	mov	r3, r0
 8007482:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007484:	7bfb      	ldrb	r3, [r7, #15]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	20000a3c 	.word	0x20000a3c

08007494 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	4613      	mov	r3, r2
 80074a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80074a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
	...

080074b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	4603      	mov	r3, r0
 80074c0:	6039      	str	r1, [r7, #0]
 80074c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2212      	movs	r2, #18
 80074c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80074ca:	4b03      	ldr	r3, [pc, #12]	; (80074d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	20000150 	.word	0x20000150

080074dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	4603      	mov	r3, r0
 80074e4:	6039      	str	r1, [r7, #0]
 80074e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2204      	movs	r2, #4
 80074ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80074ee:	4b03      	ldr	r3, [pc, #12]	; (80074fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	20000164 	.word	0x20000164

08007500 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	4603      	mov	r3, r0
 8007508:	6039      	str	r1, [r7, #0]
 800750a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d105      	bne.n	800751e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	4907      	ldr	r1, [pc, #28]	; (8007534 <USBD_FS_ProductStrDescriptor+0x34>)
 8007516:	4808      	ldr	r0, [pc, #32]	; (8007538 <USBD_FS_ProductStrDescriptor+0x38>)
 8007518:	f7ff fde1 	bl	80070de <USBD_GetString>
 800751c:	e004      	b.n	8007528 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	4904      	ldr	r1, [pc, #16]	; (8007534 <USBD_FS_ProductStrDescriptor+0x34>)
 8007522:	4805      	ldr	r0, [pc, #20]	; (8007538 <USBD_FS_ProductStrDescriptor+0x38>)
 8007524:	f7ff fddb 	bl	80070de <USBD_GetString>
  }
  return USBD_StrDesc;
 8007528:	4b02      	ldr	r3, [pc, #8]	; (8007534 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800752a:	4618      	mov	r0, r3
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	20001d0c 	.word	0x20001d0c
 8007538:	08008660 	.word	0x08008660

0800753c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	4603      	mov	r3, r0
 8007544:	6039      	str	r1, [r7, #0]
 8007546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	4904      	ldr	r1, [pc, #16]	; (800755c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800754c:	4804      	ldr	r0, [pc, #16]	; (8007560 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800754e:	f7ff fdc6 	bl	80070de <USBD_GetString>
  return USBD_StrDesc;
 8007552:	4b02      	ldr	r3, [pc, #8]	; (800755c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007554:	4618      	mov	r0, r3
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	20001d0c 	.word	0x20001d0c
 8007560:	08008678 	.word	0x08008678

08007564 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	4603      	mov	r3, r0
 800756c:	6039      	str	r1, [r7, #0]
 800756e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	221a      	movs	r2, #26
 8007574:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007576:	f000 f843 	bl	8007600 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800757a:	4b02      	ldr	r3, [pc, #8]	; (8007584 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20000168 	.word	0x20000168

08007588 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	4603      	mov	r3, r0
 8007590:	6039      	str	r1, [r7, #0]
 8007592:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007594:	79fb      	ldrb	r3, [r7, #7]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d105      	bne.n	80075a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	4907      	ldr	r1, [pc, #28]	; (80075bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800759e:	4808      	ldr	r0, [pc, #32]	; (80075c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075a0:	f7ff fd9d 	bl	80070de <USBD_GetString>
 80075a4:	e004      	b.n	80075b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	4904      	ldr	r1, [pc, #16]	; (80075bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80075aa:	4805      	ldr	r0, [pc, #20]	; (80075c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075ac:	f7ff fd97 	bl	80070de <USBD_GetString>
  }
  return USBD_StrDesc;
 80075b0:	4b02      	ldr	r3, [pc, #8]	; (80075bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	20001d0c 	.word	0x20001d0c
 80075c0:	0800868c 	.word	0x0800868c

080075c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	6039      	str	r1, [r7, #0]
 80075ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075d0:	79fb      	ldrb	r3, [r7, #7]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d105      	bne.n	80075e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	4907      	ldr	r1, [pc, #28]	; (80075f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80075da:	4808      	ldr	r0, [pc, #32]	; (80075fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80075dc:	f7ff fd7f 	bl	80070de <USBD_GetString>
 80075e0:	e004      	b.n	80075ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	4904      	ldr	r1, [pc, #16]	; (80075f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80075e6:	4805      	ldr	r0, [pc, #20]	; (80075fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80075e8:	f7ff fd79 	bl	80070de <USBD_GetString>
  }
  return USBD_StrDesc;
 80075ec:	4b02      	ldr	r3, [pc, #8]	; (80075f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20001d0c 	.word	0x20001d0c
 80075fc:	08008698 	.word	0x08008698

08007600 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007606:	4b0f      	ldr	r3, [pc, #60]	; (8007644 <Get_SerialNum+0x44>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800760c:	4b0e      	ldr	r3, [pc, #56]	; (8007648 <Get_SerialNum+0x48>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007612:	4b0e      	ldr	r3, [pc, #56]	; (800764c <Get_SerialNum+0x4c>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4413      	add	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d009      	beq.n	800763a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007626:	2208      	movs	r2, #8
 8007628:	4909      	ldr	r1, [pc, #36]	; (8007650 <Get_SerialNum+0x50>)
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f000 f814 	bl	8007658 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007630:	2204      	movs	r2, #4
 8007632:	4908      	ldr	r1, [pc, #32]	; (8007654 <Get_SerialNum+0x54>)
 8007634:	68b8      	ldr	r0, [r7, #8]
 8007636:	f000 f80f 	bl	8007658 <IntToUnicode>
  }
}
 800763a:	bf00      	nop
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	1fff7a10 	.word	0x1fff7a10
 8007648:	1fff7a14 	.word	0x1fff7a14
 800764c:	1fff7a18 	.word	0x1fff7a18
 8007650:	2000016a 	.word	0x2000016a
 8007654:	2000017a 	.word	0x2000017a

08007658 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	4613      	mov	r3, r2
 8007664:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007666:	2300      	movs	r3, #0
 8007668:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800766a:	2300      	movs	r3, #0
 800766c:	75fb      	strb	r3, [r7, #23]
 800766e:	e027      	b.n	80076c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	0f1b      	lsrs	r3, r3, #28
 8007674:	2b09      	cmp	r3, #9
 8007676:	d80b      	bhi.n	8007690 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	0f1b      	lsrs	r3, r3, #28
 800767c:	b2da      	uxtb	r2, r3
 800767e:	7dfb      	ldrb	r3, [r7, #23]
 8007680:	005b      	lsls	r3, r3, #1
 8007682:	4619      	mov	r1, r3
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	440b      	add	r3, r1
 8007688:	3230      	adds	r2, #48	; 0x30
 800768a:	b2d2      	uxtb	r2, r2
 800768c:	701a      	strb	r2, [r3, #0]
 800768e:	e00a      	b.n	80076a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	0f1b      	lsrs	r3, r3, #28
 8007694:	b2da      	uxtb	r2, r3
 8007696:	7dfb      	ldrb	r3, [r7, #23]
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	4619      	mov	r1, r3
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	440b      	add	r3, r1
 80076a0:	3237      	adds	r2, #55	; 0x37
 80076a2:	b2d2      	uxtb	r2, r2
 80076a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	011b      	lsls	r3, r3, #4
 80076aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
 80076ae:	005b      	lsls	r3, r3, #1
 80076b0:	3301      	adds	r3, #1
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	4413      	add	r3, r2
 80076b6:	2200      	movs	r2, #0
 80076b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
 80076bc:	3301      	adds	r3, #1
 80076be:	75fb      	strb	r3, [r7, #23]
 80076c0:	7dfa      	ldrb	r2, [r7, #23]
 80076c2:	79fb      	ldrb	r3, [r7, #7]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d3d3      	bcc.n	8007670 <IntToUnicode+0x18>
  }
}
 80076c8:	bf00      	nop
 80076ca:	bf00      	nop
 80076cc:	371c      	adds	r7, #28
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
	...

080076d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08a      	sub	sp, #40	; 0x28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076e0:	f107 0314 	add.w	r3, r7, #20
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	605a      	str	r2, [r3, #4]
 80076ea:	609a      	str	r2, [r3, #8]
 80076ec:	60da      	str	r2, [r3, #12]
 80076ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076f8:	d147      	bne.n	800778a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076fa:	2300      	movs	r3, #0
 80076fc:	613b      	str	r3, [r7, #16]
 80076fe:	4b25      	ldr	r3, [pc, #148]	; (8007794 <HAL_PCD_MspInit+0xbc>)
 8007700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007702:	4a24      	ldr	r2, [pc, #144]	; (8007794 <HAL_PCD_MspInit+0xbc>)
 8007704:	f043 0301 	orr.w	r3, r3, #1
 8007708:	6313      	str	r3, [r2, #48]	; 0x30
 800770a:	4b22      	ldr	r3, [pc, #136]	; (8007794 <HAL_PCD_MspInit+0xbc>)
 800770c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	613b      	str	r3, [r7, #16]
 8007714:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007716:	f44f 7300 	mov.w	r3, #512	; 0x200
 800771a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800771c:	2300      	movs	r3, #0
 800771e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007720:	2300      	movs	r3, #0
 8007722:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007724:	f107 0314 	add.w	r3, r7, #20
 8007728:	4619      	mov	r1, r3
 800772a:	481b      	ldr	r0, [pc, #108]	; (8007798 <HAL_PCD_MspInit+0xc0>)
 800772c:	f7f9 fd7a 	bl	8001224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007730:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007736:	2302      	movs	r3, #2
 8007738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800773a:	2300      	movs	r3, #0
 800773c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800773e:	2300      	movs	r3, #0
 8007740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007742:	230a      	movs	r3, #10
 8007744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007746:	f107 0314 	add.w	r3, r7, #20
 800774a:	4619      	mov	r1, r3
 800774c:	4812      	ldr	r0, [pc, #72]	; (8007798 <HAL_PCD_MspInit+0xc0>)
 800774e:	f7f9 fd69 	bl	8001224 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007752:	4b10      	ldr	r3, [pc, #64]	; (8007794 <HAL_PCD_MspInit+0xbc>)
 8007754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007756:	4a0f      	ldr	r2, [pc, #60]	; (8007794 <HAL_PCD_MspInit+0xbc>)
 8007758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800775c:	6353      	str	r3, [r2, #52]	; 0x34
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	4b0c      	ldr	r3, [pc, #48]	; (8007794 <HAL_PCD_MspInit+0xbc>)
 8007764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007766:	4a0b      	ldr	r2, [pc, #44]	; (8007794 <HAL_PCD_MspInit+0xbc>)
 8007768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800776c:	6453      	str	r3, [r2, #68]	; 0x44
 800776e:	4b09      	ldr	r3, [pc, #36]	; (8007794 <HAL_PCD_MspInit+0xbc>)
 8007770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007776:	60fb      	str	r3, [r7, #12]
 8007778:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800777a:	2200      	movs	r2, #0
 800777c:	2100      	movs	r1, #0
 800777e:	2043      	movs	r0, #67	; 0x43
 8007780:	f7f9 fd19 	bl	80011b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007784:	2043      	movs	r0, #67	; 0x43
 8007786:	f7f9 fd32 	bl	80011ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800778a:	bf00      	nop
 800778c:	3728      	adds	r7, #40	; 0x28
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	40023800 	.word	0x40023800
 8007798:	40020000 	.word	0x40020000

0800779c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80077b0:	4619      	mov	r1, r3
 80077b2:	4610      	mov	r0, r2
 80077b4:	f7fe fcac 	bl	8006110 <USBD_LL_SetupStage>
}
 80077b8:	bf00      	nop
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	460b      	mov	r3, r1
 80077ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80077d2:	78fa      	ldrb	r2, [r7, #3]
 80077d4:	6879      	ldr	r1, [r7, #4]
 80077d6:	4613      	mov	r3, r2
 80077d8:	00db      	lsls	r3, r3, #3
 80077da:	1a9b      	subs	r3, r3, r2
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	440b      	add	r3, r1
 80077e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	78fb      	ldrb	r3, [r7, #3]
 80077e8:	4619      	mov	r1, r3
 80077ea:	f7fe fce6 	bl	80061ba <USBD_LL_DataOutStage>
}
 80077ee:	bf00      	nop
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	460b      	mov	r3, r1
 8007800:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007808:	78fa      	ldrb	r2, [r7, #3]
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	4613      	mov	r3, r2
 800780e:	00db      	lsls	r3, r3, #3
 8007810:	1a9b      	subs	r3, r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	440b      	add	r3, r1
 8007816:	3348      	adds	r3, #72	; 0x48
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	78fb      	ldrb	r3, [r7, #3]
 800781c:	4619      	mov	r1, r3
 800781e:	f7fe fd2f 	bl	8006280 <USBD_LL_DataInStage>
}
 8007822:	bf00      	nop
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007838:	4618      	mov	r0, r3
 800783a:	f7fe fe43 	bl	80064c4 <USBD_LL_SOF>
}
 800783e:	bf00      	nop
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b084      	sub	sp, #16
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800784e:	2301      	movs	r3, #1
 8007850:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d102      	bne.n	8007860 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800785a:	2300      	movs	r3, #0
 800785c:	73fb      	strb	r3, [r7, #15]
 800785e:	e008      	b.n	8007872 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	2b02      	cmp	r3, #2
 8007866:	d102      	bne.n	800786e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007868:	2301      	movs	r3, #1
 800786a:	73fb      	strb	r3, [r7, #15]
 800786c:	e001      	b.n	8007872 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800786e:	f7f9 f9df 	bl	8000c30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007878:	7bfa      	ldrb	r2, [r7, #15]
 800787a:	4611      	mov	r1, r2
 800787c:	4618      	mov	r0, r3
 800787e:	f7fe fde3 	bl	8006448 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007888:	4618      	mov	r0, r3
 800788a:	f7fe fd8f 	bl	80063ac <USBD_LL_Reset>
}
 800788e:	bf00      	nop
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
	...

08007898 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fe fdde 	bl	8006468 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	6812      	ldr	r2, [r2, #0]
 80078ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078be:	f043 0301 	orr.w	r3, r3, #1
 80078c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d005      	beq.n	80078d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078cc:	4b04      	ldr	r3, [pc, #16]	; (80078e0 <HAL_PCD_SuspendCallback+0x48>)
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	4a03      	ldr	r2, [pc, #12]	; (80078e0 <HAL_PCD_SuspendCallback+0x48>)
 80078d2:	f043 0306 	orr.w	r3, r3, #6
 80078d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80078d8:	bf00      	nop
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	e000ed00 	.word	0xe000ed00

080078e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fe fdce 	bl	8006494 <USBD_LL_Resume>
}
 80078f8:	bf00      	nop
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	460b      	mov	r3, r1
 800790a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007912:	78fa      	ldrb	r2, [r7, #3]
 8007914:	4611      	mov	r1, r2
 8007916:	4618      	mov	r0, r3
 8007918:	f7fe fe1c 	bl	8006554 <USBD_LL_IsoOUTIncomplete>
}
 800791c:	bf00      	nop
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007936:	78fa      	ldrb	r2, [r7, #3]
 8007938:	4611      	mov	r1, r2
 800793a:	4618      	mov	r0, r3
 800793c:	f7fe fde4 	bl	8006508 <USBD_LL_IsoINIncomplete>
}
 8007940:	bf00      	nop
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007956:	4618      	mov	r0, r3
 8007958:	f7fe fe22 	bl	80065a0 <USBD_LL_DevConnected>
}
 800795c:	bf00      	nop
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007972:	4618      	mov	r0, r3
 8007974:	f7fe fe1f 	bl	80065b6 <USBD_LL_DevDisconnected>
}
 8007978:	bf00      	nop
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d13c      	bne.n	8007a0a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007990:	4a20      	ldr	r2, [pc, #128]	; (8007a14 <USBD_LL_Init+0x94>)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a1e      	ldr	r2, [pc, #120]	; (8007a14 <USBD_LL_Init+0x94>)
 800799c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079a0:	4b1c      	ldr	r3, [pc, #112]	; (8007a14 <USBD_LL_Init+0x94>)
 80079a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80079a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80079a8:	4b1a      	ldr	r3, [pc, #104]	; (8007a14 <USBD_LL_Init+0x94>)
 80079aa:	2204      	movs	r2, #4
 80079ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80079ae:	4b19      	ldr	r3, [pc, #100]	; (8007a14 <USBD_LL_Init+0x94>)
 80079b0:	2202      	movs	r2, #2
 80079b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80079b4:	4b17      	ldr	r3, [pc, #92]	; (8007a14 <USBD_LL_Init+0x94>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80079ba:	4b16      	ldr	r3, [pc, #88]	; (8007a14 <USBD_LL_Init+0x94>)
 80079bc:	2202      	movs	r2, #2
 80079be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80079c0:	4b14      	ldr	r3, [pc, #80]	; (8007a14 <USBD_LL_Init+0x94>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80079c6:	4b13      	ldr	r3, [pc, #76]	; (8007a14 <USBD_LL_Init+0x94>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80079cc:	4b11      	ldr	r3, [pc, #68]	; (8007a14 <USBD_LL_Init+0x94>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80079d2:	4b10      	ldr	r3, [pc, #64]	; (8007a14 <USBD_LL_Init+0x94>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80079d8:	4b0e      	ldr	r3, [pc, #56]	; (8007a14 <USBD_LL_Init+0x94>)
 80079da:	2200      	movs	r2, #0
 80079dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80079de:	480d      	ldr	r0, [pc, #52]	; (8007a14 <USBD_LL_Init+0x94>)
 80079e0:	f7fa fbec 	bl	80021bc <HAL_PCD_Init>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80079ea:	f7f9 f921 	bl	8000c30 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80079ee:	2180      	movs	r1, #128	; 0x80
 80079f0:	4808      	ldr	r0, [pc, #32]	; (8007a14 <USBD_LL_Init+0x94>)
 80079f2:	f7fb fd4a 	bl	800348a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80079f6:	2240      	movs	r2, #64	; 0x40
 80079f8:	2100      	movs	r1, #0
 80079fa:	4806      	ldr	r0, [pc, #24]	; (8007a14 <USBD_LL_Init+0x94>)
 80079fc:	f7fb fcfe 	bl	80033fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a00:	2280      	movs	r2, #128	; 0x80
 8007a02:	2101      	movs	r1, #1
 8007a04:	4803      	ldr	r0, [pc, #12]	; (8007a14 <USBD_LL_Init+0x94>)
 8007a06:	f7fb fcf9 	bl	80033fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	20001f0c 	.word	0x20001f0c

08007a18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a20:	2300      	movs	r3, #0
 8007a22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fa fce1 	bl	80023f6 <HAL_PCD_Start>
 8007a34:	4603      	mov	r3, r0
 8007a36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 f942 	bl	8007cc4 <USBD_Get_USB_Status>
 8007a40:	4603      	mov	r3, r0
 8007a42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	4608      	mov	r0, r1
 8007a58:	4611      	mov	r1, r2
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	70fb      	strb	r3, [r7, #3]
 8007a60:	460b      	mov	r3, r1
 8007a62:	70bb      	strb	r3, [r7, #2]
 8007a64:	4613      	mov	r3, r2
 8007a66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007a76:	78bb      	ldrb	r3, [r7, #2]
 8007a78:	883a      	ldrh	r2, [r7, #0]
 8007a7a:	78f9      	ldrb	r1, [r7, #3]
 8007a7c:	f7fb f8c5 	bl	8002c0a <HAL_PCD_EP_Open>
 8007a80:	4603      	mov	r3, r0
 8007a82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 f91c 	bl	8007cc4 <USBD_Get_USB_Status>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b084      	sub	sp, #16
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ab4:	78fa      	ldrb	r2, [r7, #3]
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fb f90e 	bl	8002cda <HAL_PCD_EP_Close>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 f8fd 	bl	8007cc4 <USBD_Get_USB_Status>
 8007aca:	4603      	mov	r3, r0
 8007acc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007af2:	78fa      	ldrb	r2, [r7, #3]
 8007af4:	4611      	mov	r1, r2
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fb f9e6 	bl	8002ec8 <HAL_PCD_EP_SetStall>
 8007afc:	4603      	mov	r3, r0
 8007afe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 f8de 	bl	8007cc4 <USBD_Get_USB_Status>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b084      	sub	sp, #16
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b30:	78fa      	ldrb	r2, [r7, #3]
 8007b32:	4611      	mov	r1, r2
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fb fa2b 	bl	8002f90 <HAL_PCD_EP_ClrStall>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 f8bf 	bl	8007cc4 <USBD_Get_USB_Status>
 8007b46:	4603      	mov	r3, r0
 8007b48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007b68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	da0b      	bge.n	8007b88 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007b70:	78fb      	ldrb	r3, [r7, #3]
 8007b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b76:	68f9      	ldr	r1, [r7, #12]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	00db      	lsls	r3, r3, #3
 8007b7c:	1a9b      	subs	r3, r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	440b      	add	r3, r1
 8007b82:	333e      	adds	r3, #62	; 0x3e
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	e00b      	b.n	8007ba0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007b88:	78fb      	ldrb	r3, [r7, #3]
 8007b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b8e:	68f9      	ldr	r1, [r7, #12]
 8007b90:	4613      	mov	r3, r2
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	1a9b      	subs	r3, r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	440b      	add	r3, r1
 8007b9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bc6:	78fa      	ldrb	r2, [r7, #3]
 8007bc8:	4611      	mov	r1, r2
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fa fff8 	bl	8002bc0 <HAL_PCD_SetAddress>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 f874 	bl	8007cc4 <USBD_Get_USB_Status>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b086      	sub	sp, #24
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	603b      	str	r3, [r7, #0]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c08:	7af9      	ldrb	r1, [r7, #11]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	f7fb f911 	bl	8002e34 <HAL_PCD_EP_Transmit>
 8007c12:	4603      	mov	r3, r0
 8007c14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 f853 	bl	8007cc4 <USBD_Get_USB_Status>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c22:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3718      	adds	r7, #24
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	607a      	str	r2, [r7, #4]
 8007c36:	603b      	str	r3, [r7, #0]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c40:	2300      	movs	r3, #0
 8007c42:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c4a:	7af9      	ldrb	r1, [r7, #11]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	f7fb f88d 	bl	8002d6e <HAL_PCD_EP_Receive>
 8007c54:	4603      	mov	r3, r0
 8007c56:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 f832 	bl	8007cc4 <USBD_Get_USB_Status>
 8007c60:	4603      	mov	r3, r0
 8007c62:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c64:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b082      	sub	sp, #8
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	460b      	mov	r3, r1
 8007c78:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c80:	78fa      	ldrb	r2, [r7, #3]
 8007c82:	4611      	mov	r1, r2
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fb f8bd 	bl	8002e04 <HAL_PCD_EP_GetRxCount>
 8007c8a:	4603      	mov	r3, r0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007c9c:	4b03      	ldr	r3, [pc, #12]	; (8007cac <USBD_static_malloc+0x18>)
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	2000021c 	.word	0x2000021c

08007cb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]

}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007cd2:	79fb      	ldrb	r3, [r7, #7]
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	d817      	bhi.n	8007d08 <USBD_Get_USB_Status+0x44>
 8007cd8:	a201      	add	r2, pc, #4	; (adr r2, 8007ce0 <USBD_Get_USB_Status+0x1c>)
 8007cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cde:	bf00      	nop
 8007ce0:	08007cf1 	.word	0x08007cf1
 8007ce4:	08007cf7 	.word	0x08007cf7
 8007ce8:	08007cfd 	.word	0x08007cfd
 8007cec:	08007d03 	.word	0x08007d03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf4:	e00b      	b.n	8007d0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	73fb      	strb	r3, [r7, #15]
    break;
 8007cfa:	e008      	b.n	8007d0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8007d00:	e005      	b.n	8007d0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d02:	2303      	movs	r3, #3
 8007d04:	73fb      	strb	r3, [r7, #15]
    break;
 8007d06:	e002      	b.n	8007d0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d0c:	bf00      	nop
  }
  return usb_status;
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3714      	adds	r7, #20
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <__errno>:
 8007d1c:	4b01      	ldr	r3, [pc, #4]	; (8007d24 <__errno+0x8>)
 8007d1e:	6818      	ldr	r0, [r3, #0]
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	20000184 	.word	0x20000184

08007d28 <__libc_init_array>:
 8007d28:	b570      	push	{r4, r5, r6, lr}
 8007d2a:	4d0d      	ldr	r5, [pc, #52]	; (8007d60 <__libc_init_array+0x38>)
 8007d2c:	4c0d      	ldr	r4, [pc, #52]	; (8007d64 <__libc_init_array+0x3c>)
 8007d2e:	1b64      	subs	r4, r4, r5
 8007d30:	10a4      	asrs	r4, r4, #2
 8007d32:	2600      	movs	r6, #0
 8007d34:	42a6      	cmp	r6, r4
 8007d36:	d109      	bne.n	8007d4c <__libc_init_array+0x24>
 8007d38:	4d0b      	ldr	r5, [pc, #44]	; (8007d68 <__libc_init_array+0x40>)
 8007d3a:	4c0c      	ldr	r4, [pc, #48]	; (8007d6c <__libc_init_array+0x44>)
 8007d3c:	f000 fc62 	bl	8008604 <_init>
 8007d40:	1b64      	subs	r4, r4, r5
 8007d42:	10a4      	asrs	r4, r4, #2
 8007d44:	2600      	movs	r6, #0
 8007d46:	42a6      	cmp	r6, r4
 8007d48:	d105      	bne.n	8007d56 <__libc_init_array+0x2e>
 8007d4a:	bd70      	pop	{r4, r5, r6, pc}
 8007d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d50:	4798      	blx	r3
 8007d52:	3601      	adds	r6, #1
 8007d54:	e7ee      	b.n	8007d34 <__libc_init_array+0xc>
 8007d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d5a:	4798      	blx	r3
 8007d5c:	3601      	adds	r6, #1
 8007d5e:	e7f2      	b.n	8007d46 <__libc_init_array+0x1e>
 8007d60:	080088fc 	.word	0x080088fc
 8007d64:	080088fc 	.word	0x080088fc
 8007d68:	080088fc 	.word	0x080088fc
 8007d6c:	08008900 	.word	0x08008900

08007d70 <memcpy>:
 8007d70:	440a      	add	r2, r1
 8007d72:	4291      	cmp	r1, r2
 8007d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d78:	d100      	bne.n	8007d7c <memcpy+0xc>
 8007d7a:	4770      	bx	lr
 8007d7c:	b510      	push	{r4, lr}
 8007d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d86:	4291      	cmp	r1, r2
 8007d88:	d1f9      	bne.n	8007d7e <memcpy+0xe>
 8007d8a:	bd10      	pop	{r4, pc}

08007d8c <memset>:
 8007d8c:	4402      	add	r2, r0
 8007d8e:	4603      	mov	r3, r0
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d100      	bne.n	8007d96 <memset+0xa>
 8007d94:	4770      	bx	lr
 8007d96:	f803 1b01 	strb.w	r1, [r3], #1
 8007d9a:	e7f9      	b.n	8007d90 <memset+0x4>

08007d9c <sniprintf>:
 8007d9c:	b40c      	push	{r2, r3}
 8007d9e:	b530      	push	{r4, r5, lr}
 8007da0:	4b17      	ldr	r3, [pc, #92]	; (8007e00 <sniprintf+0x64>)
 8007da2:	1e0c      	subs	r4, r1, #0
 8007da4:	681d      	ldr	r5, [r3, #0]
 8007da6:	b09d      	sub	sp, #116	; 0x74
 8007da8:	da08      	bge.n	8007dbc <sniprintf+0x20>
 8007daa:	238b      	movs	r3, #139	; 0x8b
 8007dac:	602b      	str	r3, [r5, #0]
 8007dae:	f04f 30ff 	mov.w	r0, #4294967295
 8007db2:	b01d      	add	sp, #116	; 0x74
 8007db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007db8:	b002      	add	sp, #8
 8007dba:	4770      	bx	lr
 8007dbc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007dc0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007dc4:	bf14      	ite	ne
 8007dc6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007dca:	4623      	moveq	r3, r4
 8007dcc:	9304      	str	r3, [sp, #16]
 8007dce:	9307      	str	r3, [sp, #28]
 8007dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007dd4:	9002      	str	r0, [sp, #8]
 8007dd6:	9006      	str	r0, [sp, #24]
 8007dd8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ddc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007dde:	ab21      	add	r3, sp, #132	; 0x84
 8007de0:	a902      	add	r1, sp, #8
 8007de2:	4628      	mov	r0, r5
 8007de4:	9301      	str	r3, [sp, #4]
 8007de6:	f000 f869 	bl	8007ebc <_svfiprintf_r>
 8007dea:	1c43      	adds	r3, r0, #1
 8007dec:	bfbc      	itt	lt
 8007dee:	238b      	movlt	r3, #139	; 0x8b
 8007df0:	602b      	strlt	r3, [r5, #0]
 8007df2:	2c00      	cmp	r4, #0
 8007df4:	d0dd      	beq.n	8007db2 <sniprintf+0x16>
 8007df6:	9b02      	ldr	r3, [sp, #8]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	701a      	strb	r2, [r3, #0]
 8007dfc:	e7d9      	b.n	8007db2 <sniprintf+0x16>
 8007dfe:	bf00      	nop
 8007e00:	20000184 	.word	0x20000184

08007e04 <__ssputs_r>:
 8007e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e08:	688e      	ldr	r6, [r1, #8]
 8007e0a:	429e      	cmp	r6, r3
 8007e0c:	4682      	mov	sl, r0
 8007e0e:	460c      	mov	r4, r1
 8007e10:	4690      	mov	r8, r2
 8007e12:	461f      	mov	r7, r3
 8007e14:	d838      	bhi.n	8007e88 <__ssputs_r+0x84>
 8007e16:	898a      	ldrh	r2, [r1, #12]
 8007e18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e1c:	d032      	beq.n	8007e84 <__ssputs_r+0x80>
 8007e1e:	6825      	ldr	r5, [r4, #0]
 8007e20:	6909      	ldr	r1, [r1, #16]
 8007e22:	eba5 0901 	sub.w	r9, r5, r1
 8007e26:	6965      	ldr	r5, [r4, #20]
 8007e28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e30:	3301      	adds	r3, #1
 8007e32:	444b      	add	r3, r9
 8007e34:	106d      	asrs	r5, r5, #1
 8007e36:	429d      	cmp	r5, r3
 8007e38:	bf38      	it	cc
 8007e3a:	461d      	movcc	r5, r3
 8007e3c:	0553      	lsls	r3, r2, #21
 8007e3e:	d531      	bpl.n	8007ea4 <__ssputs_r+0xa0>
 8007e40:	4629      	mov	r1, r5
 8007e42:	f000 fb39 	bl	80084b8 <_malloc_r>
 8007e46:	4606      	mov	r6, r0
 8007e48:	b950      	cbnz	r0, 8007e60 <__ssputs_r+0x5c>
 8007e4a:	230c      	movs	r3, #12
 8007e4c:	f8ca 3000 	str.w	r3, [sl]
 8007e50:	89a3      	ldrh	r3, [r4, #12]
 8007e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e56:	81a3      	strh	r3, [r4, #12]
 8007e58:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e60:	6921      	ldr	r1, [r4, #16]
 8007e62:	464a      	mov	r2, r9
 8007e64:	f7ff ff84 	bl	8007d70 <memcpy>
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e72:	81a3      	strh	r3, [r4, #12]
 8007e74:	6126      	str	r6, [r4, #16]
 8007e76:	6165      	str	r5, [r4, #20]
 8007e78:	444e      	add	r6, r9
 8007e7a:	eba5 0509 	sub.w	r5, r5, r9
 8007e7e:	6026      	str	r6, [r4, #0]
 8007e80:	60a5      	str	r5, [r4, #8]
 8007e82:	463e      	mov	r6, r7
 8007e84:	42be      	cmp	r6, r7
 8007e86:	d900      	bls.n	8007e8a <__ssputs_r+0x86>
 8007e88:	463e      	mov	r6, r7
 8007e8a:	4632      	mov	r2, r6
 8007e8c:	6820      	ldr	r0, [r4, #0]
 8007e8e:	4641      	mov	r1, r8
 8007e90:	f000 faa8 	bl	80083e4 <memmove>
 8007e94:	68a3      	ldr	r3, [r4, #8]
 8007e96:	6822      	ldr	r2, [r4, #0]
 8007e98:	1b9b      	subs	r3, r3, r6
 8007e9a:	4432      	add	r2, r6
 8007e9c:	60a3      	str	r3, [r4, #8]
 8007e9e:	6022      	str	r2, [r4, #0]
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	e7db      	b.n	8007e5c <__ssputs_r+0x58>
 8007ea4:	462a      	mov	r2, r5
 8007ea6:	f000 fb61 	bl	800856c <_realloc_r>
 8007eaa:	4606      	mov	r6, r0
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d1e1      	bne.n	8007e74 <__ssputs_r+0x70>
 8007eb0:	6921      	ldr	r1, [r4, #16]
 8007eb2:	4650      	mov	r0, sl
 8007eb4:	f000 fab0 	bl	8008418 <_free_r>
 8007eb8:	e7c7      	b.n	8007e4a <__ssputs_r+0x46>
	...

08007ebc <_svfiprintf_r>:
 8007ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec0:	4698      	mov	r8, r3
 8007ec2:	898b      	ldrh	r3, [r1, #12]
 8007ec4:	061b      	lsls	r3, r3, #24
 8007ec6:	b09d      	sub	sp, #116	; 0x74
 8007ec8:	4607      	mov	r7, r0
 8007eca:	460d      	mov	r5, r1
 8007ecc:	4614      	mov	r4, r2
 8007ece:	d50e      	bpl.n	8007eee <_svfiprintf_r+0x32>
 8007ed0:	690b      	ldr	r3, [r1, #16]
 8007ed2:	b963      	cbnz	r3, 8007eee <_svfiprintf_r+0x32>
 8007ed4:	2140      	movs	r1, #64	; 0x40
 8007ed6:	f000 faef 	bl	80084b8 <_malloc_r>
 8007eda:	6028      	str	r0, [r5, #0]
 8007edc:	6128      	str	r0, [r5, #16]
 8007ede:	b920      	cbnz	r0, 8007eea <_svfiprintf_r+0x2e>
 8007ee0:	230c      	movs	r3, #12
 8007ee2:	603b      	str	r3, [r7, #0]
 8007ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee8:	e0d1      	b.n	800808e <_svfiprintf_r+0x1d2>
 8007eea:	2340      	movs	r3, #64	; 0x40
 8007eec:	616b      	str	r3, [r5, #20]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ef2:	2320      	movs	r3, #32
 8007ef4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ef8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007efc:	2330      	movs	r3, #48	; 0x30
 8007efe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80080a8 <_svfiprintf_r+0x1ec>
 8007f02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f06:	f04f 0901 	mov.w	r9, #1
 8007f0a:	4623      	mov	r3, r4
 8007f0c:	469a      	mov	sl, r3
 8007f0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f12:	b10a      	cbz	r2, 8007f18 <_svfiprintf_r+0x5c>
 8007f14:	2a25      	cmp	r2, #37	; 0x25
 8007f16:	d1f9      	bne.n	8007f0c <_svfiprintf_r+0x50>
 8007f18:	ebba 0b04 	subs.w	fp, sl, r4
 8007f1c:	d00b      	beq.n	8007f36 <_svfiprintf_r+0x7a>
 8007f1e:	465b      	mov	r3, fp
 8007f20:	4622      	mov	r2, r4
 8007f22:	4629      	mov	r1, r5
 8007f24:	4638      	mov	r0, r7
 8007f26:	f7ff ff6d 	bl	8007e04 <__ssputs_r>
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	f000 80aa 	beq.w	8008084 <_svfiprintf_r+0x1c8>
 8007f30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f32:	445a      	add	r2, fp
 8007f34:	9209      	str	r2, [sp, #36]	; 0x24
 8007f36:	f89a 3000 	ldrb.w	r3, [sl]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 80a2 	beq.w	8008084 <_svfiprintf_r+0x1c8>
 8007f40:	2300      	movs	r3, #0
 8007f42:	f04f 32ff 	mov.w	r2, #4294967295
 8007f46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f4a:	f10a 0a01 	add.w	sl, sl, #1
 8007f4e:	9304      	str	r3, [sp, #16]
 8007f50:	9307      	str	r3, [sp, #28]
 8007f52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f56:	931a      	str	r3, [sp, #104]	; 0x68
 8007f58:	4654      	mov	r4, sl
 8007f5a:	2205      	movs	r2, #5
 8007f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f60:	4851      	ldr	r0, [pc, #324]	; (80080a8 <_svfiprintf_r+0x1ec>)
 8007f62:	f7f8 f935 	bl	80001d0 <memchr>
 8007f66:	9a04      	ldr	r2, [sp, #16]
 8007f68:	b9d8      	cbnz	r0, 8007fa2 <_svfiprintf_r+0xe6>
 8007f6a:	06d0      	lsls	r0, r2, #27
 8007f6c:	bf44      	itt	mi
 8007f6e:	2320      	movmi	r3, #32
 8007f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f74:	0711      	lsls	r1, r2, #28
 8007f76:	bf44      	itt	mi
 8007f78:	232b      	movmi	r3, #43	; 0x2b
 8007f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8007f82:	2b2a      	cmp	r3, #42	; 0x2a
 8007f84:	d015      	beq.n	8007fb2 <_svfiprintf_r+0xf6>
 8007f86:	9a07      	ldr	r2, [sp, #28]
 8007f88:	4654      	mov	r4, sl
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	f04f 0c0a 	mov.w	ip, #10
 8007f90:	4621      	mov	r1, r4
 8007f92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f96:	3b30      	subs	r3, #48	; 0x30
 8007f98:	2b09      	cmp	r3, #9
 8007f9a:	d94e      	bls.n	800803a <_svfiprintf_r+0x17e>
 8007f9c:	b1b0      	cbz	r0, 8007fcc <_svfiprintf_r+0x110>
 8007f9e:	9207      	str	r2, [sp, #28]
 8007fa0:	e014      	b.n	8007fcc <_svfiprintf_r+0x110>
 8007fa2:	eba0 0308 	sub.w	r3, r0, r8
 8007fa6:	fa09 f303 	lsl.w	r3, r9, r3
 8007faa:	4313      	orrs	r3, r2
 8007fac:	9304      	str	r3, [sp, #16]
 8007fae:	46a2      	mov	sl, r4
 8007fb0:	e7d2      	b.n	8007f58 <_svfiprintf_r+0x9c>
 8007fb2:	9b03      	ldr	r3, [sp, #12]
 8007fb4:	1d19      	adds	r1, r3, #4
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	9103      	str	r1, [sp, #12]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	bfbb      	ittet	lt
 8007fbe:	425b      	neglt	r3, r3
 8007fc0:	f042 0202 	orrlt.w	r2, r2, #2
 8007fc4:	9307      	strge	r3, [sp, #28]
 8007fc6:	9307      	strlt	r3, [sp, #28]
 8007fc8:	bfb8      	it	lt
 8007fca:	9204      	strlt	r2, [sp, #16]
 8007fcc:	7823      	ldrb	r3, [r4, #0]
 8007fce:	2b2e      	cmp	r3, #46	; 0x2e
 8007fd0:	d10c      	bne.n	8007fec <_svfiprintf_r+0x130>
 8007fd2:	7863      	ldrb	r3, [r4, #1]
 8007fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8007fd6:	d135      	bne.n	8008044 <_svfiprintf_r+0x188>
 8007fd8:	9b03      	ldr	r3, [sp, #12]
 8007fda:	1d1a      	adds	r2, r3, #4
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	9203      	str	r2, [sp, #12]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	bfb8      	it	lt
 8007fe4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fe8:	3402      	adds	r4, #2
 8007fea:	9305      	str	r3, [sp, #20]
 8007fec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80080b8 <_svfiprintf_r+0x1fc>
 8007ff0:	7821      	ldrb	r1, [r4, #0]
 8007ff2:	2203      	movs	r2, #3
 8007ff4:	4650      	mov	r0, sl
 8007ff6:	f7f8 f8eb 	bl	80001d0 <memchr>
 8007ffa:	b140      	cbz	r0, 800800e <_svfiprintf_r+0x152>
 8007ffc:	2340      	movs	r3, #64	; 0x40
 8007ffe:	eba0 000a 	sub.w	r0, r0, sl
 8008002:	fa03 f000 	lsl.w	r0, r3, r0
 8008006:	9b04      	ldr	r3, [sp, #16]
 8008008:	4303      	orrs	r3, r0
 800800a:	3401      	adds	r4, #1
 800800c:	9304      	str	r3, [sp, #16]
 800800e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008012:	4826      	ldr	r0, [pc, #152]	; (80080ac <_svfiprintf_r+0x1f0>)
 8008014:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008018:	2206      	movs	r2, #6
 800801a:	f7f8 f8d9 	bl	80001d0 <memchr>
 800801e:	2800      	cmp	r0, #0
 8008020:	d038      	beq.n	8008094 <_svfiprintf_r+0x1d8>
 8008022:	4b23      	ldr	r3, [pc, #140]	; (80080b0 <_svfiprintf_r+0x1f4>)
 8008024:	bb1b      	cbnz	r3, 800806e <_svfiprintf_r+0x1b2>
 8008026:	9b03      	ldr	r3, [sp, #12]
 8008028:	3307      	adds	r3, #7
 800802a:	f023 0307 	bic.w	r3, r3, #7
 800802e:	3308      	adds	r3, #8
 8008030:	9303      	str	r3, [sp, #12]
 8008032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008034:	4433      	add	r3, r6
 8008036:	9309      	str	r3, [sp, #36]	; 0x24
 8008038:	e767      	b.n	8007f0a <_svfiprintf_r+0x4e>
 800803a:	fb0c 3202 	mla	r2, ip, r2, r3
 800803e:	460c      	mov	r4, r1
 8008040:	2001      	movs	r0, #1
 8008042:	e7a5      	b.n	8007f90 <_svfiprintf_r+0xd4>
 8008044:	2300      	movs	r3, #0
 8008046:	3401      	adds	r4, #1
 8008048:	9305      	str	r3, [sp, #20]
 800804a:	4619      	mov	r1, r3
 800804c:	f04f 0c0a 	mov.w	ip, #10
 8008050:	4620      	mov	r0, r4
 8008052:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008056:	3a30      	subs	r2, #48	; 0x30
 8008058:	2a09      	cmp	r2, #9
 800805a:	d903      	bls.n	8008064 <_svfiprintf_r+0x1a8>
 800805c:	2b00      	cmp	r3, #0
 800805e:	d0c5      	beq.n	8007fec <_svfiprintf_r+0x130>
 8008060:	9105      	str	r1, [sp, #20]
 8008062:	e7c3      	b.n	8007fec <_svfiprintf_r+0x130>
 8008064:	fb0c 2101 	mla	r1, ip, r1, r2
 8008068:	4604      	mov	r4, r0
 800806a:	2301      	movs	r3, #1
 800806c:	e7f0      	b.n	8008050 <_svfiprintf_r+0x194>
 800806e:	ab03      	add	r3, sp, #12
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	462a      	mov	r2, r5
 8008074:	4b0f      	ldr	r3, [pc, #60]	; (80080b4 <_svfiprintf_r+0x1f8>)
 8008076:	a904      	add	r1, sp, #16
 8008078:	4638      	mov	r0, r7
 800807a:	f3af 8000 	nop.w
 800807e:	1c42      	adds	r2, r0, #1
 8008080:	4606      	mov	r6, r0
 8008082:	d1d6      	bne.n	8008032 <_svfiprintf_r+0x176>
 8008084:	89ab      	ldrh	r3, [r5, #12]
 8008086:	065b      	lsls	r3, r3, #25
 8008088:	f53f af2c 	bmi.w	8007ee4 <_svfiprintf_r+0x28>
 800808c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800808e:	b01d      	add	sp, #116	; 0x74
 8008090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008094:	ab03      	add	r3, sp, #12
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	462a      	mov	r2, r5
 800809a:	4b06      	ldr	r3, [pc, #24]	; (80080b4 <_svfiprintf_r+0x1f8>)
 800809c:	a904      	add	r1, sp, #16
 800809e:	4638      	mov	r0, r7
 80080a0:	f000 f87a 	bl	8008198 <_printf_i>
 80080a4:	e7eb      	b.n	800807e <_svfiprintf_r+0x1c2>
 80080a6:	bf00      	nop
 80080a8:	080088c0 	.word	0x080088c0
 80080ac:	080088ca 	.word	0x080088ca
 80080b0:	00000000 	.word	0x00000000
 80080b4:	08007e05 	.word	0x08007e05
 80080b8:	080088c6 	.word	0x080088c6

080080bc <_printf_common>:
 80080bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c0:	4616      	mov	r6, r2
 80080c2:	4699      	mov	r9, r3
 80080c4:	688a      	ldr	r2, [r1, #8]
 80080c6:	690b      	ldr	r3, [r1, #16]
 80080c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080cc:	4293      	cmp	r3, r2
 80080ce:	bfb8      	it	lt
 80080d0:	4613      	movlt	r3, r2
 80080d2:	6033      	str	r3, [r6, #0]
 80080d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080d8:	4607      	mov	r7, r0
 80080da:	460c      	mov	r4, r1
 80080dc:	b10a      	cbz	r2, 80080e2 <_printf_common+0x26>
 80080de:	3301      	adds	r3, #1
 80080e0:	6033      	str	r3, [r6, #0]
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	0699      	lsls	r1, r3, #26
 80080e6:	bf42      	ittt	mi
 80080e8:	6833      	ldrmi	r3, [r6, #0]
 80080ea:	3302      	addmi	r3, #2
 80080ec:	6033      	strmi	r3, [r6, #0]
 80080ee:	6825      	ldr	r5, [r4, #0]
 80080f0:	f015 0506 	ands.w	r5, r5, #6
 80080f4:	d106      	bne.n	8008104 <_printf_common+0x48>
 80080f6:	f104 0a19 	add.w	sl, r4, #25
 80080fa:	68e3      	ldr	r3, [r4, #12]
 80080fc:	6832      	ldr	r2, [r6, #0]
 80080fe:	1a9b      	subs	r3, r3, r2
 8008100:	42ab      	cmp	r3, r5
 8008102:	dc26      	bgt.n	8008152 <_printf_common+0x96>
 8008104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008108:	1e13      	subs	r3, r2, #0
 800810a:	6822      	ldr	r2, [r4, #0]
 800810c:	bf18      	it	ne
 800810e:	2301      	movne	r3, #1
 8008110:	0692      	lsls	r2, r2, #26
 8008112:	d42b      	bmi.n	800816c <_printf_common+0xb0>
 8008114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008118:	4649      	mov	r1, r9
 800811a:	4638      	mov	r0, r7
 800811c:	47c0      	blx	r8
 800811e:	3001      	adds	r0, #1
 8008120:	d01e      	beq.n	8008160 <_printf_common+0xa4>
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	68e5      	ldr	r5, [r4, #12]
 8008126:	6832      	ldr	r2, [r6, #0]
 8008128:	f003 0306 	and.w	r3, r3, #6
 800812c:	2b04      	cmp	r3, #4
 800812e:	bf08      	it	eq
 8008130:	1aad      	subeq	r5, r5, r2
 8008132:	68a3      	ldr	r3, [r4, #8]
 8008134:	6922      	ldr	r2, [r4, #16]
 8008136:	bf0c      	ite	eq
 8008138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800813c:	2500      	movne	r5, #0
 800813e:	4293      	cmp	r3, r2
 8008140:	bfc4      	itt	gt
 8008142:	1a9b      	subgt	r3, r3, r2
 8008144:	18ed      	addgt	r5, r5, r3
 8008146:	2600      	movs	r6, #0
 8008148:	341a      	adds	r4, #26
 800814a:	42b5      	cmp	r5, r6
 800814c:	d11a      	bne.n	8008184 <_printf_common+0xc8>
 800814e:	2000      	movs	r0, #0
 8008150:	e008      	b.n	8008164 <_printf_common+0xa8>
 8008152:	2301      	movs	r3, #1
 8008154:	4652      	mov	r2, sl
 8008156:	4649      	mov	r1, r9
 8008158:	4638      	mov	r0, r7
 800815a:	47c0      	blx	r8
 800815c:	3001      	adds	r0, #1
 800815e:	d103      	bne.n	8008168 <_printf_common+0xac>
 8008160:	f04f 30ff 	mov.w	r0, #4294967295
 8008164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008168:	3501      	adds	r5, #1
 800816a:	e7c6      	b.n	80080fa <_printf_common+0x3e>
 800816c:	18e1      	adds	r1, r4, r3
 800816e:	1c5a      	adds	r2, r3, #1
 8008170:	2030      	movs	r0, #48	; 0x30
 8008172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008176:	4422      	add	r2, r4
 8008178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800817c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008180:	3302      	adds	r3, #2
 8008182:	e7c7      	b.n	8008114 <_printf_common+0x58>
 8008184:	2301      	movs	r3, #1
 8008186:	4622      	mov	r2, r4
 8008188:	4649      	mov	r1, r9
 800818a:	4638      	mov	r0, r7
 800818c:	47c0      	blx	r8
 800818e:	3001      	adds	r0, #1
 8008190:	d0e6      	beq.n	8008160 <_printf_common+0xa4>
 8008192:	3601      	adds	r6, #1
 8008194:	e7d9      	b.n	800814a <_printf_common+0x8e>
	...

08008198 <_printf_i>:
 8008198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800819c:	460c      	mov	r4, r1
 800819e:	4691      	mov	r9, r2
 80081a0:	7e27      	ldrb	r7, [r4, #24]
 80081a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081a4:	2f78      	cmp	r7, #120	; 0x78
 80081a6:	4680      	mov	r8, r0
 80081a8:	469a      	mov	sl, r3
 80081aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081ae:	d807      	bhi.n	80081c0 <_printf_i+0x28>
 80081b0:	2f62      	cmp	r7, #98	; 0x62
 80081b2:	d80a      	bhi.n	80081ca <_printf_i+0x32>
 80081b4:	2f00      	cmp	r7, #0
 80081b6:	f000 80d8 	beq.w	800836a <_printf_i+0x1d2>
 80081ba:	2f58      	cmp	r7, #88	; 0x58
 80081bc:	f000 80a3 	beq.w	8008306 <_printf_i+0x16e>
 80081c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80081c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081c8:	e03a      	b.n	8008240 <_printf_i+0xa8>
 80081ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081ce:	2b15      	cmp	r3, #21
 80081d0:	d8f6      	bhi.n	80081c0 <_printf_i+0x28>
 80081d2:	a001      	add	r0, pc, #4	; (adr r0, 80081d8 <_printf_i+0x40>)
 80081d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80081d8:	08008231 	.word	0x08008231
 80081dc:	08008245 	.word	0x08008245
 80081e0:	080081c1 	.word	0x080081c1
 80081e4:	080081c1 	.word	0x080081c1
 80081e8:	080081c1 	.word	0x080081c1
 80081ec:	080081c1 	.word	0x080081c1
 80081f0:	08008245 	.word	0x08008245
 80081f4:	080081c1 	.word	0x080081c1
 80081f8:	080081c1 	.word	0x080081c1
 80081fc:	080081c1 	.word	0x080081c1
 8008200:	080081c1 	.word	0x080081c1
 8008204:	08008351 	.word	0x08008351
 8008208:	08008275 	.word	0x08008275
 800820c:	08008333 	.word	0x08008333
 8008210:	080081c1 	.word	0x080081c1
 8008214:	080081c1 	.word	0x080081c1
 8008218:	08008373 	.word	0x08008373
 800821c:	080081c1 	.word	0x080081c1
 8008220:	08008275 	.word	0x08008275
 8008224:	080081c1 	.word	0x080081c1
 8008228:	080081c1 	.word	0x080081c1
 800822c:	0800833b 	.word	0x0800833b
 8008230:	680b      	ldr	r3, [r1, #0]
 8008232:	1d1a      	adds	r2, r3, #4
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	600a      	str	r2, [r1, #0]
 8008238:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800823c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008240:	2301      	movs	r3, #1
 8008242:	e0a3      	b.n	800838c <_printf_i+0x1f4>
 8008244:	6825      	ldr	r5, [r4, #0]
 8008246:	6808      	ldr	r0, [r1, #0]
 8008248:	062e      	lsls	r6, r5, #24
 800824a:	f100 0304 	add.w	r3, r0, #4
 800824e:	d50a      	bpl.n	8008266 <_printf_i+0xce>
 8008250:	6805      	ldr	r5, [r0, #0]
 8008252:	600b      	str	r3, [r1, #0]
 8008254:	2d00      	cmp	r5, #0
 8008256:	da03      	bge.n	8008260 <_printf_i+0xc8>
 8008258:	232d      	movs	r3, #45	; 0x2d
 800825a:	426d      	negs	r5, r5
 800825c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008260:	485e      	ldr	r0, [pc, #376]	; (80083dc <_printf_i+0x244>)
 8008262:	230a      	movs	r3, #10
 8008264:	e019      	b.n	800829a <_printf_i+0x102>
 8008266:	f015 0f40 	tst.w	r5, #64	; 0x40
 800826a:	6805      	ldr	r5, [r0, #0]
 800826c:	600b      	str	r3, [r1, #0]
 800826e:	bf18      	it	ne
 8008270:	b22d      	sxthne	r5, r5
 8008272:	e7ef      	b.n	8008254 <_printf_i+0xbc>
 8008274:	680b      	ldr	r3, [r1, #0]
 8008276:	6825      	ldr	r5, [r4, #0]
 8008278:	1d18      	adds	r0, r3, #4
 800827a:	6008      	str	r0, [r1, #0]
 800827c:	0628      	lsls	r0, r5, #24
 800827e:	d501      	bpl.n	8008284 <_printf_i+0xec>
 8008280:	681d      	ldr	r5, [r3, #0]
 8008282:	e002      	b.n	800828a <_printf_i+0xf2>
 8008284:	0669      	lsls	r1, r5, #25
 8008286:	d5fb      	bpl.n	8008280 <_printf_i+0xe8>
 8008288:	881d      	ldrh	r5, [r3, #0]
 800828a:	4854      	ldr	r0, [pc, #336]	; (80083dc <_printf_i+0x244>)
 800828c:	2f6f      	cmp	r7, #111	; 0x6f
 800828e:	bf0c      	ite	eq
 8008290:	2308      	moveq	r3, #8
 8008292:	230a      	movne	r3, #10
 8008294:	2100      	movs	r1, #0
 8008296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800829a:	6866      	ldr	r6, [r4, #4]
 800829c:	60a6      	str	r6, [r4, #8]
 800829e:	2e00      	cmp	r6, #0
 80082a0:	bfa2      	ittt	ge
 80082a2:	6821      	ldrge	r1, [r4, #0]
 80082a4:	f021 0104 	bicge.w	r1, r1, #4
 80082a8:	6021      	strge	r1, [r4, #0]
 80082aa:	b90d      	cbnz	r5, 80082b0 <_printf_i+0x118>
 80082ac:	2e00      	cmp	r6, #0
 80082ae:	d04d      	beq.n	800834c <_printf_i+0x1b4>
 80082b0:	4616      	mov	r6, r2
 80082b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80082b6:	fb03 5711 	mls	r7, r3, r1, r5
 80082ba:	5dc7      	ldrb	r7, [r0, r7]
 80082bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80082c0:	462f      	mov	r7, r5
 80082c2:	42bb      	cmp	r3, r7
 80082c4:	460d      	mov	r5, r1
 80082c6:	d9f4      	bls.n	80082b2 <_printf_i+0x11a>
 80082c8:	2b08      	cmp	r3, #8
 80082ca:	d10b      	bne.n	80082e4 <_printf_i+0x14c>
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	07df      	lsls	r7, r3, #31
 80082d0:	d508      	bpl.n	80082e4 <_printf_i+0x14c>
 80082d2:	6923      	ldr	r3, [r4, #16]
 80082d4:	6861      	ldr	r1, [r4, #4]
 80082d6:	4299      	cmp	r1, r3
 80082d8:	bfde      	ittt	le
 80082da:	2330      	movle	r3, #48	; 0x30
 80082dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80082e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80082e4:	1b92      	subs	r2, r2, r6
 80082e6:	6122      	str	r2, [r4, #16]
 80082e8:	f8cd a000 	str.w	sl, [sp]
 80082ec:	464b      	mov	r3, r9
 80082ee:	aa03      	add	r2, sp, #12
 80082f0:	4621      	mov	r1, r4
 80082f2:	4640      	mov	r0, r8
 80082f4:	f7ff fee2 	bl	80080bc <_printf_common>
 80082f8:	3001      	adds	r0, #1
 80082fa:	d14c      	bne.n	8008396 <_printf_i+0x1fe>
 80082fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008300:	b004      	add	sp, #16
 8008302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008306:	4835      	ldr	r0, [pc, #212]	; (80083dc <_printf_i+0x244>)
 8008308:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	680e      	ldr	r6, [r1, #0]
 8008310:	061f      	lsls	r7, r3, #24
 8008312:	f856 5b04 	ldr.w	r5, [r6], #4
 8008316:	600e      	str	r6, [r1, #0]
 8008318:	d514      	bpl.n	8008344 <_printf_i+0x1ac>
 800831a:	07d9      	lsls	r1, r3, #31
 800831c:	bf44      	itt	mi
 800831e:	f043 0320 	orrmi.w	r3, r3, #32
 8008322:	6023      	strmi	r3, [r4, #0]
 8008324:	b91d      	cbnz	r5, 800832e <_printf_i+0x196>
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	f023 0320 	bic.w	r3, r3, #32
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	2310      	movs	r3, #16
 8008330:	e7b0      	b.n	8008294 <_printf_i+0xfc>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	f043 0320 	orr.w	r3, r3, #32
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	2378      	movs	r3, #120	; 0x78
 800833c:	4828      	ldr	r0, [pc, #160]	; (80083e0 <_printf_i+0x248>)
 800833e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008342:	e7e3      	b.n	800830c <_printf_i+0x174>
 8008344:	065e      	lsls	r6, r3, #25
 8008346:	bf48      	it	mi
 8008348:	b2ad      	uxthmi	r5, r5
 800834a:	e7e6      	b.n	800831a <_printf_i+0x182>
 800834c:	4616      	mov	r6, r2
 800834e:	e7bb      	b.n	80082c8 <_printf_i+0x130>
 8008350:	680b      	ldr	r3, [r1, #0]
 8008352:	6826      	ldr	r6, [r4, #0]
 8008354:	6960      	ldr	r0, [r4, #20]
 8008356:	1d1d      	adds	r5, r3, #4
 8008358:	600d      	str	r5, [r1, #0]
 800835a:	0635      	lsls	r5, r6, #24
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	d501      	bpl.n	8008364 <_printf_i+0x1cc>
 8008360:	6018      	str	r0, [r3, #0]
 8008362:	e002      	b.n	800836a <_printf_i+0x1d2>
 8008364:	0671      	lsls	r1, r6, #25
 8008366:	d5fb      	bpl.n	8008360 <_printf_i+0x1c8>
 8008368:	8018      	strh	r0, [r3, #0]
 800836a:	2300      	movs	r3, #0
 800836c:	6123      	str	r3, [r4, #16]
 800836e:	4616      	mov	r6, r2
 8008370:	e7ba      	b.n	80082e8 <_printf_i+0x150>
 8008372:	680b      	ldr	r3, [r1, #0]
 8008374:	1d1a      	adds	r2, r3, #4
 8008376:	600a      	str	r2, [r1, #0]
 8008378:	681e      	ldr	r6, [r3, #0]
 800837a:	6862      	ldr	r2, [r4, #4]
 800837c:	2100      	movs	r1, #0
 800837e:	4630      	mov	r0, r6
 8008380:	f7f7 ff26 	bl	80001d0 <memchr>
 8008384:	b108      	cbz	r0, 800838a <_printf_i+0x1f2>
 8008386:	1b80      	subs	r0, r0, r6
 8008388:	6060      	str	r0, [r4, #4]
 800838a:	6863      	ldr	r3, [r4, #4]
 800838c:	6123      	str	r3, [r4, #16]
 800838e:	2300      	movs	r3, #0
 8008390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008394:	e7a8      	b.n	80082e8 <_printf_i+0x150>
 8008396:	6923      	ldr	r3, [r4, #16]
 8008398:	4632      	mov	r2, r6
 800839a:	4649      	mov	r1, r9
 800839c:	4640      	mov	r0, r8
 800839e:	47d0      	blx	sl
 80083a0:	3001      	adds	r0, #1
 80083a2:	d0ab      	beq.n	80082fc <_printf_i+0x164>
 80083a4:	6823      	ldr	r3, [r4, #0]
 80083a6:	079b      	lsls	r3, r3, #30
 80083a8:	d413      	bmi.n	80083d2 <_printf_i+0x23a>
 80083aa:	68e0      	ldr	r0, [r4, #12]
 80083ac:	9b03      	ldr	r3, [sp, #12]
 80083ae:	4298      	cmp	r0, r3
 80083b0:	bfb8      	it	lt
 80083b2:	4618      	movlt	r0, r3
 80083b4:	e7a4      	b.n	8008300 <_printf_i+0x168>
 80083b6:	2301      	movs	r3, #1
 80083b8:	4632      	mov	r2, r6
 80083ba:	4649      	mov	r1, r9
 80083bc:	4640      	mov	r0, r8
 80083be:	47d0      	blx	sl
 80083c0:	3001      	adds	r0, #1
 80083c2:	d09b      	beq.n	80082fc <_printf_i+0x164>
 80083c4:	3501      	adds	r5, #1
 80083c6:	68e3      	ldr	r3, [r4, #12]
 80083c8:	9903      	ldr	r1, [sp, #12]
 80083ca:	1a5b      	subs	r3, r3, r1
 80083cc:	42ab      	cmp	r3, r5
 80083ce:	dcf2      	bgt.n	80083b6 <_printf_i+0x21e>
 80083d0:	e7eb      	b.n	80083aa <_printf_i+0x212>
 80083d2:	2500      	movs	r5, #0
 80083d4:	f104 0619 	add.w	r6, r4, #25
 80083d8:	e7f5      	b.n	80083c6 <_printf_i+0x22e>
 80083da:	bf00      	nop
 80083dc:	080088d1 	.word	0x080088d1
 80083e0:	080088e2 	.word	0x080088e2

080083e4 <memmove>:
 80083e4:	4288      	cmp	r0, r1
 80083e6:	b510      	push	{r4, lr}
 80083e8:	eb01 0402 	add.w	r4, r1, r2
 80083ec:	d902      	bls.n	80083f4 <memmove+0x10>
 80083ee:	4284      	cmp	r4, r0
 80083f0:	4623      	mov	r3, r4
 80083f2:	d807      	bhi.n	8008404 <memmove+0x20>
 80083f4:	1e43      	subs	r3, r0, #1
 80083f6:	42a1      	cmp	r1, r4
 80083f8:	d008      	beq.n	800840c <memmove+0x28>
 80083fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008402:	e7f8      	b.n	80083f6 <memmove+0x12>
 8008404:	4402      	add	r2, r0
 8008406:	4601      	mov	r1, r0
 8008408:	428a      	cmp	r2, r1
 800840a:	d100      	bne.n	800840e <memmove+0x2a>
 800840c:	bd10      	pop	{r4, pc}
 800840e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008412:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008416:	e7f7      	b.n	8008408 <memmove+0x24>

08008418 <_free_r>:
 8008418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800841a:	2900      	cmp	r1, #0
 800841c:	d048      	beq.n	80084b0 <_free_r+0x98>
 800841e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008422:	9001      	str	r0, [sp, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	f1a1 0404 	sub.w	r4, r1, #4
 800842a:	bfb8      	it	lt
 800842c:	18e4      	addlt	r4, r4, r3
 800842e:	f000 f8d3 	bl	80085d8 <__malloc_lock>
 8008432:	4a20      	ldr	r2, [pc, #128]	; (80084b4 <_free_r+0x9c>)
 8008434:	9801      	ldr	r0, [sp, #4]
 8008436:	6813      	ldr	r3, [r2, #0]
 8008438:	4615      	mov	r5, r2
 800843a:	b933      	cbnz	r3, 800844a <_free_r+0x32>
 800843c:	6063      	str	r3, [r4, #4]
 800843e:	6014      	str	r4, [r2, #0]
 8008440:	b003      	add	sp, #12
 8008442:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008446:	f000 b8cd 	b.w	80085e4 <__malloc_unlock>
 800844a:	42a3      	cmp	r3, r4
 800844c:	d90b      	bls.n	8008466 <_free_r+0x4e>
 800844e:	6821      	ldr	r1, [r4, #0]
 8008450:	1862      	adds	r2, r4, r1
 8008452:	4293      	cmp	r3, r2
 8008454:	bf04      	itt	eq
 8008456:	681a      	ldreq	r2, [r3, #0]
 8008458:	685b      	ldreq	r3, [r3, #4]
 800845a:	6063      	str	r3, [r4, #4]
 800845c:	bf04      	itt	eq
 800845e:	1852      	addeq	r2, r2, r1
 8008460:	6022      	streq	r2, [r4, #0]
 8008462:	602c      	str	r4, [r5, #0]
 8008464:	e7ec      	b.n	8008440 <_free_r+0x28>
 8008466:	461a      	mov	r2, r3
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	b10b      	cbz	r3, 8008470 <_free_r+0x58>
 800846c:	42a3      	cmp	r3, r4
 800846e:	d9fa      	bls.n	8008466 <_free_r+0x4e>
 8008470:	6811      	ldr	r1, [r2, #0]
 8008472:	1855      	adds	r5, r2, r1
 8008474:	42a5      	cmp	r5, r4
 8008476:	d10b      	bne.n	8008490 <_free_r+0x78>
 8008478:	6824      	ldr	r4, [r4, #0]
 800847a:	4421      	add	r1, r4
 800847c:	1854      	adds	r4, r2, r1
 800847e:	42a3      	cmp	r3, r4
 8008480:	6011      	str	r1, [r2, #0]
 8008482:	d1dd      	bne.n	8008440 <_free_r+0x28>
 8008484:	681c      	ldr	r4, [r3, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	6053      	str	r3, [r2, #4]
 800848a:	4421      	add	r1, r4
 800848c:	6011      	str	r1, [r2, #0]
 800848e:	e7d7      	b.n	8008440 <_free_r+0x28>
 8008490:	d902      	bls.n	8008498 <_free_r+0x80>
 8008492:	230c      	movs	r3, #12
 8008494:	6003      	str	r3, [r0, #0]
 8008496:	e7d3      	b.n	8008440 <_free_r+0x28>
 8008498:	6825      	ldr	r5, [r4, #0]
 800849a:	1961      	adds	r1, r4, r5
 800849c:	428b      	cmp	r3, r1
 800849e:	bf04      	itt	eq
 80084a0:	6819      	ldreq	r1, [r3, #0]
 80084a2:	685b      	ldreq	r3, [r3, #4]
 80084a4:	6063      	str	r3, [r4, #4]
 80084a6:	bf04      	itt	eq
 80084a8:	1949      	addeq	r1, r1, r5
 80084aa:	6021      	streq	r1, [r4, #0]
 80084ac:	6054      	str	r4, [r2, #4]
 80084ae:	e7c7      	b.n	8008440 <_free_r+0x28>
 80084b0:	b003      	add	sp, #12
 80084b2:	bd30      	pop	{r4, r5, pc}
 80084b4:	2000043c 	.word	0x2000043c

080084b8 <_malloc_r>:
 80084b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ba:	1ccd      	adds	r5, r1, #3
 80084bc:	f025 0503 	bic.w	r5, r5, #3
 80084c0:	3508      	adds	r5, #8
 80084c2:	2d0c      	cmp	r5, #12
 80084c4:	bf38      	it	cc
 80084c6:	250c      	movcc	r5, #12
 80084c8:	2d00      	cmp	r5, #0
 80084ca:	4606      	mov	r6, r0
 80084cc:	db01      	blt.n	80084d2 <_malloc_r+0x1a>
 80084ce:	42a9      	cmp	r1, r5
 80084d0:	d903      	bls.n	80084da <_malloc_r+0x22>
 80084d2:	230c      	movs	r3, #12
 80084d4:	6033      	str	r3, [r6, #0]
 80084d6:	2000      	movs	r0, #0
 80084d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084da:	f000 f87d 	bl	80085d8 <__malloc_lock>
 80084de:	4921      	ldr	r1, [pc, #132]	; (8008564 <_malloc_r+0xac>)
 80084e0:	680a      	ldr	r2, [r1, #0]
 80084e2:	4614      	mov	r4, r2
 80084e4:	b99c      	cbnz	r4, 800850e <_malloc_r+0x56>
 80084e6:	4f20      	ldr	r7, [pc, #128]	; (8008568 <_malloc_r+0xb0>)
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	b923      	cbnz	r3, 80084f6 <_malloc_r+0x3e>
 80084ec:	4621      	mov	r1, r4
 80084ee:	4630      	mov	r0, r6
 80084f0:	f000 f862 	bl	80085b8 <_sbrk_r>
 80084f4:	6038      	str	r0, [r7, #0]
 80084f6:	4629      	mov	r1, r5
 80084f8:	4630      	mov	r0, r6
 80084fa:	f000 f85d 	bl	80085b8 <_sbrk_r>
 80084fe:	1c43      	adds	r3, r0, #1
 8008500:	d123      	bne.n	800854a <_malloc_r+0x92>
 8008502:	230c      	movs	r3, #12
 8008504:	6033      	str	r3, [r6, #0]
 8008506:	4630      	mov	r0, r6
 8008508:	f000 f86c 	bl	80085e4 <__malloc_unlock>
 800850c:	e7e3      	b.n	80084d6 <_malloc_r+0x1e>
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	1b5b      	subs	r3, r3, r5
 8008512:	d417      	bmi.n	8008544 <_malloc_r+0x8c>
 8008514:	2b0b      	cmp	r3, #11
 8008516:	d903      	bls.n	8008520 <_malloc_r+0x68>
 8008518:	6023      	str	r3, [r4, #0]
 800851a:	441c      	add	r4, r3
 800851c:	6025      	str	r5, [r4, #0]
 800851e:	e004      	b.n	800852a <_malloc_r+0x72>
 8008520:	6863      	ldr	r3, [r4, #4]
 8008522:	42a2      	cmp	r2, r4
 8008524:	bf0c      	ite	eq
 8008526:	600b      	streq	r3, [r1, #0]
 8008528:	6053      	strne	r3, [r2, #4]
 800852a:	4630      	mov	r0, r6
 800852c:	f000 f85a 	bl	80085e4 <__malloc_unlock>
 8008530:	f104 000b 	add.w	r0, r4, #11
 8008534:	1d23      	adds	r3, r4, #4
 8008536:	f020 0007 	bic.w	r0, r0, #7
 800853a:	1ac2      	subs	r2, r0, r3
 800853c:	d0cc      	beq.n	80084d8 <_malloc_r+0x20>
 800853e:	1a1b      	subs	r3, r3, r0
 8008540:	50a3      	str	r3, [r4, r2]
 8008542:	e7c9      	b.n	80084d8 <_malloc_r+0x20>
 8008544:	4622      	mov	r2, r4
 8008546:	6864      	ldr	r4, [r4, #4]
 8008548:	e7cc      	b.n	80084e4 <_malloc_r+0x2c>
 800854a:	1cc4      	adds	r4, r0, #3
 800854c:	f024 0403 	bic.w	r4, r4, #3
 8008550:	42a0      	cmp	r0, r4
 8008552:	d0e3      	beq.n	800851c <_malloc_r+0x64>
 8008554:	1a21      	subs	r1, r4, r0
 8008556:	4630      	mov	r0, r6
 8008558:	f000 f82e 	bl	80085b8 <_sbrk_r>
 800855c:	3001      	adds	r0, #1
 800855e:	d1dd      	bne.n	800851c <_malloc_r+0x64>
 8008560:	e7cf      	b.n	8008502 <_malloc_r+0x4a>
 8008562:	bf00      	nop
 8008564:	2000043c 	.word	0x2000043c
 8008568:	20000440 	.word	0x20000440

0800856c <_realloc_r>:
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856e:	4607      	mov	r7, r0
 8008570:	4614      	mov	r4, r2
 8008572:	460e      	mov	r6, r1
 8008574:	b921      	cbnz	r1, 8008580 <_realloc_r+0x14>
 8008576:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800857a:	4611      	mov	r1, r2
 800857c:	f7ff bf9c 	b.w	80084b8 <_malloc_r>
 8008580:	b922      	cbnz	r2, 800858c <_realloc_r+0x20>
 8008582:	f7ff ff49 	bl	8008418 <_free_r>
 8008586:	4625      	mov	r5, r4
 8008588:	4628      	mov	r0, r5
 800858a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800858c:	f000 f830 	bl	80085f0 <_malloc_usable_size_r>
 8008590:	42a0      	cmp	r0, r4
 8008592:	d20f      	bcs.n	80085b4 <_realloc_r+0x48>
 8008594:	4621      	mov	r1, r4
 8008596:	4638      	mov	r0, r7
 8008598:	f7ff ff8e 	bl	80084b8 <_malloc_r>
 800859c:	4605      	mov	r5, r0
 800859e:	2800      	cmp	r0, #0
 80085a0:	d0f2      	beq.n	8008588 <_realloc_r+0x1c>
 80085a2:	4631      	mov	r1, r6
 80085a4:	4622      	mov	r2, r4
 80085a6:	f7ff fbe3 	bl	8007d70 <memcpy>
 80085aa:	4631      	mov	r1, r6
 80085ac:	4638      	mov	r0, r7
 80085ae:	f7ff ff33 	bl	8008418 <_free_r>
 80085b2:	e7e9      	b.n	8008588 <_realloc_r+0x1c>
 80085b4:	4635      	mov	r5, r6
 80085b6:	e7e7      	b.n	8008588 <_realloc_r+0x1c>

080085b8 <_sbrk_r>:
 80085b8:	b538      	push	{r3, r4, r5, lr}
 80085ba:	4d06      	ldr	r5, [pc, #24]	; (80085d4 <_sbrk_r+0x1c>)
 80085bc:	2300      	movs	r3, #0
 80085be:	4604      	mov	r4, r0
 80085c0:	4608      	mov	r0, r1
 80085c2:	602b      	str	r3, [r5, #0]
 80085c4:	f7f8 fc14 	bl	8000df0 <_sbrk>
 80085c8:	1c43      	adds	r3, r0, #1
 80085ca:	d102      	bne.n	80085d2 <_sbrk_r+0x1a>
 80085cc:	682b      	ldr	r3, [r5, #0]
 80085ce:	b103      	cbz	r3, 80085d2 <_sbrk_r+0x1a>
 80085d0:	6023      	str	r3, [r4, #0]
 80085d2:	bd38      	pop	{r3, r4, r5, pc}
 80085d4:	20002314 	.word	0x20002314

080085d8 <__malloc_lock>:
 80085d8:	4801      	ldr	r0, [pc, #4]	; (80085e0 <__malloc_lock+0x8>)
 80085da:	f000 b811 	b.w	8008600 <__retarget_lock_acquire_recursive>
 80085de:	bf00      	nop
 80085e0:	2000231c 	.word	0x2000231c

080085e4 <__malloc_unlock>:
 80085e4:	4801      	ldr	r0, [pc, #4]	; (80085ec <__malloc_unlock+0x8>)
 80085e6:	f000 b80c 	b.w	8008602 <__retarget_lock_release_recursive>
 80085ea:	bf00      	nop
 80085ec:	2000231c 	.word	0x2000231c

080085f0 <_malloc_usable_size_r>:
 80085f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085f4:	1f18      	subs	r0, r3, #4
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	bfbc      	itt	lt
 80085fa:	580b      	ldrlt	r3, [r1, r0]
 80085fc:	18c0      	addlt	r0, r0, r3
 80085fe:	4770      	bx	lr

08008600 <__retarget_lock_acquire_recursive>:
 8008600:	4770      	bx	lr

08008602 <__retarget_lock_release_recursive>:
 8008602:	4770      	bx	lr

08008604 <_init>:
 8008604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008606:	bf00      	nop
 8008608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800860a:	bc08      	pop	{r3}
 800860c:	469e      	mov	lr, r3
 800860e:	4770      	bx	lr

08008610 <_fini>:
 8008610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008612:	bf00      	nop
 8008614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008616:	bc08      	pop	{r3}
 8008618:	469e      	mov	lr, r3
 800861a:	4770      	bx	lr
